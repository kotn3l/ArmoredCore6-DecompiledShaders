#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _803;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _184 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _191 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _221 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _221.x * cbMtdParam._m0[9u].x;
    float _229 = _221.y * cbMtdParam._m0[9u].y;
    float _230 = _221.z * cbMtdParam._m0[9u].z;
    float _231 = _221.w * TEXCOORD_1.z;
    vec4 _243 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _243.z;
    float _251 = (_243.x * 2.0) + (-1.0);
    float _253 = (_243.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3145 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0))));
    float _263 = fma(_260, _191 * NORMAL.x, fma(_253, _198 * TANGENT.x, (_184 * _176) * _251));
    float _266 = fma(_260, _191 * NORMAL.y, fma(_253, _198 * TANGENT.y, (_184 * _177) * _251));
    float _269 = fma(_260, _191 * NORMAL.z, fma(_253, _198 * TANGENT.z, (_184 * _178) * _251));
    float _273 = inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269)));
    float _274 = _273 * _263;
    float _275 = _273 * _266;
    float _276 = _273 * _269;
    float _3156 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _277 = isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0));
    float _3167 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _278 = isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0));
    float _3178 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3189 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3200 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _297 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _349 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _339);
    float _350 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _339);
    float _351 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _339);
    float _355 = inversesqrt(dot(vec3(_349, _350, _351), vec3(_349, _350, _351)));
    float _356 = _349 * _355;
    float _357 = _350 * _355;
    float _358 = _351 * _355;
    float _364 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _365 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _386 = fma(_276, cbSceneParam._m0[5u].z, fma(_275, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _274));
    float _389 = fma(_276, cbSceneParam._m0[6u].z, fma(_275, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _274));
    float _392 = fma(_276, cbSceneParam._m0[7u].z, fma(_275, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _274));
    uint _405 = uint(roundEven(NORMAL.w)) * 13u;
    uint _408 = (_405 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _414 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0)))) * cbInstanceData._m0[_408].x;
    float _415 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0)))) * cbInstanceData._m0[_408].y;
    float _416 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_408].z;
    float _3211 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _417 = isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0));
    float _3222 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _418 = isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0));
    float _3233 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _419 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
    vec4 _428 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _364, cbSceneParam._m0[86u].y * _365));
    float _431 = _428.x * TEXCOORD_1.w;
    float _432 = dot(vec3(_274, _275, _276), vec3(_356, _357, _358));
    float _435 = _432 * 2.0;
    float _439 = (_435 * _274) - _356;
    float _440 = (_435 * _275) - _357;
    float _441 = (_435 * _276) - _358;
    float _445 = abs(dot(vec3(_356, _357, _358), vec3(_274, _275, _276)));
    float _3244 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _447 = sqrt(_278);
    float _460 = exp2((_447 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_447 * 3.0));
    float _492 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _802;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _527 = fma(_500, cbModelParam._m0[26u].z, fma(_496, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _492));
        float _531 = fma(_500, cbModelParam._m0[27u].z, fma(_496, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _492));
        float _535 = fma(_500, cbModelParam._m0[28u].z, fma(_496, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _492));
        float _560 = _492 + _274;
        float _561 = _496 + _275;
        float _562 = _500 + _276;
        float _572 = fma(_562, cbModelParam._m0[26u].z, fma(_561, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _560)) - _527;
        float _573 = fma(_562, cbModelParam._m0[27u].z, fma(_561, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _560)) - _531;
        float _574 = fma(_562, cbModelParam._m0[28u].z, fma(_561, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _560)) - _535;
        float _578 = inversesqrt(dot(vec3(_572, _573, _574), vec3(_572, _573, _574)));
        float _591 = ((_578 * _572) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_527 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_578 * _573) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_531 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_578 * _574) / cbModelParam._m0[34u].z) + ((((((_535 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_591, _592, _593), 0.0);
        float _630 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_596.x + (-0.5));
        float _632 = _630 * (_596.y + (-0.5));
        float _633 = _630 * (_596.z + (-0.5));
        float _640 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_603.x + (-0.5));
        float _642 = _640 * (_603.y + (-0.5));
        float _643 = _640 * (_603.z + (-0.5));
        float _650 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_610.x + (-0.5));
        float _652 = _650 * (_610.y + (-0.5));
        float _653 = _650 * (_610.z + (-0.5));
        float _660 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_617.x + (-0.5));
        float _662 = _660 * (_617.y + (-0.5));
        float _663 = _660 * (_617.z + (-0.5));
        float _664 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        float _665 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _666 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _667 = _631 * 0.5;
        float _668 = _641 * 0.5;
        float _669 = _651 * 0.5;
        float _670 = dot(vec3(_667, _668, _669), vec3(_667, _668, _669));
        float _675 = (_670 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_670);
        float _684 = (dot(vec3(_274, _275, _276), vec3(_675 * _667, _675 * _668, _675 * _669)) + 1.0) * 0.5;
        float _3270 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
        float _694 = sqrt(((_668 * _668) + (_667 * _667)) + (_669 * _669)) / (_664 + 9.9999997473787516355514526367188e-06);
        float _3281 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _695 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _696 = _695 * 2.0;
        float _700 = (1.0 - _695) / (_695 + 1.0);
        float _3292 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
        float _710 = ((((1.0 - _701) * (_696 + 2.0)) * exp2(log2(isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) * (_696 + 1.0))) + _701) * _664;
        float _711 = _632 * 0.5;
        float _712 = _642 * 0.5;
        float _713 = _652 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _727 = (dot(vec3(_274, _275, _276), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3303 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _736 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_665 + 9.9999997473787516355514526367188e-06);
        float _3314 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3325 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0))) * (_738 + 1.0))) + _743) * _665;
        float _753 = _633 * 0.5;
        float _754 = _643 * 0.5;
        float _755 = _653 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_274, _275, _276), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3336 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_666 + 9.9999997473787516355514526367188e-06);
        float _3347 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3358 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_780 + 1.0))) + _785) * _666;
        _802 = _633;
        _804 = _632;
        _805 = _631;
        _806 = _643;
        _807 = _642;
        _808 = _641;
        _809 = _653;
        _810 = _652;
        _811 = _651;
        _812 = _666;
        _813 = _665;
        _814 = _664;
        _815 = cbModelParam._m0[36u].z * (isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)));
        _816 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _817 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
    }
    else
    {
        _802 = _803;
        _804 = _803;
        _805 = _803;
        _806 = _803;
        _807 = _803;
        _808 = _803;
        _809 = _803;
        _810 = _803;
        _811 = _803;
        _812 = _803;
        _813 = _803;
        _814 = _803;
        _815 = 0.0;
        _816 = 0.0;
        _817 = 0.0;
    }
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _843 = fma(_500, cbModelParam._m0[30u].z, fma(_496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _492));
        float _847 = fma(_500, cbModelParam._m0[31u].z, fma(_496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _492));
        float _851 = fma(_500, cbModelParam._m0[32u].z, fma(_496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _492));
        float _874 = _492 + _274;
        float _875 = _496 + _275;
        float _876 = _500 + _276;
        float _886 = fma(_876, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _874)) - _843;
        float _887 = fma(_876, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _874)) - _847;
        float _888 = fma(_876, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _874)) - _851;
        float _892 = inversesqrt(dot(vec3(_886, _887, _888), vec3(_886, _887, _888)));
        float _905 = ((_892 * _886) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_843 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_892 * _887) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_847 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _907 = ((_892 * _888) / cbModelParam._m0[35u].z) + ((((((_851 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_905, _906, _907), 0.0);
        float _942 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_909.x + (-0.5));
        float _944 = _942 * (_909.y + (-0.5));
        float _945 = _942 * (_909.z + (-0.5));
        float _952 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_916.x + (-0.5));
        float _954 = _952 * (_916.y + (-0.5));
        float _955 = _952 * (_916.z + (-0.5));
        float _962 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_923.x + (-0.5));
        float _964 = _962 * (_923.y + (-0.5));
        float _965 = _962 * (_923.z + (-0.5));
        float _972 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_930.x + (-0.5));
        float _974 = _972 * (_930.y + (-0.5));
        float _975 = _972 * (_930.z + (-0.5));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = _943 * 0.5;
        float _980 = _953 * 0.5;
        float _981 = _963 * 0.5;
        float _982 = dot(vec3(_979, _980, _981), vec3(_979, _980, _981));
        float _987 = (_982 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_982);
        float _995 = (dot(vec3(_274, _275, _276), vec3(_987 * _979, _987 * _980, _987 * _981)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1004 = sqrt(((_980 * _980) + (_979 * _979)) + (_981 * _981)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _3421 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_1006 + 1.0))) + _1011) * _976;
        float _1021 = _944 * 0.5;
        float _1022 = _954 * 0.5;
        float _1023 = _964 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_274, _275, _276), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3454 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1048 + 1.0))) + _1053) * _977;
        float _1063 = _945 * 0.5;
        float _1064 = _955 * 0.5;
        float _1065 = _965 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_274, _275, _276), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3465 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3476 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3487 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))) * (_1090 + 1.0))) + _1095) * _978;
        _1112 = _945;
        _1113 = _944;
        _1114 = _943;
        _1115 = _955;
        _1116 = _954;
        _1117 = _953;
        _1118 = _965;
        _1119 = _964;
        _1120 = _963;
        _1121 = _978;
        _1122 = _977;
        _1123 = _976;
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1126 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _803;
        _1113 = _803;
        _1114 = _803;
        _1115 = _803;
        _1116 = _803;
        _1117 = _803;
        _1118 = _803;
        _1119 = _803;
        _1120 = _803;
        _1121 = _803;
        _1122 = _803;
        _1123 = _803;
        _1124 = 0.0;
        _1125 = 0.0;
        _1126 = 0.0;
    }
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _815)) + _815;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _816)) + _816;
    float _1138 = (cbModelParam._m0[1u].x * (_1126 - _817)) + _817;
    float _1159 = fma(_1138, cbSceneParam._m0[89u].z, fma(_1137, cbSceneParam._m0[89u].y, _1136 * cbSceneParam._m0[89u].x));
    float _1162 = fma(_1138, cbSceneParam._m0[90u].z, fma(_1137, cbSceneParam._m0[90u].y, _1136 * cbSceneParam._m0[90u].x));
    float _1165 = fma(_1138, cbSceneParam._m0[91u].z, fma(_1137, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1136));
    float _1180 = _439 * 0.5;
    float _1181 = _440 * 0.5;
    float _1182 = _441 * 0.5;
    float _1183 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1114, _1117, _1120, _1123));
    float _1186 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1189 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1223;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1196 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_802, _806, _809, _812));
        float _1200 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_804, _807, _810, _813));
        float _1204 = dot(vec4(_1180, _1181, _1182, 1.0), vec4(_805, _808, _811, _814));
        float _1211 = dot(vec4(cbModelParam._m0[39u]), vec4(_1180, _1181, _1182, 1.0));
        _1223 = dot(vec3(isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)), isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1211) ? 0.0 : (isnan(0.0) ? _1211 : max(0.0, _1211))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1223 = 1.0;
    }
    float _1234;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1225 = dot(vec4(cbModelParam._m0[40u]), vec4(_1180, _1181, _1182, 1.0));
        _1234 = dot(vec3(isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0)), isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1225) ? 0.0 : (isnan(0.0) ? _1225 : max(0.0, _1225))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1234 = 1.0;
    }
    float _1238 = (_1234 * cbModelParam._m0[1u].x) + (_1223 * (1.0 - cbModelParam._m0[1u].x));
    float _1248 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _278);
    float _1249 = isnan(_1248) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1248 : min(cbModelParam._m0[25u].z, _1248));
    float _1331;
    float _1333;
    float _1335;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1298 = fma(_500, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _492)) + cbModelParam._m0[13u].w;
        float _1302 = fma(_500, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _492)) + cbModelParam._m0[14u].w;
        float _1306 = fma(_500, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _492)) + cbModelParam._m0[15u].w;
        float _1309 = fma(_441, cbModelParam._m0[13u].z, fma(_440, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _439));
        float _1312 = fma(_441, cbModelParam._m0[14u].z, fma(_440, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _439));
        float _1315 = fma(_441, cbModelParam._m0[15u].z, fma(_440, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _439));
        float _1343;
        if (_1309 > 0.0)
        {
            _1343 = abs((1.0 - _1298) / _1309);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1298 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1343 = frontier_phi_14_12_ladder;
        }
        float _1570;
        if (_1312 > 0.0)
        {
            _1570 = abs((1.0 - _1302) / _1312);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1312 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1302 + 1.0) / _1312);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1570 = frontier_phi_23_19_ladder;
        }
        float _1816;
        if (_1315 > 0.0)
        {
            _1816 = abs((1.0 - _1306) / _1315);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1306 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1816 = frontier_phi_35_30_ladder;
        }
        float _1818 = isnan(_1570) ? _1343 : (isnan(_1343) ? _1570 : min(_1343, _1570));
        float _1819 = isnan(_1816) ? _1818 : (isnan(_1818) ? _1816 : min(_1818, _1816));
        float _1823 = (_1819 * _1309) + _1298;
        float _1824 = (_1819 * _1312) + _1302;
        float _1825 = (_1819 * _1315) + _1306;
        float _1826 = _1819 * 9.9999997473787516355514526367188e-05;
        float _1828 = (-1.0) - _1826;
        float _1830 = _1826 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1825 > _1830) || ((_1825 < _1828) || ((_1824 > _1830) || ((_1824 < _1828) || ((_1823 < _1828) || (_1823 > _1830))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1949 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1825, cbModelParam._m0[9u].z, fma(_1824, cbModelParam._m0[9u].y, _1823 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1825, cbModelParam._m0[10u].z, fma(_1824, cbModelParam._m0[10u].y, _1823 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1825, cbModelParam._m0[11u].z, fma(_1824, cbModelParam._m0[11u].y, _1823 * cbModelParam._m0[11u].x))), _1249);
            frontier_phi_13_35_ladder = _1949.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1949.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1949.x * cbModelParam._m0[1u].y;
        }
        _1331 = frontier_phi_13_35_ladder_2;
        _1333 = frontier_phi_13_35_ladder_1;
        _1335 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_439, _440, _441), _1249);
        _1331 = _1319.x * cbModelParam._m0[1u].y;
        _1333 = _1319.y * cbModelParam._m0[1u].y;
        _1335 = _1319.z * cbModelParam._m0[1u].y;
    }
    float _1339 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _278);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1339 : min(cbModelParam._m0[25u].w, _1339));
    float _1433;
    float _1435;
    float _1437;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1397 = fma(_500, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _492)) + cbModelParam._m0[21u].w;
        float _1401 = fma(_500, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _492)) + cbModelParam._m0[22u].w;
        float _1405 = fma(_500, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _492)) + cbModelParam._m0[23u].w;
        float _1408 = fma(_441, cbModelParam._m0[21u].z, fma(_440, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _439));
        float _1411 = fma(_441, cbModelParam._m0[22u].z, fma(_440, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _439));
        float _1414 = fma(_441, cbModelParam._m0[23u].z, fma(_440, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _439));
        float _1575;
        if (_1408 > 0.0)
        {
            _1575 = abs((1.0 - _1397) / _1408);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1397 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1575 = frontier_phi_25_21_ladder;
        }
        float _1843;
        if (_1411 > 0.0)
        {
            _1843 = abs((1.0 - _1401) / _1411);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1411 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1401 + 1.0) / _1411);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1843 = frontier_phi_37_32_ladder;
        }
        float _2048;
        if (_1414 > 0.0)
        {
            _2048 = abs((1.0 - _1405) / _1414);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1405 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2048 = frontier_phi_46_43_ladder;
        }
        float _2050 = isnan(_1843) ? _1575 : (isnan(_1575) ? _1843 : min(_1575, _1843));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1408) + _1397;
        float _2056 = (_2051 * _1411) + _1401;
        float _2057 = (_2051 * _1414) + _1405;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2059 = (-1.0) - _2058;
        float _2061 = _2058 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2057 > _2061) || ((_2057 < _2059) || ((_2056 > _2061) || ((_2056 < _2059) || ((_2055 < _2059) || (_2055 > _2061))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2057, cbModelParam._m0[17u].z, fma(_2056, cbModelParam._m0[17u].y, _2055 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2057, cbModelParam._m0[18u].z, fma(_2056, cbModelParam._m0[18u].y, _2055 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2057, cbModelParam._m0[19u].z, fma(_2056, cbModelParam._m0[19u].y, _2055 * cbModelParam._m0[19u].x))), _1340);
            frontier_phi_22_46_ladder = _2258.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2258.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2258.x * cbModelParam._m0[1u].z;
        }
        _1433 = frontier_phi_22_46_ladder_2;
        _1435 = frontier_phi_22_46_ladder_1;
        _1437 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1417 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_439, _440, _441), _1340);
        _1433 = _1417.x * cbModelParam._m0[1u].z;
        _1435 = _1417.y * cbModelParam._m0[1u].z;
        _1437 = _1417.z * cbModelParam._m0[1u].z;
    }
    float _1449 = ((((1.0 - _460) * ((_447 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_460 * _447)) * _431;
    float _1450 = _1449 * ((cbModelParam._m0[1u].w * (_1433 - _1331)) + _1331);
    float _1451 = _1449 * ((cbModelParam._m0[1u].w * (_1435 - _1333)) + _1333);
    float _1452 = _1449 * ((cbModelParam._m0[1u].w * (_1437 - _1335)) + _1335);
    float _1455 = fma(_1452, cbSceneParam._m0[89u].z, fma(_1451, cbSceneParam._m0[89u].y, _1450 * cbSceneParam._m0[89u].x));
    float _1458 = fma(_1452, cbSceneParam._m0[90u].z, fma(_1451, cbSceneParam._m0[90u].y, _1450 * cbSceneParam._m0[90u].x));
    float _1461 = fma(_1452, cbSceneParam._m0[91u].z, fma(_1451, cbSceneParam._m0[91u].y, _1450 * cbSceneParam._m0[91u].x));
    vec4 _1469 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_364, _365));
    float _1471 = _1469.w;
    float _1483 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1471);
    float _1484 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1471);
    float _1485 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1471);
    uvec4 _1489 = floatBitsToUint(cbInstanceData._m0[_405 + 5u]);
    uint _1491 = _1489.x * 14u;
    uint _1492 = _1491 + 13u;
    float _1499 = _431 + (-1.0);
    float _1504 = (cbLight._m0[_1492].x * _1499) + 1.0;
    float _1505 = (cbLight._m0[_1492].y * _1499) + 1.0;
    float _1506 = (cbLight._m0[_1492].z * _1499) + 1.0;
    float _1507 = (cbLight._m0[_1492].w * _1499) + 1.0;
    uint _1508 = _1491 + 5u;
    float _1514 = isnan(1.0) ? _1505 : (isnan(_1505) ? 1.0 : min(_1505, 1.0));
    uint _1518 = _1491 + 4u;
    float _1528 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
    uint _1532 = _1491 | 1u;
    float _1543 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_274, _275, _276));
    float _1546 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_274, _275, _276));
    float _3623 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
    float _3634 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1551 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.3183098733425140380859375;
    float _1553 = (isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * 0.3183098733425140380859375;
    float _1560 = ((cbLight._m0[_1508].x * _1514) * _1553) + (((cbLight._m0[_1518].x * _1483) * _1528) * _1551);
    float _1561 = ((_1514 * cbLight._m0[_1508].y) * _1553) + (((cbLight._m0[_1518].y * _1484) * _1528) * _1551);
    float _1562 = ((_1514 * cbLight._m0[_1508].z) * _1553) + (((cbLight._m0[_1518].z * _1485) * _1528) * _1551);
    uvec4 _1567 = floatBitsToUint(cbLight._m0[_1491 + 12u]);
    bool _1569 = _1567.x == 0u;
    float _1580;
    float _1582;
    float _1584;
    if (_1569)
    {
        _1580 = _1560;
        _1582 = _1561;
        _1584 = _1562;
    }
    else
    {
        uint _1588 = _1491 + 6u;
        float _1604 = (dot(vec3(cbLight._m0[_1491 + 2u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1605 = _1604 * _1604;
        float _3645 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1607 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1580 = (((cbLight._m0[_1588].x * 0.3183098733425140380859375) * _1606) * _1607) + _1560;
        _1582 = (((cbLight._m0[_1588].y * 0.3183098733425140380859375) * _1606) * _1607) + _1561;
        _1584 = (((cbLight._m0[_1588].z * 0.3183098733425140380859375) * _1606) * _1607) + _1562;
    }
    bool _1587 = _1567.y == 0u;
    float _1625;
    float _1627;
    float _1629;
    if (_1587)
    {
        _1625 = _1580;
        _1627 = _1582;
        _1629 = _1584;
    }
    else
    {
        uint _1787 = _1491 + 7u;
        float _1803 = (dot(vec3(cbLight._m0[_1491 + 3u].xyz), vec3(_274, _275, _276)) * 0.5) + 0.5;
        float _1804 = _1803 * _1803;
        float _3661 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1806 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1625 = (((cbLight._m0[_1787].x * 0.3183098733425140380859375) * _1805) * _1806) + _1580;
        _1627 = (((cbLight._m0[_1787].y * 0.3183098733425140380859375) * _1805) * _1806) + _1582;
        _1629 = (((cbLight._m0[_1787].z * 0.3183098733425140380859375) * _1805) * _1806) + _1584;
    }
    uint _1632 = _1491 + 8u;
    float _1645 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1491].w)) * _278) * 0.949999988079071044921875);
    float _1646 = _1645 * _1645;
    float _1647 = cbLight._m0[_1491].x + _356;
    float _1648 = cbLight._m0[_1491].y + _357;
    float _1649 = cbLight._m0[_1491].z + _358;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1654 = _1653 * _1647;
    float _1655 = _1653 * _1648;
    float _1656 = _1653 * _1649;
    float _1657 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1491].xyz));
    float _3677 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _3688 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _1661 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _1662 = dot(vec3(_274, _275, _276), vec3(_1654, _1655, _1656));
    float _3699 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
    float _1665 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _1666 = dot(vec3(cbLight._m0[_1491].xyz), vec3(_1654, _1655, _1656));
    float _3710 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    float _1670 = _1646 * _1646;
    float _1674 = ((_1665 * _1665) * (_1670 + (-1.0))) + 1.0;
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1686 = 1.0 - _1646;
    float _1697 = (0.5 / (((_1661 * ((_1660 * _1686) + _1646)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1686) + _1646) * _1660))) * _1660;
    float _3721 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * (_1670 / ((_1674 * _1674) * 3.141590118408203125));
    uint _1713 = _1491 + 9u;
    float _1724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1532].w)) * _278) * 0.949999988079071044921875);
    float _1725 = _1724 * _1724;
    float _1726 = cbLight._m0[_1532].x + _356;
    float _1727 = cbLight._m0[_1532].y + _357;
    float _1728 = cbLight._m0[_1532].z + _358;
    float _1732 = inversesqrt(dot(vec3(_1726, _1727, _1728), vec3(_1726, _1727, _1728)));
    float _1733 = _1732 * _1726;
    float _1734 = _1732 * _1727;
    float _1735 = _1732 * _1728;
    float _1736 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1532].xyz));
    float _3732 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
    float _1739 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _1740 = dot(vec3(_274, _275, _276), vec3(_1733, _1734, _1735));
    float _3743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _1743 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _1744 = dot(vec3(cbLight._m0[_1532].xyz), vec3(_1733, _1734, _1735));
    float _3754 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
    float _1748 = _1725 * _1725;
    float _1752 = ((_1743 * _1743) * (_1748 + (-1.0))) + 1.0;
    float _1761 = (exp2(log2(1.0 - (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1762 = 1.0 - _1725;
    float _1772 = (0.5 / (((_1661 * ((_1739 * _1762) + _1725)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1762) + _1725) * _1739))) * _1739;
    float _3765 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1774 = (isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1748 / ((_1752 * _1752) * 3.141590118408203125));
    float _1784 = (((_1761 * cbLight._m0[_1713].x) * _1774) * _1514) + ((((cbLight._m0[_1632].x * _1483) * _1685) * _1699) * _1528);
    float _1785 = (((_1761 * cbLight._m0[_1713].y) * _1774) * _1514) + ((((cbLight._m0[_1632].y * _1484) * _1685) * _1699) * _1528);
    float _1786 = (((_1761 * cbLight._m0[_1713].z) * _1774) * _1514) + ((((cbLight._m0[_1632].z * _1485) * _1685) * _1699) * _1528);
    float _1848;
    float _1850;
    float _1852;
    if (_1569)
    {
        _1848 = _1784;
        _1850 = _1785;
        _1852 = _1786;
    }
    else
    {
        uint _1854 = _1491 + 2u;
        uint _1858 = _1491 + 10u;
        float _1872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _278) * 0.949999988079071044921875);
        float _1873 = _1872 * _1872;
        float _1874 = cbLight._m0[_1854].x + _356;
        float _1875 = cbLight._m0[_1854].y + _357;
        float _1876 = cbLight._m0[_1854].z + _358;
        float _1880 = inversesqrt(dot(vec3(_1874, _1875, _1876), vec3(_1874, _1875, _1876)));
        float _1881 = _1880 * _1874;
        float _1882 = _1880 * _1875;
        float _1883 = _1880 * _1876;
        float _1884 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1854].xyz));
        float _3776 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1887 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1888 = dot(vec3(_274, _275, _276), vec3(_1881, _1882, _1883));
        float _3787 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1891 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1892 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1881, _1882, _1883));
        float _3798 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1896 = _1873 * _1873;
        float _1900 = ((_1891 * _1891) * (_1896 + (-1.0))) + 1.0;
        float _1909 = (exp2(log2(1.0 - (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1910 = 1.0 - _1873;
        float _1920 = (0.5 / (((_1661 * ((_1887 * _1910) + _1873)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _1910) + _1873) * _1887))) * _1887;
        float _3809 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1922 = (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * (_1896 / ((_1900 * _1900) * 3.141590118408203125));
        float _1923 = isnan(1.0) ? _1506 : (isnan(_1506) ? 1.0 : min(_1506, 1.0));
        _1848 = (((_1909 * cbLight._m0[_1858].x) * _1922) * _1923) + _1784;
        _1850 = (((_1909 * cbLight._m0[_1858].y) * _1922) * _1923) + _1785;
        _1852 = (((_1909 * cbLight._m0[_1858].z) * _1922) * _1923) + _1786;
    }
    float _1958;
    float _1960;
    float _1962;
    if (_1587)
    {
        _1958 = _1848;
        _1960 = _1850;
        _1962 = _1852;
    }
    else
    {
        uint _1969 = _1491 + 3u;
        uint _1973 = _1491 + 11u;
        float _1987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1969].w)) * _278) * 0.949999988079071044921875);
        float _1988 = _1987 * _1987;
        float _1989 = cbLight._m0[_1969].x + _356;
        float _1990 = cbLight._m0[_1969].y + _357;
        float _1991 = cbLight._m0[_1969].z + _358;
        float _1995 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
        float _1996 = _1995 * _1989;
        float _1997 = _1995 * _1990;
        float _1998 = _1995 * _1991;
        float _1999 = dot(vec3(_274, _275, _276), vec3(cbLight._m0[_1969].xyz));
        float _3825 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
        float _2003 = dot(vec3(_274, _275, _276), vec3(_1996, _1997, _1998));
        float _3836 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2006 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _2007 = dot(vec3(cbLight._m0[_1969].xyz), vec3(_1996, _1997, _1998));
        float _3847 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2011 = _1988 * _1988;
        float _2015 = ((_2006 * _2006) * (_2011 + (-1.0))) + 1.0;
        float _2024 = (exp2(log2(1.0 - (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2025 = 1.0 - _1988;
        float _2035 = (0.5 / (((_1661 * ((_2002 * _2025) + _1988)) + 9.9999999392252902907785028219223e-09) + (((_1661 * _2025) + _1988) * _2002))) * _2002;
        float _3858 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2037 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_2011 / ((_2015 * _2015) * 3.141590118408203125));
        float _2038 = isnan(1.0) ? _1507 : (isnan(_1507) ? 1.0 : min(_1507, 1.0));
        _1958 = (((_2024 * cbLight._m0[_1973].x) * _2037) * _2038) + _1848;
        _1960 = (((_2024 * cbLight._m0[_1973].y) * _2037) * _2038) + _1850;
        _1962 = (((_2024 * cbLight._m0[_1973].z) * _2037) * _2038) + _1852;
    }
    float _2173;
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    if (_1489.y == 0u)
    {
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2113;
        float _2115 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2113;
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2113;
        uvec4 _2128 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2129 = _2128.x;
        uint _2140 = uint((float(_2128.y) * floor(float(uint(cbSceneParam._m0[85u].y * _365) / _2129))) + floor(float(uint(cbSceneParam._m0[85u].x * _364) / _2129)));
        float _2150 = (log2(_2116 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2151 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        uint _2154 = uint(isnan(14.0) ? _2151 : (isnan(_2151) ? 14.0 : min(_2151, 14.0)));
        uvec4 _2159 = texelFetch(g_lightClusterGridBuffer, int(((_2154 << 2u) + (_2140 << 6u)) >> 2u));
        uint _2160 = _2159.x;
        uint _2161 = _2128.z;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        if (((((1u << ((_2161 >> 4u) & 15u)) + 4294967295u) & _2160) == 0u) || ((_2161 & 240u) == 0u))
        {
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
            _2273 = 0.0;
        }
        else
        {
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2272;
            float _2274;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            uint _2414 = 0u;
            uint _2423;
            bool _2424;
            for (;;)
            {
                _2423 = texelFetch(g_lightClassification, int((((_2154 << 5u) + (_2140 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                _2424 = _2423 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2424)
                {
                    frontier_phi_61_pred = _2408;
                    frontier_phi_61_pred_1 = _2413;
                    frontier_phi_61_pred_2 = _2412;
                    frontier_phi_61_pred_3 = _2411;
                    frontier_phi_61_pred_4 = _2410;
                    frontier_phi_61_pred_5 = _2409;
                }
                else
                {
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    uint _2538;
                    _2532 = _2408;
                    _2533 = _2409;
                    _2534 = _2410;
                    _2535 = _2411;
                    _2536 = _2412;
                    _2537 = _2413;
                    _2538 = _2423;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    for (;;)
                    {
                        uint _2542 = uint(findLSB(_2538)) + (_2414 << 5u);
                        uint _2539 = (_2538 + 4294967295u) & _2538;
                        uint _2544 = _2542 * 48u;
                        vec4 _2558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2544)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2544 + 3u)).x));
                        uint _2564 = (_2542 * 48u) + 4u;
                        vec4 _2577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2564)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2564 + 3u)).x));
                        uint _2583 = (_2542 * 48u) + 8u;
                        vec3 _2594 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2583)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2583 + 2u)).x));
                        float _2598 = _2558.x - _2114;
                        float _2599 = _2558.y - _2115;
                        float _2600 = _2558.z - _2116;
                        float _2601 = dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600));
                        float _2604 = inversesqrt(_2601);
                        float _2605 = _2604 * _2598;
                        float _2606 = _2604 * _2599;
                        float _2607 = _2604 * _2600;
                        float _2608 = dot(vec3(_386, _389, _392), vec3(_2605, _2606, _2607));
                        float _2613 = 1.0 - (_2601 * _2558.w);
                        float _3884 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                        float _2614 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                        float _2615 = sqrt(_2601) * _2577.w;
                        float _2618 = 1.39999997615814208984375 / (_2615 + 1.39999997615814208984375);
                        float _2619 = _2618 * _2618;
                        float _2622 = ((1.0 - _2619) * _2608) + _2619;
                        float _2625 = _2615 * _2615;
                        float _2629 = ((isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))) * _2614) / ((_2625 * 0.699999988079071044921875) + 1.0);
                        float _2633 = (-0.0) - _2114;
                        float _2634 = (-0.0) - _2115;
                        float _2635 = (-0.0) - _2116;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2640 = _2639 * _2633;
                        float _2641 = _2639 * _2634;
                        float _2642 = _2639 * _2635;
                        float _2650 = exp2(log2(1.0 / ((_2625 * 3.5) + 5.0)) * 0.25);
                        float _2651 = 1.0 - _447;
                        float _2658 = sqrt(1.0 - ((1.0 - (_2651 * _2651)) * (1.0 - (_2650 * _2650))));
                        float _2659 = _2658 * _2658;
                        float _2660 = _2659 * _2659;
                        float _2661 = _2640 + _2605;
                        float _2662 = _2641 + _2606;
                        float _2663 = _2642 + _2607;
                        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
                        float _2671 = dot(vec3(_386, _389, _392), vec3(_2640, _2641, _2642));
                        float _3900 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2674 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                        float _2675 = dot(vec3(_386, _389, _392), vec3(_2667 * _2661, _2667 * _2662, _2667 * _2663));
                        float _3911 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
                        float _2678 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2682 = ((_2678 * _2678) * (_2660 + (-1.0))) + 1.0;
                        float _2683 = _2618 * _2659;
                        float _2684 = _2683 * _2683;
                        float _2687 = ((1.0 - _2684) * _2608) + _2684;
                        float _3922 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
                        float _2688 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                        float _2689 = 1.0 - _2659;
                        float _2699 = (0.5 / (((_2688 * ((_2674 * _2689) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2688 * _2689) + _2659) * _2674))) * _2688;
                        float _3933 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2710 = (((_2660 * 3.1415927410125732421875) * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) / ((_2682 * _2682) * ((_2625 * 2.1991131305694580078125) + 3.141590118408203125))) * _2614;
                        _2467 = (_2629 * _2577.x) + _2535;
                        _2468 = (_2629 * _2577.y) + _2536;
                        _2469 = (_2629 * _2577.z) + _2537;
                        _2464 = (_2710 * _2594.x) + _2532;
                        _2465 = (_2710 * _2594.y) + _2533;
                        _2466 = (_2710 * _2594.z) + _2534;
                        if (_2539 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2532 = _2464;
                            _2533 = _2465;
                            _2534 = _2466;
                            _2535 = _2467;
                            _2536 = _2468;
                            _2537 = _2469;
                            _2538 = _2539;
                        }
                    }
                    frontier_phi_61_pred = _2464;
                    frontier_phi_61_pred_1 = _2469;
                    frontier_phi_61_pred_2 = _2468;
                    frontier_phi_61_pred_3 = _2467;
                    frontier_phi_61_pred_4 = _2466;
                    frontier_phi_61_pred_5 = _2465;
                }
                _2264 = frontier_phi_61_pred;
                _2274 = frontier_phi_61_pred_1;
                _2272 = frontier_phi_61_pred_2;
                _2270 = frontier_phi_61_pred_3;
                _2268 = frontier_phi_61_pred_4;
                _2266 = frontier_phi_61_pred_5;
                uint _2415 = _2414 + 1u;
                if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2408 = _2264;
                    _2409 = _2266;
                    _2410 = _2268;
                    _2411 = _2270;
                    _2412 = _2272;
                    _2413 = _2274;
                    _2414 = _2415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
            _2273 = _2274;
        }
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.z;
        uint _2280 = (_2278 >> 8u) & 15u;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((4294967295u << _2280) & _2160) == 0u)
        {
            _2376 = _2263;
            _2378 = _2265;
            _2380 = _2267;
            _2382 = _2269;
            _2384 = _2271;
            _2386 = _2273;
        }
        else
        {
            float _2401 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
            float _2402 = _2401 * _2114;
            float _2403 = _2401 * _2115;
            float _2404 = _2401 * _2116;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2280 < ((_2278 >> 12u) & 15u))
            {
                float _2377;
                float _2379;
                float _2381;
                float _2383;
                float _2385;
                float _2387;
                float _2515 = _2263;
                float _2516 = _2265;
                float _2517 = _2267;
                float _2518 = _2269;
                float _2519 = _2271;
                float _2520 = _2273;
                uint _2521 = _2280;
                uint _2530;
                bool _2531;
                for (;;)
                {
                    _2530 = texelFetch(g_lightClassification, int((((_2154 << 5u) + (_2140 << 9u)) + (_2521 << 2u)) >> 2u)).x;
                    _2531 = _2530 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2531)
                    {
                        frontier_phi_67_pred = _2518;
                        frontier_phi_67_pred_1 = _2519;
                        frontier_phi_67_pred_2 = _2520;
                        frontier_phi_67_pred_3 = _2517;
                        frontier_phi_67_pred_4 = _2516;
                        frontier_phi_67_pred_5 = _2515;
                    }
                    else
                    {
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _2728 = _2515;
                        float _2729 = _2516;
                        float _2730 = _2517;
                        float _2731 = _2518;
                        float _2732 = _2519;
                        float _2733 = _2520;
                        uint _2734 = _2530;
                        uint _2735;
                        vec4 _2760;
                        float _2761;
                        vec4 _2776;
                        vec3 _2788;
                        vec4 _2804;
                        vec4 _2820;
                        float _2867;
                        bool _2868;
                        for (;;)
                        {
                            uint _2745 = ((_2521 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2734));
                            _2735 = (_2734 + 4294967295u) & _2734;
                            uint _2747 = _2745 * 40u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            _2761 = _2760.w;
                            uint _2763 = (_2745 * 40u) + 4u;
                            _2776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2763 + 3u)).x));
                            uint _2778 = (_2745 * 40u) + 8u;
                            _2788 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2778 + 2u)).x));
                            uint _2791 = (_2745 * 40u) + 16u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2807 = (_2745 * 40u) + 20u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2823 = (_2745 * 40u) + 24u;
                            vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2823)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2823 + 3u)).x));
                            uint _2842 = (_2745 * 40u) + 28u;
                            vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            _2867 = fma(_2116, _2855.z, fma(_2115, _2855.y, _2855.x * _2114)) + _2855.w;
                            _2868 = !((fma(_2116, _2836.z, fma(_2115, _2836.y, _2836.x * _2114)) + _2836.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2868)
                            {
                                float _2895 = _2760.x - _2114;
                                float _2896 = _2760.y - _2115;
                                float _2897 = _2760.z - _2116;
                                float _2898 = dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897));
                                float _2901 = inversesqrt(_2898);
                                float _2902 = _2901 * _2895;
                                float _2903 = _2901 * _2896;
                                float _2904 = _2901 * _2897;
                                float _2908 = 1.0 - (_2898 / (_2761 * _2761));
                                float _3944 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2909 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
                                float _2913 = sqrt(_2898) * _2776.w;
                                float _2915 = 1.39999997615814208984375 / (_2913 + 1.39999997615814208984375);
                                float _2916 = _2915 * _2915;
                                float _2919 = ((1.0 - _2916) * dot(vec3(_2902, _2903, _2904), vec3(_386, _389, _392))) + _2916;
                                float _2922 = _2913 * _2913;
                                float _2926 = (fma(_2116, _2804.z, fma(_2115, _2804.y, _2804.x * _2114)) + _2804.w) / _2867;
                                float _2927 = (fma(_2116, _2820.z, fma(_2115, _2820.y, _2820.x * _2114)) + _2820.w) / _2867;
                                float _2931 = 1.0 - dot(vec2(_2926, _2927), vec2(_2926, _2927));
                                float _3960 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2932 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
                                float _2933 = _2932 * (((isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))) * _2909) / ((_2922 * 0.699999988079071044921875) + 1.0));
                                float _2945 = exp2(log2(1.0 / ((_2922 * 3.5) + 5.0)) * 0.25);
                                float _2946 = 1.0 - _447;
                                float _2953 = sqrt(1.0 - ((1.0 - (_2946 * _2946)) * (1.0 - (_2945 * _2945))));
                                float _2954 = _2953 * _2953;
                                float _2955 = _2954 * _2954;
                                float _2956 = _2902 - _2402;
                                float _2957 = _2903 - _2403;
                                float _2958 = _2904 - _2404;
                                float _2962 = inversesqrt(dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958)));
                                float _2966 = dot(vec3(_386, _389, _392), vec3((-0.0) - _2402, (-0.0) - _2403, (-0.0) - _2404));
                                float _3971 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2969 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2970 = dot(vec3(_386, _389, _392), vec3(_2962 * _2956, _2962 * _2957, _2962 * _2958));
                                float _3982 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                                float _2973 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                                float _2977 = ((_2973 * _2973) * (_2955 + (-1.0))) + 1.0;
                                float _2978 = _2915 * _2954;
                                float _2979 = _2978 * _2978;
                                float _2985 = ((1.0 - _2979) * dot(vec3(_386, _389, _392), vec3(_2902, _2903, _2904))) + _2979;
                                float _3993 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                                float _2986 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                                float _2987 = 1.0 - _2954;
                                float _2997 = (0.5 / (((_2986 * ((_2969 * _2987) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2986 * _2987) + _2954) * _2969))) * _2986;
                                float _4004 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3007 = (_2932 * _2909) * (((_2955 * 3.1415927410125732421875) * (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0)))) / ((_2977 * _2977) * ((_2922 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3007 * _2788.x;
                                frontier_phi_73_pred_1 = _3007 * _2788.y;
                                frontier_phi_73_pred_2 = _2933 * _2776.z;
                                frontier_phi_73_pred_3 = _2933 * _2776.y;
                                frontier_phi_73_pred_4 = _2933 * _2776.x;
                                frontier_phi_73_pred_5 = _3007 * _2788.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3011 = frontier_phi_73_pred;
                            _3012 = frontier_phi_73_pred_1;
                            _3016 = frontier_phi_73_pred_2;
                            _3015 = frontier_phi_73_pred_3;
                            _3014 = frontier_phi_73_pred_4;
                            _3013 = frontier_phi_73_pred_5;
                            _2718 = _3014 + _2731;
                            _2719 = _3015 + _2732;
                            _2720 = _3016 + _2733;
                            _2715 = _3011 + _2728;
                            _2716 = _3012 + _2729;
                            _2717 = _3013 + _2730;
                            if (_2735 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2735;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2718;
                        frontier_phi_67_pred_1 = _2719;
                        frontier_phi_67_pred_2 = _2720;
                        frontier_phi_67_pred_3 = _2717;
                        frontier_phi_67_pred_4 = _2716;
                        frontier_phi_67_pred_5 = _2715;
                    }
                    _2383 = frontier_phi_67_pred;
                    _2385 = frontier_phi_67_pred_1;
                    _2387 = frontier_phi_67_pred_2;
                    _2381 = frontier_phi_67_pred_3;
                    _2379 = frontier_phi_67_pred_4;
                    _2377 = frontier_phi_67_pred_5;
                    uint _2522 = _2521 + 1u;
                    if (_2522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2515 = _2377;
                        _2516 = _2379;
                        _2517 = _2381;
                        _2518 = _2383;
                        _2519 = _2385;
                        _2520 = _2387;
                        _2521 = _2522;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2385;
                frontier_phi_55_56_ladder_1 = _2387;
                frontier_phi_55_56_ladder_2 = _2383;
                frontier_phi_55_56_ladder_3 = _2381;
                frontier_phi_55_56_ladder_4 = _2379;
                frontier_phi_55_56_ladder_5 = _2377;
            }
            else
            {
                frontier_phi_55_56_ladder = _2271;
                frontier_phi_55_56_ladder_1 = _2273;
                frontier_phi_55_56_ladder_2 = _2269;
                frontier_phi_55_56_ladder_3 = _2267;
                frontier_phi_55_56_ladder_4 = _2265;
                frontier_phi_55_56_ladder_5 = _2263;
            }
            _2376 = frontier_phi_55_56_ladder_5;
            _2378 = frontier_phi_55_56_ladder_4;
            _2380 = frontier_phi_55_56_ladder_3;
            _2382 = frontier_phi_55_56_ladder_2;
            _2384 = frontier_phi_55_56_ladder;
            _2386 = frontier_phi_55_56_ladder_1;
        }
        float _2391 = isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0));
        _2173 = (_2391 * _2382) + _1625;
        _2175 = (_2391 * _2384) + _1627;
        _2177 = (_2391 * _2386) + _1629;
        _2179 = ((_2376 * 0.039999999105930328369140625) * _2391) + _1958;
        _2181 = ((_2378 * 0.039999999105930328369140625) * _2391) + _1960;
        _2183 = ((_2380 * 0.039999999105930328369140625) * _2391) + _1962;
    }
    else
    {
        _2173 = _1625;
        _2175 = _1627;
        _2177 = _1629;
        _2179 = _1958;
        _2181 = _1960;
        _2183 = _1962;
    }
    float _4020 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _4031 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _4042 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _4053 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _2208 = cbInstanceData._m0[_405 + 6u].w * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)));
    float _2213 = _364 / cbSceneParam._m0[86u].x;
    float _2214 = _365 / cbSceneParam._m0[86u].y;
    vec4 _2228 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2213, _2214, (log2((isnan(cbSceneParam._m0[77u].w) ? _297 : (isnan(_297) ? cbSceneParam._m0[77u].w : min(_297, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2230 = _2228.x;
    float _2231 = _2228.y;
    float _2232 = _2228.z;
    float _2233 = _2228.w;
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    if (_297 > cbSceneParam._m0[78u].w)
    {
        float _2288 = isnan(_297) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _297 : min(cbSceneParam._m0[80u].w, _297));
        float _2289 = _2288 / _297;
        float _2300 = _2289 * _349;
        float _2301 = _350 * _2289;
        float _2302 = (-0.0) - _2301;
        float _2304 = _2289 * _351;
        float _2306 = (cbSceneParam._m0[77u].w * _2302) / _2288;
        float _2307 = _2306 + cbSceneParam._m0[79u].w;
        float _2308 = cbSceneParam._m0[79u].w - _2301;
        float _2314 = sqrt(((_2300 * _2300) + (_2301 * _2301)) + (_2304 * _2304));
        float _2317 = (1.0 - (cbSceneParam._m0[77u].w / _2288)) * _2314;
        float _2322 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2324 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2477;
        if (abs((_2302 - _2306) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2477 = ((((_2307 > 0.0) ? exp2(_2322 * _2307) : (2.0 - exp2(_2324 * _2307))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2317;
        }
        else
        {
            float _2437 = 1.0 / cbSceneParam._m0[80u].x;
            float _2438 = isnan(_2308) ? _2307 : (isnan(_2307) ? _2308 : max(_2307, _2308));
            float _2439 = isnan(_2308) ? _2307 : (isnan(_2307) ? _2308 : min(_2307, _2308));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            _2477 = ((abs(_2314 / _2302) * cbSceneParam._m0[80u].y) * ((((_2448 - _2449) * 2.0) - ((exp2(_2322 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)))) - exp2(_2322 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0))))) * _2437)) - ((exp2(_2324 * _2448) - exp2(_2324 * _2449)) * _2437))) + (_2317 * cbSceneParam._m0[80u].z);
        }
        vec4 _2479 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2213, _2214, 1.0), 0.0);
        float _2488 = exp2((_2477 * (-1.44269502162933349609375)) * (1.0 - _2479.w));
        float _2489 = log2(_2488);
        float _2505 = log2(_2233);
        _2326 = (exp2(_2505 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].x)) * _2479.x) / cbSceneParam._m0[78u].x)) + _2230;
        _2328 = (exp2(_2505 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].y)) * _2479.y) / cbSceneParam._m0[78u].y)) + _2231;
        _2330 = (exp2(_2505 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].z)) * _2479.z) / cbSceneParam._m0[78u].z)) + _2232;
        _2332 = _2488 * _2233;
    }
    else
    {
        _2326 = _2230;
        _2328 = _2231;
        _2330 = _2232;
        _2332 = _2233;
    }
    float _2344 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2345 = _2344 == 3.0;
    float _2346 = log2(_2332);
    float _2353 = exp2(_2346 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_2173 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _431))) + ((_2179 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2354 = exp2(_2346 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_2175 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _431))) + ((_2181 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2355 = exp2(_2346 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_2177 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _431))) + ((_2183 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _1238)) * cbPerFrame._m0[3u].x));
    float _2364 = (_2344 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2364 * (_2345 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2326)));
    SV_Target.y = _2364 * (_2345 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2328)));
    SV_Target.z = _2364 * (_2345 ? _2355 : (_2355 + (cbSceneParam._m0[72u].w * _2330)));
    SV_Target.w = _2208;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2208;
}


