#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _883;
float _3300;
float _3301;
float _3302;
float _3303;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.w;
    float _234 = _227.x * cbMtdParam._m0[9u].x;
    float _235 = _227.y * cbMtdParam._m0[9u].y;
    float _236 = _227.z * cbMtdParam._m0[9u].z;
    float _237 = _233 * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _249.x;
    vec4 _263 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3312 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0))));
    float _283 = fma(_280, _197 * NORMAL.x, fma(_273, _204 * TANGENT.x, (_190 * _182) * _271));
    float _286 = fma(_280, _197 * NORMAL.y, fma(_273, _204 * TANGENT.y, (_190 * _183) * _271));
    float _289 = fma(_280, _197 * NORMAL.z, fma(_273, _204 * TANGENT.z, (_190 * _184) * _271));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3323 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _297 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _298 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3356 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3367 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3378 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _302 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _360 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _370 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _360);
    float _371 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _360);
    float _372 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _360);
    float _376 = inversesqrt(dot(vec3(_370, _371, _372), vec3(_370, _371, _372)));
    float _377 = _370 * _376;
    float _378 = _371 * _376;
    float _379 = _372 * _376;
    vec4 _384 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _386 = _384.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _562 = sqrt(((_370 * _370) + (_371 * _371)) + (_372 * _372));
        float _568 = (cbMatDynParam._m0[5u].x * _562) + cbMatDynParam._m0[5u].y;
        float _3389 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
        float _569 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _573 = (cbMatDynParam._m0[5u].z * _562) + cbMatDynParam._m0[5u].w;
        float _3400 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) - _569)) + _569) < ((_386 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _419 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _422 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _425 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _438 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = _438 + 9u;
    uint _441 = _440 + uint(cbMatDynParam._m0[0u].w);
    float _447 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_441].x;
    float _448 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_441].y;
    float _449 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0)))) * cbInstanceData._m0[_441].z;
    float _3411 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    float _3422 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _3433 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _453 = 1.0 - _302;
    float _454 = _450 * _453;
    float _455 = _451 * _453;
    float _456 = _452 * _453;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _302;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _302;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _302;
    float _464 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    vec4 _476 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _479 = _476.x * TEXCOORD_1.w;
    float _480 = dot(vec3(_294, _295, _296), vec3(_377, _378, _379));
    float _483 = _480 * 2.0;
    float _487 = (_483 * _294) - _377;
    float _488 = (_483 * _295) - _378;
    float _489 = (_483 * _296) - _379;
    float _493 = abs(dot(vec3(_377, _378, _379), vec3(_294, _295, _296)));
    float _3444 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _495 = sqrt(_298);
    float _508 = exp2((_495 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_495 * 3.0));
    float _514 = (1.0 - _508) * ((_495 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _515 = _508 * _495;
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _547 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _882;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _607 = fma(_551, cbModelParam._m0[26u].z, fma(_547, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _543));
        float _611 = fma(_551, cbModelParam._m0[27u].z, fma(_547, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _543));
        float _615 = fma(_551, cbModelParam._m0[28u].z, fma(_547, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _543));
        float _640 = _543 + _294;
        float _641 = _547 + _295;
        float _642 = _551 + _296;
        float _652 = fma(_642, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) - _607;
        float _653 = fma(_642, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) - _611;
        float _654 = fma(_642, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) - _615;
        float _658 = inversesqrt(dot(vec3(_652, _653, _654), vec3(_652, _653, _654)));
        float _671 = ((_658 * _652) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_607 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _672 = ((_658 * _653) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_611 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _673 = ((_658 * _654) / cbModelParam._m0[34u].z) + ((((((_615 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_671, _672, _673), 0.0);
        float _710 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_676.x + (-0.5));
        float _712 = _710 * (_676.y + (-0.5));
        float _713 = _710 * (_676.z + (-0.5));
        float _720 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_683.x + (-0.5));
        float _722 = _720 * (_683.y + (-0.5));
        float _723 = _720 * (_683.z + (-0.5));
        float _730 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_690.x + (-0.5));
        float _732 = _730 * (_690.y + (-0.5));
        float _733 = _730 * (_690.z + (-0.5));
        float _740 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_697.x + (-0.5));
        float _742 = _740 * (_697.y + (-0.5));
        float _743 = _740 * (_697.z + (-0.5));
        float _744 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _745 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _746 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _747 = _711 * 0.5;
        float _748 = _721 * 0.5;
        float _749 = _731 * 0.5;
        float _750 = dot(vec3(_747, _748, _749), vec3(_747, _748, _749));
        float _755 = (_750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_750);
        float _764 = (dot(vec3(_294, _295, _296), vec3(_755 * _747, _755 * _748, _755 * _749)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _774 = sqrt(((_748 * _748) + (_747 * _747)) + (_749 * _749)) / (_744 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _775 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _776 = _775 * 2.0;
        float _780 = (1.0 - _775) / (_775 + 1.0);
        float _3492 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _790 = ((((1.0 - _781) * (_776 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_776 + 1.0))) + _781) * _744;
        float _791 = _712 * 0.5;
        float _792 = _722 * 0.5;
        float _793 = _732 * 0.5;
        float _794 = dot(vec3(_791, _792, _793), vec3(_791, _792, _793));
        float _799 = (_794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_794);
        float _807 = (dot(vec3(_294, _295, _296), vec3(_799 * _791, _799 * _792, _799 * _793)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _816 = sqrt(((_792 * _792) + (_791 * _791)) + (_793 * _793)) / (_745 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _817 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _818 = _817 * 2.0;
        float _822 = (1.0 - _817) / (_817 + 1.0);
        float _3525 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _832 = ((((1.0 - _823) * (_818 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_818 + 1.0))) + _823) * _745;
        float _833 = _713 * 0.5;
        float _834 = _723 * 0.5;
        float _835 = _733 * 0.5;
        float _836 = dot(vec3(_833, _834, _835), vec3(_833, _834, _835));
        float _841 = (_836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_836);
        float _849 = (dot(vec3(_294, _295, _296), vec3(_841 * _833, _841 * _834, _841 * _835)) + 1.0) * 0.5;
        float _3536 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _858 = sqrt(((_834 * _834) + (_833 * _833)) + (_835 * _835)) / (_746 + 9.9999997473787516355514526367188e-06);
        float _3547 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _860 = _859 * 2.0;
        float _864 = (1.0 - _859) / (_859 + 1.0);
        float _3558 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
        float _874 = ((((1.0 - _865) * (_860 + 2.0)) * exp2(log2(isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (_860 + 1.0))) + _865) * _746;
        _882 = _713;
        _884 = _712;
        _885 = _711;
        _886 = _723;
        _887 = _722;
        _888 = _721;
        _889 = _733;
        _890 = _732;
        _891 = _731;
        _892 = _746;
        _893 = _745;
        _894 = _744;
        _895 = cbModelParam._m0[36u].z * (isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)));
        _896 = cbModelParam._m0[36u].z * (isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0)));
        _897 = cbModelParam._m0[36u].z * (isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0)));
    }
    else
    {
        _882 = _883;
        _884 = _883;
        _885 = _883;
        _886 = _883;
        _887 = _883;
        _888 = _883;
        _889 = _883;
        _890 = _883;
        _891 = _883;
        _892 = _883;
        _893 = _883;
        _894 = _883;
        _895 = 0.0;
        _896 = 0.0;
        _897 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _926 = fma(_551, cbModelParam._m0[30u].z, fma(_547, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _543));
        float _930 = fma(_551, cbModelParam._m0[31u].z, fma(_547, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _543));
        float _934 = fma(_551, cbModelParam._m0[32u].z, fma(_547, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _543));
        float _957 = _543 + _294;
        float _958 = _547 + _295;
        float _959 = _551 + _296;
        float _969 = fma(_959, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _957)) - _926;
        float _970 = fma(_959, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _957)) - _930;
        float _971 = fma(_959, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _957)) - _934;
        float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
        float _988 = ((_975 * _969) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_926 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _989 = ((_975 * _970) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_930 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _990 = ((_975 * _971) / cbModelParam._m0[35u].z) + ((((((_934 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_294, _295, _296), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3621 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_294, _295, _296), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3654 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_294, _295, _296), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3665 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3676 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3687 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _883;
        _1196 = _883;
        _1197 = _883;
        _1198 = _883;
        _1199 = _883;
        _1200 = _883;
        _1201 = _883;
        _1202 = _883;
        _1203 = _883;
        _1204 = _883;
        _1205 = _883;
        _1206 = _883;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _895)) + _895;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _896)) + _896;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _897)) + _897;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _487 * 0.5;
    float _1264 = _488 * 0.5;
    float _1265 = _489 * 0.5;
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_882, _886, _889, _892));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_884, _887, _890, _893));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_885, _888, _891, _894));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1331 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _298);
    float _1332 = isnan(_1331) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1331 : min(cbModelParam._m0[25u].z, _1331));
    float _1414;
    float _1416;
    float _1418;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1381 = fma(_551, cbModelParam._m0[13u].z, fma(_547, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _543)) + cbModelParam._m0[13u].w;
        float _1385 = fma(_551, cbModelParam._m0[14u].z, fma(_547, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _543)) + cbModelParam._m0[14u].w;
        float _1389 = fma(_551, cbModelParam._m0[15u].z, fma(_547, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _543)) + cbModelParam._m0[15u].w;
        float _1392 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1395 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1398 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1426;
        if (_1392 > 0.0)
        {
            _1426 = abs((1.0 - _1381) / _1392);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1392 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1381 + 1.0) / _1392);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1426 = frontier_phi_17_15_ladder;
        }
        float _1655;
        if (_1395 > 0.0)
        {
            _1655 = abs((1.0 - _1385) / _1395);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1395 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1385 + 1.0) / _1395);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1655 = frontier_phi_26_22_ladder;
        }
        float _1912;
        if (_1398 > 0.0)
        {
            _1912 = abs((1.0 - _1389) / _1398);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1389 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1912 = frontier_phi_38_33_ladder;
        }
        float _1914 = isnan(_1655) ? _1426 : (isnan(_1426) ? _1655 : min(_1426, _1655));
        float _1915 = isnan(_1912) ? _1914 : (isnan(_1914) ? _1912 : min(_1914, _1912));
        float _1919 = (_1915 * _1392) + _1381;
        float _1920 = (_1915 * _1395) + _1385;
        float _1921 = (_1915 * _1398) + _1389;
        float _1922 = _1915 * 9.9999997473787516355514526367188e-05;
        float _1924 = (-1.0) - _1922;
        float _1926 = _1922 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1921 > _1926) || ((_1921 < _1924) || ((_1920 > _1926) || ((_1920 < _1924) || ((_1919 < _1924) || (_1919 > _1926))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2049 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1921, cbModelParam._m0[9u].z, fma(_1920, cbModelParam._m0[9u].y, _1919 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1921, cbModelParam._m0[10u].z, fma(_1920, cbModelParam._m0[10u].y, _1919 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1921, cbModelParam._m0[11u].z, fma(_1920, cbModelParam._m0[11u].y, _1919 * cbModelParam._m0[11u].x))), _1332);
            frontier_phi_16_38_ladder = _2049.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2049.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2049.x * cbModelParam._m0[1u].y;
        }
        _1414 = frontier_phi_16_38_ladder_2;
        _1416 = frontier_phi_16_38_ladder_1;
        _1418 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1402 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1332);
        _1414 = _1402.x * cbModelParam._m0[1u].y;
        _1416 = _1402.y * cbModelParam._m0[1u].y;
        _1418 = _1402.z * cbModelParam._m0[1u].y;
    }
    float _1422 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _298);
    float _1423 = isnan(_1422) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1422 : min(cbModelParam._m0[25u].w, _1422));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1480 = fma(_551, cbModelParam._m0[21u].z, fma(_547, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _543)) + cbModelParam._m0[21u].w;
        float _1484 = fma(_551, cbModelParam._m0[22u].z, fma(_547, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _543)) + cbModelParam._m0[22u].w;
        float _1488 = fma(_551, cbModelParam._m0[23u].z, fma(_547, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _543)) + cbModelParam._m0[23u].w;
        float _1491 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1494 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1497 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1660;
        if (_1491 > 0.0)
        {
            _1660 = abs((1.0 - _1480) / _1491);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1491 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1480 + 1.0) / _1491);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1660 = frontier_phi_28_24_ladder;
        }
        float _1939;
        if (_1494 > 0.0)
        {
            _1939 = abs((1.0 - _1484) / _1494);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1484 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1939 = frontier_phi_40_35_ladder;
        }
        float _2152;
        if (_1497 > 0.0)
        {
            _2152 = abs((1.0 - _1488) / _1497);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1488 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2152 = frontier_phi_49_46_ladder;
        }
        float _2154 = isnan(_1939) ? _1660 : (isnan(_1660) ? _1939 : min(_1660, _1939));
        float _2155 = isnan(_2152) ? _2154 : (isnan(_2154) ? _2152 : min(_2154, _2152));
        float _2159 = (_2155 * _1491) + _1480;
        float _2160 = (_2155 * _1494) + _1484;
        float _2161 = (_2155 * _1497) + _1488;
        float _2162 = _2155 * 9.9999997473787516355514526367188e-05;
        float _2163 = (-1.0) - _2162;
        float _2165 = _2162 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2161 > _2165) || ((_2161 < _2163) || ((_2160 > _2165) || ((_2160 < _2163) || ((_2159 < _2163) || (_2159 > _2165))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2161, cbModelParam._m0[17u].z, fma(_2160, cbModelParam._m0[17u].y, _2159 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2161, cbModelParam._m0[18u].z, fma(_2160, cbModelParam._m0[18u].y, _2159 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2161, cbModelParam._m0[19u].z, fma(_2160, cbModelParam._m0[19u].y, _2159 * cbModelParam._m0[19u].x))), _1423);
            frontier_phi_25_49_ladder = _2362.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2362.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2362.x * cbModelParam._m0[1u].z;
        }
        _1516 = frontier_phi_25_49_ladder_2;
        _1518 = frontier_phi_25_49_ladder_1;
        _1520 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1500 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1423);
        _1516 = _1500.x * cbModelParam._m0[1u].z;
        _1518 = _1500.y * cbModelParam._m0[1u].z;
        _1520 = _1500.z * cbModelParam._m0[1u].z;
    }
    float _1533 = (((_514 * _464) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1516 - _1414)) + _1414);
    float _1535 = (((_514 * _466) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1518 - _1416)) + _1416);
    float _1537 = (((_514 * _467) + _515) * _479) * ((cbModelParam._m0[1u].w * (_1520 - _1418)) + _1418);
    float _1540 = fma(_1537, cbSceneParam._m0[89u].z, fma(_1535, cbSceneParam._m0[89u].y, _1533 * cbSceneParam._m0[89u].x));
    float _1543 = fma(_1537, cbSceneParam._m0[90u].z, fma(_1535, cbSceneParam._m0[90u].y, _1533 * cbSceneParam._m0[90u].x));
    float _1546 = fma(_1537, cbSceneParam._m0[91u].z, fma(_1535, cbSceneParam._m0[91u].y, _1533 * cbSceneParam._m0[91u].x));
    vec4 _1554 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_398, _399));
    float _1556 = _1554.w;
    float _1568 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1556);
    float _1569 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1556);
    float _1570 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1556);
    uvec4 _1574 = floatBitsToUint(cbInstanceData._m0[_438 + 5u]);
    uint _1576 = _1574.x * 14u;
    uint _1577 = _1576 + 13u;
    float _1584 = _479 + (-1.0);
    float _1589 = (cbLight._m0[_1577].x * _1584) + 1.0;
    float _1590 = (cbLight._m0[_1577].y * _1584) + 1.0;
    float _1591 = (cbLight._m0[_1577].z * _1584) + 1.0;
    float _1592 = (cbLight._m0[_1577].w * _1584) + 1.0;
    uint _1593 = _1576 + 5u;
    float _1599 = isnan(1.0) ? _1590 : (isnan(_1590) ? 1.0 : min(_1590, 1.0));
    uint _1603 = _1576 + 4u;
    float _1613 = isnan(1.0) ? _1589 : (isnan(_1589) ? 1.0 : min(_1589, 1.0));
    uint _1617 = _1576 | 1u;
    float _1628 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_294, _295, _296));
    float _1631 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_294, _295, _296));
    float _3823 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _3834 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
    float _1636 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * 0.3183098733425140380859375;
    float _1638 = (isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * 0.3183098733425140380859375;
    float _1645 = ((cbLight._m0[_1593].x * _1599) * _1638) + (((cbLight._m0[_1603].x * _1568) * _1613) * _1636);
    float _1646 = ((_1599 * cbLight._m0[_1593].y) * _1638) + (((cbLight._m0[_1603].y * _1569) * _1613) * _1636);
    float _1647 = ((_1599 * cbLight._m0[_1593].z) * _1638) + (((cbLight._m0[_1603].z * _1570) * _1613) * _1636);
    uvec4 _1652 = floatBitsToUint(cbLight._m0[_1576 + 12u]);
    bool _1654 = _1652.x == 0u;
    float _1665;
    float _1667;
    float _1669;
    if (_1654)
    {
        _1665 = _1645;
        _1667 = _1646;
        _1669 = _1647;
    }
    else
    {
        uint _1673 = _1576 + 6u;
        float _1689 = (dot(vec3(cbLight._m0[_1576 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1690 = _1689 * _1689;
        float _3845 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1691 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1692 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1665 = (((cbLight._m0[_1673].x * 0.3183098733425140380859375) * _1691) * _1692) + _1645;
        _1667 = (((cbLight._m0[_1673].y * 0.3183098733425140380859375) * _1691) * _1692) + _1646;
        _1669 = (((cbLight._m0[_1673].z * 0.3183098733425140380859375) * _1691) * _1692) + _1647;
    }
    bool _1672 = _1652.y == 0u;
    float _1710;
    float _1712;
    float _1714;
    if (_1672)
    {
        _1710 = _1665;
        _1712 = _1667;
        _1714 = _1669;
    }
    else
    {
        uint _1883 = _1576 + 7u;
        float _1899 = (dot(vec3(cbLight._m0[_1576 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _1900 = _1899 * _1899;
        float _3861 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1902 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _1710 = (((cbLight._m0[_1883].x * 0.3183098733425140380859375) * _1901) * _1902) + _1665;
        _1712 = (((cbLight._m0[_1883].y * 0.3183098733425140380859375) * _1901) * _1902) + _1667;
        _1714 = (((cbLight._m0[_1883].z * 0.3183098733425140380859375) * _1901) * _1902) + _1669;
    }
    uint _1717 = _1576 + 8u;
    float _1730 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _298) * 0.949999988079071044921875);
    float _1731 = _1730 * _1730;
    float _1732 = cbLight._m0[_1576].x + _377;
    float _1733 = cbLight._m0[_1576].y + _378;
    float _1734 = cbLight._m0[_1576].z + _379;
    float _1738 = inversesqrt(dot(vec3(_1732, _1733, _1734), vec3(_1732, _1733, _1734)));
    float _1739 = _1738 * _1732;
    float _1740 = _1738 * _1733;
    float _1741 = _1738 * _1734;
    float _1742 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1576].xyz));
    float _3877 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1745 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _3888 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _1746 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _1747 = dot(vec3(_294, _295, _296), vec3(_1739, _1740, _1741));
    float _3899 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1739, _1740, _1741));
    float _3910 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1731 * _1731;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1767 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
    float _1768 = 0.959999978542327880859375 - _461;
    float _1770 = 0.959999978542327880859375 - _462;
    float _1771 = 0.959999978542327880859375 - _463;
    float _1778 = 1.0 - _1731;
    float _1789 = (0.5 / (((_1746 * ((_1745 * _1778) + _1731)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1778) + _1731) * _1745))) * _1745;
    float _3921 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    uint _1805 = _1576 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1617].w)) * _298) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1617].x + _377;
    float _1819 = cbLight._m0[_1617].y + _378;
    float _1820 = cbLight._m0[_1617].z + _379;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1617].xyz));
    float _3932 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _1832 = dot(vec3(_294, _295, _296), vec3(_1825, _1826, _1827));
    float _3943 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1617].xyz), vec3(_1825, _1826, _1827));
    float _3954 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1851 = exp2(log2(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * 5.0);
    float _1858 = 1.0 - _1817;
    float _1868 = (0.5 / (((_1746 * ((_1831 * _1858) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _1858) + _1817) * _1831))) * _1831;
    float _3965 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1870 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1880 = (((((_1851 * _1768) + _464) * cbLight._m0[_1805].x) * _1870) * _1599) + ((((cbLight._m0[_1717].x * _1568) * ((_1767 * _1768) + _464)) * _1791) * _1613);
    float _1881 = (((((_1851 * _1770) + _466) * cbLight._m0[_1805].y) * _1870) * _1599) + ((((cbLight._m0[_1717].y * _1569) * ((_1767 * _1770) + _466)) * _1791) * _1613);
    float _1882 = (((((_1851 * _1771) + _467) * cbLight._m0[_1805].z) * _1870) * _1599) + ((((cbLight._m0[_1717].z * _1570) * ((_1767 * _1771) + _467)) * _1791) * _1613);
    float _1944;
    float _1946;
    float _1948;
    if (_1654)
    {
        _1944 = _1880;
        _1946 = _1881;
        _1948 = _1882;
    }
    else
    {
        uint _1950 = _1576 + 2u;
        uint _1954 = _1576 + 10u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _298) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _377;
        float _1971 = cbLight._m0[_1950].y + _378;
        float _1972 = cbLight._m0[_1950].z + _379;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1950].xyz));
        float _3976 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1984 = dot(vec3(_294, _295, _296), vec3(_1977, _1978, _1979));
        float _3987 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3998 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * 5.0);
        float _2010 = 1.0 - _1969;
        float _2020 = (0.5 / (((_1746 * ((_1983 * _2010) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2010) + _1969) * _1983))) * _1983;
        float _4009 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
        float _2022 = (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2023 = isnan(1.0) ? _1591 : (isnan(_1591) ? 1.0 : min(_1591, 1.0));
        _1944 = (((((_2003 * _1768) + _464) * cbLight._m0[_1954].x) * _2022) * _2023) + _1880;
        _1946 = (((((_2003 * _1770) + _466) * cbLight._m0[_1954].y) * _2022) * _2023) + _1881;
        _1948 = (((((_2003 * _1771) + _467) * cbLight._m0[_1954].z) * _2022) * _2023) + _1882;
    }
    float _2058;
    float _2060;
    float _2062;
    if (_1672)
    {
        _2058 = _1944;
        _2060 = _1946;
        _2062 = _1948;
    }
    else
    {
        uint _2069 = _1576 + 3u;
        uint _2073 = _1576 + 11u;
        float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2069].w)) * _298) * 0.949999988079071044921875);
        float _2088 = _2087 * _2087;
        float _2089 = cbLight._m0[_2069].x + _377;
        float _2090 = cbLight._m0[_2069].y + _378;
        float _2091 = cbLight._m0[_2069].z + _379;
        float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
        float _2096 = _2095 * _2089;
        float _2097 = _2095 * _2090;
        float _2098 = _2095 * _2091;
        float _2099 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2069].xyz));
        float _4025 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
        float _2102 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _2103 = dot(vec3(_294, _295, _296), vec3(_2096, _2097, _2098));
        float _4036 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
        float _2106 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _2107 = dot(vec3(cbLight._m0[_2069].xyz), vec3(_2096, _2097, _2098));
        float _4047 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2111 = _2088 * _2088;
        float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
        float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * 5.0);
        float _2129 = 1.0 - _2088;
        float _2139 = (0.5 / (((_1746 * ((_2102 * _2129) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_1746 * _2129) + _2088) * _2102))) * _2102;
        float _4058 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2141 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
        float _2142 = isnan(1.0) ? _1592 : (isnan(_1592) ? 1.0 : min(_1592, 1.0));
        _2058 = (((((_2122 * _1768) + _464) * cbLight._m0[_2073].x) * _2141) * _2142) + _1944;
        _2060 = (((((_2122 * _1770) + _466) * cbLight._m0[_2073].y) * _2141) * _2142) + _1946;
        _2062 = (((((_2122 * _1771) + _467) * cbLight._m0[_2073].z) * _2141) * _2142) + _1948;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1574.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
        }
        else
        {
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            uint _2526 = 0u;
            uint _2535;
            bool _2536;
            for (;;)
            {
                _2535 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2526 << 2u)) >> 2u)).x;
                _2536 = _2535 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2536)
                {
                    frontier_phi_66_pred = _2520;
                    frontier_phi_66_pred_1 = _2525;
                    frontier_phi_66_pred_2 = _2524;
                    frontier_phi_66_pred_3 = _2523;
                    frontier_phi_66_pred_4 = _2522;
                    frontier_phi_66_pred_5 = _2521;
                }
                else
                {
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    uint _2671;
                    _2665 = _2520;
                    _2666 = _2521;
                    _2667 = _2522;
                    _2668 = _2523;
                    _2669 = _2524;
                    _2670 = _2525;
                    _2671 = _2535;
                    float _2592;
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    for (;;)
                    {
                        uint _2675 = uint(findLSB(_2671)) + (_2526 << 5u);
                        uint _2672 = (_2671 + 4294967295u) & _2671;
                        uint _2677 = _2675 * 48u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 3u)).x));
                        uint _2697 = (_2675 * 48u) + 4u;
                        vec4 _2710 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 3u)).x));
                        uint _2716 = (_2675 * 48u) + 8u;
                        vec3 _2727 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2716)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2716 + 2u)).x));
                        float _2731 = _2691.x - _2218;
                        float _2732 = _2691.y - _2219;
                        float _2733 = _2691.z - _2220;
                        float _2734 = dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733));
                        float _2737 = inversesqrt(_2734);
                        float _2738 = _2737 * _2731;
                        float _2739 = _2737 * _2732;
                        float _2740 = _2737 * _2733;
                        float _2741 = dot(vec3(_419, _422, _425), vec3(_2738, _2739, _2740));
                        float _2746 = 1.0 - (_2734 * _2691.w);
                        float _4084 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                        float _2747 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                        float _2748 = sqrt(_2734) * _2710.w;
                        float _2751 = 1.39999997615814208984375 / (_2748 + 1.39999997615814208984375);
                        float _2752 = _2751 * _2751;
                        float _2755 = ((1.0 - _2752) * _2741) + _2752;
                        float _2758 = _2748 * _2748;
                        float _2762 = ((isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))) * _2747) / ((_2758 * 0.699999988079071044921875) + 1.0);
                        float _2766 = (-0.0) - _2218;
                        float _2767 = (-0.0) - _2219;
                        float _2768 = (-0.0) - _2220;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2783 = exp2(log2(1.0 / ((_2758 * 3.5) + 5.0)) * 0.25);
                        float _2784 = 1.0 - _495;
                        float _2791 = sqrt(1.0 - ((1.0 - (_2784 * _2784)) * (1.0 - (_2783 * _2783))));
                        float _2792 = _2791 * _2791;
                        float _2793 = _2792 * _2792;
                        float _2794 = _2773 + _2738;
                        float _2795 = _2774 + _2739;
                        float _2796 = _2775 + _2740;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2804 = dot(vec3(_419, _422, _425), vec3(_2773, _2774, _2775));
                        float _4100 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
                        float _2808 = dot(vec3(_419, _422, _425), vec3(_2800 * _2794, _2800 * _2795, _2800 * _2796));
                        float _4111 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2811 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                        float _2815 = ((_2811 * _2811) * (_2793 + (-1.0))) + 1.0;
                        float _2816 = _2751 * _2792;
                        float _2817 = _2816 * _2816;
                        float _2820 = ((1.0 - _2817) * _2741) + _2817;
                        float _4122 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
                        float _2821 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
                        float _2822 = 1.0 - _2792;
                        float _2832 = (0.5 / (((_2821 * ((_2807 * _2822) + _2792)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2822) + _2792) * _2807))) * _2821;
                        float _4133 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2843 = (((_2793 * 3.1415927410125732421875) * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) / ((_2815 * _2815) * ((_2758 * 2.1991131305694580078125) + 3.141590118408203125))) * _2747;
                        _2595 = (_2762 * _2710.x) + _2668;
                        _2596 = (_2762 * _2710.y) + _2669;
                        _2597 = (_2762 * _2710.z) + _2670;
                        _2592 = (_2843 * _2727.x) + _2665;
                        _2593 = (_2843 * _2727.y) + _2666;
                        _2594 = (_2843 * _2727.z) + _2667;
                        if (_2672 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2665 = _2592;
                            _2666 = _2593;
                            _2667 = _2594;
                            _2668 = _2595;
                            _2669 = _2596;
                            _2670 = _2597;
                            _2671 = _2672;
                        }
                    }
                    frontier_phi_66_pred = _2592;
                    frontier_phi_66_pred_1 = _2597;
                    frontier_phi_66_pred_2 = _2596;
                    frontier_phi_66_pred_3 = _2595;
                    frontier_phi_66_pred_4 = _2594;
                    frontier_phi_66_pred_5 = _2593;
                }
                _2368 = frontier_phi_66_pred;
                _2378 = frontier_phi_66_pred_1;
                _2376 = frontier_phi_66_pred_2;
                _2374 = frontier_phi_66_pred_3;
                _2372 = frontier_phi_66_pred_4;
                _2370 = frontier_phi_66_pred_5;
                uint _2527 = _2526 + 1u;
                if (_2527 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2520 = _2368;
                    _2521 = _2370;
                    _2522 = _2372;
                    _2523 = _2374;
                    _2524 = _2376;
                    _2525 = _2378;
                    _2526 = _2527;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
        }
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.z;
        uint _2384 = (_2382 >> 8u) & 15u;
        float _2488;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        if (((4294967295u << _2384) & _2264) == 0u)
        {
            _2488 = _2367;
            _2490 = _2369;
            _2492 = _2371;
            _2494 = _2373;
            _2496 = _2375;
            _2498 = _2377;
        }
        else
        {
            float _2513 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2514 = _2513 * _2218;
            float _2515 = _2513 * _2219;
            float _2516 = _2513 * _2220;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2384 < ((_2382 >> 12u) & 15u))
            {
                float _2489;
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2648 = _2367;
                float _2649 = _2369;
                float _2650 = _2371;
                float _2651 = _2373;
                float _2652 = _2375;
                float _2653 = _2377;
                uint _2654 = _2384;
                uint _2663;
                bool _2664;
                for (;;)
                {
                    _2663 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2654 << 2u)) >> 2u)).x;
                    _2664 = _2663 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2664)
                    {
                        frontier_phi_77_pred = _2653;
                        frontier_phi_77_pred_1 = _2652;
                        frontier_phi_77_pred_2 = _2651;
                        frontier_phi_77_pred_3 = _2650;
                        frontier_phi_77_pred_4 = _2649;
                        frontier_phi_77_pred_5 = _2648;
                    }
                    else
                    {
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _2870 = _2648;
                        float _2871 = _2649;
                        float _2872 = _2650;
                        float _2873 = _2651;
                        float _2874 = _2652;
                        float _2875 = _2653;
                        uint _2876 = _2663;
                        uint _2877;
                        vec4 _2902;
                        float _2903;
                        vec4 _2918;
                        vec3 _2930;
                        vec4 _2946;
                        vec4 _2962;
                        float _3009;
                        bool _3010;
                        for (;;)
                        {
                            uint _2887 = ((_2654 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2876));
                            _2877 = (_2876 + 4294967295u) & _2876;
                            uint _2889 = _2887 * 40u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            _2903 = _2902.w;
                            uint _2905 = (_2887 * 40u) + 4u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2920 = (_2887 * 40u) + 8u;
                            _2930 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x));
                            uint _2933 = (_2887 * 40u) + 16u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            uint _2949 = (_2887 * 40u) + 20u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2965 = (_2887 * 40u) + 24u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2984 = (_2887 * 40u) + 28u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            _3009 = fma(_2220, _2997.z, fma(_2219, _2997.y, _2997.x * _2218)) + _2997.w;
                            _3010 = !((fma(_2220, _2978.z, fma(_2219, _2978.y, _2978.x * _2218)) + _2978.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3010)
                            {
                                float _3037 = _2902.x - _2218;
                                float _3038 = _2902.y - _2219;
                                float _3039 = _2902.z - _2220;
                                float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                                float _3043 = inversesqrt(_3040);
                                float _3044 = _3043 * _3037;
                                float _3045 = _3043 * _3038;
                                float _3046 = _3043 * _3039;
                                float _3050 = 1.0 - (_3040 / (_2903 * _2903));
                                float _4144 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                                float _3051 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
                                float _3055 = sqrt(_3040) * _2918.w;
                                float _3057 = 1.39999997615814208984375 / (_3055 + 1.39999997615814208984375);
                                float _3058 = _3057 * _3057;
                                float _3061 = ((1.0 - _3058) * dot(vec3(_3044, _3045, _3046), vec3(_419, _422, _425))) + _3058;
                                float _3064 = _3055 * _3055;
                                float _3068 = (fma(_2220, _2946.z, fma(_2219, _2946.y, _2946.x * _2218)) + _2946.w) / _3009;
                                float _3069 = (fma(_2220, _2962.z, fma(_2219, _2962.y, _2962.x * _2218)) + _2962.w) / _3009;
                                float _3073 = 1.0 - dot(vec2(_3068, _3069), vec2(_3068, _3069));
                                float _4160 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3075 = _3074 * (((isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0))) * _3051) / ((_3064 * 0.699999988079071044921875) + 1.0));
                                float _3087 = exp2(log2(1.0 / ((_3064 * 3.5) + 5.0)) * 0.25);
                                float _3088 = 1.0 - _495;
                                float _3095 = sqrt(1.0 - ((1.0 - (_3088 * _3088)) * (1.0 - (_3087 * _3087))));
                                float _3096 = _3095 * _3095;
                                float _3097 = _3096 * _3096;
                                float _3098 = _3044 - _2514;
                                float _3099 = _3045 - _2515;
                                float _3100 = _3046 - _2516;
                                float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                                float _3108 = dot(vec3(_419, _422, _425), vec3((-0.0) - _2514, (-0.0) - _2515, (-0.0) - _2516));
                                float _4171 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3111 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
                                float _3112 = dot(vec3(_419, _422, _425), vec3(_3104 * _3098, _3104 * _3099, _3104 * _3100));
                                float _4182 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3115 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                                float _3119 = ((_3115 * _3115) * (_3097 + (-1.0))) + 1.0;
                                float _3120 = _3057 * _3096;
                                float _3121 = _3120 * _3120;
                                float _3127 = ((1.0 - _3121) * dot(vec3(_419, _422, _425), vec3(_3044, _3045, _3046))) + _3121;
                                float _4193 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3128 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
                                float _3129 = 1.0 - _3096;
                                float _3139 = (0.5 / (((_3128 * ((_3111 * _3129) + _3096)) + 9.9999999392252902907785028219223e-09) + (((_3128 * _3129) + _3096) * _3111))) * _3128;
                                float _4204 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3149 = (_3074 * _3051) * (((_3097 * 3.1415927410125732421875) * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) / ((_3119 * _3119) * ((_3064 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3075 * _2918.y;
                                frontier_phi_83_pred_1 = _3075 * _2918.x;
                                frontier_phi_83_pred_2 = _3149 * _2930.z;
                                frontier_phi_83_pred_3 = _3149 * _2930.y;
                                frontier_phi_83_pred_4 = _3149 * _2930.x;
                                frontier_phi_83_pred_5 = _3075 * _2918.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3157 = frontier_phi_83_pred;
                            _3156 = frontier_phi_83_pred_1;
                            _3155 = frontier_phi_83_pred_2;
                            _3154 = frontier_phi_83_pred_3;
                            _3153 = frontier_phi_83_pred_4;
                            _3158 = frontier_phi_83_pred_5;
                            _2860 = _3156 + _2873;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2857 = _3153 + _2870;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            if (_2877 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2877;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2862;
                        frontier_phi_77_pred_1 = _2861;
                        frontier_phi_77_pred_2 = _2860;
                        frontier_phi_77_pred_3 = _2859;
                        frontier_phi_77_pred_4 = _2858;
                        frontier_phi_77_pred_5 = _2857;
                    }
                    _2499 = frontier_phi_77_pred;
                    _2497 = frontier_phi_77_pred_1;
                    _2495 = frontier_phi_77_pred_2;
                    _2493 = frontier_phi_77_pred_3;
                    _2491 = frontier_phi_77_pred_4;
                    _2489 = frontier_phi_77_pred_5;
                    uint _2655 = _2654 + 1u;
                    if (_2655 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2648 = _2489;
                        _2649 = _2491;
                        _2650 = _2493;
                        _2651 = _2495;
                        _2652 = _2497;
                        _2653 = _2499;
                        _2654 = _2655;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2493;
                frontier_phi_58_59_ladder_1 = _2499;
                frontier_phi_58_59_ladder_2 = _2497;
                frontier_phi_58_59_ladder_3 = _2495;
                frontier_phi_58_59_ladder_4 = _2491;
                frontier_phi_58_59_ladder_5 = _2489;
            }
            else
            {
                frontier_phi_58_59_ladder = _2371;
                frontier_phi_58_59_ladder_1 = _2377;
                frontier_phi_58_59_ladder_2 = _2375;
                frontier_phi_58_59_ladder_3 = _2373;
                frontier_phi_58_59_ladder_4 = _2369;
                frontier_phi_58_59_ladder_5 = _2367;
            }
            _2488 = frontier_phi_58_59_ladder_5;
            _2490 = frontier_phi_58_59_ladder_4;
            _2492 = frontier_phi_58_59_ladder;
            _2494 = frontier_phi_58_59_ladder_3;
            _2496 = frontier_phi_58_59_ladder_2;
            _2498 = frontier_phi_58_59_ladder_1;
        }
        float _2503 = isnan(1.0) ? _479 : (isnan(_479) ? 1.0 : min(_479, 1.0));
        _2277 = (_2503 * _2494) + _1710;
        _2279 = (_2503 * _2496) + _1712;
        _2281 = (_2503 * _2498) + _1714;
        _2283 = ((_2488 * _464) * _2503) + _2058;
        _2285 = ((_2490 * _466) * _2503) + _2060;
        _2287 = ((_2492 * _467) * _2503) + _2062;
    }
    else
    {
        _2277 = _1710;
        _2279 = _1712;
        _2281 = _1714;
        _2283 = _2058;
        _2285 = _2060;
        _2287 = _2062;
    }
    float _4220 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4231 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4242 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4253 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _2305 = ((isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_2277 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _479))) + ((_2283 + ((isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2306 = ((isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_2279 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _479))) + ((_2285 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2307 = ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2281 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _479))) + ((_2287 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2312 = cbInstanceData._m0[_438 + 6u].w * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)));
    float _2317 = _398 / cbSceneParam._m0[86u].x;
    float _2318 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2332 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2334 = _2332.x;
    float _2335 = _2332.y;
    float _2336 = _2332.z;
    float _2337 = _2332.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2392 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2393 = _2392 / _318;
        float _2404 = _2393 * _370;
        float _2405 = _371 * _2393;
        float _2406 = (-0.0) - _2405;
        float _2408 = _2393 * _372;
        float _2410 = (cbSceneParam._m0[77u].w * _2406) / _2392;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2405;
        float _2418 = sqrt(((_2404 * _2404) + (_2405 * _2405)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2392)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2605;
        if (abs((_2406 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2605 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2549 = 1.0 / cbSceneParam._m0[80u].x;
            float _2550 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2551 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2560 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : min(_2550, 0.0));
            float _2561 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : min(_2551, 0.0));
            _2605 = ((abs(_2418 / _2406) * cbSceneParam._m0[80u].y) * ((((_2560 - _2561) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0))))) * _2549)) - ((exp2(_2428 * _2560) - exp2(_2428 * _2561)) * _2549))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2607 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2317, _2318, 1.0), 0.0);
        float _2616 = exp2((_2605 * (-1.44269502162933349609375)) * (1.0 - _2607.w));
        float _2617 = log2(_2616);
        float _2633 = log2(_2337);
        _2430 = (exp2(_2633 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].x)) * _2607.x) / cbSceneParam._m0[78u].x)) + _2334;
        _2432 = (exp2(_2633 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].y)) * _2607.y) / cbSceneParam._m0[78u].y)) + _2335;
        _2434 = (exp2(_2633 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2617 * cbSceneParam._m0[78u].z)) * _2607.z) / cbSceneParam._m0[78u].z)) + _2336;
        _2436 = _2616 * _2337;
    }
    else
    {
        _2430 = _2334;
        _2432 = _2335;
        _2434 = _2336;
        _2436 = _2337;
    }
    bool _2643;
    vec4 _2446;
    vec4 _2468;
    float _2470;
    float _2474;
    float _2475;
    float _2476;
    float _2477;
    bool _2487;
    for (;;)
    {
        _2446 = cbMatDynParam._m0[0u];
        float _2448 = roundEven(_2446.y);
        bool _2449 = _2448 == 3.0;
        float _2450 = log2(_2436);
        float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * _2305;
        float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * _2306;
        float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * _2307;
        float _2466 = _386 + (-0.5);
        _2468 = cbMtdParam._m0[1u];
        _2470 = _2468.y * _2466;
        float _2473 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2474 = _2473 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
        _2475 = _2473 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
        _2476 = _2473 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
        _2477 = _2466 * 0.999000012874603271484375;
        _2487 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2487)
        {
            if ((cbInstanceData._m0[_438 + 7u].x + _2477) < 0.5)
            {
                _2643 = true;
                break;
            }
        }
        uint _2584 = _440 + uint(_2446.w);
        if ((cbInstanceData._m0[_2584].w < 1.0) && ((cbInstanceData._m0[_2584].w + _2477) < 0.5))
        {
            _2643 = true;
            break;
        }
        if ((_2470 + _233) < _2468.x)
        {
            _2643 = true;
            break;
        }
        _2643 = false;
        break;
    }
    float _2848;
    if (_2643)
    {
        discard_state = true;
        _2848 = 0.0;
    }
    else
    {
        _2848 = _2312;
    }
    SV_Target.x = _2474;
    SV_Target.y = _2475;
    SV_Target.z = _2476;
    SV_Target.w = _2848;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2312;
    discard_exit();
}


