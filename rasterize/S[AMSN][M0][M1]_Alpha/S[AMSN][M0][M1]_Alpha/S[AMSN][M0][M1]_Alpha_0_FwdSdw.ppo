#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _840;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _188 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _195 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _225 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _225.x * cbMtdParam._m0[9u].x;
    float _233 = _225.y * cbMtdParam._m0[9u].y;
    float _234 = _225.z * cbMtdParam._m0[9u].z;
    float _235 = _225.w * TEXCOORD_1.z;
    vec4 _247 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = _247.x;
    vec4 _261 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3462 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))));
    float _281 = fma(_278, _195 * NORMAL.x, fma(_271, _202 * TANGENT.x, (_188 * _180) * _269));
    float _284 = fma(_278, _195 * NORMAL.y, fma(_271, _202 * TANGENT.y, (_188 * _181) * _269));
    float _287 = fma(_278, _195 * NORMAL.z, fma(_271, _202 * TANGENT.z, (_188 * _182) * _269));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3473 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _295 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _3484 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _296 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    float _3495 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3506 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3517 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3528 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _300 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _316 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _408 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _411 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3539 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _439 = 1.0 - _300;
    float _440 = _436 * _439;
    float _441 = _437 * _439;
    float _442 = _438 * _439;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _300;
    float _448 = (_437 + (-0.039999999105930328369140625)) * _300;
    float _449 = (_438 + (-0.039999999105930328369140625)) * _300;
    float _450 = _447 + 0.039999999105930328369140625;
    float _452 = _448 + 0.039999999105930328369140625;
    float _453 = _449 + 0.039999999105930328369140625;
    vec4 _462 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _465 = _462.x * TEXCOORD_1.w;
    float _466 = dot(vec3(_292, _293, _294), vec3(_375, _376, _377));
    float _469 = _466 * 2.0;
    float _473 = (_469 * _292) - _375;
    float _474 = (_469 * _293) - _376;
    float _475 = (_469 * _294) - _377;
    float _479 = abs(dot(vec3(_375, _376, _377), vec3(_292, _293, _294)));
    float _3572 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _481 = sqrt(_296);
    float _494 = exp2((_481 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_481 * 3.0));
    float _500 = (1.0 - _494) * ((_481 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _501 = _494 * _481;
    float _529 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _839;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _564 = fma(_537, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _529));
        float _568 = fma(_537, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _529));
        float _572 = fma(_537, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _529));
        float _597 = _529 + _292;
        float _598 = _533 + _293;
        float _599 = _537 + _294;
        float _609 = fma(_599, cbModelParam._m0[26u].z, fma(_598, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _597)) - _564;
        float _610 = fma(_599, cbModelParam._m0[27u].z, fma(_598, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _597)) - _568;
        float _611 = fma(_599, cbModelParam._m0[28u].z, fma(_598, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _597)) - _572;
        float _615 = inversesqrt(dot(vec3(_609, _610, _611), vec3(_609, _610, _611)));
        float _628 = ((_615 * _609) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_564 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _629 = ((_615 * _610) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_568 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _630 = ((_615 * _611) / cbModelParam._m0[34u].z) + ((((((_572 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_628, _629, _630), 0.0);
        float _667 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_633.x + (-0.5));
        float _669 = _667 * (_633.y + (-0.5));
        float _670 = _667 * (_633.z + (-0.5));
        float _677 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_640.x + (-0.5));
        float _679 = _677 * (_640.y + (-0.5));
        float _680 = _677 * (_640.z + (-0.5));
        float _687 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_647.x + (-0.5));
        float _689 = _687 * (_647.y + (-0.5));
        float _690 = _687 * (_647.z + (-0.5));
        float _697 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_654.x + (-0.5));
        float _699 = _697 * (_654.y + (-0.5));
        float _700 = _697 * (_654.z + (-0.5));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _703 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _704 = _668 * 0.5;
        float _705 = _678 * 0.5;
        float _706 = _688 * 0.5;
        float _707 = dot(vec3(_704, _705, _706), vec3(_704, _705, _706));
        float _712 = (_707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_707);
        float _721 = (dot(vec3(_292, _293, _294), vec3(_712 * _704, _712 * _705, _712 * _706)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _731 = sqrt(((_705 * _705) + (_704 * _704)) + (_706 * _706)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _733 = _732 * 2.0;
        float _737 = (1.0 - _732) / (_732 + 1.0);
        float _3620 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _747 = ((((1.0 - _738) * (_733 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_733 + 1.0))) + _738) * _701;
        float _748 = _669 * 0.5;
        float _749 = _679 * 0.5;
        float _750 = _689 * 0.5;
        float _751 = dot(vec3(_748, _749, _750), vec3(_748, _749, _750));
        float _756 = (_751 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_751);
        float _764 = (dot(vec3(_292, _293, _294), vec3(_756 * _748, _756 * _749, _756 * _750)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _773 = sqrt(((_749 * _749) + (_748 * _748)) + (_750 * _750)) / (_702 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _774 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _775 = _774 * 2.0;
        float _779 = (1.0 - _774) / (_774 + 1.0);
        float _3653 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _789 = ((((1.0 - _780) * (_775 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_775 + 1.0))) + _780) * _702;
        float _790 = _670 * 0.5;
        float _791 = _680 * 0.5;
        float _792 = _690 * 0.5;
        float _793 = dot(vec3(_790, _791, _792), vec3(_790, _791, _792));
        float _798 = (_793 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_793);
        float _806 = (dot(vec3(_292, _293, _294), vec3(_798 * _790, _798 * _791, _798 * _792)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _815 = sqrt(((_791 * _791) + (_790 * _790)) + (_792 * _792)) / (_703 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _816 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _817 = _816 * 2.0;
        float _821 = (1.0 - _816) / (_816 + 1.0);
        float _3686 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _831 = ((((1.0 - _822) * (_817 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_817 + 1.0))) + _822) * _703;
        _839 = _670;
        _841 = _669;
        _842 = _668;
        _843 = _680;
        _844 = _679;
        _845 = _678;
        _846 = _690;
        _847 = _689;
        _848 = _688;
        _849 = _703;
        _850 = _702;
        _851 = _701;
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0)));
        _853 = cbModelParam._m0[36u].z * (isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)));
        _854 = cbModelParam._m0[36u].z * (isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0)));
    }
    else
    {
        _839 = _840;
        _841 = _840;
        _842 = _840;
        _843 = _840;
        _844 = _840;
        _845 = _840;
        _846 = _840;
        _847 = _840;
        _848 = _840;
        _849 = _840;
        _850 = _840;
        _851 = _840;
        _852 = 0.0;
        _853 = 0.0;
        _854 = 0.0;
    }
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _880 = fma(_537, cbModelParam._m0[30u].z, fma(_533, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _529));
        float _884 = fma(_537, cbModelParam._m0[31u].z, fma(_533, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _529));
        float _888 = fma(_537, cbModelParam._m0[32u].z, fma(_533, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _529));
        float _911 = _529 + _292;
        float _912 = _533 + _293;
        float _913 = _537 + _294;
        float _923 = fma(_913, cbModelParam._m0[30u].z, fma(_912, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _911)) - _880;
        float _924 = fma(_913, cbModelParam._m0[31u].z, fma(_912, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _911)) - _884;
        float _925 = fma(_913, cbModelParam._m0[32u].z, fma(_912, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _911)) - _888;
        float _929 = inversesqrt(dot(vec3(_923, _924, _925), vec3(_923, _924, _925)));
        float _942 = ((_929 * _923) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_880 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _943 = ((_929 * _924) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_884 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _944 = ((_929 * _925) / cbModelParam._m0[35u].z) + ((((((_888 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_942, _943, _944), 0.0);
        float _979 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_946.x + (-0.5));
        float _981 = _979 * (_946.y + (-0.5));
        float _982 = _979 * (_946.z + (-0.5));
        float _989 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_953.x + (-0.5));
        float _991 = _989 * (_953.y + (-0.5));
        float _992 = _989 * (_953.z + (-0.5));
        float _999 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_960.x + (-0.5));
        float _1001 = _999 * (_960.y + (-0.5));
        float _1002 = _999 * (_960.z + (-0.5));
        float _1009 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_967.x + (-0.5));
        float _1011 = _1009 * (_967.y + (-0.5));
        float _1012 = _1009 * (_967.z + (-0.5));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1015 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1016 = _980 * 0.5;
        float _1017 = _990 * 0.5;
        float _1018 = _1000 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(_292, _293, _294), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3749 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1043 + 1.0))) + _1048) * _1013;
        float _1058 = _981 * 0.5;
        float _1059 = _991 * 0.5;
        float _1060 = _1001 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_292, _293, _294), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1014 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3782 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1085 + 1.0))) + _1090) * _1014;
        float _1100 = _982 * 0.5;
        float _1101 = _992 * 0.5;
        float _1102 = _1002 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_292, _293, _294), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1015 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3815 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1127 + 1.0))) + _1132) * _1015;
        _1149 = _982;
        _1150 = _981;
        _1151 = _980;
        _1152 = _992;
        _1153 = _991;
        _1154 = _990;
        _1155 = _1002;
        _1156 = _1001;
        _1157 = _1000;
        _1158 = _1015;
        _1159 = _1014;
        _1160 = _1013;
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1162 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1163 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _840;
        _1150 = _840;
        _1151 = _840;
        _1152 = _840;
        _1153 = _840;
        _1154 = _840;
        _1155 = _840;
        _1156 = _840;
        _1157 = _840;
        _1158 = _840;
        _1159 = _840;
        _1160 = _840;
        _1161 = 0.0;
        _1162 = 0.0;
        _1163 = 0.0;
    }
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1174 = (cbModelParam._m0[1u].x * (_1162 - _853)) + _853;
    float _1175 = (cbModelParam._m0[1u].x * (_1163 - _854)) + _854;
    float _1196 = fma(_1175, cbSceneParam._m0[89u].z, fma(_1174, cbSceneParam._m0[89u].y, _1173 * cbSceneParam._m0[89u].x));
    float _1199 = fma(_1175, cbSceneParam._m0[90u].z, fma(_1174, cbSceneParam._m0[90u].y, _1173 * cbSceneParam._m0[90u].x));
    float _1202 = fma(_1175, cbSceneParam._m0[91u].z, fma(_1174, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1173));
    float _1217 = _473 * 0.5;
    float _1218 = _474 * 0.5;
    float _1219 = _475 * 0.5;
    float _1220 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1151, _1154, _1157, _1160));
    float _1223 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1150, _1153, _1156, _1159));
    float _1226 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1260;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1233 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_839, _843, _846, _849));
        float _1237 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_841, _844, _847, _850));
        float _1241 = dot(vec4(_1217, _1218, _1219, 1.0), vec4(_842, _845, _848, _851));
        float _1248 = dot(vec4(cbModelParam._m0[39u]), vec4(_1217, _1218, _1219, 1.0));
        _1260 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1248) ? 0.0 : (isnan(0.0) ? _1248 : max(0.0, _1248))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1260 = 1.0;
    }
    float _1271;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1262 = dot(vec4(cbModelParam._m0[40u]), vec4(_1217, _1218, _1219, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)), isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1262) ? 0.0 : (isnan(0.0) ? _1262 : max(0.0, _1262))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1275 = (_1271 * cbModelParam._m0[1u].x) + (_1260 * (1.0 - cbModelParam._m0[1u].x));
    float _1285 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _296);
    float _1286 = isnan(_1285) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1285 : min(cbModelParam._m0[25u].z, _1285));
    float _1368;
    float _1370;
    float _1372;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1335 = fma(_537, cbModelParam._m0[13u].z, fma(_533, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _529)) + cbModelParam._m0[13u].w;
        float _1339 = fma(_537, cbModelParam._m0[14u].z, fma(_533, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _529)) + cbModelParam._m0[14u].w;
        float _1343 = fma(_537, cbModelParam._m0[15u].z, fma(_533, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _529)) + cbModelParam._m0[15u].w;
        float _1346 = fma(_475, cbModelParam._m0[13u].z, fma(_474, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _473));
        float _1349 = fma(_475, cbModelParam._m0[14u].z, fma(_474, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _473));
        float _1352 = fma(_475, cbModelParam._m0[15u].z, fma(_474, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _473));
        float _1380;
        if (_1346 > 0.0)
        {
            _1380 = abs((1.0 - _1335) / _1346);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1346 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1335 + 1.0) / _1346);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1380 = frontier_phi_14_12_ladder;
        }
        float _1556;
        if (_1349 > 0.0)
        {
            _1556 = abs((1.0 - _1339) / _1349);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1349 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1339 + 1.0) / _1349);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1556 = frontier_phi_23_19_ladder;
        }
        float _1852;
        if (_1352 > 0.0)
        {
            _1852 = abs((1.0 - _1343) / _1352);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1343 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1852 = frontier_phi_35_30_ladder;
        }
        float _1854 = isnan(_1556) ? _1380 : (isnan(_1380) ? _1556 : min(_1380, _1556));
        float _1855 = isnan(_1852) ? _1854 : (isnan(_1854) ? _1852 : min(_1854, _1852));
        float _1859 = (_1855 * _1346) + _1335;
        float _1860 = (_1855 * _1349) + _1339;
        float _1861 = (_1855 * _1352) + _1343;
        float _1862 = _1855 * 9.9999997473787516355514526367188e-05;
        float _1864 = (-1.0) - _1862;
        float _1866 = _1862 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1861 > _1866) || ((_1861 < _1864) || ((_1860 > _1866) || ((_1860 < _1864) || ((_1859 < _1864) || (_1859 > _1866))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2006 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1861, cbModelParam._m0[9u].z, fma(_1860, cbModelParam._m0[9u].y, _1859 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1861, cbModelParam._m0[10u].z, fma(_1860, cbModelParam._m0[10u].y, _1859 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1861, cbModelParam._m0[11u].z, fma(_1860, cbModelParam._m0[11u].y, _1859 * cbModelParam._m0[11u].x))), _1286);
            frontier_phi_13_35_ladder = _2006.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2006.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2006.x * cbModelParam._m0[1u].y;
        }
        _1368 = frontier_phi_13_35_ladder_2;
        _1370 = frontier_phi_13_35_ladder_1;
        _1372 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1356 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_473, _474, _475), _1286);
        _1368 = _1356.x * cbModelParam._m0[1u].y;
        _1370 = _1356.y * cbModelParam._m0[1u].y;
        _1372 = _1356.z * cbModelParam._m0[1u].y;
    }
    float _1376 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _296);
    float _1377 = isnan(_1376) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1376 : min(cbModelParam._m0[25u].w, _1376));
    float _1470;
    float _1472;
    float _1474;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1434 = fma(_537, cbModelParam._m0[21u].z, fma(_533, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _529)) + cbModelParam._m0[21u].w;
        float _1438 = fma(_537, cbModelParam._m0[22u].z, fma(_533, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _529)) + cbModelParam._m0[22u].w;
        float _1442 = fma(_537, cbModelParam._m0[23u].z, fma(_533, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _529)) + cbModelParam._m0[23u].w;
        float _1445 = fma(_475, cbModelParam._m0[21u].z, fma(_474, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _473));
        float _1448 = fma(_475, cbModelParam._m0[22u].z, fma(_474, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _473));
        float _1451 = fma(_475, cbModelParam._m0[23u].z, fma(_474, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _473));
        float _1561;
        if (_1445 > 0.0)
        {
            _1561 = abs((1.0 - _1434) / _1445);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1445 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1434 + 1.0) / _1445);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1561 = frontier_phi_25_21_ladder;
        }
        float _1879;
        if (_1448 > 0.0)
        {
            _1879 = abs((1.0 - _1438) / _1448);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1438 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1879 = frontier_phi_37_32_ladder;
        }
        float _2217;
        if (_1451 > 0.0)
        {
            _2217 = abs((1.0 - _1442) / _1451);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1442 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2217 = frontier_phi_47_44_ladder;
        }
        float _2219 = isnan(_1879) ? _1561 : (isnan(_1561) ? _1879 : min(_1561, _1879));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1445) + _1434;
        float _2225 = (_2220 * _1448) + _1438;
        float _2226 = (_2220 * _1451) + _1442;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2348 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1377);
            frontier_phi_22_47_ladder = _2348.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2348.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2348.x * cbModelParam._m0[1u].z;
        }
        _1470 = frontier_phi_22_47_ladder_2;
        _1472 = frontier_phi_22_47_ladder_1;
        _1474 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1454 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_473, _474, _475), _1377);
        _1470 = _1454.x * cbModelParam._m0[1u].z;
        _1472 = _1454.y * cbModelParam._m0[1u].z;
        _1474 = _1454.z * cbModelParam._m0[1u].z;
    }
    float _1487 = (((_500 * _450) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_500 * _452) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1491 = (((_500 * _453) + _501) * _465) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1494 = fma(_1491, cbSceneParam._m0[89u].z, fma(_1489, cbSceneParam._m0[89u].y, _1487 * cbSceneParam._m0[89u].x));
    float _1497 = fma(_1491, cbSceneParam._m0[90u].z, fma(_1489, cbSceneParam._m0[90u].y, _1487 * cbSceneParam._m0[90u].x));
    float _1500 = fma(_1491, cbSceneParam._m0[91u].z, fma(_1489, cbSceneParam._m0[91u].y, _1487 * cbSceneParam._m0[91u].x));
    float _1535 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1539 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1543 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1547 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1548 = _1535 / _1547;
    float _1549 = _1539 / _1547;
    float _1550 = _1543 / _1547;
    float _1697;
    float _1698;
    float _1699;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1577 = ((uint(_1550 > cbSceneParam._m0[59u].y) + uint(_1550 > cbSceneParam._m0[59u].x)) + uint(_1550 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1578 = _1577 + 43u;
        uint _1586 = _1577 + 44u;
        uint _1594 = _1577 + 45u;
        uint _1602 = _1577 + 46u;
        float _1613 = fma(_1547, cbSceneParam._m0[_1578].w, fma(_1543, cbSceneParam._m0[_1578].z, fma(_1539, cbSceneParam._m0[_1578].y, _1535 * cbSceneParam._m0[_1578].x)));
        float _1617 = fma(_1547, cbSceneParam._m0[_1586].w, fma(_1543, cbSceneParam._m0[_1586].z, fma(_1539, cbSceneParam._m0[_1586].y, _1535 * cbSceneParam._m0[_1586].x)));
        float _1625 = fma(_1547, cbSceneParam._m0[_1602].w, fma(_1543, cbSceneParam._m0[_1602].z, fma(_1539, cbSceneParam._m0[_1602].y, _1535 * cbSceneParam._m0[_1602].x)));
        float _1630 = cbSceneParam._m0[33u].z * _1625;
        float _1632 = cbSceneParam._m0[33u].w * _1625;
        float _1635 = fma(_1547, cbSceneParam._m0[_1594].w, fma(_1543, cbSceneParam._m0[_1594].z, fma(_1539, cbSceneParam._m0[_1594].y, _1535 * cbSceneParam._m0[_1594].x))) / _1625;
        float _1683 = (cbSceneParam._m0[33u].x - sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550))) * cbSceneParam._m0[33u].y;
        float _3941 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1690 = (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 + _1613) / _1625, (_1632 + _1617) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1632 + _1613) / _1625, (_1617 - _1630) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 - _1630) / _1625, (_1617 - _1632) / _1625), _1635), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1613 - _1632) / _1625, (_1630 + _1617) / _1625), _1635), 0.0)).x), vec4(0.25)));
        _1697 = 1.0 - (_1690 * cbSceneParam._m0[34u].x);
        _1698 = 1.0 - (_1690 * cbSceneParam._m0[34u].y);
        _1699 = 1.0 - (_1690 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1697 = 1.0;
        _1698 = 1.0;
        _1699 = 1.0;
    }
    float _1763;
    float _1765;
    float _1767;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1751 = fma(_1547, cbSceneParam._m0[63u].w, fma(_1543, cbSceneParam._m0[63u].z, fma(_1539, cbSceneParam._m0[63u].y, _1535 * cbSceneParam._m0[63u].x)));
        float _1752 = fma(_1547, cbSceneParam._m0[60u].w, fma(_1543, cbSceneParam._m0[60u].z, fma(_1539, cbSceneParam._m0[60u].y, _1535 * cbSceneParam._m0[60u].x))) / _1751;
        float _1753 = fma(_1547, cbSceneParam._m0[61u].w, fma(_1543, cbSceneParam._m0[61u].z, fma(_1539, cbSceneParam._m0[61u].y, _1535 * cbSceneParam._m0[61u].x))) / _1751;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1752 >= cbSceneParam._m0[64u].x) && (_1753 >= cbSceneParam._m0[64u].y)) && (_1752 <= cbSceneParam._m0[64u].z)) && (_1753 <= cbSceneParam._m0[64u].w))
        {
            float _1892 = fma(_1547, cbSceneParam._m0[62u].w, fma(_1543, cbSceneParam._m0[62u].z, fma(_1539, cbSceneParam._m0[62u].y, _1535 * cbSceneParam._m0[62u].x))) / _1751;
            float _1896 = isnan(cbSceneParam._m0[41u].w) ? _1892 : (isnan(_1892) ? cbSceneParam._m0[41u].w : max(_1892, cbSceneParam._m0[41u].w));
            float _1939 = (cbSceneParam._m0[33u].x - sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550))) * cbSceneParam._m0[33u].y;
            float _3957 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
            float _1946 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1752, cbSceneParam._m0[33u].w + _1753), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1752, _1753 - cbSceneParam._m0[33u].z), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1752 - cbSceneParam._m0[33u].z, _1753 - cbSceneParam._m0[33u].w), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1752 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1753), _1896), 0.0)).x), vec4(0.25)));
            float _1950 = 1.0 - (_1946 * cbSceneParam._m0[34u].x);
            float _1951 = 1.0 - (_1946 * cbSceneParam._m0[34u].y);
            float _1952 = 1.0 - (_1946 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1952) ? _1699 : (isnan(_1699) ? _1952 : min(_1699, _1952));
            frontier_phi_34_33_ladder_1 = isnan(_1951) ? _1698 : (isnan(_1698) ? _1951 : min(_1698, _1951));
            frontier_phi_34_33_ladder_2 = isnan(_1950) ? _1697 : (isnan(_1697) ? _1950 : min(_1697, _1950));
        }
        else
        {
            frontier_phi_34_33_ladder = _1699;
            frontier_phi_34_33_ladder_1 = _1698;
            frontier_phi_34_33_ladder_2 = _1697;
        }
        _1763 = frontier_phi_34_33_ladder_2;
        _1765 = frontier_phi_34_33_ladder_1;
        _1767 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1763 = _1697;
        _1765 = _1698;
        _1767 = _1699;
    }
    uvec4 _1772 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1774 = _1772.x * 14u;
    uint _1775 = _1774 + 13u;
    float _1782 = _465 + (-1.0);
    float _1787 = (cbLight._m0[_1775].x * _1782) + 1.0;
    float _1788 = (cbLight._m0[_1775].y * _1782) + 1.0;
    float _1789 = (cbLight._m0[_1775].z * _1782) + 1.0;
    float _1790 = (cbLight._m0[_1775].w * _1782) + 1.0;
    uint _1791 = _1774 + 5u;
    float _1797 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
    uint _1801 = _1774 + 4u;
    float _1811 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
    uint _1815 = _1774 | 1u;
    float _1826 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_292, _293, _294));
    float _1829 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_292, _293, _294));
    float _3993 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _4004 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1834 = (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.3183098733425140380859375;
    float _1836 = (isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * 0.3183098733425140380859375;
    float _1843 = ((cbLight._m0[_1791].x * _1797) * _1836) + (((cbLight._m0[_1801].x * _1763) * _1811) * _1834);
    float _1844 = ((_1797 * cbLight._m0[_1791].y) * _1836) + (((cbLight._m0[_1801].y * _1765) * _1811) * _1834);
    float _1845 = ((_1797 * cbLight._m0[_1791].z) * _1836) + (((cbLight._m0[_1801].z * _1767) * _1811) * _1834);
    uvec4 _1849 = floatBitsToUint(cbLight._m0[_1774 + 12u]);
    bool _1851 = _1849.x == 0u;
    float _1953;
    float _1955;
    float _1957;
    if (_1851)
    {
        _1953 = _1843;
        _1955 = _1844;
        _1957 = _1845;
    }
    else
    {
        uint _1961 = _1774 + 6u;
        float _1977 = (dot(vec3(cbLight._m0[_1774 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1978 = _1977 * _1977;
        float _4015 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1979 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1980 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _1953 = (((cbLight._m0[_1961].x * 0.3183098733425140380859375) * _1979) * _1980) + _1843;
        _1955 = (((cbLight._m0[_1961].y * 0.3183098733425140380859375) * _1979) * _1980) + _1844;
        _1957 = (((cbLight._m0[_1961].z * 0.3183098733425140380859375) * _1979) * _1980) + _1845;
    }
    bool _1960 = _1849.y == 0u;
    float _2015;
    float _2017;
    float _2019;
    if (_1960)
    {
        _2015 = _1953;
        _2017 = _1955;
        _2019 = _1957;
    }
    else
    {
        uint _2188 = _1774 + 7u;
        float _2204 = (dot(vec3(cbLight._m0[_1774 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4031 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2207 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2015 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _1953;
        _2017 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _1955;
        _2019 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _1957;
    }
    uint _2022 = _1774 + 8u;
    float _2035 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1774].w)) * _296) * 0.949999988079071044921875);
    float _2036 = _2035 * _2035;
    float _2037 = cbLight._m0[_1774].x + _375;
    float _2038 = cbLight._m0[_1774].y + _376;
    float _2039 = cbLight._m0[_1774].z + _377;
    float _2043 = inversesqrt(dot(vec3(_2037, _2038, _2039), vec3(_2037, _2038, _2039)));
    float _2044 = _2043 * _2037;
    float _2045 = _2043 * _2038;
    float _2046 = _2043 * _2039;
    float _2047 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1774].xyz));
    float _4047 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2050 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2051 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2052 = dot(vec3(_292, _293, _294), vec3(_2044, _2045, _2046));
    float _4069 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2055 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2056 = dot(vec3(cbLight._m0[_1774].xyz), vec3(_2044, _2045, _2046));
    float _4080 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = _2036 * _2036;
    float _2064 = ((_2055 * _2055) * (_2060 + (-1.0))) + 1.0;
    float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0);
    float _2073 = 0.959999978542327880859375 - _447;
    float _2075 = 0.959999978542327880859375 - _448;
    float _2076 = 0.959999978542327880859375 - _449;
    float _2083 = 1.0 - _2036;
    float _2094 = (0.5 / (((_2051 * ((_2050 * _2083) + _2036)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2083) + _2036) * _2050))) * _2050;
    float _4091 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2096 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2060 / ((_2064 * _2064) * 3.141590118408203125));
    uint _2110 = _1774 + 9u;
    float _2121 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _296) * 0.949999988079071044921875);
    float _2122 = _2121 * _2121;
    float _2123 = cbLight._m0[_1815].x + _375;
    float _2124 = cbLight._m0[_1815].y + _376;
    float _2125 = cbLight._m0[_1815].z + _377;
    float _2129 = inversesqrt(dot(vec3(_2123, _2124, _2125), vec3(_2123, _2124, _2125)));
    float _2130 = _2129 * _2123;
    float _2131 = _2129 * _2124;
    float _2132 = _2129 * _2125;
    float _2133 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1815].xyz));
    float _4102 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2136 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2137 = dot(vec3(_292, _293, _294), vec3(_2130, _2131, _2132));
    float _4113 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2130, _2131, _2132));
    float _4124 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2122 * _2122;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2156 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
    float _2163 = 1.0 - _2122;
    float _2173 = (0.5 / (((_2051 * ((_2136 * _2163) + _2122)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2163) + _2122) * _2136))) * _2136;
    float _4135 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    float _2185 = (((((_2156 * _2073) + _450) * cbLight._m0[_2110].x) * _2175) * _1797) + ((((cbLight._m0[_2022].x * _1763) * ((_2072 * _2073) + _450)) * _2096) * _1811);
    float _2186 = (((((_2156 * _2075) + _452) * cbLight._m0[_2110].y) * _2175) * _1797) + ((((cbLight._m0[_2022].y * _1765) * ((_2072 * _2075) + _452)) * _2096) * _1811);
    float _2187 = (((((_2156 * _2076) + _453) * cbLight._m0[_2110].z) * _2175) * _1797) + ((((cbLight._m0[_2022].z * _1767) * ((_2072 * _2076) + _453)) * _2096) * _1811);
    float _2243;
    float _2245;
    float _2247;
    if (_1851)
    {
        _2243 = _2185;
        _2245 = _2186;
        _2247 = _2187;
    }
    else
    {
        uint _2249 = _1774 + 2u;
        uint _2253 = _1774 + 10u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _296) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _375;
        float _2270 = cbLight._m0[_2249].y + _376;
        float _2271 = cbLight._m0[_2249].z + _377;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2249].xyz));
        float _4146 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _2283 = dot(vec3(_292, _293, _294), vec3(_2276, _2277, _2278));
        float _4157 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4168 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
        float _2309 = 1.0 - _2268;
        float _2319 = (0.5 / (((_2051 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2309) + _2268) * _2282))) * _2282;
        float _4179 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2321 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2322 = isnan(1.0) ? _1789 : (isnan(_1789) ? 1.0 : min(_1789, 1.0));
        _2243 = (((((_2302 * _2073) + _450) * cbLight._m0[_2253].x) * _2321) * _2322) + _2185;
        _2245 = (((((_2302 * _2075) + _452) * cbLight._m0[_2253].y) * _2321) * _2322) + _2186;
        _2247 = (((((_2302 * _2076) + _453) * cbLight._m0[_2253].z) * _2321) * _2322) + _2187;
    }
    float _2353;
    float _2355;
    float _2357;
    if (_1960)
    {
        _2353 = _2243;
        _2355 = _2245;
        _2357 = _2247;
    }
    else
    {
        uint _2364 = _1774 + 3u;
        uint _2368 = _1774 + 11u;
        float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _296) * 0.949999988079071044921875);
        float _2383 = _2382 * _2382;
        float _2384 = cbLight._m0[_2364].x + _375;
        float _2385 = cbLight._m0[_2364].y + _376;
        float _2386 = cbLight._m0[_2364].z + _377;
        float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
        float _2391 = _2390 * _2384;
        float _2392 = _2390 * _2385;
        float _2393 = _2390 * _2386;
        float _2394 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2364].xyz));
        float _4195 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _2398 = dot(vec3(_292, _293, _294), vec3(_2391, _2392, _2393));
        float _4206 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2401 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _2402 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2391, _2392, _2393));
        float _4217 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2406 = _2383 * _2383;
        float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
        float _2417 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
        float _2424 = 1.0 - _2383;
        float _2434 = (0.5 / (((_2051 * ((_2397 * _2424) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2051 * _2424) + _2383) * _2397))) * _2397;
        float _4228 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2436 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
        float _2437 = isnan(1.0) ? _1790 : (isnan(_1790) ? 1.0 : min(_1790, 1.0));
        _2353 = (((((_2417 * _2073) + _450) * cbLight._m0[_2368].x) * _2436) * _2437) + _2243;
        _2355 = (((((_2417 * _2075) + _452) * cbLight._m0[_2368].y) * _2436) * _2437) + _2245;
        _2357 = (((((_2417 * _2076) + _453) * cbLight._m0[_2368].z) * _2436) * _2437) + _2247;
    }
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_1772.y == 0u)
    {
        uvec4 _2458 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2459 = _2458.x;
        uint _2470 = uint((float(_2458.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2459))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2459)));
        float _2480 = (log2(_1550 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2481 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        uint _2484 = uint(isnan(14.0) ? _2481 : (isnan(_2481) ? 14.0 : min(_2481, 14.0)));
        uvec4 _2489 = texelFetch(g_lightClusterGridBuffer, int(((_2484 << 2u) + (_2470 << 6u)) >> 2u));
        uint _2490 = _2489.x;
        uint _2491 = _2458.z;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((((1u << ((_2491 >> 4u) & 15u)) + 4294967295u) & _2490) == 0u) || ((_2491 & 240u) == 0u))
        {
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
        }
        else
        {
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2733)
                {
                    frontier_phi_66_pred = _2722;
                    frontier_phi_66_pred_1 = _2721;
                    frontier_phi_66_pred_2 = _2720;
                    frontier_phi_66_pred_3 = _2719;
                    frontier_phi_66_pred_4 = _2718;
                    frontier_phi_66_pred_5 = _2717;
                }
                else
                {
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    uint _2847;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2732;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    for (;;)
                    {
                        uint _2851 = uint(findLSB(_2847)) + (_2723 << 5u);
                        uint _2848 = (_2847 + 4294967295u) & _2847;
                        uint _2853 = _2851 * 48u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2873 = (_2851 * 48u) + 4u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2892 = (_2851 * 48u) + 8u;
                        vec3 _2903 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x));
                        float _2907 = _2867.x - _1548;
                        float _2908 = _2867.y - _1549;
                        float _2909 = _2867.z - _1550;
                        float _2910 = dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909));
                        float _2913 = inversesqrt(_2910);
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2917 = dot(vec3(_405, _408, _411), vec3(_2914, _2915, _2916));
                        float _2922 = 1.0 - (_2910 * _2867.w);
                        float _4254 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                        float _2924 = sqrt(_2910) * _2886.w;
                        float _2927 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2917) + _2928;
                        float _2934 = _2924 * _2924;
                        float _2938 = ((isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))) * _2923) / ((_2934 * 0.699999988079071044921875) + 1.0);
                        float _2942 = (-0.0) - _1548;
                        float _2943 = (-0.0) - _1549;
                        float _2944 = (-0.0) - _1550;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2958 = exp2(log2(1.0 / ((_2934 * 3.5) + 5.0)) * 0.25);
                        float _2959 = 1.0 - _481;
                        float _2966 = sqrt(1.0 - ((1.0 - (_2959 * _2959)) * (1.0 - (_2958 * _2958))));
                        float _2967 = _2966 * _2966;
                        float _2968 = _2967 * _2967;
                        float _2969 = _2949 + _2914;
                        float _2970 = _2950 + _2915;
                        float _2971 = _2951 + _2916;
                        float _2975 = inversesqrt(dot(vec3(_2969, _2970, _2971), vec3(_2969, _2970, _2971)));
                        float _2979 = dot(vec3(_405, _408, _411), vec3(_2949, _2950, _2951));
                        float _4270 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
                        float _2983 = dot(vec3(_405, _408, _411), vec3(_2975 * _2969, _2975 * _2970, _2975 * _2971));
                        float _4281 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                        float _2986 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
                        float _2990 = ((_2986 * _2986) * (_2968 + (-1.0))) + 1.0;
                        float _2991 = _2927 * _2967;
                        float _2992 = _2991 * _2991;
                        float _2995 = ((1.0 - _2992) * _2917) + _2992;
                        float _4292 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                        float _2996 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
                        float _2997 = 1.0 - _2967;
                        float _3007 = (0.5 / (((_2996 * ((_2982 * _2997) + _2967)) + 9.9999999392252902907785028219223e-09) + (((_2996 * _2997) + _2967) * _2982))) * _2996;
                        float _4303 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                        float _3018 = (((_2968 * 3.1415927410125732421875) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) / ((_2990 * _2990) * ((_2934 * 2.1991131305694580078125) + 3.141590118408203125))) * _2923;
                        _2776 = (_2938 * _2886.x) + _2844;
                        _2777 = (_2938 * _2886.y) + _2845;
                        _2778 = (_2938 * _2886.z) + _2846;
                        _2773 = (_3018 * _2903.x) + _2841;
                        _2774 = (_3018 * _2903.y) + _2842;
                        _2775 = (_3018 * _2903.z) + _2843;
                        if (_2848 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2848;
                        }
                    }
                    frontier_phi_66_pred = _2778;
                    frontier_phi_66_pred_1 = _2777;
                    frontier_phi_66_pred_2 = _2776;
                    frontier_phi_66_pred_3 = _2775;
                    frontier_phi_66_pred_4 = _2774;
                    frontier_phi_66_pred_5 = _2773;
                }
                _2583 = frontier_phi_66_pred;
                _2581 = frontier_phi_66_pred_1;
                _2579 = frontier_phi_66_pred_2;
                _2577 = frontier_phi_66_pred_3;
                _2575 = frontier_phi_66_pred_4;
                _2573 = frontier_phi_66_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2573;
                    _2718 = _2575;
                    _2719 = _2577;
                    _2720 = _2579;
                    _2721 = _2581;
                    _2722 = _2583;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
        }
        uvec4 _2586 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2587 = _2586.z;
        uint _2589 = (_2587 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2589) & _2490) == 0u)
        {
            _2685 = _2572;
            _2687 = _2574;
            _2689 = _2576;
            _2691 = _2578;
            _2693 = _2580;
            _2695 = _2582;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550)));
            float _2711 = _2710 * _1548;
            float _2712 = _2710 * _1549;
            float _2713 = _2710 * _1550;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2589 < ((_2587 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2824 = _2572;
                float _2825 = _2574;
                float _2826 = _2576;
                float _2827 = _2578;
                float _2828 = _2580;
                float _2829 = _2582;
                uint _2830 = _2589;
                uint _2839;
                bool _2840;
                for (;;)
                {
                    _2839 = texelFetch(g_lightClassification, int((((_2484 << 5u) + (_2470 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                    _2840 = _2839 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2840)
                    {
                        frontier_phi_72_pred = _2829;
                        frontier_phi_72_pred_1 = _2828;
                        frontier_phi_72_pred_2 = _2827;
                        frontier_phi_72_pred_3 = _2826;
                        frontier_phi_72_pred_4 = _2825;
                        frontier_phi_72_pred_5 = _2824;
                    }
                    else
                    {
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3036 = _2824;
                        float _3037 = _2825;
                        float _3038 = _2826;
                        float _3039 = _2827;
                        float _3040 = _2828;
                        float _3041 = _2829;
                        uint _3042 = _2839;
                        uint _3043;
                        vec4 _3068;
                        float _3069;
                        vec4 _3084;
                        vec3 _3096;
                        vec4 _3112;
                        vec4 _3128;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3053 = ((_2830 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3042));
                            _3043 = (_3042 + 4294967295u) & _3042;
                            uint _3055 = _3053 * 40u;
                            _3068 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 3u)).x));
                            _3069 = _3068.w;
                            uint _3071 = (_3053 * 40u) + 4u;
                            _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            uint _3086 = (_3053 * 40u) + 8u;
                            _3096 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3086 + 2u)).x));
                            uint _3099 = (_3053 * 40u) + 16u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3053 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3131 = (_3053 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3053 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_1550, _3163.z, fma(_1549, _3163.y, _3163.x * _1548)) + _3163.w;
                            _3176 = !((fma(_1550, _3144.z, fma(_1549, _3144.y, _3144.x * _1548)) + _3144.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3068.x - _1548;
                                float _3204 = _3068.y - _1549;
                                float _3205 = _3068.z - _1550;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3069 * _3069));
                                float _4314 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                                float _3221 = sqrt(_3206) * _3084.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_405, _408, _411))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_1550, _3112.z, fma(_1549, _3112.y, _3112.x * _1548)) + _3112.w) / _3175;
                                float _3235 = (fma(_1550, _3128.z, fma(_1549, _3128.y, _3128.x * _1548)) + _3128.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4330 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _481;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2711;
                                float _3265 = _3211 - _2712;
                                float _3266 = _3212 - _2713;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_405, _408, _411), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4341 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
                                float _3278 = dot(vec3(_405, _408, _411), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4352 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_405, _408, _411), vec3(_3210, _3211, _3212))) + _3287;
                                float _4363 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4374 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3241 * _3084.y;
                                frontier_phi_78_pred_1 = _3241 * _3084.x;
                                frontier_phi_78_pred_2 = _3315 * _3096.z;
                                frontier_phi_78_pred_3 = _3315 * _3096.y;
                                frontier_phi_78_pred_4 = _3315 * _3096.x;
                                frontier_phi_78_pred_5 = _3241 * _3084.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3323 = frontier_phi_78_pred;
                            _3322 = frontier_phi_78_pred_1;
                            _3321 = frontier_phi_78_pred_2;
                            _3320 = frontier_phi_78_pred_3;
                            _3319 = frontier_phi_78_pred_4;
                            _3324 = frontier_phi_78_pred_5;
                            _3026 = _3322 + _3039;
                            _3027 = _3323 + _3040;
                            _3028 = _3324 + _3041;
                            _3023 = _3319 + _3036;
                            _3024 = _3320 + _3037;
                            _3025 = _3321 + _3038;
                            if (_3043 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3043;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3028;
                        frontier_phi_72_pred_1 = _3027;
                        frontier_phi_72_pred_2 = _3026;
                        frontier_phi_72_pred_3 = _3025;
                        frontier_phi_72_pred_4 = _3024;
                        frontier_phi_72_pred_5 = _3023;
                    }
                    _2696 = frontier_phi_72_pred;
                    _2694 = frontier_phi_72_pred_1;
                    _2692 = frontier_phi_72_pred_2;
                    _2690 = frontier_phi_72_pred_3;
                    _2688 = frontier_phi_72_pred_4;
                    _2686 = frontier_phi_72_pred_5;
                    uint _2831 = _2830 + 1u;
                    if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2824 = _2686;
                        _2825 = _2688;
                        _2826 = _2690;
                        _2827 = _2692;
                        _2828 = _2694;
                        _2829 = _2696;
                        _2830 = _2831;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2696;
                frontier_phi_60_61_ladder_1 = _2694;
                frontier_phi_60_61_ladder_2 = _2690;
                frontier_phi_60_61_ladder_3 = _2688;
                frontier_phi_60_61_ladder_4 = _2686;
                frontier_phi_60_61_ladder_5 = _2692;
            }
            else
            {
                frontier_phi_60_61_ladder = _2582;
                frontier_phi_60_61_ladder_1 = _2580;
                frontier_phi_60_61_ladder_2 = _2576;
                frontier_phi_60_61_ladder_3 = _2574;
                frontier_phi_60_61_ladder_4 = _2572;
                frontier_phi_60_61_ladder_5 = _2578;
            }
            _2685 = frontier_phi_60_61_ladder_4;
            _2687 = frontier_phi_60_61_ladder_3;
            _2689 = frontier_phi_60_61_ladder_2;
            _2691 = frontier_phi_60_61_ladder_5;
            _2693 = frontier_phi_60_61_ladder_1;
            _2695 = frontier_phi_60_61_ladder;
        }
        float _2700 = isnan(1.0) ? _465 : (isnan(_465) ? 1.0 : min(_465, 1.0));
        _2503 = (_2700 * _2691) + _2015;
        _2505 = (_2700 * _2693) + _2017;
        _2507 = (_2700 * _2695) + _2019;
        _2509 = ((_2685 * _450) * _2700) + _2353;
        _2511 = ((_2687 * _452) * _2700) + _2355;
        _2513 = ((_2689 * _453) * _2700) + _2357;
    }
    else
    {
        _2503 = _2015;
        _2505 = _2017;
        _2507 = _2019;
        _2509 = _2353;
        _2511 = _2355;
        _2513 = _2357;
    }
    float _4390 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4401 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _4412 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _4423 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _2538 = cbInstanceData._m0[_424 + 6u].w * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)));
    float _2543 = _383 / cbSceneParam._m0[86u].x;
    float _2544 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2558 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, (log2((isnan(cbSceneParam._m0[77u].w) ? _316 : (isnan(_316) ? cbSceneParam._m0[77u].w : min(_316, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2560 = _2558.x;
    float _2561 = _2558.y;
    float _2562 = _2558.z;
    float _2563 = _2558.w;
    float _2635;
    float _2637;
    float _2639;
    float _2641;
    if (_316 > cbSceneParam._m0[78u].w)
    {
        float _2597 = isnan(_316) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _316 : min(cbSceneParam._m0[80u].w, _316));
        float _2598 = _2597 / _316;
        float _2609 = _2598 * _368;
        float _2610 = _369 * _2598;
        float _2611 = (-0.0) - _2610;
        float _2613 = _2598 * _370;
        float _2615 = (cbSceneParam._m0[77u].w * _2611) / _2597;
        float _2616 = _2615 + cbSceneParam._m0[79u].w;
        float _2617 = cbSceneParam._m0[79u].w - _2610;
        float _2623 = sqrt(((_2609 * _2609) + (_2610 * _2610)) + (_2613 * _2613));
        float _2626 = (1.0 - (cbSceneParam._m0[77u].w / _2597)) * _2623;
        float _2631 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2633 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2786;
        if (abs((_2611 - _2615) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2786 = ((((_2616 > 0.0) ? exp2(_2631 * _2616) : (2.0 - exp2(_2633 * _2616))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2626;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : max(_2616, _2617));
            float _2748 = isnan(_2617) ? _2616 : (isnan(_2616) ? _2617 : min(_2616, _2617));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2786 = ((abs(_2623 / _2611) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2631 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2631 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2633 * _2757) - exp2(_2633 * _2758)) * _2746))) + (_2626 * cbSceneParam._m0[80u].z);
        }
        vec4 _2788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2543, _2544, 1.0), 0.0);
        float _2797 = exp2((_2786 * (-1.44269502162933349609375)) * (1.0 - _2788.w));
        float _2798 = log2(_2797);
        float _2814 = log2(_2563);
        _2635 = (exp2(_2814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].x)) * _2788.x) / cbSceneParam._m0[78u].x)) + _2560;
        _2637 = (exp2(_2814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].y)) * _2788.y) / cbSceneParam._m0[78u].y)) + _2561;
        _2639 = (exp2(_2814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].z)) * _2788.z) / cbSceneParam._m0[78u].z)) + _2562;
        _2641 = _2797 * _2563;
    }
    else
    {
        _2635 = _2560;
        _2637 = _2561;
        _2639 = _2562;
        _2641 = _2563;
    }
    float _2653 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2654 = _2653 == 3.0;
    float _2655 = log2(_2641);
    float _2662 = exp2(_2655 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2503 + ((isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))) * _465))) + ((_2509 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2663 = exp2(_2655 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2505 + ((isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))) * _465))) + ((_2511 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2664 = exp2(_2655 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2507 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _465))) + ((_2513 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1275)) * cbPerFrame._m0[3u].x));
    float _2673 = (_2653 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2673 * (_2654 ? _2662 : (_2662 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.y = _2673 * (_2654 ? _2663 : (_2663 + (cbSceneParam._m0[72u].w * _2637)));
    SV_Target.z = _2673 * (_2654 ? _2664 : (_2664 + (cbSceneParam._m0[72u].w * _2639)));
    SV_Target.w = _2538;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2538;
}


