#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _850;
float _3505;
float _3506;
float _3507;
float _3508;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _227 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _233 = _227.w;
    float _234 = _227.x * cbMtdParam._m0[9u].x;
    float _235 = _227.y * cbMtdParam._m0[9u].y;
    float _236 = _227.z * cbMtdParam._m0[9u].z;
    float _237 = _233 * TEXCOORD_1.z;
    vec4 _249 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3517 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0))));
    float _269 = fma(_266, _197 * NORMAL.x, fma(_259, _204 * TANGENT.x, (_190 * _182) * _257));
    float _272 = fma(_266, _197 * NORMAL.y, fma(_259, _204 * TANGENT.y, (_190 * _183) * _257));
    float _275 = fma(_266, _197 * NORMAL.z, fma(_259, _204 * TANGENT.z, (_190 * _184) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3528 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _283 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    float _3539 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _284 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
    float _3550 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3561 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3572 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _303 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _345 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _355 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _345);
    float _356 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _345);
    float _357 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _345);
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _355 * _361;
    float _363 = _356 * _361;
    float _364 = _357 * _361;
    vec4 _369 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _371 = _369.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _529 = sqrt(((_355 * _355) + (_356 * _356)) + (_357 * _357));
        float _535 = (cbMatDynParam._m0[5u].x * _529) + cbMatDynParam._m0[5u].y;
        float _3583 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
        float _536 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _540 = (cbMatDynParam._m0[5u].z * _529) + cbMatDynParam._m0[5u].w;
        float _3594 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0))) - _536)) + _536) < ((_371 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _404 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _407 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _410 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _423 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = _423 + 9u;
    uint _426 = _425 + uint(cbMatDynParam._m0[0u].w);
    float _432 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0)))) * cbInstanceData._m0[_426].x;
    float _433 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0)))) * cbInstanceData._m0[_426].y;
    float _434 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0)))) * cbInstanceData._m0[_426].z;
    float _3605 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _3616 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _3627 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    vec4 _446 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _449 = _446.x * TEXCOORD_1.w;
    float _450 = dot(vec3(_280, _281, _282), vec3(_362, _363, _364));
    float _453 = _450 * 2.0;
    float _457 = (_453 * _280) - _362;
    float _458 = (_453 * _281) - _363;
    float _459 = (_453 * _282) - _364;
    float _463 = abs(dot(vec3(_362, _363, _364), vec3(_280, _281, _282)));
    float _3638 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _465 = sqrt(_284);
    float _478 = exp2((_465 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_465 * 3.0));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _849;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _574 = fma(_518, cbModelParam._m0[26u].z, fma(_514, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _510));
        float _578 = fma(_518, cbModelParam._m0[27u].z, fma(_514, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _510));
        float _582 = fma(_518, cbModelParam._m0[28u].z, fma(_514, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _510));
        float _607 = _510 + _280;
        float _608 = _514 + _281;
        float _609 = _518 + _282;
        float _619 = fma(_609, cbModelParam._m0[26u].z, fma(_608, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _607)) - _574;
        float _620 = fma(_609, cbModelParam._m0[27u].z, fma(_608, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _607)) - _578;
        float _621 = fma(_609, cbModelParam._m0[28u].z, fma(_608, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _607)) - _582;
        float _625 = inversesqrt(dot(vec3(_619, _620, _621), vec3(_619, _620, _621)));
        float _638 = ((_625 * _619) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_574 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _639 = ((_625 * _620) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_578 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_625 * _621) / cbModelParam._m0[34u].z) + ((((((_582 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_638, _639, _640), 0.0);
        float _677 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_643.x + (-0.5));
        float _679 = _677 * (_643.y + (-0.5));
        float _680 = _677 * (_643.z + (-0.5));
        float _687 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _688 = _687 * (_650.x + (-0.5));
        float _689 = _687 * (_650.y + (-0.5));
        float _690 = _687 * (_650.z + (-0.5));
        float _697 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _698 = _697 * (_657.x + (-0.5));
        float _699 = _697 * (_657.y + (-0.5));
        float _700 = _697 * (_657.z + (-0.5));
        float _707 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_664.x + (-0.5));
        float _709 = _707 * (_664.y + (-0.5));
        float _710 = _707 * (_664.z + (-0.5));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = _678 * 0.5;
        float _715 = _688 * 0.5;
        float _716 = _698 * 0.5;
        float _717 = dot(vec3(_714, _715, _716), vec3(_714, _715, _716));
        float _722 = (_717 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_717);
        float _731 = (dot(vec3(_280, _281, _282), vec3(_722 * _714, _722 * _715, _722 * _716)) + 1.0) * 0.5;
        float _3664 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _741 = sqrt(((_715 * _715) + (_714 * _714)) + (_716 * _716)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3675 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3686 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * (_743 + 1.0))) + _748) * _711;
        float _758 = _679 * 0.5;
        float _759 = _689 * 0.5;
        float _760 = _699 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_280, _281, _282), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3697 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3708 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3719 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_785 + 1.0))) + _790) * _712;
        float _800 = _680 * 0.5;
        float _801 = _690 * 0.5;
        float _802 = _700 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_280, _281, _282), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3752 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_827 + 1.0))) + _832) * _713;
        _849 = _680;
        _851 = _679;
        _852 = _678;
        _853 = _690;
        _854 = _689;
        _855 = _688;
        _856 = _700;
        _857 = _699;
        _858 = _698;
        _859 = _713;
        _860 = _712;
        _861 = _711;
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
    }
    else
    {
        _849 = _850;
        _851 = _850;
        _852 = _850;
        _853 = _850;
        _854 = _850;
        _855 = _850;
        _856 = _850;
        _857 = _850;
        _858 = _850;
        _859 = _850;
        _860 = _850;
        _861 = _850;
        _862 = 0.0;
        _863 = 0.0;
        _864 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_518, cbModelParam._m0[30u].z, fma(_514, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _510));
        float _897 = fma(_518, cbModelParam._m0[31u].z, fma(_514, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _510));
        float _901 = fma(_518, cbModelParam._m0[32u].z, fma(_514, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _510));
        float _924 = _510 + _280;
        float _925 = _514 + _281;
        float _926 = _518 + _282;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_280, _281, _282), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3793 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3804 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3815 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_280, _281, _282), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3826 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3837 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3848 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_280, _281, _282), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3859 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3870 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3881 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _850;
        _1163 = _850;
        _1164 = _850;
        _1165 = _850;
        _1166 = _850;
        _1167 = _850;
        _1168 = _850;
        _1169 = _850;
        _1170 = _850;
        _1171 = _850;
        _1172 = _850;
        _1173 = _850;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _862)) + _862;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _863)) + _863;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _864)) + _864;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _457 * 0.5;
    float _1231 = _458 * 0.5;
    float _1232 = _459 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_849, _853, _856, _859));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_851, _854, _857, _860));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _855, _858, _861));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _284);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_518, cbModelParam._m0[13u].z, fma(_514, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_518, cbModelParam._m0[14u].z, fma(_514, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_518, cbModelParam._m0[15u].z, fma(_514, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _1362 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _1365 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _1393;
        if (_1359 > 0.0)
        {
            _1393 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1393 = frontier_phi_17_15_ladder;
        }
        float _1567;
        if (_1362 > 0.0)
        {
            _1567 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1567 = frontier_phi_26_22_ladder;
        }
        float _1863;
        if (_1365 > 0.0)
        {
            _1863 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1863 = frontier_phi_38_33_ladder;
        }
        float _1865 = isnan(_1567) ? _1393 : (isnan(_1393) ? _1567 : min(_1393, _1567));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1359) + _1348;
        float _1871 = (_1866 * _1362) + _1352;
        float _1872 = (_1866 * _1365) + _1356;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1875 = (-1.0) - _1873;
        float _1877 = _1873 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1872 > _1877) || ((_1872 < _1875) || ((_1871 > _1877) || ((_1871 < _1875) || ((_1870 < _1875) || (_1870 > _1877))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1872, cbModelParam._m0[9u].z, fma(_1871, cbModelParam._m0[9u].y, _1870 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1872, cbModelParam._m0[10u].z, fma(_1871, cbModelParam._m0[10u].y, _1870 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1872, cbModelParam._m0[11u].z, fma(_1871, cbModelParam._m0[11u].y, _1870 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_16_38_ladder = _2017.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2017.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_16_38_ladder_2;
        _1383 = frontier_phi_16_38_ladder_1;
        _1385 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _1299);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1389 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _284);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1389 : min(cbModelParam._m0[25u].w, _1389));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1447 = fma(_518, cbModelParam._m0[21u].z, fma(_514, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510)) + cbModelParam._m0[21u].w;
        float _1451 = fma(_518, cbModelParam._m0[22u].z, fma(_514, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510)) + cbModelParam._m0[22u].w;
        float _1455 = fma(_518, cbModelParam._m0[23u].z, fma(_514, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510)) + cbModelParam._m0[23u].w;
        float _1458 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1461 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1464 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1572;
        if (_1458 > 0.0)
        {
            _1572 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1572 = frontier_phi_28_24_ladder;
        }
        float _1890;
        if (_1461 > 0.0)
        {
            _1890 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1890 = frontier_phi_40_35_ladder;
        }
        float _2217;
        if (_1464 > 0.0)
        {
            _2217 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2217 = frontier_phi_50_47_ladder;
        }
        float _2219 = isnan(_1890) ? _1572 : (isnan(_1572) ? _1890 : min(_1572, _1890));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1458) + _1447;
        float _2225 = (_2220 * _1461) + _1451;
        float _2226 = (_2220 * _1464) + _1455;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_25_50_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1483 = frontier_phi_25_50_ladder_2;
        _1485 = frontier_phi_25_50_ladder_1;
        _1487 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _1390);
        _1483 = _1467.x * cbModelParam._m0[1u].z;
        _1485 = _1467.y * cbModelParam._m0[1u].z;
        _1487 = _1467.z * cbModelParam._m0[1u].z;
    }
    float _1499 = ((((1.0 - _478) * ((_465 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_478 * _465)) * _449;
    float _1500 = _1499 * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1501 = _1499 * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1502 = _1499 * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1501, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1501, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1501, cbSceneParam._m0[91u].y, _1500 * cbSceneParam._m0[91u].x));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1559 = _1546 / _1558;
    float _1560 = _1550 / _1558;
    float _1561 = _1554 / _1558;
    float _1708;
    float _1709;
    float _1710;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1588 = ((uint(_1561 > cbSceneParam._m0[59u].y) + uint(_1561 > cbSceneParam._m0[59u].x)) + uint(_1561 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1589 = _1588 + 43u;
        uint _1597 = _1588 + 44u;
        uint _1605 = _1588 + 45u;
        uint _1613 = _1588 + 46u;
        float _1624 = fma(_1558, cbSceneParam._m0[_1589].w, fma(_1554, cbSceneParam._m0[_1589].z, fma(_1550, cbSceneParam._m0[_1589].y, _1546 * cbSceneParam._m0[_1589].x)));
        float _1628 = fma(_1558, cbSceneParam._m0[_1597].w, fma(_1554, cbSceneParam._m0[_1597].z, fma(_1550, cbSceneParam._m0[_1597].y, _1546 * cbSceneParam._m0[_1597].x)));
        float _1636 = fma(_1558, cbSceneParam._m0[_1613].w, fma(_1554, cbSceneParam._m0[_1613].z, fma(_1550, cbSceneParam._m0[_1613].y, _1546 * cbSceneParam._m0[_1613].x)));
        float _1641 = cbSceneParam._m0[33u].z * _1636;
        float _1643 = cbSceneParam._m0[33u].w * _1636;
        float _1646 = fma(_1558, cbSceneParam._m0[_1605].w, fma(_1554, cbSceneParam._m0[_1605].z, fma(_1550, cbSceneParam._m0[_1605].y, _1546 * cbSceneParam._m0[_1605].x))) / _1636;
        float _1694 = (cbSceneParam._m0[33u].x - sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561))) * cbSceneParam._m0[33u].y;
        float _4007 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1701 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 + _1624) / _1636, (_1643 + _1628) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1643 + _1624) / _1636, (_1628 - _1641) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1624 - _1641) / _1636, (_1628 - _1643) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1624 - _1643) / _1636, (_1641 + _1628) / _1636), _1646), 0.0)).x), vec4(0.25)));
        _1708 = 1.0 - (_1701 * cbSceneParam._m0[34u].x);
        _1709 = 1.0 - (_1701 * cbSceneParam._m0[34u].y);
        _1710 = 1.0 - (_1701 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1708 = 1.0;
        _1709 = 1.0;
        _1710 = 1.0;
    }
    float _1774;
    float _1776;
    float _1778;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1762 = fma(_1558, cbSceneParam._m0[63u].w, fma(_1554, cbSceneParam._m0[63u].z, fma(_1550, cbSceneParam._m0[63u].y, _1546 * cbSceneParam._m0[63u].x)));
        float _1763 = fma(_1558, cbSceneParam._m0[60u].w, fma(_1554, cbSceneParam._m0[60u].z, fma(_1550, cbSceneParam._m0[60u].y, _1546 * cbSceneParam._m0[60u].x))) / _1762;
        float _1764 = fma(_1558, cbSceneParam._m0[61u].w, fma(_1554, cbSceneParam._m0[61u].z, fma(_1550, cbSceneParam._m0[61u].y, _1546 * cbSceneParam._m0[61u].x))) / _1762;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1763 >= cbSceneParam._m0[64u].x) && (_1764 >= cbSceneParam._m0[64u].y)) && (_1763 <= cbSceneParam._m0[64u].z)) && (_1764 <= cbSceneParam._m0[64u].w))
        {
            float _1903 = fma(_1558, cbSceneParam._m0[62u].w, fma(_1554, cbSceneParam._m0[62u].z, fma(_1550, cbSceneParam._m0[62u].y, _1546 * cbSceneParam._m0[62u].x))) / _1762;
            float _1907 = isnan(cbSceneParam._m0[41u].w) ? _1903 : (isnan(_1903) ? cbSceneParam._m0[41u].w : max(_1903, cbSceneParam._m0[41u].w));
            float _1950 = (cbSceneParam._m0[33u].x - sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561))) * cbSceneParam._m0[33u].y;
            float _4023 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
            float _1957 = (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1763, cbSceneParam._m0[33u].w + _1764), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1763, _1764 - cbSceneParam._m0[33u].z), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1763 - cbSceneParam._m0[33u].z, _1764 - cbSceneParam._m0[33u].w), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1763 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1764), _1907), 0.0)).x), vec4(0.25)));
            float _1961 = 1.0 - (_1957 * cbSceneParam._m0[34u].x);
            float _1962 = 1.0 - (_1957 * cbSceneParam._m0[34u].y);
            float _1963 = 1.0 - (_1957 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1963) ? _1710 : (isnan(_1710) ? _1963 : min(_1710, _1963));
            frontier_phi_37_36_ladder_1 = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
            frontier_phi_37_36_ladder_2 = isnan(_1961) ? _1708 : (isnan(_1708) ? _1961 : min(_1708, _1961));
        }
        else
        {
            frontier_phi_37_36_ladder = _1710;
            frontier_phi_37_36_ladder_1 = _1709;
            frontier_phi_37_36_ladder_2 = _1708;
        }
        _1774 = frontier_phi_37_36_ladder_2;
        _1776 = frontier_phi_37_36_ladder_1;
        _1778 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1774 = _1708;
        _1776 = _1709;
        _1778 = _1710;
    }
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_423 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _449 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1822 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1826 = _1785 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_280, _281, _282));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_280, _281, _282));
    float _4059 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _4070 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1802].x * _1808) * _1847) + (((cbLight._m0[_1812].x * _1774) * _1822) * _1845);
    float _1855 = ((_1808 * cbLight._m0[_1802].y) * _1847) + (((cbLight._m0[_1812].y * _1776) * _1822) * _1845);
    float _1856 = ((_1808 * cbLight._m0[_1802].z) * _1847) + (((cbLight._m0[_1812].z * _1778) * _1822) * _1845);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1862)
    {
        _1964 = _1854;
        _1966 = _1855;
        _1968 = _1856;
    }
    else
    {
        uint _1972 = _1785 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4081 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1991 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1854;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1855;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1856;
    }
    bool _1971 = _1860.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1971)
    {
        _2026 = _1964;
        _2028 = _1966;
        _2030 = _1968;
    }
    else
    {
        uint _2188 = _1785 + 7u;
        float _2204 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _2205 = _2204 * _2204;
        float _4097 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2206 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _2207 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2026 = (((cbLight._m0[_2188].x * 0.3183098733425140380859375) * _2206) * _2207) + _1964;
        _2028 = (((cbLight._m0[_2188].y * 0.3183098733425140380859375) * _2206) * _2207) + _1966;
        _2030 = (((cbLight._m0[_2188].z * 0.3183098733425140380859375) * _2206) * _2207) + _1968;
    }
    uint _2033 = _1785 + 8u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _284) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1785].x + _362;
    float _2049 = cbLight._m0[_1785].y + _363;
    float _2050 = cbLight._m0[_1785].z + _364;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1785].xyz));
    float _4113 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _4124 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _2062 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
    float _2063 = dot(vec3(_280, _281, _282), vec3(_2055, _2056, _2057));
    float _4135 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_2055, _2056, _2057));
    float _4146 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2047 * _2047;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2086 = (exp2(log2(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2087 = 1.0 - _2047;
    float _2098 = (0.5 / (((_2062 * ((_2061 * _2087) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2087) + _2047) * _2061))) * _2061;
    float _4157 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2100 = (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    uint _2114 = _1785 + 9u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _284) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1826].x + _362;
    float _2128 = cbLight._m0[_1826].y + _363;
    float _2129 = cbLight._m0[_1826].z + _364;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1826].xyz));
    float _4168 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
    float _2141 = dot(vec3(_280, _281, _282), vec3(_2134, _2135, _2136));
    float _4179 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2144 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _2145 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2134, _2135, _2136));
    float _4190 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2149 = _2126 * _2126;
    float _2153 = ((_2144 * _2144) * (_2149 + (-1.0))) + 1.0;
    float _2162 = (exp2(log2(1.0 - (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2163 = 1.0 - _2126;
    float _2173 = (0.5 / (((_2062 * ((_2140 * _2163) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2163) + _2126) * _2140))) * _2140;
    float _4201 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2175 = (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_2149 / ((_2153 * _2153) * 3.141590118408203125));
    float _2185 = (((_2162 * cbLight._m0[_2114].x) * _2175) * _1808) + ((((cbLight._m0[_2033].x * _1774) * _2086) * _2100) * _1822);
    float _2186 = (((_2162 * cbLight._m0[_2114].y) * _2175) * _1808) + ((((cbLight._m0[_2033].y * _1776) * _2086) * _2100) * _1822);
    float _2187 = (((_2162 * cbLight._m0[_2114].z) * _2175) * _1808) + ((((cbLight._m0[_2033].z * _1778) * _2086) * _2100) * _1822);
    float _2243;
    float _2245;
    float _2247;
    if (_1862)
    {
        _2243 = _2185;
        _2245 = _2186;
        _2247 = _2187;
    }
    else
    {
        uint _2249 = _1785 + 2u;
        uint _2253 = _1785 + 10u;
        float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _284) * 0.949999988079071044921875);
        float _2268 = _2267 * _2267;
        float _2269 = cbLight._m0[_2249].x + _362;
        float _2270 = cbLight._m0[_2249].y + _363;
        float _2271 = cbLight._m0[_2249].z + _364;
        float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
        float _2276 = _2275 * _2269;
        float _2277 = _2275 * _2270;
        float _2278 = _2275 * _2271;
        float _2279 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2249].xyz));
        float _4212 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
        float _2282 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2283 = dot(vec3(_280, _281, _282), vec3(_2276, _2277, _2278));
        float _4223 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
        float _2286 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _2287 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2276, _2277, _2278));
        float _4234 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        float _2291 = _2268 * _2268;
        float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
        float _2304 = (exp2(log2(1.0 - (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2305 = 1.0 - _2268;
        float _2315 = (0.5 / (((_2062 * ((_2282 * _2305) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2305) + _2268) * _2282))) * _2282;
        float _4245 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2317 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
        float _2318 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2243 = (((_2304 * cbLight._m0[_2253].x) * _2317) * _2318) + _2185;
        _2245 = (((_2304 * cbLight._m0[_2253].y) * _2317) * _2318) + _2186;
        _2247 = (((_2304 * cbLight._m0[_2253].z) * _2317) * _2318) + _2187;
    }
    float _2349;
    float _2351;
    float _2353;
    if (_1971)
    {
        _2349 = _2243;
        _2351 = _2245;
        _2353 = _2247;
    }
    else
    {
        uint _2360 = _1785 + 3u;
        uint _2364 = _1785 + 11u;
        float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2360].w)) * _284) * 0.949999988079071044921875);
        float _2379 = _2378 * _2378;
        float _2380 = cbLight._m0[_2360].x + _362;
        float _2381 = cbLight._m0[_2360].y + _363;
        float _2382 = cbLight._m0[_2360].z + _364;
        float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
        float _2387 = _2386 * _2380;
        float _2388 = _2386 * _2381;
        float _2389 = _2386 * _2382;
        float _2390 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_2360].xyz));
        float _4261 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2393 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2394 = dot(vec3(_280, _281, _282), vec3(_2387, _2388, _2389));
        float _4272 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2397 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _2398 = dot(vec3(cbLight._m0[_2360].xyz), vec3(_2387, _2388, _2389));
        float _4283 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
        float _2402 = _2379 * _2379;
        float _2406 = ((_2397 * _2397) * (_2402 + (-1.0))) + 1.0;
        float _2415 = (exp2(log2(1.0 - (isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2416 = 1.0 - _2379;
        float _2426 = (0.5 / (((_2062 * ((_2393 * _2416) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2416) + _2379) * _2393))) * _2393;
        float _4294 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2428 = (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2402 / ((_2406 * _2406) * 3.141590118408203125));
        float _2429 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2349 = (((_2415 * cbLight._m0[_2364].x) * _2428) * _2429) + _2243;
        _2351 = (((_2415 * cbLight._m0[_2364].y) * _2428) * _2429) + _2245;
        _2353 = (((_2415 * cbLight._m0[_2364].z) * _2428) * _2429) + _2247;
    }
    float _2495;
    float _2497;
    float _2499;
    float _2501;
    float _2503;
    float _2505;
    if (_1783.y == 0u)
    {
        uvec4 _2450 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2451 = _2450.x;
        uint _2462 = uint((float(_2450.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2451))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2451)));
        float _2472 = (log2(_1561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2473 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        uint _2476 = uint(isnan(14.0) ? _2473 : (isnan(_2473) ? 14.0 : min(_2473, 14.0)));
        uvec4 _2481 = texelFetch(g_lightClusterGridBuffer, int(((_2476 << 2u) + (_2462 << 6u)) >> 2u));
        uint _2482 = _2481.x;
        uint _2483 = _2450.z;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((((1u << ((_2483 >> 4u) & 15u)) + 4294967295u) & _2482) == 0u) || ((_2483 & 240u) == 0u))
        {
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
        }
        else
        {
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2733)
                {
                    frontier_phi_71_pred = _2722;
                    frontier_phi_71_pred_1 = _2721;
                    frontier_phi_71_pred_2 = _2720;
                    frontier_phi_71_pred_3 = _2719;
                    frontier_phi_71_pred_4 = _2718;
                    frontier_phi_71_pred_5 = _2717;
                }
                else
                {
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    uint _2868;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2719;
                    _2865 = _2720;
                    _2866 = _2721;
                    _2867 = _2722;
                    _2868 = _2732;
                    float _2789;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    for (;;)
                    {
                        uint _2872 = uint(findLSB(_2868)) + (_2723 << 5u);
                        uint _2869 = (_2868 + 4294967295u) & _2868;
                        uint _2874 = _2872 * 48u;
                        vec4 _2888 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2874)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2874 + 3u)).x));
                        uint _2894 = (_2872 * 48u) + 4u;
                        vec4 _2907 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2894)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2894 + 3u)).x));
                        uint _2913 = (_2872 * 48u) + 8u;
                        vec3 _2924 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2913)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2913 + 2u)).x));
                        float _2928 = _2888.x - _1559;
                        float _2929 = _2888.y - _1560;
                        float _2930 = _2888.z - _1561;
                        float _2931 = dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930));
                        float _2934 = inversesqrt(_2931);
                        float _2935 = _2934 * _2928;
                        float _2936 = _2934 * _2929;
                        float _2937 = _2934 * _2930;
                        float _2938 = dot(vec3(_404, _407, _410), vec3(_2935, _2936, _2937));
                        float _2943 = 1.0 - (_2931 * _2888.w);
                        float _4320 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2944 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
                        float _2945 = sqrt(_2931) * _2907.w;
                        float _2948 = 1.39999997615814208984375 / (_2945 + 1.39999997615814208984375);
                        float _2949 = _2948 * _2948;
                        float _2952 = ((1.0 - _2949) * _2938) + _2949;
                        float _2955 = _2945 * _2945;
                        float _2959 = ((isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))) * _2944) / ((_2955 * 0.699999988079071044921875) + 1.0);
                        float _2963 = (-0.0) - _1559;
                        float _2964 = (-0.0) - _1560;
                        float _2965 = (-0.0) - _1561;
                        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
                        float _2970 = _2969 * _2963;
                        float _2971 = _2969 * _2964;
                        float _2972 = _2969 * _2965;
                        float _2979 = exp2(log2(1.0 / ((_2955 * 3.5) + 5.0)) * 0.25);
                        float _2980 = 1.0 - _465;
                        float _2987 = sqrt(1.0 - ((1.0 - (_2980 * _2980)) * (1.0 - (_2979 * _2979))));
                        float _2988 = _2987 * _2987;
                        float _2989 = _2988 * _2988;
                        float _2990 = _2970 + _2935;
                        float _2991 = _2971 + _2936;
                        float _2992 = _2972 + _2937;
                        float _2996 = inversesqrt(dot(vec3(_2990, _2991, _2992), vec3(_2990, _2991, _2992)));
                        float _3000 = dot(vec3(_404, _407, _410), vec3(_2970, _2971, _2972));
                        float _4336 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3004 = dot(vec3(_404, _407, _410), vec3(_2996 * _2990, _2996 * _2991, _2996 * _2992));
                        float _4347 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                        float _3007 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _3011 = ((_3007 * _3007) * (_2989 + (-1.0))) + 1.0;
                        float _3012 = _2948 * _2988;
                        float _3013 = _3012 * _3012;
                        float _3016 = ((1.0 - _3013) * _2938) + _3013;
                        float _4358 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3017 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                        float _3018 = 1.0 - _2988;
                        float _3028 = (0.5 / (((_3017 * ((_3003 * _3018) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_3017 * _3018) + _2988) * _3003))) * _3017;
                        float _4369 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3039 = (((_2989 * 3.1415927410125732421875) * (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) / ((_3011 * _3011) * ((_2955 * 2.1991131305694580078125) + 3.141590118408203125))) * _2944;
                        _2792 = (_2959 * _2907.x) + _2865;
                        _2793 = (_2959 * _2907.y) + _2866;
                        _2794 = (_2959 * _2907.z) + _2867;
                        _2789 = (_3039 * _2924.x) + _2862;
                        _2790 = (_3039 * _2924.y) + _2863;
                        _2791 = (_3039 * _2924.z) + _2864;
                        if (_2869 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2862 = _2789;
                            _2863 = _2790;
                            _2864 = _2791;
                            _2865 = _2792;
                            _2866 = _2793;
                            _2867 = _2794;
                            _2868 = _2869;
                        }
                    }
                    frontier_phi_71_pred = _2794;
                    frontier_phi_71_pred_1 = _2793;
                    frontier_phi_71_pred_2 = _2792;
                    frontier_phi_71_pred_3 = _2791;
                    frontier_phi_71_pred_4 = _2790;
                    frontier_phi_71_pred_5 = _2789;
                }
                _2575 = frontier_phi_71_pred;
                _2573 = frontier_phi_71_pred_1;
                _2571 = frontier_phi_71_pred_2;
                _2569 = frontier_phi_71_pred_3;
                _2567 = frontier_phi_71_pred_4;
                _2565 = frontier_phi_71_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2565;
                    _2718 = _2567;
                    _2719 = _2569;
                    _2720 = _2571;
                    _2721 = _2573;
                    _2722 = _2575;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
        }
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.z;
        uint _2581 = (_2579 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2581) & _2482) == 0u)
        {
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
            float _2711 = _2710 * _1559;
            float _2712 = _2710 * _1560;
            float _2713 = _2710 * _1561;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2581 < ((_2579 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2845 = _2564;
                float _2846 = _2566;
                float _2847 = _2568;
                float _2848 = _2570;
                float _2849 = _2572;
                float _2850 = _2574;
                uint _2851 = _2581;
                uint _2860;
                bool _2861;
                for (;;)
                {
                    _2860 = texelFetch(g_lightClassification, int((((_2476 << 5u) + (_2462 << 9u)) + (_2851 << 2u)) >> 2u)).x;
                    _2861 = _2860 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2861)
                    {
                        frontier_phi_82_pred = _2850;
                        frontier_phi_82_pred_1 = _2849;
                        frontier_phi_82_pred_2 = _2848;
                        frontier_phi_82_pred_3 = _2847;
                        frontier_phi_82_pred_4 = _2846;
                        frontier_phi_82_pred_5 = _2845;
                    }
                    else
                    {
                        float _3053;
                        float _3054;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3349;
                        float _3350;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3066 = _2845;
                        float _3067 = _2846;
                        float _3068 = _2847;
                        float _3069 = _2848;
                        float _3070 = _2849;
                        float _3071 = _2850;
                        uint _3072 = _2860;
                        uint _3073;
                        vec4 _3098;
                        float _3099;
                        vec4 _3114;
                        vec3 _3126;
                        vec4 _3142;
                        vec4 _3158;
                        float _3205;
                        bool _3206;
                        for (;;)
                        {
                            uint _3083 = ((_2851 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3072));
                            _3073 = (_3072 + 4294967295u) & _3072;
                            uint _3085 = _3083 * 40u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            _3099 = _3098.w;
                            uint _3101 = (_3083 * 40u) + 4u;
                            _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            uint _3116 = (_3083 * 40u) + 8u;
                            _3126 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x));
                            uint _3129 = (_3083 * 40u) + 16u;
                            _3142 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3129)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3129 + 3u)).x));
                            uint _3145 = (_3083 * 40u) + 20u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3161 = (_3083 * 40u) + 24u;
                            vec4 _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3180 = (_3083 * 40u) + 28u;
                            vec4 _3193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 3u)).x));
                            _3205 = fma(_1561, _3193.z, fma(_1560, _3193.y, _3193.x * _1559)) + _3193.w;
                            _3206 = !((fma(_1561, _3174.z, fma(_1560, _3174.y, _3174.x * _1559)) + _3174.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3206)
                            {
                                float _3233 = _3098.x - _1559;
                                float _3234 = _3098.y - _1560;
                                float _3235 = _3098.z - _1561;
                                float _3236 = dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235));
                                float _3239 = inversesqrt(_3236);
                                float _3240 = _3239 * _3233;
                                float _3241 = _3239 * _3234;
                                float _3242 = _3239 * _3235;
                                float _3246 = 1.0 - (_3236 / (_3099 * _3099));
                                float _4380 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
                                float _3251 = sqrt(_3236) * _3114.w;
                                float _3253 = 1.39999997615814208984375 / (_3251 + 1.39999997615814208984375);
                                float _3254 = _3253 * _3253;
                                float _3257 = ((1.0 - _3254) * dot(vec3(_3240, _3241, _3242), vec3(_404, _407, _410))) + _3254;
                                float _3260 = _3251 * _3251;
                                float _3264 = (fma(_1561, _3142.z, fma(_1560, _3142.y, _3142.x * _1559)) + _3142.w) / _3205;
                                float _3265 = (fma(_1561, _3158.z, fma(_1560, _3158.y, _3158.x * _1559)) + _3158.w) / _3205;
                                float _3269 = 1.0 - dot(vec2(_3264, _3265), vec2(_3264, _3265));
                                float _4396 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3270 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3271 = _3270 * (((isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))) * _3247) / ((_3260 * 0.699999988079071044921875) + 1.0));
                                float _3283 = exp2(log2(1.0 / ((_3260 * 3.5) + 5.0)) * 0.25);
                                float _3284 = 1.0 - _465;
                                float _3291 = sqrt(1.0 - ((1.0 - (_3284 * _3284)) * (1.0 - (_3283 * _3283))));
                                float _3292 = _3291 * _3291;
                                float _3293 = _3292 * _3292;
                                float _3294 = _3240 - _2711;
                                float _3295 = _3241 - _2712;
                                float _3296 = _3242 - _2713;
                                float _3300 = inversesqrt(dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296)));
                                float _3304 = dot(vec3(_404, _407, _410), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4407 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3307 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3308 = dot(vec3(_404, _407, _410), vec3(_3300 * _3294, _3300 * _3295, _3300 * _3296));
                                float _4418 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                                float _3311 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
                                float _3315 = ((_3311 * _3311) * (_3293 + (-1.0))) + 1.0;
                                float _3316 = _3253 * _3292;
                                float _3317 = _3316 * _3316;
                                float _3323 = ((1.0 - _3317) * dot(vec3(_404, _407, _410), vec3(_3240, _3241, _3242))) + _3317;
                                float _4429 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                                float _3324 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
                                float _3325 = 1.0 - _3292;
                                float _3335 = (0.5 / (((_3324 * ((_3307 * _3325) + _3292)) + 9.9999999392252902907785028219223e-09) + (((_3324 * _3325) + _3292) * _3307))) * _3324;
                                float _4440 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3345 = (_3270 * _3247) * (((_3293 * 3.1415927410125732421875) * (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) / ((_3315 * _3315) * ((_3260 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3271 * _3114.z;
                                frontier_phi_88_pred_1 = _3271 * _3114.y;
                                frontier_phi_88_pred_2 = _3271 * _3114.x;
                                frontier_phi_88_pred_3 = _3345 * _3126.z;
                                frontier_phi_88_pred_4 = _3345 * _3126.y;
                                frontier_phi_88_pred_5 = _3345 * _3126.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3354 = frontier_phi_88_pred;
                            _3353 = frontier_phi_88_pred_1;
                            _3352 = frontier_phi_88_pred_2;
                            _3351 = frontier_phi_88_pred_3;
                            _3350 = frontier_phi_88_pred_4;
                            _3349 = frontier_phi_88_pred_5;
                            _3056 = _3352 + _3069;
                            _3057 = _3353 + _3070;
                            _3058 = _3354 + _3071;
                            _3053 = _3349 + _3066;
                            _3054 = _3350 + _3067;
                            _3055 = _3351 + _3068;
                            if (_3073 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3066 = _3053;
                                _3067 = _3054;
                                _3068 = _3055;
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3073;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3058;
                        frontier_phi_82_pred_1 = _3057;
                        frontier_phi_82_pred_2 = _3056;
                        frontier_phi_82_pred_3 = _3055;
                        frontier_phi_82_pred_4 = _3054;
                        frontier_phi_82_pred_5 = _3053;
                    }
                    _2696 = frontier_phi_82_pred;
                    _2694 = frontier_phi_82_pred_1;
                    _2692 = frontier_phi_82_pred_2;
                    _2690 = frontier_phi_82_pred_3;
                    _2688 = frontier_phi_82_pred_4;
                    _2686 = frontier_phi_82_pred_5;
                    uint _2852 = _2851 + 1u;
                    if (_2852 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2845 = _2686;
                        _2846 = _2688;
                        _2847 = _2690;
                        _2848 = _2692;
                        _2849 = _2694;
                        _2850 = _2696;
                        _2851 = _2852;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2692;
                frontier_phi_63_64_ladder_1 = _2696;
                frontier_phi_63_64_ladder_2 = _2694;
                frontier_phi_63_64_ladder_3 = _2690;
                frontier_phi_63_64_ladder_4 = _2688;
                frontier_phi_63_64_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_63_64_ladder = _2570;
                frontier_phi_63_64_ladder_1 = _2574;
                frontier_phi_63_64_ladder_2 = _2572;
                frontier_phi_63_64_ladder_3 = _2568;
                frontier_phi_63_64_ladder_4 = _2566;
                frontier_phi_63_64_ladder_5 = _2564;
            }
            _2685 = frontier_phi_63_64_ladder_5;
            _2687 = frontier_phi_63_64_ladder_4;
            _2689 = frontier_phi_63_64_ladder_3;
            _2691 = frontier_phi_63_64_ladder;
            _2693 = frontier_phi_63_64_ladder_2;
            _2695 = frontier_phi_63_64_ladder_1;
        }
        float _2700 = isnan(1.0) ? _449 : (isnan(_449) ? 1.0 : min(_449, 1.0));
        _2495 = (_2700 * _2691) + _2026;
        _2497 = (_2700 * _2693) + _2028;
        _2499 = (_2700 * _2695) + _2030;
        _2501 = ((_2685 * 0.039999999105930328369140625) * _2700) + _2349;
        _2503 = ((_2687 * 0.039999999105930328369140625) * _2700) + _2351;
        _2505 = ((_2689 * 0.039999999105930328369140625) * _2700) + _2353;
    }
    else
    {
        _2495 = _2026;
        _2497 = _2028;
        _2499 = _2030;
        _2501 = _2349;
        _2503 = _2351;
        _2505 = _2353;
    }
    float _4456 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4467 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4478 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4489 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _2523 = ((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2495 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _449))) + ((_2501 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2524 = ((isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_2497 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _449))) + ((_2503 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2525 = ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2499 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _449))) + ((_2505 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1288)) * cbPerFrame._m0[3u].x);
    float _2530 = cbInstanceData._m0[_423 + 6u].w * (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)));
    float _2535 = _383 / cbSceneParam._m0[86u].x;
    float _2536 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2550 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, (log2((isnan(cbSceneParam._m0[77u].w) ? _303 : (isnan(_303) ? cbSceneParam._m0[77u].w : min(_303, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2552 = _2550.x;
    float _2553 = _2550.y;
    float _2554 = _2550.z;
    float _2555 = _2550.w;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_303 > cbSceneParam._m0[78u].w)
    {
        float _2589 = isnan(_303) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _303 : min(cbSceneParam._m0[80u].w, _303));
        float _2590 = _2589 / _303;
        float _2601 = _2590 * _355;
        float _2602 = _356 * _2590;
        float _2603 = (-0.0) - _2602;
        float _2605 = _2590 * _357;
        float _2607 = (cbSceneParam._m0[77u].w * _2603) / _2589;
        float _2608 = _2607 + cbSceneParam._m0[79u].w;
        float _2609 = cbSceneParam._m0[79u].w - _2602;
        float _2615 = sqrt(((_2601 * _2601) + (_2602 * _2602)) + (_2605 * _2605));
        float _2618 = (1.0 - (cbSceneParam._m0[77u].w / _2589)) * _2615;
        float _2623 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2625 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2802;
        if (abs((_2603 - _2607) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2802 = ((((_2608 > 0.0) ? exp2(_2623 * _2608) : (2.0 - exp2(_2625 * _2608))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2618;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : max(_2608, _2609));
            float _2748 = isnan(_2609) ? _2608 : (isnan(_2608) ? _2609 : min(_2608, _2609));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2802 = ((abs(_2615 / _2603) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2623 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2623 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2625 * _2757) - exp2(_2625 * _2758)) * _2746))) + (_2618 * cbSceneParam._m0[80u].z);
        }
        vec4 _2804 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2535, _2536, 1.0), 0.0);
        float _2813 = exp2((_2802 * (-1.44269502162933349609375)) * (1.0 - _2804.w));
        float _2814 = log2(_2813);
        float _2830 = log2(_2555);
        _2627 = (exp2(_2830 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].x)) * _2804.x) / cbSceneParam._m0[78u].x)) + _2552;
        _2629 = (exp2(_2830 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].y)) * _2804.y) / cbSceneParam._m0[78u].y)) + _2553;
        _2631 = (exp2(_2830 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2814 * cbSceneParam._m0[78u].z)) * _2804.z) / cbSceneParam._m0[78u].z)) + _2554;
        _2633 = _2813 * _2555;
    }
    else
    {
        _2627 = _2552;
        _2629 = _2553;
        _2631 = _2554;
        _2633 = _2555;
    }
    bool _2840;
    vec4 _2643;
    vec4 _2665;
    float _2667;
    float _2671;
    float _2672;
    float _2673;
    float _2674;
    bool _2684;
    for (;;)
    {
        _2643 = cbMatDynParam._m0[0u];
        float _2645 = roundEven(_2643.y);
        bool _2646 = _2645 == 3.0;
        float _2647 = log2(_2633);
        float _2654 = exp2(_2647 * cbSceneParam._m0[78u].x) * _2523;
        float _2655 = exp2(_2647 * cbSceneParam._m0[78u].y) * _2524;
        float _2656 = exp2(_2647 * cbSceneParam._m0[78u].z) * _2525;
        float _2663 = _371 + (-0.5);
        _2665 = cbMtdParam._m0[1u];
        _2667 = _2665.y * _2663;
        float _2670 = (_2645 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2671 = _2670 * (_2646 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2627)));
        _2672 = _2670 * (_2646 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2629)));
        _2673 = _2670 * (_2646 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2631)));
        _2674 = _2663 * 0.999000012874603271484375;
        _2684 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2684)
        {
            if ((cbInstanceData._m0[_423 + 7u].x + _2674) < 0.5)
            {
                _2840 = true;
                break;
            }
        }
        uint _2781 = _425 + uint(_2643.w);
        if ((cbInstanceData._m0[_2781].w < 1.0) && ((cbInstanceData._m0[_2781].w + _2674) < 0.5))
        {
            _2840 = true;
            break;
        }
        if ((_2667 + _233) < _2665.x)
        {
            _2840 = true;
            break;
        }
        _2840 = false;
        break;
    }
    float _3044;
    if (_2840)
    {
        discard_state = true;
        _3044 = 0.0;
    }
    else
    {
        _3044 = _2530;
    }
    SV_Target.x = _2671;
    SV_Target.y = _2672;
    SV_Target.z = _2673;
    SV_Target.w = _3044;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2530;
    discard_exit();
}


