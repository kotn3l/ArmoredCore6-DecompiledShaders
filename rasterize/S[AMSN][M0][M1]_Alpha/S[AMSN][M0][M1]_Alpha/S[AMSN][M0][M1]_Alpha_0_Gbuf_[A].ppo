#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;

layout(location = 1) in vec4 NORMAL;
layout(location = 2) in vec4 TANGENT;
layout(location = 3) in vec4 TEXCOORD_1;
layout(location = 4) in float TEXCOORD_9;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
layout(location = 2) out vec4 SV_Target_2;
layout(location = 3) out vec4 SV_Target_3;
layout(location = 4) out vec4 SV_Target_4;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    SV_Target_2.x = 0.0;
    SV_Target_2.y = 0.0;
    SV_Target_2.z = 0.0;
    SV_Target_2.w = 0.0;
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = 0.0;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = 0.0;
    float _133 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _134 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _135 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _141 = inversesqrt(dot(vec3(_133, _134, _135), vec3(_133, _134, _135)));
    float _148 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _155 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _178 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _184 = _178.w;
    float _185 = _178.x * cbMtdParam._m0[9u].x;
    float _186 = _178.y * cbMtdParam._m0[9u].y;
    float _187 = _178.z * cbMtdParam._m0[9u].z;
    float _188 = _184 * TEXCOORD_1.z;
    vec4 _200 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[2u].w));
    float _202 = _200.x;
    vec4 _214 = texture(sampler2D(S_AMSN_M0_M1_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _218 = _214.z;
    float _222 = (_214.x * 2.0) + (-1.0);
    float _224 = (_214.y * 2.0) + (-1.0);
    float _225 = dot(vec2(_222, _224), vec2(_222, _224));
    float _431 = isnan(0.0) ? _225 : (isnan(_225) ? 0.0 : max(_225, 0.0));
    float _231 = sqrt(1.0 - (isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0))));
    float _234 = fma(_231, _148 * NORMAL.x, fma(_224, _155 * TANGENT.x, (_141 * _133) * _222));
    float _237 = fma(_231, _148 * NORMAL.y, fma(_224, _155 * TANGENT.y, (_141 * _134) * _222));
    float _240 = fma(_231, _148 * NORMAL.z, fma(_224, _155 * TANGENT.z, (_141 * _135) * _222));
    float _244 = inversesqrt(dot(vec3(_234, _237, _240), vec3(_234, _237, _240)));
    float _442 = isnan(0.0) ? _188 : (isnan(_188) ? 0.0 : max(_188, 0.0));
    float _245 = isnan(1.0) ? _442 : (isnan(_442) ? 1.0 : min(_442, 1.0));
    float _453 = isnan(0.0) ? _218 : (isnan(_218) ? 0.0 : max(_218, 0.0));
    float _464 = isnan(0.0) ? _185 : (isnan(_185) ? 0.0 : max(_185, 0.0));
    float _247 = isnan(1.0) ? _464 : (isnan(_464) ? 1.0 : min(_464, 1.0));
    float _475 = isnan(0.0) ? _186 : (isnan(_186) ? 0.0 : max(_186, 0.0));
    float _248 = isnan(1.0) ? _475 : (isnan(_475) ? 1.0 : min(_475, 1.0));
    float _486 = isnan(0.0) ? _187 : (isnan(_187) ? 0.0 : max(_187, 0.0));
    float _249 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
    float _497 = isnan(0.0) ? _202 : (isnan(_202) ? 0.0 : max(_202, 0.0));
    uint _252 = uint(roundEven(NORMAL.w));
    vec4 _257 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _259 = _257.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _324 = (cbMatDynParam._m0[5u].x * TEXCOORD_9) + cbMatDynParam._m0[5u].y;
        float _508 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
        float _325 = isnan(1.0) ? _508 : (isnan(_508) ? 1.0 : min(_508, 1.0));
        float _329 = (cbMatDynParam._m0[5u].z * TEXCOORD_9) + cbMatDynParam._m0[5u].w;
        float _519 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _519 : (isnan(_519) ? 1.0 : min(_519, 1.0))) - _325)) + _325) < ((_259 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _358;
    uint _279;
    vec4 _284;
    float _291;
    float _292;
    float _293;
    float _299;
    vec4 _303;
    float _305;
    float _306;
    bool _317;
    for (;;)
    {
        _279 = _252 * 13u;
        _284 = cbInstanceData._m0[(_279 + 9u) + uint(cbMatDynParam._m0[0u].w)];
        float _288 = (cbMtdParam._m0[0u].x * _247) * _284.x;
        float _289 = (cbMtdParam._m0[0u].y * _248) * _284.y;
        float _290 = (cbMtdParam._m0[0u].z * _249) * _284.z;
        float _530 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
        _291 = isnan(1.0) ? _530 : (isnan(_530) ? 1.0 : min(_530, 1.0));
        float _541 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
        _292 = isnan(1.0) ? _541 : (isnan(_541) ? 1.0 : min(_541, 1.0));
        float _552 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
        _293 = isnan(1.0) ? _552 : (isnan(_552) ? 1.0 : min(_552, 1.0));
        float _563 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
        _299 = cbInstanceData._m0[_279 + 6u].w * (isnan(1.0) ? _563 : (isnan(_563) ? 1.0 : min(_563, 1.0)));
        float _300 = _259 + (-0.5);
        _303 = cbMtdParam._m0[1u];
        _305 = _303.y * _300;
        _306 = _300 * 0.999000012874603271484375;
        _317 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_317)
        {
            if ((cbInstanceData._m0[_279 + 7u].x + _306) < 0.5)
            {
                _358 = true;
                break;
            }
        }
        if ((_284.w < 1.0) && ((_284.w + _306) < 0.5))
        {
            _358 = true;
            break;
        }
        if ((_305 + _184) < _303.x)
        {
            _358 = true;
            break;
        }
        _358 = false;
        break;
    }
    if (_358)
    {
        discard_state = true;
    }
    bool _384 = cbMtdParam._m0[1u].z != 0.0;
    float _385 = _384 ? _299 : 0.0;
    SV_Target.x = ((_234 * 0.5) * _244) + 0.500488758087158203125;
    SV_Target.y = ((_237 * 0.5) * _244) + 0.500488758087158203125;
    SV_Target.z = ((_240 * 0.5) * _244) + 0.500488758087158203125;
    SV_Target.w = _385;
    SV_Target_1.x = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
    SV_Target_1.y = isnan(1.0) ? _453 : (isnan(_453) ? 1.0 : min(_453, 1.0));
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _384 ? _299 : TEXCOORD_1.w;
    SV_Target_2.x = _291;
    SV_Target_2.y = _292;
    SV_Target_2.z = _293;
    SV_Target_2.w = _384 ? _299 : (float(floatBitsToUint(cbInstanceData._m0[_279 + 5u]).x) * 0.0039215688593685626983642578125);
    SV_Target_3.x = 0.0;
    SV_Target_3.y = 0.0;
    SV_Target_3.z = 0.0;
    SV_Target_3.w = _385;
    SV_Target_4.x = 0.0;
    SV_Target_4.y = 0.0;
    SV_Target_4.z = 0.0;
    SV_Target_4.w = _385;
    discard_exit();
}


