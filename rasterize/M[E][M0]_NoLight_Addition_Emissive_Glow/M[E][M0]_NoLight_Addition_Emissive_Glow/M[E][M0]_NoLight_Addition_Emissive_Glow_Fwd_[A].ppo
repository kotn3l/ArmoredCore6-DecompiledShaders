#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 0) uniform texture2D M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _538;
float _1617;
float _1618;
float _1619;
float _1620;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _151 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _152 = _151 * NORMAL.x;
    float _153 = _151 * NORMAL.y;
    float _154 = _151 * NORMAL.z;
    vec4 _178 = texture(sampler2D(M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _187 = inversesqrt(dot(vec3(_152, _153, _154), vec3(_152, _153, _154)));
    float _188 = _187 * _152;
    float _189 = _187 * _153;
    float _190 = _187 * _154;
    float _206 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _247 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _257 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _247);
    float _258 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _247);
    float _259 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _247);
    float _263 = inversesqrt(dot(vec3(_257, _258, _259), vec3(_257, _258, _259)));
    float _264 = _257 * _263;
    float _265 = _258 * _263;
    float _266 = _259 * _263;
    vec4 _271 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _273 = _271.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _350 = sqrt(((_257 * _257) + (_258 * _258)) + (_259 * _259));
        float _357 = (cbMatDynParam._m0[5u].x * _350) + cbMatDynParam._m0[5u].y;
        float _1629 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
        float _359 = isnan(1.0) ? _1629 : (isnan(_1629) ? 1.0 : min(_1629, 1.0));
        float _363 = (cbMatDynParam._m0[5u].z * _350) + cbMatDynParam._m0[5u].w;
        float _1640 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _1640 : (isnan(_1640) ? 1.0 : min(_1640, 1.0))) - _359)) + _359) < ((_273 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _285 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _286 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _295 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_285 * cbSceneParam._m0[86u].x, _286 * cbSceneParam._m0[86u].y));
    float _298 = _295.x * TEXCOORD.z;
    float _299 = dot(vec3(_188, _189, _190), vec3(_264, _265, _266));
    float _302 = _299 * 2.0;
    float _307 = (_302 * _188) - _264;
    float _308 = (_302 * _189) - _265;
    float _309 = (_302 * _190) - _266;
    float _331 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _339 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _537;
    float _539;
    float _540;
    float _541;
    float _542;
    float _543;
    float _544;
    float _545;
    float _546;
    float _547;
    float _548;
    float _549;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _397 = fma(_339, cbModelParam._m0[26u].z, fma(_335, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _331));
        float _401 = fma(_339, cbModelParam._m0[27u].z, fma(_335, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _331));
        float _405 = fma(_339, cbModelParam._m0[28u].z, fma(_335, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _331));
        float _430 = _331 + _188;
        float _431 = _335 + _189;
        float _432 = _339 + _190;
        float _442 = fma(_432, cbModelParam._m0[26u].z, fma(_431, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _430)) - _397;
        float _443 = fma(_432, cbModelParam._m0[27u].z, fma(_431, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _430)) - _401;
        float _444 = fma(_432, cbModelParam._m0[28u].z, fma(_431, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _430)) - _405;
        float _448 = inversesqrt(dot(vec3(_442, _443, _444), vec3(_442, _443, _444)));
        float _461 = ((_448 * _442) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_397 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _462 = ((_448 * _443) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_401 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _463 = ((_448 * _444) / cbModelParam._m0[34u].z) + ((((((_405 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _466 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_461, _462, _463), 0.0);
        vec4 _473 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_461, _462, _463), 0.0);
        vec4 _480 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_461, _462, _463), 0.0);
        vec4 _487 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_461, _462, _463), 0.0);
        float _500 = exp2((_466.w + (-0.5)) * 20.0) * 2.0;
        float _510 = exp2((_473.w + (-0.5)) * 20.0) * 2.0;
        float _520 = exp2((_480.w + (-0.5)) * 20.0) * 2.0;
        float _530 = exp2((_487.w + (-0.5)) * 20.0) * 2.0;
        float _531 = _530 * (_487.x + (-0.5));
        float _532 = _530 * (_487.y + (-0.5));
        float _533 = _530 * (_487.z + (-0.5));
        _537 = _500 * (_466.z + (-0.5));
        _539 = _500 * (_466.y + (-0.5));
        _540 = _500 * (_466.x + (-0.5));
        _541 = _510 * (_473.z + (-0.5));
        _542 = _510 * (_473.y + (-0.5));
        _543 = _510 * (_473.x + (-0.5));
        _544 = _520 * (_480.z + (-0.5));
        _545 = _520 * (_480.y + (-0.5));
        _546 = _520 * (_480.x + (-0.5));
        _547 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
        _548 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
        _549 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    }
    else
    {
        _537 = _538;
        _539 = _538;
        _540 = _538;
        _541 = _538;
        _542 = _538;
        _543 = _538;
        _544 = _538;
        _545 = _538;
        _546 = _538;
        _547 = _538;
        _548 = _538;
        _549 = _538;
    }
    float _714;
    float _715;
    float _716;
    float _717;
    float _718;
    float _719;
    float _720;
    float _721;
    float _722;
    float _723;
    float _724;
    float _725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _578 = fma(_339, cbModelParam._m0[30u].z, fma(_335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _331));
        float _582 = fma(_339, cbModelParam._m0[31u].z, fma(_335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _331));
        float _586 = fma(_339, cbModelParam._m0[32u].z, fma(_335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _331));
        float _609 = _331 + _188;
        float _610 = _335 + _189;
        float _611 = _339 + _190;
        float _621 = fma(_611, cbModelParam._m0[30u].z, fma(_610, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609)) - _578;
        float _622 = fma(_611, cbModelParam._m0[31u].z, fma(_610, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609)) - _582;
        float _623 = fma(_611, cbModelParam._m0[32u].z, fma(_610, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609)) - _586;
        float _627 = inversesqrt(dot(vec3(_621, _622, _623), vec3(_621, _622, _623)));
        float _640 = ((_627 * _621) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_578 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_627 * _622) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_582 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_627 * _623) / cbModelParam._m0[35u].z) + ((((((_586 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_640, _641, _642), 0.0);
        float _677 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _687 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _697 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _707 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _708 = _707 * (_665.x + (-0.5));
        float _709 = _707 * (_665.y + (-0.5));
        float _710 = _707 * (_665.z + (-0.5));
        _714 = _677 * (_644.z + (-0.5));
        _715 = _677 * (_644.y + (-0.5));
        _716 = _677 * (_644.x + (-0.5));
        _717 = _687 * (_651.z + (-0.5));
        _718 = _687 * (_651.y + (-0.5));
        _719 = _687 * (_651.x + (-0.5));
        _720 = _697 * (_658.z + (-0.5));
        _721 = _697 * (_658.y + (-0.5));
        _722 = _697 * (_658.x + (-0.5));
        _723 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        _724 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        _725 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    }
    else
    {
        _714 = _538;
        _715 = _538;
        _716 = _538;
        _717 = _538;
        _718 = _538;
        _719 = _538;
        _720 = _538;
        _721 = _538;
        _722 = _538;
        _723 = _538;
        _724 = _538;
        _725 = _538;
    }
    float _740 = _307 * 0.5;
    float _741 = _308 * 0.5;
    float _742 = _309 * 0.5;
    float _743 = dot(vec4(_740, _741, _742, 1.0), vec4(_716, _719, _722, _725));
    float _746 = dot(vec4(_740, _741, _742, 1.0), vec4(_715, _718, _721, _724));
    float _749 = dot(vec4(_740, _741, _742, 1.0), vec4(_714, _717, _720, _723));
    float _784;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _756 = dot(vec4(_740, _741, _742, 1.0), vec4(_537, _541, _544, _547));
        float _760 = dot(vec4(_740, _741, _742, 1.0), vec4(_539, _542, _545, _548));
        float _764 = dot(vec4(_740, _741, _742, 1.0), vec4(_540, _543, _546, _549));
        float _771 = dot(vec4(cbModelParam._m0[39u]), vec4(_740, _741, _742, 1.0));
        _784 = dot(vec3(isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)), isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)), isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_771) ? 0.0 : (isnan(0.0) ? _771 : max(0.0, _771))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _784 = 1.0;
    }
    float _795;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _786 = dot(vec4(cbModelParam._m0[40u]), vec4(_740, _741, _742, 1.0));
        _795 = dot(vec3(isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0)), isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0)), isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_786) ? 0.0 : (isnan(0.0) ? _786 : max(0.0, _786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _795 = 1.0;
    }
    float _799 = (_795 * cbModelParam._m0[1u].x) + (_784 * (1.0 - cbModelParam._m0[1u].x));
    float _805 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _889;
    float _891;
    float _893;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _856 = fma(_339, cbModelParam._m0[13u].z, fma(_335, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _331)) + cbModelParam._m0[13u].w;
        float _860 = fma(_339, cbModelParam._m0[14u].z, fma(_335, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _331)) + cbModelParam._m0[14u].w;
        float _864 = fma(_339, cbModelParam._m0[15u].z, fma(_335, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _331)) + cbModelParam._m0[15u].w;
        float _867 = fma(_309, cbModelParam._m0[13u].z, fma(_308, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _307));
        float _870 = fma(_309, cbModelParam._m0[14u].z, fma(_308, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _307));
        float _873 = fma(_309, cbModelParam._m0[15u].z, fma(_308, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _307));
        float _899;
        if (_867 > 0.0)
        {
            _899 = abs((1.0 - _856) / _867);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_867 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_856 + 1.0) / _867);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _899 = frontier_phi_17_15_ladder;
        }
        float _1197;
        if (_870 > 0.0)
        {
            _1197 = abs((1.0 - _860) / _870);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_870 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_860 + 1.0) / _870);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1197 = frontier_phi_26_22_ladder;
        }
        float _1382;
        if (_873 > 0.0)
        {
            _1382 = abs((1.0 - _864) / _873);
        }
        else
        {
            float frontier_phi_40_33_ladder;
            if (_873 < 0.0)
            {
                frontier_phi_40_33_ladder = abs((_864 + 1.0) / _873);
            }
            else
            {
                frontier_phi_40_33_ladder = 5000.0;
            }
            _1382 = frontier_phi_40_33_ladder;
        }
        float _1384 = isnan(_1197) ? _899 : (isnan(_899) ? _1197 : min(_899, _1197));
        float _1385 = isnan(_1382) ? _1384 : (isnan(_1384) ? _1382 : min(_1384, _1382));
        float _1389 = (_1385 * _867) + _856;
        float _1390 = (_1385 * _870) + _860;
        float _1391 = (_1385 * _873) + _864;
        float _1392 = _1385 * 9.9999997473787516355514526367188e-05;
        float _1393 = (-1.0) - _1392;
        float _1395 = _1392 + 1.0;
        float frontier_phi_16_40_ladder;
        float frontier_phi_16_40_ladder_1;
        float frontier_phi_16_40_ladder_2;
        if ((_1391 > _1395) || ((_1391 < _1393) || ((_1390 > _1395) || ((_1390 < _1393) || ((_1389 < _1393) || (_1389 > _1395))))))
        {
            frontier_phi_16_40_ladder = 0.0;
            frontier_phi_16_40_ladder_1 = 0.0;
            frontier_phi_16_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1391, cbModelParam._m0[9u].z, fma(_1390, cbModelParam._m0[9u].y, _1389 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1391, cbModelParam._m0[10u].z, fma(_1390, cbModelParam._m0[10u].y, _1389 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1391, cbModelParam._m0[11u].z, fma(_1390, cbModelParam._m0[11u].y, _1389 * cbModelParam._m0[11u].x))), _805);
            frontier_phi_16_40_ladder = _1472.z * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_1 = _1472.y * cbModelParam._m0[1u].y;
            frontier_phi_16_40_ladder_2 = _1472.x * cbModelParam._m0[1u].y;
        }
        _889 = frontier_phi_16_40_ladder_2;
        _891 = frontier_phi_16_40_ladder_1;
        _893 = frontier_phi_16_40_ladder;
    }
    else
    {
        vec4 _877 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_307, _308, _309), _805);
        _889 = _877.x * cbModelParam._m0[1u].y;
        _891 = _877.y * cbModelParam._m0[1u].y;
        _893 = _877.z * cbModelParam._m0[1u].y;
    }
    float _896 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _989;
    float _991;
    float _993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _953 = fma(_339, cbModelParam._m0[21u].z, fma(_335, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _331)) + cbModelParam._m0[21u].w;
        float _957 = fma(_339, cbModelParam._m0[22u].z, fma(_335, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _331)) + cbModelParam._m0[22u].w;
        float _961 = fma(_339, cbModelParam._m0[23u].z, fma(_335, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _331)) + cbModelParam._m0[23u].w;
        float _964 = fma(_309, cbModelParam._m0[21u].z, fma(_308, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _307));
        float _967 = fma(_309, cbModelParam._m0[22u].z, fma(_308, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _307));
        float _970 = fma(_309, cbModelParam._m0[23u].z, fma(_308, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _307));
        float _1202;
        if (_964 > 0.0)
        {
            _1202 = abs((1.0 - _953) / _964);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_964 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_953 + 1.0) / _964);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1202 = frontier_phi_28_24_ladder;
        }
        float _1408;
        if (_967 > 0.0)
        {
            _1408 = abs((1.0 - _957) / _967);
        }
        else
        {
            float frontier_phi_42_35_ladder;
            if (_967 < 0.0)
            {
                frontier_phi_42_35_ladder = abs((_957 + 1.0) / _967);
            }
            else
            {
                frontier_phi_42_35_ladder = 5000.0;
            }
            _1408 = frontier_phi_42_35_ladder;
        }
        float _1490;
        if (_970 > 0.0)
        {
            _1490 = abs((1.0 - _961) / _970);
        }
        else
        {
            float frontier_phi_53_49_ladder;
            if (_970 < 0.0)
            {
                frontier_phi_53_49_ladder = abs((_961 + 1.0) / _970);
            }
            else
            {
                frontier_phi_53_49_ladder = 5000.0;
            }
            _1490 = frontier_phi_53_49_ladder;
        }
        float _1492 = isnan(_1408) ? _1202 : (isnan(_1202) ? _1408 : min(_1202, _1408));
        float _1493 = isnan(_1490) ? _1492 : (isnan(_1492) ? _1490 : min(_1492, _1490));
        float _1497 = (_1493 * _964) + _953;
        float _1498 = (_1493 * _967) + _957;
        float _1499 = (_1493 * _970) + _961;
        float _1500 = _1493 * 9.9999997473787516355514526367188e-05;
        float _1501 = (-1.0) - _1500;
        float _1503 = _1500 + 1.0;
        float frontier_phi_25_53_ladder;
        float frontier_phi_25_53_ladder_1;
        float frontier_phi_25_53_ladder_2;
        if ((_1499 > _1503) || ((_1499 < _1501) || ((_1498 > _1503) || ((_1498 < _1501) || ((_1497 < _1501) || (_1497 > _1503))))))
        {
            frontier_phi_25_53_ladder = 0.0;
            frontier_phi_25_53_ladder_1 = 0.0;
            frontier_phi_25_53_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1532 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1499, cbModelParam._m0[17u].z, fma(_1498, cbModelParam._m0[17u].y, _1497 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1499, cbModelParam._m0[18u].z, fma(_1498, cbModelParam._m0[18u].y, _1497 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1499, cbModelParam._m0[19u].z, fma(_1498, cbModelParam._m0[19u].y, _1497 * cbModelParam._m0[19u].x))), _896);
            frontier_phi_25_53_ladder = _1532.x * cbModelParam._m0[1u].z;
            frontier_phi_25_53_ladder_1 = _1532.y * cbModelParam._m0[1u].z;
            frontier_phi_25_53_ladder_2 = _1532.z * cbModelParam._m0[1u].z;
        }
        _989 = frontier_phi_25_53_ladder;
        _991 = frontier_phi_25_53_ladder_1;
        _993 = frontier_phi_25_53_ladder_2;
    }
    else
    {
        vec4 _973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_307, _308, _309), _896);
        _989 = _973.x * cbModelParam._m0[1u].z;
        _991 = _973.y * cbModelParam._m0[1u].z;
        _993 = _973.z * cbModelParam._m0[1u].z;
    }
    float _1005 = _298 * 0.01200000010430812835693359375;
    float _1007 = _1005 * ((cbModelParam._m0[1u].w * (_989 - _889)) + _889);
    float _1008 = _1005 * ((cbModelParam._m0[1u].w * (_991 - _891)) + _891);
    float _1009 = _1005 * ((cbModelParam._m0[1u].w * (_993 - _893)) + _893);
    float _1030 = fma(_1009, cbSceneParam._m0[89u].z, fma(_1008, cbSceneParam._m0[89u].y, _1007 * cbSceneParam._m0[89u].x));
    float _1033 = fma(_1009, cbSceneParam._m0[90u].z, fma(_1008, cbSceneParam._m0[90u].y, _1007 * cbSceneParam._m0[90u].x));
    float _1036 = fma(_1009, cbSceneParam._m0[91u].z, fma(_1008, cbSceneParam._m0[91u].y, _1007 * cbSceneParam._m0[91u].x));
    uint _1043 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1049 = floatBitsToUint(cbInstanceData._m0[_1043 + 5u]).x * 14u;
    float _1057 = (cbLight._m0[_1049 + 13u].x * (_298 + (-1.0))) + 1.0;
    uint _1058 = _1049 + 8u;
    float _1069 = cbLight._m0[_1049].x + _264;
    float _1070 = cbLight._m0[_1049].y + _265;
    float _1071 = cbLight._m0[_1049].z + _266;
    float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
    float _1079 = dot(vec3(_188, _189, _190), vec3(cbLight._m0[_1049].xyz));
    float _1766 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
    float _1777 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _1084 = dot(vec3(cbLight._m0[_1049].xyz), vec3(_1069 * _1075, _1070 * _1075, _1071 * _1075));
    float _1788 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _1095 = (exp2(log2(1.0 - (isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1101 = (0.5 / ((_1082 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1777 : (isnan(_1777) ? 1.0 : min(_1777, 1.0))))) * _1082;
    float _1799 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1103 = (isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0))) * 0.31831014156341552734375;
    float _1105 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
    uint _1122 = _1043 + 9u;
    uint _1123 = _1122 + uint(cbMatDynParam._m0[0u].w);
    float _1131 = ((cbMtdParam._m0[9u].x * cbMtdParam._m0[10u].x) * _178.x) * cbInstanceData._m0[_1123].x;
    float _1134 = ((cbMtdParam._m0[9u].y * cbMtdParam._m0[10u].x) * _178.y) * cbInstanceData._m0[_1123].y;
    float _1137 = ((cbMtdParam._m0[9u].z * cbMtdParam._m0[10u].x) * _178.z) * cbInstanceData._m0[_1123].z;
    float _1144 = _1131 + (cbPerFrame._m0[3u].x * ((((_1095 * cbLight._m0[_1058].x) * _1103) * _1105) + ((isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0))) * _799)));
    float _1145 = _1134 + (cbPerFrame._m0[3u].x * ((((_1095 * cbLight._m0[_1058].y) * _1103) * _1105) + ((isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0))) * _799)));
    float _1146 = _1137 + (cbPerFrame._m0[3u].x * ((((_1095 * cbLight._m0[_1058].z) * _1103) * _1105) + ((isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0))) * _799)));
    float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1155 = cbMtdParam._m0[2u].x * _1131;
    float _1156 = cbMtdParam._m0[2u].y * _1134;
    float _1157 = cbMtdParam._m0[2u].z * _1137;
    float _1830 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1159 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1160 = _1043 + 6u;
    float _1168 = _285 / cbSceneParam._m0[86u].x;
    float _1169 = _286 / cbSceneParam._m0[86u].y;
    vec4 _1183 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1168, _1169, (log2((isnan(cbSceneParam._m0[77u].w) ? _206 : (isnan(_206) ? cbSceneParam._m0[77u].w : min(_206, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1185 = _1183.x;
    float _1186 = _1183.y;
    float _1187 = _1183.z;
    float _1188 = _1183.w;
    float _1250;
    float _1252;
    float _1254;
    float _1256;
    if (_206 > cbSceneParam._m0[78u].w)
    {
        float _1211 = isnan(_206) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _206 : min(cbSceneParam._m0[80u].w, _206));
        float _1212 = _1211 / _206;
        float _1223 = _1212 * _257;
        float _1224 = _258 * _1212;
        float _1225 = (-0.0) - _1224;
        float _1227 = _1212 * _259;
        float _1229 = (cbSceneParam._m0[77u].w * _1225) / _1211;
        float _1230 = _1229 + cbSceneParam._m0[79u].w;
        float _1231 = cbSceneParam._m0[79u].w - _1224;
        float _1237 = sqrt(((_1223 * _1223) + (_1224 * _1224)) + (_1227 * _1227));
        float _1240 = (1.0 - (cbSceneParam._m0[77u].w / _1211)) * _1237;
        float _1246 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1248 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1413;
        if (abs((_1225 - _1229) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1413 = ((((_1230 > 0.0) ? exp2(_1246 * _1230) : (2.0 - exp2(_1248 * _1230))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1240;
        }
        else
        {
            float _1339 = 1.0 / cbSceneParam._m0[80u].x;
            float _1340 = isnan(_1231) ? _1230 : (isnan(_1230) ? _1231 : max(_1230, _1231));
            float _1341 = isnan(_1231) ? _1230 : (isnan(_1230) ? _1231 : min(_1230, _1231));
            float _1350 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : min(_1340, 0.0));
            float _1351 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : min(_1341, 0.0));
            _1413 = ((abs(_1237 / _1225) * cbSceneParam._m0[80u].y) * ((((_1350 - _1351) * 2.0) - ((exp2(_1246 * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)))) - exp2(_1246 * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0))))) * _1339)) - ((exp2(_1248 * _1350) - exp2(_1248 * _1351)) * _1339))) + (_1240 * cbSceneParam._m0[80u].z);
        }
        vec4 _1415 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1168, _1169, 1.0), 0.0);
        float _1424 = exp2((_1413 * (-1.44269502162933349609375)) * (1.0 - _1415.w));
        float _1425 = log2(_1424);
        float _1441 = log2(_1188);
        _1250 = (exp2(_1441 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1425 * cbSceneParam._m0[78u].x)) * _1415.x) / cbSceneParam._m0[78u].x)) + _1185;
        _1252 = (exp2(_1441 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1425 * cbSceneParam._m0[78u].y)) * _1415.y) / cbSceneParam._m0[78u].y)) + _1186;
        _1254 = (exp2(_1441 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1425 * cbSceneParam._m0[78u].z)) * _1415.z) / cbSceneParam._m0[78u].z)) + _1187;
        _1256 = _1424 * _1188;
    }
    else
    {
        _1250 = _1185;
        _1252 = _1186;
        _1254 = _1187;
        _1256 = _1188;
    }
    bool _1451;
    vec4 _1266;
    vec4 _1289;
    float _1291;
    float _1295;
    float _1296;
    float _1297;
    float _1300;
    float _1303;
    float _1306;
    float _1307;
    bool _1318;
    for (;;)
    {
        _1266 = cbMatDynParam._m0[0u];
        float _1268 = roundEven(_1266.y);
        bool _1269 = _1268 == 3.0;
        float _1271 = log2(_1256);
        float _1275 = exp2(_1271 * cbSceneParam._m0[78u].x);
        float _1276 = exp2(_1271 * cbSceneParam._m0[78u].y);
        float _1277 = exp2(_1271 * cbSceneParam._m0[78u].z);
        float _1278 = _1275 * _1147;
        float _1279 = _1276 * _1148;
        float _1280 = _1277 * _1149;
        float _1287 = _273 + (-0.5);
        _1289 = cbMtdParam._m0[1u];
        _1291 = _1289.y * _1287;
        float _1294 = (_1268 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1295 = _1294 * (_1269 ? _1278 : (_1278 + (cbSceneParam._m0[72u].w * _1250)));
        _1296 = _1294 * (_1269 ? _1279 : (_1279 + (cbSceneParam._m0[72u].w * _1252)));
        _1297 = _1294 * (_1269 ? _1280 : (_1280 + (cbSceneParam._m0[72u].w * _1254)));
        _1300 = ((_1155 * _1159) * _1275) * _1294;
        _1303 = ((_1156 * _1159) * _1276) * _1294;
        _1306 = ((_1157 * _1159) * _1277) * _1294;
        _1307 = _1287 * 0.999000012874603271484375;
        _1318 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1318)
        {
            if ((cbInstanceData._m0[_1043 + 7u].x + _1307) < 0.5)
            {
                _1451 = true;
                break;
            }
        }
        uint _1374 = _1122 + uint(_1266.w);
        if ((cbInstanceData._m0[_1374].w < 1.0) && ((cbInstanceData._m0[_1374].w + _1307) < 0.5))
        {
            _1451 = true;
            break;
        }
        if ((_1291 + 1.0) < _1289.x)
        {
            _1451 = true;
            break;
        }
        _1451 = false;
        break;
    }
    float _1481;
    if (_1451)
    {
        discard_state = true;
        _1481 = 0.0;
    }
    else
    {
        _1481 = cbInstanceData._m0[_1160].w;
    }
    SV_Target.x = _1295;
    SV_Target.y = _1296;
    SV_Target.z = _1297;
    SV_Target.w = _1481;
    SV_Target_1.x = _1300;
    SV_Target_1.y = _1303;
    SV_Target_1.z = _1306;
    SV_Target_1.w = cbInstanceData._m0[_1160].w;
    discard_exit();
}


