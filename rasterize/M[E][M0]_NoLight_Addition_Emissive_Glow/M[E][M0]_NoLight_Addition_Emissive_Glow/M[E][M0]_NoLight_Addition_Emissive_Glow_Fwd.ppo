#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 0) uniform texture2D M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _491;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _147 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _148 = _147 * NORMAL.x;
    float _149 = _147 * NORMAL.y;
    float _150 = _147 * NORMAL.z;
    vec4 _174 = texture(sampler2D(M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _183 = inversesqrt(dot(vec3(_148, _149, _150), vec3(_148, _149, _150)));
    float _184 = _183 * _148;
    float _185 = _183 * _149;
    float _186 = _183 * _150;
    float _202 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _243 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _253 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _243);
    float _254 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _243);
    float _255 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _243);
    float _259 = inversesqrt(dot(vec3(_253, _254, _255), vec3(_253, _254, _255)));
    float _260 = _253 * _259;
    float _261 = _254 * _259;
    float _262 = _255 * _259;
    float _268 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _269 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _278 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_268 * cbSceneParam._m0[86u].x, _269 * cbSceneParam._m0[86u].y));
    float _281 = _278.x * TEXCOORD.z;
    float _282 = dot(vec3(_184, _185, _186), vec3(_260, _261, _262));
    float _285 = _282 * 2.0;
    float _290 = (_285 * _184) - _260;
    float _291 = (_285 * _185) - _261;
    float _292 = (_285 * _186) - _262;
    float _314 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _318 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _322 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _490;
    float _492;
    float _493;
    float _494;
    float _495;
    float _496;
    float _497;
    float _498;
    float _499;
    float _500;
    float _501;
    float _502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _349 = fma(_322, cbModelParam._m0[26u].z, fma(_318, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _314));
        float _353 = fma(_322, cbModelParam._m0[27u].z, fma(_318, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _314));
        float _357 = fma(_322, cbModelParam._m0[28u].z, fma(_318, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _314));
        float _383 = _314 + _184;
        float _384 = _318 + _185;
        float _385 = _322 + _186;
        float _395 = fma(_385, cbModelParam._m0[26u].z, fma(_384, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _383)) - _349;
        float _396 = fma(_385, cbModelParam._m0[27u].z, fma(_384, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _383)) - _353;
        float _397 = fma(_385, cbModelParam._m0[28u].z, fma(_384, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _383)) - _357;
        float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
        float _414 = ((_401 * _395) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_349 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _415 = ((_401 * _396) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_353 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _416 = ((_401 * _397) / cbModelParam._m0[34u].z) + ((((((_357 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _419 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_414, _415, _416), 0.0);
        vec4 _426 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_414, _415, _416), 0.0);
        vec4 _433 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_414, _415, _416), 0.0);
        vec4 _440 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_414, _415, _416), 0.0);
        float _453 = exp2((_419.w + (-0.5)) * 20.0) * 2.0;
        float _463 = exp2((_426.w + (-0.5)) * 20.0) * 2.0;
        float _473 = exp2((_433.w + (-0.5)) * 20.0) * 2.0;
        float _483 = exp2((_440.w + (-0.5)) * 20.0) * 2.0;
        float _484 = _483 * (_440.x + (-0.5));
        float _485 = _483 * (_440.y + (-0.5));
        float _486 = _483 * (_440.z + (-0.5));
        _490 = _453 * (_419.z + (-0.5));
        _492 = _453 * (_419.y + (-0.5));
        _493 = _453 * (_419.x + (-0.5));
        _494 = _463 * (_426.z + (-0.5));
        _495 = _463 * (_426.y + (-0.5));
        _496 = _463 * (_426.x + (-0.5));
        _497 = _473 * (_433.z + (-0.5));
        _498 = _473 * (_433.y + (-0.5));
        _499 = _473 * (_433.x + (-0.5));
        _500 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
        _501 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
        _502 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    }
    else
    {
        _490 = _491;
        _492 = _491;
        _493 = _491;
        _494 = _491;
        _495 = _491;
        _496 = _491;
        _497 = _491;
        _498 = _491;
        _499 = _491;
        _500 = _491;
        _501 = _491;
        _502 = _491;
    }
    float _664;
    float _665;
    float _666;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _528 = fma(_322, cbModelParam._m0[30u].z, fma(_318, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _314));
        float _532 = fma(_322, cbModelParam._m0[31u].z, fma(_318, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _314));
        float _536 = fma(_322, cbModelParam._m0[32u].z, fma(_318, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _314));
        float _559 = _314 + _184;
        float _560 = _318 + _185;
        float _561 = _322 + _186;
        float _571 = fma(_561, cbModelParam._m0[30u].z, fma(_560, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _559)) - _528;
        float _572 = fma(_561, cbModelParam._m0[31u].z, fma(_560, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _559)) - _532;
        float _573 = fma(_561, cbModelParam._m0[32u].z, fma(_560, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _559)) - _536;
        float _577 = inversesqrt(dot(vec3(_571, _572, _573), vec3(_571, _572, _573)));
        float _590 = ((_577 * _571) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_528 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _591 = ((_577 * _572) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_532 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _592 = ((_577 * _573) / cbModelParam._m0[35u].z) + ((((((_536 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_590, _591, _592), 0.0);
        float _627 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _637 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _647 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _657 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_615.x + (-0.5));
        float _659 = _657 * (_615.y + (-0.5));
        float _660 = _657 * (_615.z + (-0.5));
        _664 = _627 * (_594.z + (-0.5));
        _665 = _627 * (_594.y + (-0.5));
        _666 = _627 * (_594.x + (-0.5));
        _667 = _637 * (_601.z + (-0.5));
        _668 = _637 * (_601.y + (-0.5));
        _669 = _637 * (_601.x + (-0.5));
        _670 = _647 * (_608.z + (-0.5));
        _671 = _647 * (_608.y + (-0.5));
        _672 = _647 * (_608.x + (-0.5));
        _673 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        _674 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        _675 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    }
    else
    {
        _664 = _491;
        _665 = _491;
        _666 = _491;
        _667 = _491;
        _668 = _491;
        _669 = _491;
        _670 = _491;
        _671 = _491;
        _672 = _491;
        _673 = _491;
        _674 = _491;
        _675 = _491;
    }
    float _690 = _290 * 0.5;
    float _691 = _291 * 0.5;
    float _692 = _292 * 0.5;
    float _693 = dot(vec4(_690, _691, _692, 1.0), vec4(_666, _669, _672, _675));
    float _696 = dot(vec4(_690, _691, _692, 1.0), vec4(_665, _668, _671, _674));
    float _699 = dot(vec4(_690, _691, _692, 1.0), vec4(_664, _667, _670, _673));
    float _734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _706 = dot(vec4(_690, _691, _692, 1.0), vec4(_490, _494, _497, _500));
        float _710 = dot(vec4(_690, _691, _692, 1.0), vec4(_492, _495, _498, _501));
        float _714 = dot(vec4(_690, _691, _692, 1.0), vec4(_493, _496, _499, _502));
        float _721 = dot(vec4(cbModelParam._m0[39u]), vec4(_690, _691, _692, 1.0));
        _734 = dot(vec3(isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0)), isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0)), isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_721) ? 0.0 : (isnan(0.0) ? _721 : max(0.0, _721))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _734 = 1.0;
    }
    float _745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _736 = dot(vec4(cbModelParam._m0[40u]), vec4(_690, _691, _692, 1.0));
        _745 = dot(vec3(isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0)), isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0)), isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_736) ? 0.0 : (isnan(0.0) ? _736 : max(0.0, _736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _745 = 1.0;
    }
    float _749 = (_745 * cbModelParam._m0[1u].x) + (_734 * (1.0 - cbModelParam._m0[1u].x));
    float _755 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _839;
    float _841;
    float _843;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _806 = fma(_322, cbModelParam._m0[13u].z, fma(_318, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _314)) + cbModelParam._m0[13u].w;
        float _810 = fma(_322, cbModelParam._m0[14u].z, fma(_318, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _314)) + cbModelParam._m0[14u].w;
        float _814 = fma(_322, cbModelParam._m0[15u].z, fma(_318, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _314)) + cbModelParam._m0[15u].w;
        float _817 = fma(_292, cbModelParam._m0[13u].z, fma(_291, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _290));
        float _820 = fma(_292, cbModelParam._m0[14u].z, fma(_291, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _290));
        float _823 = fma(_292, cbModelParam._m0[15u].z, fma(_291, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _290));
        float _849;
        if (_817 > 0.0)
        {
            _849 = abs((1.0 - _806) / _817);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_817 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_806 + 1.0) / _817);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _849 = frontier_phi_14_12_ladder;
        }
        float _1149;
        if (_820 > 0.0)
        {
            _1149 = abs((1.0 - _810) / _820);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_820 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_810 + 1.0) / _820);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1149 = frontier_phi_23_19_ladder;
        }
        float _1309;
        if (_823 > 0.0)
        {
            _1309 = abs((1.0 - _814) / _823);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_823 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_814 + 1.0) / _823);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1309 = frontier_phi_35_30_ladder;
        }
        float _1311 = isnan(_1149) ? _849 : (isnan(_849) ? _1149 : min(_849, _1149));
        float _1312 = isnan(_1309) ? _1311 : (isnan(_1311) ? _1309 : min(_1311, _1309));
        float _1316 = (_1312 * _817) + _806;
        float _1317 = (_1312 * _820) + _810;
        float _1318 = (_1312 * _823) + _814;
        float _1319 = _1312 * 9.9999997473787516355514526367188e-05;
        float _1320 = (-1.0) - _1319;
        float _1322 = _1319 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1318 > _1322) || ((_1318 < _1320) || ((_1317 > _1322) || ((_1317 < _1320) || ((_1316 < _1320) || (_1316 > _1322))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1318, cbModelParam._m0[9u].z, fma(_1317, cbModelParam._m0[9u].y, _1316 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1318, cbModelParam._m0[10u].z, fma(_1317, cbModelParam._m0[10u].y, _1316 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1318, cbModelParam._m0[11u].z, fma(_1317, cbModelParam._m0[11u].y, _1316 * cbModelParam._m0[11u].x))), _755);
            frontier_phi_13_35_ladder = _1394.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1394.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1394.x * cbModelParam._m0[1u].y;
        }
        _839 = frontier_phi_13_35_ladder_2;
        _841 = frontier_phi_13_35_ladder_1;
        _843 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_290, _291, _292), _755);
        _839 = _827.x * cbModelParam._m0[1u].y;
        _841 = _827.y * cbModelParam._m0[1u].y;
        _843 = _827.z * cbModelParam._m0[1u].y;
    }
    float _846 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _939;
    float _941;
    float _943;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _903 = fma(_322, cbModelParam._m0[21u].z, fma(_318, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _314)) + cbModelParam._m0[21u].w;
        float _907 = fma(_322, cbModelParam._m0[22u].z, fma(_318, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _314)) + cbModelParam._m0[22u].w;
        float _911 = fma(_322, cbModelParam._m0[23u].z, fma(_318, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _314)) + cbModelParam._m0[23u].w;
        float _914 = fma(_292, cbModelParam._m0[21u].z, fma(_291, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _290));
        float _917 = fma(_292, cbModelParam._m0[22u].z, fma(_291, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _290));
        float _920 = fma(_292, cbModelParam._m0[23u].z, fma(_291, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _290));
        float _1154;
        if (_914 > 0.0)
        {
            _1154 = abs((1.0 - _903) / _914);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_914 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_903 + 1.0) / _914);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1154 = frontier_phi_25_21_ladder;
        }
        float _1335;
        if (_917 > 0.0)
        {
            _1335 = abs((1.0 - _907) / _917);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_917 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_907 + 1.0) / _917);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1335 = frontier_phi_37_32_ladder;
        }
        float _1403;
        if (_920 > 0.0)
        {
            _1403 = abs((1.0 - _911) / _920);
        }
        else
        {
            float frontier_phi_43_42_ladder;
            if (_920 < 0.0)
            {
                frontier_phi_43_42_ladder = abs((_911 + 1.0) / _920);
            }
            else
            {
                frontier_phi_43_42_ladder = 5000.0;
            }
            _1403 = frontier_phi_43_42_ladder;
        }
        float _1405 = isnan(_1335) ? _1154 : (isnan(_1154) ? _1335 : min(_1154, _1335));
        float _1406 = isnan(_1403) ? _1405 : (isnan(_1405) ? _1403 : min(_1405, _1403));
        float _1410 = (_1406 * _914) + _903;
        float _1411 = (_1406 * _917) + _907;
        float _1412 = (_1406 * _920) + _911;
        float _1413 = _1406 * 9.9999997473787516355514526367188e-05;
        float _1414 = (-1.0) - _1413;
        float _1416 = _1413 + 1.0;
        float frontier_phi_22_43_ladder;
        float frontier_phi_22_43_ladder_1;
        float frontier_phi_22_43_ladder_2;
        if ((_1412 > _1416) || ((_1412 < _1414) || ((_1411 > _1416) || ((_1411 < _1414) || ((_1410 < _1414) || (_1410 > _1416))))))
        {
            frontier_phi_22_43_ladder = 0.0;
            frontier_phi_22_43_ladder_1 = 0.0;
            frontier_phi_22_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1445 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1412, cbModelParam._m0[17u].z, fma(_1411, cbModelParam._m0[17u].y, _1410 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1412, cbModelParam._m0[18u].z, fma(_1411, cbModelParam._m0[18u].y, _1410 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1412, cbModelParam._m0[19u].z, fma(_1411, cbModelParam._m0[19u].y, _1410 * cbModelParam._m0[19u].x))), _846);
            frontier_phi_22_43_ladder = _1445.y * cbModelParam._m0[1u].z;
            frontier_phi_22_43_ladder_1 = _1445.x * cbModelParam._m0[1u].z;
            frontier_phi_22_43_ladder_2 = _1445.z * cbModelParam._m0[1u].z;
        }
        _939 = frontier_phi_22_43_ladder_1;
        _941 = frontier_phi_22_43_ladder;
        _943 = frontier_phi_22_43_ladder_2;
    }
    else
    {
        vec4 _923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_290, _291, _292), _846);
        _939 = _923.x * cbModelParam._m0[1u].z;
        _941 = _923.y * cbModelParam._m0[1u].z;
        _943 = _923.z * cbModelParam._m0[1u].z;
    }
    float _955 = _281 * 0.01200000010430812835693359375;
    float _957 = _955 * ((cbModelParam._m0[1u].w * (_939 - _839)) + _839);
    float _958 = _955 * ((cbModelParam._m0[1u].w * (_941 - _841)) + _841);
    float _959 = _955 * ((cbModelParam._m0[1u].w * (_943 - _843)) + _843);
    float _980 = fma(_959, cbSceneParam._m0[89u].z, fma(_958, cbSceneParam._m0[89u].y, _957 * cbSceneParam._m0[89u].x));
    float _983 = fma(_959, cbSceneParam._m0[90u].z, fma(_958, cbSceneParam._m0[90u].y, _957 * cbSceneParam._m0[90u].x));
    float _986 = fma(_959, cbSceneParam._m0[91u].z, fma(_958, cbSceneParam._m0[91u].y, _957 * cbSceneParam._m0[91u].x));
    uint _993 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1000 = floatBitsToUint(cbInstanceData._m0[_993 + 5u]).x * 14u;
    float _1008 = (cbLight._m0[_1000 + 13u].x * (_281 + (-1.0))) + 1.0;
    uint _1009 = _1000 + 8u;
    float _1020 = cbLight._m0[_1000].x + _260;
    float _1021 = cbLight._m0[_1000].y + _261;
    float _1022 = cbLight._m0[_1000].z + _262;
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1030 = dot(vec3(_184, _185, _186), vec3(cbLight._m0[_1000].xyz));
    float _1632 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _1033 = isnan(1.0) ? _1632 : (isnan(_1632) ? 1.0 : min(_1632, 1.0));
    float _1643 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _1035 = dot(vec3(cbLight._m0[_1000].xyz), vec3(_1020 * _1026, _1021 * _1026, _1022 * _1026));
    float _1654 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1046 = (exp2(log2(1.0 - (isnan(1.0) ? _1654 : (isnan(_1654) ? 1.0 : min(_1654, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1052 = (0.5 / ((_1033 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1643 : (isnan(_1643) ? 1.0 : min(_1643, 1.0))))) * _1033;
    float _1665 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1054 = (isnan(1.0) ? _1665 : (isnan(_1665) ? 1.0 : min(_1665, 1.0))) * 0.31831014156341552734375;
    float _1056 = isnan(1.0) ? _1008 : (isnan(_1008) ? 1.0 : min(_1008, 1.0));
    uint _1074 = (_993 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1082 = ((cbMtdParam._m0[9u].x * cbMtdParam._m0[10u].x) * _174.x) * cbInstanceData._m0[_1074].x;
    float _1085 = ((cbMtdParam._m0[9u].y * cbMtdParam._m0[10u].x) * _174.y) * cbInstanceData._m0[_1074].y;
    float _1088 = ((cbMtdParam._m0[9u].z * cbMtdParam._m0[10u].x) * _174.z) * cbInstanceData._m0[_1074].z;
    float _1095 = _1082 + (cbPerFrame._m0[3u].x * ((((_1046 * cbLight._m0[_1009].x) * _1054) * _1056) + ((isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0))) * _749)));
    float _1096 = _1085 + (cbPerFrame._m0[3u].x * ((((_1046 * cbLight._m0[_1009].y) * _1054) * _1056) + ((isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0))) * _749)));
    float _1097 = _1088 + (cbPerFrame._m0[3u].x * ((((_1046 * cbLight._m0[_1009].z) * _1054) * _1056) + ((isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0))) * _749)));
    float _1696 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1110 = isnan(1.0) ? _1696 : (isnan(_1696) ? 1.0 : min(_1696, 1.0));
    uint _1111 = _993 + 6u;
    float _1120 = _268 / cbSceneParam._m0[86u].x;
    float _1121 = _269 / cbSceneParam._m0[86u].y;
    vec4 _1135 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1120, _1121, (log2((isnan(cbSceneParam._m0[77u].w) ? _202 : (isnan(_202) ? cbSceneParam._m0[77u].w : min(_202, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1137 = _1135.x;
    float _1138 = _1135.y;
    float _1139 = _1135.z;
    float _1140 = _1135.w;
    float _1202;
    float _1204;
    float _1206;
    float _1208;
    if (_202 > cbSceneParam._m0[78u].w)
    {
        float _1163 = isnan(_202) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _202 : min(cbSceneParam._m0[80u].w, _202));
        float _1164 = _1163 / _202;
        float _1175 = _1164 * _253;
        float _1176 = _254 * _1164;
        float _1177 = (-0.0) - _1176;
        float _1179 = _1164 * _255;
        float _1181 = (cbSceneParam._m0[77u].w * _1177) / _1163;
        float _1182 = _1181 + cbSceneParam._m0[79u].w;
        float _1183 = cbSceneParam._m0[79u].w - _1176;
        float _1189 = sqrt(((_1175 * _1175) + (_1176 * _1176)) + (_1179 * _1179));
        float _1192 = (1.0 - (cbSceneParam._m0[77u].w / _1163)) * _1189;
        float _1198 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1200 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1340;
        if (abs((_1177 - _1181) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1340 = ((((_1182 > 0.0) ? exp2(_1198 * _1182) : (2.0 - exp2(_1200 * _1182))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1192;
        }
        else
        {
            float _1282 = 1.0 / cbSceneParam._m0[80u].x;
            float _1283 = isnan(_1183) ? _1182 : (isnan(_1182) ? _1183 : max(_1182, _1183));
            float _1284 = isnan(_1183) ? _1182 : (isnan(_1182) ? _1183 : min(_1182, _1183));
            float _1293 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : min(_1283, 0.0));
            float _1294 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : min(_1284, 0.0));
            _1340 = ((abs(_1189 / _1177) * cbSceneParam._m0[80u].y) * ((((_1293 - _1294) * 2.0) - ((exp2(_1198 * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)))) - exp2(_1198 * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))))) * _1282)) - ((exp2(_1200 * _1293) - exp2(_1200 * _1294)) * _1282))) + (_1192 * cbSceneParam._m0[80u].z);
        }
        vec4 _1342 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1120, _1121, 1.0), 0.0);
        float _1351 = exp2((_1340 * (-1.44269502162933349609375)) * (1.0 - _1342.w));
        float _1352 = log2(_1351);
        float _1368 = log2(_1140);
        _1202 = (exp2(_1368 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1352 * cbSceneParam._m0[78u].x)) * _1342.x) / cbSceneParam._m0[78u].x)) + _1137;
        _1204 = (exp2(_1368 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1352 * cbSceneParam._m0[78u].y)) * _1342.y) / cbSceneParam._m0[78u].y)) + _1138;
        _1206 = (exp2(_1368 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1352 * cbSceneParam._m0[78u].z)) * _1342.z) / cbSceneParam._m0[78u].z)) + _1139;
        _1208 = _1351 * _1140;
    }
    else
    {
        _1202 = _1137;
        _1204 = _1138;
        _1206 = _1139;
        _1208 = _1140;
    }
    float _1220 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1221 = _1220 == 3.0;
    float _1223 = log2(_1208);
    float _1227 = exp2(_1223 * cbSceneParam._m0[78u].x);
    float _1228 = exp2(_1223 * cbSceneParam._m0[78u].y);
    float _1229 = exp2(_1223 * cbSceneParam._m0[78u].z);
    float _1230 = _1227 * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
    float _1231 = _1228 * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
    float _1232 = _1229 * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    float _1241 = (_1220 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1241 * (_1221 ? _1230 : (_1230 + (cbSceneParam._m0[72u].w * _1202)));
    SV_Target.y = _1241 * (_1221 ? _1231 : (_1231 + (cbSceneParam._m0[72u].w * _1204)));
    SV_Target.z = _1241 * (_1221 ? _1232 : (_1232 + (cbSceneParam._m0[72u].w * _1206)));
    SV_Target.w = cbInstanceData._m0[_1111].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1082) * _1110) * _1227) * _1241;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1085) * _1110) * _1228) * _1241;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1088) * _1110) * _1229) * _1241;
    SV_Target_1.w = cbInstanceData._m0[_1111].w;
}


