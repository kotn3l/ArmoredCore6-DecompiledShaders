#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 0) uniform texture2D M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _493;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _149 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _150 = _149 * NORMAL.x;
    float _151 = _149 * NORMAL.y;
    float _152 = _149 * NORMAL.z;
    vec4 _176 = texture(sampler2D(M_E_M0_NoLight_Addition_Emissive_Glow_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _185 = inversesqrt(dot(vec3(_150, _151, _152), vec3(_150, _151, _152)));
    float _186 = _185 * _150;
    float _187 = _185 * _151;
    float _188 = _185 * _152;
    float _204 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _245 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _255 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _245);
    float _256 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _245);
    float _257 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _245);
    float _261 = inversesqrt(dot(vec3(_255, _256, _257), vec3(_255, _256, _257)));
    float _262 = _255 * _261;
    float _263 = _256 * _261;
    float _264 = _257 * _261;
    float _270 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _271 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _280 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_270 * cbSceneParam._m0[86u].x, _271 * cbSceneParam._m0[86u].y));
    float _283 = _280.x * TEXCOORD.z;
    float _284 = dot(vec3(_186, _187, _188), vec3(_262, _263, _264));
    float _287 = _284 * 2.0;
    float _292 = (_287 * _186) - _262;
    float _293 = (_287 * _187) - _263;
    float _294 = (_287 * _188) - _264;
    float _316 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _320 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _324 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _492;
    float _494;
    float _495;
    float _496;
    float _497;
    float _498;
    float _499;
    float _500;
    float _501;
    float _502;
    float _503;
    float _504;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _351 = fma(_324, cbModelParam._m0[26u].z, fma(_320, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _316));
        float _355 = fma(_324, cbModelParam._m0[27u].z, fma(_320, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _316));
        float _359 = fma(_324, cbModelParam._m0[28u].z, fma(_320, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _316));
        float _385 = _316 + _186;
        float _386 = _320 + _187;
        float _387 = _324 + _188;
        float _397 = fma(_387, cbModelParam._m0[26u].z, fma(_386, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _385)) - _351;
        float _398 = fma(_387, cbModelParam._m0[27u].z, fma(_386, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _385)) - _355;
        float _399 = fma(_387, cbModelParam._m0[28u].z, fma(_386, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _385)) - _359;
        float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
        float _416 = ((_403 * _397) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_351 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _417 = ((_403 * _398) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_355 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _418 = ((_403 * _399) / cbModelParam._m0[34u].z) + ((((((_359 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _421 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_416, _417, _418), 0.0);
        vec4 _428 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_416, _417, _418), 0.0);
        vec4 _435 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_416, _417, _418), 0.0);
        vec4 _442 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_416, _417, _418), 0.0);
        float _455 = exp2((_421.w + (-0.5)) * 20.0) * 2.0;
        float _465 = exp2((_428.w + (-0.5)) * 20.0) * 2.0;
        float _475 = exp2((_435.w + (-0.5)) * 20.0) * 2.0;
        float _485 = exp2((_442.w + (-0.5)) * 20.0) * 2.0;
        float _486 = _485 * (_442.x + (-0.5));
        float _487 = _485 * (_442.y + (-0.5));
        float _488 = _485 * (_442.z + (-0.5));
        _492 = _455 * (_421.z + (-0.5));
        _494 = _455 * (_421.y + (-0.5));
        _495 = _455 * (_421.x + (-0.5));
        _496 = _465 * (_428.z + (-0.5));
        _497 = _465 * (_428.y + (-0.5));
        _498 = _465 * (_428.x + (-0.5));
        _499 = _475 * (_435.z + (-0.5));
        _500 = _475 * (_435.y + (-0.5));
        _501 = _475 * (_435.x + (-0.5));
        _502 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
        _503 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
        _504 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    }
    else
    {
        _492 = _493;
        _494 = _493;
        _495 = _493;
        _496 = _493;
        _497 = _493;
        _498 = _493;
        _499 = _493;
        _500 = _493;
        _501 = _493;
        _502 = _493;
        _503 = _493;
        _504 = _493;
    }
    float _666;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    float _676;
    float _677;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _530 = fma(_324, cbModelParam._m0[30u].z, fma(_320, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _316));
        float _534 = fma(_324, cbModelParam._m0[31u].z, fma(_320, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _316));
        float _538 = fma(_324, cbModelParam._m0[32u].z, fma(_320, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _316));
        float _561 = _316 + _186;
        float _562 = _320 + _187;
        float _563 = _324 + _188;
        float _573 = fma(_563, cbModelParam._m0[30u].z, fma(_562, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561)) - _530;
        float _574 = fma(_563, cbModelParam._m0[31u].z, fma(_562, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561)) - _534;
        float _575 = fma(_563, cbModelParam._m0[32u].z, fma(_562, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561)) - _538;
        float _579 = inversesqrt(dot(vec3(_573, _574, _575), vec3(_573, _574, _575)));
        float _592 = ((_579 * _573) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_530 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _593 = ((_579 * _574) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_534 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _594 = ((_579 * _575) / cbModelParam._m0[35u].z) + ((((((_538 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _596 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_592, _593, _594), 0.0);
        float _629 = exp2((_596.w + (-0.5)) * 20.0) * 2.0;
        float _639 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _649 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _659 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_617.x + (-0.5));
        float _661 = _659 * (_617.y + (-0.5));
        float _662 = _659 * (_617.z + (-0.5));
        _666 = _629 * (_596.z + (-0.5));
        _667 = _629 * (_596.y + (-0.5));
        _668 = _629 * (_596.x + (-0.5));
        _669 = _639 * (_603.z + (-0.5));
        _670 = _639 * (_603.y + (-0.5));
        _671 = _639 * (_603.x + (-0.5));
        _672 = _649 * (_610.z + (-0.5));
        _673 = _649 * (_610.y + (-0.5));
        _674 = _649 * (_610.x + (-0.5));
        _675 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        _676 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        _677 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    }
    else
    {
        _666 = _493;
        _667 = _493;
        _668 = _493;
        _669 = _493;
        _670 = _493;
        _671 = _493;
        _672 = _493;
        _673 = _493;
        _674 = _493;
        _675 = _493;
        _676 = _493;
        _677 = _493;
    }
    float _692 = _292 * 0.5;
    float _693 = _293 * 0.5;
    float _694 = _294 * 0.5;
    float _695 = dot(vec4(_692, _693, _694, 1.0), vec4(_668, _671, _674, _677));
    float _698 = dot(vec4(_692, _693, _694, 1.0), vec4(_667, _670, _673, _676));
    float _701 = dot(vec4(_692, _693, _694, 1.0), vec4(_666, _669, _672, _675));
    float _736;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _708 = dot(vec4(_692, _693, _694, 1.0), vec4(_492, _496, _499, _502));
        float _712 = dot(vec4(_692, _693, _694, 1.0), vec4(_494, _497, _500, _503));
        float _716 = dot(vec4(_692, _693, _694, 1.0), vec4(_495, _498, _501, _504));
        float _723 = dot(vec4(cbModelParam._m0[39u]), vec4(_692, _693, _694, 1.0));
        _736 = dot(vec3(isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)), isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0)), isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_723) ? 0.0 : (isnan(0.0) ? _723 : max(0.0, _723))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _736 = 1.0;
    }
    float _747;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _738 = dot(vec4(cbModelParam._m0[40u]), vec4(_692, _693, _694, 1.0));
        _747 = dot(vec3(isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)), isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0)), isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_738) ? 0.0 : (isnan(0.0) ? _738 : max(0.0, _738))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _747 = 1.0;
    }
    float _751 = (_747 * cbModelParam._m0[1u].x) + (_736 * (1.0 - cbModelParam._m0[1u].x));
    float _757 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _841;
    float _843;
    float _845;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _808 = fma(_324, cbModelParam._m0[13u].z, fma(_320, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _316)) + cbModelParam._m0[13u].w;
        float _812 = fma(_324, cbModelParam._m0[14u].z, fma(_320, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _316)) + cbModelParam._m0[14u].w;
        float _816 = fma(_324, cbModelParam._m0[15u].z, fma(_320, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _316)) + cbModelParam._m0[15u].w;
        float _819 = fma(_294, cbModelParam._m0[13u].z, fma(_293, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _292));
        float _822 = fma(_294, cbModelParam._m0[14u].z, fma(_293, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _292));
        float _825 = fma(_294, cbModelParam._m0[15u].z, fma(_293, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _292));
        float _851;
        if (_819 > 0.0)
        {
            _851 = abs((1.0 - _808) / _819);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_819 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_808 + 1.0) / _819);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _851 = frontier_phi_14_12_ladder;
        }
        float _1172;
        if (_822 > 0.0)
        {
            _1172 = abs((1.0 - _812) / _822);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_822 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_812 + 1.0) / _822);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1172 = frontier_phi_23_19_ladder;
        }
        float _1332;
        if (_825 > 0.0)
        {
            _1332 = abs((1.0 - _816) / _825);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_825 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_816 + 1.0) / _825);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1332 = frontier_phi_35_30_ladder;
        }
        float _1334 = isnan(_1172) ? _851 : (isnan(_851) ? _1172 : min(_851, _1172));
        float _1335 = isnan(_1332) ? _1334 : (isnan(_1334) ? _1332 : min(_1334, _1332));
        float _1339 = (_1335 * _819) + _808;
        float _1340 = (_1335 * _822) + _812;
        float _1341 = (_1335 * _825) + _816;
        float _1342 = _1335 * 9.9999997473787516355514526367188e-05;
        float _1343 = (-1.0) - _1342;
        float _1345 = _1342 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1341 > _1345) || ((_1341 < _1343) || ((_1340 > _1345) || ((_1340 < _1343) || ((_1339 < _1343) || (_1339 > _1345))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1341, cbModelParam._m0[9u].z, fma(_1340, cbModelParam._m0[9u].y, _1339 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1341, cbModelParam._m0[10u].z, fma(_1340, cbModelParam._m0[10u].y, _1339 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1341, cbModelParam._m0[11u].z, fma(_1340, cbModelParam._m0[11u].y, _1339 * cbModelParam._m0[11u].x))), _757);
            frontier_phi_13_35_ladder = _1417.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1417.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1417.x * cbModelParam._m0[1u].y;
        }
        _841 = frontier_phi_13_35_ladder_2;
        _843 = frontier_phi_13_35_ladder_1;
        _845 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _829 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_292, _293, _294), _757);
        _841 = _829.x * cbModelParam._m0[1u].y;
        _843 = _829.y * cbModelParam._m0[1u].y;
        _845 = _829.z * cbModelParam._m0[1u].y;
    }
    float _848 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _941;
    float _943;
    float _945;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _905 = fma(_324, cbModelParam._m0[21u].z, fma(_320, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _316)) + cbModelParam._m0[21u].w;
        float _909 = fma(_324, cbModelParam._m0[22u].z, fma(_320, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _316)) + cbModelParam._m0[22u].w;
        float _913 = fma(_324, cbModelParam._m0[23u].z, fma(_320, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _316)) + cbModelParam._m0[23u].w;
        float _916 = fma(_294, cbModelParam._m0[21u].z, fma(_293, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _292));
        float _919 = fma(_294, cbModelParam._m0[22u].z, fma(_293, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _292));
        float _922 = fma(_294, cbModelParam._m0[23u].z, fma(_293, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _292));
        float _1177;
        if (_916 > 0.0)
        {
            _1177 = abs((1.0 - _905) / _916);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_916 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_905 + 1.0) / _916);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1177 = frontier_phi_25_21_ladder;
        }
        float _1358;
        if (_919 > 0.0)
        {
            _1358 = abs((1.0 - _909) / _919);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_919 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_909 + 1.0) / _919);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1358 = frontier_phi_37_32_ladder;
        }
        float _1426;
        if (_922 > 0.0)
        {
            _1426 = abs((1.0 - _913) / _922);
        }
        else
        {
            float frontier_phi_43_42_ladder;
            if (_922 < 0.0)
            {
                frontier_phi_43_42_ladder = abs((_913 + 1.0) / _922);
            }
            else
            {
                frontier_phi_43_42_ladder = 5000.0;
            }
            _1426 = frontier_phi_43_42_ladder;
        }
        float _1428 = isnan(_1358) ? _1177 : (isnan(_1177) ? _1358 : min(_1177, _1358));
        float _1429 = isnan(_1426) ? _1428 : (isnan(_1428) ? _1426 : min(_1428, _1426));
        float _1433 = (_1429 * _916) + _905;
        float _1434 = (_1429 * _919) + _909;
        float _1435 = (_1429 * _922) + _913;
        float _1436 = _1429 * 9.9999997473787516355514526367188e-05;
        float _1437 = (-1.0) - _1436;
        float _1439 = _1436 + 1.0;
        float frontier_phi_22_43_ladder;
        float frontier_phi_22_43_ladder_1;
        float frontier_phi_22_43_ladder_2;
        if ((_1435 > _1439) || ((_1435 < _1437) || ((_1434 > _1439) || ((_1434 < _1437) || ((_1433 < _1437) || (_1433 > _1439))))))
        {
            frontier_phi_22_43_ladder = 0.0;
            frontier_phi_22_43_ladder_1 = 0.0;
            frontier_phi_22_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1468 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1435, cbModelParam._m0[17u].z, fma(_1434, cbModelParam._m0[17u].y, _1433 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1435, cbModelParam._m0[18u].z, fma(_1434, cbModelParam._m0[18u].y, _1433 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1435, cbModelParam._m0[19u].z, fma(_1434, cbModelParam._m0[19u].y, _1433 * cbModelParam._m0[19u].x))), _848);
            frontier_phi_22_43_ladder = _1468.y * cbModelParam._m0[1u].z;
            frontier_phi_22_43_ladder_1 = _1468.x * cbModelParam._m0[1u].z;
            frontier_phi_22_43_ladder_2 = _1468.z * cbModelParam._m0[1u].z;
        }
        _941 = frontier_phi_22_43_ladder_1;
        _943 = frontier_phi_22_43_ladder;
        _945 = frontier_phi_22_43_ladder_2;
    }
    else
    {
        vec4 _925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_292, _293, _294), _848);
        _941 = _925.x * cbModelParam._m0[1u].z;
        _943 = _925.y * cbModelParam._m0[1u].z;
        _945 = _925.z * cbModelParam._m0[1u].z;
    }
    float _957 = _283 * 0.01200000010430812835693359375;
    float _959 = _957 * ((cbModelParam._m0[1u].w * (_941 - _841)) + _841);
    float _960 = _957 * ((cbModelParam._m0[1u].w * (_943 - _843)) + _843);
    float _961 = _957 * ((cbModelParam._m0[1u].w * (_945 - _845)) + _845);
    float _982 = fma(_961, cbSceneParam._m0[89u].z, fma(_960, cbSceneParam._m0[89u].y, _959 * cbSceneParam._m0[89u].x));
    float _985 = fma(_961, cbSceneParam._m0[90u].z, fma(_960, cbSceneParam._m0[90u].y, _959 * cbSceneParam._m0[90u].x));
    float _988 = fma(_961, cbSceneParam._m0[91u].z, fma(_960, cbSceneParam._m0[91u].y, _959 * cbSceneParam._m0[91u].x));
    vec4 _996 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_270, _271));
    float _998 = _996.w;
    uint _1013 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1020 = floatBitsToUint(cbInstanceData._m0[_1013 + 5u]).x * 14u;
    float _1028 = (cbLight._m0[_1020 + 13u].x * (_283 + (-1.0))) + 1.0;
    uint _1029 = _1020 + 8u;
    float _1040 = cbLight._m0[_1020].x + _262;
    float _1041 = cbLight._m0[_1020].y + _263;
    float _1042 = cbLight._m0[_1020].z + _264;
    float _1046 = inversesqrt(dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042)));
    float _1050 = dot(vec3(_186, _187, _188), vec3(cbLight._m0[_1020].xyz));
    float _1655 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _1655 : (isnan(_1655) ? 1.0 : min(_1655, 1.0));
    float _1666 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _1055 = dot(vec3(cbLight._m0[_1020].xyz), vec3(_1040 * _1046, _1041 * _1046, _1042 * _1046));
    float _1677 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1066 = (exp2(log2(1.0 - (isnan(1.0) ? _1677 : (isnan(_1677) ? 1.0 : min(_1677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1072 = (0.5 / ((_1053 + 9.9999999392252902907785028219223e-09) + (isnan(1.0) ? _1666 : (isnan(_1666) ? 1.0 : min(_1666, 1.0))))) * _1053;
    float _1688 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1074 = (isnan(1.0) ? _1688 : (isnan(_1688) ? 1.0 : min(_1688, 1.0))) * 0.31831014156341552734375;
    float _1076 = isnan(1.0) ? _1028 : (isnan(_1028) ? 1.0 : min(_1028, 1.0));
    uint _1097 = (_1013 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1105 = ((cbMtdParam._m0[9u].x * cbMtdParam._m0[10u].x) * _176.x) * cbInstanceData._m0[_1097].x;
    float _1108 = ((cbMtdParam._m0[9u].y * cbMtdParam._m0[10u].x) * _176.y) * cbInstanceData._m0[_1097].y;
    float _1111 = ((cbMtdParam._m0[9u].z * cbMtdParam._m0[10u].x) * _176.z) * cbInstanceData._m0[_1097].z;
    float _1118 = _1105 + ((((((cbLight._m0[_1029].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _998))) * _1066) * _1074) * _1076) + ((isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0))) * _751)) * cbPerFrame._m0[3u].x);
    float _1119 = _1108 + ((((((cbLight._m0[_1029].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _998))) * _1066) * _1074) * _1076) + ((isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0))) * _751)) * cbPerFrame._m0[3u].x);
    float _1120 = _1111 + ((((((cbLight._m0[_1029].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _998))) * _1066) * _1074) * _1076) + ((isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0))) * _751)) * cbPerFrame._m0[3u].x);
    float _1719 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _1133 = isnan(1.0) ? _1719 : (isnan(_1719) ? 1.0 : min(_1719, 1.0));
    uint _1134 = _1013 + 6u;
    float _1143 = _270 / cbSceneParam._m0[86u].x;
    float _1144 = _271 / cbSceneParam._m0[86u].y;
    vec4 _1158 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1143, _1144, (log2((isnan(cbSceneParam._m0[77u].w) ? _204 : (isnan(_204) ? cbSceneParam._m0[77u].w : min(_204, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1160 = _1158.x;
    float _1161 = _1158.y;
    float _1162 = _1158.z;
    float _1163 = _1158.w;
    float _1225;
    float _1227;
    float _1229;
    float _1231;
    if (_204 > cbSceneParam._m0[78u].w)
    {
        float _1186 = isnan(_204) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _204 : min(cbSceneParam._m0[80u].w, _204));
        float _1187 = _1186 / _204;
        float _1198 = _1187 * _255;
        float _1199 = _256 * _1187;
        float _1200 = (-0.0) - _1199;
        float _1202 = _1187 * _257;
        float _1204 = (cbSceneParam._m0[77u].w * _1200) / _1186;
        float _1205 = _1204 + cbSceneParam._m0[79u].w;
        float _1206 = cbSceneParam._m0[79u].w - _1199;
        float _1212 = sqrt(((_1198 * _1198) + (_1199 * _1199)) + (_1202 * _1202));
        float _1215 = (1.0 - (cbSceneParam._m0[77u].w / _1186)) * _1212;
        float _1221 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1223 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1363;
        if (abs((_1200 - _1204) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1363 = ((((_1205 > 0.0) ? exp2(_1221 * _1205) : (2.0 - exp2(_1223 * _1205))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1215;
        }
        else
        {
            float _1305 = 1.0 / cbSceneParam._m0[80u].x;
            float _1306 = isnan(_1206) ? _1205 : (isnan(_1205) ? _1206 : max(_1205, _1206));
            float _1307 = isnan(_1206) ? _1205 : (isnan(_1205) ? _1206 : min(_1205, _1206));
            float _1316 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : min(_1306, 0.0));
            float _1317 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : min(_1307, 0.0));
            _1363 = ((abs(_1212 / _1200) * cbSceneParam._m0[80u].y) * ((((_1316 - _1317) * 2.0) - ((exp2(_1221 * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)))) - exp2(_1221 * (isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0))))) * _1305)) - ((exp2(_1223 * _1316) - exp2(_1223 * _1317)) * _1305))) + (_1215 * cbSceneParam._m0[80u].z);
        }
        vec4 _1365 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1143, _1144, 1.0), 0.0);
        float _1374 = exp2((_1363 * (-1.44269502162933349609375)) * (1.0 - _1365.w));
        float _1375 = log2(_1374);
        float _1391 = log2(_1163);
        _1225 = (exp2(_1391 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1375 * cbSceneParam._m0[78u].x)) * _1365.x) / cbSceneParam._m0[78u].x)) + _1160;
        _1227 = (exp2(_1391 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1375 * cbSceneParam._m0[78u].y)) * _1365.y) / cbSceneParam._m0[78u].y)) + _1161;
        _1229 = (exp2(_1391 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1375 * cbSceneParam._m0[78u].z)) * _1365.z) / cbSceneParam._m0[78u].z)) + _1162;
        _1231 = _1374 * _1163;
    }
    else
    {
        _1225 = _1160;
        _1227 = _1161;
        _1229 = _1162;
        _1231 = _1163;
    }
    float _1243 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1244 = _1243 == 3.0;
    float _1246 = log2(_1231);
    float _1250 = exp2(_1246 * cbSceneParam._m0[78u].x);
    float _1251 = exp2(_1246 * cbSceneParam._m0[78u].y);
    float _1252 = exp2(_1246 * cbSceneParam._m0[78u].z);
    float _1253 = _1250 * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    float _1254 = _1251 * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    float _1255 = _1252 * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    float _1264 = (_1243 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1264 * (_1244 ? _1253 : (_1253 + (cbSceneParam._m0[72u].w * _1225)));
    SV_Target.y = _1264 * (_1244 ? _1254 : (_1254 + (cbSceneParam._m0[72u].w * _1227)));
    SV_Target.z = _1264 * (_1244 ? _1255 : (_1255 + (cbSceneParam._m0[72u].w * _1229)));
    SV_Target.w = cbInstanceData._m0[_1134].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _1105) * _1133) * _1250) * _1264;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _1108) * _1133) * _1251) * _1264;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _1111) * _1133) * _1252) * _1264;
    SV_Target_1.w = cbInstanceData._m0[_1134].w;
}


