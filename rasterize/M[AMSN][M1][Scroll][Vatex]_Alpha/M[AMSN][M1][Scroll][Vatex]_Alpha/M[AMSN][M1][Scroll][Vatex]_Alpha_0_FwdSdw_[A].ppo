#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _910;
float _3585;
float _3586;
float _3587;
float _3588;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _193 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _194 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _195 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_193, _194, _195), vec3(_193, _194, _195)));
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _223;
    float _224;
    float _225;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _223 = (-0.0) - _209;
        _224 = (-0.0) - _210;
        _225 = (-0.0) - _211;
    }
    else
    {
        _223 = _209;
        _224 = _210;
        _225 = _211;
    }
    float _239 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _240 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_239 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_240 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _259 = _253.w;
    float _260 = _253.x * cbMtdParam._m0[9u].x;
    float _261 = _253.y * cbMtdParam._m0[9u].y;
    float _262 = _253.z * cbMtdParam._m0[9u].z;
    float _263 = _259 * TEXCOORD_1.z;
    vec4 _275 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _239) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _240) + cbTextureTilingScale._m0[2u].w));
    float _279 = cbMtdParam._m0[10u].x + _275.x;
    vec4 _291 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _239) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _240) + cbTextureTilingScale._m0[1u].w));
    float _295 = _291.z;
    float _299 = (_291.x * 2.0) + (-1.0);
    float _301 = (_291.y * 2.0) + (-1.0);
    float _302 = dot(vec2(_299, _301), vec2(_299, _301));
    float _3597 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _308 = sqrt(1.0 - (isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))));
    float _311 = fma(_308, _223, fma(_301, _215 * TANGENT.x, (_201 * _193) * _299));
    float _314 = fma(_308, _224, fma(_301, _215 * TANGENT.y, (_201 * _194) * _299));
    float _317 = fma(_308, _225, fma(_301, _215 * TANGENT.z, (_201 * _195) * _299));
    float _321 = inversesqrt(dot(vec3(_311, _314, _317), vec3(_311, _314, _317)));
    float _322 = _321 * _311;
    float _323 = _321 * _314;
    float _324 = _321 * _317;
    float _3608 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _325 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
    float _3619 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _326 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
    float _3630 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3641 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3652 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _3663 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _330 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
    float _346 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _387 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _397 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _387);
    float _398 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _387);
    float _399 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _387);
    float _403 = inversesqrt(dot(vec3(_397, _398, _399), vec3(_397, _398, _399)));
    float _404 = _397 * _403;
    float _405 = _398 * _403;
    float _406 = _399 * _403;
    vec4 _411 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _413 = _411.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _589 = sqrt(((_397 * _397) + (_398 * _398)) + (_399 * _399));
        float _595 = (cbMatDynParam._m0[5u].x * _589) + cbMatDynParam._m0[5u].y;
        float _3674 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
        float _596 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _600 = (cbMatDynParam._m0[5u].z * _589) + cbMatDynParam._m0[5u].w;
        float _3685 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) - _596)) + _596) < ((_413 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _425 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _426 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _446 = fma(_324, cbSceneParam._m0[5u].z, fma(_323, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _322));
    float _449 = fma(_324, cbSceneParam._m0[6u].z, fma(_323, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _322));
    float _452 = fma(_324, cbSceneParam._m0[7u].z, fma(_323, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _322));
    uint _465 = uint(roundEven(NORMAL.w)) * 13u;
    uint _467 = _465 + 9u;
    uint _468 = _467 + uint(cbMatDynParam._m0[0u].w);
    float _474 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0)))) * cbInstanceData._m0[_468].x;
    float _475 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0)))) * cbInstanceData._m0[_468].y;
    float _476 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0)))) * cbInstanceData._m0[_468].z;
    float _3696 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _3707 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _478 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _3718 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _479 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _480 = 1.0 - _330;
    float _481 = _477 * _480;
    float _482 = _478 * _480;
    float _483 = _479 * _480;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _330;
    float _489 = (_478 + (-0.039999999105930328369140625)) * _330;
    float _490 = (_479 + (-0.039999999105930328369140625)) * _330;
    float _491 = _488 + 0.039999999105930328369140625;
    float _493 = _489 + 0.039999999105930328369140625;
    float _494 = _490 + 0.039999999105930328369140625;
    vec4 _503 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _425, cbSceneParam._m0[86u].y * _426));
    float _506 = _503.x * TEXCOORD_1.w;
    float _507 = dot(vec3(_322, _323, _324), vec3(_404, _405, _406));
    float _510 = _507 * 2.0;
    float _514 = (_510 * _322) - _404;
    float _515 = (_510 * _323) - _405;
    float _516 = (_510 * _324) - _406;
    float _520 = abs(dot(vec3(_404, _405, _406), vec3(_322, _323, _324)));
    float _3729 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _522 = sqrt(_326);
    float _535 = exp2((_522 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_522 * 3.0));
    float _541 = (1.0 - _535) * ((_522 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _542 = _535 * _522;
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _578 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _909;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _634 = fma(_578, cbModelParam._m0[26u].z, fma(_574, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570));
        float _638 = fma(_578, cbModelParam._m0[27u].z, fma(_574, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570));
        float _642 = fma(_578, cbModelParam._m0[28u].z, fma(_574, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570));
        float _667 = _570 + _322;
        float _668 = _574 + _323;
        float _669 = _578 + _324;
        float _679 = fma(_669, cbModelParam._m0[26u].z, fma(_668, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _667)) - _634;
        float _680 = fma(_669, cbModelParam._m0[27u].z, fma(_668, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _667)) - _638;
        float _681 = fma(_669, cbModelParam._m0[28u].z, fma(_668, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _667)) - _642;
        float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
        float _698 = ((_685 * _679) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_634 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _699 = ((_685 * _680) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_638 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _700 = ((_685 * _681) / cbModelParam._m0[34u].z) + ((((((_642 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_698, _699, _700), 0.0);
        float _737 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _738 = _737 * (_703.x + (-0.5));
        float _739 = _737 * (_703.y + (-0.5));
        float _740 = _737 * (_703.z + (-0.5));
        float _747 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_710.x + (-0.5));
        float _749 = _747 * (_710.y + (-0.5));
        float _750 = _747 * (_710.z + (-0.5));
        float _757 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_717.x + (-0.5));
        float _759 = _757 * (_717.y + (-0.5));
        float _760 = _757 * (_717.z + (-0.5));
        float _767 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_724.x + (-0.5));
        float _769 = _767 * (_724.y + (-0.5));
        float _770 = _767 * (_724.z + (-0.5));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _773 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _774 = _738 * 0.5;
        float _775 = _748 * 0.5;
        float _776 = _758 * 0.5;
        float _777 = dot(vec3(_774, _775, _776), vec3(_774, _775, _776));
        float _782 = (_777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_777);
        float _791 = (dot(vec3(_322, _323, _324), vec3(_782 * _774, _782 * _775, _782 * _776)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _801 = sqrt(((_775 * _775) + (_774 * _774)) + (_776 * _776)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3777 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_803 + 1.0))) + _808) * _771;
        float _818 = _739 * 0.5;
        float _819 = _749 * 0.5;
        float _820 = _759 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_322, _323, _324), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_772 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3810 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_845 + 1.0))) + _850) * _772;
        float _860 = _740 * 0.5;
        float _861 = _750 * 0.5;
        float _862 = _760 * 0.5;
        float _863 = dot(vec3(_860, _861, _862), vec3(_860, _861, _862));
        float _868 = (_863 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_863);
        float _876 = (dot(vec3(_322, _323, _324), vec3(_868 * _860, _868 * _861, _868 * _862)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _885 = sqrt(((_861 * _861) + (_860 * _860)) + (_862 * _862)) / (_773 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _887 = _886 * 2.0;
        float _891 = (1.0 - _886) / (_886 + 1.0);
        float _3843 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _901 = ((((1.0 - _892) * (_887 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_887 + 1.0))) + _892) * _773;
        _909 = _740;
        _911 = _739;
        _912 = _738;
        _913 = _750;
        _914 = _749;
        _915 = _748;
        _916 = _760;
        _917 = _759;
        _918 = _758;
        _919 = _773;
        _920 = _772;
        _921 = _771;
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _923 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
        _924 = cbModelParam._m0[36u].z * (isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0)));
    }
    else
    {
        _909 = _910;
        _911 = _910;
        _912 = _910;
        _913 = _910;
        _914 = _910;
        _915 = _910;
        _916 = _910;
        _917 = _910;
        _918 = _910;
        _919 = _910;
        _920 = _910;
        _921 = _910;
        _922 = 0.0;
        _923 = 0.0;
        _924 = 0.0;
    }
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _953 = fma(_578, cbModelParam._m0[30u].z, fma(_574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _570));
        float _957 = fma(_578, cbModelParam._m0[31u].z, fma(_574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _570));
        float _961 = fma(_578, cbModelParam._m0[32u].z, fma(_574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _570));
        float _984 = _570 + _322;
        float _985 = _574 + _323;
        float _986 = _578 + _324;
        float _996 = fma(_986, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _984)) - _953;
        float _997 = fma(_986, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _984)) - _957;
        float _998 = fma(_986, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _984)) - _961;
        float _1002 = inversesqrt(dot(vec3(_996, _997, _998), vec3(_996, _997, _998)));
        float _1015 = ((_1002 * _996) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_953 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1016 = ((_1002 * _997) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_957 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1017 = ((_1002 * _998) / cbModelParam._m0[35u].z) + ((((((_961 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1015, _1016, _1017), 0.0);
        float _1052 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1019.x + (-0.5));
        float _1054 = _1052 * (_1019.y + (-0.5));
        float _1055 = _1052 * (_1019.z + (-0.5));
        float _1062 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1026.x + (-0.5));
        float _1064 = _1062 * (_1026.y + (-0.5));
        float _1065 = _1062 * (_1026.z + (-0.5));
        float _1072 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1033.x + (-0.5));
        float _1074 = _1072 * (_1033.y + (-0.5));
        float _1075 = _1072 * (_1033.z + (-0.5));
        float _1082 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1040.x + (-0.5));
        float _1084 = _1082 * (_1040.y + (-0.5));
        float _1085 = _1082 * (_1040.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_322, _323, _324), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3906 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1116 + 1.0))) + _1121) * _1086;
        float _1131 = _1054 * 0.5;
        float _1132 = _1064 * 0.5;
        float _1133 = _1074 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_322, _323, _324), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3939 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1158 + 1.0))) + _1163) * _1087;
        float _1173 = _1055 * 0.5;
        float _1174 = _1065 * 0.5;
        float _1175 = _1075 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_322, _323, _324), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3972 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1200 + 1.0))) + _1205) * _1088;
        _1222 = _1055;
        _1223 = _1054;
        _1224 = _1053;
        _1225 = _1065;
        _1226 = _1064;
        _1227 = _1063;
        _1228 = _1075;
        _1229 = _1074;
        _1230 = _1073;
        _1231 = _1088;
        _1232 = _1087;
        _1233 = _1086;
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1235 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
    }
    else
    {
        _1222 = _910;
        _1223 = _910;
        _1224 = _910;
        _1225 = _910;
        _1226 = _910;
        _1227 = _910;
        _1228 = _910;
        _1229 = _910;
        _1230 = _910;
        _1231 = _910;
        _1232 = _910;
        _1233 = _910;
        _1234 = 0.0;
        _1235 = 0.0;
        _1236 = 0.0;
    }
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1247 = (cbModelParam._m0[1u].x * (_1235 - _923)) + _923;
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _924)) + _924;
    float _1269 = fma(_1248, cbSceneParam._m0[89u].z, fma(_1247, cbSceneParam._m0[89u].y, _1246 * cbSceneParam._m0[89u].x));
    float _1272 = fma(_1248, cbSceneParam._m0[90u].z, fma(_1247, cbSceneParam._m0[90u].y, _1246 * cbSceneParam._m0[90u].x));
    float _1275 = fma(_1248, cbSceneParam._m0[91u].z, fma(_1247, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1246));
    float _1290 = _514 * 0.5;
    float _1291 = _515 * 0.5;
    float _1292 = _516 * 0.5;
    float _1293 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1296 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1223, _1226, _1229, _1232));
    float _1299 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1333;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1306 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_909, _913, _916, _919));
        float _1310 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_911, _914, _917, _920));
        float _1314 = dot(vec4(_1290, _1291, _1292, 1.0), vec4(_912, _915, _918, _921));
        float _1321 = dot(vec4(cbModelParam._m0[39u]), vec4(_1290, _1291, _1292, 1.0));
        _1333 = dot(vec3(isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1321) ? 0.0 : (isnan(0.0) ? _1321 : max(0.0, _1321))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1333 = 1.0;
    }
    float _1344;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1335 = dot(vec4(cbModelParam._m0[40u]), vec4(_1290, _1291, _1292, 1.0));
        _1344 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1335) ? 0.0 : (isnan(0.0) ? _1335 : max(0.0, _1335))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1344 = 1.0;
    }
    float _1348 = (_1344 * cbModelParam._m0[1u].x) + (_1333 * (1.0 - cbModelParam._m0[1u].x));
    float _1358 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _326);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1358 : min(cbModelParam._m0[25u].z, _1358));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_578, cbModelParam._m0[13u].z, fma(_574, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _570)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_578, cbModelParam._m0[14u].z, fma(_574, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _570)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_578, cbModelParam._m0[15u].z, fma(_574, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _570)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_516, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514));
        float _1422 = fma(_516, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514));
        float _1425 = fma(_516, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514));
        float _1453;
        if (_1419 > 0.0)
        {
            _1453 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1453 = frontier_phi_19_17_ladder;
        }
        float _1628;
        if (_1422 > 0.0)
        {
            _1628 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1628 = frontier_phi_28_24_ladder;
        }
        float _1924;
        if (_1425 > 0.0)
        {
            _1924 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1924 = frontier_phi_40_35_ladder;
        }
        float _1926 = isnan(_1628) ? _1453 : (isnan(_1453) ? _1628 : min(_1453, _1628));
        float _1927 = isnan(_1924) ? _1926 : (isnan(_1926) ? _1924 : min(_1926, _1924));
        float _1931 = (_1927 * _1419) + _1408;
        float _1932 = (_1927 * _1422) + _1412;
        float _1933 = (_1927 * _1425) + _1416;
        float _1934 = _1927 * 9.9999997473787516355514526367188e-05;
        float _1936 = (-1.0) - _1934;
        float _1938 = _1934 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1933 > _1938) || ((_1933 < _1936) || ((_1932 > _1938) || ((_1932 < _1936) || ((_1931 < _1936) || (_1931 > _1938))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1933, cbModelParam._m0[9u].z, fma(_1932, cbModelParam._m0[9u].y, _1931 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1933, cbModelParam._m0[10u].z, fma(_1932, cbModelParam._m0[10u].y, _1931 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1933, cbModelParam._m0[11u].z, fma(_1932, cbModelParam._m0[11u].y, _1931 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_18_40_ladder = _2078.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2078.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2078.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_18_40_ladder_2;
        _1443 = frontier_phi_18_40_ladder_1;
        _1445 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_514, _515, _516), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1449 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _326);
    float _1450 = isnan(_1449) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1449 : min(cbModelParam._m0[25u].w, _1449));
    float _1542;
    float _1544;
    float _1546;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1506 = fma(_578, cbModelParam._m0[21u].z, fma(_574, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _570)) + cbModelParam._m0[21u].w;
        float _1510 = fma(_578, cbModelParam._m0[22u].z, fma(_574, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _570)) + cbModelParam._m0[22u].w;
        float _1514 = fma(_578, cbModelParam._m0[23u].z, fma(_574, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _570)) + cbModelParam._m0[23u].w;
        float _1517 = fma(_516, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514));
        float _1520 = fma(_516, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514));
        float _1523 = fma(_516, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514));
        float _1633;
        if (_1517 > 0.0)
        {
            _1633 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1633 = frontier_phi_30_26_ladder;
        }
        float _1951;
        if (_1520 > 0.0)
        {
            _1951 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1951 = frontier_phi_42_37_ladder;
        }
        float _2289;
        if (_1523 > 0.0)
        {
            _2289 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2289 = frontier_phi_52_49_ladder;
        }
        float _2291 = isnan(_1951) ? _1633 : (isnan(_1633) ? _1951 : min(_1633, _1951));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1517) + _1506;
        float _2297 = (_2292 * _1520) + _1510;
        float _2298 = (_2292 * _1523) + _1514;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2299;
        float _2302 = _2299 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2298 > _2302) || ((_2298 < _2300) || ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 < _2300) || (_2296 > _2302))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2298, cbModelParam._m0[17u].z, fma(_2297, cbModelParam._m0[17u].y, _2296 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2298, cbModelParam._m0[18u].z, fma(_2297, cbModelParam._m0[18u].y, _2296 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2298, cbModelParam._m0[19u].z, fma(_2297, cbModelParam._m0[19u].y, _2296 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_27_52_ladder = _2420.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2420.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2420.x * cbModelParam._m0[1u].z;
        }
        _1542 = frontier_phi_27_52_ladder_2;
        _1544 = frontier_phi_27_52_ladder_1;
        _1546 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1526 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_514, _515, _516), _1450);
        _1542 = _1526.x * cbModelParam._m0[1u].z;
        _1544 = _1526.y * cbModelParam._m0[1u].z;
        _1546 = _1526.z * cbModelParam._m0[1u].z;
    }
    float _1559 = (((_541 * _491) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1542 - _1441)) + _1441);
    float _1561 = (((_541 * _493) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1544 - _1443)) + _1443);
    float _1563 = (((_541 * _494) + _542) * _506) * ((cbModelParam._m0[1u].w * (_1546 - _1445)) + _1445);
    float _1566 = fma(_1563, cbSceneParam._m0[89u].z, fma(_1561, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1569 = fma(_1563, cbSceneParam._m0[90u].z, fma(_1561, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1572 = fma(_1563, cbSceneParam._m0[91u].z, fma(_1561, cbSceneParam._m0[91u].y, _1559 * cbSceneParam._m0[91u].x));
    float _1607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1611 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1615 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1619 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1620 = _1607 / _1619;
    float _1621 = _1611 / _1619;
    float _1622 = _1615 / _1619;
    float _1769;
    float _1770;
    float _1771;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1649 = ((uint(_1622 > cbSceneParam._m0[59u].y) + uint(_1622 > cbSceneParam._m0[59u].x)) + uint(_1622 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1650 = _1649 + 43u;
        uint _1658 = _1649 + 44u;
        uint _1666 = _1649 + 45u;
        uint _1674 = _1649 + 46u;
        float _1685 = fma(_1619, cbSceneParam._m0[_1650].w, fma(_1615, cbSceneParam._m0[_1650].z, fma(_1611, cbSceneParam._m0[_1650].y, _1607 * cbSceneParam._m0[_1650].x)));
        float _1689 = fma(_1619, cbSceneParam._m0[_1658].w, fma(_1615, cbSceneParam._m0[_1658].z, fma(_1611, cbSceneParam._m0[_1658].y, _1607 * cbSceneParam._m0[_1658].x)));
        float _1697 = fma(_1619, cbSceneParam._m0[_1674].w, fma(_1615, cbSceneParam._m0[_1674].z, fma(_1611, cbSceneParam._m0[_1674].y, _1607 * cbSceneParam._m0[_1674].x)));
        float _1702 = cbSceneParam._m0[33u].z * _1697;
        float _1704 = cbSceneParam._m0[33u].w * _1697;
        float _1707 = fma(_1619, cbSceneParam._m0[_1666].w, fma(_1615, cbSceneParam._m0[_1666].z, fma(_1611, cbSceneParam._m0[_1666].y, _1607 * cbSceneParam._m0[_1666].x))) / _1697;
        float _1755 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
        float _4098 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1762 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1685) / _1697, (_1704 + _1689) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1704 + _1685) / _1697, (_1689 - _1702) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1702) / _1697, (_1689 - _1704) / _1697), _1707), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 - _1704) / _1697, (_1702 + _1689) / _1697), _1707), 0.0)).x), vec4(0.25)));
        _1769 = 1.0 - (_1762 * cbSceneParam._m0[34u].x);
        _1770 = 1.0 - (_1762 * cbSceneParam._m0[34u].y);
        _1771 = 1.0 - (_1762 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1769 = 1.0;
        _1770 = 1.0;
        _1771 = 1.0;
    }
    float _1835;
    float _1837;
    float _1839;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1823 = fma(_1619, cbSceneParam._m0[63u].w, fma(_1615, cbSceneParam._m0[63u].z, fma(_1611, cbSceneParam._m0[63u].y, _1607 * cbSceneParam._m0[63u].x)));
        float _1824 = fma(_1619, cbSceneParam._m0[60u].w, fma(_1615, cbSceneParam._m0[60u].z, fma(_1611, cbSceneParam._m0[60u].y, _1607 * cbSceneParam._m0[60u].x))) / _1823;
        float _1825 = fma(_1619, cbSceneParam._m0[61u].w, fma(_1615, cbSceneParam._m0[61u].z, fma(_1611, cbSceneParam._m0[61u].y, _1607 * cbSceneParam._m0[61u].x))) / _1823;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1824 >= cbSceneParam._m0[64u].x) && (_1825 >= cbSceneParam._m0[64u].y)) && (_1824 <= cbSceneParam._m0[64u].z)) && (_1825 <= cbSceneParam._m0[64u].w))
        {
            float _1964 = fma(_1619, cbSceneParam._m0[62u].w, fma(_1615, cbSceneParam._m0[62u].z, fma(_1611, cbSceneParam._m0[62u].y, _1607 * cbSceneParam._m0[62u].x))) / _1823;
            float _1968 = isnan(cbSceneParam._m0[41u].w) ? _1964 : (isnan(_1964) ? cbSceneParam._m0[41u].w : max(_1964, cbSceneParam._m0[41u].w));
            float _2011 = (cbSceneParam._m0[33u].x - sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622))) * cbSceneParam._m0[33u].y;
            float _4114 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
            float _2018 = (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1824, cbSceneParam._m0[33u].w + _1825), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1824, _1825 - cbSceneParam._m0[33u].z), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].z, _1825 - cbSceneParam._m0[33u].w), _1968), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1824 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1825), _1968), 0.0)).x), vec4(0.25)));
            float _2022 = 1.0 - (_2018 * cbSceneParam._m0[34u].x);
            float _2023 = 1.0 - (_2018 * cbSceneParam._m0[34u].y);
            float _2024 = 1.0 - (_2018 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2023) ? _1770 : (isnan(_1770) ? _2023 : min(_1770, _2023));
            frontier_phi_39_38_ladder_1 = isnan(_2022) ? _1769 : (isnan(_1769) ? _2022 : min(_1769, _2022));
            frontier_phi_39_38_ladder_2 = isnan(_2024) ? _1771 : (isnan(_1771) ? _2024 : min(_1771, _2024));
        }
        else
        {
            frontier_phi_39_38_ladder = _1770;
            frontier_phi_39_38_ladder_1 = _1769;
            frontier_phi_39_38_ladder_2 = _1771;
        }
        _1835 = frontier_phi_39_38_ladder_1;
        _1837 = frontier_phi_39_38_ladder;
        _1839 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1835 = _1769;
        _1837 = _1770;
        _1839 = _1771;
    }
    uvec4 _1844 = floatBitsToUint(cbInstanceData._m0[_465 + 5u]);
    uint _1846 = _1844.x * 14u;
    uint _1847 = _1846 + 13u;
    float _1854 = _506 + (-1.0);
    float _1859 = (cbLight._m0[_1847].x * _1854) + 1.0;
    float _1860 = (cbLight._m0[_1847].y * _1854) + 1.0;
    float _1861 = (cbLight._m0[_1847].z * _1854) + 1.0;
    float _1862 = (cbLight._m0[_1847].w * _1854) + 1.0;
    uint _1863 = _1846 + 5u;
    float _1869 = isnan(1.0) ? _1860 : (isnan(_1860) ? 1.0 : min(_1860, 1.0));
    uint _1873 = _1846 + 4u;
    float _1883 = isnan(1.0) ? _1859 : (isnan(_1859) ? 1.0 : min(_1859, 1.0));
    uint _1887 = _1846 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_322, _323, _324));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_322, _323, _324));
    float _4150 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4161 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1863].x * _1869) * _1908) + (((cbLight._m0[_1873].x * _1835) * _1883) * _1906);
    float _1916 = ((_1869 * cbLight._m0[_1863].y) * _1908) + (((cbLight._m0[_1873].y * _1837) * _1883) * _1906);
    float _1917 = ((_1869 * cbLight._m0[_1863].z) * _1908) + (((cbLight._m0[_1873].z * _1839) * _1883) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1846 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _2025;
    float _2027;
    float _2029;
    if (_1923)
    {
        _2025 = _1915;
        _2027 = _1916;
        _2029 = _1917;
    }
    else
    {
        uint _2033 = _1846 + 6u;
        float _2049 = (dot(vec3(cbLight._m0[_1846 + 2u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2050 = _2049 * _2049;
        float _4172 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2051 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _2052 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2025 = (((cbLight._m0[_2033].x * 0.3183098733425140380859375) * _2051) * _2052) + _1915;
        _2027 = (((cbLight._m0[_2033].y * 0.3183098733425140380859375) * _2051) * _2052) + _1916;
        _2029 = (((cbLight._m0[_2033].z * 0.3183098733425140380859375) * _2051) * _2052) + _1917;
    }
    bool _2032 = _1921.y == 0u;
    float _2087;
    float _2089;
    float _2091;
    if (_2032)
    {
        _2087 = _2025;
        _2089 = _2027;
        _2091 = _2029;
    }
    else
    {
        uint _2260 = _1846 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1846 + 3u].xyz), vec3(_322, _323, _324)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4188 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2279 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2087 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2025;
        _2089 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2027;
        _2091 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2029;
    }
    uint _2094 = _1846 + 8u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1846].w)) * _326) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1846].x + _404;
    float _2110 = cbLight._m0[_1846].y + _405;
    float _2111 = cbLight._m0[_1846].z + _406;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1846].xyz));
    float _4204 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _2123 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2124 = dot(vec3(_322, _323, _324), vec3(_2116, _2117, _2118));
    float _4226 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2128 = dot(vec3(cbLight._m0[_1846].xyz), vec3(_2116, _2117, _2118));
    float _4237 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2132 = _2108 * _2108;
    float _2136 = ((_2127 * _2127) * (_2132 + (-1.0))) + 1.0;
    float _2144 = exp2(log2(1.0 - (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * 5.0);
    float _2145 = 0.959999978542327880859375 - _488;
    float _2147 = 0.959999978542327880859375 - _489;
    float _2148 = 0.959999978542327880859375 - _490;
    float _2155 = 1.0 - _2108;
    float _2166 = (0.5 / (((_2123 * ((_2122 * _2155) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2155) + _2108) * _2122))) * _2122;
    float _4248 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2168 = (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_2132 / ((_2136 * _2136) * 3.141590118408203125));
    uint _2182 = _1846 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _326) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1887].x + _404;
    float _2196 = cbLight._m0[_1887].y + _405;
    float _2197 = cbLight._m0[_1887].z + _406;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_1887].xyz));
    float _4259 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2209 = dot(vec3(_322, _323, _324), vec3(_2202, _2203, _2204));
    float _4270 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2202, _2203, _2204));
    float _4281 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2123 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2235) + _2194) * _2208))) * _2208;
    float _4292 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2145) + _491) * cbLight._m0[_2182].x) * _2247) * _1869) + ((((cbLight._m0[_2094].x * _1835) * ((_2144 * _2145) + _491)) * _2168) * _1883);
    float _2258 = (((((_2228 * _2147) + _493) * cbLight._m0[_2182].y) * _2247) * _1869) + ((((cbLight._m0[_2094].y * _1837) * ((_2144 * _2147) + _493)) * _2168) * _1883);
    float _2259 = (((((_2228 * _2148) + _494) * cbLight._m0[_2182].z) * _2247) * _1869) + ((((cbLight._m0[_2094].z * _1839) * ((_2144 * _2148) + _494)) * _2168) * _1883);
    float _2315;
    float _2317;
    float _2319;
    if (_1923)
    {
        _2315 = _2257;
        _2317 = _2258;
        _2319 = _2259;
    }
    else
    {
        uint _2321 = _1846 + 2u;
        uint _2325 = _1846 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _326) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _404;
        float _2342 = cbLight._m0[_2321].y + _405;
        float _2343 = cbLight._m0[_2321].z + _406;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2321].xyz));
        float _4303 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2355 = dot(vec3(_322, _323, _324), vec3(_2348, _2349, _2350));
        float _4314 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4325 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2123 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2381) + _2340) * _2354))) * _2354;
        float _4336 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1861 : (isnan(_1861) ? 1.0 : min(_1861, 1.0));
        _2315 = (((((_2374 * _2145) + _491) * cbLight._m0[_2325].x) * _2393) * _2394) + _2257;
        _2317 = (((((_2374 * _2147) + _493) * cbLight._m0[_2325].y) * _2393) * _2394) + _2258;
        _2319 = (((((_2374 * _2148) + _494) * cbLight._m0[_2325].z) * _2393) * _2394) + _2259;
    }
    float _2425;
    float _2427;
    float _2429;
    if (_2032)
    {
        _2425 = _2315;
        _2427 = _2317;
        _2429 = _2319;
    }
    else
    {
        uint _2436 = _1846 + 3u;
        uint _2440 = _1846 + 11u;
        float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2436].w)) * _326) * 0.949999988079071044921875);
        float _2455 = _2454 * _2454;
        float _2456 = cbLight._m0[_2436].x + _404;
        float _2457 = cbLight._m0[_2436].y + _405;
        float _2458 = cbLight._m0[_2436].z + _406;
        float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
        float _2463 = _2462 * _2456;
        float _2464 = _2462 * _2457;
        float _2465 = _2462 * _2458;
        float _2466 = dot(vec3(_322, _323, _324), vec3(cbLight._m0[_2436].xyz));
        float _4352 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2469 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2470 = dot(vec3(_322, _323, _324), vec3(_2463, _2464, _2465));
        float _4363 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _2474 = dot(vec3(cbLight._m0[_2436].xyz), vec3(_2463, _2464, _2465));
        float _4374 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2478 = _2455 * _2455;
        float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
        float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0);
        float _2496 = 1.0 - _2455;
        float _2506 = (0.5 / (((_2123 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2123 * _2496) + _2455) * _2469))) * _2469;
        float _4385 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2508 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
        float _2509 = isnan(1.0) ? _1862 : (isnan(_1862) ? 1.0 : min(_1862, 1.0));
        _2425 = (((((_2489 * _2145) + _491) * cbLight._m0[_2440].x) * _2508) * _2509) + _2315;
        _2427 = (((((_2489 * _2147) + _493) * cbLight._m0[_2440].y) * _2508) * _2509) + _2317;
        _2429 = (((((_2489 * _2148) + _494) * cbLight._m0[_2440].z) * _2508) * _2509) + _2319;
    }
    float _2574;
    float _2576;
    float _2578;
    float _2580;
    float _2582;
    float _2584;
    if (_1844.y == 0u)
    {
        uvec4 _2530 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2531 = _2530.x;
        uint _2542 = uint((float(_2530.y) * floor(float(uint(cbSceneParam._m0[85u].y * _426) / _2531))) + floor(float(uint(cbSceneParam._m0[85u].x * _425) / _2531)));
        float _2552 = (log2(_1622 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2553 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        uint _2556 = uint(isnan(14.0) ? _2553 : (isnan(_2553) ? 14.0 : min(_2553, 14.0)));
        uvec4 _2561 = texelFetch(g_lightClusterGridBuffer, int(((_2556 << 2u) + (_2542 << 6u)) >> 2u));
        uint _2562 = _2561.x;
        uint _2563 = _2530.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2563 >> 4u) & 15u)) + 4294967295u) & _2562) == 0u) || ((_2563 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2795 = 0.0;
            float _2796 = 0.0;
            float _2797 = 0.0;
            float _2798 = 0.0;
            float _2799 = 0.0;
            float _2800 = 0.0;
            uint _2801 = 0u;
            uint _2810;
            bool _2811;
            for (;;)
            {
                _2810 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2801 << 2u)) >> 2u)).x;
                _2811 = _2810 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2811)
                {
                    frontier_phi_73_pred = _2800;
                    frontier_phi_73_pred_1 = _2799;
                    frontier_phi_73_pred_2 = _2798;
                    frontier_phi_73_pred_3 = _2797;
                    frontier_phi_73_pred_4 = _2796;
                    frontier_phi_73_pred_5 = _2795;
                }
                else
                {
                    float _2940;
                    float _2941;
                    float _2942;
                    float _2943;
                    float _2944;
                    float _2945;
                    uint _2946;
                    _2940 = _2795;
                    _2941 = _2796;
                    _2942 = _2797;
                    _2943 = _2798;
                    _2944 = _2799;
                    _2945 = _2800;
                    _2946 = _2810;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2950 = uint(findLSB(_2946)) + (_2801 << 5u);
                        uint _2947 = (_2946 + 4294967295u) & _2946;
                        uint _2952 = _2950 * 48u;
                        vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2952)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2952 + 3u)).x));
                        uint _2972 = (_2950 * 48u) + 4u;
                        vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2972)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2972 + 3u)).x));
                        uint _2991 = (_2950 * 48u) + 8u;
                        vec3 _3002 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2991)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2991 + 2u)).x));
                        float _3006 = _2966.x - _1620;
                        float _3007 = _2966.y - _1621;
                        float _3008 = _2966.z - _1622;
                        float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                        float _3012 = inversesqrt(_3009);
                        float _3013 = _3012 * _3006;
                        float _3014 = _3012 * _3007;
                        float _3015 = _3012 * _3008;
                        float _3016 = dot(vec3(_446, _449, _452), vec3(_3013, _3014, _3015));
                        float _3021 = 1.0 - (_3009 * _2966.w);
                        float _4411 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                        float _3022 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                        float _3023 = sqrt(_3009) * _2985.w;
                        float _3026 = 1.39999997615814208984375 / (_3023 + 1.39999997615814208984375);
                        float _3027 = _3026 * _3026;
                        float _3030 = ((1.0 - _3027) * _3016) + _3027;
                        float _3033 = _3023 * _3023;
                        float _3037 = ((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3022) / ((_3033 * 0.699999988079071044921875) + 1.0);
                        float _3041 = (-0.0) - _1620;
                        float _3042 = (-0.0) - _1621;
                        float _3043 = (-0.0) - _1622;
                        float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                        float _3048 = _3047 * _3041;
                        float _3049 = _3047 * _3042;
                        float _3050 = _3047 * _3043;
                        float _3057 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                        float _3058 = 1.0 - _522;
                        float _3065 = sqrt(1.0 - ((1.0 - (_3058 * _3058)) * (1.0 - (_3057 * _3057))));
                        float _3066 = _3065 * _3065;
                        float _3067 = _3066 * _3066;
                        float _3068 = _3048 + _3013;
                        float _3069 = _3049 + _3014;
                        float _3070 = _3050 + _3015;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3078 = dot(vec3(_446, _449, _452), vec3(_3048, _3049, _3050));
                        float _4427 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3081 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3082 = dot(vec3(_446, _449, _452), vec3(_3074 * _3068, _3074 * _3069, _3074 * _3070));
                        float _4438 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3085 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3089 = ((_3085 * _3085) * (_3067 + (-1.0))) + 1.0;
                        float _3090 = _3026 * _3066;
                        float _3091 = _3090 * _3090;
                        float _3094 = ((1.0 - _3091) * _3016) + _3091;
                        float _4449 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3095 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3096 = 1.0 - _3066;
                        float _3106 = (0.5 / (((_3095 * ((_3081 * _3096) + _3066)) + 9.9999999392252902907785028219223e-09) + (((_3095 * _3096) + _3066) * _3081))) * _3095;
                        float _4460 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
                        float _3117 = (((_3067 * 3.1415927410125732421875) * (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) / ((_3089 * _3089) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125))) * _3022;
                        _2870 = (_3037 * _2985.x) + _2943;
                        _2871 = (_3037 * _2985.y) + _2944;
                        _2872 = (_3037 * _2985.z) + _2945;
                        _2867 = (_3117 * _3002.x) + _2940;
                        _2868 = (_3117 * _3002.y) + _2941;
                        _2869 = (_3117 * _3002.z) + _2942;
                        if (_2947 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2940 = _2867;
                            _2941 = _2868;
                            _2942 = _2869;
                            _2943 = _2870;
                            _2944 = _2871;
                            _2945 = _2872;
                            _2946 = _2947;
                        }
                    }
                    frontier_phi_73_pred = _2872;
                    frontier_phi_73_pred_1 = _2871;
                    frontier_phi_73_pred_2 = _2870;
                    frontier_phi_73_pred_3 = _2869;
                    frontier_phi_73_pred_4 = _2868;
                    frontier_phi_73_pred_5 = _2867;
                }
                _2654 = frontier_phi_73_pred;
                _2652 = frontier_phi_73_pred_1;
                _2650 = frontier_phi_73_pred_2;
                _2648 = frontier_phi_73_pred_3;
                _2646 = frontier_phi_73_pred_4;
                _2644 = frontier_phi_73_pred_5;
                uint _2802 = _2801 + 1u;
                if (_2802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2795 = _2644;
                    _2796 = _2646;
                    _2797 = _2648;
                    _2798 = _2650;
                    _2799 = _2652;
                    _2800 = _2654;
                    _2801 = _2802;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2763;
        float _2765;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        if (((4294967295u << _2660) & _2562) == 0u)
        {
            _2763 = _2643;
            _2765 = _2645;
            _2767 = _2647;
            _2769 = _2649;
            _2771 = _2651;
            _2773 = _2653;
        }
        else
        {
            float _2788 = inversesqrt(dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622)));
            float _2789 = _2788 * _1620;
            float _2790 = _2788 * _1621;
            float _2791 = _2788 * _1622;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2764;
                float _2766;
                float _2768;
                float _2770;
                float _2772;
                float _2774;
                float _2923 = _2643;
                float _2924 = _2645;
                float _2925 = _2647;
                float _2926 = _2649;
                float _2927 = _2651;
                float _2928 = _2653;
                uint _2929 = _2660;
                uint _2938;
                bool _2939;
                for (;;)
                {
                    _2938 = texelFetch(g_lightClassification, int((((_2556 << 5u) + (_2542 << 9u)) + (_2929 << 2u)) >> 2u)).x;
                    _2939 = _2938 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2939)
                    {
                        frontier_phi_84_pred = _2927;
                        frontier_phi_84_pred_1 = _2926;
                        frontier_phi_84_pred_2 = _2925;
                        frontier_phi_84_pred_3 = _2924;
                        frontier_phi_84_pred_4 = _2923;
                        frontier_phi_84_pred_5 = _2928;
                    }
                    else
                    {
                        float _3131;
                        float _3132;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3430;
                        float _3431;
                        float _3432;
                        float _3144 = _2923;
                        float _3145 = _2924;
                        float _3146 = _2925;
                        float _3147 = _2926;
                        float _3148 = _2927;
                        float _3149 = _2928;
                        uint _3150 = _2938;
                        uint _3151;
                        vec4 _3176;
                        float _3177;
                        vec4 _3192;
                        vec3 _3204;
                        vec4 _3220;
                        vec4 _3236;
                        float _3283;
                        bool _3284;
                        for (;;)
                        {
                            uint _3161 = ((_2929 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3150));
                            _3151 = (_3150 + 4294967295u) & _3150;
                            uint _3163 = _3161 * 40u;
                            _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            _3177 = _3176.w;
                            uint _3179 = (_3161 * 40u) + 4u;
                            _3192 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3179)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3179 + 3u)).x));
                            uint _3194 = (_3161 * 40u) + 8u;
                            _3204 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x));
                            uint _3207 = (_3161 * 40u) + 16u;
                            _3220 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3207)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3207 + 3u)).x));
                            uint _3223 = (_3161 * 40u) + 20u;
                            _3236 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3223)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3223 + 3u)).x));
                            uint _3239 = (_3161 * 40u) + 24u;
                            vec4 _3252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3239 + 3u)).x));
                            uint _3258 = (_3161 * 40u) + 28u;
                            vec4 _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            _3283 = fma(_1622, _3271.z, fma(_1621, _3271.y, _3271.x * _1620)) + _3271.w;
                            _3284 = !((fma(_1622, _3252.z, fma(_1621, _3252.y, _3252.x * _1620)) + _3252.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3284)
                            {
                                float _3311 = _3176.x - _1620;
                                float _3312 = _3176.y - _1621;
                                float _3313 = _3176.z - _1622;
                                float _3314 = dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313));
                                float _3317 = inversesqrt(_3314);
                                float _3318 = _3317 * _3311;
                                float _3319 = _3317 * _3312;
                                float _3320 = _3317 * _3313;
                                float _3324 = 1.0 - (_3314 / (_3177 * _3177));
                                float _4471 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                                float _3325 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
                                float _3329 = sqrt(_3314) * _3192.w;
                                float _3331 = 1.39999997615814208984375 / (_3329 + 1.39999997615814208984375);
                                float _3332 = _3331 * _3331;
                                float _3335 = ((1.0 - _3332) * dot(vec3(_3318, _3319, _3320), vec3(_446, _449, _452))) + _3332;
                                float _3338 = _3329 * _3329;
                                float _3342 = (fma(_1622, _3220.z, fma(_1621, _3220.y, _3220.x * _1620)) + _3220.w) / _3283;
                                float _3343 = (fma(_1622, _3236.z, fma(_1621, _3236.y, _3236.x * _1620)) + _3236.w) / _3283;
                                float _3347 = 1.0 - dot(vec2(_3342, _3343), vec2(_3342, _3343));
                                float _4487 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                                float _3348 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3349 = _3348 * (((isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0))) * _3325) / ((_3338 * 0.699999988079071044921875) + 1.0));
                                float _3361 = exp2(log2(1.0 / ((_3338 * 3.5) + 5.0)) * 0.25);
                                float _3362 = 1.0 - _522;
                                float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                                float _3370 = _3369 * _3369;
                                float _3371 = _3370 * _3370;
                                float _3372 = _3318 - _2789;
                                float _3373 = _3319 - _2790;
                                float _3374 = _3320 - _2791;
                                float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                                float _3382 = dot(vec3(_446, _449, _452), vec3((-0.0) - _2789, (-0.0) - _2790, (-0.0) - _2791));
                                float _4498 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                                float _3385 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3386 = dot(vec3(_446, _449, _452), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                                float _4509 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3389 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                                float _3394 = _3331 * _3370;
                                float _3395 = _3394 * _3394;
                                float _3401 = ((1.0 - _3395) * dot(vec3(_446, _449, _452), vec3(_3318, _3319, _3320))) + _3395;
                                float _4520 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3402 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                                float _3403 = 1.0 - _3370;
                                float _3413 = (0.5 / (((_3402 * ((_3385 * _3403) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3402 * _3403) + _3370) * _3385))) * _3402;
                                float _4531 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3423 = (_3348 * _3325) * (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0)))) / ((_3393 * _3393) * ((_3338 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3349 * _3192.y;
                                frontier_phi_90_pred_1 = _3349 * _3192.x;
                                frontier_phi_90_pred_2 = _3423 * _3204.z;
                                frontier_phi_90_pred_3 = _3423 * _3204.y;
                                frontier_phi_90_pred_4 = _3423 * _3204.x;
                                frontier_phi_90_pred_5 = _3349 * _3192.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3431 = frontier_phi_90_pred;
                            _3430 = frontier_phi_90_pred_1;
                            _3429 = frontier_phi_90_pred_2;
                            _3428 = frontier_phi_90_pred_3;
                            _3427 = frontier_phi_90_pred_4;
                            _3432 = frontier_phi_90_pred_5;
                            _3134 = _3430 + _3147;
                            _3135 = _3431 + _3148;
                            _3136 = _3432 + _3149;
                            _3131 = _3427 + _3144;
                            _3132 = _3428 + _3145;
                            _3133 = _3429 + _3146;
                            if (_3151 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3144 = _3131;
                                _3145 = _3132;
                                _3146 = _3133;
                                _3147 = _3134;
                                _3148 = _3135;
                                _3149 = _3136;
                                _3150 = _3151;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3135;
                        frontier_phi_84_pred_1 = _3134;
                        frontier_phi_84_pred_2 = _3133;
                        frontier_phi_84_pred_3 = _3132;
                        frontier_phi_84_pred_4 = _3131;
                        frontier_phi_84_pred_5 = _3136;
                    }
                    _2772 = frontier_phi_84_pred;
                    _2770 = frontier_phi_84_pred_1;
                    _2768 = frontier_phi_84_pred_2;
                    _2766 = frontier_phi_84_pred_3;
                    _2764 = frontier_phi_84_pred_4;
                    _2774 = frontier_phi_84_pred_5;
                    uint _2930 = _2929 + 1u;
                    if (_2930 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2923 = _2764;
                        _2924 = _2766;
                        _2925 = _2768;
                        _2926 = _2770;
                        _2927 = _2772;
                        _2928 = _2774;
                        _2929 = _2930;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2774;
                frontier_phi_65_66_ladder_1 = _2770;
                frontier_phi_65_66_ladder_2 = _2772;
                frontier_phi_65_66_ladder_3 = _2766;
                frontier_phi_65_66_ladder_4 = _2764;
                frontier_phi_65_66_ladder_5 = _2768;
            }
            else
            {
                frontier_phi_65_66_ladder = _2653;
                frontier_phi_65_66_ladder_1 = _2649;
                frontier_phi_65_66_ladder_2 = _2651;
                frontier_phi_65_66_ladder_3 = _2645;
                frontier_phi_65_66_ladder_4 = _2643;
                frontier_phi_65_66_ladder_5 = _2647;
            }
            _2763 = frontier_phi_65_66_ladder_4;
            _2765 = frontier_phi_65_66_ladder_3;
            _2767 = frontier_phi_65_66_ladder_5;
            _2769 = frontier_phi_65_66_ladder_1;
            _2771 = frontier_phi_65_66_ladder_2;
            _2773 = frontier_phi_65_66_ladder;
        }
        float _2778 = isnan(1.0) ? _506 : (isnan(_506) ? 1.0 : min(_506, 1.0));
        _2574 = (_2778 * _2769) + _2087;
        _2576 = (_2778 * _2771) + _2089;
        _2578 = (_2778 * _2773) + _2091;
        _2580 = ((_2763 * _491) * _2778) + _2425;
        _2582 = ((_2765 * _493) * _2778) + _2427;
        _2584 = ((_2767 * _494) * _2778) + _2429;
    }
    else
    {
        _2574 = _2087;
        _2576 = _2089;
        _2578 = _2091;
        _2580 = _2425;
        _2582 = _2427;
        _2584 = _2429;
    }
    float _4547 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4558 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _4569 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4580 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _2602 = ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2574 + ((isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0))) * _506))) + ((_2580 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2603 = ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2576 + ((isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))) * _506))) + ((_2582 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2604 = ((isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_2578 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _506))) + ((_2584 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _1348)) * cbPerFrame._m0[3u].x);
    float _2609 = cbInstanceData._m0[_465 + 6u].w * (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)));
    float _2614 = _425 / cbSceneParam._m0[86u].x;
    float _2615 = _426 / cbSceneParam._m0[86u].y;
    vec4 _2629 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, (log2((isnan(cbSceneParam._m0[77u].w) ? _346 : (isnan(_346) ? cbSceneParam._m0[77u].w : min(_346, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2631 = _2629.x;
    float _2632 = _2629.y;
    float _2633 = _2629.z;
    float _2634 = _2629.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_346 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_346) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _346 : min(cbSceneParam._m0[80u].w, _346));
        float _2669 = _2668 / _346;
        float _2680 = _2669 * _397;
        float _2681 = _398 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2683 = _2669 * _399;
        float _2685 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2681;
        float _2693 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2880;
        if (abs((_2682 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2880 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2824 = 1.0 / cbSceneParam._m0[80u].x;
            float _2825 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2826 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2835 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : min(_2825, 0.0));
            float _2836 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : min(_2826, 0.0));
            _2880 = ((abs(_2693 / _2682) * cbSceneParam._m0[80u].y) * ((((_2835 - _2836) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0))))) * _2824)) - ((exp2(_2703 * _2835) - exp2(_2703 * _2836)) * _2824))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2882 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2614, _2615, 1.0), 0.0);
        float _2891 = exp2((_2880 * (-1.44269502162933349609375)) * (1.0 - _2882.w));
        float _2892 = log2(_2891);
        float _2908 = log2(_2634);
        _2705 = (exp2(_2908 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].x)) * _2882.x) / cbSceneParam._m0[78u].x)) + _2631;
        _2707 = (exp2(_2908 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].y)) * _2882.y) / cbSceneParam._m0[78u].y)) + _2632;
        _2709 = (exp2(_2908 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2892 * cbSceneParam._m0[78u].z)) * _2882.z) / cbSceneParam._m0[78u].z)) + _2633;
        _2711 = _2891 * _2634;
    }
    else
    {
        _2705 = _2631;
        _2707 = _2632;
        _2709 = _2633;
        _2711 = _2634;
    }
    bool _2918;
    vec4 _2721;
    vec4 _2743;
    float _2745;
    float _2749;
    float _2750;
    float _2751;
    float _2752;
    bool _2762;
    for (;;)
    {
        _2721 = cbMatDynParam._m0[0u];
        float _2723 = roundEven(_2721.y);
        bool _2724 = _2723 == 3.0;
        float _2725 = log2(_2711);
        float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * _2602;
        float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * _2603;
        float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * _2604;
        float _2741 = _413 + (-0.5);
        _2743 = cbMtdParam._m0[1u];
        _2745 = _2743.y * _2741;
        float _2748 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2749 = _2748 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
        _2750 = _2748 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
        _2751 = _2748 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
        _2752 = _2741 * 0.999000012874603271484375;
        _2762 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2762)
        {
            if ((cbInstanceData._m0[_465 + 7u].x + _2752) < 0.5)
            {
                _2918 = true;
                break;
            }
        }
        uint _2859 = _467 + uint(_2721.w);
        if ((cbInstanceData._m0[_2859].w < 1.0) && ((cbInstanceData._m0[_2859].w + _2752) < 0.5))
        {
            _2918 = true;
            break;
        }
        if ((_2745 + _259) < _2743.x)
        {
            _2918 = true;
            break;
        }
        _2918 = false;
        break;
    }
    float _3122;
    if (_2918)
    {
        discard_state = true;
        _3122 = 0.0;
    }
    else
    {
        _3122 = _2609;
    }
    SV_Target.x = _2749;
    SV_Target.y = _2750;
    SV_Target.z = _2751;
    SV_Target.w = _3122;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2609;
    discard_exit();
}


