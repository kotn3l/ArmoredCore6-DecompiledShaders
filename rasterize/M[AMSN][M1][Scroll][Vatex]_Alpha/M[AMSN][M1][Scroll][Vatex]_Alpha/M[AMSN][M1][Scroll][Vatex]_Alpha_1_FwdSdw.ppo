#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _848;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _233 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _234 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _247 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_233 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_234 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _247.x * cbMtdParam._m0[9u].x;
    float _255 = _247.y * cbMtdParam._m0[9u].y;
    float _256 = _247.z * cbMtdParam._m0[9u].z;
    float _257 = _247.w * TEXCOORD_1.z;
    vec4 _270 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _233) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _234) + cbTextureTilingScale._m0[1u].w));
    float _274 = _270.z;
    float _278 = (_270.x * 2.0) + (-1.0);
    float _280 = (_270.y * 2.0) + (-1.0);
    float _281 = dot(vec2(_278, _280), vec2(_278, _280));
    float _3469 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _287 = sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))));
    float _290 = fma(_287, _217, fma(_280, _209 * TANGENT.x, (_195 * _187) * _278));
    float _293 = fma(_287, _218, fma(_280, _209 * TANGENT.y, (_195 * _188) * _278));
    float _296 = fma(_287, _219, fma(_280, _209 * TANGENT.z, (_195 * _189) * _278));
    float _300 = inversesqrt(dot(vec3(_290, _293, _296), vec3(_290, _293, _296)));
    float _301 = _300 * _290;
    float _302 = _300 * _293;
    float _303 = _300 * _296;
    float _3480 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _304 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _305 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3513 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3524 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3535 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _309 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    float _391 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _392 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _413 = fma(_303, cbSceneParam._m0[5u].z, fma(_302, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _301));
    float _416 = fma(_303, cbSceneParam._m0[6u].z, fma(_302, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _301));
    float _419 = fma(_303, cbSceneParam._m0[7u].z, fma(_302, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _301));
    uint _432 = uint(roundEven(NORMAL.w)) * 13u;
    uint _435 = (_432 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _441 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_435].x;
    float _442 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_435].y;
    float _443 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * cbInstanceData._m0[_435].z;
    float _3546 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _3557 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
    float _3568 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _446 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _447 = 1.0 - _309;
    float _448 = _444 * _447;
    float _449 = _445 * _447;
    float _450 = _446 * _447;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _309;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _309;
    float _457 = (_446 + (-0.039999999105930328369140625)) * _309;
    float _458 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    float _461 = _457 + 0.039999999105930328369140625;
    vec4 _470 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _391, cbSceneParam._m0[86u].y * _392));
    float _473 = _470.x * TEXCOORD_1.w;
    float _474 = dot(vec3(_301, _302, _303), vec3(_383, _384, _385));
    float _477 = _474 * 2.0;
    float _481 = (_477 * _301) - _383;
    float _482 = (_477 * _302) - _384;
    float _483 = (_477 * _303) - _385;
    float _487 = abs(dot(vec3(_383, _384, _385), vec3(_301, _302, _303)));
    float _3579 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _489 = sqrt(_305);
    float _502 = exp2((_489 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_489 * 3.0));
    float _508 = (1.0 - _502) * ((_489 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _509 = _502 * _489;
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _545 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _847;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _572 = fma(_545, cbModelParam._m0[26u].z, fma(_541, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _537));
        float _576 = fma(_545, cbModelParam._m0[27u].z, fma(_541, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _537));
        float _580 = fma(_545, cbModelParam._m0[28u].z, fma(_541, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _537));
        float _605 = _537 + _301;
        float _606 = _541 + _302;
        float _607 = _545 + _303;
        float _617 = fma(_607, cbModelParam._m0[26u].z, fma(_606, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _605)) - _572;
        float _618 = fma(_607, cbModelParam._m0[27u].z, fma(_606, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _605)) - _576;
        float _619 = fma(_607, cbModelParam._m0[28u].z, fma(_606, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _605)) - _580;
        float _623 = inversesqrt(dot(vec3(_617, _618, _619), vec3(_617, _618, _619)));
        float _636 = ((_623 * _617) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_572 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_623 * _618) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_576 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _638 = ((_623 * _619) / cbModelParam._m0[34u].z) + ((((((_580 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _641 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_636, _637, _638), 0.0);
        float _675 = exp2((_641.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_641.x + (-0.5));
        float _677 = _675 * (_641.y + (-0.5));
        float _678 = _675 * (_641.z + (-0.5));
        float _685 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_648.x + (-0.5));
        float _687 = _685 * (_648.y + (-0.5));
        float _688 = _685 * (_648.z + (-0.5));
        float _695 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_655.x + (-0.5));
        float _697 = _695 * (_655.y + (-0.5));
        float _698 = _695 * (_655.z + (-0.5));
        float _705 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_662.x + (-0.5));
        float _707 = _705 * (_662.y + (-0.5));
        float _708 = _705 * (_662.z + (-0.5));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _712 = _676 * 0.5;
        float _713 = _686 * 0.5;
        float _714 = _696 * 0.5;
        float _715 = dot(vec3(_712, _713, _714), vec3(_712, _713, _714));
        float _720 = (_715 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_715);
        float _729 = (dot(vec3(_301, _302, _303), vec3(_720 * _712, _720 * _713, _720 * _714)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _739 = sqrt(((_713 * _713) + (_712 * _712)) + (_714 * _714)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _740 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _741 = _740 * 2.0;
        float _745 = (1.0 - _740) / (_740 + 1.0);
        float _3627 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _755 = ((((1.0 - _746) * (_741 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_741 + 1.0))) + _746) * _709;
        float _756 = _677 * 0.5;
        float _757 = _687 * 0.5;
        float _758 = _697 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _772 = (dot(vec3(_301, _302, _303), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3638 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _781 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3649 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _782 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _783 = _782 * 2.0;
        float _787 = (1.0 - _782) / (_782 + 1.0);
        float _3660 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _797 = ((((1.0 - _788) * (_783 + 2.0)) * exp2(log2(isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_783 + 1.0))) + _788) * _710;
        float _798 = _678 * 0.5;
        float _799 = _688 * 0.5;
        float _800 = _698 * 0.5;
        float _801 = dot(vec3(_798, _799, _800), vec3(_798, _799, _800));
        float _806 = (_801 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_801);
        float _814 = (dot(vec3(_301, _302, _303), vec3(_806 * _798, _806 * _799, _806 * _800)) + 1.0) * 0.5;
        float _3671 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _823 = sqrt(((_799 * _799) + (_798 * _798)) + (_800 * _800)) / (_711 + 9.9999997473787516355514526367188e-06);
        float _3682 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3693 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * (_825 + 1.0))) + _830) * _711;
        _847 = _678;
        _849 = _677;
        _850 = _676;
        _851 = _688;
        _852 = _687;
        _853 = _686;
        _854 = _698;
        _855 = _697;
        _856 = _696;
        _857 = _711;
        _858 = _710;
        _859 = _709;
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0)));
        _862 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
    }
    else
    {
        _847 = _848;
        _849 = _848;
        _850 = _848;
        _851 = _848;
        _852 = _848;
        _853 = _848;
        _854 = _848;
        _855 = _848;
        _856 = _848;
        _857 = _848;
        _858 = _848;
        _859 = _848;
        _860 = 0.0;
        _861 = 0.0;
        _862 = 0.0;
    }
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _888 = fma(_545, cbModelParam._m0[30u].z, fma(_541, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _537));
        float _892 = fma(_545, cbModelParam._m0[31u].z, fma(_541, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _537));
        float _896 = fma(_545, cbModelParam._m0[32u].z, fma(_541, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _537));
        float _919 = _537 + _301;
        float _920 = _541 + _302;
        float _921 = _545 + _303;
        float _931 = fma(_921, cbModelParam._m0[30u].z, fma(_920, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919)) - _888;
        float _932 = fma(_921, cbModelParam._m0[31u].z, fma(_920, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919)) - _892;
        float _933 = fma(_921, cbModelParam._m0[32u].z, fma(_920, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919)) - _896;
        float _937 = inversesqrt(dot(vec3(_931, _932, _933), vec3(_931, _932, _933)));
        float _950 = ((_937 * _931) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_888 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_937 * _932) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_892 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _952 = ((_937 * _933) / cbModelParam._m0[35u].z) + ((((((_896 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_950, _951, _952), 0.0);
        float _987 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_954.x + (-0.5));
        float _989 = _987 * (_954.y + (-0.5));
        float _990 = _987 * (_954.z + (-0.5));
        float _997 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_961.x + (-0.5));
        float _999 = _997 * (_961.y + (-0.5));
        float _1000 = _997 * (_961.z + (-0.5));
        float _1007 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_968.x + (-0.5));
        float _1009 = _1007 * (_968.y + (-0.5));
        float _1010 = _1007 * (_968.z + (-0.5));
        float _1017 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_975.x + (-0.5));
        float _1019 = _1017 * (_975.y + (-0.5));
        float _1020 = _1017 * (_975.z + (-0.5));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = _988 * 0.5;
        float _1025 = _998 * 0.5;
        float _1026 = _1008 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_301, _302, _303), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3756 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1051 + 1.0))) + _1056) * _1021;
        float _1066 = _989 * 0.5;
        float _1067 = _999 * 0.5;
        float _1068 = _1009 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_301, _302, _303), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3767 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3778 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3789 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_1093 + 1.0))) + _1098) * _1022;
        float _1108 = _990 * 0.5;
        float _1109 = _1000 * 0.5;
        float _1110 = _1010 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_301, _302, _303), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3800 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3811 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3822 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1135 + 1.0))) + _1140) * _1023;
        _1157 = _990;
        _1158 = _989;
        _1159 = _988;
        _1160 = _1000;
        _1161 = _999;
        _1162 = _998;
        _1163 = _1010;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1023;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
        _1171 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
    }
    else
    {
        _1157 = _848;
        _1158 = _848;
        _1159 = _848;
        _1160 = _848;
        _1161 = _848;
        _1162 = _848;
        _1163 = _848;
        _1164 = _848;
        _1165 = _848;
        _1166 = _848;
        _1167 = _848;
        _1168 = _848;
        _1169 = 0.0;
        _1170 = 0.0;
        _1171 = 0.0;
    }
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1183 = (cbModelParam._m0[1u].x * (_1171 - _862)) + _862;
    float _1204 = fma(_1183, cbSceneParam._m0[89u].z, fma(_1182, cbSceneParam._m0[89u].y, _1181 * cbSceneParam._m0[89u].x));
    float _1207 = fma(_1183, cbSceneParam._m0[90u].z, fma(_1182, cbSceneParam._m0[90u].y, _1181 * cbSceneParam._m0[90u].x));
    float _1210 = fma(_1183, cbSceneParam._m0[91u].z, fma(_1182, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1181));
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = _483 * 0.5;
    float _1228 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1159, _1162, _1165, _1168));
    float _1231 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1234 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1268;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1241 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_847, _851, _854, _857));
        float _1245 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_849, _852, _855, _858));
        float _1249 = dot(vec4(_1225, _1226, _1227, 1.0), vec4(_850, _853, _856, _859));
        float _1256 = dot(vec4(cbModelParam._m0[39u]), vec4(_1225, _1226, _1227, 1.0));
        _1268 = dot(vec3(isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1256) ? 0.0 : (isnan(0.0) ? _1256 : max(0.0, _1256))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1268 = 1.0;
    }
    float _1279;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1270 = dot(vec4(cbModelParam._m0[40u]), vec4(_1225, _1226, _1227, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1270) ? 0.0 : (isnan(0.0) ? _1270 : max(0.0, _1270))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1283 = (_1279 * cbModelParam._m0[1u].x) + (_1268 * (1.0 - cbModelParam._m0[1u].x));
    float _1293 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1294 = isnan(_1293) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1293 : min(cbModelParam._m0[25u].z, _1293));
    float _1376;
    float _1378;
    float _1380;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1343 = fma(_545, cbModelParam._m0[13u].z, fma(_541, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _537)) + cbModelParam._m0[13u].w;
        float _1347 = fma(_545, cbModelParam._m0[14u].z, fma(_541, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _537)) + cbModelParam._m0[14u].w;
        float _1351 = fma(_545, cbModelParam._m0[15u].z, fma(_541, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _537)) + cbModelParam._m0[15u].w;
        float _1354 = fma(_483, cbModelParam._m0[13u].z, fma(_482, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481));
        float _1357 = fma(_483, cbModelParam._m0[14u].z, fma(_482, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481));
        float _1360 = fma(_483, cbModelParam._m0[15u].z, fma(_482, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481));
        float _1388;
        if (_1354 > 0.0)
        {
            _1388 = abs((1.0 - _1343) / _1354);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1343 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1388 = frontier_phi_16_14_ladder;
        }
        float _1563;
        if (_1357 > 0.0)
        {
            _1563 = abs((1.0 - _1347) / _1357);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1347 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1563 = frontier_phi_25_21_ladder;
        }
        float _1859;
        if (_1360 > 0.0)
        {
            _1859 = abs((1.0 - _1351) / _1360);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1351 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1859 = frontier_phi_37_32_ladder;
        }
        float _1861 = isnan(_1563) ? _1388 : (isnan(_1388) ? _1563 : min(_1388, _1563));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1354) + _1343;
        float _1867 = (_1862 * _1357) + _1347;
        float _1868 = (_1862 * _1360) + _1351;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2013 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1294);
            frontier_phi_15_37_ladder = _2013.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2013.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2013.z * cbModelParam._m0[1u].y;
        }
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
        _1380 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1364 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_481, _482, _483), _1294);
        _1376 = _1364.x * cbModelParam._m0[1u].y;
        _1378 = _1364.y * cbModelParam._m0[1u].y;
        _1380 = _1364.z * cbModelParam._m0[1u].y;
    }
    float _1384 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1385 = isnan(_1384) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1384 : min(cbModelParam._m0[25u].w, _1384));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_545, cbModelParam._m0[21u].z, fma(_541, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _537)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_545, cbModelParam._m0[22u].z, fma(_541, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _537)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_545, cbModelParam._m0[23u].z, fma(_541, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _537)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_483, cbModelParam._m0[21u].z, fma(_482, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481));
        float _1455 = fma(_483, cbModelParam._m0[22u].z, fma(_482, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481));
        float _1458 = fma(_483, cbModelParam._m0[23u].z, fma(_482, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481));
        float _1568;
        if (_1452 > 0.0)
        {
            _1568 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1568 = frontier_phi_27_23_ladder;
        }
        float _1886;
        if (_1455 > 0.0)
        {
            _1886 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1886 = frontier_phi_39_34_ladder;
        }
        float _2224;
        if (_1458 > 0.0)
        {
            _2224 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2224 = frontier_phi_49_46_ladder;
        }
        float _2226 = isnan(_1886) ? _1568 : (isnan(_1568) ? _1886 : min(_1568, _1886));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1452) + _1441;
        float _2232 = (_2227 * _1455) + _1445;
        float _2233 = (_2227 * _1458) + _1449;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2235 = (-1.0) - _2234;
        float _2237 = _2234 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2233 > _2237) || ((_2233 < _2235) || ((_2232 > _2237) || ((_2232 < _2235) || ((_2231 < _2235) || (_2231 > _2237))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2355 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2233, cbModelParam._m0[17u].z, fma(_2232, cbModelParam._m0[17u].y, _2231 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2233, cbModelParam._m0[18u].z, fma(_2232, cbModelParam._m0[18u].y, _2231 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2233, cbModelParam._m0[19u].z, fma(_2232, cbModelParam._m0[19u].y, _2231 * cbModelParam._m0[19u].x))), _1385);
            frontier_phi_24_49_ladder = _2355.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2355.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2355.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_24_49_ladder_2;
        _1479 = frontier_phi_24_49_ladder_1;
        _1481 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_481, _482, _483), _1385);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_508 * _458) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1477 - _1376)) + _1376);
    float _1496 = (((_508 * _460) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1479 - _1378)) + _1378);
    float _1498 = (((_508 * _461) + _509) * _473) * ((cbModelParam._m0[1u].w * (_1481 - _1380)) + _1380);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    float _1542 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1555 = _1542 / _1554;
    float _1556 = _1546 / _1554;
    float _1557 = _1550 / _1554;
    float _1704;
    float _1705;
    float _1706;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1584 = ((uint(_1557 > cbSceneParam._m0[59u].y) + uint(_1557 > cbSceneParam._m0[59u].x)) + uint(_1557 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1585 = _1584 + 43u;
        uint _1593 = _1584 + 44u;
        uint _1601 = _1584 + 45u;
        uint _1609 = _1584 + 46u;
        float _1620 = fma(_1554, cbSceneParam._m0[_1585].w, fma(_1550, cbSceneParam._m0[_1585].z, fma(_1546, cbSceneParam._m0[_1585].y, _1542 * cbSceneParam._m0[_1585].x)));
        float _1624 = fma(_1554, cbSceneParam._m0[_1593].w, fma(_1550, cbSceneParam._m0[_1593].z, fma(_1546, cbSceneParam._m0[_1593].y, _1542 * cbSceneParam._m0[_1593].x)));
        float _1632 = fma(_1554, cbSceneParam._m0[_1609].w, fma(_1550, cbSceneParam._m0[_1609].z, fma(_1546, cbSceneParam._m0[_1609].y, _1542 * cbSceneParam._m0[_1609].x)));
        float _1637 = cbSceneParam._m0[33u].z * _1632;
        float _1639 = cbSceneParam._m0[33u].w * _1632;
        float _1642 = fma(_1554, cbSceneParam._m0[_1601].w, fma(_1550, cbSceneParam._m0[_1601].z, fma(_1546, cbSceneParam._m0[_1601].y, _1542 * cbSceneParam._m0[_1601].x))) / _1632;
        float _1690 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
        float _3948 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1697 = (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1637 + _1620) / _1632, (_1639 + _1624) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1639 + _1620) / _1632, (_1624 - _1637) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1637) / _1632, (_1624 - _1639) / _1632), _1642), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1620 - _1639) / _1632, (_1637 + _1624) / _1632), _1642), 0.0)).x), vec4(0.25)));
        _1704 = 1.0 - (_1697 * cbSceneParam._m0[34u].x);
        _1705 = 1.0 - (_1697 * cbSceneParam._m0[34u].y);
        _1706 = 1.0 - (_1697 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1704 = 1.0;
        _1705 = 1.0;
        _1706 = 1.0;
    }
    float _1770;
    float _1772;
    float _1774;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1758 = fma(_1554, cbSceneParam._m0[63u].w, fma(_1550, cbSceneParam._m0[63u].z, fma(_1546, cbSceneParam._m0[63u].y, _1542 * cbSceneParam._m0[63u].x)));
        float _1759 = fma(_1554, cbSceneParam._m0[60u].w, fma(_1550, cbSceneParam._m0[60u].z, fma(_1546, cbSceneParam._m0[60u].y, _1542 * cbSceneParam._m0[60u].x))) / _1758;
        float _1760 = fma(_1554, cbSceneParam._m0[61u].w, fma(_1550, cbSceneParam._m0[61u].z, fma(_1546, cbSceneParam._m0[61u].y, _1542 * cbSceneParam._m0[61u].x))) / _1758;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1759 >= cbSceneParam._m0[64u].x) && (_1760 >= cbSceneParam._m0[64u].y)) && (_1759 <= cbSceneParam._m0[64u].z)) && (_1760 <= cbSceneParam._m0[64u].w))
        {
            float _1899 = fma(_1554, cbSceneParam._m0[62u].w, fma(_1550, cbSceneParam._m0[62u].z, fma(_1546, cbSceneParam._m0[62u].y, _1542 * cbSceneParam._m0[62u].x))) / _1758;
            float _1903 = isnan(cbSceneParam._m0[41u].w) ? _1899 : (isnan(_1899) ? cbSceneParam._m0[41u].w : max(_1899, cbSceneParam._m0[41u].w));
            float _1946 = (cbSceneParam._m0[33u].x - sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557))) * cbSceneParam._m0[33u].y;
            float _3964 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
            float _1953 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1759, cbSceneParam._m0[33u].w + _1760), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1759, _1760 - cbSceneParam._m0[33u].z), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].z, _1760 - cbSceneParam._m0[33u].w), _1903), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1759 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1760), _1903), 0.0)).x), vec4(0.25)));
            float _1957 = 1.0 - (_1953 * cbSceneParam._m0[34u].x);
            float _1958 = 1.0 - (_1953 * cbSceneParam._m0[34u].y);
            float _1959 = 1.0 - (_1953 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1958) ? _1705 : (isnan(_1705) ? _1958 : min(_1705, _1958));
            frontier_phi_36_35_ladder_1 = isnan(_1959) ? _1706 : (isnan(_1706) ? _1959 : min(_1706, _1959));
            frontier_phi_36_35_ladder_2 = isnan(_1957) ? _1704 : (isnan(_1704) ? _1957 : min(_1704, _1957));
        }
        else
        {
            frontier_phi_36_35_ladder = _1705;
            frontier_phi_36_35_ladder_1 = _1706;
            frontier_phi_36_35_ladder_2 = _1704;
        }
        _1770 = frontier_phi_36_35_ladder_2;
        _1772 = frontier_phi_36_35_ladder;
        _1774 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1770 = _1704;
        _1772 = _1705;
        _1774 = _1706;
    }
    uvec4 _1779 = floatBitsToUint(cbInstanceData._m0[_432 + 5u]);
    uint _1781 = _1779.x * 14u;
    uint _1782 = _1781 + 13u;
    float _1789 = _473 + (-1.0);
    float _1794 = (cbLight._m0[_1782].x * _1789) + 1.0;
    float _1795 = (cbLight._m0[_1782].y * _1789) + 1.0;
    float _1796 = (cbLight._m0[_1782].z * _1789) + 1.0;
    float _1797 = (cbLight._m0[_1782].w * _1789) + 1.0;
    uint _1798 = _1781 + 5u;
    float _1804 = isnan(1.0) ? _1795 : (isnan(_1795) ? 1.0 : min(_1795, 1.0));
    uint _1808 = _1781 + 4u;
    float _1818 = isnan(1.0) ? _1794 : (isnan(_1794) ? 1.0 : min(_1794, 1.0));
    uint _1822 = _1781 | 1u;
    float _1833 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_301, _302, _303));
    float _1836 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_301, _302, _303));
    float _4000 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _4011 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1841 = (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0))) * 0.3183098733425140380859375;
    float _1843 = (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0))) * 0.3183098733425140380859375;
    float _1850 = ((cbLight._m0[_1798].x * _1804) * _1843) + (((cbLight._m0[_1808].x * _1770) * _1818) * _1841);
    float _1851 = ((_1804 * cbLight._m0[_1798].y) * _1843) + (((cbLight._m0[_1808].y * _1772) * _1818) * _1841);
    float _1852 = ((_1804 * cbLight._m0[_1798].z) * _1843) + (((cbLight._m0[_1808].z * _1774) * _1818) * _1841);
    uvec4 _1856 = floatBitsToUint(cbLight._m0[_1781 + 12u]);
    bool _1858 = _1856.x == 0u;
    float _1960;
    float _1962;
    float _1964;
    if (_1858)
    {
        _1960 = _1850;
        _1962 = _1851;
        _1964 = _1852;
    }
    else
    {
        uint _1968 = _1781 + 6u;
        float _1984 = (dot(vec3(cbLight._m0[_1781 + 2u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _1985 = _1984 * _1984;
        float _4022 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        float _1986 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
        float _1987 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _1960 = (((cbLight._m0[_1968].x * 0.3183098733425140380859375) * _1986) * _1987) + _1850;
        _1962 = (((cbLight._m0[_1968].y * 0.3183098733425140380859375) * _1986) * _1987) + _1851;
        _1964 = (((cbLight._m0[_1968].z * 0.3183098733425140380859375) * _1986) * _1987) + _1852;
    }
    bool _1967 = _1856.y == 0u;
    float _2022;
    float _2024;
    float _2026;
    if (_1967)
    {
        _2022 = _1960;
        _2024 = _1962;
        _2026 = _1964;
    }
    else
    {
        uint _2195 = _1781 + 7u;
        float _2211 = (dot(vec3(cbLight._m0[_1781 + 3u].xyz), vec3(_301, _302, _303)) * 0.5) + 0.5;
        float _2212 = _2211 * _2211;
        float _4038 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2213 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _2214 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2022 = (((cbLight._m0[_2195].x * 0.3183098733425140380859375) * _2213) * _2214) + _1960;
        _2024 = (((cbLight._m0[_2195].y * 0.3183098733425140380859375) * _2213) * _2214) + _1962;
        _2026 = (((cbLight._m0[_2195].z * 0.3183098733425140380859375) * _2213) * _2214) + _1964;
    }
    uint _2029 = _1781 + 8u;
    float _2042 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1781].w)) * _305) * 0.949999988079071044921875);
    float _2043 = _2042 * _2042;
    float _2044 = cbLight._m0[_1781].x + _383;
    float _2045 = cbLight._m0[_1781].y + _384;
    float _2046 = cbLight._m0[_1781].z + _385;
    float _2050 = inversesqrt(dot(vec3(_2044, _2045, _2046), vec3(_2044, _2045, _2046)));
    float _2051 = _2050 * _2044;
    float _2052 = _2050 * _2045;
    float _2053 = _2050 * _2046;
    float _2054 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1781].xyz));
    float _4054 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2057 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _4065 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2058 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2059 = dot(vec3(_301, _302, _303), vec3(_2051, _2052, _2053));
    float _4076 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1781].xyz), vec3(_2051, _2052, _2053));
    float _4087 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2043 * _2043;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2079 = exp2(log2(1.0 - (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * 5.0);
    float _2080 = 0.959999978542327880859375 - _455;
    float _2082 = 0.959999978542327880859375 - _456;
    float _2083 = 0.959999978542327880859375 - _457;
    float _2090 = 1.0 - _2043;
    float _2101 = (0.5 / (((_2058 * ((_2057 * _2090) + _2043)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2090) + _2043) * _2057))) * _2057;
    float _4098 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    uint _2117 = _1781 + 9u;
    float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _305) * 0.949999988079071044921875);
    float _2129 = _2128 * _2128;
    float _2130 = cbLight._m0[_1822].x + _383;
    float _2131 = cbLight._m0[_1822].y + _384;
    float _2132 = cbLight._m0[_1822].z + _385;
    float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
    float _2137 = _2136 * _2130;
    float _2138 = _2136 * _2131;
    float _2139 = _2136 * _2132;
    float _2140 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_1822].xyz));
    float _4109 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2144 = dot(vec3(_301, _302, _303), vec3(_2137, _2138, _2139));
    float _4120 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2148 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2137, _2138, _2139));
    float _4131 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2152 = _2129 * _2129;
    float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
    float _2170 = 1.0 - _2129;
    float _2180 = (0.5 / (((_2058 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2170) + _2129) * _2143))) * _2143;
    float _4142 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2182 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
    float _2192 = (((((_2163 * _2080) + _458) * cbLight._m0[_2117].x) * _2182) * _1804) + ((((cbLight._m0[_2029].x * _1770) * ((_2079 * _2080) + _458)) * _2103) * _1818);
    float _2193 = (((((_2163 * _2082) + _460) * cbLight._m0[_2117].y) * _2182) * _1804) + ((((cbLight._m0[_2029].y * _1772) * ((_2079 * _2082) + _460)) * _2103) * _1818);
    float _2194 = (((((_2163 * _2083) + _461) * cbLight._m0[_2117].z) * _2182) * _1804) + ((((cbLight._m0[_2029].z * _1774) * ((_2079 * _2083) + _461)) * _2103) * _1818);
    float _2250;
    float _2252;
    float _2254;
    if (_1858)
    {
        _2250 = _2192;
        _2252 = _2193;
        _2254 = _2194;
    }
    else
    {
        uint _2256 = _1781 + 2u;
        uint _2260 = _1781 + 10u;
        float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _305) * 0.949999988079071044921875);
        float _2275 = _2274 * _2274;
        float _2276 = cbLight._m0[_2256].x + _383;
        float _2277 = cbLight._m0[_2256].y + _384;
        float _2278 = cbLight._m0[_2256].z + _385;
        float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
        float _2283 = _2282 * _2276;
        float _2284 = _2282 * _2277;
        float _2285 = _2282 * _2278;
        float _2286 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2256].xyz));
        float _4153 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2289 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _2290 = dot(vec3(_301, _302, _303), vec3(_2283, _2284, _2285));
        float _4164 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2294 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2283, _2284, _2285));
        float _4175 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2298 = _2275 * _2275;
        float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
        float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
        float _2316 = 1.0 - _2275;
        float _2326 = (0.5 / (((_2058 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2316) + _2275) * _2289))) * _2289;
        float _4186 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2328 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
        float _2329 = isnan(1.0) ? _1796 : (isnan(_1796) ? 1.0 : min(_1796, 1.0));
        _2250 = (((((_2309 * _2080) + _458) * cbLight._m0[_2260].x) * _2328) * _2329) + _2192;
        _2252 = (((((_2309 * _2082) + _460) * cbLight._m0[_2260].y) * _2328) * _2329) + _2193;
        _2254 = (((((_2309 * _2083) + _461) * cbLight._m0[_2260].z) * _2328) * _2329) + _2194;
    }
    float _2360;
    float _2362;
    float _2364;
    if (_1967)
    {
        _2360 = _2250;
        _2362 = _2252;
        _2364 = _2254;
    }
    else
    {
        uint _2371 = _1781 + 3u;
        uint _2375 = _1781 + 11u;
        float _2389 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2371].w)) * _305) * 0.949999988079071044921875);
        float _2390 = _2389 * _2389;
        float _2391 = cbLight._m0[_2371].x + _383;
        float _2392 = cbLight._m0[_2371].y + _384;
        float _2393 = cbLight._m0[_2371].z + _385;
        float _2397 = inversesqrt(dot(vec3(_2391, _2392, _2393), vec3(_2391, _2392, _2393)));
        float _2398 = _2397 * _2391;
        float _2399 = _2397 * _2392;
        float _2400 = _2397 * _2393;
        float _2401 = dot(vec3(_301, _302, _303), vec3(cbLight._m0[_2371].xyz));
        float _4202 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        float _2404 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2405 = dot(vec3(_301, _302, _303), vec3(_2398, _2399, _2400));
        float _4213 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _2409 = dot(vec3(cbLight._m0[_2371].xyz), vec3(_2398, _2399, _2400));
        float _4224 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _2390 * _2390;
        float _2417 = ((_2408 * _2408) * (_2413 + (-1.0))) + 1.0;
        float _2424 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
        float _2431 = 1.0 - _2390;
        float _2441 = (0.5 / (((_2058 * ((_2404 * _2431) + _2390)) + 9.9999999392252902907785028219223e-09) + (((_2058 * _2431) + _2390) * _2404))) * _2404;
        float _4235 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2443 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2413 / ((_2417 * _2417) * 3.141590118408203125));
        float _2444 = isnan(1.0) ? _1797 : (isnan(_1797) ? 1.0 : min(_1797, 1.0));
        _2360 = (((((_2424 * _2080) + _458) * cbLight._m0[_2375].x) * _2443) * _2444) + _2250;
        _2362 = (((((_2424 * _2082) + _460) * cbLight._m0[_2375].y) * _2443) * _2444) + _2252;
        _2364 = (((((_2424 * _2083) + _461) * cbLight._m0[_2375].z) * _2443) * _2444) + _2254;
    }
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    if (_1779.y == 0u)
    {
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.x;
        uint _2477 = uint((float(_2465.y) * floor(float(uint(cbSceneParam._m0[85u].y * _392) / _2466))) + floor(float(uint(cbSceneParam._m0[85u].x * _391) / _2466)));
        float _2487 = (log2(_1557 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2488 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        uint _2491 = uint(isnan(14.0) ? _2488 : (isnan(_2488) ? 14.0 : min(_2488, 14.0)));
        uvec4 _2496 = texelFetch(g_lightClusterGridBuffer, int(((_2491 << 2u) + (_2477 << 6u)) >> 2u));
        uint _2497 = _2496.x;
        uint _2498 = _2465.z;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        if (((((1u << ((_2498 >> 4u) & 15u)) + 4294967295u) & _2497) == 0u) || ((_2498 & 240u) == 0u))
        {
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
        }
        else
        {
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2722 = 0.0;
            float _2723 = 0.0;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            uint _2728 = 0u;
            uint _2737;
            bool _2738;
            for (;;)
            {
                _2737 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2728 << 2u)) >> 2u)).x;
                _2738 = _2737 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2738)
                {
                    frontier_phi_68_pred = _2727;
                    frontier_phi_68_pred_1 = _2726;
                    frontier_phi_68_pred_2 = _2725;
                    frontier_phi_68_pred_3 = _2723;
                    frontier_phi_68_pred_4 = _2722;
                    frontier_phi_68_pred_5 = _2724;
                }
                else
                {
                    float _2846;
                    float _2847;
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    uint _2852;
                    _2846 = _2722;
                    _2847 = _2723;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2737;
                    float _2778;
                    float _2779;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    for (;;)
                    {
                        uint _2856 = uint(findLSB(_2852)) + (_2728 << 5u);
                        uint _2853 = (_2852 + 4294967295u) & _2852;
                        uint _2858 = _2856 * 48u;
                        vec4 _2872 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2858)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2858 + 3u)).x));
                        uint _2878 = (_2856 * 48u) + 4u;
                        vec4 _2891 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2878)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2878 + 3u)).x));
                        uint _2897 = (_2856 * 48u) + 8u;
                        vec3 _2908 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2897)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2897 + 2u)).x));
                        float _2912 = _2872.x - _1555;
                        float _2913 = _2872.y - _1556;
                        float _2914 = _2872.z - _1557;
                        float _2915 = dot(vec3(_2912, _2913, _2914), vec3(_2912, _2913, _2914));
                        float _2918 = inversesqrt(_2915);
                        float _2919 = _2918 * _2912;
                        float _2920 = _2918 * _2913;
                        float _2921 = _2918 * _2914;
                        float _2922 = dot(vec3(_413, _416, _419), vec3(_2919, _2920, _2921));
                        float _2927 = 1.0 - (_2915 * _2872.w);
                        float _4261 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _2929 = sqrt(_2915) * _2891.w;
                        float _2932 = 1.39999997615814208984375 / (_2929 + 1.39999997615814208984375);
                        float _2933 = _2932 * _2932;
                        float _2936 = ((1.0 - _2933) * _2922) + _2933;
                        float _2939 = _2929 * _2929;
                        float _2943 = ((isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0))) * _2928) / ((_2939 * 0.699999988079071044921875) + 1.0);
                        float _2947 = (-0.0) - _1555;
                        float _2948 = (-0.0) - _1556;
                        float _2949 = (-0.0) - _1557;
                        float _2953 = inversesqrt(dot(vec3(_2947, _2948, _2949), vec3(_2947, _2948, _2949)));
                        float _2954 = _2953 * _2947;
                        float _2955 = _2953 * _2948;
                        float _2956 = _2953 * _2949;
                        float _2963 = exp2(log2(1.0 / ((_2939 * 3.5) + 5.0)) * 0.25);
                        float _2964 = 1.0 - _489;
                        float _2971 = sqrt(1.0 - ((1.0 - (_2964 * _2964)) * (1.0 - (_2963 * _2963))));
                        float _2972 = _2971 * _2971;
                        float _2973 = _2972 * _2972;
                        float _2974 = _2954 + _2919;
                        float _2975 = _2955 + _2920;
                        float _2976 = _2956 + _2921;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2984 = dot(vec3(_413, _416, _419), vec3(_2954, _2955, _2956));
                        float _4277 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
                        float _2988 = dot(vec3(_413, _416, _419), vec3(_2980 * _2974, _2980 * _2975, _2980 * _2976));
                        float _4288 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2991 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
                        float _2995 = ((_2991 * _2991) * (_2973 + (-1.0))) + 1.0;
                        float _2996 = _2932 * _2972;
                        float _2997 = _2996 * _2996;
                        float _3000 = ((1.0 - _2997) * _2922) + _2997;
                        float _4299 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3001 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                        float _3002 = 1.0 - _2972;
                        float _3012 = (0.5 / (((_3001 * ((_2987 * _3002) + _2972)) + 9.9999999392252902907785028219223e-09) + (((_3001 * _3002) + _2972) * _2987))) * _3001;
                        float _4310 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3023 = (((_2973 * 3.1415927410125732421875) * (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) / ((_2995 * _2995) * ((_2939 * 2.1991131305694580078125) + 3.141590118408203125))) * _2928;
                        _2781 = (_2943 * _2891.x) + _2849;
                        _2782 = (_2943 * _2891.y) + _2850;
                        _2783 = (_2943 * _2891.z) + _2851;
                        _2778 = (_3023 * _2908.x) + _2846;
                        _2779 = (_3023 * _2908.y) + _2847;
                        _2780 = (_3023 * _2908.z) + _2848;
                        if (_2853 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2846 = _2778;
                            _2847 = _2779;
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2853;
                        }
                    }
                    frontier_phi_68_pred = _2783;
                    frontier_phi_68_pred_1 = _2782;
                    frontier_phi_68_pred_2 = _2781;
                    frontier_phi_68_pred_3 = _2779;
                    frontier_phi_68_pred_4 = _2778;
                    frontier_phi_68_pred_5 = _2780;
                }
                _2589 = frontier_phi_68_pred;
                _2587 = frontier_phi_68_pred_1;
                _2585 = frontier_phi_68_pred_2;
                _2581 = frontier_phi_68_pred_3;
                _2579 = frontier_phi_68_pred_4;
                _2583 = frontier_phi_68_pred_5;
                uint _2729 = _2728 + 1u;
                if (_2729 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2722 = _2579;
                    _2723 = _2581;
                    _2724 = _2583;
                    _2725 = _2585;
                    _2726 = _2587;
                    _2727 = _2589;
                    _2728 = _2729;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
        }
        uvec4 _2592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2593 = _2592.z;
        uint _2595 = (_2593 >> 8u) & 15u;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        if (((4294967295u << _2595) & _2497) == 0u)
        {
            _2690 = _2578;
            _2692 = _2580;
            _2694 = _2582;
            _2696 = _2584;
            _2698 = _2586;
            _2700 = _2588;
        }
        else
        {
            float _2715 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
            float _2716 = _2715 * _1555;
            float _2717 = _2715 * _1556;
            float _2718 = _2715 * _1557;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2595 < ((_2593 >> 12u) & 15u))
            {
                float _2691;
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2829 = _2578;
                float _2830 = _2580;
                float _2831 = _2582;
                float _2832 = _2584;
                float _2833 = _2586;
                float _2834 = _2588;
                uint _2835 = _2595;
                uint _2844;
                bool _2845;
                for (;;)
                {
                    _2844 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2835 << 2u)) >> 2u)).x;
                    _2845 = _2844 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2845)
                    {
                        frontier_phi_74_pred = _2831;
                        frontier_phi_74_pred_1 = _2830;
                        frontier_phi_74_pred_2 = _2829;
                        frontier_phi_74_pred_3 = _2834;
                        frontier_phi_74_pred_4 = _2833;
                        frontier_phi_74_pred_5 = _2832;
                    }
                    else
                    {
                        float _3028;
                        float _3029;
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3324;
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3041 = _2829;
                        float _3042 = _2830;
                        float _3043 = _2831;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        uint _3047 = _2844;
                        uint _3048;
                        vec4 _3073;
                        float _3074;
                        vec4 _3089;
                        vec3 _3101;
                        vec4 _3117;
                        vec4 _3133;
                        float _3180;
                        bool _3181;
                        for (;;)
                        {
                            uint _3058 = ((_2835 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3047));
                            _3048 = (_3047 + 4294967295u) & _3047;
                            uint _3060 = _3058 * 40u;
                            _3073 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3060)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3060 + 3u)).x));
                            _3074 = _3073.w;
                            uint _3076 = (_3058 * 40u) + 4u;
                            _3089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 3u)).x));
                            uint _3091 = (_3058 * 40u) + 8u;
                            _3101 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3091 + 2u)).x));
                            uint _3104 = (_3058 * 40u) + 16u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3120 = (_3058 * 40u) + 20u;
                            _3133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3120 + 3u)).x));
                            uint _3136 = (_3058 * 40u) + 24u;
                            vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3136)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3136 + 3u)).x));
                            uint _3155 = (_3058 * 40u) + 28u;
                            vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3155)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3155 + 3u)).x));
                            _3180 = fma(_1557, _3168.z, fma(_1556, _3168.y, _3168.x * _1555)) + _3168.w;
                            _3181 = !((fma(_1557, _3149.z, fma(_1556, _3149.y, _3149.x * _1555)) + _3149.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3181)
                            {
                                float _3208 = _3073.x - _1555;
                                float _3209 = _3073.y - _1556;
                                float _3210 = _3073.z - _1557;
                                float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                                float _3214 = inversesqrt(_3211);
                                float _3215 = _3214 * _3208;
                                float _3216 = _3214 * _3209;
                                float _3217 = _3214 * _3210;
                                float _3221 = 1.0 - (_3211 / (_3074 * _3074));
                                float _4321 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3226 = sqrt(_3211) * _3089.w;
                                float _3228 = 1.39999997615814208984375 / (_3226 + 1.39999997615814208984375);
                                float _3229 = _3228 * _3228;
                                float _3232 = ((1.0 - _3229) * dot(vec3(_3215, _3216, _3217), vec3(_413, _416, _419))) + _3229;
                                float _3235 = _3226 * _3226;
                                float _3239 = (fma(_1557, _3117.z, fma(_1556, _3117.y, _3117.x * _1555)) + _3117.w) / _3180;
                                float _3240 = (fma(_1557, _3133.z, fma(_1556, _3133.y, _3133.x * _1555)) + _3133.w) / _3180;
                                float _3244 = 1.0 - dot(vec2(_3239, _3240), vec2(_3239, _3240));
                                float _4337 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                                float _3245 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
                                float _3246 = _3245 * (((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3222) / ((_3235 * 0.699999988079071044921875) + 1.0));
                                float _3258 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                                float _3259 = 1.0 - _489;
                                float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                                float _3267 = _3266 * _3266;
                                float _3268 = _3267 * _3267;
                                float _3269 = _3215 - _2716;
                                float _3270 = _3216 - _2717;
                                float _3271 = _3217 - _2718;
                                float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                                float _3279 = dot(vec3(_413, _416, _419), vec3((-0.0) - _2716, (-0.0) - _2717, (-0.0) - _2718));
                                float _4348 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3282 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
                                float _3283 = dot(vec3(_413, _416, _419), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                                float _4359 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3286 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
                                float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                                float _3291 = _3228 * _3267;
                                float _3292 = _3291 * _3291;
                                float _3298 = ((1.0 - _3292) * dot(vec3(_413, _416, _419), vec3(_3215, _3216, _3217))) + _3292;
                                float _4370 = isnan(0.0) ? _3298 : (isnan(_3298) ? 0.0 : max(_3298, 0.0));
                                float _3299 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                                float _3300 = 1.0 - _3267;
                                float _3310 = (0.5 / (((_3299 * ((_3282 * _3300) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3299 * _3300) + _3267) * _3282))) * _3299;
                                float _4381 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3320 = (_3245 * _3222) * (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0)))) / ((_3290 * _3290) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3320 * _3101.z;
                                frontier_phi_80_pred_1 = _3320 * _3101.y;
                                frontier_phi_80_pred_2 = _3320 * _3101.x;
                                frontier_phi_80_pred_3 = _3246 * _3089.z;
                                frontier_phi_80_pred_4 = _3246 * _3089.y;
                                frontier_phi_80_pred_5 = _3246 * _3089.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3326 = frontier_phi_80_pred;
                            _3325 = frontier_phi_80_pred_1;
                            _3324 = frontier_phi_80_pred_2;
                            _3329 = frontier_phi_80_pred_3;
                            _3328 = frontier_phi_80_pred_4;
                            _3327 = frontier_phi_80_pred_5;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            _3033 = _3329 + _3046;
                            _3028 = _3324 + _3041;
                            _3029 = _3325 + _3042;
                            _3030 = _3326 + _3043;
                            if (_3048 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3048;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3030;
                        frontier_phi_74_pred_1 = _3029;
                        frontier_phi_74_pred_2 = _3028;
                        frontier_phi_74_pred_3 = _3033;
                        frontier_phi_74_pred_4 = _3032;
                        frontier_phi_74_pred_5 = _3031;
                    }
                    _2695 = frontier_phi_74_pred;
                    _2693 = frontier_phi_74_pred_1;
                    _2691 = frontier_phi_74_pred_2;
                    _2701 = frontier_phi_74_pred_3;
                    _2699 = frontier_phi_74_pred_4;
                    _2697 = frontier_phi_74_pred_5;
                    uint _2836 = _2835 + 1u;
                    if (_2836 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2829 = _2691;
                        _2830 = _2693;
                        _2831 = _2695;
                        _2832 = _2697;
                        _2833 = _2699;
                        _2834 = _2701;
                        _2835 = _2836;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2699;
                frontier_phi_62_63_ladder_1 = _2697;
                frontier_phi_62_63_ladder_2 = _2695;
                frontier_phi_62_63_ladder_3 = _2701;
                frontier_phi_62_63_ladder_4 = _2693;
                frontier_phi_62_63_ladder_5 = _2691;
            }
            else
            {
                frontier_phi_62_63_ladder = _2586;
                frontier_phi_62_63_ladder_1 = _2584;
                frontier_phi_62_63_ladder_2 = _2582;
                frontier_phi_62_63_ladder_3 = _2588;
                frontier_phi_62_63_ladder_4 = _2580;
                frontier_phi_62_63_ladder_5 = _2578;
            }
            _2690 = frontier_phi_62_63_ladder_5;
            _2692 = frontier_phi_62_63_ladder_4;
            _2694 = frontier_phi_62_63_ladder_2;
            _2696 = frontier_phi_62_63_ladder_1;
            _2698 = frontier_phi_62_63_ladder;
            _2700 = frontier_phi_62_63_ladder_3;
        }
        float _2705 = isnan(1.0) ? _473 : (isnan(_473) ? 1.0 : min(_473, 1.0));
        _2509 = (_2705 * _2696) + _2022;
        _2511 = (_2705 * _2698) + _2024;
        _2513 = (_2705 * _2700) + _2026;
        _2515 = ((_2690 * _458) * _2705) + _2360;
        _2517 = ((_2692 * _460) * _2705) + _2362;
        _2519 = ((_2694 * _461) * _2705) + _2364;
    }
    else
    {
        _2509 = _2022;
        _2511 = _2024;
        _2513 = _2026;
        _2515 = _2360;
        _2517 = _2362;
        _2519 = _2364;
    }
    float _4397 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4408 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4419 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4430 = isnan(0.0) ? _304 : (isnan(_304) ? 0.0 : max(_304, 0.0));
    float _2544 = cbInstanceData._m0[_432 + 6u].w * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)));
    float _2549 = _391 / cbSceneParam._m0[86u].x;
    float _2550 = _392 / cbSceneParam._m0[86u].y;
    vec4 _2564 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2566 = _2564.x;
    float _2567 = _2564.y;
    float _2568 = _2564.z;
    float _2569 = _2564.w;
    float _2640;
    float _2642;
    float _2644;
    float _2646;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2603 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2604 = _2603 / _325;
        float _2615 = _2604 * _376;
        float _2616 = _377 * _2604;
        float _2617 = (-0.0) - _2616;
        float _2618 = _2604 * _378;
        float _2620 = (cbSceneParam._m0[77u].w * _2617) / _2603;
        float _2621 = _2620 + cbSceneParam._m0[79u].w;
        float _2622 = cbSceneParam._m0[79u].w - _2616;
        float _2628 = sqrt(((_2615 * _2615) + (_2616 * _2616)) + (_2618 * _2618));
        float _2631 = (1.0 - (cbSceneParam._m0[77u].w / _2603)) * _2628;
        float _2636 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2638 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2791;
        if (abs((_2617 - _2620) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2791 = ((((_2621 > 0.0) ? exp2(_2636 * _2621) : (2.0 - exp2(_2638 * _2621))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2631;
        }
        else
        {
            float _2751 = 1.0 / cbSceneParam._m0[80u].x;
            float _2752 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : max(_2621, _2622));
            float _2753 = isnan(_2622) ? _2621 : (isnan(_2621) ? _2622 : min(_2621, _2622));
            float _2762 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : min(_2752, 0.0));
            float _2763 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : min(_2753, 0.0));
            _2791 = ((abs(_2628 / _2617) * cbSceneParam._m0[80u].y) * ((((_2762 - _2763) * 2.0) - ((exp2(_2636 * (isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0)))) - exp2(_2636 * (isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0))))) * _2751)) - ((exp2(_2638 * _2762) - exp2(_2638 * _2763)) * _2751))) + (_2631 * cbSceneParam._m0[80u].z);
        }
        vec4 _2793 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2549, _2550, 1.0), 0.0);
        float _2802 = exp2((_2791 * (-1.44269502162933349609375)) * (1.0 - _2793.w));
        float _2803 = log2(_2802);
        float _2819 = log2(_2569);
        _2640 = (exp2(_2819 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].x)) * _2793.x) / cbSceneParam._m0[78u].x)) + _2566;
        _2642 = (exp2(_2819 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].y)) * _2793.y) / cbSceneParam._m0[78u].y)) + _2567;
        _2644 = (exp2(_2819 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2803 * cbSceneParam._m0[78u].z)) * _2793.z) / cbSceneParam._m0[78u].z)) + _2568;
        _2646 = _2802 * _2569;
    }
    else
    {
        _2640 = _2566;
        _2642 = _2567;
        _2644 = _2568;
        _2646 = _2569;
    }
    float _2658 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2659 = _2658 == 3.0;
    float _2660 = log2(_2646);
    float _2667 = exp2(_2660 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2509 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _473))) + ((_2515 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2668 = exp2(_2660 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2511 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _473))) + ((_2517 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2669 = exp2(_2660 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2513 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _473))) + ((_2519 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1283)) * cbPerFrame._m0[3u].x));
    float _2678 = (_2658 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2678 * (_2659 ? _2667 : (_2667 + (cbSceneParam._m0[72u].w * _2640)));
    SV_Target.y = _2678 * (_2659 ? _2668 : (_2668 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.z = _2678 * (_2659 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.w = _2544;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2544;
}


