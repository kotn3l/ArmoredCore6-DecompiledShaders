#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _863;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _187 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _188 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _189 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_187, _188, _189), vec3(_187, _188, _189)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    float _233 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _234 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _247 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_233 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_234 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _254 = _247.x * cbMtdParam._m0[9u].x;
    float _255 = _247.y * cbMtdParam._m0[9u].y;
    float _256 = _247.z * cbMtdParam._m0[9u].z;
    float _257 = _247.w * TEXCOORD_1.z;
    vec4 _269 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _233) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _234) + cbTextureTilingScale._m0[2u].w));
    float _273 = cbMtdParam._m0[10u].x + _269.x;
    vec4 _285 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _233) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _234) + cbTextureTilingScale._m0[1u].w));
    float _289 = _285.z;
    float _293 = (_285.x * 2.0) + (-1.0);
    float _295 = (_285.y * 2.0) + (-1.0);
    float _296 = dot(vec2(_293, _295), vec2(_293, _295));
    float _3225 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _302 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _305 = fma(_302, _217, fma(_295, _209 * TANGENT.x, (_195 * _187) * _293));
    float _308 = fma(_302, _218, fma(_295, _209 * TANGENT.y, (_195 * _188) * _293));
    float _311 = fma(_302, _219, fma(_295, _209 * TANGENT.z, (_195 * _189) * _293));
    float _315 = inversesqrt(dot(vec3(_305, _308, _311), vec3(_305, _308, _311)));
    float _316 = _315 * _305;
    float _317 = _315 * _308;
    float _318 = _315 * _311;
    float _3236 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _319 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _320 = isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0));
    float _3258 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3269 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3280 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3291 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _324 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_318, cbSceneParam._m0[5u].z, fma(_317, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _316));
    float _431 = fma(_318, cbSceneParam._m0[6u].z, fma(_317, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _316));
    float _434 = fma(_318, cbSceneParam._m0[7u].z, fma(_317, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _316));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = (_447 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3302 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _462 = 1.0 - _324;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _324;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _324;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _324;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD_1.w;
    float _489 = dot(vec3(_316, _317, _318), vec3(_398, _399, _400));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _316) - _398;
    float _497 = (_492 * _317) - _399;
    float _498 = (_492 * _318) - _400;
    float _502 = abs(dot(vec3(_398, _399, _400), vec3(_316, _317, _318)));
    float _3335 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_320);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _591 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _595 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _620 = _552 + _316;
        float _621 = _556 + _317;
        float _622 = _560 + _318;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_316, _317, _318), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3361 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3372 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3383 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_316, _317, _318), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3416 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_316, _317, _318), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3449 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _907 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _911 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _934 = _552 + _316;
        float _935 = _556 + _317;
        float _936 = _560 + _318;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_316, _317, _318), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3512 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_316, _317, _318), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3545 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_316, _317, _318), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3578 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _496 * 0.5;
    float _1241 = _497 * 0.5;
    float _1242 = _498 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1372 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1375 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1403 = frontier_phi_16_14_ladder;
        }
        float _1631;
        if (_1372 > 0.0)
        {
            _1631 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1631 = frontier_phi_25_21_ladder;
        }
        float _1888;
        if (_1375 > 0.0)
        {
            _1888 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1888 = frontier_phi_37_32_ladder;
        }
        float _1890 = isnan(_1631) ? _1403 : (isnan(_1403) ? _1631 : min(_1403, _1631));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1369) + _1358;
        float _1896 = (_1891 * _1372) + _1362;
        float _1897 = (_1891 * _1375) + _1366;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1898;
        float _1902 = _1898 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 > _1902) || ((_1896 < _1900) || ((_1895 < _1900) || (_1895 > _1902))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1897, cbModelParam._m0[9u].z, fma(_1896, cbModelParam._m0[9u].y, _1895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1897, cbModelParam._m0[10u].z, fma(_1896, cbModelParam._m0[10u].y, _1895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1897, cbModelParam._m0[11u].z, fma(_1896, cbModelParam._m0[11u].y, _1895 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_15_37_ladder = _2025.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2025.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_15_37_ladder_2;
        _1393 = frontier_phi_15_37_ladder_1;
        _1395 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1456 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1460 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1464 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1467 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1470 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1473 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1636;
        if (_1467 > 0.0)
        {
            _1636 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1636 = frontier_phi_27_23_ladder;
        }
        float _1915;
        if (_1470 > 0.0)
        {
            _1915 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1915 = frontier_phi_39_34_ladder;
        }
        float _2128;
        if (_1473 > 0.0)
        {
            _2128 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2128 = frontier_phi_48_45_ladder;
        }
        float _2130 = isnan(_1915) ? _1636 : (isnan(_1636) ? _1915 : min(_1636, _1915));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1467) + _1456;
        float _2136 = (_2131 * _1470) + _1460;
        float _2137 = (_2131 * _1473) + _1464;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2138;
        float _2141 = _2138 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2137 > _2141) || ((_2137 < _2139) || ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 < _2139) || (_2135 > _2141))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2137, cbModelParam._m0[17u].z, fma(_2136, cbModelParam._m0[17u].y, _2135 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2137, cbModelParam._m0[18u].z, fma(_2136, cbModelParam._m0[18u].y, _2135 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2137, cbModelParam._m0[19u].z, fma(_2136, cbModelParam._m0[19u].y, _2135 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_24_48_ladder = _2337.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2337.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2337.x * cbModelParam._m0[1u].z;
        }
        _1492 = frontier_phi_24_48_ladder_2;
        _1494 = frontier_phi_24_48_ladder_1;
        _1496 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1400);
        _1492 = _1476.x * cbModelParam._m0[1u].z;
        _1494 = _1476.y * cbModelParam._m0[1u].z;
        _1496 = _1476.z * cbModelParam._m0[1u].z;
    }
    float _1509 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1492 - _1391)) + _1391);
    float _1511 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1494 - _1393)) + _1393);
    float _1513 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1496 - _1395)) + _1395);
    float _1516 = fma(_1513, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1509 * cbSceneParam._m0[89u].x));
    float _1519 = fma(_1513, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1509 * cbSceneParam._m0[90u].x));
    float _1522 = fma(_1513, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1509 * cbSceneParam._m0[91u].x));
    vec4 _1530 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1532 = _1530.w;
    float _1544 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1532);
    float _1545 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1532);
    float _1546 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1532);
    uvec4 _1550 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1552 = _1550.x * 14u;
    uint _1553 = _1552 + 13u;
    float _1560 = _488 + (-1.0);
    float _1565 = (cbLight._m0[_1553].x * _1560) + 1.0;
    float _1566 = (cbLight._m0[_1553].y * _1560) + 1.0;
    float _1567 = (cbLight._m0[_1553].z * _1560) + 1.0;
    float _1568 = (cbLight._m0[_1553].w * _1560) + 1.0;
    uint _1569 = _1552 + 5u;
    float _1575 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1579 = _1552 + 4u;
    float _1589 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
    uint _1593 = _1552 | 1u;
    float _1604 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_316, _317, _318));
    float _1607 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_316, _317, _318));
    float _3714 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _3725 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
    float _1612 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1614 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1621 = ((cbLight._m0[_1569].x * _1575) * _1614) + (((cbLight._m0[_1579].x * _1544) * _1589) * _1612);
    float _1622 = ((_1575 * cbLight._m0[_1569].y) * _1614) + (((cbLight._m0[_1579].y * _1545) * _1589) * _1612);
    float _1623 = ((_1575 * cbLight._m0[_1569].z) * _1614) + (((cbLight._m0[_1579].z * _1546) * _1589) * _1612);
    uvec4 _1628 = floatBitsToUint(cbLight._m0[_1552 + 12u]);
    bool _1630 = _1628.x == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1630)
    {
        _1641 = _1621;
        _1643 = _1622;
        _1645 = _1623;
    }
    else
    {
        uint _1649 = _1552 + 6u;
        float _1665 = (dot(vec3(cbLight._m0[_1552 + 2u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3736 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1668 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1641 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1621;
        _1643 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1622;
        _1645 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1623;
    }
    bool _1648 = _1628.y == 0u;
    float _1686;
    float _1688;
    float _1690;
    if (_1648)
    {
        _1686 = _1641;
        _1688 = _1643;
        _1690 = _1645;
    }
    else
    {
        uint _1859 = _1552 + 7u;
        float _1875 = (dot(vec3(cbLight._m0[_1552 + 3u].xyz), vec3(_316, _317, _318)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3752 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1878 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1686 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1641;
        _1688 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1643;
        _1690 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1645;
    }
    uint _1693 = _1552 + 8u;
    float _1706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1552].w)) * _320) * 0.949999988079071044921875);
    float _1707 = _1706 * _1706;
    float _1708 = cbLight._m0[_1552].x + _398;
    float _1709 = cbLight._m0[_1552].y + _399;
    float _1710 = cbLight._m0[_1552].z + _400;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1715 = _1714 * _1708;
    float _1716 = _1714 * _1709;
    float _1717 = _1714 * _1710;
    float _1718 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1552].xyz));
    float _3768 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _3779 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1722 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _1723 = dot(vec3(_316, _317, _318), vec3(_1715, _1716, _1717));
    float _3790 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1727 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1715, _1716, _1717));
    float _3801 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1731 = _1707 * _1707;
    float _1735 = ((_1726 * _1726) * (_1731 + (-1.0))) + 1.0;
    float _1743 = exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * 5.0);
    float _1744 = 0.959999978542327880859375 - _470;
    float _1746 = 0.959999978542327880859375 - _471;
    float _1747 = 0.959999978542327880859375 - _472;
    float _1754 = 1.0 - _1707;
    float _1765 = (0.5 / (((_1722 * ((_1721 * _1754) + _1707)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1754) + _1707) * _1721))) * _1721;
    float _3812 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1731 / ((_1735 * _1735) * 3.141590118408203125));
    uint _1781 = _1552 + 9u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1593].w)) * _320) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1593].x + _398;
    float _1795 = cbLight._m0[_1593].y + _399;
    float _1796 = cbLight._m0[_1593].z + _400;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1593].xyz));
    float _3823 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _1808 = dot(vec3(_316, _317, _318), vec3(_1801, _1802, _1803));
    float _3834 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1801, _1802, _1803));
    float _3845 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1793 * _1793;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1827 = exp2(log2(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * 5.0);
    float _1834 = 1.0 - _1793;
    float _1844 = (0.5 / (((_1722 * ((_1807 * _1834) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1834) + _1793) * _1807))) * _1807;
    float _3856 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1856 = (((((_1827 * _1744) + _473) * cbLight._m0[_1781].x) * _1846) * _1575) + ((((cbLight._m0[_1693].x * _1544) * ((_1743 * _1744) + _473)) * _1767) * _1589);
    float _1857 = (((((_1827 * _1746) + _475) * cbLight._m0[_1781].y) * _1846) * _1575) + ((((cbLight._m0[_1693].y * _1545) * ((_1743 * _1746) + _475)) * _1767) * _1589);
    float _1858 = (((((_1827 * _1747) + _476) * cbLight._m0[_1781].z) * _1846) * _1575) + ((((cbLight._m0[_1693].z * _1546) * ((_1743 * _1747) + _476)) * _1767) * _1589);
    float _1920;
    float _1922;
    float _1924;
    if (_1630)
    {
        _1920 = _1856;
        _1922 = _1857;
        _1924 = _1858;
    }
    else
    {
        uint _1926 = _1552 + 2u;
        uint _1930 = _1552 + 10u;
        float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _320) * 0.949999988079071044921875);
        float _1945 = _1944 * _1944;
        float _1946 = cbLight._m0[_1926].x + _398;
        float _1947 = cbLight._m0[_1926].y + _399;
        float _1948 = cbLight._m0[_1926].z + _400;
        float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
        float _1953 = _1952 * _1946;
        float _1954 = _1952 * _1947;
        float _1955 = _1952 * _1948;
        float _1956 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_1926].xyz));
        float _3867 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1960 = dot(vec3(_316, _317, _318), vec3(_1953, _1954, _1955));
        float _3878 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1953, _1954, _1955));
        float _3889 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1968 = _1945 * _1945;
        float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
        float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * 5.0);
        float _1986 = 1.0 - _1945;
        float _1996 = (0.5 / (((_1722 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1986) + _1945) * _1959))) * _1959;
        float _3900 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1998 = (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
        float _1999 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
        _1920 = (((((_1979 * _1744) + _473) * cbLight._m0[_1930].x) * _1998) * _1999) + _1856;
        _1922 = (((((_1979 * _1746) + _475) * cbLight._m0[_1930].y) * _1998) * _1999) + _1857;
        _1924 = (((((_1979 * _1747) + _476) * cbLight._m0[_1930].z) * _1998) * _1999) + _1858;
    }
    float _2034;
    float _2036;
    float _2038;
    if (_1648)
    {
        _2034 = _1920;
        _2036 = _1922;
        _2038 = _1924;
    }
    else
    {
        uint _2045 = _1552 + 3u;
        uint _2049 = _1552 + 11u;
        float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _320) * 0.949999988079071044921875);
        float _2064 = _2063 * _2063;
        float _2065 = cbLight._m0[_2045].x + _398;
        float _2066 = cbLight._m0[_2045].y + _399;
        float _2067 = cbLight._m0[_2045].z + _400;
        float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
        float _2072 = _2071 * _2065;
        float _2073 = _2071 * _2066;
        float _2074 = _2071 * _2067;
        float _2075 = dot(vec3(_316, _317, _318), vec3(cbLight._m0[_2045].xyz));
        float _3916 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _2079 = dot(vec3(_316, _317, _318), vec3(_2072, _2073, _2074));
        float _3927 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _2083 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2072, _2073, _2074));
        float _3938 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = _2064 * _2064;
        float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
        float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * 5.0);
        float _2105 = 1.0 - _2064;
        float _2115 = (0.5 / (((_1722 * ((_2078 * _2105) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _2105) + _2064) * _2078))) * _2078;
        float _3949 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _2034 = (((((_2098 * _1744) + _473) * cbLight._m0[_2049].x) * _2117) * _2118) + _1920;
        _2036 = (((((_2098 * _1746) + _475) * cbLight._m0[_2049].y) * _2117) * _2118) + _1922;
        _2038 = (((((_2098 * _1747) + _476) * cbLight._m0[_2049].z) * _2117) * _2118) + _1924;
    }
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_1550.y == 0u)
    {
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2193;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2193;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2193;
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.x;
        uint _2220 = uint((float(_2208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2209))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2209)));
        float _2230 = (log2(_2196 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2231 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        uint _2234 = uint(isnan(14.0) ? _2231 : (isnan(_2231) ? 14.0 : min(_2231, 14.0)));
        uvec4 _2239 = texelFetch(g_lightClusterGridBuffer, int(((_2234 << 2u) + (_2220 << 6u)) >> 2u));
        uint _2240 = _2239.x;
        uint _2241 = _2208.z;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        if (((((1u << ((_2241 >> 4u) & 15u)) + 4294967295u) & _2240) == 0u) || ((_2241 & 240u) == 0u))
        {
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
        }
        else
        {
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            uint _2492 = 0u;
            uint _2501;
            bool _2502;
            for (;;)
            {
                _2501 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2492 << 2u)) >> 2u)).x;
                _2502 = _2501 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2502)
                {
                    frontier_phi_63_pred = _2491;
                    frontier_phi_63_pred_1 = _2490;
                    frontier_phi_63_pred_2 = _2489;
                    frontier_phi_63_pred_3 = _2488;
                    frontier_phi_63_pred_4 = _2487;
                    frontier_phi_63_pred_5 = _2486;
                }
                else
                {
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    uint _2616;
                    _2610 = _2486;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2501;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    for (;;)
                    {
                        uint _2620 = uint(findLSB(_2616)) + (_2492 << 5u);
                        uint _2617 = (_2616 + 4294967295u) & _2616;
                        uint _2622 = _2620 * 48u;
                        vec4 _2636 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2622)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2622 + 3u)).x));
                        uint _2642 = (_2620 * 48u) + 4u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2642)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2642 + 3u)).x));
                        uint _2661 = (_2620 * 48u) + 8u;
                        vec3 _2672 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x));
                        float _2676 = _2636.x - _2194;
                        float _2677 = _2636.y - _2195;
                        float _2678 = _2636.z - _2196;
                        float _2679 = dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678));
                        float _2682 = inversesqrt(_2679);
                        float _2683 = _2682 * _2676;
                        float _2684 = _2682 * _2677;
                        float _2685 = _2682 * _2678;
                        float _2686 = dot(vec3(_428, _431, _434), vec3(_2683, _2684, _2685));
                        float _2691 = 1.0 - (_2679 * _2636.w);
                        float _3975 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
                        float _2692 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
                        float _2693 = sqrt(_2679) * _2655.w;
                        float _2696 = 1.39999997615814208984375 / (_2693 + 1.39999997615814208984375);
                        float _2697 = _2696 * _2696;
                        float _2700 = ((1.0 - _2697) * _2686) + _2697;
                        float _2703 = _2693 * _2693;
                        float _2707 = ((isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0))) * _2692) / ((_2703 * 0.699999988079071044921875) + 1.0);
                        float _2711 = (-0.0) - _2194;
                        float _2712 = (-0.0) - _2195;
                        float _2713 = (-0.0) - _2196;
                        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2728 = exp2(log2(1.0 / ((_2703 * 3.5) + 5.0)) * 0.25);
                        float _2729 = 1.0 - _504;
                        float _2736 = sqrt(1.0 - ((1.0 - (_2729 * _2729)) * (1.0 - (_2728 * _2728))));
                        float _2737 = _2736 * _2736;
                        float _2738 = _2737 * _2737;
                        float _2739 = _2718 + _2683;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
                        float _2749 = dot(vec3(_428, _431, _434), vec3(_2718, _2719, _2720));
                        float _3991 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
                        float _2752 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
                        float _2753 = dot(vec3(_428, _431, _434), vec3(_2745 * _2739, _2745 * _2740, _2745 * _2741));
                        float _4002 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2756 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
                        float _2760 = ((_2756 * _2756) * (_2738 + (-1.0))) + 1.0;
                        float _2761 = _2696 * _2737;
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2686) + _2762;
                        float _4013 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
                        float _2766 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
                        float _2767 = 1.0 - _2737;
                        float _2777 = (0.5 / (((_2766 * ((_2752 * _2767) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2766 * _2767) + _2737) * _2752))) * _2766;
                        float _4024 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2788 = (((_2738 * 3.1415927410125732421875) * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) / ((_2760 * _2760) * ((_2703 * 2.1991131305694580078125) + 3.141590118408203125))) * _2692;
                        _2545 = (_2707 * _2655.x) + _2613;
                        _2546 = (_2707 * _2655.y) + _2614;
                        _2547 = (_2707 * _2655.z) + _2615;
                        _2542 = (_2788 * _2672.x) + _2610;
                        _2543 = (_2788 * _2672.y) + _2611;
                        _2544 = (_2788 * _2672.z) + _2612;
                        if (_2617 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2610 = _2542;
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2617;
                        }
                    }
                    frontier_phi_63_pred = _2547;
                    frontier_phi_63_pred_1 = _2546;
                    frontier_phi_63_pred_2 = _2545;
                    frontier_phi_63_pred_3 = _2544;
                    frontier_phi_63_pred_4 = _2543;
                    frontier_phi_63_pred_5 = _2542;
                }
                _2353 = frontier_phi_63_pred;
                _2351 = frontier_phi_63_pred_1;
                _2349 = frontier_phi_63_pred_2;
                _2347 = frontier_phi_63_pred_3;
                _2345 = frontier_phi_63_pred_4;
                _2343 = frontier_phi_63_pred_5;
                uint _2493 = _2492 + 1u;
                if (_2493 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2486 = _2343;
                    _2487 = _2345;
                    _2488 = _2347;
                    _2489 = _2349;
                    _2490 = _2351;
                    _2491 = _2353;
                    _2492 = _2493;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
        }
        uvec4 _2356 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2357 = _2356.z;
        uint _2359 = (_2357 >> 8u) & 15u;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        float _2464;
        if (((4294967295u << _2359) & _2240) == 0u)
        {
            _2454 = _2342;
            _2456 = _2344;
            _2458 = _2346;
            _2460 = _2348;
            _2462 = _2350;
            _2464 = _2352;
        }
        else
        {
            float _2479 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
            float _2480 = _2479 * _2194;
            float _2481 = _2479 * _2195;
            float _2482 = _2479 * _2196;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2359 < ((_2357 >> 12u) & 15u))
            {
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2465;
                float _2593 = _2342;
                float _2594 = _2344;
                float _2595 = _2346;
                float _2596 = _2348;
                float _2597 = _2350;
                float _2598 = _2352;
                uint _2599 = _2359;
                uint _2608;
                bool _2609;
                for (;;)
                {
                    _2608 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                    _2609 = _2608 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2609)
                    {
                        frontier_phi_69_pred = _2598;
                        frontier_phi_69_pred_1 = _2597;
                        frontier_phi_69_pred_2 = _2596;
                        frontier_phi_69_pred_3 = _2595;
                        frontier_phi_69_pred_4 = _2594;
                        frontier_phi_69_pred_5 = _2593;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2806 = _2593;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        uint _2812 = _2608;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2599 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2196, _2933.z, fma(_2195, _2933.y, _2933.x * _2194)) + _2933.w;
                            _2946 = !((fma(_2196, _2914.z, fma(_2195, _2914.y, _2914.x * _2194)) + _2914.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _2194;
                                float _2974 = _2838.y - _2195;
                                float _2975 = _2838.z - _2196;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _4035 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_428, _431, _434))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2196, _2882.z, fma(_2195, _2882.y, _2882.x * _2194)) + _2882.w) / _2945;
                                float _3005 = (fma(_2196, _2898.z, fma(_2195, _2898.y, _2898.x * _2194)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _4051 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _504;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2480;
                                float _3035 = _2981 - _2481;
                                float _3036 = _2982 - _2482;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2480, (-0.0) - _2481, (-0.0) - _2482));
                                float _4062 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
                                float _3048 = dot(vec3(_428, _431, _434), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _4073 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_428, _431, _434), vec3(_2980, _2981, _2982))) + _3057;
                                float _4084 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4095 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3011 * _2854.z;
                                frontier_phi_75_pred_1 = _3011 * _2854.y;
                                frontier_phi_75_pred_2 = _3011 * _2854.x;
                                frontier_phi_75_pred_3 = _3085 * _2866.z;
                                frontier_phi_75_pred_4 = _3085 * _2866.y;
                                frontier_phi_75_pred_5 = _3085 * _2866.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_75_pred;
                            _3093 = frontier_phi_75_pred_1;
                            _3092 = frontier_phi_75_pred_2;
                            _3091 = frontier_phi_75_pred_3;
                            _3090 = frontier_phi_75_pred_4;
                            _3089 = frontier_phi_75_pred_5;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2798;
                        frontier_phi_69_pred_1 = _2797;
                        frontier_phi_69_pred_2 = _2796;
                        frontier_phi_69_pred_3 = _2795;
                        frontier_phi_69_pred_4 = _2794;
                        frontier_phi_69_pred_5 = _2793;
                    }
                    _2465 = frontier_phi_69_pred;
                    _2463 = frontier_phi_69_pred_1;
                    _2461 = frontier_phi_69_pred_2;
                    _2459 = frontier_phi_69_pred_3;
                    _2457 = frontier_phi_69_pred_4;
                    _2455 = frontier_phi_69_pred_5;
                    uint _2600 = _2599 + 1u;
                    if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2593 = _2455;
                        _2594 = _2457;
                        _2595 = _2459;
                        _2596 = _2461;
                        _2597 = _2463;
                        _2598 = _2465;
                        _2599 = _2600;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2465;
                frontier_phi_57_58_ladder_1 = _2463;
                frontier_phi_57_58_ladder_2 = _2461;
                frontier_phi_57_58_ladder_3 = _2459;
                frontier_phi_57_58_ladder_4 = _2457;
                frontier_phi_57_58_ladder_5 = _2455;
            }
            else
            {
                frontier_phi_57_58_ladder = _2352;
                frontier_phi_57_58_ladder_1 = _2350;
                frontier_phi_57_58_ladder_2 = _2348;
                frontier_phi_57_58_ladder_3 = _2346;
                frontier_phi_57_58_ladder_4 = _2344;
                frontier_phi_57_58_ladder_5 = _2342;
            }
            _2454 = frontier_phi_57_58_ladder_5;
            _2456 = frontier_phi_57_58_ladder_4;
            _2458 = frontier_phi_57_58_ladder_3;
            _2460 = frontier_phi_57_58_ladder_2;
            _2462 = frontier_phi_57_58_ladder_1;
            _2464 = frontier_phi_57_58_ladder;
        }
        float _2469 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2252 = (_2469 * _2460) + _1686;
        _2254 = (_2469 * _2462) + _1688;
        _2256 = (_2469 * _2464) + _1690;
        _2258 = ((_2454 * _473) * _2469) + _2034;
        _2260 = ((_2456 * _475) * _2469) + _2036;
        _2262 = ((_2458 * _476) * _2469) + _2038;
    }
    else
    {
        _2252 = _1686;
        _2254 = _1688;
        _2256 = _1690;
        _2258 = _2034;
        _2260 = _2036;
        _2262 = _2038;
    }
    float _4111 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4122 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4133 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4144 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _2287 = cbInstanceData._m0[_447 + 6u].w * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)));
    float _2292 = _406 / cbSceneParam._m0[86u].x;
    float _2293 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2307 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2309 = _2307.x;
    float _2310 = _2307.y;
    float _2311 = _2307.z;
    float _2312 = _2307.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2367 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2368 = _2367 / _340;
        float _2379 = _2368 * _391;
        float _2380 = _392 * _2368;
        float _2381 = (-0.0) - _2380;
        float _2382 = _2368 * _393;
        float _2384 = (cbSceneParam._m0[77u].w * _2381) / _2367;
        float _2385 = _2384 + cbSceneParam._m0[79u].w;
        float _2386 = cbSceneParam._m0[79u].w - _2380;
        float _2392 = sqrt(((_2379 * _2379) + (_2380 * _2380)) + (_2382 * _2382));
        float _2395 = (1.0 - (cbSceneParam._m0[77u].w / _2367)) * _2392;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2555;
        if (abs((_2381 - _2384) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2555 = ((((_2385 > 0.0) ? exp2(_2400 * _2385) : (2.0 - exp2(_2402 * _2385))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2395;
        }
        else
        {
            float _2515 = 1.0 / cbSceneParam._m0[80u].x;
            float _2516 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : max(_2385, _2386));
            float _2517 = isnan(_2386) ? _2385 : (isnan(_2385) ? _2386 : min(_2385, _2386));
            float _2526 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : min(_2516, 0.0));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            _2555 = ((abs(_2392 / _2381) * cbSceneParam._m0[80u].y) * ((((_2526 - _2527) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))))) * _2515)) - ((exp2(_2402 * _2526) - exp2(_2402 * _2527)) * _2515))) + (_2395 * cbSceneParam._m0[80u].z);
        }
        vec4 _2557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2292, _2293, 1.0), 0.0);
        float _2566 = exp2((_2555 * (-1.44269502162933349609375)) * (1.0 - _2557.w));
        float _2567 = log2(_2566);
        float _2583 = log2(_2312);
        _2404 = (exp2(_2583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].x)) * _2557.x) / cbSceneParam._m0[78u].x)) + _2309;
        _2406 = (exp2(_2583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].y)) * _2557.y) / cbSceneParam._m0[78u].y)) + _2310;
        _2408 = (exp2(_2583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].z)) * _2557.z) / cbSceneParam._m0[78u].z)) + _2311;
        _2410 = _2566 * _2312;
    }
    else
    {
        _2404 = _2309;
        _2406 = _2310;
        _2408 = _2311;
        _2410 = _2312;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2252 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _488))) + ((_2258 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2254 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _488))) + ((_2260 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2256 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _488))) + ((_2262 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1298)) * cbPerFrame._m0[3u].x));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = _2287;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2287;
}


