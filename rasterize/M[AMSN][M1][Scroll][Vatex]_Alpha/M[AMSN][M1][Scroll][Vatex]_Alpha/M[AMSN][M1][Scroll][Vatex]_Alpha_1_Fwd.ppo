#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _183 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _184 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _185 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_183, _184, _185), vec3(_183, _184, _185)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    float _229 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _230 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _243 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_229 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_230 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _250 = _243.x * cbMtdParam._m0[9u].x;
    float _251 = _243.y * cbMtdParam._m0[9u].y;
    float _252 = _243.z * cbMtdParam._m0[9u].z;
    float _253 = _243.w * TEXCOORD_1.z;
    vec4 _266 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _229) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _230) + cbTextureTilingScale._m0[1u].w));
    float _270 = _266.z;
    float _274 = (_266.x * 2.0) + (-1.0);
    float _276 = (_266.y * 2.0) + (-1.0);
    float _277 = dot(vec2(_274, _276), vec2(_274, _276));
    float _3182 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _283 = sqrt(1.0 - (isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0))));
    float _286 = fma(_283, _213, fma(_276, _205 * TANGENT.x, (_191 * _183) * _274));
    float _289 = fma(_283, _214, fma(_276, _205 * TANGENT.y, (_191 * _184) * _274));
    float _292 = fma(_283, _215, fma(_276, _205 * TANGENT.z, (_191 * _185) * _274));
    float _296 = inversesqrt(dot(vec3(_286, _289, _292), vec3(_286, _289, _292)));
    float _297 = _296 * _286;
    float _298 = _296 * _289;
    float _299 = _296 * _292;
    float _3193 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _300 = isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0));
    float _3204 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _301 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
    float _3215 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _3226 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3237 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3248 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _305 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_299, cbSceneParam._m0[5u].z, fma(_298, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _297));
    float _412 = fma(_299, cbSceneParam._m0[6u].z, fma(_298, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _297));
    float _415 = fma(_299, cbSceneParam._m0[7u].z, fma(_298, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _297));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = (_428 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3259 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
    float _3270 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
    float _3281 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _443 = 1.0 - _305;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _305;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _469 = _466.x * TEXCOORD_1.w;
    float _470 = dot(vec3(_297, _298, _299), vec3(_379, _380, _381));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _297) - _379;
    float _478 = (_473 * _298) - _380;
    float _479 = (_473 * _299) - _381;
    float _483 = abs(dot(vec3(_379, _380, _381), vec3(_297, _298, _299)));
    float _3292 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_301);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _297;
        float _602 = _537 + _298;
        float _603 = _541 + _299;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_297, _298, _299), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3318 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3329 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3340 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_297, _298, _299), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3351 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3362 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3373 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_297, _298, _299), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3384 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3395 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3406 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _297;
        float _916 = _537 + _298;
        float _917 = _541 + _299;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_297, _298, _299), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3447 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3458 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3469 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_297, _298, _299), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3480 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3491 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3502 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_297, _298, _299), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3513 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3524 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3535 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1353 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1356 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1384;
        if (_1350 > 0.0)
        {
            _1384 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1384 = frontier_phi_16_14_ladder;
        }
        float _1591;
        if (_1353 > 0.0)
        {
            _1591 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1591 = frontier_phi_25_21_ladder;
        }
        float _1845;
        if (_1356 > 0.0)
        {
            _1845 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1845 = frontier_phi_37_32_ladder;
        }
        float _1847 = isnan(_1591) ? _1384 : (isnan(_1384) ? _1591 : min(_1384, _1591));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1350) + _1339;
        float _1853 = (_1848 * _1353) + _1343;
        float _1854 = (_1848 * _1356) + _1347;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_15_37_ladder = _1982.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1982.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1982.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_15_37_ladder_2;
        _1374 = frontier_phi_15_37_ladder_1;
        _1376 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1290);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1380 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1380 : min(cbModelParam._m0[25u].w, _1380));
    float _1473;
    float _1475;
    float _1477;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1437 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1441 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1445 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1448 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1451 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1454 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1596;
        if (_1448 > 0.0)
        {
            _1596 = abs((1.0 - _1437) / _1448);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1448 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1437 + 1.0) / _1448);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1596 = frontier_phi_27_23_ladder;
        }
        float _1872;
        if (_1451 > 0.0)
        {
            _1872 = abs((1.0 - _1441) / _1451);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1441 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1872 = frontier_phi_39_34_ladder;
        }
        float _2085;
        if (_1454 > 0.0)
        {
            _2085 = abs((1.0 - _1445) / _1454);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1445 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2085 = frontier_phi_48_45_ladder;
        }
        float _2087 = isnan(_1872) ? _1596 : (isnan(_1596) ? _1872 : min(_1596, _1872));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1448) + _1437;
        float _2093 = (_2088 * _1451) + _1441;
        float _2094 = (_2088 * _1454) + _1445;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2095;
        float _2098 = _2095 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2094 > _2098) || ((_2094 < _2096) || ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 < _2096) || (_2092 > _2098))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2294 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2094, cbModelParam._m0[17u].z, fma(_2093, cbModelParam._m0[17u].y, _2092 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2094, cbModelParam._m0[18u].z, fma(_2093, cbModelParam._m0[18u].y, _2092 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2094, cbModelParam._m0[19u].z, fma(_2093, cbModelParam._m0[19u].y, _2092 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_24_48_ladder = _2294.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2294.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2294.x * cbModelParam._m0[1u].z;
        }
        _1473 = frontier_phi_24_48_ladder_2;
        _1475 = frontier_phi_24_48_ladder_1;
        _1477 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1457 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1381);
        _1473 = _1457.x * cbModelParam._m0[1u].z;
        _1475 = _1457.y * cbModelParam._m0[1u].z;
        _1477 = _1457.z * cbModelParam._m0[1u].z;
    }
    float _1490 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1473 - _1372)) + _1372);
    float _1492 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1475 - _1374)) + _1374);
    float _1494 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1477 - _1376)) + _1376);
    float _1497 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1492, cbSceneParam._m0[89u].y, _1490 * cbSceneParam._m0[89u].x));
    float _1500 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1492, cbSceneParam._m0[90u].y, _1490 * cbSceneParam._m0[90u].x));
    float _1503 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1492, cbSceneParam._m0[91u].y, _1490 * cbSceneParam._m0[91u].x));
    uvec4 _1513 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1515 = _1513.x * 14u;
    uint _1516 = _1515 + 13u;
    float _1523 = _469 + (-1.0);
    float _1528 = (cbLight._m0[_1516].x * _1523) + 1.0;
    float _1529 = (cbLight._m0[_1516].y * _1523) + 1.0;
    float _1530 = (cbLight._m0[_1516].z * _1523) + 1.0;
    float _1531 = (cbLight._m0[_1516].w * _1523) + 1.0;
    uint _1532 = _1515 + 5u;
    float _1538 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1542 = _1515 + 4u;
    float _1549 = isnan(1.0) ? _1528 : (isnan(_1528) ? 1.0 : min(_1528, 1.0));
    uint _1553 = _1515 | 1u;
    float _1564 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_297, _298, _299));
    float _1567 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_297, _298, _299));
    float _3671 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
    float _3682 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1572 = (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))) * 0.3183098733425140380859375;
    float _1574 = (isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * 0.3183098733425140380859375;
    float _1581 = ((cbLight._m0[_1532].x * _1538) * _1574) + ((cbLight._m0[_1542].x * _1549) * _1572);
    float _1582 = ((_1538 * cbLight._m0[_1532].y) * _1574) + ((_1549 * cbLight._m0[_1542].y) * _1572);
    float _1583 = ((_1538 * cbLight._m0[_1532].z) * _1574) + ((_1549 * cbLight._m0[_1542].z) * _1572);
    uvec4 _1588 = floatBitsToUint(cbLight._m0[_1515 + 12u]);
    bool _1590 = _1588.x == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1590)
    {
        _1601 = _1581;
        _1603 = _1582;
        _1605 = _1583;
    }
    else
    {
        uint _1609 = _1515 + 6u;
        float _1625 = (dot(vec3(cbLight._m0[_1515 + 2u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1626 = _1625 * _1625;
        float _3693 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1628 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1601 = (((cbLight._m0[_1609].x * 0.3183098733425140380859375) * _1627) * _1628) + _1581;
        _1603 = (((cbLight._m0[_1609].y * 0.3183098733425140380859375) * _1627) * _1628) + _1582;
        _1605 = (((cbLight._m0[_1609].z * 0.3183098733425140380859375) * _1627) * _1628) + _1583;
    }
    bool _1608 = _1588.y == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1608)
    {
        _1646 = _1601;
        _1648 = _1603;
        _1650 = _1605;
    }
    else
    {
        uint _1816 = _1515 + 7u;
        float _1832 = (dot(vec3(cbLight._m0[_1515 + 3u].xyz), vec3(_297, _298, _299)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3709 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1835 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1646 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1601;
        _1648 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1603;
        _1650 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1605;
    }
    uint _1653 = _1515 + 8u;
    float _1666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1515].w)) * _301) * 0.949999988079071044921875);
    float _1667 = _1666 * _1666;
    float _1668 = cbLight._m0[_1515].x + _379;
    float _1669 = cbLight._m0[_1515].y + _380;
    float _1670 = cbLight._m0[_1515].z + _381;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1675 = _1674 * _1668;
    float _1676 = _1674 * _1669;
    float _1677 = _1674 * _1670;
    float _1678 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1515].xyz));
    float _3725 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1682 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1683 = dot(vec3(_297, _298, _299), vec3(_1675, _1676, _1677));
    float _3747 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1515].xyz), vec3(_1675, _1676, _1677));
    float _3758 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1691 = _1667 * _1667;
    float _1695 = ((_1686 * _1686) * (_1691 + (-1.0))) + 1.0;
    float _1703 = exp2(log2(1.0 - (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * 5.0);
    float _1704 = 0.959999978542327880859375 - _451;
    float _1706 = 0.959999978542327880859375 - _452;
    float _1707 = 0.959999978542327880859375 - _453;
    float _1714 = 1.0 - _1667;
    float _1725 = (0.5 / (((_1682 * ((_1681 * _1714) + _1667)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1714) + _1667) * _1681))) * _1681;
    float _3769 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1727 = (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1691 / ((_1695 * _1695) * 3.141590118408203125));
    uint _1738 = _1515 + 9u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _301) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1553].x + _379;
    float _1752 = cbLight._m0[_1553].y + _380;
    float _1753 = cbLight._m0[_1553].z + _381;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1553].xyz));
    float _3780 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1765 = dot(vec3(_297, _298, _299), vec3(_1758, _1759, _1760));
    float _3791 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1758, _1759, _1760));
    float _3802 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1750 * _1750;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1784 = exp2(log2(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * 5.0);
    float _1791 = 1.0 - _1750;
    float _1801 = (0.5 / (((_1682 * ((_1764 * _1791) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1791) + _1750) * _1764))) * _1764;
    float _3813 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    float _1813 = (((((_1784 * _1704) + _454) * cbLight._m0[_1738].x) * _1803) * _1538) + (((((_1703 * _1704) + _454) * cbLight._m0[_1653].x) * _1727) * _1549);
    float _1814 = (((((_1784 * _1706) + _456) * cbLight._m0[_1738].y) * _1803) * _1538) + (((((_1703 * _1706) + _456) * cbLight._m0[_1653].y) * _1727) * _1549);
    float _1815 = (((((_1784 * _1707) + _457) * cbLight._m0[_1738].z) * _1803) * _1538) + (((((_1703 * _1707) + _457) * cbLight._m0[_1653].z) * _1727) * _1549);
    float _1877;
    float _1879;
    float _1881;
    if (_1590)
    {
        _1877 = _1813;
        _1879 = _1814;
        _1881 = _1815;
    }
    else
    {
        uint _1883 = _1515 + 2u;
        uint _1887 = _1515 + 10u;
        float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _301) * 0.949999988079071044921875);
        float _1902 = _1901 * _1901;
        float _1903 = cbLight._m0[_1883].x + _379;
        float _1904 = cbLight._m0[_1883].y + _380;
        float _1905 = cbLight._m0[_1883].z + _381;
        float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
        float _1910 = _1909 * _1903;
        float _1911 = _1909 * _1904;
        float _1912 = _1909 * _1905;
        float _1913 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_1883].xyz));
        float _3824 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1917 = dot(vec3(_297, _298, _299), vec3(_1910, _1911, _1912));
        float _3835 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1921 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1910, _1911, _1912));
        float _3846 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = _1902 * _1902;
        float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
        float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0)))) * 5.0);
        float _1943 = 1.0 - _1902;
        float _1953 = (0.5 / (((_1682 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1943) + _1902) * _1916))) * _1916;
        float _3857 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1955 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
        float _1956 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
        _1877 = (((((_1936 * _1704) + _454) * cbLight._m0[_1887].x) * _1955) * _1956) + _1813;
        _1879 = (((((_1936 * _1706) + _456) * cbLight._m0[_1887].y) * _1955) * _1956) + _1814;
        _1881 = (((((_1936 * _1707) + _457) * cbLight._m0[_1887].z) * _1955) * _1956) + _1815;
    }
    float _1991;
    float _1993;
    float _1995;
    if (_1608)
    {
        _1991 = _1877;
        _1993 = _1879;
        _1995 = _1881;
    }
    else
    {
        uint _2002 = _1515 + 3u;
        uint _2006 = _1515 + 11u;
        float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _301) * 0.949999988079071044921875);
        float _2021 = _2020 * _2020;
        float _2022 = cbLight._m0[_2002].x + _379;
        float _2023 = cbLight._m0[_2002].y + _380;
        float _2024 = cbLight._m0[_2002].z + _381;
        float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
        float _2029 = _2028 * _2022;
        float _2030 = _2028 * _2023;
        float _2031 = _2028 * _2024;
        float _2032 = dot(vec3(_297, _298, _299), vec3(cbLight._m0[_2002].xyz));
        float _3873 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _2036 = dot(vec3(_297, _298, _299), vec3(_2029, _2030, _2031));
        float _3884 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
        float _2040 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2029, _2030, _2031));
        float _3895 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2044 = _2021 * _2021;
        float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
        float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
        float _2062 = 1.0 - _2021;
        float _2072 = (0.5 / (((_1682 * ((_2035 * _2062) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _2062) + _2021) * _2035))) * _2035;
        float _3906 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1991 = (((((_2055 * _1704) + _454) * cbLight._m0[_2006].x) * _2074) * _2075) + _1877;
        _1993 = (((((_2055 * _1706) + _456) * cbLight._m0[_2006].y) * _2074) * _2075) + _1879;
        _1995 = (((((_2055 * _1707) + _457) * cbLight._m0[_2006].z) * _2074) * _2075) + _1881;
    }
    float _2209;
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_1513.y == 0u)
    {
        float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2150;
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2150;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2150;
        uvec4 _2165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2166 = _2165.x;
        uint _2177 = uint((float(_2165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2166))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2166)));
        float _2187 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2188 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        uint _2191 = uint(isnan(14.0) ? _2188 : (isnan(_2188) ? 14.0 : min(_2188, 14.0)));
        uvec4 _2196 = texelFetch(g_lightClusterGridBuffer, int(((_2191 << 2u) + (_2177 << 6u)) >> 2u));
        uint _2197 = _2196.x;
        uint _2198 = _2165.z;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        if (((((1u << ((_2198 >> 4u) & 15u)) + 4294967295u) & _2197) == 0u) || ((_2198 & 240u) == 0u))
        {
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
        }
        else
        {
            float _2300;
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            uint _2449 = 0u;
            uint _2458;
            bool _2459;
            for (;;)
            {
                _2458 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2449 << 2u)) >> 2u)).x;
                _2459 = _2458 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2459)
                {
                    frontier_phi_63_pred = _2448;
                    frontier_phi_63_pred_1 = _2447;
                    frontier_phi_63_pred_2 = _2446;
                    frontier_phi_63_pred_3 = _2445;
                    frontier_phi_63_pred_4 = _2444;
                    frontier_phi_63_pred_5 = _2443;
                }
                else
                {
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    uint _2573;
                    _2567 = _2443;
                    _2568 = _2444;
                    _2569 = _2445;
                    _2570 = _2446;
                    _2571 = _2447;
                    _2572 = _2448;
                    _2573 = _2458;
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    for (;;)
                    {
                        uint _2577 = uint(findLSB(_2573)) + (_2449 << 5u);
                        uint _2574 = (_2573 + 4294967295u) & _2573;
                        uint _2579 = _2577 * 48u;
                        vec4 _2593 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2579)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2579 + 3u)).x));
                        uint _2599 = (_2577 * 48u) + 4u;
                        vec4 _2612 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2599)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2599 + 3u)).x));
                        uint _2618 = (_2577 * 48u) + 8u;
                        vec3 _2629 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2618)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2618 + 2u)).x));
                        float _2633 = _2593.x - _2151;
                        float _2634 = _2593.y - _2152;
                        float _2635 = _2593.z - _2153;
                        float _2636 = dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635));
                        float _2639 = inversesqrt(_2636);
                        float _2640 = _2639 * _2633;
                        float _2641 = _2639 * _2634;
                        float _2642 = _2639 * _2635;
                        float _2643 = dot(vec3(_409, _412, _415), vec3(_2640, _2641, _2642));
                        float _2648 = 1.0 - (_2636 * _2593.w);
                        float _3932 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2649 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                        float _2650 = sqrt(_2636) * _2612.w;
                        float _2653 = 1.39999997615814208984375 / (_2650 + 1.39999997615814208984375);
                        float _2654 = _2653 * _2653;
                        float _2657 = ((1.0 - _2654) * _2643) + _2654;
                        float _2660 = _2650 * _2650;
                        float _2664 = ((isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0))) * _2649) / ((_2660 * 0.699999988079071044921875) + 1.0);
                        float _2668 = (-0.0) - _2151;
                        float _2669 = (-0.0) - _2152;
                        float _2670 = (-0.0) - _2153;
                        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
                        float _2675 = _2674 * _2668;
                        float _2676 = _2674 * _2669;
                        float _2677 = _2674 * _2670;
                        float _2685 = exp2(log2(1.0 / ((_2660 * 3.5) + 5.0)) * 0.25);
                        float _2686 = 1.0 - _485;
                        float _2693 = sqrt(1.0 - ((1.0 - (_2686 * _2686)) * (1.0 - (_2685 * _2685))));
                        float _2694 = _2693 * _2693;
                        float _2695 = _2694 * _2694;
                        float _2696 = _2675 + _2640;
                        float _2697 = _2676 + _2641;
                        float _2698 = _2677 + _2642;
                        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
                        float _2706 = dot(vec3(_409, _412, _415), vec3(_2675, _2676, _2677));
                        float _3948 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2709 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                        float _2710 = dot(vec3(_409, _412, _415), vec3(_2702 * _2696, _2702 * _2697, _2702 * _2698));
                        float _3959 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2713 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                        float _2717 = ((_2713 * _2713) * (_2695 + (-1.0))) + 1.0;
                        float _2718 = _2653 * _2694;
                        float _2719 = _2718 * _2718;
                        float _2722 = ((1.0 - _2719) * _2643) + _2719;
                        float _3970 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
                        float _2723 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
                        float _2724 = 1.0 - _2694;
                        float _2734 = (0.5 / (((_2723 * ((_2709 * _2724) + _2694)) + 9.9999999392252902907785028219223e-09) + (((_2723 * _2724) + _2694) * _2709))) * _2723;
                        float _3981 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2745 = (((_2695 * 3.1415927410125732421875) * (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) / ((_2717 * _2717) * ((_2660 * 2.1991131305694580078125) + 3.141590118408203125))) * _2649;
                        _2502 = (_2664 * _2612.x) + _2570;
                        _2503 = (_2664 * _2612.y) + _2571;
                        _2504 = (_2664 * _2612.z) + _2572;
                        _2499 = (_2745 * _2629.x) + _2567;
                        _2500 = (_2745 * _2629.y) + _2568;
                        _2501 = (_2745 * _2629.z) + _2569;
                        if (_2574 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2567 = _2499;
                            _2568 = _2500;
                            _2569 = _2501;
                            _2570 = _2502;
                            _2571 = _2503;
                            _2572 = _2504;
                            _2573 = _2574;
                        }
                    }
                    frontier_phi_63_pred = _2504;
                    frontier_phi_63_pred_1 = _2503;
                    frontier_phi_63_pred_2 = _2502;
                    frontier_phi_63_pred_3 = _2501;
                    frontier_phi_63_pred_4 = _2500;
                    frontier_phi_63_pred_5 = _2499;
                }
                _2310 = frontier_phi_63_pred;
                _2308 = frontier_phi_63_pred_1;
                _2306 = frontier_phi_63_pred_2;
                _2304 = frontier_phi_63_pred_3;
                _2302 = frontier_phi_63_pred_4;
                _2300 = frontier_phi_63_pred_5;
                uint _2450 = _2449 + 1u;
                if (_2450 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2443 = _2300;
                    _2444 = _2302;
                    _2445 = _2304;
                    _2446 = _2306;
                    _2447 = _2308;
                    _2448 = _2310;
                    _2449 = _2450;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
        }
        uvec4 _2313 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2314 = _2313.z;
        uint _2316 = (_2314 >> 8u) & 15u;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        if (((4294967295u << _2316) & _2197) == 0u)
        {
            _2411 = _2299;
            _2413 = _2301;
            _2415 = _2303;
            _2417 = _2305;
            _2419 = _2307;
            _2421 = _2309;
        }
        else
        {
            float _2436 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _2437 = _2436 * _2151;
            float _2438 = _2436 * _2152;
            float _2439 = _2436 * _2153;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2316 < ((_2314 >> 12u) & 15u))
            {
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2422;
                float _2550 = _2299;
                float _2551 = _2301;
                float _2552 = _2303;
                float _2553 = _2305;
                float _2554 = _2307;
                float _2555 = _2309;
                uint _2556 = _2316;
                uint _2565;
                bool _2566;
                for (;;)
                {
                    _2565 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2556 << 2u)) >> 2u)).x;
                    _2566 = _2565 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2566)
                    {
                        frontier_phi_69_pred = _2555;
                        frontier_phi_69_pred_1 = _2554;
                        frontier_phi_69_pred_2 = _2553;
                        frontier_phi_69_pred_3 = _2552;
                        frontier_phi_69_pred_4 = _2551;
                        frontier_phi_69_pred_5 = _2550;
                    }
                    else
                    {
                        float _2750;
                        float _2751;
                        float _2752;
                        float _2753;
                        float _2754;
                        float _2755;
                        float _3046;
                        float _3047;
                        float _3048;
                        float _3049;
                        float _3050;
                        float _3051;
                        float _2763 = _2550;
                        float _2764 = _2551;
                        float _2765 = _2552;
                        float _2766 = _2553;
                        float _2767 = _2554;
                        float _2768 = _2555;
                        uint _2769 = _2565;
                        uint _2770;
                        vec4 _2795;
                        float _2796;
                        vec4 _2811;
                        vec3 _2823;
                        vec4 _2839;
                        vec4 _2855;
                        float _2902;
                        bool _2903;
                        for (;;)
                        {
                            uint _2780 = ((_2556 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2769));
                            _2770 = (_2769 + 4294967295u) & _2769;
                            uint _2782 = _2780 * 40u;
                            _2795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2782 + 3u)).x));
                            _2796 = _2795.w;
                            uint _2798 = (_2780 * 40u) + 4u;
                            _2811 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2798)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2798 + 3u)).x));
                            uint _2813 = (_2780 * 40u) + 8u;
                            _2823 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x));
                            uint _2826 = (_2780 * 40u) + 16u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2842 = (_2780 * 40u) + 20u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2858 = (_2780 * 40u) + 24u;
                            vec4 _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            uint _2877 = (_2780 * 40u) + 28u;
                            vec4 _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            _2902 = fma(_2153, _2890.z, fma(_2152, _2890.y, _2890.x * _2151)) + _2890.w;
                            _2903 = !((fma(_2153, _2871.z, fma(_2152, _2871.y, _2871.x * _2151)) + _2871.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2903)
                            {
                                float _2930 = _2795.x - _2151;
                                float _2931 = _2795.y - _2152;
                                float _2932 = _2795.z - _2153;
                                float _2933 = dot(vec3(_2930, _2931, _2932), vec3(_2930, _2931, _2932));
                                float _2936 = inversesqrt(_2933);
                                float _2937 = _2936 * _2930;
                                float _2938 = _2936 * _2931;
                                float _2939 = _2936 * _2932;
                                float _2943 = 1.0 - (_2933 / (_2796 * _2796));
                                float _3992 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2944 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
                                float _2948 = sqrt(_2933) * _2811.w;
                                float _2950 = 1.39999997615814208984375 / (_2948 + 1.39999997615814208984375);
                                float _2951 = _2950 * _2950;
                                float _2954 = ((1.0 - _2951) * dot(vec3(_2937, _2938, _2939), vec3(_409, _412, _415))) + _2951;
                                float _2957 = _2948 * _2948;
                                float _2961 = (fma(_2153, _2839.z, fma(_2152, _2839.y, _2839.x * _2151)) + _2839.w) / _2902;
                                float _2962 = (fma(_2153, _2855.z, fma(_2152, _2855.y, _2855.x * _2151)) + _2855.w) / _2902;
                                float _2966 = 1.0 - dot(vec2(_2961, _2962), vec2(_2961, _2962));
                                float _4008 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                                float _2967 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
                                float _2968 = _2967 * (((isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0))) * _2944) / ((_2957 * 0.699999988079071044921875) + 1.0));
                                float _2980 = exp2(log2(1.0 / ((_2957 * 3.5) + 5.0)) * 0.25);
                                float _2981 = 1.0 - _485;
                                float _2988 = sqrt(1.0 - ((1.0 - (_2981 * _2981)) * (1.0 - (_2980 * _2980))));
                                float _2989 = _2988 * _2988;
                                float _2990 = _2989 * _2989;
                                float _2991 = _2937 - _2437;
                                float _2992 = _2938 - _2438;
                                float _2993 = _2939 - _2439;
                                float _2997 = inversesqrt(dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993)));
                                float _3001 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2437, (-0.0) - _2438, (-0.0) - _2439));
                                float _4019 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3004 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
                                float _3005 = dot(vec3(_409, _412, _415), vec3(_2997 * _2991, _2997 * _2992, _2997 * _2993));
                                float _4030 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3008 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
                                float _3012 = ((_3008 * _3008) * (_2990 + (-1.0))) + 1.0;
                                float _3013 = _2950 * _2989;
                                float _3014 = _3013 * _3013;
                                float _3020 = ((1.0 - _3014) * dot(vec3(_409, _412, _415), vec3(_2937, _2938, _2939))) + _3014;
                                float _4041 = isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0));
                                float _3021 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                                float _3022 = 1.0 - _2989;
                                float _3032 = (0.5 / (((_3021 * ((_3004 * _3022) + _2989)) + 9.9999999392252902907785028219223e-09) + (((_3021 * _3022) + _2989) * _3004))) * _3021;
                                float _4052 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
                                float _3042 = (_2967 * _2944) * (((_2990 * 3.1415927410125732421875) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) / ((_3012 * _3012) * ((_2957 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2968 * _2811.z;
                                frontier_phi_75_pred_1 = _2968 * _2811.y;
                                frontier_phi_75_pred_2 = _2968 * _2811.x;
                                frontier_phi_75_pred_3 = _3042 * _2823.z;
                                frontier_phi_75_pred_4 = _3042 * _2823.y;
                                frontier_phi_75_pred_5 = _3042 * _2823.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3051 = frontier_phi_75_pred;
                            _3050 = frontier_phi_75_pred_1;
                            _3049 = frontier_phi_75_pred_2;
                            _3048 = frontier_phi_75_pred_3;
                            _3047 = frontier_phi_75_pred_4;
                            _3046 = frontier_phi_75_pred_5;
                            _2753 = _3049 + _2766;
                            _2754 = _3050 + _2767;
                            _2755 = _3051 + _2768;
                            _2750 = _3046 + _2763;
                            _2751 = _3047 + _2764;
                            _2752 = _3048 + _2765;
                            if (_2770 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2763 = _2750;
                                _2764 = _2751;
                                _2765 = _2752;
                                _2766 = _2753;
                                _2767 = _2754;
                                _2768 = _2755;
                                _2769 = _2770;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2755;
                        frontier_phi_69_pred_1 = _2754;
                        frontier_phi_69_pred_2 = _2753;
                        frontier_phi_69_pred_3 = _2752;
                        frontier_phi_69_pred_4 = _2751;
                        frontier_phi_69_pred_5 = _2750;
                    }
                    _2422 = frontier_phi_69_pred;
                    _2420 = frontier_phi_69_pred_1;
                    _2418 = frontier_phi_69_pred_2;
                    _2416 = frontier_phi_69_pred_3;
                    _2414 = frontier_phi_69_pred_4;
                    _2412 = frontier_phi_69_pred_5;
                    uint _2557 = _2556 + 1u;
                    if (_2557 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2550 = _2412;
                        _2551 = _2414;
                        _2552 = _2416;
                        _2553 = _2418;
                        _2554 = _2420;
                        _2555 = _2422;
                        _2556 = _2557;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2422;
                frontier_phi_57_58_ladder_1 = _2420;
                frontier_phi_57_58_ladder_2 = _2418;
                frontier_phi_57_58_ladder_3 = _2416;
                frontier_phi_57_58_ladder_4 = _2414;
                frontier_phi_57_58_ladder_5 = _2412;
            }
            else
            {
                frontier_phi_57_58_ladder = _2309;
                frontier_phi_57_58_ladder_1 = _2307;
                frontier_phi_57_58_ladder_2 = _2305;
                frontier_phi_57_58_ladder_3 = _2303;
                frontier_phi_57_58_ladder_4 = _2301;
                frontier_phi_57_58_ladder_5 = _2299;
            }
            _2411 = frontier_phi_57_58_ladder_5;
            _2413 = frontier_phi_57_58_ladder_4;
            _2415 = frontier_phi_57_58_ladder_3;
            _2417 = frontier_phi_57_58_ladder_2;
            _2419 = frontier_phi_57_58_ladder_1;
            _2421 = frontier_phi_57_58_ladder;
        }
        float _2426 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2209 = (_2426 * _2417) + _1646;
        _2211 = (_2426 * _2419) + _1648;
        _2213 = (_2426 * _2421) + _1650;
        _2215 = ((_2411 * _454) * _2426) + _1991;
        _2217 = ((_2413 * _456) * _2426) + _1993;
        _2219 = ((_2415 * _457) * _2426) + _1995;
    }
    else
    {
        _2209 = _1646;
        _2211 = _1648;
        _2213 = _1650;
        _2215 = _1991;
        _2217 = _1993;
        _2219 = _1995;
    }
    float _4068 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4079 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4090 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4101 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _2244 = cbInstanceData._m0[_428 + 6u].w * (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0)));
    float _2249 = _387 / cbSceneParam._m0[86u].x;
    float _2250 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2264 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2249, _2250, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2266 = _2264.x;
    float _2267 = _2264.y;
    float _2268 = _2264.z;
    float _2269 = _2264.w;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2324 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2325 = _2324 / _321;
        float _2336 = _2325 * _372;
        float _2337 = _373 * _2325;
        float _2338 = (-0.0) - _2337;
        float _2339 = _2325 * _374;
        float _2341 = (cbSceneParam._m0[77u].w * _2338) / _2324;
        float _2342 = _2341 + cbSceneParam._m0[79u].w;
        float _2343 = cbSceneParam._m0[79u].w - _2337;
        float _2349 = sqrt(((_2336 * _2336) + (_2337 * _2337)) + (_2339 * _2339));
        float _2352 = (1.0 - (cbSceneParam._m0[77u].w / _2324)) * _2349;
        float _2357 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2359 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2512;
        if (abs((_2338 - _2341) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2512 = ((((_2342 > 0.0) ? exp2(_2357 * _2342) : (2.0 - exp2(_2359 * _2342))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2352;
        }
        else
        {
            float _2472 = 1.0 / cbSceneParam._m0[80u].x;
            float _2473 = isnan(_2343) ? _2342 : (isnan(_2342) ? _2343 : max(_2342, _2343));
            float _2474 = isnan(_2343) ? _2342 : (isnan(_2342) ? _2343 : min(_2342, _2343));
            float _2483 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : min(_2473, 0.0));
            float _2484 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : min(_2474, 0.0));
            _2512 = ((abs(_2349 / _2338) * cbSceneParam._m0[80u].y) * ((((_2483 - _2484) * 2.0) - ((exp2(_2357 * (isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0)))) - exp2(_2357 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0))))) * _2472)) - ((exp2(_2359 * _2483) - exp2(_2359 * _2484)) * _2472))) + (_2352 * cbSceneParam._m0[80u].z);
        }
        vec4 _2514 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2249, _2250, 1.0), 0.0);
        float _2523 = exp2((_2512 * (-1.44269502162933349609375)) * (1.0 - _2514.w));
        float _2524 = log2(_2523);
        float _2540 = log2(_2269);
        _2361 = (exp2(_2540 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2524 * cbSceneParam._m0[78u].x)) * _2514.x) / cbSceneParam._m0[78u].x)) + _2266;
        _2363 = (exp2(_2540 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2524 * cbSceneParam._m0[78u].y)) * _2514.y) / cbSceneParam._m0[78u].y)) + _2267;
        _2365 = (exp2(_2540 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2524 * cbSceneParam._m0[78u].z)) * _2514.z) / cbSceneParam._m0[78u].z)) + _2268;
        _2367 = _2523 * _2269;
    }
    else
    {
        _2361 = _2266;
        _2363 = _2267;
        _2365 = _2268;
        _2367 = _2269;
    }
    float _2379 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2380 = _2379 == 3.0;
    float _2381 = log2(_2367);
    float _2388 = exp2(_2381 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_2209 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _469))) + ((_2215 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2389 = exp2(_2381 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_2211 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _469))) + ((_2217 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2390 = exp2(_2381 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))) * (_2213 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _469))) + ((_2219 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1279)) * cbPerFrame._m0[3u].x));
    float _2399 = (_2379 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2399 * (_2380 ? _2388 : (_2388 + (cbSceneParam._m0[72u].w * _2361)));
    SV_Target.y = _2399 * (_2380 ? _2389 : (_2389 + (cbSceneParam._m0[72u].w * _2363)));
    SV_Target.z = _2399 * (_2380 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2365)));
    SV_Target.w = _2244;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2244;
}


