#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _891;
float _3307;
float _3308;
float _3309;
float _3310;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _189 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _190 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _191 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_189, _190, _191), vec3(_189, _190, _191)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    float _235 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _236 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _249 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_235 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_236 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _255 = _249.w;
    float _256 = _249.x * cbMtdParam._m0[9u].x;
    float _257 = _249.y * cbMtdParam._m0[9u].y;
    float _258 = _249.z * cbMtdParam._m0[9u].z;
    float _259 = _255 * TEXCOORD_1.z;
    vec4 _272 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _235) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _236) + cbTextureTilingScale._m0[1u].w));
    float _276 = _272.z;
    float _280 = (_272.x * 2.0) + (-1.0);
    float _282 = (_272.y * 2.0) + (-1.0);
    float _283 = dot(vec2(_280, _282), vec2(_280, _282));
    float _3319 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _289 = sqrt(1.0 - (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))));
    float _292 = fma(_289, _219, fma(_282, _211 * TANGENT.x, (_197 * _189) * _280));
    float _295 = fma(_289, _220, fma(_282, _211 * TANGENT.y, (_197 * _190) * _280));
    float _298 = fma(_289, _221, fma(_282, _211 * TANGENT.z, (_197 * _191) * _280));
    float _302 = inversesqrt(dot(vec3(_292, _295, _298), vec3(_292, _295, _298)));
    float _303 = _302 * _292;
    float _304 = _302 * _295;
    float _305 = _302 * _298;
    float _3330 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _306 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
    float _3341 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _307 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _3363 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3374 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3385 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _311 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
    float _327 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _368 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _378 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _368);
    float _379 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _368);
    float _380 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _368);
    float _384 = inversesqrt(dot(vec3(_378, _379, _380), vec3(_378, _379, _380)));
    float _385 = _378 * _384;
    float _386 = _379 * _384;
    float _387 = _380 * _384;
    vec4 _392 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _394 = _392.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _570 = sqrt(((_378 * _378) + (_379 * _379)) + (_380 * _380));
        float _576 = (cbMatDynParam._m0[5u].x * _570) + cbMatDynParam._m0[5u].y;
        float _3396 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
        float _577 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _581 = (cbMatDynParam._m0[5u].z * _570) + cbMatDynParam._m0[5u].w;
        float _3407 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) - _577)) + _577) < ((_394 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _427 = fma(_305, cbSceneParam._m0[5u].z, fma(_304, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _303));
    float _430 = fma(_305, cbSceneParam._m0[6u].z, fma(_304, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _303));
    float _433 = fma(_305, cbSceneParam._m0[7u].z, fma(_304, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _303));
    uint _446 = uint(roundEven(NORMAL.w)) * 13u;
    uint _448 = _446 + 9u;
    uint _449 = _448 + uint(cbMatDynParam._m0[0u].w);
    float _455 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0)))) * cbInstanceData._m0[_449].x;
    float _456 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_449].y;
    float _457 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_449].z;
    float _3418 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _461 = 1.0 - _311;
    float _462 = _458 * _461;
    float _463 = _459 * _461;
    float _464 = _460 * _461;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _311;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _311;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _311;
    float _472 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    vec4 _484 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _487 = _484.x * TEXCOORD_1.w;
    float _488 = dot(vec3(_303, _304, _305), vec3(_385, _386, _387));
    float _491 = _488 * 2.0;
    float _495 = (_491 * _303) - _385;
    float _496 = (_491 * _304) - _386;
    float _497 = (_491 * _305) - _387;
    float _501 = abs(dot(vec3(_385, _386, _387), vec3(_303, _304, _305)));
    float _3451 = isnan(0.0) ? _501 : (isnan(_501) ? 0.0 : max(_501, 0.0));
    float _503 = sqrt(_307);
    float _516 = exp2((_503 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_503 * 3.0));
    float _522 = (1.0 - _516) * ((_503 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _523 = _516 * _503;
    float _551 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _555 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _559 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _890;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _615 = fma(_559, cbModelParam._m0[26u].z, fma(_555, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _551));
        float _619 = fma(_559, cbModelParam._m0[27u].z, fma(_555, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _551));
        float _623 = fma(_559, cbModelParam._m0[28u].z, fma(_555, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _551));
        float _648 = _551 + _303;
        float _649 = _555 + _304;
        float _650 = _559 + _305;
        float _660 = fma(_650, cbModelParam._m0[26u].z, fma(_649, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _648)) - _615;
        float _661 = fma(_650, cbModelParam._m0[27u].z, fma(_649, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _648)) - _619;
        float _662 = fma(_650, cbModelParam._m0[28u].z, fma(_649, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _648)) - _623;
        float _666 = inversesqrt(dot(vec3(_660, _661, _662), vec3(_660, _661, _662)));
        float _679 = ((_666 * _660) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_615 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _680 = ((_666 * _661) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_619 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_666 * _662) / cbModelParam._m0[34u].z) + ((((((_623 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _684 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _691 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_679, _680, _681), 0.0);
        float _718 = exp2((_684.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_684.x + (-0.5));
        float _720 = _718 * (_684.y + (-0.5));
        float _721 = _718 * (_684.z + (-0.5));
        float _728 = exp2((_691.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_691.x + (-0.5));
        float _730 = _728 * (_691.y + (-0.5));
        float _731 = _728 * (_691.z + (-0.5));
        float _738 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_698.x + (-0.5));
        float _740 = _738 * (_698.y + (-0.5));
        float _741 = _738 * (_698.z + (-0.5));
        float _748 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_705.x + (-0.5));
        float _750 = _748 * (_705.y + (-0.5));
        float _751 = _748 * (_705.z + (-0.5));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = _719 * 0.5;
        float _756 = _729 * 0.5;
        float _757 = _739 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _772 = (dot(vec3(_303, _304, _305), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _782 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _783 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _784 = _783 * 2.0;
        float _788 = (1.0 - _783) / (_783 + 1.0);
        float _3499 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _798 = ((((1.0 - _789) * (_784 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_784 + 1.0))) + _789) * _752;
        float _799 = _720 * 0.5;
        float _800 = _730 * 0.5;
        float _801 = _740 * 0.5;
        float _802 = dot(vec3(_799, _800, _801), vec3(_799, _800, _801));
        float _807 = (_802 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_802);
        float _815 = (dot(vec3(_303, _304, _305), vec3(_807 * _799, _807 * _800, _807 * _801)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        float _824 = sqrt(((_800 * _800) + (_799 * _799)) + (_801 * _801)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _825 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _826 = _825 * 2.0;
        float _830 = (1.0 - _825) / (_825 + 1.0);
        float _3532 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _840 = ((((1.0 - _831) * (_826 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_826 + 1.0))) + _831) * _753;
        float _841 = _721 * 0.5;
        float _842 = _731 * 0.5;
        float _843 = _741 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _857 = (dot(vec3(_303, _304, _305), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _866 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3565 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_868 + 1.0))) + _873) * _754;
        _890 = _721;
        _892 = _720;
        _893 = _719;
        _894 = _731;
        _895 = _730;
        _896 = _729;
        _897 = _741;
        _898 = _740;
        _899 = _739;
        _900 = _754;
        _901 = _753;
        _902 = _752;
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0)));
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
    }
    else
    {
        _890 = _891;
        _892 = _891;
        _893 = _891;
        _894 = _891;
        _895 = _891;
        _896 = _891;
        _897 = _891;
        _898 = _891;
        _899 = _891;
        _900 = _891;
        _901 = _891;
        _902 = _891;
        _903 = 0.0;
        _904 = 0.0;
        _905 = 0.0;
    }
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _934 = fma(_559, cbModelParam._m0[30u].z, fma(_555, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _551));
        float _938 = fma(_559, cbModelParam._m0[31u].z, fma(_555, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _551));
        float _942 = fma(_559, cbModelParam._m0[32u].z, fma(_555, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _551));
        float _965 = _551 + _303;
        float _966 = _555 + _304;
        float _967 = _559 + _305;
        float _977 = fma(_967, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _965)) - _934;
        float _978 = fma(_967, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _965)) - _938;
        float _979 = fma(_967, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _965)) - _942;
        float _983 = inversesqrt(dot(vec3(_977, _978, _979), vec3(_977, _978, _979)));
        float _996 = ((_983 * _977) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_934 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _997 = ((_983 * _978) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_938 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_983 * _979) / cbModelParam._m0[35u].z) + ((((((_942 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1000 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_996, _997, _998), 0.0);
        float _1033 = exp2((_1000.w + (-0.5)) * 20.0) * 2.0;
        float _1034 = _1033 * (_1000.x + (-0.5));
        float _1035 = _1033 * (_1000.y + (-0.5));
        float _1036 = _1033 * (_1000.z + (-0.5));
        float _1043 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1007.x + (-0.5));
        float _1045 = _1043 * (_1007.y + (-0.5));
        float _1046 = _1043 * (_1007.z + (-0.5));
        float _1053 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1014.x + (-0.5));
        float _1055 = _1053 * (_1014.y + (-0.5));
        float _1056 = _1053 * (_1014.z + (-0.5));
        float _1063 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1021.x + (-0.5));
        float _1065 = _1063 * (_1021.y + (-0.5));
        float _1066 = _1063 * (_1021.z + (-0.5));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = _1034 * 0.5;
        float _1071 = _1044 * 0.5;
        float _1072 = _1054 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_303, _304, _305), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3628 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1097 + 1.0))) + _1102) * _1067;
        float _1112 = _1035 * 0.5;
        float _1113 = _1045 * 0.5;
        float _1114 = _1055 * 0.5;
        float _1115 = dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114));
        float _1120 = (_1115 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1115);
        float _1128 = (dot(vec3(_303, _304, _305), vec3(_1120 * _1112, _1120 * _1113, _1120 * _1114)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1137 = sqrt(((_1113 * _1113) + (_1112 * _1112)) + (_1114 * _1114)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1139 = _1138 * 2.0;
        float _1143 = (1.0 - _1138) / (_1138 + 1.0);
        float _3661 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1144 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1153 = ((((1.0 - _1144) * (_1139 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1139 + 1.0))) + _1144) * _1068;
        float _1154 = _1036 * 0.5;
        float _1155 = _1046 * 0.5;
        float _1156 = _1056 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_303, _304, _305), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3694 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1181 + 1.0))) + _1186) * _1069;
        _1203 = _1036;
        _1204 = _1035;
        _1205 = _1034;
        _1206 = _1046;
        _1207 = _1045;
        _1208 = _1044;
        _1209 = _1056;
        _1210 = _1055;
        _1211 = _1054;
        _1212 = _1069;
        _1213 = _1068;
        _1214 = _1067;
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
    }
    else
    {
        _1203 = _891;
        _1204 = _891;
        _1205 = _891;
        _1206 = _891;
        _1207 = _891;
        _1208 = _891;
        _1209 = _891;
        _1210 = _891;
        _1211 = _891;
        _1212 = _891;
        _1213 = _891;
        _1214 = _891;
        _1215 = 0.0;
        _1216 = 0.0;
        _1217 = 0.0;
    }
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1250 = fma(_1229, cbSceneParam._m0[89u].z, fma(_1228, cbSceneParam._m0[89u].y, _1227 * cbSceneParam._m0[89u].x));
    float _1253 = fma(_1229, cbSceneParam._m0[90u].z, fma(_1228, cbSceneParam._m0[90u].y, _1227 * cbSceneParam._m0[90u].x));
    float _1256 = fma(_1229, cbSceneParam._m0[91u].z, fma(_1228, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1227));
    float _1271 = _495 * 0.5;
    float _1272 = _496 * 0.5;
    float _1273 = _497 * 0.5;
    float _1274 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1277 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1280 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1314;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1287 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_890, _894, _897, _900));
        float _1291 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_892, _895, _898, _901));
        float _1295 = dot(vec4(_1271, _1272, _1273, 1.0), vec4(_893, _896, _899, _902));
        float _1302 = dot(vec4(cbModelParam._m0[39u]), vec4(_1271, _1272, _1273, 1.0));
        _1314 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1302) ? 0.0 : (isnan(0.0) ? _1302 : max(0.0, _1302))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1314 = 1.0;
    }
    float _1325;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1316 = dot(vec4(cbModelParam._m0[40u]), vec4(_1271, _1272, _1273, 1.0));
        _1325 = dot(vec3(isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)), isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)), isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1316) ? 0.0 : (isnan(0.0) ? _1316 : max(0.0, _1316))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1325 = 1.0;
    }
    float _1329 = (_1325 * cbModelParam._m0[1u].x) + (_1314 * (1.0 - cbModelParam._m0[1u].x));
    float _1339 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _307);
    float _1340 = isnan(_1339) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1339 : min(cbModelParam._m0[25u].z, _1339));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1389 = fma(_559, cbModelParam._m0[13u].z, fma(_555, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _551)) + cbModelParam._m0[13u].w;
        float _1393 = fma(_559, cbModelParam._m0[14u].z, fma(_555, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _551)) + cbModelParam._m0[14u].w;
        float _1397 = fma(_559, cbModelParam._m0[15u].z, fma(_555, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _551)) + cbModelParam._m0[15u].w;
        float _1400 = fma(_497, cbModelParam._m0[13u].z, fma(_496, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _495));
        float _1403 = fma(_497, cbModelParam._m0[14u].z, fma(_496, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _495));
        float _1406 = fma(_497, cbModelParam._m0[15u].z, fma(_496, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _495));
        float _1434;
        if (_1400 > 0.0)
        {
            _1434 = abs((1.0 - _1389) / _1400);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1389 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1434 = frontier_phi_19_17_ladder;
        }
        float _1662;
        if (_1403 > 0.0)
        {
            _1662 = abs((1.0 - _1393) / _1403);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1393 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1662 = frontier_phi_28_24_ladder;
        }
        float _1919;
        if (_1406 > 0.0)
        {
            _1919 = abs((1.0 - _1397) / _1406);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1406 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1397 + 1.0) / _1406);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1919 = frontier_phi_40_35_ladder;
        }
        float _1921 = isnan(_1662) ? _1434 : (isnan(_1434) ? _1662 : min(_1434, _1662));
        float _1922 = isnan(_1919) ? _1921 : (isnan(_1921) ? _1919 : min(_1921, _1919));
        float _1926 = (_1922 * _1400) + _1389;
        float _1927 = (_1922 * _1403) + _1393;
        float _1928 = (_1922 * _1406) + _1397;
        float _1929 = _1922 * 9.9999997473787516355514526367188e-05;
        float _1931 = (-1.0) - _1929;
        float _1933 = _1929 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1928 > _1933) || ((_1928 < _1931) || ((_1927 > _1933) || ((_1927 < _1931) || ((_1926 < _1931) || (_1926 > _1933))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1928, cbModelParam._m0[9u].z, fma(_1927, cbModelParam._m0[9u].y, _1926 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1928, cbModelParam._m0[10u].z, fma(_1927, cbModelParam._m0[10u].y, _1926 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1928, cbModelParam._m0[11u].z, fma(_1927, cbModelParam._m0[11u].y, _1926 * cbModelParam._m0[11u].x))), _1340);
            frontier_phi_18_40_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1422 = frontier_phi_18_40_ladder_2;
        _1424 = frontier_phi_18_40_ladder_1;
        _1426 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_495, _496, _497), _1340);
        _1422 = _1410.x * cbModelParam._m0[1u].y;
        _1424 = _1410.y * cbModelParam._m0[1u].y;
        _1426 = _1410.z * cbModelParam._m0[1u].y;
    }
    float _1430 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _307);
    float _1431 = isnan(_1430) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1430 : min(cbModelParam._m0[25u].w, _1430));
    float _1523;
    float _1525;
    float _1527;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1487 = fma(_559, cbModelParam._m0[21u].z, fma(_555, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _551)) + cbModelParam._m0[21u].w;
        float _1491 = fma(_559, cbModelParam._m0[22u].z, fma(_555, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _551)) + cbModelParam._m0[22u].w;
        float _1495 = fma(_559, cbModelParam._m0[23u].z, fma(_555, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _551)) + cbModelParam._m0[23u].w;
        float _1498 = fma(_497, cbModelParam._m0[21u].z, fma(_496, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _495));
        float _1501 = fma(_497, cbModelParam._m0[22u].z, fma(_496, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _495));
        float _1504 = fma(_497, cbModelParam._m0[23u].z, fma(_496, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _495));
        float _1667;
        if (_1498 > 0.0)
        {
            _1667 = abs((1.0 - _1487) / _1498);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1487 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1667 = frontier_phi_30_26_ladder;
        }
        float _1946;
        if (_1501 > 0.0)
        {
            _1946 = abs((1.0 - _1491) / _1501);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1491 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1946 = frontier_phi_42_37_ladder;
        }
        float _2159;
        if (_1504 > 0.0)
        {
            _2159 = abs((1.0 - _1495) / _1504);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1495 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2159 = frontier_phi_51_48_ladder;
        }
        float _2161 = isnan(_1946) ? _1667 : (isnan(_1667) ? _1946 : min(_1667, _1946));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1498) + _1487;
        float _2167 = (_2162 * _1501) + _1491;
        float _2168 = (_2162 * _1504) + _1495;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2169;
        float _2172 = _2169 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2168 > _2172) || ((_2168 < _2170) || ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 < _2170) || (_2166 > _2172))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2368 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2168, cbModelParam._m0[17u].z, fma(_2167, cbModelParam._m0[17u].y, _2166 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2168, cbModelParam._m0[18u].z, fma(_2167, cbModelParam._m0[18u].y, _2166 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2168, cbModelParam._m0[19u].z, fma(_2167, cbModelParam._m0[19u].y, _2166 * cbModelParam._m0[19u].x))), _1431);
            frontier_phi_27_51_ladder = _2368.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2368.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2368.x * cbModelParam._m0[1u].z;
        }
        _1523 = frontier_phi_27_51_ladder_2;
        _1525 = frontier_phi_27_51_ladder_1;
        _1527 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1507 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_495, _496, _497), _1431);
        _1523 = _1507.x * cbModelParam._m0[1u].z;
        _1525 = _1507.y * cbModelParam._m0[1u].z;
        _1527 = _1507.z * cbModelParam._m0[1u].z;
    }
    float _1540 = (((_522 * _472) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1523 - _1422)) + _1422);
    float _1542 = (((_522 * _474) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1525 - _1424)) + _1424);
    float _1544 = (((_522 * _475) + _523) * _487) * ((cbModelParam._m0[1u].w * (_1527 - _1426)) + _1426);
    float _1547 = fma(_1544, cbSceneParam._m0[89u].z, fma(_1542, cbSceneParam._m0[89u].y, _1540 * cbSceneParam._m0[89u].x));
    float _1550 = fma(_1544, cbSceneParam._m0[90u].z, fma(_1542, cbSceneParam._m0[90u].y, _1540 * cbSceneParam._m0[90u].x));
    float _1553 = fma(_1544, cbSceneParam._m0[91u].z, fma(_1542, cbSceneParam._m0[91u].y, _1540 * cbSceneParam._m0[91u].x));
    vec4 _1561 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1563 = _1561.w;
    float _1575 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1563);
    float _1576 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1563);
    float _1577 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1563);
    uvec4 _1581 = floatBitsToUint(cbInstanceData._m0[_446 + 5u]);
    uint _1583 = _1581.x * 14u;
    uint _1584 = _1583 + 13u;
    float _1591 = _487 + (-1.0);
    float _1596 = (cbLight._m0[_1584].x * _1591) + 1.0;
    float _1597 = (cbLight._m0[_1584].y * _1591) + 1.0;
    float _1598 = (cbLight._m0[_1584].z * _1591) + 1.0;
    float _1599 = (cbLight._m0[_1584].w * _1591) + 1.0;
    uint _1600 = _1583 + 5u;
    float _1606 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
    uint _1610 = _1583 + 4u;
    float _1620 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
    uint _1624 = _1583 | 1u;
    float _1635 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_303, _304, _305));
    float _1638 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_303, _304, _305));
    float _3830 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
    float _3841 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
    float _1643 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1645 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1652 = ((cbLight._m0[_1600].x * _1606) * _1645) + (((cbLight._m0[_1610].x * _1575) * _1620) * _1643);
    float _1653 = ((_1606 * cbLight._m0[_1600].y) * _1645) + (((cbLight._m0[_1610].y * _1576) * _1620) * _1643);
    float _1654 = ((_1606 * cbLight._m0[_1600].z) * _1645) + (((cbLight._m0[_1610].z * _1577) * _1620) * _1643);
    uvec4 _1659 = floatBitsToUint(cbLight._m0[_1583 + 12u]);
    bool _1661 = _1659.x == 0u;
    float _1672;
    float _1674;
    float _1676;
    if (_1661)
    {
        _1672 = _1652;
        _1674 = _1653;
        _1676 = _1654;
    }
    else
    {
        uint _1680 = _1583 + 6u;
        float _1696 = (dot(vec3(cbLight._m0[_1583 + 2u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1697 = _1696 * _1696;
        float _3852 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1698 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1699 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1672 = (((cbLight._m0[_1680].x * 0.3183098733425140380859375) * _1698) * _1699) + _1652;
        _1674 = (((cbLight._m0[_1680].y * 0.3183098733425140380859375) * _1698) * _1699) + _1653;
        _1676 = (((cbLight._m0[_1680].z * 0.3183098733425140380859375) * _1698) * _1699) + _1654;
    }
    bool _1679 = _1659.y == 0u;
    float _1717;
    float _1719;
    float _1721;
    if (_1679)
    {
        _1717 = _1672;
        _1719 = _1674;
        _1721 = _1676;
    }
    else
    {
        uint _1890 = _1583 + 7u;
        float _1906 = (dot(vec3(cbLight._m0[_1583 + 3u].xyz), vec3(_303, _304, _305)) * 0.5) + 0.5;
        float _1907 = _1906 * _1906;
        float _3868 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
        float _1908 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1909 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _1717 = (((cbLight._m0[_1890].x * 0.3183098733425140380859375) * _1908) * _1909) + _1672;
        _1719 = (((cbLight._m0[_1890].y * 0.3183098733425140380859375) * _1908) * _1909) + _1674;
        _1721 = (((cbLight._m0[_1890].z * 0.3183098733425140380859375) * _1908) * _1909) + _1676;
    }
    uint _1724 = _1583 + 8u;
    float _1737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1583].w)) * _307) * 0.949999988079071044921875);
    float _1738 = _1737 * _1737;
    float _1739 = cbLight._m0[_1583].x + _385;
    float _1740 = cbLight._m0[_1583].y + _386;
    float _1741 = cbLight._m0[_1583].z + _387;
    float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
    float _1746 = _1745 * _1739;
    float _1747 = _1745 * _1740;
    float _1748 = _1745 * _1741;
    float _1749 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1583].xyz));
    float _3884 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
    float _1752 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _1753 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1754 = dot(vec3(_303, _304, _305), vec3(_1746, _1747, _1748));
    float _3906 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _1757 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1758 = dot(vec3(cbLight._m0[_1583].xyz), vec3(_1746, _1747, _1748));
    float _3917 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
    float _1762 = _1738 * _1738;
    float _1766 = ((_1757 * _1757) * (_1762 + (-1.0))) + 1.0;
    float _1774 = exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0);
    float _1775 = 0.959999978542327880859375 - _469;
    float _1777 = 0.959999978542327880859375 - _470;
    float _1778 = 0.959999978542327880859375 - _471;
    float _1785 = 1.0 - _1738;
    float _1796 = (0.5 / (((_1753 * ((_1752 * _1785) + _1738)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1785) + _1738) * _1752))) * _1752;
    float _3928 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1798 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1762 / ((_1766 * _1766) * 3.141590118408203125));
    uint _1812 = _1583 + 9u;
    float _1823 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1624].w)) * _307) * 0.949999988079071044921875);
    float _1824 = _1823 * _1823;
    float _1825 = cbLight._m0[_1624].x + _385;
    float _1826 = cbLight._m0[_1624].y + _386;
    float _1827 = cbLight._m0[_1624].z + _387;
    float _1831 = inversesqrt(dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827)));
    float _1832 = _1831 * _1825;
    float _1833 = _1831 * _1826;
    float _1834 = _1831 * _1827;
    float _1835 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1624].xyz));
    float _3939 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1838 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1839 = dot(vec3(_303, _304, _305), vec3(_1832, _1833, _1834));
    float _3950 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1842 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1843 = dot(vec3(cbLight._m0[_1624].xyz), vec3(_1832, _1833, _1834));
    float _3961 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1847 = _1824 * _1824;
    float _1851 = ((_1842 * _1842) * (_1847 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0);
    float _1865 = 1.0 - _1824;
    float _1875 = (0.5 / (((_1753 * ((_1838 * _1865) + _1824)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _1865) + _1824) * _1838))) * _1838;
    float _3972 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1877 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1847 / ((_1851 * _1851) * 3.141590118408203125));
    float _1887 = (((((_1858 * _1775) + _472) * cbLight._m0[_1812].x) * _1877) * _1606) + ((((cbLight._m0[_1724].x * _1575) * ((_1774 * _1775) + _472)) * _1798) * _1620);
    float _1888 = (((((_1858 * _1777) + _474) * cbLight._m0[_1812].y) * _1877) * _1606) + ((((cbLight._m0[_1724].y * _1576) * ((_1774 * _1777) + _474)) * _1798) * _1620);
    float _1889 = (((((_1858 * _1778) + _475) * cbLight._m0[_1812].z) * _1877) * _1606) + ((((cbLight._m0[_1724].z * _1577) * ((_1774 * _1778) + _475)) * _1798) * _1620);
    float _1951;
    float _1953;
    float _1955;
    if (_1661)
    {
        _1951 = _1887;
        _1953 = _1888;
        _1955 = _1889;
    }
    else
    {
        uint _1957 = _1583 + 2u;
        uint _1961 = _1583 + 10u;
        float _1975 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1957].w)) * _307) * 0.949999988079071044921875);
        float _1976 = _1975 * _1975;
        float _1977 = cbLight._m0[_1957].x + _385;
        float _1978 = cbLight._m0[_1957].y + _386;
        float _1979 = cbLight._m0[_1957].z + _387;
        float _1983 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
        float _1984 = _1983 * _1977;
        float _1985 = _1983 * _1978;
        float _1986 = _1983 * _1979;
        float _1987 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_1957].xyz));
        float _3983 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        float _1990 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _1991 = dot(vec3(_303, _304, _305), vec3(_1984, _1985, _1986));
        float _3994 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1994 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1995 = dot(vec3(cbLight._m0[_1957].xyz), vec3(_1984, _1985, _1986));
        float _4005 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1999 = _1976 * _1976;
        float _2003 = ((_1994 * _1994) * (_1999 + (-1.0))) + 1.0;
        float _2010 = exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0);
        float _2017 = 1.0 - _1976;
        float _2027 = (0.5 / (((_1753 * ((_1990 * _2017) + _1976)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2017) + _1976) * _1990))) * _1990;
        float _4016 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2029 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1999 / ((_2003 * _2003) * 3.141590118408203125));
        float _2030 = isnan(1.0) ? _1598 : (isnan(_1598) ? 1.0 : min(_1598, 1.0));
        _1951 = (((((_2010 * _1775) + _472) * cbLight._m0[_1961].x) * _2029) * _2030) + _1887;
        _1953 = (((((_2010 * _1777) + _474) * cbLight._m0[_1961].y) * _2029) * _2030) + _1888;
        _1955 = (((((_2010 * _1778) + _475) * cbLight._m0[_1961].z) * _2029) * _2030) + _1889;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1679)
    {
        _2065 = _1951;
        _2067 = _1953;
        _2069 = _1955;
    }
    else
    {
        uint _2076 = _1583 + 3u;
        uint _2080 = _1583 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _307) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _385;
        float _2097 = cbLight._m0[_2076].y + _386;
        float _2098 = cbLight._m0[_2076].z + _387;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_303, _304, _305), vec3(cbLight._m0[_2076].xyz));
        float _4032 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2110 = dot(vec3(_303, _304, _305), vec3(_2103, _2104, _2105));
        float _4043 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4054 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
        float _2136 = 1.0 - _2095;
        float _2146 = (0.5 / (((_1753 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1753 * _2136) + _2095) * _2109))) * _2109;
        float _4065 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2148 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2149 = isnan(1.0) ? _1599 : (isnan(_1599) ? 1.0 : min(_1599, 1.0));
        _2065 = (((((_2129 * _1775) + _472) * cbLight._m0[_2080].x) * _2148) * _2149) + _1951;
        _2067 = (((((_2129 * _1777) + _474) * cbLight._m0[_2080].y) * _2148) * _2149) + _1953;
        _2069 = (((((_2129 * _1778) + _475) * cbLight._m0[_2080].z) * _2148) * _2149) + _1955;
    }
    float _2283;
    float _2285;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_1581.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2373;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
            _2379 = 0.0;
            _2381 = 0.0;
            _2383 = 0.0;
        }
        else
        {
            float _2374;
            float _2376;
            float _2378;
            float _2380;
            float _2382;
            float _2384;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            uint _2531 = 0u;
            uint _2540;
            bool _2541;
            for (;;)
            {
                _2540 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                _2541 = _2540 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2541)
                {
                    frontier_phi_68_pred = _2527;
                    frontier_phi_68_pred_1 = _2530;
                    frontier_phi_68_pred_2 = _2529;
                    frontier_phi_68_pred_3 = _2528;
                    frontier_phi_68_pred_4 = _2526;
                    frontier_phi_68_pred_5 = _2525;
                }
                else
                {
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    uint _2676;
                    _2670 = _2525;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2540;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    for (;;)
                    {
                        uint _2680 = uint(findLSB(_2676)) + (_2531 << 5u);
                        uint _2677 = (_2676 + 4294967295u) & _2676;
                        uint _2682 = _2680 * 48u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2702 = (_2680 * 48u) + 4u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        uint _2721 = (_2680 * 48u) + 8u;
                        vec3 _2732 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x));
                        float _2736 = _2696.x - _2225;
                        float _2737 = _2696.y - _2226;
                        float _2738 = _2696.z - _2227;
                        float _2739 = dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738));
                        float _2742 = inversesqrt(_2739);
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2746 = dot(vec3(_427, _430, _433), vec3(_2743, _2744, _2745));
                        float _2751 = 1.0 - (_2739 * _2696.w);
                        float _4091 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2752 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2753 = sqrt(_2739) * _2715.w;
                        float _2756 = 1.39999997615814208984375 / (_2753 + 1.39999997615814208984375);
                        float _2757 = _2756 * _2756;
                        float _2760 = ((1.0 - _2757) * _2746) + _2757;
                        float _2763 = _2753 * _2753;
                        float _2767 = ((isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0))) * _2752) / ((_2763 * 0.699999988079071044921875) + 1.0);
                        float _2771 = (-0.0) - _2225;
                        float _2772 = (-0.0) - _2226;
                        float _2773 = (-0.0) - _2227;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2778 = _2777 * _2771;
                        float _2779 = _2777 * _2772;
                        float _2780 = _2777 * _2773;
                        float _2788 = exp2(log2(1.0 / ((_2763 * 3.5) + 5.0)) * 0.25);
                        float _2789 = 1.0 - _503;
                        float _2796 = sqrt(1.0 - ((1.0 - (_2789 * _2789)) * (1.0 - (_2788 * _2788))));
                        float _2797 = _2796 * _2796;
                        float _2798 = _2797 * _2797;
                        float _2799 = _2778 + _2743;
                        float _2800 = _2779 + _2744;
                        float _2801 = _2780 + _2745;
                        float _2805 = inversesqrt(dot(vec3(_2799, _2800, _2801), vec3(_2799, _2800, _2801)));
                        float _2809 = dot(vec3(_427, _430, _433), vec3(_2778, _2779, _2780));
                        float _4107 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2812 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2813 = dot(vec3(_427, _430, _433), vec3(_2805 * _2799, _2805 * _2800, _2805 * _2801));
                        float _4118 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2816 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2820 = ((_2816 * _2816) * (_2798 + (-1.0))) + 1.0;
                        float _2821 = _2756 * _2797;
                        float _2822 = _2821 * _2821;
                        float _2825 = ((1.0 - _2822) * _2746) + _2822;
                        float _4129 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
                        float _2826 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2827 = 1.0 - _2797;
                        float _2837 = (0.5 / (((_2826 * ((_2812 * _2827) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2826 * _2827) + _2797) * _2812))) * _2826;
                        float _4140 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
                        float _2848 = (((_2798 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_2820 * _2820) * ((_2763 * 2.1991131305694580078125) + 3.141590118408203125))) * _2752;
                        _2600 = (_2767 * _2715.x) + _2673;
                        _2601 = (_2767 * _2715.y) + _2674;
                        _2602 = (_2767 * _2715.z) + _2675;
                        _2597 = (_2848 * _2732.x) + _2670;
                        _2598 = (_2848 * _2732.y) + _2671;
                        _2599 = (_2848 * _2732.z) + _2672;
                        if (_2677 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2670 = _2597;
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2677;
                        }
                    }
                    frontier_phi_68_pred = _2599;
                    frontier_phi_68_pred_1 = _2602;
                    frontier_phi_68_pred_2 = _2601;
                    frontier_phi_68_pred_3 = _2600;
                    frontier_phi_68_pred_4 = _2598;
                    frontier_phi_68_pred_5 = _2597;
                }
                _2378 = frontier_phi_68_pred;
                _2384 = frontier_phi_68_pred_1;
                _2382 = frontier_phi_68_pred_2;
                _2380 = frontier_phi_68_pred_3;
                _2376 = frontier_phi_68_pred_4;
                _2374 = frontier_phi_68_pred_5;
                uint _2532 = _2531 + 1u;
                if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2525 = _2374;
                    _2526 = _2376;
                    _2527 = _2378;
                    _2528 = _2380;
                    _2529 = _2382;
                    _2530 = _2384;
                    _2531 = _2532;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
            _2379 = _2380;
            _2381 = _2382;
            _2383 = _2384;
        }
        uvec4 _2387 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2388 = _2387.z;
        uint _2390 = (_2388 >> 8u) & 15u;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((4294967295u << _2390) & _2271) == 0u)
        {
            _2493 = _2373;
            _2495 = _2375;
            _2497 = _2377;
            _2499 = _2379;
            _2501 = _2381;
            _2503 = _2383;
        }
        else
        {
            float _2518 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2519 = _2518 * _2225;
            float _2520 = _2518 * _2226;
            float _2521 = _2518 * _2227;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2390 < ((_2388 >> 12u) & 15u))
            {
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2653 = _2373;
                float _2654 = _2375;
                float _2655 = _2377;
                float _2656 = _2379;
                float _2657 = _2381;
                float _2658 = _2383;
                uint _2659 = _2390;
                uint _2668;
                bool _2669;
                for (;;)
                {
                    _2668 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                    _2669 = _2668 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2669)
                    {
                        frontier_phi_79_pred = _2658;
                        frontier_phi_79_pred_1 = _2657;
                        frontier_phi_79_pred_2 = _2656;
                        frontier_phi_79_pred_3 = _2655;
                        frontier_phi_79_pred_4 = _2654;
                        frontier_phi_79_pred_5 = _2653;
                    }
                    else
                    {
                        float _2862;
                        float _2863;
                        float _2864;
                        float _2865;
                        float _2866;
                        float _2867;
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _2875 = _2653;
                        float _2876 = _2654;
                        float _2877 = _2655;
                        float _2878 = _2656;
                        float _2879 = _2657;
                        float _2880 = _2658;
                        uint _2881 = _2668;
                        uint _2882;
                        vec4 _2907;
                        float _2908;
                        vec4 _2923;
                        vec3 _2935;
                        vec4 _2951;
                        vec4 _2967;
                        float _3014;
                        bool _3015;
                        for (;;)
                        {
                            uint _2892 = ((_2659 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2881));
                            _2882 = (_2881 + 4294967295u) & _2881;
                            uint _2894 = _2892 * 40u;
                            _2907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2894 + 3u)).x));
                            _2908 = _2907.w;
                            uint _2910 = (_2892 * 40u) + 4u;
                            _2923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2910 + 3u)).x));
                            uint _2925 = (_2892 * 40u) + 8u;
                            _2935 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x));
                            uint _2938 = (_2892 * 40u) + 16u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2954 = (_2892 * 40u) + 20u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2970 = (_2892 * 40u) + 24u;
                            vec4 _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2989 = (_2892 * 40u) + 28u;
                            vec4 _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            _3014 = fma(_2227, _3002.z, fma(_2226, _3002.y, _3002.x * _2225)) + _3002.w;
                            _3015 = !((fma(_2227, _2983.z, fma(_2226, _2983.y, _2983.x * _2225)) + _2983.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3015)
                            {
                                float _3042 = _2907.x - _2225;
                                float _3043 = _2907.y - _2226;
                                float _3044 = _2907.z - _2227;
                                float _3045 = dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044));
                                float _3048 = inversesqrt(_3045);
                                float _3049 = _3048 * _3042;
                                float _3050 = _3048 * _3043;
                                float _3051 = _3048 * _3044;
                                float _3055 = 1.0 - (_3045 / (_2908 * _2908));
                                float _4151 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3060 = sqrt(_3045) * _2923.w;
                                float _3062 = 1.39999997615814208984375 / (_3060 + 1.39999997615814208984375);
                                float _3063 = _3062 * _3062;
                                float _3066 = ((1.0 - _3063) * dot(vec3(_3049, _3050, _3051), vec3(_427, _430, _433))) + _3063;
                                float _3069 = _3060 * _3060;
                                float _3073 = (fma(_2227, _2951.z, fma(_2226, _2951.y, _2951.x * _2225)) + _2951.w) / _3014;
                                float _3074 = (fma(_2227, _2967.z, fma(_2226, _2967.y, _2967.x * _2225)) + _2967.w) / _3014;
                                float _3078 = 1.0 - dot(vec2(_3073, _3074), vec2(_3073, _3074));
                                float _4167 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3079 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3080 = _3079 * (((isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0))) * _3056) / ((_3069 * 0.699999988079071044921875) + 1.0));
                                float _3092 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                                float _3093 = 1.0 - _503;
                                float _3100 = sqrt(1.0 - ((1.0 - (_3093 * _3093)) * (1.0 - (_3092 * _3092))));
                                float _3101 = _3100 * _3100;
                                float _3102 = _3101 * _3101;
                                float _3103 = _3049 - _2519;
                                float _3104 = _3050 - _2520;
                                float _3105 = _3051 - _2521;
                                float _3109 = inversesqrt(dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105)));
                                float _3113 = dot(vec3(_427, _430, _433), vec3((-0.0) - _2519, (-0.0) - _2520, (-0.0) - _2521));
                                float _4178 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3117 = dot(vec3(_427, _430, _433), vec3(_3109 * _3103, _3109 * _3104, _3109 * _3105));
                                float _4189 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3120 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3124 = ((_3120 * _3120) * (_3102 + (-1.0))) + 1.0;
                                float _3125 = _3062 * _3101;
                                float _3126 = _3125 * _3125;
                                float _3132 = ((1.0 - _3126) * dot(vec3(_427, _430, _433), vec3(_3049, _3050, _3051))) + _3126;
                                float _4200 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3133 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3134 = 1.0 - _3101;
                                float _3144 = (0.5 / (((_3133 * ((_3116 * _3134) + _3101)) + 9.9999999392252902907785028219223e-09) + (((_3133 * _3134) + _3101) * _3116))) * _3133;
                                float _4211 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3154 = (_3079 * _3056) * (((_3102 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3124 * _3124) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3080 * _2923.z;
                                frontier_phi_85_pred_1 = _3080 * _2923.y;
                                frontier_phi_85_pred_2 = _3080 * _2923.x;
                                frontier_phi_85_pred_3 = _3154 * _2935.z;
                                frontier_phi_85_pred_4 = _3154 * _2935.y;
                                frontier_phi_85_pred_5 = _3154 * _2935.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3163 = frontier_phi_85_pred;
                            _3162 = frontier_phi_85_pred_1;
                            _3161 = frontier_phi_85_pred_2;
                            _3160 = frontier_phi_85_pred_3;
                            _3159 = frontier_phi_85_pred_4;
                            _3158 = frontier_phi_85_pred_5;
                            _2865 = _3161 + _2878;
                            _2866 = _3162 + _2879;
                            _2867 = _3163 + _2880;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2864 = _3160 + _2877;
                            if (_2882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2864;
                                _2878 = _2865;
                                _2879 = _2866;
                                _2880 = _2867;
                                _2881 = _2882;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2867;
                        frontier_phi_79_pred_1 = _2866;
                        frontier_phi_79_pred_2 = _2865;
                        frontier_phi_79_pred_3 = _2864;
                        frontier_phi_79_pred_4 = _2863;
                        frontier_phi_79_pred_5 = _2862;
                    }
                    _2504 = frontier_phi_79_pred;
                    _2502 = frontier_phi_79_pred_1;
                    _2500 = frontier_phi_79_pred_2;
                    _2498 = frontier_phi_79_pred_3;
                    _2496 = frontier_phi_79_pred_4;
                    _2494 = frontier_phi_79_pred_5;
                    uint _2660 = _2659 + 1u;
                    if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2653 = _2494;
                        _2654 = _2496;
                        _2655 = _2498;
                        _2656 = _2500;
                        _2657 = _2502;
                        _2658 = _2504;
                        _2659 = _2660;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2500;
                frontier_phi_60_61_ladder_1 = _2504;
                frontier_phi_60_61_ladder_2 = _2502;
                frontier_phi_60_61_ladder_3 = _2498;
                frontier_phi_60_61_ladder_4 = _2496;
                frontier_phi_60_61_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_60_61_ladder = _2379;
                frontier_phi_60_61_ladder_1 = _2383;
                frontier_phi_60_61_ladder_2 = _2381;
                frontier_phi_60_61_ladder_3 = _2377;
                frontier_phi_60_61_ladder_4 = _2375;
                frontier_phi_60_61_ladder_5 = _2373;
            }
            _2493 = frontier_phi_60_61_ladder_5;
            _2495 = frontier_phi_60_61_ladder_4;
            _2497 = frontier_phi_60_61_ladder_3;
            _2499 = frontier_phi_60_61_ladder;
            _2501 = frontier_phi_60_61_ladder_2;
            _2503 = frontier_phi_60_61_ladder_1;
        }
        float _2508 = isnan(1.0) ? _487 : (isnan(_487) ? 1.0 : min(_487, 1.0));
        _2283 = (_2508 * _2499) + _1717;
        _2285 = (_2508 * _2501) + _1719;
        _2287 = (_2508 * _2503) + _1721;
        _2289 = ((_2493 * _472) * _2508) + _2065;
        _2291 = ((_2495 * _474) * _2508) + _2067;
        _2293 = ((_2497 * _475) * _2508) + _2069;
    }
    else
    {
        _2283 = _1717;
        _2285 = _1719;
        _2287 = _1721;
        _2289 = _2065;
        _2291 = _2067;
        _2293 = _2069;
    }
    float _4227 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4238 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4249 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4260 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _2311 = ((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2283 + ((isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))) * _487))) + ((_2289 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2312 = ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2285 + ((isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))) * _487))) + ((_2291 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2313 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2287 + ((isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))) * _487))) + ((_2293 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1329)) * cbPerFrame._m0[3u].x);
    float _2318 = cbInstanceData._m0[_446 + 6u].w * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)));
    float _2323 = _406 / cbSceneParam._m0[86u].x;
    float _2324 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2338 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, (log2((isnan(cbSceneParam._m0[77u].w) ? _327 : (isnan(_327) ? cbSceneParam._m0[77u].w : min(_327, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2340 = _2338.x;
    float _2341 = _2338.y;
    float _2342 = _2338.z;
    float _2343 = _2338.w;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_327 > cbSceneParam._m0[78u].w)
    {
        float _2398 = isnan(_327) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _327 : min(cbSceneParam._m0[80u].w, _327));
        float _2399 = _2398 / _327;
        float _2410 = _2399 * _378;
        float _2411 = _379 * _2399;
        float _2412 = (-0.0) - _2411;
        float _2413 = _2399 * _380;
        float _2415 = (cbSceneParam._m0[77u].w * _2412) / _2398;
        float _2416 = _2415 + cbSceneParam._m0[79u].w;
        float _2417 = cbSceneParam._m0[79u].w - _2411;
        float _2423 = sqrt(((_2410 * _2410) + (_2411 * _2411)) + (_2413 * _2413));
        float _2426 = (1.0 - (cbSceneParam._m0[77u].w / _2398)) * _2423;
        float _2431 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2433 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2610;
        if (abs((_2412 - _2415) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2610 = ((((_2416 > 0.0) ? exp2(_2431 * _2416) : (2.0 - exp2(_2433 * _2416))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2426;
        }
        else
        {
            float _2554 = 1.0 / cbSceneParam._m0[80u].x;
            float _2555 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : max(_2416, _2417));
            float _2556 = isnan(_2417) ? _2416 : (isnan(_2416) ? _2417 : min(_2416, _2417));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            _2610 = ((abs(_2423 / _2412) * cbSceneParam._m0[80u].y) * ((((_2565 - _2566) * 2.0) - ((exp2(_2431 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)))) - exp2(_2431 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))))) * _2554)) - ((exp2(_2433 * _2565) - exp2(_2433 * _2566)) * _2554))) + (_2426 * cbSceneParam._m0[80u].z);
        }
        vec4 _2612 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2323, _2324, 1.0), 0.0);
        float _2621 = exp2((_2610 * (-1.44269502162933349609375)) * (1.0 - _2612.w));
        float _2622 = log2(_2621);
        float _2638 = log2(_2343);
        _2435 = (exp2(_2638 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].x)) * _2612.x) / cbSceneParam._m0[78u].x)) + _2340;
        _2437 = (exp2(_2638 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].y)) * _2612.y) / cbSceneParam._m0[78u].y)) + _2341;
        _2439 = (exp2(_2638 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2622 * cbSceneParam._m0[78u].z)) * _2612.z) / cbSceneParam._m0[78u].z)) + _2342;
        _2441 = _2621 * _2343;
    }
    else
    {
        _2435 = _2340;
        _2437 = _2341;
        _2439 = _2342;
        _2441 = _2343;
    }
    bool _2648;
    vec4 _2451;
    vec4 _2473;
    float _2475;
    float _2479;
    float _2480;
    float _2481;
    float _2482;
    bool _2492;
    for (;;)
    {
        _2451 = cbMatDynParam._m0[0u];
        float _2453 = roundEven(_2451.y);
        bool _2454 = _2453 == 3.0;
        float _2455 = log2(_2441);
        float _2462 = exp2(_2455 * cbSceneParam._m0[78u].x) * _2311;
        float _2463 = exp2(_2455 * cbSceneParam._m0[78u].y) * _2312;
        float _2464 = exp2(_2455 * cbSceneParam._m0[78u].z) * _2313;
        float _2471 = _394 + (-0.5);
        _2473 = cbMtdParam._m0[1u];
        _2475 = _2473.y * _2471;
        float _2478 = (_2453 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2479 = _2478 * (_2454 ? _2462 : (_2462 + (cbSceneParam._m0[72u].w * _2435)));
        _2480 = _2478 * (_2454 ? _2463 : (_2463 + (cbSceneParam._m0[72u].w * _2437)));
        _2481 = _2478 * (_2454 ? _2464 : (_2464 + (cbSceneParam._m0[72u].w * _2439)));
        _2482 = _2471 * 0.999000012874603271484375;
        _2492 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2492)
        {
            if ((cbInstanceData._m0[_446 + 7u].x + _2482) < 0.5)
            {
                _2648 = true;
                break;
            }
        }
        uint _2589 = _448 + uint(_2451.w);
        if ((cbInstanceData._m0[_2589].w < 1.0) && ((cbInstanceData._m0[_2589].w + _2482) < 0.5))
        {
            _2648 = true;
            break;
        }
        if ((_2475 + _255) < _2473.x)
        {
            _2648 = true;
            break;
        }
        _2648 = false;
        break;
    }
    float _2853;
    if (_2648)
    {
        discard_state = true;
        _2853 = 0.0;
    }
    else
    {
        _2853 = _2318;
    }
    SV_Target.x = _2479;
    SV_Target.y = _2480;
    SV_Target.z = _2481;
    SV_Target.w = _2853;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2318;
    discard_exit();
}


