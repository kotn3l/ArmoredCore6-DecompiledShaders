#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _908;
float _3324;
float _3325;
float _3326;
float _3327;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _191 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _192 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _193 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_191, _192, _193), vec3(_191, _192, _193)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    float _237 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _238 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _251 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_237 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_238 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _257 = _251.w;
    float _258 = _251.x * cbMtdParam._m0[9u].x;
    float _259 = _251.y * cbMtdParam._m0[9u].y;
    float _260 = _251.z * cbMtdParam._m0[9u].z;
    float _261 = _257 * TEXCOORD_1.z;
    vec4 _273 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * _237) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _238) + cbTextureTilingScale._m0[2u].w));
    float _277 = cbMtdParam._m0[10u].x + _273.x;
    vec4 _289 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _237) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _238) + cbTextureTilingScale._m0[1u].w));
    float _293 = _289.z;
    float _297 = (_289.x * 2.0) + (-1.0);
    float _299 = (_289.y * 2.0) + (-1.0);
    float _300 = dot(vec2(_297, _299), vec2(_297, _299));
    float _3336 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _306 = sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))));
    float _309 = fma(_306, _221, fma(_299, _213 * TANGENT.x, (_199 * _191) * _297));
    float _312 = fma(_306, _222, fma(_299, _213 * TANGENT.y, (_199 * _192) * _297));
    float _315 = fma(_306, _223, fma(_299, _213 * TANGENT.z, (_199 * _193) * _297));
    float _319 = inversesqrt(dot(vec3(_309, _312, _315), vec3(_309, _312, _315)));
    float _320 = _319 * _309;
    float _321 = _319 * _312;
    float _322 = _319 * _315;
    float _3347 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _323 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _324 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
    float _3369 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    float _3380 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _3391 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _3402 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _328 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _587 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _593 = (cbMatDynParam._m0[5u].x * _587) + cbMatDynParam._m0[5u].y;
        float _3413 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _598 = (cbMatDynParam._m0[5u].z * _587) + cbMatDynParam._m0[5u].w;
        float _3424 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) - _594)) + _594) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_322, cbSceneParam._m0[5u].z, fma(_321, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _320));
    float _447 = fma(_322, cbSceneParam._m0[6u].z, fma(_321, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _320));
    float _450 = fma(_322, cbSceneParam._m0[7u].z, fma(_321, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _320));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3435 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    float _478 = 1.0 - _328;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _328;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _328;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _328;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD_1.w;
    float _505 = dot(vec3(_320, _321, _322), vec3(_402, _403, _404));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _320) - _402;
    float _513 = (_508 * _321) - _403;
    float _514 = (_508 * _322) - _404;
    float _518 = abs(dot(vec3(_402, _403, _404), vec3(_320, _321, _322)));
    float _3468 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_324);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _907;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _632 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _636 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _640 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _665 = _568 + _320;
        float _666 = _572 + _321;
        float _667 = _576 + _322;
        float _677 = fma(_667, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665)) - _632;
        float _678 = fma(_667, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665)) - _636;
        float _679 = fma(_667, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665)) - _640;
        float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
        float _696 = ((_683 * _677) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_632 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_683 * _678) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_636 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_683 * _679) / cbModelParam._m0[34u].z) + ((((((_640 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_701.x + (-0.5));
        float _737 = _735 * (_701.y + (-0.5));
        float _738 = _735 * (_701.z + (-0.5));
        float _745 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_708.x + (-0.5));
        float _747 = _745 * (_708.y + (-0.5));
        float _748 = _745 * (_708.z + (-0.5));
        float _755 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_715.x + (-0.5));
        float _757 = _755 * (_715.y + (-0.5));
        float _758 = _755 * (_715.z + (-0.5));
        float _765 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_722.x + (-0.5));
        float _767 = _765 * (_722.y + (-0.5));
        float _768 = _765 * (_722.z + (-0.5));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = _736 * 0.5;
        float _773 = _746 * 0.5;
        float _774 = _756 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _789 = (dot(vec3(_320, _321, _322), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _799 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3516 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_801 + 1.0))) + _806) * _769;
        float _816 = _737 * 0.5;
        float _817 = _747 * 0.5;
        float _818 = _757 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_320, _321, _322), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3549 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_843 + 1.0))) + _848) * _770;
        float _858 = _738 * 0.5;
        float _859 = _748 * 0.5;
        float _860 = _758 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_320, _321, _322), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3582 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_885 + 1.0))) + _890) * _771;
        _907 = _738;
        _909 = _737;
        _910 = _736;
        _911 = _748;
        _912 = _747;
        _913 = _746;
        _914 = _758;
        _915 = _757;
        _916 = _756;
        _917 = _771;
        _918 = _770;
        _919 = _769;
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
    }
    else
    {
        _907 = _908;
        _909 = _908;
        _910 = _908;
        _911 = _908;
        _912 = _908;
        _913 = _908;
        _914 = _908;
        _915 = _908;
        _916 = _908;
        _917 = _908;
        _918 = _908;
        _919 = _908;
        _920 = 0.0;
        _921 = 0.0;
        _922 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _955 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _959 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _982 = _568 + _320;
        float _983 = _572 + _321;
        float _984 = _576 + _322;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_320, _321, _322), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3645 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_320, _321, _322), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3678 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_320, _321, _322), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3711 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _908;
        _1221 = _908;
        _1222 = _908;
        _1223 = _908;
        _1224 = _908;
        _1225 = _908;
        _1226 = _908;
        _1227 = _908;
        _1228 = _908;
        _1229 = _908;
        _1230 = _908;
        _1231 = _908;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _512 * 0.5;
    float _1289 = _513 * 0.5;
    float _1290 = _514 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_907, _911, _914, _917));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_909, _912, _915, _918));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _913, _916, _919));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _324);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1420 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1423 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1451 = frontier_phi_19_17_ladder;
        }
        float _1679;
        if (_1420 > 0.0)
        {
            _1679 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1679 = frontier_phi_28_24_ladder;
        }
        float _1936;
        if (_1423 > 0.0)
        {
            _1936 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1936 = frontier_phi_40_35_ladder;
        }
        float _1938 = isnan(_1679) ? _1451 : (isnan(_1451) ? _1679 : min(_1451, _1679));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1417) + _1406;
        float _1944 = (_1939 * _1420) + _1410;
        float _1945 = (_1939 * _1423) + _1414;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_18_40_ladder = _2073.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2073.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_18_40_ladder_2;
        _1441 = frontier_phi_18_40_ladder_1;
        _1443 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _324);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1540;
    float _1542;
    float _1544;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1504 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1508 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1512 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1515 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1518 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1521 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1684;
        if (_1515 > 0.0)
        {
            _1684 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1684 = frontier_phi_30_26_ladder;
        }
        float _1963;
        if (_1518 > 0.0)
        {
            _1963 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1963 = frontier_phi_42_37_ladder;
        }
        float _2176;
        if (_1521 > 0.0)
        {
            _2176 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2176 = frontier_phi_51_48_ladder;
        }
        float _2178 = isnan(_1963) ? _1684 : (isnan(_1684) ? _1963 : min(_1684, _1963));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1515) + _1504;
        float _2184 = (_2179 * _1518) + _1508;
        float _2185 = (_2179 * _1521) + _1512;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2186;
        float _2189 = _2186 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2185 > _2189) || ((_2185 < _2187) || ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 < _2187) || (_2183 > _2189))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2185, cbModelParam._m0[17u].z, fma(_2184, cbModelParam._m0[17u].y, _2183 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2185, cbModelParam._m0[18u].z, fma(_2184, cbModelParam._m0[18u].y, _2183 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2185, cbModelParam._m0[19u].z, fma(_2184, cbModelParam._m0[19u].y, _2183 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_27_51_ladder = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1540 = frontier_phi_27_51_ladder_2;
        _1542 = frontier_phi_27_51_ladder_1;
        _1544 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1524 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1448);
        _1540 = _1524.x * cbModelParam._m0[1u].z;
        _1542 = _1524.y * cbModelParam._m0[1u].z;
        _1544 = _1524.z * cbModelParam._m0[1u].z;
    }
    float _1557 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1540 - _1439)) + _1439);
    float _1559 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1542 - _1441)) + _1441);
    float _1561 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1544 - _1443)) + _1443);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    vec4 _1578 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1580 = _1578.w;
    float _1592 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1580);
    float _1593 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1580);
    float _1594 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1580);
    uvec4 _1598 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1600 = _1598.x * 14u;
    uint _1601 = _1600 + 13u;
    float _1608 = _504 + (-1.0);
    float _1613 = (cbLight._m0[_1601].x * _1608) + 1.0;
    float _1614 = (cbLight._m0[_1601].y * _1608) + 1.0;
    float _1615 = (cbLight._m0[_1601].z * _1608) + 1.0;
    float _1616 = (cbLight._m0[_1601].w * _1608) + 1.0;
    uint _1617 = _1600 + 5u;
    float _1623 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1627 = _1600 + 4u;
    float _1637 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1641 = _1600 | 1u;
    float _1652 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_320, _321, _322));
    float _1655 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_320, _321, _322));
    float _3847 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
    float _3858 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1660 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1662 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1669 = ((cbLight._m0[_1617].x * _1623) * _1662) + (((cbLight._m0[_1627].x * _1592) * _1637) * _1660);
    float _1670 = ((_1623 * cbLight._m0[_1617].y) * _1662) + (((cbLight._m0[_1627].y * _1593) * _1637) * _1660);
    float _1671 = ((_1623 * cbLight._m0[_1617].z) * _1662) + (((cbLight._m0[_1627].z * _1594) * _1637) * _1660);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1600 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1669;
        _1691 = _1670;
        _1693 = _1671;
    }
    else
    {
        uint _1697 = _1600 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1600 + 2u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3869 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1716 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1669;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1907 = _1600 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1600 + 3u].xyz), vec3(_320, _321, _322)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3885 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
        float _1926 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1734 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1689;
        _1736 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1691;
        _1738 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1693;
    }
    uint _1741 = _1600 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _324) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1600].x + _402;
    float _1757 = cbLight._m0[_1600].y + _403;
    float _1758 = cbLight._m0[_1600].z + _404;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1600].xyz));
    float _3901 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1770 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _1771 = dot(vec3(_320, _321, _322), vec3(_1763, _1764, _1765));
    float _3923 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1763, _1764, _1765));
    float _3934 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _486;
    float _1794 = 0.959999978542327880859375 - _487;
    float _1795 = 0.959999978542327880859375 - _488;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3945 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1829 = _1600 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1641].w)) * _324) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1641].x + _402;
    float _1843 = cbLight._m0[_1641].y + _403;
    float _1844 = cbLight._m0[_1641].z + _404;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1641].xyz));
    float _3956 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1856 = dot(vec3(_320, _321, _322), vec3(_1849, _1850, _1851));
    float _3967 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1641].xyz), vec3(_1849, _1850, _1851));
    float _3978 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0);
    float _1882 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1770 * ((_1855 * _1882) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1882) + _1841) * _1855))) * _1855;
    float _3989 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1904 = (((((_1875 * _1792) + _489) * cbLight._m0[_1829].x) * _1894) * _1623) + ((((cbLight._m0[_1741].x * _1592) * ((_1791 * _1792) + _489)) * _1815) * _1637);
    float _1905 = (((((_1875 * _1794) + _491) * cbLight._m0[_1829].y) * _1894) * _1623) + ((((cbLight._m0[_1741].y * _1593) * ((_1791 * _1794) + _491)) * _1815) * _1637);
    float _1906 = (((((_1875 * _1795) + _492) * cbLight._m0[_1829].z) * _1894) * _1623) + ((((cbLight._m0[_1741].z * _1594) * ((_1791 * _1795) + _492)) * _1815) * _1637);
    float _1968;
    float _1970;
    float _1972;
    if (_1678)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1600 + 2u;
        uint _1978 = _1600 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _324) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _402;
        float _1995 = cbLight._m0[_1974].y + _403;
        float _1996 = cbLight._m0[_1974].z + _404;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_1974].xyz));
        float _4000 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2008 = dot(vec3(_320, _321, _322), vec3(_2001, _2002, _2003));
        float _4011 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _4022 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) * 5.0);
        float _2034 = 1.0 - _1993;
        float _2044 = (0.5 / (((_1770 * ((_2007 * _2034) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2034) + _1993) * _2007))) * _2007;
        float _4033 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2046 = (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2047 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1968 = (((((_2027 * _1792) + _489) * cbLight._m0[_1978].x) * _2046) * _2047) + _1904;
        _1970 = (((((_2027 * _1794) + _491) * cbLight._m0[_1978].y) * _2046) * _2047) + _1905;
        _1972 = (((((_2027 * _1795) + _492) * cbLight._m0[_1978].z) * _2046) * _2047) + _1906;
    }
    float _2082;
    float _2084;
    float _2086;
    if (_1696)
    {
        _2082 = _1968;
        _2084 = _1970;
        _2086 = _1972;
    }
    else
    {
        uint _2093 = _1600 + 3u;
        uint _2097 = _1600 + 11u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _324) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _402;
        float _2114 = cbLight._m0[_2093].y + _403;
        float _2115 = cbLight._m0[_2093].z + _404;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_320, _321, _322), vec3(cbLight._m0[_2093].xyz));
        float _4049 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _2127 = dot(vec3(_320, _321, _322), vec3(_2120, _2121, _2122));
        float _4060 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4071 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0);
        float _2153 = 1.0 - _2112;
        float _2163 = (0.5 / (((_1770 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2153) + _2112) * _2126))) * _2126;
        float _4082 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2165 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2166 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _2082 = (((((_2146 * _1792) + _489) * cbLight._m0[_2097].x) * _2165) * _2166) + _1968;
        _2084 = (((((_2146 * _1794) + _491) * cbLight._m0[_2097].y) * _2165) * _2166) + _1970;
        _2086 = (((((_2146 * _1795) + _492) * cbLight._m0[_2097].z) * _2165) * _2166) + _1972;
    }
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_1598.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        float _2400;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2390 = 0.0;
            _2392 = 0.0;
            _2394 = 0.0;
            _2396 = 0.0;
            _2398 = 0.0;
            _2400 = 0.0;
        }
        else
        {
            float _2391;
            float _2393;
            float _2395;
            float _2397;
            float _2399;
            float _2401;
            float _2542 = 0.0;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            uint _2548 = 0u;
            uint _2557;
            bool _2558;
            for (;;)
            {
                _2557 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2548 << 2u)) >> 2u)).x;
                _2558 = _2557 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2558)
                {
                    frontier_phi_68_pred = _2544;
                    frontier_phi_68_pred_1 = _2547;
                    frontier_phi_68_pred_2 = _2546;
                    frontier_phi_68_pred_3 = _2545;
                    frontier_phi_68_pred_4 = _2543;
                    frontier_phi_68_pred_5 = _2542;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2542;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2557;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2548 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        float _2753 = _2713.x - _2242;
                        float _2754 = _2713.y - _2243;
                        float _2755 = _2713.z - _2244;
                        float _2756 = dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755));
                        float _2759 = inversesqrt(_2756);
                        float _2760 = _2759 * _2753;
                        float _2761 = _2759 * _2754;
                        float _2762 = _2759 * _2755;
                        float _2763 = dot(vec3(_444, _447, _450), vec3(_2760, _2761, _2762));
                        float _2768 = 1.0 - (_2756 * _2713.w);
                        float _4108 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2769 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                        float _2770 = sqrt(_2756) * _2732.w;
                        float _2773 = 1.39999997615814208984375 / (_2770 + 1.39999997615814208984375);
                        float _2774 = _2773 * _2773;
                        float _2777 = ((1.0 - _2774) * _2763) + _2774;
                        float _2780 = _2770 * _2770;
                        float _2784 = ((isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0))) * _2769) / ((_2780 * 0.699999988079071044921875) + 1.0);
                        float _2788 = (-0.0) - _2242;
                        float _2789 = (-0.0) - _2243;
                        float _2790 = (-0.0) - _2244;
                        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2805 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2806 = 1.0 - _520;
                        float _2813 = sqrt(1.0 - ((1.0 - (_2806 * _2806)) * (1.0 - (_2805 * _2805))));
                        float _2814 = _2813 * _2813;
                        float _2815 = _2814 * _2814;
                        float _2816 = _2795 + _2760;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2822 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
                        float _2826 = dot(vec3(_444, _447, _450), vec3(_2795, _2796, _2797));
                        float _4124 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
                        float _2829 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
                        float _2830 = dot(vec3(_444, _447, _450), vec3(_2822 * _2816, _2822 * _2817, _2822 * _2818));
                        float _4135 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2833 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
                        float _2837 = ((_2833 * _2833) * (_2815 + (-1.0))) + 1.0;
                        float _2838 = _2773 * _2814;
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2763) + _2839;
                        float _4146 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2843 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
                        float _2844 = 1.0 - _2814;
                        float _2854 = (0.5 / (((_2843 * ((_2829 * _2844) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2843 * _2844) + _2814) * _2829))) * _2843;
                        float _4157 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                        float _2865 = (((_2815 * 3.1415927410125732421875) * (isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0)))) / ((_2837 * _2837) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2769;
                        _2617 = (_2784 * _2732.x) + _2690;
                        _2618 = (_2784 * _2732.y) + _2691;
                        _2619 = (_2784 * _2732.z) + _2692;
                        _2614 = (_2865 * _2749.x) + _2687;
                        _2615 = (_2865 * _2749.y) + _2688;
                        _2616 = (_2865 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2614;
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_68_pred = _2616;
                    frontier_phi_68_pred_1 = _2619;
                    frontier_phi_68_pred_2 = _2618;
                    frontier_phi_68_pred_3 = _2617;
                    frontier_phi_68_pred_4 = _2615;
                    frontier_phi_68_pred_5 = _2614;
                }
                _2395 = frontier_phi_68_pred;
                _2401 = frontier_phi_68_pred_1;
                _2399 = frontier_phi_68_pred_2;
                _2397 = frontier_phi_68_pred_3;
                _2393 = frontier_phi_68_pred_4;
                _2391 = frontier_phi_68_pred_5;
                uint _2549 = _2548 + 1u;
                if (_2549 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2542 = _2391;
                    _2543 = _2393;
                    _2544 = _2395;
                    _2545 = _2397;
                    _2546 = _2399;
                    _2547 = _2401;
                    _2548 = _2549;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2390 = _2391;
            _2392 = _2393;
            _2394 = _2395;
            _2396 = _2397;
            _2398 = _2399;
            _2400 = _2401;
        }
        uvec4 _2404 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2405 = _2404.z;
        uint _2407 = (_2405 >> 8u) & 15u;
        float _2510;
        float _2512;
        float _2514;
        float _2516;
        float _2518;
        float _2520;
        if (((4294967295u << _2407) & _2288) == 0u)
        {
            _2510 = _2390;
            _2512 = _2392;
            _2514 = _2394;
            _2516 = _2396;
            _2518 = _2398;
            _2520 = _2400;
        }
        else
        {
            float _2535 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _2536 = _2535 * _2242;
            float _2537 = _2535 * _2243;
            float _2538 = _2535 * _2244;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2407 < ((_2405 >> 12u) & 15u))
            {
                float _2511;
                float _2513;
                float _2515;
                float _2517;
                float _2519;
                float _2521;
                float _2670 = _2390;
                float _2671 = _2392;
                float _2672 = _2394;
                float _2673 = _2396;
                float _2674 = _2398;
                float _2675 = _2400;
                uint _2676 = _2407;
                uint _2685;
                bool _2686;
                for (;;)
                {
                    _2685 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2676 << 2u)) >> 2u)).x;
                    _2686 = _2685 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2686)
                    {
                        frontier_phi_79_pred = _2675;
                        frontier_phi_79_pred_1 = _2674;
                        frontier_phi_79_pred_2 = _2673;
                        frontier_phi_79_pred_3 = _2672;
                        frontier_phi_79_pred_4 = _2671;
                        frontier_phi_79_pred_5 = _2670;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _2892 = _2670;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        uint _2898 = _2685;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2968;
                        vec4 _2984;
                        float _3031;
                        bool _3032;
                        for (;;)
                        {
                            uint _2909 = ((_2676 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2955 = (_2909 * 40u) + 16u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            uint _2971 = (_2909 * 40u) + 20u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2987 = (_2909 * 40u) + 24u;
                            vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2987)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2987 + 3u)).x));
                            uint _3006 = (_2909 * 40u) + 28u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            _3031 = fma(_2244, _3019.z, fma(_2243, _3019.y, _3019.x * _2242)) + _3019.w;
                            _3032 = !((fma(_2244, _3000.z, fma(_2243, _3000.y, _3000.x * _2242)) + _3000.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3032)
                            {
                                float _3059 = _2924.x - _2242;
                                float _3060 = _2924.y - _2243;
                                float _3061 = _2924.z - _2244;
                                float _3062 = dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061));
                                float _3065 = inversesqrt(_3062);
                                float _3066 = _3065 * _3059;
                                float _3067 = _3065 * _3060;
                                float _3068 = _3065 * _3061;
                                float _3072 = 1.0 - (_3062 / (_2925 * _2925));
                                float _4168 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3073 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                                float _3077 = sqrt(_3062) * _2940.w;
                                float _3079 = 1.39999997615814208984375 / (_3077 + 1.39999997615814208984375);
                                float _3080 = _3079 * _3079;
                                float _3083 = ((1.0 - _3080) * dot(vec3(_3066, _3067, _3068), vec3(_444, _447, _450))) + _3080;
                                float _3086 = _3077 * _3077;
                                float _3090 = (fma(_2244, _2968.z, fma(_2243, _2968.y, _2968.x * _2242)) + _2968.w) / _3031;
                                float _3091 = (fma(_2244, _2984.z, fma(_2243, _2984.y, _2984.x * _2242)) + _2984.w) / _3031;
                                float _3095 = 1.0 - dot(vec2(_3090, _3091), vec2(_3090, _3091));
                                float _4184 = isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0));
                                float _3096 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                                float _3097 = _3096 * (((isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))) * _3073) / ((_3086 * 0.699999988079071044921875) + 1.0));
                                float _3109 = exp2(log2(1.0 / ((_3086 * 3.5) + 5.0)) * 0.25);
                                float _3110 = 1.0 - _520;
                                float _3117 = sqrt(1.0 - ((1.0 - (_3110 * _3110)) * (1.0 - (_3109 * _3109))));
                                float _3118 = _3117 * _3117;
                                float _3119 = _3118 * _3118;
                                float _3120 = _3066 - _2536;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3126 = inversesqrt(dot(vec3(_3120, _3121, _3122), vec3(_3120, _3121, _3122)));
                                float _3130 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2536, (-0.0) - _2537, (-0.0) - _2538));
                                float _4195 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                                float _3133 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
                                float _3134 = dot(vec3(_444, _447, _450), vec3(_3126 * _3120, _3126 * _3121, _3126 * _3122));
                                float _4206 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3137 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
                                float _3141 = ((_3137 * _3137) * (_3119 + (-1.0))) + 1.0;
                                float _3142 = _3079 * _3118;
                                float _3143 = _3142 * _3142;
                                float _3149 = ((1.0 - _3143) * dot(vec3(_444, _447, _450), vec3(_3066, _3067, _3068))) + _3143;
                                float _4217 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3150 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
                                float _3151 = 1.0 - _3118;
                                float _3161 = (0.5 / (((_3150 * ((_3133 * _3151) + _3118)) + 9.9999999392252902907785028219223e-09) + (((_3150 * _3151) + _3118) * _3133))) * _3150;
                                float _4228 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3171 = (_3096 * _3073) * (((_3119 * 3.1415927410125732421875) * (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0)))) / ((_3141 * _3141) * ((_3086 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3097 * _2940.z;
                                frontier_phi_85_pred_1 = _3097 * _2940.y;
                                frontier_phi_85_pred_2 = _3097 * _2940.x;
                                frontier_phi_85_pred_3 = _3171 * _2952.z;
                                frontier_phi_85_pred_4 = _3171 * _2952.y;
                                frontier_phi_85_pred_5 = _3171 * _2952.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_85_pred;
                            _3179 = frontier_phi_85_pred_1;
                            _3178 = frontier_phi_85_pred_2;
                            _3177 = frontier_phi_85_pred_3;
                            _3176 = frontier_phi_85_pred_4;
                            _3175 = frontier_phi_85_pred_5;
                            _2882 = _3178 + _2895;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2879 = _3175 + _2892;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2884;
                        frontier_phi_79_pred_1 = _2883;
                        frontier_phi_79_pred_2 = _2882;
                        frontier_phi_79_pred_3 = _2881;
                        frontier_phi_79_pred_4 = _2880;
                        frontier_phi_79_pred_5 = _2879;
                    }
                    _2521 = frontier_phi_79_pred;
                    _2519 = frontier_phi_79_pred_1;
                    _2517 = frontier_phi_79_pred_2;
                    _2515 = frontier_phi_79_pred_3;
                    _2513 = frontier_phi_79_pred_4;
                    _2511 = frontier_phi_79_pred_5;
                    uint _2677 = _2676 + 1u;
                    if (_2677 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2670 = _2511;
                        _2671 = _2513;
                        _2672 = _2515;
                        _2673 = _2517;
                        _2674 = _2519;
                        _2675 = _2521;
                        _2676 = _2677;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2517;
                frontier_phi_60_61_ladder_1 = _2521;
                frontier_phi_60_61_ladder_2 = _2519;
                frontier_phi_60_61_ladder_3 = _2515;
                frontier_phi_60_61_ladder_4 = _2513;
                frontier_phi_60_61_ladder_5 = _2511;
            }
            else
            {
                frontier_phi_60_61_ladder = _2396;
                frontier_phi_60_61_ladder_1 = _2400;
                frontier_phi_60_61_ladder_2 = _2398;
                frontier_phi_60_61_ladder_3 = _2394;
                frontier_phi_60_61_ladder_4 = _2392;
                frontier_phi_60_61_ladder_5 = _2390;
            }
            _2510 = frontier_phi_60_61_ladder_5;
            _2512 = frontier_phi_60_61_ladder_4;
            _2514 = frontier_phi_60_61_ladder_3;
            _2516 = frontier_phi_60_61_ladder;
            _2518 = frontier_phi_60_61_ladder_2;
            _2520 = frontier_phi_60_61_ladder_1;
        }
        float _2525 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2300 = (_2525 * _2516) + _1734;
        _2302 = (_2525 * _2518) + _1736;
        _2304 = (_2525 * _2520) + _1738;
        _2306 = ((_2510 * _489) * _2525) + _2082;
        _2308 = ((_2512 * _491) * _2525) + _2084;
        _2310 = ((_2514 * _492) * _2525) + _2086;
    }
    else
    {
        _2300 = _1734;
        _2302 = _1736;
        _2304 = _1738;
        _2306 = _2082;
        _2308 = _2084;
        _2310 = _2086;
    }
    float _4244 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4255 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4266 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _4277 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _2328 = ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_2300 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _504))) + ((_2306 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2329 = ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2302 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _504))) + ((_2308 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2330 = ((isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_2304 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _504))) + ((_2310 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1346)) * cbPerFrame._m0[3u].x);
    float _2335 = cbInstanceData._m0[_463 + 6u].w * (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0)));
    float _2340 = _423 / cbSceneParam._m0[86u].x;
    float _2341 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2355 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2357 = _2355.x;
    float _2358 = _2355.y;
    float _2359 = _2355.z;
    float _2360 = _2355.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2415 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2416 = _2415 / _344;
        float _2427 = _2416 * _395;
        float _2428 = _396 * _2416;
        float _2429 = (-0.0) - _2428;
        float _2430 = _2416 * _397;
        float _2432 = (cbSceneParam._m0[77u].w * _2429) / _2415;
        float _2433 = _2432 + cbSceneParam._m0[79u].w;
        float _2434 = cbSceneParam._m0[79u].w - _2428;
        float _2440 = sqrt(((_2427 * _2427) + (_2428 * _2428)) + (_2430 * _2430));
        float _2443 = (1.0 - (cbSceneParam._m0[77u].w / _2415)) * _2440;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2627;
        if (abs((_2429 - _2432) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2627 = ((((_2433 > 0.0) ? exp2(_2448 * _2433) : (2.0 - exp2(_2450 * _2433))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2443;
        }
        else
        {
            float _2571 = 1.0 / cbSceneParam._m0[80u].x;
            float _2572 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : max(_2433, _2434));
            float _2573 = isnan(_2434) ? _2433 : (isnan(_2433) ? _2434 : min(_2433, _2434));
            float _2582 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : min(_2572, 0.0));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            _2627 = ((abs(_2440 / _2429) * cbSceneParam._m0[80u].y) * ((((_2582 - _2583) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0))))) * _2571)) - ((exp2(_2450 * _2582) - exp2(_2450 * _2583)) * _2571))) + (_2443 * cbSceneParam._m0[80u].z);
        }
        vec4 _2629 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2340, _2341, 1.0), 0.0);
        float _2638 = exp2((_2627 * (-1.44269502162933349609375)) * (1.0 - _2629.w));
        float _2639 = log2(_2638);
        float _2655 = log2(_2360);
        _2452 = (exp2(_2655 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].x)) * _2629.x) / cbSceneParam._m0[78u].x)) + _2357;
        _2454 = (exp2(_2655 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].y)) * _2629.y) / cbSceneParam._m0[78u].y)) + _2358;
        _2456 = (exp2(_2655 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2639 * cbSceneParam._m0[78u].z)) * _2629.z) / cbSceneParam._m0[78u].z)) + _2359;
        _2458 = _2638 * _2360;
    }
    else
    {
        _2452 = _2357;
        _2454 = _2358;
        _2456 = _2359;
        _2458 = _2360;
    }
    bool _2665;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2509;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2328;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2329;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2330;
        float _2488 = _411 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2499) < 0.5)
            {
                _2665 = true;
                break;
            }
        }
        uint _2606 = _465 + uint(_2468.w);
        if ((cbInstanceData._m0[_2606].w < 1.0) && ((cbInstanceData._m0[_2606].w + _2499) < 0.5))
        {
            _2665 = true;
            break;
        }
        if ((_2492 + _257) < _2490.x)
        {
            _2665 = true;
            break;
        }
        _2665 = false;
        break;
    }
    float _2870;
    if (_2665)
    {
        discard_state = true;
        _2870 = 0.0;
    }
    else
    {
        _2870 = _2335;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2870;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2335;
    discard_exit();
}


