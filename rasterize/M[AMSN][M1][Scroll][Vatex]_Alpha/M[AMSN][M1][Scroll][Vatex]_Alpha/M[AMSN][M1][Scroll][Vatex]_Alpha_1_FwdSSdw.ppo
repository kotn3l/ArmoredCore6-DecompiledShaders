#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _185 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _186 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _187 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_185, _186, _187), vec3(_185, _186, _187)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    float _231 = (cbMtdParam._m0[10u].y * cbPerFrame._m0[22u].x) + TEXCOORD_1.x;
    float _232 = (cbMtdParam._m0[10u].z * cbPerFrame._m0[22u].x) + TEXCOORD_1.y;
    vec4 _245 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((_231 * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, (_232 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _252 = _245.x * cbMtdParam._m0[9u].x;
    float _253 = _245.y * cbMtdParam._m0[9u].y;
    float _254 = _245.z * cbMtdParam._m0[9u].z;
    float _255 = _245.w * TEXCOORD_1.z;
    vec4 _268 = texture(sampler2D(M_AMSN_M1_Scroll_Vatex_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * _231) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _232) + cbTextureTilingScale._m0[1u].w));
    float _272 = _268.z;
    float _276 = (_268.x * 2.0) + (-1.0);
    float _278 = (_268.y * 2.0) + (-1.0);
    float _279 = dot(vec2(_276, _278), vec2(_276, _278));
    float _3208 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _285 = sqrt(1.0 - (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0))));
    float _288 = fma(_285, _215, fma(_278, _207 * TANGENT.x, (_193 * _185) * _276));
    float _291 = fma(_285, _216, fma(_278, _207 * TANGENT.y, (_193 * _186) * _276));
    float _294 = fma(_285, _217, fma(_278, _207 * TANGENT.z, (_193 * _187) * _276));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3219 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _302 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _3230 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _303 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _3252 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _3263 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _3274 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _307 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _414 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _417 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = (_430 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3285 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0));
    float _3296 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _3307 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _445 = 1.0 - _307;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _307;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _471 = _468.x * TEXCOORD_1.w;
    float _472 = dot(vec3(_299, _300, _301), vec3(_381, _382, _383));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _299) - _381;
    float _480 = (_475 * _300) - _382;
    float _481 = (_475 * _301) - _383;
    float _485 = abs(dot(vec3(_381, _382, _383), vec3(_299, _300, _301)));
    float _3318 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_303);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _299;
        float _604 = _539 + _300;
        float _605 = _543 + _301;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_299, _300, _301), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3344 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3355 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3366 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_299, _300, _301), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3377 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3388 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3399 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_299, _300, _301), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3410 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3421 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3432 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _299;
        float _918 = _539 + _300;
        float _919 = _543 + _301;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_299, _300, _301), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3495 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_299, _300, _301), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3528 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_299, _300, _301), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3561 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1355 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1358 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1386 = frontier_phi_16_14_ladder;
        }
        float _1614;
        if (_1355 > 0.0)
        {
            _1614 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1614 = frontier_phi_25_21_ladder;
        }
        float _1871;
        if (_1358 > 0.0)
        {
            _1871 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_32_ladder;
        }
        float _1873 = isnan(_1614) ? _1386 : (isnan(_1386) ? _1614 : min(_1386, _1614));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1352) + _1341;
        float _1879 = (_1874 * _1355) + _1345;
        float _1880 = (_1874 * _1358) + _1349;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_15_37_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_15_37_ladder_2;
        _1376 = frontier_phi_15_37_ladder_1;
        _1378 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1453 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1456 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1619;
        if (_1450 > 0.0)
        {
            _1619 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1619 = frontier_phi_27_23_ladder;
        }
        float _1898;
        if (_1453 > 0.0)
        {
            _1898 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1898 = frontier_phi_39_34_ladder;
        }
        float _2111;
        if (_1456 > 0.0)
        {
            _2111 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2111 = frontier_phi_48_45_ladder;
        }
        float _2113 = isnan(_1898) ? _1619 : (isnan(_1619) ? _1898 : min(_1619, _1898));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1450) + _1439;
        float _2119 = (_2114 * _1453) + _1443;
        float _2120 = (_2114 * _1456) + _1447;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2121;
        float _2124 = _2121 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2120 > _2124) || ((_2120 < _2122) || ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 < _2122) || (_2118 > _2124))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2120, cbModelParam._m0[17u].z, fma(_2119, cbModelParam._m0[17u].y, _2118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2120, cbModelParam._m0[18u].z, fma(_2119, cbModelParam._m0[18u].y, _2118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2120, cbModelParam._m0[19u].z, fma(_2119, cbModelParam._m0[19u].y, _2118 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_24_48_ladder = _2320.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2320.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2320.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_24_48_ladder_2;
        _1477 = frontier_phi_24_48_ladder_1;
        _1479 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1383);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1492 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1475 - _1374)) + _1374);
    float _1494 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1477 - _1376)) + _1376);
    float _1496 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1479 - _1378)) + _1378);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    vec4 _1513 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_389, _390));
    float _1515 = _1513.w;
    float _1527 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1515);
    float _1528 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1515);
    float _1529 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1515);
    uvec4 _1533 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1535 = _1533.x * 14u;
    uint _1536 = _1535 + 13u;
    float _1543 = _471 + (-1.0);
    float _1548 = (cbLight._m0[_1536].x * _1543) + 1.0;
    float _1549 = (cbLight._m0[_1536].y * _1543) + 1.0;
    float _1550 = (cbLight._m0[_1536].z * _1543) + 1.0;
    float _1551 = (cbLight._m0[_1536].w * _1543) + 1.0;
    uint _1552 = _1535 + 5u;
    float _1558 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1562 = _1535 + 4u;
    float _1572 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
    uint _1576 = _1535 | 1u;
    float _1587 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_299, _300, _301));
    float _1590 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_299, _300, _301));
    float _3697 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _3708 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
    float _1595 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * 0.3183098733425140380859375;
    float _1597 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.3183098733425140380859375;
    float _1604 = ((cbLight._m0[_1552].x * _1558) * _1597) + (((cbLight._m0[_1562].x * _1527) * _1572) * _1595);
    float _1605 = ((_1558 * cbLight._m0[_1552].y) * _1597) + (((cbLight._m0[_1562].y * _1528) * _1572) * _1595);
    float _1606 = ((_1558 * cbLight._m0[_1552].z) * _1597) + (((cbLight._m0[_1562].z * _1529) * _1572) * _1595);
    uvec4 _1611 = floatBitsToUint(cbLight._m0[_1535 + 12u]);
    bool _1613 = _1611.x == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1613)
    {
        _1624 = _1604;
        _1626 = _1605;
        _1628 = _1606;
    }
    else
    {
        uint _1632 = _1535 + 6u;
        float _1648 = (dot(vec3(cbLight._m0[_1535 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3719 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1651 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1624 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1604;
        _1626 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1605;
        _1628 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1606;
    }
    bool _1631 = _1611.y == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1631)
    {
        _1669 = _1624;
        _1671 = _1626;
        _1673 = _1628;
    }
    else
    {
        uint _1842 = _1535 + 7u;
        float _1858 = (dot(vec3(cbLight._m0[_1535 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3735 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1861 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1669 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1624;
        _1671 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1626;
        _1673 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1628;
    }
    uint _1676 = _1535 + 8u;
    float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1535].w)) * _303) * 0.949999988079071044921875);
    float _1690 = _1689 * _1689;
    float _1691 = cbLight._m0[_1535].x + _381;
    float _1692 = cbLight._m0[_1535].y + _382;
    float _1693 = cbLight._m0[_1535].z + _383;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1698 = _1697 * _1691;
    float _1699 = _1697 * _1692;
    float _1700 = _1697 * _1693;
    float _1701 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1535].xyz));
    float _3751 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _3762 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1705 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _1706 = dot(vec3(_299, _300, _301), vec3(_1698, _1699, _1700));
    float _3773 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1710 = dot(vec3(cbLight._m0[_1535].xyz), vec3(_1698, _1699, _1700));
    float _3784 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1714 = _1690 * _1690;
    float _1718 = ((_1709 * _1709) * (_1714 + (-1.0))) + 1.0;
    float _1726 = exp2(log2(1.0 - (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * 5.0);
    float _1727 = 0.959999978542327880859375 - _453;
    float _1729 = 0.959999978542327880859375 - _454;
    float _1730 = 0.959999978542327880859375 - _455;
    float _1737 = 1.0 - _1690;
    float _1748 = (0.5 / (((_1705 * ((_1704 * _1737) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1737) + _1690) * _1704))) * _1704;
    float _3795 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_1714 / ((_1718 * _1718) * 3.141590118408203125));
    uint _1764 = _1535 + 9u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1576].w)) * _303) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1576].x + _381;
    float _1778 = cbLight._m0[_1576].y + _382;
    float _1779 = cbLight._m0[_1576].z + _383;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1576].xyz));
    float _3806 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _1791 = dot(vec3(_299, _300, _301), vec3(_1784, _1785, _1786));
    float _3817 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1576].xyz), vec3(_1784, _1785, _1786));
    float _3828 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1776 * _1776;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0);
    float _1817 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1705 * ((_1790 * _1817) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1817) + _1776) * _1790))) * _1790;
    float _3839 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    float _1839 = (((((_1810 * _1727) + _456) * cbLight._m0[_1764].x) * _1829) * _1558) + ((((cbLight._m0[_1676].x * _1527) * ((_1726 * _1727) + _456)) * _1750) * _1572);
    float _1840 = (((((_1810 * _1729) + _458) * cbLight._m0[_1764].y) * _1829) * _1558) + ((((cbLight._m0[_1676].y * _1528) * ((_1726 * _1729) + _458)) * _1750) * _1572);
    float _1841 = (((((_1810 * _1730) + _459) * cbLight._m0[_1764].z) * _1829) * _1558) + ((((cbLight._m0[_1676].z * _1529) * ((_1726 * _1730) + _459)) * _1750) * _1572);
    float _1903;
    float _1905;
    float _1907;
    if (_1613)
    {
        _1903 = _1839;
        _1905 = _1840;
        _1907 = _1841;
    }
    else
    {
        uint _1909 = _1535 + 2u;
        uint _1913 = _1535 + 10u;
        float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _303) * 0.949999988079071044921875);
        float _1928 = _1927 * _1927;
        float _1929 = cbLight._m0[_1909].x + _381;
        float _1930 = cbLight._m0[_1909].y + _382;
        float _1931 = cbLight._m0[_1909].z + _383;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1936 = _1935 * _1929;
        float _1937 = _1935 * _1930;
        float _1938 = _1935 * _1931;
        float _1939 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1909].xyz));
        float _3850 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1943 = dot(vec3(_299, _300, _301), vec3(_1936, _1937, _1938));
        float _3861 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1947 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1936, _1937, _1938));
        float _3872 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1928 * _1928;
        float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
        float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * 5.0);
        float _1969 = 1.0 - _1928;
        float _1979 = (0.5 / (((_1705 * ((_1942 * _1969) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1969) + _1928) * _1942))) * _1942;
        float _3883 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1981 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
        float _1982 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
        _1903 = (((((_1962 * _1727) + _456) * cbLight._m0[_1913].x) * _1981) * _1982) + _1839;
        _1905 = (((((_1962 * _1729) + _458) * cbLight._m0[_1913].y) * _1981) * _1982) + _1840;
        _1907 = (((((_1962 * _1730) + _459) * cbLight._m0[_1913].z) * _1981) * _1982) + _1841;
    }
    float _2017;
    float _2019;
    float _2021;
    if (_1631)
    {
        _2017 = _1903;
        _2019 = _1905;
        _2021 = _1907;
    }
    else
    {
        uint _2028 = _1535 + 3u;
        uint _2032 = _1535 + 11u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _303) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _381;
        float _2049 = cbLight._m0[_2028].y + _382;
        float _2050 = cbLight._m0[_2028].z + _383;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2028].xyz));
        float _3899 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _2062 = dot(vec3(_299, _300, _301), vec3(_2055, _2056, _2057));
        float _3910 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _3921 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
        float _2088 = 1.0 - _2047;
        float _2098 = (0.5 / (((_1705 * ((_2061 * _2088) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _2088) + _2047) * _2061))) * _2061;
        float _3932 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _2017 = (((((_2081 * _1727) + _456) * cbLight._m0[_2032].x) * _2100) * _2101) + _1903;
        _2019 = (((((_2081 * _1729) + _458) * cbLight._m0[_2032].y) * _2100) * _2101) + _1905;
        _2021 = (((((_2081 * _1730) + _459) * cbLight._m0[_2032].z) * _2100) * _2101) + _1907;
    }
    float _2235;
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    if (_1533.y == 0u)
    {
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2176;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2176;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2176;
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2192)));
        float _2213 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
        }
        else
        {
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2485)
                {
                    frontier_phi_63_pred = _2474;
                    frontier_phi_63_pred_1 = _2473;
                    frontier_phi_63_pred_2 = _2472;
                    frontier_phi_63_pred_3 = _2471;
                    frontier_phi_63_pred_4 = _2470;
                    frontier_phi_63_pred_5 = _2469;
                }
                else
                {
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    uint _2599;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2484;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    for (;;)
                    {
                        uint _2603 = uint(findLSB(_2599)) + (_2475 << 5u);
                        uint _2600 = (_2599 + 4294967295u) & _2599;
                        uint _2605 = _2603 * 48u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 3u)).x));
                        uint _2625 = (_2603 * 48u) + 4u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2644 = (_2603 * 48u) + 8u;
                        vec3 _2655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x));
                        float _2659 = _2619.x - _2177;
                        float _2660 = _2619.y - _2178;
                        float _2661 = _2619.z - _2179;
                        float _2662 = dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661));
                        float _2665 = inversesqrt(_2662);
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2669 = dot(vec3(_411, _414, _417), vec3(_2666, _2667, _2668));
                        float _2674 = 1.0 - (_2662 * _2619.w);
                        float _3958 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                        float _2676 = sqrt(_2662) * _2638.w;
                        float _2679 = 1.39999997615814208984375 / (_2676 + 1.39999997615814208984375);
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * _2669) + _2680;
                        float _2686 = _2676 * _2676;
                        float _2690 = ((isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))) * _2675) / ((_2686 * 0.699999988079071044921875) + 1.0);
                        float _2694 = (-0.0) - _2177;
                        float _2695 = (-0.0) - _2178;
                        float _2696 = (-0.0) - _2179;
                        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2711 = exp2(log2(1.0 / ((_2686 * 3.5) + 5.0)) * 0.25);
                        float _2712 = 1.0 - _487;
                        float _2719 = sqrt(1.0 - ((1.0 - (_2712 * _2712)) * (1.0 - (_2711 * _2711))));
                        float _2720 = _2719 * _2719;
                        float _2721 = _2720 * _2720;
                        float _2722 = _2701 + _2666;
                        float _2723 = _2702 + _2667;
                        float _2724 = _2703 + _2668;
                        float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
                        float _2732 = dot(vec3(_411, _414, _417), vec3(_2701, _2702, _2703));
                        float _3974 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _2736 = dot(vec3(_411, _414, _417), vec3(_2728 * _2722, _2728 * _2723, _2728 * _2724));
                        float _3985 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
                        float _2739 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _2743 = ((_2739 * _2739) * (_2721 + (-1.0))) + 1.0;
                        float _2744 = _2679 * _2720;
                        float _2745 = _2744 * _2744;
                        float _2748 = ((1.0 - _2745) * _2669) + _2745;
                        float _3996 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
                        float _2749 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2750 = 1.0 - _2720;
                        float _2760 = (0.5 / (((_2749 * ((_2735 * _2750) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2749 * _2750) + _2720) * _2735))) * _2749;
                        float _4007 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2771 = (((_2721 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_2743 * _2743) * ((_2686 * 2.1991131305694580078125) + 3.141590118408203125))) * _2675;
                        _2528 = (_2690 * _2638.x) + _2596;
                        _2529 = (_2690 * _2638.y) + _2597;
                        _2530 = (_2690 * _2638.z) + _2598;
                        _2525 = (_2771 * _2655.x) + _2593;
                        _2526 = (_2771 * _2655.y) + _2594;
                        _2527 = (_2771 * _2655.z) + _2595;
                        if (_2600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2600;
                        }
                    }
                    frontier_phi_63_pred = _2530;
                    frontier_phi_63_pred_1 = _2529;
                    frontier_phi_63_pred_2 = _2528;
                    frontier_phi_63_pred_3 = _2527;
                    frontier_phi_63_pred_4 = _2526;
                    frontier_phi_63_pred_5 = _2525;
                }
                _2336 = frontier_phi_63_pred;
                _2334 = frontier_phi_63_pred_1;
                _2332 = frontier_phi_63_pred_2;
                _2330 = frontier_phi_63_pred_3;
                _2328 = frontier_phi_63_pred_4;
                _2326 = frontier_phi_63_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2326;
                    _2470 = _2328;
                    _2471 = _2330;
                    _2472 = _2332;
                    _2473 = _2334;
                    _2474 = _2336;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
        }
        uvec4 _2339 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2340 = _2339.z;
        uint _2342 = (_2340 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2342) & _2223) == 0u)
        {
            _2437 = _2325;
            _2439 = _2327;
            _2441 = _2329;
            _2443 = _2331;
            _2445 = _2333;
            _2447 = _2335;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _2463 = _2462 * _2177;
            float _2464 = _2462 * _2178;
            float _2465 = _2462 * _2179;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2342 < ((_2340 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2576 = _2325;
                float _2577 = _2327;
                float _2578 = _2329;
                float _2579 = _2331;
                float _2580 = _2333;
                float _2581 = _2335;
                uint _2582 = _2342;
                uint _2591;
                bool _2592;
                for (;;)
                {
                    _2591 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                    _2592 = _2591 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2592)
                    {
                        frontier_phi_69_pred = _2581;
                        frontier_phi_69_pred_1 = _2580;
                        frontier_phi_69_pred_2 = _2579;
                        frontier_phi_69_pred_3 = _2578;
                        frontier_phi_69_pred_4 = _2577;
                        frontier_phi_69_pred_5 = _2576;
                    }
                    else
                    {
                        float _2776;
                        float _2777;
                        float _2778;
                        float _2779;
                        float _2780;
                        float _2781;
                        float _3072;
                        float _3073;
                        float _3074;
                        float _3075;
                        float _3076;
                        float _3077;
                        float _2789 = _2576;
                        float _2790 = _2577;
                        float _2791 = _2578;
                        float _2792 = _2579;
                        float _2793 = _2580;
                        float _2794 = _2581;
                        uint _2795 = _2591;
                        uint _2796;
                        vec4 _2821;
                        float _2822;
                        vec4 _2837;
                        vec3 _2849;
                        vec4 _2865;
                        vec4 _2881;
                        float _2928;
                        bool _2929;
                        for (;;)
                        {
                            uint _2806 = ((_2582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2795));
                            _2796 = (_2795 + 4294967295u) & _2795;
                            uint _2808 = _2806 * 40u;
                            _2821 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2808)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2808 + 3u)).x));
                            _2822 = _2821.w;
                            uint _2824 = (_2806 * 40u) + 4u;
                            _2837 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2824)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2824 + 3u)).x));
                            uint _2839 = (_2806 * 40u) + 8u;
                            _2849 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2839)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2839 + 2u)).x));
                            uint _2852 = (_2806 * 40u) + 16u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2868 = (_2806 * 40u) + 20u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2884 = (_2806 * 40u) + 24u;
                            vec4 _2897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 3u)).x));
                            uint _2903 = (_2806 * 40u) + 28u;
                            vec4 _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            _2928 = fma(_2179, _2916.z, fma(_2178, _2916.y, _2916.x * _2177)) + _2916.w;
                            _2929 = !((fma(_2179, _2897.z, fma(_2178, _2897.y, _2897.x * _2177)) + _2897.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2929)
                            {
                                float _2956 = _2821.x - _2177;
                                float _2957 = _2821.y - _2178;
                                float _2958 = _2821.z - _2179;
                                float _2959 = dot(vec3(_2956, _2957, _2958), vec3(_2956, _2957, _2958));
                                float _2962 = inversesqrt(_2959);
                                float _2963 = _2962 * _2956;
                                float _2964 = _2962 * _2957;
                                float _2965 = _2962 * _2958;
                                float _2969 = 1.0 - (_2959 / (_2822 * _2822));
                                float _4018 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2970 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                                float _2974 = sqrt(_2959) * _2837.w;
                                float _2976 = 1.39999997615814208984375 / (_2974 + 1.39999997615814208984375);
                                float _2977 = _2976 * _2976;
                                float _2980 = ((1.0 - _2977) * dot(vec3(_2963, _2964, _2965), vec3(_411, _414, _417))) + _2977;
                                float _2983 = _2974 * _2974;
                                float _2987 = (fma(_2179, _2865.z, fma(_2178, _2865.y, _2865.x * _2177)) + _2865.w) / _2928;
                                float _2988 = (fma(_2179, _2881.z, fma(_2178, _2881.y, _2881.x * _2177)) + _2881.w) / _2928;
                                float _2992 = 1.0 - dot(vec2(_2987, _2988), vec2(_2987, _2988));
                                float _4034 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                                float _2994 = _2993 * (((isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0))) * _2970) / ((_2983 * 0.699999988079071044921875) + 1.0));
                                float _3006 = exp2(log2(1.0 / ((_2983 * 3.5) + 5.0)) * 0.25);
                                float _3007 = 1.0 - _487;
                                float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                                float _3015 = _3014 * _3014;
                                float _3016 = _3015 * _3015;
                                float _3017 = _2963 - _2463;
                                float _3018 = _2964 - _2464;
                                float _3019 = _2965 - _2465;
                                float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                                float _3027 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2463, (-0.0) - _2464, (-0.0) - _2465));
                                float _4045 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3030 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                                float _3031 = dot(vec3(_411, _414, _417), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                                float _4056 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3034 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                                float _3039 = _2976 * _3015;
                                float _3040 = _3039 * _3039;
                                float _3046 = ((1.0 - _3040) * dot(vec3(_411, _414, _417), vec3(_2963, _2964, _2965))) + _3040;
                                float _4067 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3047 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3048 = 1.0 - _3015;
                                float _3058 = (0.5 / (((_3047 * ((_3030 * _3048) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3047 * _3048) + _3015) * _3030))) * _3047;
                                float _4078 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0));
                                float _3068 = (_2993 * _2970) * (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) / ((_3038 * _3038) * ((_2983 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2994 * _2837.z;
                                frontier_phi_75_pred_1 = _2994 * _2837.y;
                                frontier_phi_75_pred_2 = _2994 * _2837.x;
                                frontier_phi_75_pred_3 = _3068 * _2849.z;
                                frontier_phi_75_pred_4 = _3068 * _2849.y;
                                frontier_phi_75_pred_5 = _3068 * _2849.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3077 = frontier_phi_75_pred;
                            _3076 = frontier_phi_75_pred_1;
                            _3075 = frontier_phi_75_pred_2;
                            _3074 = frontier_phi_75_pred_3;
                            _3073 = frontier_phi_75_pred_4;
                            _3072 = frontier_phi_75_pred_5;
                            _2779 = _3075 + _2792;
                            _2780 = _3076 + _2793;
                            _2781 = _3077 + _2794;
                            _2776 = _3072 + _2789;
                            _2777 = _3073 + _2790;
                            _2778 = _3074 + _2791;
                            if (_2796 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2789 = _2776;
                                _2790 = _2777;
                                _2791 = _2778;
                                _2792 = _2779;
                                _2793 = _2780;
                                _2794 = _2781;
                                _2795 = _2796;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2781;
                        frontier_phi_69_pred_1 = _2780;
                        frontier_phi_69_pred_2 = _2779;
                        frontier_phi_69_pred_3 = _2778;
                        frontier_phi_69_pred_4 = _2777;
                        frontier_phi_69_pred_5 = _2776;
                    }
                    _2448 = frontier_phi_69_pred;
                    _2446 = frontier_phi_69_pred_1;
                    _2444 = frontier_phi_69_pred_2;
                    _2442 = frontier_phi_69_pred_3;
                    _2440 = frontier_phi_69_pred_4;
                    _2438 = frontier_phi_69_pred_5;
                    uint _2583 = _2582 + 1u;
                    if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2576 = _2438;
                        _2577 = _2440;
                        _2578 = _2442;
                        _2579 = _2444;
                        _2580 = _2446;
                        _2581 = _2448;
                        _2582 = _2583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2448;
                frontier_phi_57_58_ladder_1 = _2446;
                frontier_phi_57_58_ladder_2 = _2444;
                frontier_phi_57_58_ladder_3 = _2442;
                frontier_phi_57_58_ladder_4 = _2440;
                frontier_phi_57_58_ladder_5 = _2438;
            }
            else
            {
                frontier_phi_57_58_ladder = _2335;
                frontier_phi_57_58_ladder_1 = _2333;
                frontier_phi_57_58_ladder_2 = _2331;
                frontier_phi_57_58_ladder_3 = _2329;
                frontier_phi_57_58_ladder_4 = _2327;
                frontier_phi_57_58_ladder_5 = _2325;
            }
            _2437 = frontier_phi_57_58_ladder_5;
            _2439 = frontier_phi_57_58_ladder_4;
            _2441 = frontier_phi_57_58_ladder_3;
            _2443 = frontier_phi_57_58_ladder_2;
            _2445 = frontier_phi_57_58_ladder_1;
            _2447 = frontier_phi_57_58_ladder;
        }
        float _2452 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2235 = (_2452 * _2443) + _1669;
        _2237 = (_2452 * _2445) + _1671;
        _2239 = (_2452 * _2447) + _1673;
        _2241 = ((_2437 * _456) * _2452) + _2017;
        _2243 = ((_2439 * _458) * _2452) + _2019;
        _2245 = ((_2441 * _459) * _2452) + _2021;
    }
    else
    {
        _2235 = _1669;
        _2237 = _1671;
        _2239 = _1673;
        _2241 = _2017;
        _2243 = _2019;
        _2245 = _2021;
    }
    float _4094 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4105 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4116 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4127 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _2270 = cbInstanceData._m0[_430 + 6u].w * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)));
    float _2275 = _389 / cbSceneParam._m0[86u].x;
    float _2276 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2290 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2292 = _2290.x;
    float _2293 = _2290.y;
    float _2294 = _2290.z;
    float _2295 = _2290.w;
    float _2387;
    float _2389;
    float _2391;
    float _2393;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2350 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2351 = _2350 / _323;
        float _2362 = _2351 * _374;
        float _2363 = _375 * _2351;
        float _2364 = (-0.0) - _2363;
        float _2365 = _2351 * _376;
        float _2367 = (cbSceneParam._m0[77u].w * _2364) / _2350;
        float _2368 = _2367 + cbSceneParam._m0[79u].w;
        float _2369 = cbSceneParam._m0[79u].w - _2363;
        float _2375 = sqrt(((_2362 * _2362) + (_2363 * _2363)) + (_2365 * _2365));
        float _2378 = (1.0 - (cbSceneParam._m0[77u].w / _2350)) * _2375;
        float _2383 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2385 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2538;
        if (abs((_2364 - _2367) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2538 = ((((_2368 > 0.0) ? exp2(_2383 * _2368) : (2.0 - exp2(_2385 * _2368))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2378;
        }
        else
        {
            float _2498 = 1.0 / cbSceneParam._m0[80u].x;
            float _2499 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : max(_2368, _2369));
            float _2500 = isnan(_2369) ? _2368 : (isnan(_2368) ? _2369 : min(_2368, _2369));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            _2538 = ((abs(_2375 / _2364) * cbSceneParam._m0[80u].y) * ((((_2509 - _2510) * 2.0) - ((exp2(_2383 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)))) - exp2(_2383 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))))) * _2498)) - ((exp2(_2385 * _2509) - exp2(_2385 * _2510)) * _2498))) + (_2378 * cbSceneParam._m0[80u].z);
        }
        vec4 _2540 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2275, _2276, 1.0), 0.0);
        float _2549 = exp2((_2538 * (-1.44269502162933349609375)) * (1.0 - _2540.w));
        float _2550 = log2(_2549);
        float _2566 = log2(_2295);
        _2387 = (exp2(_2566 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].x)) * _2540.x) / cbSceneParam._m0[78u].x)) + _2292;
        _2389 = (exp2(_2566 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].y)) * _2540.y) / cbSceneParam._m0[78u].y)) + _2293;
        _2391 = (exp2(_2566 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].z)) * _2540.z) / cbSceneParam._m0[78u].z)) + _2294;
        _2393 = _2549 * _2295;
    }
    else
    {
        _2387 = _2292;
        _2389 = _2293;
        _2391 = _2294;
        _2393 = _2295;
    }
    float _2405 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2406 = _2405 == 3.0;
    float _2407 = log2(_2393);
    float _2414 = exp2(_2407 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * (_2235 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _471))) + ((_2241 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2415 = exp2(_2407 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2237 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _471))) + ((_2243 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2416 = exp2(_2407 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2239 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _471))) + ((_2245 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1281)) * cbPerFrame._m0[3u].x));
    float _2425 = (_2405 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2425 * (_2406 ? _2414 : (_2414 + (cbSceneParam._m0[72u].w * _2387)));
    SV_Target.y = _2425 * (_2406 ? _2415 : (_2415 + (cbSceneParam._m0[72u].w * _2389)));
    SV_Target.z = _2425 * (_2406 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2391)));
    SV_Target.w = _2270;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2270;
}


