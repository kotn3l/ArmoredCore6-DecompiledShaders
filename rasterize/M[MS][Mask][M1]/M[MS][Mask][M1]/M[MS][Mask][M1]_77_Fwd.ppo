#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1488;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _405 = _403.x;
    float _417 = dot(vec4(_405, _403.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _434 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _367.x) * 2.0) - ((((_405 - _417) * cbMtdParam._m0[23u].w) + _417) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3813 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _442 = (_435 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _443 = (_435 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _444 = (_435 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _483 = _481.x;
    float _493 = dot(vec4(_483, _481.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _507 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _367.y) * 2.0) - ((((_483 - _493) * cbMtdParam._m0[23u].w) + _493) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3824 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _508 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _521 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_508 * ((_461.x * cbMtdParam._m0[13u].x) - _442)) + _442);
    float _524 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_508 * ((_461.y * cbMtdParam._m0[13u].y) - _443)) + _443);
    float _527 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_508 * ((_461.z * cbMtdParam._m0[13u].z) - _444)) + _444);
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = _562.x;
    float _565 = _562.y;
    float _566 = _562.z;
    float _573 = ((_545.x - _564) * _435) + _564;
    float _574 = ((_545.y - _565) * _435) + _565;
    float _575 = ((_545.z - _566) * _435) + _566;
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _600 = ((_587.z - _575) * _508) + _575;
    float _603 = ((((_587.x - _573) * _508) + _573) * 2.0) + (-1.0);
    float _605 = ((((_587.y - _574) * _508) + _574) * 2.0) + (-1.0);
    float _606 = dot(vec2(_603, _605), vec2(_603, _605));
    float _3835 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _611 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _637 = (((_625.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _603;
    float _638 = (((_625.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _605;
    float _641 = fma(_611, _247, fma(_638, _254, _637 * _240));
    float _644 = fma(_611, _248, fma(_638, _255, _637 * _241));
    float _647 = fma(_611, _249, fma(_638, _256, _637 * _242));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _690 = (cbMtdParam._m0[19u].x + dot(vec4(_651 * _641, _651 * _644, _651 * _647, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_680 - _681) * cbMtdParam._m0[24u].z) + _681) * cbMtdParam._m0[21u].z);
    float _3846 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _691 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _693 = (-0.0) - cbMtdParam._m0[24u].x;
    float _695 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _696 = isnan(1.0) ? _695 : (isnan(_695) ? 1.0 : min(_695, 1.0));
    float _703 = _691 - ((_691 * TEXCOORD_8.x) * _696);
    float _704 = _691 - ((_691 * TEXCOORD_8.y) * _696);
    float _705 = _691 - ((_691 * TEXCOORD_8.z) * _696);
    float _712 = (_703 * (cbMtdParam._m0[17u].x - _521)) + _521;
    float _713 = (_704 * (cbMtdParam._m0[17u].y - _524)) + _524;
    float _714 = (_705 * (cbMtdParam._m0[17u].z - _527)) + _527;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _728 = _726.x;
    float _729 = 1.0 - _728;
    float _755 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_728 - _729) * cbMtdParam._m0[24u].w) + _729) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3867 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
    float _764 = ((((cbMtdParam._m0[10u].x - _712) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _756) + _712;
    float _765 = ((((cbMtdParam._m0[10u].y - _713) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _756) + _713;
    float _766 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _714)) * _756) + _714;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _794) * _435) + _794;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _811) * _508) + _811;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _828) * cbMtdParam._m0[19u].z) + _828;
    float _834 = _832 - (_832 * _703);
    float _836 = _834 - (_834 * _756);
    float _840 = (cbMtdParam._m0[19u].w * (_625.z - _600)) + _600;
    vec4 _854 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _861 = (_854.x * 2.0) + (-1.0);
    float _862 = (_854.y * 2.0) + (-1.0);
    float _863 = dot(vec2(_861, _862), vec2(_861, _862));
    float _3878 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _871 = ((_854.z - _840) * _703) + _840;
    float _874 = ((cbMtdParam._m0[23u].x - _871) * _756) + _871;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _3889 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _916 = ((sqrt(1.0 - (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) - _611) * _705) + _611;
    float _919 = (((_861 - _637) * _703) + _637) + (cbMtdParam._m0[21u].x * _637);
    float _920 = (((_862 - _638) * _704) + _638) + (cbMtdParam._m0[21u].x * _638);
    float _931 = (((_899 - _919) + (_919 * cbMtdParam._m0[22u].z)) * _756) + _919;
    float _932 = (((_900 - _920) + (_920 * cbMtdParam._m0[22u].z)) * _756) + _920;
    float _933 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _916)) + _916;
    float _935 = cbMtdParam._m0[22u].x + _625.w;
    float _938 = fma(_933, _247, fma(_932, _254, _931 * _240));
    float _941 = fma(_933, _248, fma(_932, _255, _931 * _241));
    float _944 = fma(_933, _249, fma(_932, _256, _931 * _242));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _3900 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _952 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _3922 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3933 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3944 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _3955 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _957 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    float _1036 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1037 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1055 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1058 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1061 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1075 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1081 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1075].x;
    float _1082 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1075].y;
    float _1083 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_1075].z;
    float _3966 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1084 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _1085 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _1086 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1087 = 1.0 - _957;
    float _1088 = _1084 * _1087;
    float _1089 = _1085 * _1087;
    float _1090 = _1086 * _1087;
    float _1095 = (_1084 + (-0.039999999105930328369140625)) * _957;
    float _1096 = (_1085 + (-0.039999999105930328369140625)) * _957;
    float _1097 = (_1086 + (-0.039999999105930328369140625)) * _957;
    float _1098 = _1095 + 0.039999999105930328369140625;
    float _1100 = _1096 + 0.039999999105930328369140625;
    float _1101 = _1097 + 0.039999999105930328369140625;
    vec4 _1110 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1036, cbSceneParam._m0[86u].y * _1037));
    float _1114 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * TEXCOORD_5.w) * _1110.x;
    float _1115 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1118 = _1115 * 2.0;
    float _1122 = (_1118 * _949) - _1028;
    float _1123 = (_1118 * _950) - _1029;
    float _1124 = (_1118 * _951) - _1030;
    float _1128 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _3999 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _1130 = sqrt(_952);
    float _1143 = exp2((_1130 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1130 * 3.0));
    float _1149 = (1.0 - _1143) * ((_1130 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1150 = _1143 * _1130;
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1186 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1487;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1212 = fma(_1186, cbModelParam._m0[26u].z, fma(_1182, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1178));
        float _1216 = fma(_1186, cbModelParam._m0[27u].z, fma(_1182, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1178));
        float _1220 = fma(_1186, cbModelParam._m0[28u].z, fma(_1182, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1178));
        float _1245 = _1178 + _949;
        float _1246 = _1182 + _950;
        float _1247 = _1186 + _951;
        float _1257 = fma(_1247, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1245)) - _1212;
        float _1258 = fma(_1247, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1245)) - _1216;
        float _1259 = fma(_1247, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1245)) - _1220;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1212 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1216 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[34u].z) + ((((((_1220 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1315 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1281.x + (-0.5));
        float _1317 = _1315 * (_1281.y + (-0.5));
        float _1318 = _1315 * (_1281.z + (-0.5));
        float _1325 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1288.x + (-0.5));
        float _1327 = _1325 * (_1288.y + (-0.5));
        float _1328 = _1325 * (_1288.z + (-0.5));
        float _1335 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1295.x + (-0.5));
        float _1337 = _1335 * (_1295.y + (-0.5));
        float _1338 = _1335 * (_1295.z + (-0.5));
        float _1345 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1302.x + (-0.5));
        float _1347 = _1345 * (_1302.y + (-0.5));
        float _1348 = _1345 * (_1302.z + (-0.5));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = _1316 * 0.5;
        float _1353 = _1326 * 0.5;
        float _1354 = _1336 * 0.5;
        float _1355 = dot(vec3(_1352, _1353, _1354), vec3(_1352, _1353, _1354));
        float _1360 = (_1355 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1355);
        float _1369 = (dot(vec3(_949, _950, _951), vec3(_1360 * _1352, _1360 * _1353, _1360 * _1354)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1379 = sqrt(((_1353 * _1353) + (_1352 * _1352)) + (_1354 * _1354)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _4047 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1381 + 1.0))) + _1386) * _1349;
        float _1396 = _1317 * 0.5;
        float _1397 = _1327 * 0.5;
        float _1398 = _1337 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1412 = (dot(vec3(_949, _950, _951), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1421 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4080 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1423 + 1.0))) + _1428) * _1350;
        float _1438 = _1318 * 0.5;
        float _1439 = _1328 * 0.5;
        float _1440 = _1338 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_949, _950, _951), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4113 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1465 + 1.0))) + _1470) * _1351;
        _1487 = _1318;
        _1489 = _1317;
        _1490 = _1316;
        _1491 = _1328;
        _1492 = _1327;
        _1493 = _1326;
        _1494 = _1338;
        _1495 = _1337;
        _1496 = _1336;
        _1497 = _1351;
        _1498 = _1350;
        _1499 = _1349;
        _1500 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
        _1501 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1502 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
    }
    else
    {
        _1487 = _1488;
        _1489 = _1488;
        _1490 = _1488;
        _1491 = _1488;
        _1492 = _1488;
        _1493 = _1488;
        _1494 = _1488;
        _1495 = _1488;
        _1496 = _1488;
        _1497 = _1488;
        _1498 = _1488;
        _1499 = _1488;
        _1500 = 0.0;
        _1501 = 0.0;
        _1502 = 0.0;
    }
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1526 = fma(_1186, cbModelParam._m0[30u].z, fma(_1182, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1178));
        float _1530 = fma(_1186, cbModelParam._m0[31u].z, fma(_1182, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1178));
        float _1534 = fma(_1186, cbModelParam._m0[32u].z, fma(_1182, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1178));
        float _1557 = _1178 + _949;
        float _1558 = _1182 + _950;
        float _1559 = _1186 + _951;
        float _1569 = fma(_1559, cbModelParam._m0[30u].z, fma(_1558, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1557)) - _1526;
        float _1570 = fma(_1559, cbModelParam._m0[31u].z, fma(_1558, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1557)) - _1530;
        float _1571 = fma(_1559, cbModelParam._m0[32u].z, fma(_1558, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1557)) - _1534;
        float _1575 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
        float _1588 = ((_1575 * _1569) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1526 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1589 = ((_1575 * _1570) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1530 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1590 = ((_1575 * _1571) / cbModelParam._m0[35u].z) + ((((((_1534 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        vec4 _1613 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1588, _1589, _1590), 0.0);
        float _1625 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1626 = _1625 * (_1592.x + (-0.5));
        float _1627 = _1625 * (_1592.y + (-0.5));
        float _1628 = _1625 * (_1592.z + (-0.5));
        float _1635 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1636 = _1635 * (_1599.x + (-0.5));
        float _1637 = _1635 * (_1599.y + (-0.5));
        float _1638 = _1635 * (_1599.z + (-0.5));
        float _1645 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1646 = _1645 * (_1606.x + (-0.5));
        float _1647 = _1645 * (_1606.y + (-0.5));
        float _1648 = _1645 * (_1606.z + (-0.5));
        float _1655 = exp2((_1613.w + (-0.5)) * 20.0) * 2.0;
        float _1656 = _1655 * (_1613.x + (-0.5));
        float _1657 = _1655 * (_1613.y + (-0.5));
        float _1658 = _1655 * (_1613.z + (-0.5));
        float _1659 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1660 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1661 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1662 = _1626 * 0.5;
        float _1663 = _1636 * 0.5;
        float _1664 = _1646 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_949, _950, _951), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1659 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4176 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1689 + 1.0))) + _1694) * _1659;
        float _1704 = _1627 * 0.5;
        float _1705 = _1637 * 0.5;
        float _1706 = _1647 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_949, _950, _951), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1660 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4209 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1731 + 1.0))) + _1736) * _1660;
        float _1746 = _1628 * 0.5;
        float _1747 = _1638 * 0.5;
        float _1748 = _1648 * 0.5;
        float _1749 = dot(vec3(_1746, _1747, _1748), vec3(_1746, _1747, _1748));
        float _1754 = (_1749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1749);
        float _1762 = (dot(vec3(_949, _950, _951), vec3(_1754 * _1746, _1754 * _1747, _1754 * _1748)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1771 = sqrt(((_1747 * _1747) + (_1746 * _1746)) + (_1748 * _1748)) / (_1661 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1773 = _1772 * 2.0;
        float _1777 = (1.0 - _1772) / (_1772 + 1.0);
        float _4242 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1787 = ((((1.0 - _1778) * (_1773 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1773 + 1.0))) + _1778) * _1661;
        _1795 = _1628;
        _1796 = _1627;
        _1797 = _1626;
        _1798 = _1638;
        _1799 = _1637;
        _1800 = _1636;
        _1801 = _1648;
        _1802 = _1647;
        _1803 = _1646;
        _1804 = _1661;
        _1805 = _1660;
        _1806 = _1659;
        _1807 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1808 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
        _1809 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)));
    }
    else
    {
        _1795 = _1488;
        _1796 = _1488;
        _1797 = _1488;
        _1798 = _1488;
        _1799 = _1488;
        _1800 = _1488;
        _1801 = _1488;
        _1802 = _1488;
        _1803 = _1488;
        _1804 = _1488;
        _1805 = _1488;
        _1806 = _1488;
        _1807 = 0.0;
        _1808 = 0.0;
        _1809 = 0.0;
    }
    float _1819 = (cbModelParam._m0[1u].x * (_1807 - _1500)) + _1500;
    float _1820 = (cbModelParam._m0[1u].x * (_1808 - _1501)) + _1501;
    float _1821 = (cbModelParam._m0[1u].x * (_1809 - _1502)) + _1502;
    float _1842 = fma(_1821, cbSceneParam._m0[89u].z, fma(_1820, cbSceneParam._m0[89u].y, _1819 * cbSceneParam._m0[89u].x));
    float _1845 = fma(_1821, cbSceneParam._m0[90u].z, fma(_1820, cbSceneParam._m0[90u].y, _1819 * cbSceneParam._m0[90u].x));
    float _1848 = fma(_1821, cbSceneParam._m0[91u].z, fma(_1820, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1819));
    float _1863 = _1122 * 0.5;
    float _1864 = _1123 * 0.5;
    float _1865 = _1124 * 0.5;
    float _1866 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1797, _1800, _1803, _1806));
    float _1869 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1796, _1799, _1802, _1805));
    float _1872 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1795, _1798, _1801, _1804));
    float _1906;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1879 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1487, _1491, _1494, _1497));
        float _1883 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1489, _1492, _1495, _1498));
        float _1887 = dot(vec4(_1863, _1864, _1865, 1.0), vec4(_1490, _1493, _1496, _1499));
        float _1894 = dot(vec4(cbModelParam._m0[39u]), vec4(_1863, _1864, _1865, 1.0));
        _1906 = dot(vec3(isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0)), isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1894) ? 0.0 : (isnan(0.0) ? _1894 : max(0.0, _1894))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1906 = 1.0;
    }
    float _1917;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1908 = dot(vec4(cbModelParam._m0[40u]), vec4(_1863, _1864, _1865, 1.0));
        _1917 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1908) ? 0.0 : (isnan(0.0) ? _1908 : max(0.0, _1908))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1917 = 1.0;
    }
    float _1921 = (_1917 * cbModelParam._m0[1u].x) + (_1906 * (1.0 - cbModelParam._m0[1u].x));
    float _1931 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1931 : min(cbModelParam._m0[25u].z, _1931));
    float _2013;
    float _2015;
    float _2017;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1980 = fma(_1186, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1178)) + cbModelParam._m0[13u].w;
        float _1984 = fma(_1186, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1178)) + cbModelParam._m0[14u].w;
        float _1988 = fma(_1186, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1178)) + cbModelParam._m0[15u].w;
        float _1991 = fma(_1124, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1122));
        float _1994 = fma(_1124, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1122));
        float _1997 = fma(_1124, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1122));
        float _2025;
        if (_1991 > 0.0)
        {
            _2025 = abs((1.0 - _1980) / _1991);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1980 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2025 = frontier_phi_14_12_ladder;
        }
        float _2228;
        if (_1994 > 0.0)
        {
            _2228 = abs((1.0 - _1984) / _1994);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1994 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1984 + 1.0) / _1994);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2228 = frontier_phi_23_19_ladder;
        }
        float _2482;
        if (_1997 > 0.0)
        {
            _2482 = abs((1.0 - _1988) / _1997);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1997 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1988 + 1.0) / _1997);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2482 = frontier_phi_35_30_ladder;
        }
        float _2484 = isnan(_2228) ? _2025 : (isnan(_2025) ? _2228 : min(_2025, _2228));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1991) + _1980;
        float _2490 = (_2485 * _1994) + _1984;
        float _2491 = (_2485 * _1997) + _1988;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2619 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1932);
            frontier_phi_13_35_ladder = _2619.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2619.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2619.x * cbModelParam._m0[1u].y;
        }
        _2013 = frontier_phi_13_35_ladder_2;
        _2015 = frontier_phi_13_35_ladder_1;
        _2017 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2001 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1122, _1123, _1124), _1932);
        _2013 = _2001.x * cbModelParam._m0[1u].y;
        _2015 = _2001.y * cbModelParam._m0[1u].y;
        _2017 = _2001.z * cbModelParam._m0[1u].y;
    }
    float _2021 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2021 : min(cbModelParam._m0[25u].w, _2021));
    float _2112;
    float _2114;
    float _2116;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2076 = fma(_1186, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1178)) + cbModelParam._m0[21u].w;
        float _2080 = fma(_1186, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1178)) + cbModelParam._m0[22u].w;
        float _2084 = fma(_1186, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1178)) + cbModelParam._m0[23u].w;
        float _2087 = fma(_1124, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1122));
        float _2090 = fma(_1124, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1122));
        float _2093 = fma(_1124, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1122));
        float _2233;
        if (_2087 > 0.0)
        {
            _2233 = abs((1.0 - _2076) / _2087);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2076 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2233 = frontier_phi_25_21_ladder;
        }
        float _2509;
        if (_2090 > 0.0)
        {
            _2509 = abs((1.0 - _2080) / _2090);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2090 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2080 + 1.0) / _2090);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2509 = frontier_phi_37_32_ladder;
        }
        float _2722;
        if (_2093 > 0.0)
        {
            _2722 = abs((1.0 - _2084) / _2093);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2093 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2084 + 1.0) / _2093);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2722 = frontier_phi_46_43_ladder;
        }
        float _2724 = isnan(_2509) ? _2233 : (isnan(_2233) ? _2509 : min(_2233, _2509));
        float _2725 = isnan(_2722) ? _2724 : (isnan(_2724) ? _2722 : min(_2724, _2722));
        float _2729 = (_2725 * _2087) + _2076;
        float _2730 = (_2725 * _2090) + _2080;
        float _2731 = (_2725 * _2093) + _2084;
        float _2732 = _2725 * 9.9999997473787516355514526367188e-05;
        float _2733 = (-1.0) - _2732;
        float _2735 = _2732 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2731 > _2735) || ((_2731 < _2733) || ((_2730 > _2735) || ((_2730 < _2733) || ((_2729 < _2733) || (_2729 > _2735))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2731, cbModelParam._m0[17u].z, fma(_2730, cbModelParam._m0[17u].y, _2729 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2731, cbModelParam._m0[18u].z, fma(_2730, cbModelParam._m0[18u].y, _2729 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2731, cbModelParam._m0[19u].z, fma(_2730, cbModelParam._m0[19u].y, _2729 * cbModelParam._m0[19u].x))), _2022);
            frontier_phi_22_46_ladder = _2930.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2930.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2930.x * cbModelParam._m0[1u].z;
        }
        _2112 = frontier_phi_22_46_ladder_2;
        _2114 = frontier_phi_22_46_ladder_1;
        _2116 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2096 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1122, _1123, _1124), _2022);
        _2112 = _2096.x * cbModelParam._m0[1u].z;
        _2114 = _2096.y * cbModelParam._m0[1u].z;
        _2116 = _2096.z * cbModelParam._m0[1u].z;
    }
    float _2129 = (((_1149 * _1098) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2112 - _2013)) + _2013);
    float _2131 = (((_1149 * _1100) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2114 - _2015)) + _2015);
    float _2133 = (((_1149 * _1101) + _1150) * _1114) * ((cbModelParam._m0[1u].w * (_2116 - _2017)) + _2017);
    float _2136 = fma(_2133, cbSceneParam._m0[89u].z, fma(_2131, cbSceneParam._m0[89u].y, _2129 * cbSceneParam._m0[89u].x));
    float _2139 = fma(_2133, cbSceneParam._m0[90u].z, fma(_2131, cbSceneParam._m0[90u].y, _2129 * cbSceneParam._m0[90u].x));
    float _2142 = fma(_2133, cbSceneParam._m0[91u].z, fma(_2131, cbSceneParam._m0[91u].y, _2129 * cbSceneParam._m0[91u].x));
    uvec4 _2152 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2154 = _2152.x * 14u;
    uint _2155 = _2154 + 13u;
    float _2162 = _1114 + (-1.0);
    float _2167 = (cbLight._m0[_2155].x * _2162) + 1.0;
    float _2168 = (cbLight._m0[_2155].y * _2162) + 1.0;
    float _2169 = (cbLight._m0[_2155].z * _2162) + 1.0;
    float _2170 = (cbLight._m0[_2155].w * _2162) + 1.0;
    uint _2171 = _2154 + 5u;
    float _2177 = isnan(1.0) ? _2168 : (isnan(_2168) ? 1.0 : min(_2168, 1.0));
    uint _2181 = _2154 + 4u;
    float _2187 = isnan(1.0) ? _2167 : (isnan(_2167) ? 1.0 : min(_2167, 1.0));
    uint _2191 = _2154 | 1u;
    float _2202 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_949, _950, _951));
    float _2205 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_949, _950, _951));
    float _4378 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _4389 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2210 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2212 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2219 = ((cbLight._m0[_2171].x * _2177) * _2212) + ((cbLight._m0[_2181].x * _2187) * _2210);
    float _2220 = ((_2177 * cbLight._m0[_2171].y) * _2212) + ((_2187 * cbLight._m0[_2181].y) * _2210);
    float _2221 = ((_2177 * cbLight._m0[_2171].z) * _2212) + ((_2187 * cbLight._m0[_2181].z) * _2210);
    uvec4 _2225 = floatBitsToUint(cbLight._m0[_2154 + 12u]);
    bool _2227 = _2225.x == 0u;
    float _2238;
    float _2240;
    float _2242;
    if (_2227)
    {
        _2238 = _2219;
        _2240 = _2220;
        _2242 = _2221;
    }
    else
    {
        uint _2246 = _2154 + 6u;
        float _2262 = (dot(vec3(cbLight._m0[_2154 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2263 = _2262 * _2262;
        float _4400 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2264 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2265 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2238 = (((cbLight._m0[_2246].x * 0.3183098733425140380859375) * _2264) * _2265) + _2219;
        _2240 = (((cbLight._m0[_2246].y * 0.3183098733425140380859375) * _2264) * _2265) + _2220;
        _2242 = (((cbLight._m0[_2246].z * 0.3183098733425140380859375) * _2264) * _2265) + _2221;
    }
    bool _2245 = _2225.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2245)
    {
        _2283 = _2238;
        _2285 = _2240;
        _2287 = _2242;
    }
    else
    {
        uint _2453 = _2154 + 7u;
        float _2469 = (dot(vec3(cbLight._m0[_2154 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2470 = _2469 * _2469;
        float _4416 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2471 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2472 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2283 = (((cbLight._m0[_2453].x * 0.3183098733425140380859375) * _2471) * _2472) + _2238;
        _2285 = (((cbLight._m0[_2453].y * 0.3183098733425140380859375) * _2471) * _2472) + _2240;
        _2287 = (((cbLight._m0[_2453].z * 0.3183098733425140380859375) * _2471) * _2472) + _2242;
    }
    uint _2290 = _2154 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2154].w)) * _952) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2154].x + _1028;
    float _2306 = cbLight._m0[_2154].y + _1029;
    float _2307 = cbLight._m0[_2154].z + _1030;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2154].xyz));
    float _4432 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
    float _2319 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2320 = dot(vec3(_949, _950, _951), vec3(_2312, _2313, _2314));
    float _4454 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2154].xyz), vec3(_2312, _2313, _2314));
    float _4465 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2340 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2341 = 0.959999978542327880859375 - _1095;
    float _2343 = 0.959999978542327880859375 - _1096;
    float _2344 = 0.959999978542327880859375 - _1097;
    float _2351 = 1.0 - _2304;
    float _2362 = (0.5 / (((_2319 * ((_2318 * _2351) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2351) + _2304) * _2318))) * _2318;
    float _4476 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2364 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2375 = _2154 + 9u;
    float _2386 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2191].w)) * _952) * 0.949999988079071044921875);
    float _2387 = _2386 * _2386;
    float _2388 = cbLight._m0[_2191].x + _1028;
    float _2389 = cbLight._m0[_2191].y + _1029;
    float _2390 = cbLight._m0[_2191].z + _1030;
    float _2394 = inversesqrt(dot(vec3(_2388, _2389, _2390), vec3(_2388, _2389, _2390)));
    float _2395 = _2394 * _2388;
    float _2396 = _2394 * _2389;
    float _2397 = _2394 * _2390;
    float _2398 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2191].xyz));
    float _4487 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2402 = dot(vec3(_949, _950, _951), vec3(_2395, _2396, _2397));
    float _4498 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2191].xyz), vec3(_2395, _2396, _2397));
    float _4509 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2387 * _2387;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2421 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
    float _2428 = 1.0 - _2387;
    float _2438 = (0.5 / (((_2319 * ((_2401 * _2428) + _2387)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2428) + _2387) * _2401))) * _2401;
    float _4520 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    float _2450 = (((((_2421 * _2341) + _1098) * cbLight._m0[_2375].x) * _2440) * _2177) + (((((_2340 * _2341) + _1098) * cbLight._m0[_2290].x) * _2364) * _2187);
    float _2451 = (((((_2421 * _2343) + _1100) * cbLight._m0[_2375].y) * _2440) * _2177) + (((((_2340 * _2343) + _1100) * cbLight._m0[_2290].y) * _2364) * _2187);
    float _2452 = (((((_2421 * _2344) + _1101) * cbLight._m0[_2375].z) * _2440) * _2177) + (((((_2340 * _2344) + _1101) * cbLight._m0[_2290].z) * _2364) * _2187);
    float _2514;
    float _2516;
    float _2518;
    if (_2227)
    {
        _2514 = _2450;
        _2516 = _2451;
        _2518 = _2452;
    }
    else
    {
        uint _2520 = _2154 + 2u;
        uint _2524 = _2154 + 10u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _952) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _1028;
        float _2541 = cbLight._m0[_2520].y + _1029;
        float _2542 = cbLight._m0[_2520].z + _1030;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2520].xyz));
        float _4531 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2554 = dot(vec3(_949, _950, _951), vec3(_2547, _2548, _2549));
        float _4542 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4553 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2319 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2580) + _2539) * _2553))) * _2553;
        float _4564 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
        _2514 = (((((_2573 * _2341) + _1098) * cbLight._m0[_2524].x) * _2592) * _2593) + _2450;
        _2516 = (((((_2573 * _2343) + _1100) * cbLight._m0[_2524].y) * _2592) * _2593) + _2451;
        _2518 = (((((_2573 * _2344) + _1101) * cbLight._m0[_2524].z) * _2592) * _2593) + _2452;
    }
    float _2628;
    float _2630;
    float _2632;
    if (_2245)
    {
        _2628 = _2514;
        _2630 = _2516;
        _2632 = _2518;
    }
    else
    {
        uint _2639 = _2154 + 3u;
        uint _2643 = _2154 + 11u;
        float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2639].w)) * _952) * 0.949999988079071044921875);
        float _2658 = _2657 * _2657;
        float _2659 = cbLight._m0[_2639].x + _1028;
        float _2660 = cbLight._m0[_2639].y + _1029;
        float _2661 = cbLight._m0[_2639].z + _1030;
        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
        float _2666 = _2665 * _2659;
        float _2667 = _2665 * _2660;
        float _2668 = _2665 * _2661;
        float _2669 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2639].xyz));
        float _4580 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2672 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2673 = dot(vec3(_949, _950, _951), vec3(_2666, _2667, _2668));
        float _4591 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2677 = dot(vec3(cbLight._m0[_2639].xyz), vec3(_2666, _2667, _2668));
        float _4602 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2681 = _2658 * _2658;
        float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
        float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2699 = 1.0 - _2658;
        float _2709 = (0.5 / (((_2319 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2699) + _2658) * _2672))) * _2672;
        float _4613 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2711 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
        float _2712 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
        _2628 = (((((_2692 * _2341) + _1098) * cbLight._m0[_2643].x) * _2711) * _2712) + _2514;
        _2630 = (((((_2692 * _2343) + _1100) * cbLight._m0[_2643].y) * _2711) * _2712) + _2516;
        _2632 = (((((_2692 * _2344) + _1101) * cbLight._m0[_2643].z) * _2711) * _2712) + _2518;
    }
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2152.y == 0u)
    {
        float _2787 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2788 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2787;
        float _2789 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2787;
        float _2790 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2787;
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.x;
        uint _2814 = uint((float(_2802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1037) / _2803))) + floor(float(uint(cbSceneParam._m0[85u].x * _1036) / _2803)));
        float _2824 = (log2(_2790 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2825 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        uint _2828 = uint(isnan(14.0) ? _2825 : (isnan(_2825) ? 14.0 : min(_2825, 14.0)));
        uvec4 _2833 = texelFetch(g_lightClusterGridBuffer, int(((_2828 << 2u) + (_2814 << 6u)) >> 2u));
        uint _2834 = _2833.x;
        uint _2835 = _2802.z;
        float _2935;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        if (((((1u << ((_2835 >> 4u) & 15u)) + 4294967295u) & _2834) == 0u) || ((_2835 & 240u) == 0u))
        {
            _2935 = 0.0;
            _2937 = 0.0;
            _2939 = 0.0;
            _2941 = 0.0;
            _2943 = 0.0;
            _2945 = 0.0;
        }
        else
        {
            float _2936;
            float _2938;
            float _2940;
            float _2942;
            float _2944;
            float _2946;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3095)
                {
                    frontier_phi_61_pred = _3079;
                    frontier_phi_61_pred_1 = _3084;
                    frontier_phi_61_pred_2 = _3083;
                    frontier_phi_61_pred_3 = _3082;
                    frontier_phi_61_pred_4 = _3081;
                    frontier_phi_61_pred_5 = _3080;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3094;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3085 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _2788;
                        float _3270 = _3229.y - _2789;
                        float _3271 = _3229.z - _2790;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_1055, _1058, _1061), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4639 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2788;
                        float _3305 = (-0.0) - _2789;
                        float _3306 = (-0.0) - _2790;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3321 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _1130;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3334 = _3313 + _3278;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_1055, _1058, _1061), vec3(_3311, _3312, _3313));
                        float _4655 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3346 = dot(vec3(_1055, _1058, _1061), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4666 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3289 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3279) + _3355;
                        float _4677 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4688 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3353 * _3353) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3138 = (_3300 * _3248.x) + _3206;
                        _3139 = (_3300 * _3248.y) + _3207;
                        _3140 = (_3300 * _3248.z) + _3208;
                        _3135 = (_3381 * _3265.x) + _3203;
                        _3136 = (_3381 * _3265.y) + _3204;
                        _3137 = (_3381 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_61_pred = _3135;
                    frontier_phi_61_pred_1 = _3140;
                    frontier_phi_61_pred_2 = _3139;
                    frontier_phi_61_pred_3 = _3138;
                    frontier_phi_61_pred_4 = _3137;
                    frontier_phi_61_pred_5 = _3136;
                }
                _2936 = frontier_phi_61_pred;
                _2946 = frontier_phi_61_pred_1;
                _2944 = frontier_phi_61_pred_2;
                _2942 = frontier_phi_61_pred_3;
                _2940 = frontier_phi_61_pred_4;
                _2938 = frontier_phi_61_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2936;
                    _3080 = _2938;
                    _3081 = _2940;
                    _3082 = _2942;
                    _3083 = _2944;
                    _3084 = _2946;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2935 = _2936;
            _2937 = _2938;
            _2939 = _2940;
            _2941 = _2942;
            _2943 = _2944;
            _2945 = _2946;
        }
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.z;
        uint _2952 = (_2950 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2952) & _2834) == 0u)
        {
            _3047 = _2935;
            _3049 = _2937;
            _3051 = _2939;
            _3053 = _2941;
            _3055 = _2943;
            _3057 = _2945;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
            float _3073 = _3072 * _2788;
            float _3074 = _3072 * _2789;
            float _3075 = _3072 * _2790;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2952 < ((_2950 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3186 = _2935;
                float _3187 = _2937;
                float _3188 = _2939;
                float _3189 = _2941;
                float _3190 = _2943;
                float _3191 = _2945;
                uint _3192 = _2952;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3202)
                    {
                        frontier_phi_67_pred = _3189;
                        frontier_phi_67_pred_1 = _3190;
                        frontier_phi_67_pred_2 = _3191;
                        frontier_phi_67_pred_3 = _3188;
                        frontier_phi_67_pred_4 = _3187;
                        frontier_phi_67_pred_5 = _3186;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        uint _3405 = _3201;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3474;
                        vec4 _3489;
                        float _3535;
                        bool _3536;
                        for (;;)
                        {
                            uint _3416 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3461 = (_3416 * 40u) + 16u;
                            _3474 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3461)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3461 + 3u)).x));
                            uint _3476 = (_3416 * 40u) + 20u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3491 = (_3416 * 40u) + 24u;
                            vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3491)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3491 + 3u)).x));
                            uint _3510 = (_3416 * 40u) + 28u;
                            vec4 _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            _3535 = fma(_2790, _3523.z, fma(_2789, _3523.y, _3523.x * _2788)) + _3523.w;
                            _3536 = !((fma(_2790, _3504.z, fma(_2789, _3504.y, _3504.x * _2788)) + _3504.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3536)
                            {
                                float _3563 = _3431.x - _2788;
                                float _3564 = _3431.y - _2789;
                                float _3565 = _3431.z - _2790;
                                float _3566 = dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565));
                                float _3569 = inversesqrt(_3566);
                                float _3570 = _3569 * _3563;
                                float _3571 = _3569 * _3564;
                                float _3572 = _3569 * _3565;
                                float _3576 = 1.0 - (_3566 / (_3432 * _3432));
                                float _4699 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3581 = sqrt(_3566) * _3447.w;
                                float _3583 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                                float _3584 = _3583 * _3583;
                                float _3587 = ((1.0 - _3584) * dot(vec3(_3570, _3571, _3572), vec3(_1055, _1058, _1061))) + _3584;
                                float _3590 = _3581 * _3581;
                                float _3594 = (fma(_2790, _3474.z, fma(_2789, _3474.y, _3474.x * _2788)) + _3474.w) / _3535;
                                float _3595 = (fma(_2790, _3489.z, fma(_2789, _3489.y, _3489.x * _2788)) + _3489.w) / _3535;
                                float _3599 = 1.0 - dot(vec2(_3594, _3595), vec2(_3594, _3595));
                                float _4715 = isnan(0.0) ? _3599 : (isnan(_3599) ? 0.0 : max(_3599, 0.0));
                                float _3600 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3601 = _3600 * (((isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0))) * _3577) / ((_3590 * 0.699999988079071044921875) + 1.0));
                                float _3613 = exp2(log2(1.0 / ((_3590 * 3.5) + 5.0)) * 0.25);
                                float _3614 = 1.0 - _1130;
                                float _3621 = sqrt(1.0 - ((1.0 - (_3614 * _3614)) * (1.0 - (_3613 * _3613))));
                                float _3622 = _3621 * _3621;
                                float _3623 = _3622 * _3622;
                                float _3624 = _3570 - _3073;
                                float _3625 = _3571 - _3074;
                                float _3626 = _3572 - _3075;
                                float _3630 = inversesqrt(dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626)));
                                float _3634 = dot(vec3(_1055, _1058, _1061), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4726 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3637 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3638 = dot(vec3(_1055, _1058, _1061), vec3(_3630 * _3624, _3630 * _3625, _3630 * _3626));
                                float _4737 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3645 = ((_3641 * _3641) * (_3623 + (-1.0))) + 1.0;
                                float _3646 = _3583 * _3622;
                                float _3647 = _3646 * _3646;
                                float _3653 = ((1.0 - _3647) * dot(vec3(_1055, _1058, _1061), vec3(_3570, _3571, _3572))) + _3647;
                                float _4748 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3654 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3655 = 1.0 - _3622;
                                float _3665 = (0.5 / (((_3654 * ((_3637 * _3655) + _3622)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3622) * _3637))) * _3654;
                                float _4759 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3675 = (_3600 * _3577) * (((_3623 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3645 * _3645) * ((_3590 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3675 * _3459.x;
                                frontier_phi_73_pred_1 = _3675 * _3459.y;
                                frontier_phi_73_pred_2 = _3601 * _3447.z;
                                frontier_phi_73_pred_3 = _3601 * _3447.y;
                                frontier_phi_73_pred_4 = _3601 * _3447.x;
                                frontier_phi_73_pred_5 = _3675 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3679 = frontier_phi_73_pred;
                            _3680 = frontier_phi_73_pred_1;
                            _3684 = frontier_phi_73_pred_2;
                            _3683 = frontier_phi_73_pred_3;
                            _3682 = frontier_phi_73_pred_4;
                            _3681 = frontier_phi_73_pred_5;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3386 = _3679 + _3399;
                            _3387 = _3680 + _3400;
                            _3388 = _3681 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3389;
                        frontier_phi_67_pred_1 = _3390;
                        frontier_phi_67_pred_2 = _3391;
                        frontier_phi_67_pred_3 = _3388;
                        frontier_phi_67_pred_4 = _3387;
                        frontier_phi_67_pred_5 = _3386;
                    }
                    _3054 = frontier_phi_67_pred;
                    _3056 = frontier_phi_67_pred_1;
                    _3058 = frontier_phi_67_pred_2;
                    _3052 = frontier_phi_67_pred_3;
                    _3050 = frontier_phi_67_pred_4;
                    _3048 = frontier_phi_67_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3048;
                        _3187 = _3050;
                        _3188 = _3052;
                        _3189 = _3054;
                        _3190 = _3056;
                        _3191 = _3058;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3056;
                frontier_phi_55_56_ladder_1 = _3058;
                frontier_phi_55_56_ladder_2 = _3054;
                frontier_phi_55_56_ladder_3 = _3052;
                frontier_phi_55_56_ladder_4 = _3050;
                frontier_phi_55_56_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_55_56_ladder = _2943;
                frontier_phi_55_56_ladder_1 = _2945;
                frontier_phi_55_56_ladder_2 = _2941;
                frontier_phi_55_56_ladder_3 = _2939;
                frontier_phi_55_56_ladder_4 = _2937;
                frontier_phi_55_56_ladder_5 = _2935;
            }
            _3047 = frontier_phi_55_56_ladder_5;
            _3049 = frontier_phi_55_56_ladder_4;
            _3051 = frontier_phi_55_56_ladder_3;
            _3053 = frontier_phi_55_56_ladder_2;
            _3055 = frontier_phi_55_56_ladder;
            _3057 = frontier_phi_55_56_ladder_1;
        }
        float _3062 = isnan(1.0) ? _1114 : (isnan(_1114) ? 1.0 : min(_1114, 1.0));
        _2847 = (_3062 * _3053) + _2283;
        _2849 = (_3062 * _3055) + _2285;
        _2851 = (_3062 * _3057) + _2287;
        _2853 = ((_3047 * _1098) * _3062) + _2628;
        _2855 = ((_3049 * _1100) * _3062) + _2630;
        _2857 = ((_3051 * _1101) * _3062) + _2632;
    }
    else
    {
        _2847 = _2283;
        _2849 = _2285;
        _2851 = _2287;
        _2853 = _2628;
        _2855 = _2630;
        _2857 = _2632;
    }
    float _4775 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _4786 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _4797 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    uint _2877 = _259 + 6u;
    float _2885 = _1036 / cbSceneParam._m0[86u].x;
    float _2886 = _1037 / cbSceneParam._m0[86u].y;
    vec4 _2900 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2902 = _2900.x;
    float _2903 = _2900.y;
    float _2904 = _2900.z;
    float _2905 = _2900.w;
    float _2997;
    float _2999;
    float _3001;
    float _3003;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _2960 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _2961 = _2960 / _971;
        float _2972 = _2961 * _1021;
        float _2973 = _1022 * _2961;
        float _2974 = (-0.0) - _2973;
        float _2975 = _2961 * _1023;
        float _2977 = (cbSceneParam._m0[77u].w * _2974) / _2960;
        float _2978 = _2977 + cbSceneParam._m0[79u].w;
        float _2979 = cbSceneParam._m0[79u].w - _2973;
        float _2985 = sqrt(((_2972 * _2972) + (_2973 * _2973)) + (_2975 * _2975));
        float _2988 = (1.0 - (cbSceneParam._m0[77u].w / _2960)) * _2985;
        float _2993 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2995 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2974 - _2977) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2978 > 0.0) ? exp2(_2993 * _2978) : (2.0 - exp2(_2995 * _2978))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2988;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : max(_2978, _2979));
            float _3110 = isnan(_2979) ? _2978 : (isnan(_2978) ? _2979 : min(_2978, _2979));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3148 = ((abs(_2985 / _2974) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2993 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2993 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2995 * _3119) - exp2(_2995 * _3120)) * _3108))) + (_2988 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2905);
        _2997 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2902;
        _2999 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2903;
        _3001 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2904;
        _3003 = _3159 * _2905;
    }
    else
    {
        _2997 = _2902;
        _2999 = _2903;
        _3001 = _2904;
        _3003 = _2905;
    }
    float _3015 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3016 = _3015 == 3.0;
    float _3017 = log2(_3003);
    float _3024 = exp2(_3017 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2847 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1114))) + ((_2853 + ((isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3025 = exp2(_3017 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2849 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1114))) + ((_2855 + ((isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3026 = exp2(_3017 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2851 + ((isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))) * _1114))) + ((_2857 + ((isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0))) * _1921)) * cbPerFrame._m0[3u].x));
    float _3035 = (_3015 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3035 * (_3016 ? _3024 : (_3024 + (cbSceneParam._m0[72u].w * _2997)));
    SV_Target.y = _3035 * (_3016 ? _3025 : (_3025 + (cbSceneParam._m0[72u].w * _2999)));
    SV_Target.z = _3035 * (_3016 ? _3026 : (_3026 + (cbSceneParam._m0[72u].w * _3001)));
    SV_Target.w = cbInstanceData._m0[_2877].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2877].w;
}


