#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1596;
float _4257;
float _4258;
float _4259;
float _4260;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4269 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4280 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4291 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _435 = _433.x;
    float _447 = dot(vec4(_435, _433.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _464 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_435 - _447) * cbMtdParam._m0[23u].w) + _447) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4302 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _465 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _472 = (_465 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _473 = (_465 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _474 = (_465 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _513 = _511.x;
    float _523 = dot(vec4(_513, _511.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _537 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_513 - _523) * cbMtdParam._m0[23u].w) + _523) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4313 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _545 = (_538 * ((_491.x * cbMtdParam._m0[13u].x) - _472)) + _472;
    float _546 = (_538 * ((_491.y * cbMtdParam._m0[13u].y) - _473)) + _473;
    float _547 = (_538 * ((_491.z * cbMtdParam._m0[13u].z) - _474)) + _474;
    float _551 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _545;
    float _554 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _546;
    float _557 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _547;
    float _564 = ((_545 - _551) * (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0)))) + _551;
    float _565 = ((_546 - _554) * (isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0)))) + _554;
    float _566 = ((_547 - _557) * (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) + _557;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _644 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _646 = _644.x;
    float _647 = _644.y;
    float _648 = _644.z;
    float _655 = ((_627.x - _646) * _465) + _646;
    float _656 = ((_627.y - _647) * _465) + _647;
    float _657 = ((_627.z - _648) * _465) + _648;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _682 = ((_669.z - _657) * _538) + _657;
    float _685 = ((((_669.x - _655) * _538) + _655) * 2.0) + (-1.0);
    float _686 = ((((_669.y - _656) * _538) + _656) * 2.0) + (-1.0);
    float _687 = dot(vec2(_685, _686), vec2(_685, _686));
    float _4324 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _692 = sqrt(1.0 - (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))));
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _731 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _733 = _731.x;
    float _734 = 1.0 - _733;
    float _743 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _746 = ((isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : min(_743, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _755 = (_746 - ((((((_733 - _734) * cbMtdParam._m0[24u].z) + _734) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _746))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4345 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _763 = (_756 * ((_585.x * cbMtdParam._m0[18u].x) - _564)) + _564;
    float _764 = (_756 * ((_585.y * cbMtdParam._m0[18u].y) - _565)) + _565;
    float _765 = (_756 * ((_585.z * cbMtdParam._m0[18u].z) - _566)) + _566;
    vec4 _777 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _318) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _319) + cbTextureTilingScale._m0[19u].w));
    float _779 = _777.x;
    float _780 = 1.0 - _779;
    float _805 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_779 - _780) * cbMtdParam._m0[24u].w) + _780) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4356 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _806 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _814 = ((((cbMtdParam._m0[10u].x - _763) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _806) + _763;
    float _815 = ((((cbMtdParam._m0[10u].y - _764) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _806) + _764;
    float _816 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _765)) * _806) + _765;
    vec4 _842 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _844 = _842.x;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _844) * _465) + _844;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _862) * _538) + _862;
    float _883 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _879) * cbMtdParam._m0[19u].z) + _879;
    float _885 = _883 - (_883 * _756);
    float _887 = _885 - (_885 * _806);
    float _892 = (((_604.z - _682) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _682;
    float _896 = ((_706.z - _892) * cbMtdParam._m0[19u].w) + _892;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _917 = (_910.x * 2.0) + (-1.0);
    float _918 = (_910.y * 2.0) + (-1.0);
    float _919 = dot(vec2(_917, _918), vec2(_917, _918));
    float _4367 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _927 = (_756 * (_910.z - _896)) + _896;
    float _930 = ((cbMtdParam._m0[23u].x - _927) * _806) + _927;
    vec4 _951 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _318) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _319) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _957 = (_951.x * 2.0) + (-1.0);
    float _958 = (_951.y * 2.0) + (-1.0);
    float _959 = dot(vec2(_957, _958), vec2(_957, _958));
    float _4378 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _973 = (_685 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_604.x * 2.0) + (-1.0)))) + (((_706.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _974 = (_686 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_604.y * 2.0) + (-1.0)))) + (((_706.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _986 = (((_917 - _973) + (cbMtdParam._m0[21u].x * _973)) * _756) + _973;
    float _987 = (((_918 - _974) + (cbMtdParam._m0[21u].x * _974)) * _756) + _974;
    float _988 = (_756 * (sqrt(1.0 - (isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0)))) - _692)) + _692;
    float _999 = (((_957 - _986) + (_986 * cbMtdParam._m0[22u].z)) * _806) + _986;
    float _1000 = (((_958 - _987) + (_987 * cbMtdParam._m0[22u].z)) * _806) + _987;
    float _1001 = ((sqrt(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) - _988) * _806) + _988;
    float _1003 = cbMtdParam._m0[22u].x + _706.w;
    float _1006 = fma(_1001, _267 * NORMAL.x, fma(_1000, _274 * TANGENT.x, (_260 * _252) * _999));
    float _1009 = fma(_1001, _267 * NORMAL.y, fma(_1000, _274 * TANGENT.y, (_260 * _253) * _999));
    float _1012 = fma(_1001, _267 * NORMAL.z, fma(_1000, _274 * TANGENT.z, (_260 * _254) * _999));
    float _1016 = inversesqrt(dot(vec3(_1006, _1009, _1012), vec3(_1006, _1009, _1012)));
    float _1017 = _1016 * _1006;
    float _1018 = _1016 * _1009;
    float _1019 = _1016 * _1012;
    float _4389 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _1020 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
    float _4411 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4422 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _4433 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _4444 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _1025 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _1039 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1079 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1089 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1079);
    float _1090 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1079);
    float _1091 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1079);
    float _1095 = inversesqrt(dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091)));
    float _1096 = _1089 * _1095;
    float _1097 = _1090 * _1095;
    float _1098 = _1091 * _1095;
    vec4 _1103 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1105 = _1103.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1277 = sqrt(((_1089 * _1089) + (_1090 * _1090)) + (_1091 * _1091));
        float _1283 = (cbMatDynParam._m0[5u].x * _1277) + cbMatDynParam._m0[5u].y;
        float _4455 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1288 = (cbMatDynParam._m0[5u].z * _1277) + cbMatDynParam._m0[5u].w;
        float _4466 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) - _1284)) + _1284) < ((_1105 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1116 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1117 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1135 = fma(_1019, cbSceneParam._m0[5u].z, fma(_1018, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1017));
    float _1138 = fma(_1019, cbSceneParam._m0[6u].z, fma(_1018, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1017));
    float _1141 = fma(_1019, cbSceneParam._m0[7u].z, fma(_1018, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1017));
    uint _1154 = _299 + 9u;
    uint _1155 = _1154 + uint(cbMatDynParam._m0[0u].w);
    float _1161 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0)))) * cbInstanceData._m0[_1155].x;
    float _1162 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * cbInstanceData._m0[_1155].y;
    float _1163 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * cbInstanceData._m0[_1155].z;
    float _4477 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _4488 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    float _1165 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _4499 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
    float _1167 = 1.0 - _1025;
    float _1168 = _1164 * _1167;
    float _1169 = _1165 * _1167;
    float _1170 = _1166 * _1167;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1025;
    float _1176 = (_1165 + (-0.039999999105930328369140625)) * _1025;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1025;
    float _1178 = _1175 + 0.039999999105930328369140625;
    float _1180 = _1176 + 0.039999999105930328369140625;
    float _1181 = _1177 + 0.039999999105930328369140625;
    vec4 _1190 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1116, cbSceneParam._m0[86u].y * _1117));
    float _1194 = ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * TEXCOORD_5.w) * _1190.x;
    float _1195 = dot(vec3(_1017, _1018, _1019), vec3(_1096, _1097, _1098));
    float _1198 = _1195 * 2.0;
    float _1202 = (_1198 * _1017) - _1096;
    float _1203 = (_1198 * _1018) - _1097;
    float _1204 = (_1198 * _1019) - _1098;
    float _1208 = abs(dot(vec3(_1096, _1097, _1098), vec3(_1017, _1018, _1019)));
    float _4510 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
    float _1210 = sqrt(_1020);
    float _1223 = exp2((_1210 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1210 * 3.0));
    float _1229 = (1.0 - _1223) * ((_1210 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1230 = _1223 * _1210;
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1262 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1266 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1595;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1320 = fma(_1266, cbModelParam._m0[26u].z, fma(_1262, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258));
        float _1324 = fma(_1266, cbModelParam._m0[27u].z, fma(_1262, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258));
        float _1328 = fma(_1266, cbModelParam._m0[28u].z, fma(_1262, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258));
        float _1353 = _1258 + _1017;
        float _1354 = _1262 + _1018;
        float _1355 = _1266 + _1019;
        float _1365 = fma(_1355, cbModelParam._m0[26u].z, fma(_1354, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1353)) - _1320;
        float _1366 = fma(_1355, cbModelParam._m0[27u].z, fma(_1354, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1353)) - _1324;
        float _1367 = fma(_1355, cbModelParam._m0[28u].z, fma(_1354, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1353)) - _1328;
        float _1371 = inversesqrt(dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367)));
        float _1384 = ((_1371 * _1365) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1320 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1385 = ((_1371 * _1366) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1324 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1386 = ((_1371 * _1367) / cbModelParam._m0[34u].z) + ((((((_1328 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1389 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1396 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1384, _1385, _1386), 0.0);
        float _1423 = exp2((_1389.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1389.x + (-0.5));
        float _1425 = _1423 * (_1389.y + (-0.5));
        float _1426 = _1423 * (_1389.z + (-0.5));
        float _1433 = exp2((_1396.w + (-0.5)) * 20.0) * 2.0;
        float _1434 = _1433 * (_1396.x + (-0.5));
        float _1435 = _1433 * (_1396.y + (-0.5));
        float _1436 = _1433 * (_1396.z + (-0.5));
        float _1443 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1403.x + (-0.5));
        float _1445 = _1443 * (_1403.y + (-0.5));
        float _1446 = _1443 * (_1403.z + (-0.5));
        float _1453 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1410.x + (-0.5));
        float _1455 = _1453 * (_1410.y + (-0.5));
        float _1456 = _1453 * (_1410.z + (-0.5));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = _1424 * 0.5;
        float _1461 = _1434 * 0.5;
        float _1462 = _1444 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1477 = (dot(vec3(_1017, _1018, _1019), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1487 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4558 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1489 + 1.0))) + _1494) * _1457;
        float _1504 = _1425 * 0.5;
        float _1505 = _1435 * 0.5;
        float _1506 = _1445 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_1017, _1018, _1019), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1458 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4591 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1531 + 1.0))) + _1536) * _1458;
        float _1546 = _1426 * 0.5;
        float _1547 = _1436 * 0.5;
        float _1548 = _1446 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_1017, _1018, _1019), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4624 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1573 + 1.0))) + _1578) * _1459;
        _1595 = _1426;
        _1597 = _1425;
        _1598 = _1424;
        _1599 = _1436;
        _1600 = _1435;
        _1601 = _1434;
        _1602 = _1446;
        _1603 = _1445;
        _1604 = _1444;
        _1605 = _1459;
        _1606 = _1458;
        _1607 = _1457;
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1609 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1596;
        _1597 = _1596;
        _1598 = _1596;
        _1599 = _1596;
        _1600 = _1596;
        _1601 = _1596;
        _1602 = _1596;
        _1603 = _1596;
        _1604 = _1596;
        _1605 = _1596;
        _1606 = _1596;
        _1607 = _1596;
        _1608 = 0.0;
        _1609 = 0.0;
        _1610 = 0.0;
    }
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1637 = fma(_1266, cbModelParam._m0[30u].z, fma(_1262, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258));
        float _1641 = fma(_1266, cbModelParam._m0[31u].z, fma(_1262, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258));
        float _1645 = fma(_1266, cbModelParam._m0[32u].z, fma(_1262, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258));
        float _1668 = _1258 + _1017;
        float _1669 = _1262 + _1018;
        float _1670 = _1266 + _1019;
        float _1680 = fma(_1670, cbModelParam._m0[30u].z, fma(_1669, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1668)) - _1637;
        float _1681 = fma(_1670, cbModelParam._m0[31u].z, fma(_1669, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1668)) - _1641;
        float _1682 = fma(_1670, cbModelParam._m0[32u].z, fma(_1669, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1668)) - _1645;
        float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
        float _1699 = ((_1686 * _1680) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1637 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1686 * _1681) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1641 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1686 * _1682) / cbModelParam._m0[35u].z) + ((((((_1645 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1710 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1699, _1700, _1701), 0.0);
        float _1736 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1737 = _1736 * (_1703.x + (-0.5));
        float _1738 = _1736 * (_1703.y + (-0.5));
        float _1739 = _1736 * (_1703.z + (-0.5));
        float _1746 = exp2((_1710.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1710.x + (-0.5));
        float _1748 = _1746 * (_1710.y + (-0.5));
        float _1749 = _1746 * (_1710.z + (-0.5));
        float _1756 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1717.x + (-0.5));
        float _1758 = _1756 * (_1717.y + (-0.5));
        float _1759 = _1756 * (_1717.z + (-0.5));
        float _1766 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1724.x + (-0.5));
        float _1768 = _1766 * (_1724.y + (-0.5));
        float _1769 = _1766 * (_1724.z + (-0.5));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = _1737 * 0.5;
        float _1774 = _1747 * 0.5;
        float _1775 = _1757 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_1017, _1018, _1019), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4665 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4676 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4687 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_1800 + 1.0))) + _1805) * _1770;
        float _1815 = _1738 * 0.5;
        float _1816 = _1748 * 0.5;
        float _1817 = _1758 * 0.5;
        float _1818 = dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817));
        float _1823 = (_1818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1818);
        float _1831 = (dot(vec3(_1017, _1018, _1019), vec3(_1823 * _1815, _1823 * _1816, _1823 * _1817)) + 1.0) * 0.5;
        float _4698 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1840 = sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4709 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _1842 = _1841 * 2.0;
        float _1846 = (1.0 - _1841) / (_1841 + 1.0);
        float _4720 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
        float _1847 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _1856 = ((((1.0 - _1847) * (_1842 + 2.0)) * exp2(log2(isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_1842 + 1.0))) + _1847) * _1771;
        float _1857 = _1739 * 0.5;
        float _1858 = _1749 * 0.5;
        float _1859 = _1759 * 0.5;
        float _1860 = dot(vec3(_1857, _1858, _1859), vec3(_1857, _1858, _1859));
        float _1865 = (_1860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1860);
        float _1873 = (dot(vec3(_1017, _1018, _1019), vec3(_1865 * _1857, _1865 * _1858, _1865 * _1859)) + 1.0) * 0.5;
        float _4731 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1882 = sqrt(((_1858 * _1858) + (_1857 * _1857)) + (_1859 * _1859)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4742 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
        float _1883 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _1884 = _1883 * 2.0;
        float _1888 = (1.0 - _1883) / (_1883 + 1.0);
        float _4753 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1889 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _1898 = ((((1.0 - _1889) * (_1884 + 2.0)) * exp2(log2(isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_1884 + 1.0))) + _1889) * _1772;
        _1906 = _1739;
        _1907 = _1738;
        _1908 = _1737;
        _1909 = _1749;
        _1910 = _1748;
        _1911 = _1747;
        _1912 = _1759;
        _1913 = _1758;
        _1914 = _1757;
        _1915 = _1772;
        _1916 = _1771;
        _1917 = _1770;
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)));
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)));
    }
    else
    {
        _1906 = _1596;
        _1907 = _1596;
        _1908 = _1596;
        _1909 = _1596;
        _1910 = _1596;
        _1911 = _1596;
        _1912 = _1596;
        _1913 = _1596;
        _1914 = _1596;
        _1915 = _1596;
        _1916 = _1596;
        _1917 = _1596;
        _1918 = 0.0;
        _1919 = 0.0;
        _1920 = 0.0;
    }
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1608)) + _1608;
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1609)) + _1609;
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1610)) + _1610;
    float _1953 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1956 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1959 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1930));
    float _1974 = _1202 * 0.5;
    float _1975 = _1203 * 0.5;
    float _1976 = _1204 * 0.5;
    float _1977 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _1980 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _1983 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _2017;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1990 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1595, _1599, _1602, _1605));
        float _1994 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1597, _1600, _1603, _1606));
        float _1998 = dot(vec4(_1974, _1975, _1976, 1.0), vec4(_1598, _1601, _1604, _1607));
        float _2005 = dot(vec4(cbModelParam._m0[39u]), vec4(_1974, _1975, _1976, 1.0));
        _2017 = dot(vec3(isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2005) ? 0.0 : (isnan(0.0) ? _2005 : max(0.0, _2005))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2017 = 1.0;
    }
    float _2028;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2019 = dot(vec4(cbModelParam._m0[40u]), vec4(_1974, _1975, _1976, 1.0));
        _2028 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)), isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2019) ? 0.0 : (isnan(0.0) ? _2019 : max(0.0, _2019))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2028 = 1.0;
    }
    float _2032 = (_2028 * cbModelParam._m0[1u].x) + (_2017 * (1.0 - cbModelParam._m0[1u].x));
    float _2042 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1020);
    float _2043 = isnan(_2042) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2042 : min(cbModelParam._m0[25u].z, _2042));
    float _2123;
    float _2125;
    float _2127;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2090 = fma(_1266, cbModelParam._m0[13u].z, fma(_1262, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1258)) + cbModelParam._m0[13u].w;
        float _2094 = fma(_1266, cbModelParam._m0[14u].z, fma(_1262, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1258)) + cbModelParam._m0[14u].w;
        float _2098 = fma(_1266, cbModelParam._m0[15u].z, fma(_1262, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1258)) + cbModelParam._m0[15u].w;
        float _2101 = fma(_1204, cbModelParam._m0[13u].z, fma(_1203, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1202));
        float _2104 = fma(_1204, cbModelParam._m0[14u].z, fma(_1203, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1202));
        float _2107 = fma(_1204, cbModelParam._m0[15u].z, fma(_1203, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1202));
        float _2135;
        if (_2101 > 0.0)
        {
            _2135 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2135 = frontier_phi_17_15_ladder;
        }
        float _2306;
        if (_2104 > 0.0)
        {
            _2306 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2306 = frontier_phi_26_22_ladder;
        }
        float _2601;
        if (_2107 > 0.0)
        {
            _2601 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2601 = frontier_phi_38_33_ladder;
        }
        float _2603 = isnan(_2306) ? _2135 : (isnan(_2135) ? _2306 : min(_2135, _2306));
        float _2604 = isnan(_2601) ? _2603 : (isnan(_2603) ? _2601 : min(_2603, _2601));
        float _2608 = (_2604 * _2101) + _2090;
        float _2609 = (_2604 * _2104) + _2094;
        float _2610 = (_2604 * _2107) + _2098;
        float _2611 = _2604 * 9.9999997473787516355514526367188e-05;
        float _2613 = (-1.0) - _2611;
        float _2615 = _2611 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2610 > _2615) || ((_2610 < _2613) || ((_2609 > _2615) || ((_2609 < _2613) || ((_2608 < _2613) || (_2608 > _2615))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2755 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2610, cbModelParam._m0[9u].z, fma(_2609, cbModelParam._m0[9u].y, _2608 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2610, cbModelParam._m0[10u].z, fma(_2609, cbModelParam._m0[10u].y, _2608 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2610, cbModelParam._m0[11u].z, fma(_2609, cbModelParam._m0[11u].y, _2608 * cbModelParam._m0[11u].x))), _2043);
            frontier_phi_16_38_ladder = _2755.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2755.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2755.x * cbModelParam._m0[1u].y;
        }
        _2123 = frontier_phi_16_38_ladder_2;
        _2125 = frontier_phi_16_38_ladder_1;
        _2127 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1202, _1203, _1204), _2043);
        _2123 = _2111.x * cbModelParam._m0[1u].y;
        _2125 = _2111.y * cbModelParam._m0[1u].y;
        _2127 = _2111.z * cbModelParam._m0[1u].y;
    }
    float _2131 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1020);
    float _2132 = isnan(_2131) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2131 : min(cbModelParam._m0[25u].w, _2131));
    float _2221;
    float _2223;
    float _2225;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2185 = fma(_1266, cbModelParam._m0[21u].z, fma(_1262, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1258)) + cbModelParam._m0[21u].w;
        float _2189 = fma(_1266, cbModelParam._m0[22u].z, fma(_1262, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1258)) + cbModelParam._m0[22u].w;
        float _2193 = fma(_1266, cbModelParam._m0[23u].z, fma(_1262, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1258)) + cbModelParam._m0[23u].w;
        float _2196 = fma(_1204, cbModelParam._m0[21u].z, fma(_1203, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1202));
        float _2199 = fma(_1204, cbModelParam._m0[22u].z, fma(_1203, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1202));
        float _2202 = fma(_1204, cbModelParam._m0[23u].z, fma(_1203, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1202));
        float _2311;
        if (_2196 > 0.0)
        {
            _2311 = abs((1.0 - _2185) / _2196);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2185 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2311 = frontier_phi_28_24_ladder;
        }
        float _2628;
        if (_2199 > 0.0)
        {
            _2628 = abs((1.0 - _2189) / _2199);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2189 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2628 = frontier_phi_40_35_ladder;
        }
        float _2966;
        if (_2202 > 0.0)
        {
            _2966 = abs((1.0 - _2193) / _2202);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2193 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2966 = frontier_phi_50_47_ladder;
        }
        float _2968 = isnan(_2628) ? _2311 : (isnan(_2311) ? _2628 : min(_2311, _2628));
        float _2969 = isnan(_2966) ? _2968 : (isnan(_2968) ? _2966 : min(_2968, _2966));
        float _2973 = (_2969 * _2196) + _2185;
        float _2974 = (_2969 * _2199) + _2189;
        float _2975 = (_2969 * _2202) + _2193;
        float _2976 = _2969 * 9.9999997473787516355514526367188e-05;
        float _2977 = (-1.0) - _2976;
        float _2979 = _2976 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2975 > _2979) || ((_2975 < _2977) || ((_2974 > _2979) || ((_2974 < _2977) || ((_2973 < _2977) || (_2973 > _2979))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3097 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2975, cbModelParam._m0[17u].z, fma(_2974, cbModelParam._m0[17u].y, _2973 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2975, cbModelParam._m0[18u].z, fma(_2974, cbModelParam._m0[18u].y, _2973 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2975, cbModelParam._m0[19u].z, fma(_2974, cbModelParam._m0[19u].y, _2973 * cbModelParam._m0[19u].x))), _2132);
            frontier_phi_25_50_ladder = _3097.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3097.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3097.x * cbModelParam._m0[1u].z;
        }
        _2221 = frontier_phi_25_50_ladder_2;
        _2223 = frontier_phi_25_50_ladder_1;
        _2225 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2205 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1202, _1203, _1204), _2132);
        _2221 = _2205.x * cbModelParam._m0[1u].z;
        _2223 = _2205.y * cbModelParam._m0[1u].z;
        _2225 = _2205.z * cbModelParam._m0[1u].z;
    }
    float _2238 = (((_1229 * _1178) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2221 - _2123)) + _2123);
    float _2240 = (((_1229 * _1180) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2223 - _2125)) + _2125);
    float _2242 = (((_1229 * _1181) + _1230) * _1194) * ((cbModelParam._m0[1u].w * (_2225 - _2127)) + _2127);
    float _2245 = fma(_2242, cbSceneParam._m0[89u].z, fma(_2240, cbSceneParam._m0[89u].y, _2238 * cbSceneParam._m0[89u].x));
    float _2248 = fma(_2242, cbSceneParam._m0[90u].z, fma(_2240, cbSceneParam._m0[90u].y, _2238 * cbSceneParam._m0[90u].x));
    float _2251 = fma(_2242, cbSceneParam._m0[91u].z, fma(_2240, cbSceneParam._m0[91u].y, _2238 * cbSceneParam._m0[91u].x));
    float _2285 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2289 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2293 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2298 = _2285 / _2297;
    float _2299 = _2289 / _2297;
    float _2300 = _2293 / _2297;
    float _2447;
    float _2448;
    float _2449;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2327 = ((uint(_2300 > cbSceneParam._m0[59u].y) + uint(_2300 > cbSceneParam._m0[59u].x)) + uint(_2300 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2328 = _2327 + 43u;
        uint _2336 = _2327 + 44u;
        uint _2344 = _2327 + 45u;
        uint _2352 = _2327 + 46u;
        float _2363 = fma(_2297, cbSceneParam._m0[_2328].w, fma(_2293, cbSceneParam._m0[_2328].z, fma(_2289, cbSceneParam._m0[_2328].y, _2285 * cbSceneParam._m0[_2328].x)));
        float _2367 = fma(_2297, cbSceneParam._m0[_2336].w, fma(_2293, cbSceneParam._m0[_2336].z, fma(_2289, cbSceneParam._m0[_2336].y, _2285 * cbSceneParam._m0[_2336].x)));
        float _2375 = fma(_2297, cbSceneParam._m0[_2352].w, fma(_2293, cbSceneParam._m0[_2352].z, fma(_2289, cbSceneParam._m0[_2352].y, _2285 * cbSceneParam._m0[_2352].x)));
        float _2380 = cbSceneParam._m0[33u].z * _2375;
        float _2382 = cbSceneParam._m0[33u].w * _2375;
        float _2385 = fma(_2297, cbSceneParam._m0[_2344].w, fma(_2293, cbSceneParam._m0[_2344].z, fma(_2289, cbSceneParam._m0[_2344].y, _2285 * cbSceneParam._m0[_2344].x))) / _2375;
        float _2433 = (cbSceneParam._m0[33u].x - sqrt(((_2299 * _2299) + (_2298 * _2298)) + (_2300 * _2300))) * cbSceneParam._m0[33u].y;
        float _4879 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
        float _2440 = (isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2380 + _2363) / _2375, (_2382 + _2367) / _2375), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2382 + _2363) / _2375, (_2367 - _2380) / _2375), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2363 - _2380) / _2375, (_2367 - _2382) / _2375), _2385), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2363 - _2382) / _2375, (_2380 + _2367) / _2375), _2385), 0.0)).x), vec4(0.25)));
        _2447 = 1.0 - (_2440 * cbSceneParam._m0[34u].x);
        _2448 = 1.0 - (_2440 * cbSceneParam._m0[34u].y);
        _2449 = 1.0 - (_2440 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2447 = 1.0;
        _2448 = 1.0;
        _2449 = 1.0;
    }
    float _2513;
    float _2515;
    float _2517;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2501 = fma(_2297, cbSceneParam._m0[63u].w, fma(_2293, cbSceneParam._m0[63u].z, fma(_2289, cbSceneParam._m0[63u].y, _2285 * cbSceneParam._m0[63u].x)));
        float _2502 = fma(_2297, cbSceneParam._m0[60u].w, fma(_2293, cbSceneParam._m0[60u].z, fma(_2289, cbSceneParam._m0[60u].y, _2285 * cbSceneParam._m0[60u].x))) / _2501;
        float _2503 = fma(_2297, cbSceneParam._m0[61u].w, fma(_2293, cbSceneParam._m0[61u].z, fma(_2289, cbSceneParam._m0[61u].y, _2285 * cbSceneParam._m0[61u].x))) / _2501;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2502 >= cbSceneParam._m0[64u].x) && (_2503 >= cbSceneParam._m0[64u].y)) && (_2502 <= cbSceneParam._m0[64u].z)) && (_2503 <= cbSceneParam._m0[64u].w))
        {
            float _2641 = fma(_2297, cbSceneParam._m0[62u].w, fma(_2293, cbSceneParam._m0[62u].z, fma(_2289, cbSceneParam._m0[62u].y, _2285 * cbSceneParam._m0[62u].x))) / _2501;
            float _2645 = isnan(cbSceneParam._m0[41u].w) ? _2641 : (isnan(_2641) ? cbSceneParam._m0[41u].w : max(_2641, cbSceneParam._m0[41u].w));
            float _2688 = (cbSceneParam._m0[33u].x - sqrt(((_2299 * _2299) + (_2298 * _2298)) + (_2300 * _2300))) * cbSceneParam._m0[33u].y;
            float _4895 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
            float _2695 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2502, cbSceneParam._m0[33u].w + _2503), _2645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2502, _2503 - cbSceneParam._m0[33u].z), _2645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2502 - cbSceneParam._m0[33u].z, _2503 - cbSceneParam._m0[33u].w), _2645), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2502 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2503), _2645), 0.0)).x), vec4(0.25)));
            float _2699 = 1.0 - (_2695 * cbSceneParam._m0[34u].x);
            float _2700 = 1.0 - (_2695 * cbSceneParam._m0[34u].y);
            float _2701 = 1.0 - (_2695 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2701) ? _2449 : (isnan(_2449) ? _2701 : min(_2449, _2701));
            frontier_phi_37_36_ladder_1 = isnan(_2700) ? _2448 : (isnan(_2448) ? _2700 : min(_2448, _2700));
            frontier_phi_37_36_ladder_2 = isnan(_2699) ? _2447 : (isnan(_2447) ? _2699 : min(_2447, _2699));
        }
        else
        {
            frontier_phi_37_36_ladder = _2449;
            frontier_phi_37_36_ladder_1 = _2448;
            frontier_phi_37_36_ladder_2 = _2447;
        }
        _2513 = frontier_phi_37_36_ladder_2;
        _2515 = frontier_phi_37_36_ladder_1;
        _2517 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2513 = _2447;
        _2515 = _2448;
        _2517 = _2449;
    }
    uvec4 _2522 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2524 = _2522.x * 14u;
    uint _2525 = _2524 + 13u;
    float _2532 = _1194 + (-1.0);
    float _2537 = (cbLight._m0[_2525].x * _2532) + 1.0;
    float _2538 = (cbLight._m0[_2525].y * _2532) + 1.0;
    float _2539 = (cbLight._m0[_2525].z * _2532) + 1.0;
    float _2540 = (cbLight._m0[_2525].w * _2532) + 1.0;
    uint _2541 = _2524 + 5u;
    float _2547 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
    uint _2551 = _2524 + 4u;
    float _2560 = isnan(1.0) ? _2537 : (isnan(_2537) ? 1.0 : min(_2537, 1.0));
    uint _2564 = _2524 | 1u;
    float _2575 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_1017, _1018, _1019));
    float _2578 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_1017, _1018, _1019));
    float _4931 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _4942 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2583 = (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * 0.3183098733425140380859375;
    float _2585 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * 0.3183098733425140380859375;
    float _2592 = ((cbLight._m0[_2541].x * _2547) * _2585) + (((cbLight._m0[_2551].x * _2513) * _2560) * _2583);
    float _2593 = ((_2547 * cbLight._m0[_2541].y) * _2585) + (((cbLight._m0[_2551].y * _2515) * _2560) * _2583);
    float _2594 = ((_2547 * cbLight._m0[_2541].z) * _2585) + (((cbLight._m0[_2551].z * _2517) * _2560) * _2583);
    uvec4 _2598 = floatBitsToUint(cbLight._m0[_2524 + 12u]);
    bool _2600 = _2598.x == 0u;
    float _2702;
    float _2704;
    float _2706;
    if (_2600)
    {
        _2702 = _2592;
        _2704 = _2593;
        _2706 = _2594;
    }
    else
    {
        uint _2710 = _2524 + 6u;
        float _2726 = (dot(vec3(cbLight._m0[_2524 + 2u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2727 = _2726 * _2726;
        float _4953 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2728 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
        float _2729 = isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0));
        _2702 = (((cbLight._m0[_2710].x * 0.3183098733425140380859375) * _2728) * _2729) + _2592;
        _2704 = (((cbLight._m0[_2710].y * 0.3183098733425140380859375) * _2728) * _2729) + _2593;
        _2706 = (((cbLight._m0[_2710].z * 0.3183098733425140380859375) * _2728) * _2729) + _2594;
    }
    bool _2709 = _2598.y == 0u;
    float _2764;
    float _2766;
    float _2768;
    if (_2709)
    {
        _2764 = _2702;
        _2766 = _2704;
        _2768 = _2706;
    }
    else
    {
        uint _2937 = _2524 + 7u;
        float _2953 = (dot(vec3(cbLight._m0[_2524 + 3u].xyz), vec3(_1017, _1018, _1019)) * 0.5) + 0.5;
        float _2954 = _2953 * _2953;
        float _4969 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2955 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _2956 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _2764 = (((cbLight._m0[_2937].x * 0.3183098733425140380859375) * _2955) * _2956) + _2702;
        _2766 = (((cbLight._m0[_2937].y * 0.3183098733425140380859375) * _2955) * _2956) + _2704;
        _2768 = (((cbLight._m0[_2937].z * 0.3183098733425140380859375) * _2955) * _2956) + _2706;
    }
    uint _2771 = _2524 + 8u;
    float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2524].w)) * _1020) * 0.949999988079071044921875);
    float _2785 = _2784 * _2784;
    float _2786 = cbLight._m0[_2524].x + _1096;
    float _2787 = cbLight._m0[_2524].y + _1097;
    float _2788 = cbLight._m0[_2524].z + _1098;
    float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
    float _2793 = _2792 * _2786;
    float _2794 = _2792 * _2787;
    float _2795 = _2792 * _2788;
    float _2796 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2524].xyz));
    float _4985 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2799 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
    float _4996 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _2800 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
    float _2801 = dot(vec3(_1017, _1018, _1019), vec3(_2793, _2794, _2795));
    float _5007 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
    float _2804 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
    float _2805 = dot(vec3(cbLight._m0[_2524].xyz), vec3(_2793, _2794, _2795));
    float _5018 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
    float _2809 = _2785 * _2785;
    float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
    float _2821 = exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0);
    float _2822 = 0.959999978542327880859375 - _1175;
    float _2824 = 0.959999978542327880859375 - _1176;
    float _2825 = 0.959999978542327880859375 - _1177;
    float _2832 = 1.0 - _2785;
    float _2843 = (0.5 / (((_2800 * ((_2799 * _2832) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2800 * _2832) + _2785) * _2799))) * _2799;
    float _5029 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2845 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
    uint _2859 = _2524 + 9u;
    float _2870 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2564].w)) * _1020) * 0.949999988079071044921875);
    float _2871 = _2870 * _2870;
    float _2872 = cbLight._m0[_2564].x + _1096;
    float _2873 = cbLight._m0[_2564].y + _1097;
    float _2874 = cbLight._m0[_2564].z + _1098;
    float _2878 = inversesqrt(dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874)));
    float _2879 = _2878 * _2872;
    float _2880 = _2878 * _2873;
    float _2881 = _2878 * _2874;
    float _2882 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2564].xyz));
    float _5040 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
    float _2885 = isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0));
    float _2886 = dot(vec3(_1017, _1018, _1019), vec3(_2879, _2880, _2881));
    float _5051 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
    float _2889 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
    float _2890 = dot(vec3(cbLight._m0[_2564].xyz), vec3(_2879, _2880, _2881));
    float _5062 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
    float _2894 = _2871 * _2871;
    float _2898 = ((_2889 * _2889) * (_2894 + (-1.0))) + 1.0;
    float _2905 = exp2(log2(1.0 - (isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0)))) * 5.0);
    float _2912 = 1.0 - _2871;
    float _2922 = (0.5 / (((_2800 * ((_2885 * _2912) + _2871)) + 9.9999999392252902907785028219223e-09) + (((_2800 * _2912) + _2871) * _2885))) * _2885;
    float _5073 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
    float _2924 = (isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_2894 / ((_2898 * _2898) * 3.141590118408203125));
    float _2934 = (((((_2905 * _2822) + _1178) * cbLight._m0[_2859].x) * _2924) * _2547) + ((((cbLight._m0[_2771].x * _2513) * ((_2821 * _2822) + _1178)) * _2845) * _2560);
    float _2935 = (((((_2905 * _2824) + _1180) * cbLight._m0[_2859].y) * _2924) * _2547) + ((((cbLight._m0[_2771].y * _2515) * ((_2821 * _2824) + _1180)) * _2845) * _2560);
    float _2936 = (((((_2905 * _2825) + _1181) * cbLight._m0[_2859].z) * _2924) * _2547) + ((((cbLight._m0[_2771].z * _2517) * ((_2821 * _2825) + _1181)) * _2845) * _2560);
    float _2992;
    float _2994;
    float _2996;
    if (_2600)
    {
        _2992 = _2934;
        _2994 = _2935;
        _2996 = _2936;
    }
    else
    {
        uint _2998 = _2524 + 2u;
        uint _3002 = _2524 + 10u;
        float _3016 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2998].w)) * _1020) * 0.949999988079071044921875);
        float _3017 = _3016 * _3016;
        float _3018 = cbLight._m0[_2998].x + _1096;
        float _3019 = cbLight._m0[_2998].y + _1097;
        float _3020 = cbLight._m0[_2998].z + _1098;
        float _3024 = inversesqrt(dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020)));
        float _3025 = _3024 * _3018;
        float _3026 = _3024 * _3019;
        float _3027 = _3024 * _3020;
        float _3028 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_2998].xyz));
        float _5084 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
        float _3032 = dot(vec3(_1017, _1018, _1019), vec3(_3025, _3026, _3027));
        float _5095 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3035 = isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0));
        float _3036 = dot(vec3(cbLight._m0[_2998].xyz), vec3(_3025, _3026, _3027));
        float _5106 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
        float _3040 = _3017 * _3017;
        float _3044 = ((_3035 * _3035) * (_3040 + (-1.0))) + 1.0;
        float _3051 = exp2(log2(1.0 - (isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0)))) * 5.0);
        float _3058 = 1.0 - _3017;
        float _3068 = (0.5 / (((_2800 * ((_3031 * _3058) + _3017)) + 9.9999999392252902907785028219223e-09) + (((_2800 * _3058) + _3017) * _3031))) * _3031;
        float _5117 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3070 = (isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3040 / ((_3044 * _3044) * 3.141590118408203125));
        float _3071 = isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0));
        _2992 = (((((_3051 * _2822) + _1178) * cbLight._m0[_3002].x) * _3070) * _3071) + _2934;
        _2994 = (((((_3051 * _2824) + _1180) * cbLight._m0[_3002].y) * _3070) * _3071) + _2935;
        _2996 = (((((_3051 * _2825) + _1181) * cbLight._m0[_3002].z) * _3070) * _3071) + _2936;
    }
    float _3102;
    float _3104;
    float _3106;
    if (_2709)
    {
        _3102 = _2992;
        _3104 = _2994;
        _3106 = _2996;
    }
    else
    {
        uint _3113 = _2524 + 3u;
        uint _3117 = _2524 + 11u;
        float _3131 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3113].w)) * _1020) * 0.949999988079071044921875);
        float _3132 = _3131 * _3131;
        float _3133 = cbLight._m0[_3113].x + _1096;
        float _3134 = cbLight._m0[_3113].y + _1097;
        float _3135 = cbLight._m0[_3113].z + _1098;
        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
        float _3140 = _3139 * _3133;
        float _3141 = _3139 * _3134;
        float _3142 = _3139 * _3135;
        float _3143 = dot(vec3(_1017, _1018, _1019), vec3(cbLight._m0[_3113].xyz));
        float _5133 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        float _3146 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
        float _3147 = dot(vec3(_1017, _1018, _1019), vec3(_3140, _3141, _3142));
        float _5144 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
        float _3150 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
        float _3151 = dot(vec3(cbLight._m0[_3113].xyz), vec3(_3140, _3141, _3142));
        float _5155 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
        float _3155 = _3132 * _3132;
        float _3159 = ((_3150 * _3150) * (_3155 + (-1.0))) + 1.0;
        float _3166 = exp2(log2(1.0 - (isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0)))) * 5.0);
        float _3173 = 1.0 - _3132;
        float _3183 = (0.5 / (((_2800 * ((_3146 * _3173) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_2800 * _3173) + _3132) * _3146))) * _3146;
        float _5166 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
        float _3185 = (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0))) * (_3155 / ((_3159 * _3159) * 3.141590118408203125));
        float _3186 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _3102 = (((((_3166 * _2822) + _1178) * cbLight._m0[_3117].x) * _3185) * _3186) + _2992;
        _3104 = (((((_3166 * _2824) + _1180) * cbLight._m0[_3117].y) * _3185) * _3186) + _2994;
        _3106 = (((((_3166 * _2825) + _1181) * cbLight._m0[_3117].z) * _3185) * _3186) + _2996;
    }
    float _3252;
    float _3254;
    float _3256;
    float _3258;
    float _3260;
    float _3262;
    if (_2522.y == 0u)
    {
        uvec4 _3207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3208 = _3207.x;
        uint _3219 = uint((float(_3207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1117) / _3208))) + floor(float(uint(cbSceneParam._m0[85u].x * _1116) / _3208)));
        float _3229 = (log2(_2300 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3230 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
        uint _3233 = uint(isnan(14.0) ? _3230 : (isnan(_3230) ? 14.0 : min(_3230, 14.0)));
        uvec4 _3238 = texelFetch(g_lightClusterGridBuffer, int(((_3233 << 2u) + (_3219 << 6u)) >> 2u));
        uint _3239 = _3238.x;
        uint _3240 = _3207.z;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        if (((((1u << ((_3240 >> 4u) & 15u)) + 4294967295u) & _3239) == 0u) || ((_3240 & 240u) == 0u))
        {
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
            _3327 = 0.0;
            _3329 = 0.0;
        }
        else
        {
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3328;
            float _3330;
            float _3472 = 0.0;
            float _3473 = 0.0;
            float _3474 = 0.0;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            uint _3478 = 0u;
            uint _3487;
            bool _3488;
            for (;;)
            {
                _3487 = texelFetch(g_lightClassification, int((((_3233 << 5u) + (_3219 << 9u)) + (_3478 << 2u)) >> 2u)).x;
                _3488 = _3487 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3488)
                {
                    frontier_phi_71_pred = _3477;
                    frontier_phi_71_pred_1 = _3476;
                    frontier_phi_71_pred_2 = _3475;
                    frontier_phi_71_pred_3 = _3474;
                    frontier_phi_71_pred_4 = _3473;
                    frontier_phi_71_pred_5 = _3472;
                }
                else
                {
                    float _3617;
                    float _3618;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    uint _3623;
                    _3617 = _3472;
                    _3618 = _3473;
                    _3619 = _3474;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3487;
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    for (;;)
                    {
                        uint _3627 = uint(findLSB(_3623)) + (_3478 << 5u);
                        uint _3624 = (_3623 + 4294967295u) & _3623;
                        uint _3629 = _3627 * 48u;
                        vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3629)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3629 + 3u)).x));
                        uint _3649 = (_3627 * 48u) + 4u;
                        vec4 _3662 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3649)).x, texelFetch(g_PointLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3649 + 3u)).x));
                        uint _3668 = (_3627 * 48u) + 8u;
                        vec3 _3679 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3668)).x, texelFetch(g_PointLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3668 + 2u)).x));
                        float _3683 = _3643.x - _2298;
                        float _3684 = _3643.y - _2299;
                        float _3685 = _3643.z - _2300;
                        float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                        float _3689 = inversesqrt(_3686);
                        float _3690 = _3689 * _3683;
                        float _3691 = _3689 * _3684;
                        float _3692 = _3689 * _3685;
                        float _3693 = dot(vec3(_1135, _1138, _1141), vec3(_3690, _3691, _3692));
                        float _3698 = 1.0 - (_3686 * _3643.w);
                        float _5192 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3699 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                        float _3700 = sqrt(_3686) * _3662.w;
                        float _3703 = 1.39999997615814208984375 / (_3700 + 1.39999997615814208984375);
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3693) + _3704;
                        float _3710 = _3700 * _3700;
                        float _3714 = ((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3699) / ((_3710 * 0.699999988079071044921875) + 1.0);
                        float _3718 = (-0.0) - _2298;
                        float _3719 = (-0.0) - _2299;
                        float _3720 = (-0.0) - _2300;
                        float _3724 = inversesqrt(dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720)));
                        float _3725 = _3724 * _3718;
                        float _3726 = _3724 * _3719;
                        float _3727 = _3724 * _3720;
                        float _3734 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                        float _3735 = 1.0 - _1210;
                        float _3742 = sqrt(1.0 - ((1.0 - (_3735 * _3735)) * (1.0 - (_3734 * _3734))));
                        float _3743 = _3742 * _3742;
                        float _3744 = _3743 * _3743;
                        float _3745 = _3725 + _3690;
                        float _3746 = _3726 + _3691;
                        float _3747 = _3727 + _3692;
                        float _3751 = inversesqrt(dot(vec3(_3745, _3746, _3747), vec3(_3745, _3746, _3747)));
                        float _3755 = dot(vec3(_1135, _1138, _1141), vec3(_3725, _3726, _3727));
                        float _5208 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                        float _3758 = isnan(1.0) ? _5208 : (isnan(_5208) ? 1.0 : min(_5208, 1.0));
                        float _3759 = dot(vec3(_1135, _1138, _1141), vec3(_3751 * _3745, _3751 * _3746, _3751 * _3747));
                        float _5219 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                        float _3762 = isnan(1.0) ? _5219 : (isnan(_5219) ? 1.0 : min(_5219, 1.0));
                        float _3766 = ((_3762 * _3762) * (_3744 + (-1.0))) + 1.0;
                        float _3767 = _3703 * _3743;
                        float _3768 = _3767 * _3767;
                        float _3771 = ((1.0 - _3768) * _3693) + _3768;
                        float _5230 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                        float _3772 = isnan(1.0) ? _5230 : (isnan(_5230) ? 1.0 : min(_5230, 1.0));
                        float _3773 = 1.0 - _3743;
                        float _3783 = (0.5 / (((_3772 * ((_3758 * _3773) + _3743)) + 9.9999999392252902907785028219223e-09) + (((_3772 * _3773) + _3743) * _3758))) * _3772;
                        float _5241 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3794 = (((_3744 * 3.1415927410125732421875) * (isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0)))) / ((_3766 * _3766) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125))) * _3699;
                        _3547 = (_3714 * _3662.x) + _3620;
                        _3548 = (_3714 * _3662.y) + _3621;
                        _3549 = (_3714 * _3662.z) + _3622;
                        _3544 = (_3794 * _3679.x) + _3617;
                        _3545 = (_3794 * _3679.y) + _3618;
                        _3546 = (_3794 * _3679.z) + _3619;
                        if (_3624 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3617 = _3544;
                            _3618 = _3545;
                            _3619 = _3546;
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3624;
                        }
                    }
                    frontier_phi_71_pred = _3549;
                    frontier_phi_71_pred_1 = _3548;
                    frontier_phi_71_pred_2 = _3547;
                    frontier_phi_71_pred_3 = _3546;
                    frontier_phi_71_pred_4 = _3545;
                    frontier_phi_71_pred_5 = _3544;
                }
                _3330 = frontier_phi_71_pred;
                _3328 = frontier_phi_71_pred_1;
                _3326 = frontier_phi_71_pred_2;
                _3324 = frontier_phi_71_pred_3;
                _3322 = frontier_phi_71_pred_4;
                _3320 = frontier_phi_71_pred_5;
                uint _3479 = _3478 + 1u;
                if (_3479 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3472 = _3320;
                    _3473 = _3322;
                    _3474 = _3324;
                    _3475 = _3326;
                    _3476 = _3328;
                    _3477 = _3330;
                    _3478 = _3479;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
            _3327 = _3328;
            _3329 = _3330;
        }
        uvec4 _3333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3334 = _3333.z;
        uint _3336 = (_3334 >> 8u) & 15u;
        float _3440;
        float _3442;
        float _3444;
        float _3446;
        float _3448;
        float _3450;
        if (((4294967295u << _3336) & _3239) == 0u)
        {
            _3440 = _3319;
            _3442 = _3321;
            _3444 = _3323;
            _3446 = _3325;
            _3448 = _3327;
            _3450 = _3329;
        }
        else
        {
            float _3465 = inversesqrt(dot(vec3(_2298, _2299, _2300), vec3(_2298, _2299, _2300)));
            float _3466 = _3465 * _2298;
            float _3467 = _3465 * _2299;
            float _3468 = _3465 * _2300;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3336 < ((_3334 >> 12u) & 15u))
            {
                float _3441;
                float _3443;
                float _3445;
                float _3447;
                float _3449;
                float _3451;
                float _3600 = _3319;
                float _3601 = _3321;
                float _3602 = _3323;
                float _3603 = _3325;
                float _3604 = _3327;
                float _3605 = _3329;
                uint _3606 = _3336;
                uint _3615;
                bool _3616;
                for (;;)
                {
                    _3615 = texelFetch(g_lightClassification, int((((_3233 << 5u) + (_3219 << 9u)) + (_3606 << 2u)) >> 2u)).x;
                    _3616 = _3615 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3616)
                    {
                        frontier_phi_82_pred = _3605;
                        frontier_phi_82_pred_1 = _3604;
                        frontier_phi_82_pred_2 = _3603;
                        frontier_phi_82_pred_3 = _3602;
                        frontier_phi_82_pred_4 = _3601;
                        frontier_phi_82_pred_5 = _3600;
                    }
                    else
                    {
                        float _3808;
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _4101;
                        float _4102;
                        float _4103;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _3821 = _3600;
                        float _3822 = _3601;
                        float _3823 = _3602;
                        float _3824 = _3603;
                        float _3825 = _3604;
                        float _3826 = _3605;
                        uint _3827 = _3615;
                        uint _3828;
                        vec4 _3853;
                        float _3854;
                        vec4 _3869;
                        vec3 _3881;
                        vec4 _3896;
                        vec4 _3911;
                        float _3957;
                        bool _3958;
                        for (;;)
                        {
                            uint _3838 = ((_3606 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3827));
                            _3828 = (_3827 + 4294967295u) & _3827;
                            uint _3840 = _3838 * 40u;
                            _3853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3840 + 3u)).x));
                            _3854 = _3853.w;
                            uint _3856 = (_3838 * 40u) + 4u;
                            _3869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3856 + 3u)).x));
                            uint _3871 = (_3838 * 40u) + 8u;
                            _3881 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x));
                            uint _3883 = (_3838 * 40u) + 16u;
                            _3896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 3u)).x));
                            uint _3898 = (_3838 * 40u) + 20u;
                            _3911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3898 + 3u)).x));
                            uint _3913 = (_3838 * 40u) + 24u;
                            vec4 _3926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3913 + 3u)).x));
                            uint _3932 = (_3838 * 40u) + 28u;
                            vec4 _3945 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3932)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3932 + 3u)).x));
                            _3957 = fma(_2300, _3945.z, fma(_2299, _3945.y, _3945.x * _2298)) + _3945.w;
                            _3958 = !((fma(_2300, _3926.z, fma(_2299, _3926.y, _3926.x * _2298)) + _3926.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3958)
                            {
                                float _3985 = _3853.x - _2298;
                                float _3986 = _3853.y - _2299;
                                float _3987 = _3853.z - _2300;
                                float _3988 = dot(vec3(_3985, _3986, _3987), vec3(_3985, _3986, _3987));
                                float _3991 = inversesqrt(_3988);
                                float _3992 = _3991 * _3985;
                                float _3993 = _3991 * _3986;
                                float _3994 = _3991 * _3987;
                                float _3998 = 1.0 - (_3988 / (_3854 * _3854));
                                float _5252 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0));
                                float _4003 = sqrt(_3988) * _3869.w;
                                float _4005 = 1.39999997615814208984375 / (_4003 + 1.39999997615814208984375);
                                float _4006 = _4005 * _4005;
                                float _4009 = ((1.0 - _4006) * dot(vec3(_3992, _3993, _3994), vec3(_1135, _1138, _1141))) + _4006;
                                float _4012 = _4003 * _4003;
                                float _4016 = (fma(_2300, _3896.z, fma(_2299, _3896.y, _3896.x * _2298)) + _3896.w) / _3957;
                                float _4017 = (fma(_2300, _3911.z, fma(_2299, _3911.y, _3911.x * _2298)) + _3911.w) / _3957;
                                float _4021 = 1.0 - dot(vec2(_4016, _4017), vec2(_4016, _4017));
                                float _5268 = isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0));
                                float _4022 = isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0));
                                float _4023 = _4022 * (((isnan(0.0) ? _4009 : (isnan(_4009) ? 0.0 : max(_4009, 0.0))) * _3999) / ((_4012 * 0.699999988079071044921875) + 1.0));
                                float _4035 = exp2(log2(1.0 / ((_4012 * 3.5) + 5.0)) * 0.25);
                                float _4036 = 1.0 - _1210;
                                float _4043 = sqrt(1.0 - ((1.0 - (_4036 * _4036)) * (1.0 - (_4035 * _4035))));
                                float _4044 = _4043 * _4043;
                                float _4045 = _4044 * _4044;
                                float _4046 = _3992 - _3466;
                                float _4047 = _3993 - _3467;
                                float _4048 = _3994 - _3468;
                                float _4052 = inversesqrt(dot(vec3(_4046, _4047, _4048), vec3(_4046, _4047, _4048)));
                                float _4056 = dot(vec3(_1135, _1138, _1141), vec3((-0.0) - _3466, (-0.0) - _3467, (-0.0) - _3468));
                                float _5279 = isnan(0.0) ? _4056 : (isnan(_4056) ? 0.0 : max(_4056, 0.0));
                                float _4059 = isnan(1.0) ? _5279 : (isnan(_5279) ? 1.0 : min(_5279, 1.0));
                                float _4060 = dot(vec3(_1135, _1138, _1141), vec3(_4052 * _4046, _4052 * _4047, _4052 * _4048));
                                float _5290 = isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0));
                                float _4063 = isnan(1.0) ? _5290 : (isnan(_5290) ? 1.0 : min(_5290, 1.0));
                                float _4067 = ((_4063 * _4063) * (_4045 + (-1.0))) + 1.0;
                                float _4068 = _4005 * _4044;
                                float _4069 = _4068 * _4068;
                                float _4075 = ((1.0 - _4069) * dot(vec3(_1135, _1138, _1141), vec3(_3992, _3993, _3994))) + _4069;
                                float _5301 = isnan(0.0) ? _4075 : (isnan(_4075) ? 0.0 : max(_4075, 0.0));
                                float _4076 = isnan(1.0) ? _5301 : (isnan(_5301) ? 1.0 : min(_5301, 1.0));
                                float _4077 = 1.0 - _4044;
                                float _4087 = (0.5 / (((_4076 * ((_4059 * _4077) + _4044)) + 9.9999999392252902907785028219223e-09) + (((_4076 * _4077) + _4044) * _4059))) * _4076;
                                float _5312 = isnan(0.0) ? _4087 : (isnan(_4087) ? 0.0 : max(_4087, 0.0));
                                float _4097 = (_4022 * _3999) * (((_4045 * 3.1415927410125732421875) * (isnan(1.0) ? _5312 : (isnan(_5312) ? 1.0 : min(_5312, 1.0)))) / ((_4067 * _4067) * ((_4012 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4023 * _3869.z;
                                frontier_phi_88_pred_1 = _4023 * _3869.y;
                                frontier_phi_88_pred_2 = _4023 * _3869.x;
                                frontier_phi_88_pred_3 = _4097 * _3881.z;
                                frontier_phi_88_pred_4 = _4097 * _3881.y;
                                frontier_phi_88_pred_5 = _4097 * _3881.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4106 = frontier_phi_88_pred;
                            _4105 = frontier_phi_88_pred_1;
                            _4104 = frontier_phi_88_pred_2;
                            _4103 = frontier_phi_88_pred_3;
                            _4102 = frontier_phi_88_pred_4;
                            _4101 = frontier_phi_88_pred_5;
                            _3811 = _4104 + _3824;
                            _3812 = _4105 + _3825;
                            _3813 = _4106 + _3826;
                            _3808 = _4101 + _3821;
                            _3809 = _4102 + _3822;
                            _3810 = _4103 + _3823;
                            if (_3828 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3821 = _3808;
                                _3822 = _3809;
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3828;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3813;
                        frontier_phi_82_pred_1 = _3812;
                        frontier_phi_82_pred_2 = _3811;
                        frontier_phi_82_pred_3 = _3810;
                        frontier_phi_82_pred_4 = _3809;
                        frontier_phi_82_pred_5 = _3808;
                    }
                    _3451 = frontier_phi_82_pred;
                    _3449 = frontier_phi_82_pred_1;
                    _3447 = frontier_phi_82_pred_2;
                    _3445 = frontier_phi_82_pred_3;
                    _3443 = frontier_phi_82_pred_4;
                    _3441 = frontier_phi_82_pred_5;
                    uint _3607 = _3606 + 1u;
                    if (_3607 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3600 = _3441;
                        _3601 = _3443;
                        _3602 = _3445;
                        _3603 = _3447;
                        _3604 = _3449;
                        _3605 = _3451;
                        _3606 = _3607;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3447;
                frontier_phi_63_64_ladder_1 = _3451;
                frontier_phi_63_64_ladder_2 = _3449;
                frontier_phi_63_64_ladder_3 = _3445;
                frontier_phi_63_64_ladder_4 = _3443;
                frontier_phi_63_64_ladder_5 = _3441;
            }
            else
            {
                frontier_phi_63_64_ladder = _3325;
                frontier_phi_63_64_ladder_1 = _3329;
                frontier_phi_63_64_ladder_2 = _3327;
                frontier_phi_63_64_ladder_3 = _3323;
                frontier_phi_63_64_ladder_4 = _3321;
                frontier_phi_63_64_ladder_5 = _3319;
            }
            _3440 = frontier_phi_63_64_ladder_5;
            _3442 = frontier_phi_63_64_ladder_4;
            _3444 = frontier_phi_63_64_ladder_3;
            _3446 = frontier_phi_63_64_ladder;
            _3448 = frontier_phi_63_64_ladder_2;
            _3450 = frontier_phi_63_64_ladder_1;
        }
        float _3455 = isnan(1.0) ? _1194 : (isnan(_1194) ? 1.0 : min(_1194, 1.0));
        _3252 = (_3455 * _3446) + _2764;
        _3254 = (_3455 * _3448) + _2766;
        _3256 = (_3455 * _3450) + _2768;
        _3258 = ((_3440 * _1178) * _3455) + _3102;
        _3260 = ((_3442 * _1180) * _3455) + _3104;
        _3262 = ((_3444 * _1181) * _3455) + _3106;
    }
    else
    {
        _3252 = _2764;
        _3254 = _2766;
        _3256 = _2768;
        _3258 = _3102;
        _3260 = _3104;
        _3262 = _3106;
    }
    float _5328 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _5339 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _5350 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _3279 = ((isnan(1.0) ? _5328 : (isnan(_5328) ? 1.0 : min(_5328, 1.0))) * (_3252 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1194))) + ((_3258 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    float _3280 = ((isnan(1.0) ? _5339 : (isnan(_5339) ? 1.0 : min(_5339, 1.0))) * (_3254 + ((isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0))) * _1194))) + ((_3260 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    float _3281 = ((isnan(1.0) ? _5350 : (isnan(_5350) ? 1.0 : min(_5350, 1.0))) * (_3256 + ((isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))) * _1194))) + ((_3262 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2032)) * cbPerFrame._m0[3u].x);
    uint _3282 = _299 + 6u;
    float _3290 = _1116 / cbSceneParam._m0[86u].x;
    float _3291 = _1117 / cbSceneParam._m0[86u].y;
    vec4 _3305 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3290, _3291, (log2((isnan(cbSceneParam._m0[77u].w) ? _1039 : (isnan(_1039) ? cbSceneParam._m0[77u].w : min(_1039, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3307 = _3305.x;
    float _3308 = _3305.y;
    float _3309 = _3305.z;
    float _3310 = _3305.w;
    float _3382;
    float _3384;
    float _3386;
    float _3388;
    if (_1039 > cbSceneParam._m0[78u].w)
    {
        float _3344 = isnan(_1039) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1039 : min(cbSceneParam._m0[80u].w, _1039));
        float _3345 = _3344 / _1039;
        float _3356 = _3345 * _1089;
        float _3357 = _1090 * _3345;
        float _3358 = (-0.0) - _3357;
        float _3360 = _3345 * _1091;
        float _3362 = (cbSceneParam._m0[77u].w * _3358) / _3344;
        float _3363 = _3362 + cbSceneParam._m0[79u].w;
        float _3364 = cbSceneParam._m0[79u].w - _3357;
        float _3370 = sqrt(((_3356 * _3356) + (_3357 * _3357)) + (_3360 * _3360));
        float _3373 = (1.0 - (cbSceneParam._m0[77u].w / _3344)) * _3370;
        float _3378 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3380 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3557;
        if (abs((_3358 - _3362) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3557 = ((((_3363 > 0.0) ? exp2(_3378 * _3363) : (2.0 - exp2(_3380 * _3363))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3373;
        }
        else
        {
            float _3501 = 1.0 / cbSceneParam._m0[80u].x;
            float _3502 = isnan(_3364) ? _3363 : (isnan(_3363) ? _3364 : max(_3363, _3364));
            float _3503 = isnan(_3364) ? _3363 : (isnan(_3363) ? _3364 : min(_3363, _3364));
            float _3512 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : min(_3502, 0.0));
            float _3513 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : min(_3503, 0.0));
            _3557 = ((abs(_3370 / _3358) * cbSceneParam._m0[80u].y) * ((((_3512 - _3513) * 2.0) - ((exp2(_3378 * (isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0)))) - exp2(_3378 * (isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0))))) * _3501)) - ((exp2(_3380 * _3512) - exp2(_3380 * _3513)) * _3501))) + (_3373 * cbSceneParam._m0[80u].z);
        }
        vec4 _3559 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3290, _3291, 1.0), 0.0);
        float _3568 = exp2((_3557 * (-1.44269502162933349609375)) * (1.0 - _3559.w));
        float _3569 = log2(_3568);
        float _3585 = log2(_3310);
        _3382 = (exp2(_3585 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3569 * cbSceneParam._m0[78u].x)) * _3559.x) / cbSceneParam._m0[78u].x)) + _3307;
        _3384 = (exp2(_3585 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3569 * cbSceneParam._m0[78u].y)) * _3559.y) / cbSceneParam._m0[78u].y)) + _3308;
        _3386 = (exp2(_3585 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3569 * cbSceneParam._m0[78u].z)) * _3559.z) / cbSceneParam._m0[78u].z)) + _3309;
        _3388 = _3568 * _3310;
    }
    else
    {
        _3382 = _3307;
        _3384 = _3308;
        _3386 = _3309;
        _3388 = _3310;
    }
    bool _3595;
    vec4 _3398;
    vec4 _3420;
    float _3422;
    float _3426;
    float _3427;
    float _3428;
    float _3429;
    bool _3439;
    for (;;)
    {
        _3398 = cbMatDynParam._m0[0u];
        float _3400 = roundEven(_3398.y);
        bool _3401 = _3400 == 3.0;
        float _3402 = log2(_3388);
        float _3409 = exp2(_3402 * cbSceneParam._m0[78u].x) * _3279;
        float _3410 = exp2(_3402 * cbSceneParam._m0[78u].y) * _3280;
        float _3411 = exp2(_3402 * cbSceneParam._m0[78u].z) * _3281;
        float _3418 = _1105 + (-0.5);
        _3420 = cbMtdParam._m0[1u];
        _3422 = _3420.y * _3418;
        float _3425 = (_3400 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3426 = _3425 * (_3401 ? _3409 : (_3409 + (cbSceneParam._m0[72u].w * _3382)));
        _3427 = _3425 * (_3401 ? _3410 : (_3410 + (cbSceneParam._m0[72u].w * _3384)));
        _3428 = _3425 * (_3401 ? _3411 : (_3411 + (cbSceneParam._m0[72u].w * _3386)));
        _3429 = _3418 * 0.999000012874603271484375;
        _3439 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3439)
        {
            if ((cbInstanceData._m0[_299 + 7u].x + _3429) < 0.5)
            {
                _3595 = true;
                break;
            }
        }
        uint _3536 = _1154 + uint(_3398.w);
        if ((cbInstanceData._m0[_3536].w < 1.0) && ((cbInstanceData._m0[_3536].w + _3429) < 0.5))
        {
            _3595 = true;
            break;
        }
        if ((_3422 + 1.0) < _3420.x)
        {
            _3595 = true;
            break;
        }
        _3595 = false;
        break;
    }
    float _3799;
    if (_3595)
    {
        discard_state = true;
        _3799 = 0.0;
    }
    else
    {
        _3799 = cbInstanceData._m0[_3282].w;
    }
    SV_Target.x = _3426;
    SV_Target.y = _3427;
    SV_Target.z = _3428;
    SV_Target.w = _3799;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3282].w;
    discard_exit();
}


