#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1363;
float _4027;
float _4028;
float _4029;
float _4030;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4039 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4050 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4061 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _365 = _360.x * cbMtdParam._m0[11u].x;
    float _366 = _360.y * cbMtdParam._m0[11u].y;
    float _367 = _360.z * cbMtdParam._m0[11u].z;
    vec4 _386 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4072 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _476 = (_334.x * cbMtdParam._m0[9u].x) * ((_466 * ((_386.x * cbMtdParam._m0[12u].x) - _365)) + _365);
    float _477 = (_334.y * cbMtdParam._m0[9u].y) * ((_466 * ((_386.y * cbMtdParam._m0[12u].y) - _366)) + _366);
    float _478 = (_334.z * cbMtdParam._m0[9u].z) * ((_466 * ((_386.z * cbMtdParam._m0[12u].z) - _367)) + _367);
    float _482 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _476;
    float _485 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _477;
    float _488 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _478;
    float _496 = (((_476 - _482) * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) + _482) * 4.55000019073486328125;
    float _498 = (((_477 - _485) * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) + _485) * 4.55000019073486328125;
    float _500 = (((_478 - _488) * (isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0)))) + _488) * 4.55000019073486328125;
    vec4 _518 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _564 = _560.z;
    float _573 = ((_543.z - _564) * _466) + _564;
    float _576 = ((((_543.x - _562) * _466) + _562) * 2.0) + (-1.0);
    float _577 = ((((_543.y - _563) * _466) + _563) * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _4083 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))));
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _626 = _624.x;
    float _627 = 1.0 - _626;
    float _643 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_626 - _627) * cbMtdParam._m0[24u].z) + _627) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4094 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _651 = (_644 * (cbMtdParam._m0[17u].x - _496)) + _496;
    float _652 = (_644 * (cbMtdParam._m0[17u].y - _498)) + _498;
    float _653 = (_644 * (cbMtdParam._m0[17u].z - _500)) + _500;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _681 = _679.x;
    float _698 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _681) * _466) + _681;
    float _702 = ((_665.x - _698) * cbMtdParam._m0[19u].z) + _698;
    float _704 = _702 - (_702 * _644);
    float _709 = (((_518.z - _573) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _573;
    float _713 = ((_599.z - _709) * cbMtdParam._m0[19u].w) + _709;
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _733 = (_726.x * 2.0) + (-1.0);
    float _734 = (_726.y * 2.0) + (-1.0);
    float _735 = dot(vec2(_733, _734), vec2(_733, _734));
    float _4105 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _743 = (_644 * (_726.z - _713)) + _713;
    float _752 = (_576 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_518.x * 2.0) + (-1.0)))) + (((_599.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _753 = (_577 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_518.y * 2.0) + (-1.0)))) + (((_599.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _765 = (((_733 - _752) + (cbMtdParam._m0[21u].x * _752)) * _644) + _752;
    float _766 = (((_734 - _753) + (cbMtdParam._m0[21u].x * _753)) * _644) + _753;
    float _767 = (_644 * (sqrt(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) - _583)) + _583;
    float _769 = cbMtdParam._m0[22u].x + _599.w;
    float _772 = fma(_767, _244 * NORMAL.x, fma(_766, _251 * TANGENT.x, (_237 * _229) * _765));
    float _775 = fma(_767, _244 * NORMAL.y, fma(_766, _251 * TANGENT.y, (_237 * _230) * _765));
    float _778 = fma(_767, _244 * NORMAL.z, fma(_766, _251 * TANGENT.z, (_237 * _231) * _765));
    float _782 = inversesqrt(dot(vec3(_772, _775, _778), vec3(_772, _775, _778)));
    float _783 = _782 * _772;
    float _784 = _782 * _775;
    float _785 = _782 * _778;
    float _4116 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _786 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _4127 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4138 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4149 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _4160 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4171 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _791 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _856 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _846);
    float _857 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _846);
    float _858 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _846);
    float _862 = inversesqrt(dot(vec3(_856, _857, _858), vec3(_856, _857, _858)));
    float _863 = _856 * _862;
    float _864 = _857 * _862;
    float _865 = _858 * _862;
    vec4 _870 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _872 = _870.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1044 = sqrt(((_856 * _856) + (_857 * _857)) + (_858 * _858));
        float _1050 = (cbMatDynParam._m0[5u].x * _1044) + cbMatDynParam._m0[5u].y;
        float _4182 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1055 = (cbMatDynParam._m0[5u].z * _1044) + cbMatDynParam._m0[5u].w;
        float _4193 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) - _1051)) + _1051) < ((_872 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _883 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _884 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _902 = fma(_785, cbSceneParam._m0[5u].z, fma(_784, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _783));
    float _905 = fma(_785, cbSceneParam._m0[6u].z, fma(_784, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _783));
    float _908 = fma(_785, cbSceneParam._m0[7u].z, fma(_784, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _783));
    uint _921 = _278 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * cbInstanceData._m0[_922].z;
    float _4204 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _934 = 1.0 - _791;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _791;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _791;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _791;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _883, cbSceneParam._m0[86u].y * _884));
    float _961 = ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * TEXCOORD_5.w) * _957.x;
    float _962 = dot(vec3(_783, _784, _785), vec3(_863, _864, _865));
    float _965 = _962 * 2.0;
    float _969 = (_965 * _783) - _863;
    float _970 = (_965 * _784) - _864;
    float _971 = (_965 * _785) - _865;
    float _975 = abs(dot(vec3(_863, _864, _865), vec3(_783, _784, _785)));
    float _4237 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _977 = sqrt(_786);
    float _990 = exp2((_977 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_977 * 3.0));
    float _996 = (1.0 - _990) * ((_977 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _997 = _990 * _977;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1033 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1033, cbModelParam._m0[26u].z, fma(_1029, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025));
        float _1091 = fma(_1033, cbModelParam._m0[27u].z, fma(_1029, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025));
        float _1095 = fma(_1033, cbModelParam._m0[28u].z, fma(_1029, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025));
        float _1120 = _1025 + _783;
        float _1121 = _1029 + _784;
        float _1122 = _1033 + _785;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_783, _784, _785), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _4263 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _4274 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _4285 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_783, _784, _785), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _4296 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _4307 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4318 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_783, _784, _785), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4351 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1033, cbModelParam._m0[30u].z, fma(_1029, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1025));
        float _1409 = fma(_1033, cbModelParam._m0[31u].z, fma(_1029, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1025));
        float _1413 = fma(_1033, cbModelParam._m0[32u].z, fma(_1029, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1025));
        float _1436 = _1025 + _783;
        float _1437 = _1029 + _784;
        float _1438 = _1033 + _785;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_783, _784, _785), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4392 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4403 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4414 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_783, _784, _785), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4425 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4436 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4447 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_783, _784, _785), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4480 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1363;
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = _1363;
        _1684 = _1363;
        _1685 = _1363;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1375)) + _1375;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1376)) + _1376;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1377)) + _1377;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _969 * 0.5;
    float _1743 = _970 * 0.5;
    float _1744 = _971 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _786);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1033, cbModelParam._m0[13u].z, fma(_1029, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1025)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1033, cbModelParam._m0[14u].z, fma(_1029, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1025)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1033, cbModelParam._m0[15u].z, fma(_1029, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1025)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_971, cbModelParam._m0[13u].z, fma(_970, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _969));
        float _1873 = fma(_971, cbModelParam._m0[14u].z, fma(_970, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _969));
        float _1876 = fma(_971, cbModelParam._m0[15u].z, fma(_970, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _969));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1904 = frontier_phi_17_15_ladder;
        }
        float _2076;
        if (_1873 > 0.0)
        {
            _2076 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2076 = frontier_phi_26_22_ladder;
        }
        float _2371;
        if (_1876 > 0.0)
        {
            _2371 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2371 = frontier_phi_38_33_ladder;
        }
        float _2373 = isnan(_2076) ? _1904 : (isnan(_1904) ? _2076 : min(_1904, _2076));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1870) + _1859;
        float _2379 = (_2374 * _1873) + _1863;
        float _2380 = (_2374 * _1876) + _1867;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2383 = (-1.0) - _2381;
        float _2385 = _2381 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2380 > _2385) || ((_2380 < _2383) || ((_2379 > _2385) || ((_2379 < _2383) || ((_2378 < _2383) || (_2378 > _2385))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2380, cbModelParam._m0[9u].z, fma(_2379, cbModelParam._m0[9u].y, _2378 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2380, cbModelParam._m0[10u].z, fma(_2379, cbModelParam._m0[10u].y, _2378 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2380, cbModelParam._m0[11u].z, fma(_2379, cbModelParam._m0[11u].y, _2378 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_16_38_ladder = _2525.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2525.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2525.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_16_38_ladder_2;
        _1894 = frontier_phi_16_38_ladder_1;
        _1896 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_969, _970, _971), _1811);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _786);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1955 = fma(_1033, cbModelParam._m0[21u].z, fma(_1029, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1025)) + cbModelParam._m0[21u].w;
        float _1959 = fma(_1033, cbModelParam._m0[22u].z, fma(_1029, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1025)) + cbModelParam._m0[22u].w;
        float _1963 = fma(_1033, cbModelParam._m0[23u].z, fma(_1029, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1025)) + cbModelParam._m0[23u].w;
        float _1966 = fma(_971, cbModelParam._m0[21u].z, fma(_970, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _969));
        float _1969 = fma(_971, cbModelParam._m0[22u].z, fma(_970, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _969));
        float _1972 = fma(_971, cbModelParam._m0[23u].z, fma(_970, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _969));
        float _2081;
        if (_1966 > 0.0)
        {
            _2081 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2081 = frontier_phi_28_24_ladder;
        }
        float _2398;
        if (_1969 > 0.0)
        {
            _2398 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2398 = frontier_phi_40_35_ladder;
        }
        float _2736;
        if (_1972 > 0.0)
        {
            _2736 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2736 = frontier_phi_50_47_ladder;
        }
        float _2738 = isnan(_2398) ? _2081 : (isnan(_2081) ? _2398 : min(_2081, _2398));
        float _2739 = isnan(_2736) ? _2738 : (isnan(_2738) ? _2736 : min(_2738, _2736));
        float _2743 = (_2739 * _1966) + _1955;
        float _2744 = (_2739 * _1969) + _1959;
        float _2745 = (_2739 * _1972) + _1963;
        float _2746 = _2739 * 9.9999997473787516355514526367188e-05;
        float _2747 = (-1.0) - _2746;
        float _2749 = _2746 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2745 > _2749) || ((_2745 < _2747) || ((_2744 > _2749) || ((_2744 < _2747) || ((_2743 < _2747) || (_2743 > _2749))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2745, cbModelParam._m0[17u].z, fma(_2744, cbModelParam._m0[17u].y, _2743 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2745, cbModelParam._m0[18u].z, fma(_2744, cbModelParam._m0[18u].y, _2743 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2745, cbModelParam._m0[19u].z, fma(_2744, cbModelParam._m0[19u].y, _2743 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_25_50_ladder = _2867.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2867.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2867.x * cbModelParam._m0[1u].z;
        }
        _1991 = frontier_phi_25_50_ladder_2;
        _1993 = frontier_phi_25_50_ladder_1;
        _1995 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_969, _970, _971), _1901);
        _1991 = _1975.x * cbModelParam._m0[1u].z;
        _1993 = _1975.y * cbModelParam._m0[1u].z;
        _1995 = _1975.z * cbModelParam._m0[1u].z;
    }
    float _2008 = (((_996 * _945) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2010 = (((_996 * _947) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2012 = (((_996 * _948) + _997) * _961) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2015 = fma(_2012, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2018 = fma(_2012, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2021 = fma(_2012, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2008 * cbSceneParam._m0[91u].x));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2063 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2067 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2068 = _2055 / _2067;
    float _2069 = _2059 / _2067;
    float _2070 = _2063 / _2067;
    float _2217;
    float _2218;
    float _2219;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2097 = ((uint(_2070 > cbSceneParam._m0[59u].y) + uint(_2070 > cbSceneParam._m0[59u].x)) + uint(_2070 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2098 = _2097 + 43u;
        uint _2106 = _2097 + 44u;
        uint _2114 = _2097 + 45u;
        uint _2122 = _2097 + 46u;
        float _2133 = fma(_2067, cbSceneParam._m0[_2098].w, fma(_2063, cbSceneParam._m0[_2098].z, fma(_2059, cbSceneParam._m0[_2098].y, _2055 * cbSceneParam._m0[_2098].x)));
        float _2137 = fma(_2067, cbSceneParam._m0[_2106].w, fma(_2063, cbSceneParam._m0[_2106].z, fma(_2059, cbSceneParam._m0[_2106].y, _2055 * cbSceneParam._m0[_2106].x)));
        float _2145 = fma(_2067, cbSceneParam._m0[_2122].w, fma(_2063, cbSceneParam._m0[_2122].z, fma(_2059, cbSceneParam._m0[_2122].y, _2055 * cbSceneParam._m0[_2122].x)));
        float _2150 = cbSceneParam._m0[33u].z * _2145;
        float _2152 = cbSceneParam._m0[33u].w * _2145;
        float _2155 = fma(_2067, cbSceneParam._m0[_2114].w, fma(_2063, cbSceneParam._m0[_2114].z, fma(_2059, cbSceneParam._m0[_2114].y, _2055 * cbSceneParam._m0[_2114].x))) / _2145;
        float _2203 = (cbSceneParam._m0[33u].x - sqrt(((_2069 * _2069) + (_2068 * _2068)) + (_2070 * _2070))) * cbSceneParam._m0[33u].y;
        float _4606 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2210 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2133) / _2145, (_2152 + _2137) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 + _2133) / _2145, (_2137 - _2150) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 - _2150) / _2145, (_2137 - _2152) / _2145), _2155), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2133 - _2152) / _2145, (_2150 + _2137) / _2145), _2155), 0.0)).x), vec4(0.25)));
        _2217 = 1.0 - (_2210 * cbSceneParam._m0[34u].x);
        _2218 = 1.0 - (_2210 * cbSceneParam._m0[34u].y);
        _2219 = 1.0 - (_2210 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2217 = 1.0;
        _2218 = 1.0;
        _2219 = 1.0;
    }
    float _2283;
    float _2285;
    float _2287;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2271 = fma(_2067, cbSceneParam._m0[63u].w, fma(_2063, cbSceneParam._m0[63u].z, fma(_2059, cbSceneParam._m0[63u].y, _2055 * cbSceneParam._m0[63u].x)));
        float _2272 = fma(_2067, cbSceneParam._m0[60u].w, fma(_2063, cbSceneParam._m0[60u].z, fma(_2059, cbSceneParam._m0[60u].y, _2055 * cbSceneParam._m0[60u].x))) / _2271;
        float _2273 = fma(_2067, cbSceneParam._m0[61u].w, fma(_2063, cbSceneParam._m0[61u].z, fma(_2059, cbSceneParam._m0[61u].y, _2055 * cbSceneParam._m0[61u].x))) / _2271;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2272 >= cbSceneParam._m0[64u].x) && (_2273 >= cbSceneParam._m0[64u].y)) && (_2272 <= cbSceneParam._m0[64u].z)) && (_2273 <= cbSceneParam._m0[64u].w))
        {
            float _2411 = fma(_2067, cbSceneParam._m0[62u].w, fma(_2063, cbSceneParam._m0[62u].z, fma(_2059, cbSceneParam._m0[62u].y, _2055 * cbSceneParam._m0[62u].x))) / _2271;
            float _2415 = isnan(cbSceneParam._m0[41u].w) ? _2411 : (isnan(_2411) ? cbSceneParam._m0[41u].w : max(_2411, cbSceneParam._m0[41u].w));
            float _2458 = (cbSceneParam._m0[33u].x - sqrt(((_2069 * _2069) + (_2068 * _2068)) + (_2070 * _2070))) * cbSceneParam._m0[33u].y;
            float _4622 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
            float _2465 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2272, cbSceneParam._m0[33u].w + _2273), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2272, _2273 - cbSceneParam._m0[33u].z), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2272 - cbSceneParam._m0[33u].z, _2273 - cbSceneParam._m0[33u].w), _2415), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2272 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2273), _2415), 0.0)).x), vec4(0.25)));
            float _2469 = 1.0 - (_2465 * cbSceneParam._m0[34u].x);
            float _2470 = 1.0 - (_2465 * cbSceneParam._m0[34u].y);
            float _2471 = 1.0 - (_2465 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2471) ? _2219 : (isnan(_2219) ? _2471 : min(_2219, _2471));
            frontier_phi_37_36_ladder_1 = isnan(_2470) ? _2218 : (isnan(_2218) ? _2470 : min(_2218, _2470));
            frontier_phi_37_36_ladder_2 = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
        }
        else
        {
            frontier_phi_37_36_ladder = _2219;
            frontier_phi_37_36_ladder_1 = _2218;
            frontier_phi_37_36_ladder_2 = _2217;
        }
        _2283 = frontier_phi_37_36_ladder_2;
        _2285 = frontier_phi_37_36_ladder_1;
        _2287 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2283 = _2217;
        _2285 = _2218;
        _2287 = _2219;
    }
    uvec4 _2292 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2294 = _2292.x * 14u;
    uint _2295 = _2294 + 13u;
    float _2302 = _961 + (-1.0);
    float _2307 = (cbLight._m0[_2295].x * _2302) + 1.0;
    float _2308 = (cbLight._m0[_2295].y * _2302) + 1.0;
    float _2309 = (cbLight._m0[_2295].z * _2302) + 1.0;
    float _2310 = (cbLight._m0[_2295].w * _2302) + 1.0;
    uint _2311 = _2294 + 5u;
    float _2317 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2321 = _2294 + 4u;
    float _2330 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
    uint _2334 = _2294 | 1u;
    float _2345 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_783, _784, _785));
    float _2348 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_783, _784, _785));
    float _4658 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _4669 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2353 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2355 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * 0.3183098733425140380859375;
    float _2362 = ((cbLight._m0[_2311].x * _2317) * _2355) + (((cbLight._m0[_2321].x * _2283) * _2330) * _2353);
    float _2363 = ((_2317 * cbLight._m0[_2311].y) * _2355) + (((cbLight._m0[_2321].y * _2285) * _2330) * _2353);
    float _2364 = ((_2317 * cbLight._m0[_2311].z) * _2355) + (((cbLight._m0[_2321].z * _2287) * _2330) * _2353);
    uvec4 _2368 = floatBitsToUint(cbLight._m0[_2294 + 12u]);
    bool _2370 = _2368.x == 0u;
    float _2472;
    float _2474;
    float _2476;
    if (_2370)
    {
        _2472 = _2362;
        _2474 = _2363;
        _2476 = _2364;
    }
    else
    {
        uint _2480 = _2294 + 6u;
        float _2496 = (dot(vec3(cbLight._m0[_2294 + 2u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4680 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2499 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2472 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2362;
        _2474 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2363;
        _2476 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2364;
    }
    bool _2479 = _2368.y == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2479)
    {
        _2534 = _2472;
        _2536 = _2474;
        _2538 = _2476;
    }
    else
    {
        uint _2707 = _2294 + 7u;
        float _2723 = (dot(vec3(cbLight._m0[_2294 + 3u].xyz), vec3(_783, _784, _785)) * 0.5) + 0.5;
        float _2724 = _2723 * _2723;
        float _4696 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2725 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2726 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2534 = (((cbLight._m0[_2707].x * 0.3183098733425140380859375) * _2725) * _2726) + _2472;
        _2536 = (((cbLight._m0[_2707].y * 0.3183098733425140380859375) * _2725) * _2726) + _2474;
        _2538 = (((cbLight._m0[_2707].z * 0.3183098733425140380859375) * _2725) * _2726) + _2476;
    }
    uint _2541 = _2294 + 8u;
    float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2294].w)) * _786) * 0.949999988079071044921875);
    float _2555 = _2554 * _2554;
    float _2556 = cbLight._m0[_2294].x + _863;
    float _2557 = cbLight._m0[_2294].y + _864;
    float _2558 = cbLight._m0[_2294].z + _865;
    float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
    float _2563 = _2562 * _2556;
    float _2564 = _2562 * _2557;
    float _2565 = _2562 * _2558;
    float _2566 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2294].xyz));
    float _4712 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _4723 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2570 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2571 = dot(vec3(_783, _784, _785), vec3(_2563, _2564, _2565));
    float _4734 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2294].xyz), vec3(_2563, _2564, _2565));
    float _4745 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2555 * _2555;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
    float _2592 = 0.959999978542327880859375 - _942;
    float _2594 = 0.959999978542327880859375 - _943;
    float _2595 = 0.959999978542327880859375 - _944;
    float _2602 = 1.0 - _2555;
    float _2613 = (0.5 / (((_2570 * ((_2569 * _2602) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2602) + _2555) * _2569))) * _2569;
    float _4756 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2615 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    uint _2629 = _2294 + 9u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2334].w)) * _786) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2334].x + _863;
    float _2643 = cbLight._m0[_2334].y + _864;
    float _2644 = cbLight._m0[_2334].z + _865;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2334].xyz));
    float _4767 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2656 = dot(vec3(_783, _784, _785), vec3(_2649, _2650, _2651));
    float _4778 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
    float _2660 = dot(vec3(cbLight._m0[_2334].xyz), vec3(_2649, _2650, _2651));
    float _4789 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2664 = _2641 * _2641;
    float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
    float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0)))) * 5.0);
    float _2682 = 1.0 - _2641;
    float _2692 = (0.5 / (((_2570 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2682) + _2641) * _2655))) * _2655;
    float _4800 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
    float _2704 = (((((_2675 * _2592) + _945) * cbLight._m0[_2629].x) * _2694) * _2317) + ((((cbLight._m0[_2541].x * _2283) * ((_2591 * _2592) + _945)) * _2615) * _2330);
    float _2705 = (((((_2675 * _2594) + _947) * cbLight._m0[_2629].y) * _2694) * _2317) + ((((cbLight._m0[_2541].y * _2285) * ((_2591 * _2594) + _947)) * _2615) * _2330);
    float _2706 = (((((_2675 * _2595) + _948) * cbLight._m0[_2629].z) * _2694) * _2317) + ((((cbLight._m0[_2541].z * _2287) * ((_2591 * _2595) + _948)) * _2615) * _2330);
    float _2762;
    float _2764;
    float _2766;
    if (_2370)
    {
        _2762 = _2704;
        _2764 = _2705;
        _2766 = _2706;
    }
    else
    {
        uint _2768 = _2294 + 2u;
        uint _2772 = _2294 + 10u;
        float _2786 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2768].w)) * _786) * 0.949999988079071044921875);
        float _2787 = _2786 * _2786;
        float _2788 = cbLight._m0[_2768].x + _863;
        float _2789 = cbLight._m0[_2768].y + _864;
        float _2790 = cbLight._m0[_2768].z + _865;
        float _2794 = inversesqrt(dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790)));
        float _2795 = _2794 * _2788;
        float _2796 = _2794 * _2789;
        float _2797 = _2794 * _2790;
        float _2798 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2768].xyz));
        float _4811 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2801 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2802 = dot(vec3(_783, _784, _785), vec3(_2795, _2796, _2797));
        float _4822 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2806 = dot(vec3(cbLight._m0[_2768].xyz), vec3(_2795, _2796, _2797));
        float _4833 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2810 = _2787 * _2787;
        float _2814 = ((_2805 * _2805) * (_2810 + (-1.0))) + 1.0;
        float _2821 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2828 = 1.0 - _2787;
        float _2838 = (0.5 / (((_2570 * ((_2801 * _2828) + _2787)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2828) + _2787) * _2801))) * _2801;
        float _4844 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2840 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2810 / ((_2814 * _2814) * 3.141590118408203125));
        float _2841 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
        _2762 = (((((_2821 * _2592) + _945) * cbLight._m0[_2772].x) * _2840) * _2841) + _2704;
        _2764 = (((((_2821 * _2594) + _947) * cbLight._m0[_2772].y) * _2840) * _2841) + _2705;
        _2766 = (((((_2821 * _2595) + _948) * cbLight._m0[_2772].z) * _2840) * _2841) + _2706;
    }
    float _2872;
    float _2874;
    float _2876;
    if (_2479)
    {
        _2872 = _2762;
        _2874 = _2764;
        _2876 = _2766;
    }
    else
    {
        uint _2883 = _2294 + 3u;
        uint _2887 = _2294 + 11u;
        float _2901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2883].w)) * _786) * 0.949999988079071044921875);
        float _2902 = _2901 * _2901;
        float _2903 = cbLight._m0[_2883].x + _863;
        float _2904 = cbLight._m0[_2883].y + _864;
        float _2905 = cbLight._m0[_2883].z + _865;
        float _2909 = inversesqrt(dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905)));
        float _2910 = _2909 * _2903;
        float _2911 = _2909 * _2904;
        float _2912 = _2909 * _2905;
        float _2913 = dot(vec3(_783, _784, _785), vec3(cbLight._m0[_2883].xyz));
        float _4860 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2917 = dot(vec3(_783, _784, _785), vec3(_2910, _2911, _2912));
        float _4871 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2920 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
        float _2921 = dot(vec3(cbLight._m0[_2883].xyz), vec3(_2910, _2911, _2912));
        float _4882 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2925 = _2902 * _2902;
        float _2929 = ((_2920 * _2920) * (_2925 + (-1.0))) + 1.0;
        float _2936 = exp2(log2(1.0 - (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0)))) * 5.0);
        float _2943 = 1.0 - _2902;
        float _2953 = (0.5 / (((_2570 * ((_2916 * _2943) + _2902)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2943) + _2902) * _2916))) * _2916;
        float _4893 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2955 = (isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2925 / ((_2929 * _2929) * 3.141590118408203125));
        float _2956 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2872 = (((((_2936 * _2592) + _945) * cbLight._m0[_2887].x) * _2955) * _2956) + _2762;
        _2874 = (((((_2936 * _2594) + _947) * cbLight._m0[_2887].y) * _2955) * _2956) + _2764;
        _2876 = (((((_2936 * _2595) + _948) * cbLight._m0[_2887].z) * _2955) * _2956) + _2766;
    }
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_2292.y == 0u)
    {
        uvec4 _2977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2978 = _2977.x;
        uint _2989 = uint((float(_2977.y) * floor(float(uint(cbSceneParam._m0[85u].y * _884) / _2978))) + floor(float(uint(cbSceneParam._m0[85u].x * _883) / _2978)));
        float _2999 = (log2(_2070 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3000 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        uint _3003 = uint(isnan(14.0) ? _3000 : (isnan(_3000) ? 14.0 : min(_3000, 14.0)));
        uvec4 _3008 = texelFetch(g_lightClusterGridBuffer, int(((_3003 << 2u) + (_2989 << 6u)) >> 2u));
        uint _3009 = _3008.x;
        uint _3010 = _2977.z;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        if (((((1u << ((_3010 >> 4u) & 15u)) + 4294967295u) & _3009) == 0u) || ((_3010 & 240u) == 0u))
        {
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
        }
        else
        {
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3242 = 0.0;
            float _3243 = 0.0;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            uint _3248 = 0u;
            uint _3257;
            bool _3258;
            for (;;)
            {
                _3257 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3248 << 2u)) >> 2u)).x;
                _3258 = _3257 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3258)
                {
                    frontier_phi_71_pred = _3247;
                    frontier_phi_71_pred_1 = _3246;
                    frontier_phi_71_pred_2 = _3245;
                    frontier_phi_71_pred_3 = _3244;
                    frontier_phi_71_pred_4 = _3243;
                    frontier_phi_71_pred_5 = _3242;
                }
                else
                {
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    uint _3393;
                    _3387 = _3242;
                    _3388 = _3243;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3257;
                    float _3314;
                    float _3315;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    for (;;)
                    {
                        uint _3397 = uint(findLSB(_3393)) + (_3248 << 5u);
                        uint _3394 = (_3393 + 4294967295u) & _3393;
                        uint _3399 = _3397 * 48u;
                        vec4 _3413 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3419 = (_3397 * 48u) + 4u;
                        vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3419)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3419 + 3u)).x));
                        uint _3438 = (_3397 * 48u) + 8u;
                        vec3 _3449 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x));
                        float _3453 = _3413.x - _2068;
                        float _3454 = _3413.y - _2069;
                        float _3455 = _3413.z - _2070;
                        float _3456 = dot(vec3(_3453, _3454, _3455), vec3(_3453, _3454, _3455));
                        float _3459 = inversesqrt(_3456);
                        float _3460 = _3459 * _3453;
                        float _3461 = _3459 * _3454;
                        float _3462 = _3459 * _3455;
                        float _3463 = dot(vec3(_902, _905, _908), vec3(_3460, _3461, _3462));
                        float _3468 = 1.0 - (_3456 * _3413.w);
                        float _4919 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                        float _3469 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3470 = sqrt(_3456) * _3432.w;
                        float _3473 = 1.39999997615814208984375 / (_3470 + 1.39999997615814208984375);
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3463) + _3474;
                        float _3480 = _3470 * _3470;
                        float _3484 = ((isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0))) * _3469) / ((_3480 * 0.699999988079071044921875) + 1.0);
                        float _3488 = (-0.0) - _2068;
                        float _3489 = (-0.0) - _2069;
                        float _3490 = (-0.0) - _2070;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3495 = _3494 * _3488;
                        float _3496 = _3494 * _3489;
                        float _3497 = _3494 * _3490;
                        float _3504 = exp2(log2(1.0 / ((_3480 * 3.5) + 5.0)) * 0.25);
                        float _3505 = 1.0 - _977;
                        float _3512 = sqrt(1.0 - ((1.0 - (_3505 * _3505)) * (1.0 - (_3504 * _3504))));
                        float _3513 = _3512 * _3512;
                        float _3514 = _3513 * _3513;
                        float _3515 = _3495 + _3460;
                        float _3516 = _3496 + _3461;
                        float _3517 = _3497 + _3462;
                        float _3521 = inversesqrt(dot(vec3(_3515, _3516, _3517), vec3(_3515, _3516, _3517)));
                        float _3525 = dot(vec3(_902, _905, _908), vec3(_3495, _3496, _3497));
                        float _4935 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3528 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3529 = dot(vec3(_902, _905, _908), vec3(_3521 * _3515, _3521 * _3516, _3521 * _3517));
                        float _4946 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3532 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3536 = ((_3532 * _3532) * (_3514 + (-1.0))) + 1.0;
                        float _3537 = _3473 * _3513;
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3463) + _3538;
                        float _4957 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3542 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                        float _3543 = 1.0 - _3513;
                        float _3553 = (0.5 / (((_3542 * ((_3528 * _3543) + _3513)) + 9.9999999392252902907785028219223e-09) + (((_3542 * _3543) + _3513) * _3528))) * _3542;
                        float _4968 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3564 = (((_3514 * 3.1415927410125732421875) * (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0)))) / ((_3536 * _3536) * ((_3480 * 2.1991131305694580078125) + 3.141590118408203125))) * _3469;
                        _3317 = (_3484 * _3432.x) + _3390;
                        _3318 = (_3484 * _3432.y) + _3391;
                        _3319 = (_3484 * _3432.z) + _3392;
                        _3314 = (_3564 * _3449.x) + _3387;
                        _3315 = (_3564 * _3449.y) + _3388;
                        _3316 = (_3564 * _3449.z) + _3389;
                        if (_3394 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3387 = _3314;
                            _3388 = _3315;
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3394;
                        }
                    }
                    frontier_phi_71_pred = _3319;
                    frontier_phi_71_pred_1 = _3318;
                    frontier_phi_71_pred_2 = _3317;
                    frontier_phi_71_pred_3 = _3316;
                    frontier_phi_71_pred_4 = _3315;
                    frontier_phi_71_pred_5 = _3314;
                }
                _3100 = frontier_phi_71_pred;
                _3098 = frontier_phi_71_pred_1;
                _3096 = frontier_phi_71_pred_2;
                _3094 = frontier_phi_71_pred_3;
                _3092 = frontier_phi_71_pred_4;
                _3090 = frontier_phi_71_pred_5;
                uint _3249 = _3248 + 1u;
                if (_3249 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3242 = _3090;
                    _3243 = _3092;
                    _3244 = _3094;
                    _3245 = _3096;
                    _3246 = _3098;
                    _3247 = _3100;
                    _3248 = _3249;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
        }
        uvec4 _3103 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3104 = _3103.z;
        uint _3106 = (_3104 >> 8u) & 15u;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        if (((4294967295u << _3106) & _3009) == 0u)
        {
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
        }
        else
        {
            float _3235 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
            float _3236 = _3235 * _2068;
            float _3237 = _3235 * _2069;
            float _3238 = _3235 * _2070;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3106 < ((_3104 >> 12u) & 15u))
            {
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3370 = _3089;
                float _3371 = _3091;
                float _3372 = _3093;
                float _3373 = _3095;
                float _3374 = _3097;
                float _3375 = _3099;
                uint _3376 = _3106;
                uint _3385;
                bool _3386;
                for (;;)
                {
                    _3385 = texelFetch(g_lightClassification, int((((_3003 << 5u) + (_2989 << 9u)) + (_3376 << 2u)) >> 2u)).x;
                    _3386 = _3385 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3386)
                    {
                        frontier_phi_82_pred = _3375;
                        frontier_phi_82_pred_1 = _3374;
                        frontier_phi_82_pred_2 = _3373;
                        frontier_phi_82_pred_3 = _3372;
                        frontier_phi_82_pred_4 = _3371;
                        frontier_phi_82_pred_5 = _3370;
                    }
                    else
                    {
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3871;
                        float _3872;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3591 = _3370;
                        float _3592 = _3371;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        uint _3597 = _3385;
                        uint _3598;
                        vec4 _3623;
                        float _3624;
                        vec4 _3639;
                        vec3 _3651;
                        vec4 _3666;
                        vec4 _3681;
                        float _3727;
                        bool _3728;
                        for (;;)
                        {
                            uint _3608 = ((_3376 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3597));
                            _3598 = (_3597 + 4294967295u) & _3597;
                            uint _3610 = _3608 * 40u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            _3624 = _3623.w;
                            uint _3626 = (_3608 * 40u) + 4u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3641 = (_3608 * 40u) + 8u;
                            _3651 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3641)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3641 + 2u)).x));
                            uint _3653 = (_3608 * 40u) + 16u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3608 * 40u) + 20u;
                            _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3683 = (_3608 * 40u) + 24u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3702 = (_3608 * 40u) + 28u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            _3727 = fma(_2070, _3715.z, fma(_2069, _3715.y, _3715.x * _2068)) + _3715.w;
                            _3728 = !((fma(_2070, _3696.z, fma(_2069, _3696.y, _3696.x * _2068)) + _3696.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3728)
                            {
                                float _3755 = _3623.x - _2068;
                                float _3756 = _3623.y - _2069;
                                float _3757 = _3623.z - _2070;
                                float _3758 = dot(vec3(_3755, _3756, _3757), vec3(_3755, _3756, _3757));
                                float _3761 = inversesqrt(_3758);
                                float _3762 = _3761 * _3755;
                                float _3763 = _3761 * _3756;
                                float _3764 = _3761 * _3757;
                                float _3768 = 1.0 - (_3758 / (_3624 * _3624));
                                float _4979 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3773 = sqrt(_3758) * _3639.w;
                                float _3775 = 1.39999997615814208984375 / (_3773 + 1.39999997615814208984375);
                                float _3776 = _3775 * _3775;
                                float _3779 = ((1.0 - _3776) * dot(vec3(_3762, _3763, _3764), vec3(_902, _905, _908))) + _3776;
                                float _3782 = _3773 * _3773;
                                float _3786 = (fma(_2070, _3666.z, fma(_2069, _3666.y, _3666.x * _2068)) + _3666.w) / _3727;
                                float _3787 = (fma(_2070, _3681.z, fma(_2069, _3681.y, _3681.x * _2068)) + _3681.w) / _3727;
                                float _3791 = 1.0 - dot(vec2(_3786, _3787), vec2(_3786, _3787));
                                float _4995 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3792 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3793 = _3792 * (((isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0))) * _3769) / ((_3782 * 0.699999988079071044921875) + 1.0));
                                float _3805 = exp2(log2(1.0 / ((_3782 * 3.5) + 5.0)) * 0.25);
                                float _3806 = 1.0 - _977;
                                float _3813 = sqrt(1.0 - ((1.0 - (_3806 * _3806)) * (1.0 - (_3805 * _3805))));
                                float _3814 = _3813 * _3813;
                                float _3815 = _3814 * _3814;
                                float _3816 = _3762 - _3236;
                                float _3817 = _3763 - _3237;
                                float _3818 = _3764 - _3238;
                                float _3822 = inversesqrt(dot(vec3(_3816, _3817, _3818), vec3(_3816, _3817, _3818)));
                                float _3826 = dot(vec3(_902, _905, _908), vec3((-0.0) - _3236, (-0.0) - _3237, (-0.0) - _3238));
                                float _5006 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3829 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3830 = dot(vec3(_902, _905, _908), vec3(_3822 * _3816, _3822 * _3817, _3822 * _3818));
                                float _5017 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3833 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3837 = ((_3833 * _3833) * (_3815 + (-1.0))) + 1.0;
                                float _3838 = _3775 * _3814;
                                float _3839 = _3838 * _3838;
                                float _3845 = ((1.0 - _3839) * dot(vec3(_902, _905, _908), vec3(_3762, _3763, _3764))) + _3839;
                                float _5028 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3846 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
                                float _3847 = 1.0 - _3814;
                                float _3857 = (0.5 / (((_3846 * ((_3829 * _3847) + _3814)) + 9.9999999392252902907785028219223e-09) + (((_3846 * _3847) + _3814) * _3829))) * _3846;
                                float _5039 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                                float _3867 = (_3792 * _3769) * (((_3815 * 3.1415927410125732421875) * (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0)))) / ((_3837 * _3837) * ((_3782 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3793 * _3639.z;
                                frontier_phi_88_pred_1 = _3793 * _3639.y;
                                frontier_phi_88_pred_2 = _3793 * _3639.x;
                                frontier_phi_88_pred_3 = _3867 * _3651.z;
                                frontier_phi_88_pred_4 = _3867 * _3651.y;
                                frontier_phi_88_pred_5 = _3867 * _3651.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3876 = frontier_phi_88_pred;
                            _3875 = frontier_phi_88_pred_1;
                            _3874 = frontier_phi_88_pred_2;
                            _3873 = frontier_phi_88_pred_3;
                            _3872 = frontier_phi_88_pred_4;
                            _3871 = frontier_phi_88_pred_5;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            _3583 = _3876 + _3596;
                            _3578 = _3871 + _3591;
                            _3579 = _3872 + _3592;
                            _3580 = _3873 + _3593;
                            if (_3598 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3591 = _3578;
                                _3592 = _3579;
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3598;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3583;
                        frontier_phi_82_pred_1 = _3582;
                        frontier_phi_82_pred_2 = _3581;
                        frontier_phi_82_pred_3 = _3580;
                        frontier_phi_82_pred_4 = _3579;
                        frontier_phi_82_pred_5 = _3578;
                    }
                    _3221 = frontier_phi_82_pred;
                    _3219 = frontier_phi_82_pred_1;
                    _3217 = frontier_phi_82_pred_2;
                    _3215 = frontier_phi_82_pred_3;
                    _3213 = frontier_phi_82_pred_4;
                    _3211 = frontier_phi_82_pred_5;
                    uint _3377 = _3376 + 1u;
                    if (_3377 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3370 = _3211;
                        _3371 = _3213;
                        _3372 = _3215;
                        _3373 = _3217;
                        _3374 = _3219;
                        _3375 = _3221;
                        _3376 = _3377;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3217;
                frontier_phi_63_64_ladder_1 = _3221;
                frontier_phi_63_64_ladder_2 = _3219;
                frontier_phi_63_64_ladder_3 = _3215;
                frontier_phi_63_64_ladder_4 = _3213;
                frontier_phi_63_64_ladder_5 = _3211;
            }
            else
            {
                frontier_phi_63_64_ladder = _3095;
                frontier_phi_63_64_ladder_1 = _3099;
                frontier_phi_63_64_ladder_2 = _3097;
                frontier_phi_63_64_ladder_3 = _3093;
                frontier_phi_63_64_ladder_4 = _3091;
                frontier_phi_63_64_ladder_5 = _3089;
            }
            _3210 = frontier_phi_63_64_ladder_5;
            _3212 = frontier_phi_63_64_ladder_4;
            _3214 = frontier_phi_63_64_ladder_3;
            _3216 = frontier_phi_63_64_ladder;
            _3218 = frontier_phi_63_64_ladder_2;
            _3220 = frontier_phi_63_64_ladder_1;
        }
        float _3225 = isnan(1.0) ? _961 : (isnan(_961) ? 1.0 : min(_961, 1.0));
        _3022 = (_3225 * _3216) + _2534;
        _3024 = (_3225 * _3218) + _2536;
        _3026 = (_3225 * _3220) + _2538;
        _3028 = ((_3210 * _945) * _3225) + _2872;
        _3030 = ((_3212 * _947) * _3225) + _2874;
        _3032 = ((_3214 * _948) * _3225) + _2876;
    }
    else
    {
        _3022 = _2534;
        _3024 = _2536;
        _3026 = _2538;
        _3028 = _2872;
        _3030 = _2874;
        _3032 = _2876;
    }
    float _5055 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _5066 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _5077 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _3049 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3022 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _961))) + ((_3028 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1800)) * cbPerFrame._m0[3u].x);
    float _3050 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3024 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _961))) + ((_3030 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1800)) * cbPerFrame._m0[3u].x);
    float _3051 = ((isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0))) * (_3026 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _961))) + ((_3032 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1800)) * cbPerFrame._m0[3u].x);
    uint _3052 = _278 + 6u;
    float _3060 = _883 / cbSceneParam._m0[86u].x;
    float _3061 = _884 / cbSceneParam._m0[86u].y;
    vec4 _3075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3077 = _3075.x;
    float _3078 = _3075.y;
    float _3079 = _3075.z;
    float _3080 = _3075.w;
    float _3152;
    float _3154;
    float _3156;
    float _3158;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _3114 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _3115 = _3114 / _805;
        float _3126 = _3115 * _856;
        float _3127 = _857 * _3115;
        float _3128 = (-0.0) - _3127;
        float _3130 = _3115 * _858;
        float _3132 = (cbSceneParam._m0[77u].w * _3128) / _3114;
        float _3133 = _3132 + cbSceneParam._m0[79u].w;
        float _3134 = cbSceneParam._m0[79u].w - _3127;
        float _3140 = sqrt(((_3126 * _3126) + (_3127 * _3127)) + (_3130 * _3130));
        float _3143 = (1.0 - (cbSceneParam._m0[77u].w / _3114)) * _3140;
        float _3148 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3150 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3327;
        if (abs((_3128 - _3132) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3327 = ((((_3133 > 0.0) ? exp2(_3148 * _3133) : (2.0 - exp2(_3150 * _3133))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3143;
        }
        else
        {
            float _3271 = 1.0 / cbSceneParam._m0[80u].x;
            float _3272 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : max(_3133, _3134));
            float _3273 = isnan(_3134) ? _3133 : (isnan(_3133) ? _3134 : min(_3133, _3134));
            float _3282 = isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : min(_3272, 0.0));
            float _3283 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : min(_3273, 0.0));
            _3327 = ((abs(_3140 / _3128) * cbSceneParam._m0[80u].y) * ((((_3282 - _3283) * 2.0) - ((exp2(_3148 * (isnan(0.0) ? _3272 : (isnan(_3272) ? 0.0 : max(_3272, 0.0)))) - exp2(_3148 * (isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))))) * _3271)) - ((exp2(_3150 * _3282) - exp2(_3150 * _3283)) * _3271))) + (_3143 * cbSceneParam._m0[80u].z);
        }
        vec4 _3329 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3060, _3061, 1.0), 0.0);
        float _3338 = exp2((_3327 * (-1.44269502162933349609375)) * (1.0 - _3329.w));
        float _3339 = log2(_3338);
        float _3355 = log2(_3080);
        _3152 = (exp2(_3355 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].x)) * _3329.x) / cbSceneParam._m0[78u].x)) + _3077;
        _3154 = (exp2(_3355 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].y)) * _3329.y) / cbSceneParam._m0[78u].y)) + _3078;
        _3156 = (exp2(_3355 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3339 * cbSceneParam._m0[78u].z)) * _3329.z) / cbSceneParam._m0[78u].z)) + _3079;
        _3158 = _3338 * _3080;
    }
    else
    {
        _3152 = _3077;
        _3154 = _3078;
        _3156 = _3079;
        _3158 = _3080;
    }
    bool _3365;
    vec4 _3168;
    vec4 _3190;
    float _3192;
    float _3196;
    float _3197;
    float _3198;
    float _3199;
    bool _3209;
    for (;;)
    {
        _3168 = cbMatDynParam._m0[0u];
        float _3170 = roundEven(_3168.y);
        bool _3171 = _3170 == 3.0;
        float _3172 = log2(_3158);
        float _3179 = exp2(_3172 * cbSceneParam._m0[78u].x) * _3049;
        float _3180 = exp2(_3172 * cbSceneParam._m0[78u].y) * _3050;
        float _3181 = exp2(_3172 * cbSceneParam._m0[78u].z) * _3051;
        float _3188 = _872 + (-0.5);
        _3190 = cbMtdParam._m0[1u];
        _3192 = _3190.y * _3188;
        float _3195 = (_3170 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3196 = _3195 * (_3171 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3152)));
        _3197 = _3195 * (_3171 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3154)));
        _3198 = _3195 * (_3171 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3156)));
        _3199 = _3188 * 0.999000012874603271484375;
        _3209 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3209)
        {
            if ((cbInstanceData._m0[_278 + 7u].x + _3199) < 0.5)
            {
                _3365 = true;
                break;
            }
        }
        uint _3306 = _921 + uint(_3168.w);
        if ((cbInstanceData._m0[_3306].w < 1.0) && ((cbInstanceData._m0[_3306].w + _3199) < 0.5))
        {
            _3365 = true;
            break;
        }
        if ((_3192 + 1.0) < _3190.x)
        {
            _3365 = true;
            break;
        }
        _3365 = false;
        break;
    }
    float _3569;
    if (_3365)
    {
        discard_state = true;
        _3569 = 0.0;
    }
    else
    {
        _3569 = cbInstanceData._m0[_3052].w;
    }
    SV_Target.x = _3196;
    SV_Target.y = _3197;
    SV_Target.z = _3198;
    SV_Target.w = _3569;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3052].w;
    discard_exit();
}


