#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1308;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[23u].w) + _386) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3660 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _411 = (_404 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _412 = (_404 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _413 = (_404 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _452 = _448.z;
    float _461 = ((_431.z - _452) * _404) + _452;
    float _464 = ((((_431.x - _450) * _404) + _450) * 2.0) + (-1.0);
    float _466 = ((((_431.y - _451) * _404) + _451) * 2.0) + (-1.0);
    float _467 = dot(vec2(_464, _466), vec2(_464, _466));
    float _3671 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0))));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _515 = _513.x;
    float _516 = 1.0 - _515;
    float _525 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _528 = ((isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : min(_525, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _537 = (_528 - ((((((_515 - _516) * cbMtdParam._m0[24u].z) + _516) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _528))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3692 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _538 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
    float _545 = (_538 * (cbMtdParam._m0[17u].x - _411)) + _411;
    float _546 = (_538 * (cbMtdParam._m0[17u].y - _412)) + _412;
    float _547 = (_538 * (cbMtdParam._m0[17u].z - _413)) + _413;
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _587 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_561 - _562) * cbMtdParam._m0[24u].w) + _562) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3703 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _588 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _596 = ((((cbMtdParam._m0[10u].x - _545) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _588) + _545;
    float _597 = ((((cbMtdParam._m0[10u].y - _546) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _588) + _546;
    float _598 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _547)) * _588) + _547;
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _626 = _624.x;
    float _644 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _626) * _404) + _626;
    float _648 = ((_610.x - _644) * cbMtdParam._m0[19u].z) + _644;
    float _650 = _648 - (_648 * _538);
    float _652 = _650 - (_650 * _588);
    float _656 = (cbMtdParam._m0[19u].w * (_488.z - _461)) + _461;
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _677 = (_670.x * 2.0) + (-1.0);
    float _678 = (_670.y * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3714 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _687 = (_538 * (_670.z - _656)) + _656;
    float _690 = ((cbMtdParam._m0[23u].x - _687) * _588) + _687;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _715 = (_709.x * 2.0) + (-1.0);
    float _716 = (_709.y * 2.0) + (-1.0);
    float _717 = dot(vec2(_715, _716), vec2(_715, _716));
    float _3725 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _725 = (((_488.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _464;
    float _726 = (((_488.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _466;
    float _738 = (((_677 - _725) + (cbMtdParam._m0[21u].x * _725)) * _538) + _725;
    float _739 = (((_678 - _726) + (cbMtdParam._m0[21u].x * _726)) * _538) + _726;
    float _740 = (_538 * (sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) - _472)) + _472;
    float _751 = (((_715 - _738) + (_738 * cbMtdParam._m0[22u].z)) * _588) + _738;
    float _752 = (((_716 - _739) + (_739 * cbMtdParam._m0[22u].z)) * _588) + _739;
    float _753 = ((sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0)))) - _740) * _588) + _740;
    float _755 = cbMtdParam._m0[22u].x + _488.w;
    float _758 = fma(_753, _240 * NORMAL.x, fma(_752, _247 * TANGENT.x, (_233 * _225) * _751));
    float _761 = fma(_753, _240 * NORMAL.y, fma(_752, _247 * TANGENT.y, (_233 * _226) * _751));
    float _764 = fma(_753, _240 * NORMAL.z, fma(_752, _247 * TANGENT.z, (_233 * _227) * _751));
    float _768 = inversesqrt(dot(vec3(_758, _761, _764), vec3(_758, _761, _764)));
    float _769 = _768 * _758;
    float _770 = _768 * _761;
    float _771 = _768 * _764;
    float _3736 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _772 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _3758 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3769 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3780 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3791 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _777 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _791 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _841 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _831);
    float _842 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _831);
    float _843 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _831);
    float _847 = inversesqrt(dot(vec3(_841, _842, _843), vec3(_841, _842, _843)));
    float _848 = _841 * _847;
    float _849 = _842 * _847;
    float _850 = _843 * _847;
    float _856 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _857 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_771, cbSceneParam._m0[5u].z, fma(_770, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _769));
    float _878 = fma(_771, cbSceneParam._m0[6u].z, fma(_770, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _769));
    float _881 = fma(_771, cbSceneParam._m0[7u].z, fma(_770, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _769));
    uint _895 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3802 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _907 = 1.0 - _777;
    float _908 = _904 * _907;
    float _909 = _905 * _907;
    float _910 = _906 * _907;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _777;
    float _916 = (_905 + (-0.039999999105930328369140625)) * _777;
    float _917 = (_906 + (-0.039999999105930328369140625)) * _777;
    float _918 = _915 + 0.039999999105930328369140625;
    float _920 = _916 + 0.039999999105930328369140625;
    float _921 = _917 + 0.039999999105930328369140625;
    vec4 _930 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _856, cbSceneParam._m0[86u].y * _857));
    float _934 = ((isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * TEXCOORD_5.w) * _930.x;
    float _935 = dot(vec3(_769, _770, _771), vec3(_848, _849, _850));
    float _938 = _935 * 2.0;
    float _942 = (_938 * _769) - _848;
    float _943 = (_938 * _770) - _849;
    float _944 = (_938 * _771) - _850;
    float _948 = abs(dot(vec3(_848, _849, _850), vec3(_769, _770, _771)));
    float _3835 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _950 = sqrt(_772);
    float _963 = exp2((_950 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_950 * 3.0));
    float _969 = (1.0 - _963) * ((_950 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _970 = _963 * _950;
    float _998 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_1006, cbModelParam._m0[26u].z, fma(_1002, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _998));
        float _1036 = fma(_1006, cbModelParam._m0[27u].z, fma(_1002, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _998));
        float _1040 = fma(_1006, cbModelParam._m0[28u].z, fma(_1002, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _998));
        float _1065 = _998 + _769;
        float _1066 = _1002 + _770;
        float _1067 = _1006 + _771;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1032;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1036;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1040;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_769, _770, _771), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3883 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_769, _770, _771), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3916 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_769, _770, _771), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _3927 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3938 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _3949 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1347 = fma(_1006, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _998));
        float _1351 = fma(_1006, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _998));
        float _1355 = fma(_1006, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _998));
        float _1378 = _998 + _769;
        float _1379 = _1002 + _770;
        float _1380 = _1006 + _771;
        float _1390 = fma(_1380, cbModelParam._m0[30u].z, fma(_1379, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1378)) - _1347;
        float _1391 = fma(_1380, cbModelParam._m0[31u].z, fma(_1379, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1378)) - _1351;
        float _1392 = fma(_1380, cbModelParam._m0[32u].z, fma(_1379, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1378)) - _1355;
        float _1396 = inversesqrt(dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392)));
        float _1409 = ((_1396 * _1390) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1347 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1396 * _1391) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1351 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1411 = ((_1396 * _1392) / cbModelParam._m0[35u].z) + ((((((_1355 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1409, _1410, _1411), 0.0);
        float _1446 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1413.x + (-0.5));
        float _1448 = _1446 * (_1413.y + (-0.5));
        float _1449 = _1446 * (_1413.z + (-0.5));
        float _1456 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1420.x + (-0.5));
        float _1458 = _1456 * (_1420.y + (-0.5));
        float _1459 = _1456 * (_1420.z + (-0.5));
        float _1466 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1427.x + (-0.5));
        float _1468 = _1466 * (_1427.y + (-0.5));
        float _1469 = _1466 * (_1427.z + (-0.5));
        float _1476 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1477 = _1476 * (_1434.x + (-0.5));
        float _1478 = _1476 * (_1434.y + (-0.5));
        float _1479 = _1476 * (_1434.z + (-0.5));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = _1447 * 0.5;
        float _1484 = _1457 * 0.5;
        float _1485 = _1467 * 0.5;
        float _1486 = dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485));
        float _1491 = (_1486 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1486);
        float _1499 = (dot(vec3(_769, _770, _771), vec3(_1491 * _1483, _1491 * _1484, _1491 * _1485)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1508 = sqrt(((_1484 * _1484) + (_1483 * _1483)) + (_1485 * _1485)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1510 = _1509 * 2.0;
        float _1514 = (1.0 - _1509) / (_1509 + 1.0);
        float _4012 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1524 = ((((1.0 - _1515) * (_1510 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1510 + 1.0))) + _1515) * _1480;
        float _1525 = _1448 * 0.5;
        float _1526 = _1458 * 0.5;
        float _1527 = _1468 * 0.5;
        float _1528 = dot(vec3(_1525, _1526, _1527), vec3(_1525, _1526, _1527));
        float _1533 = (_1528 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1528);
        float _1541 = (dot(vec3(_769, _770, _771), vec3(_1533 * _1525, _1533 * _1526, _1533 * _1527)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1550 = sqrt(((_1526 * _1526) + (_1525 * _1525)) + (_1527 * _1527)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4045 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1552 + 1.0))) + _1557) * _1481;
        float _1567 = _1449 * 0.5;
        float _1568 = _1459 * 0.5;
        float _1569 = _1469 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_769, _770, _771), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4056 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4067 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4078 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1594 + 1.0))) + _1599) * _1482;
        _1616 = _1449;
        _1617 = _1448;
        _1618 = _1447;
        _1619 = _1459;
        _1620 = _1458;
        _1621 = _1457;
        _1622 = _1469;
        _1623 = _1468;
        _1624 = _1467;
        _1625 = _1482;
        _1626 = _1481;
        _1627 = _1480;
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)));
        _1629 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
    }
    else
    {
        _1616 = _1308;
        _1617 = _1308;
        _1618 = _1308;
        _1619 = _1308;
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = _1308;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1641 = (cbModelParam._m0[1u].x * (_1629 - _1321)) + _1321;
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1322)) + _1322;
    float _1663 = fma(_1642, cbSceneParam._m0[89u].z, fma(_1641, cbSceneParam._m0[89u].y, _1640 * cbSceneParam._m0[89u].x));
    float _1666 = fma(_1642, cbSceneParam._m0[90u].z, fma(_1641, cbSceneParam._m0[90u].y, _1640 * cbSceneParam._m0[90u].x));
    float _1669 = fma(_1642, cbSceneParam._m0[91u].z, fma(_1641, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1640));
    float _1684 = _942 * 0.5;
    float _1685 = _943 * 0.5;
    float _1686 = _944 * 0.5;
    float _1687 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1690 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1617, _1620, _1623, _1626));
    float _1693 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1727;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1700 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1704 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1708 = dot(vec4(_1684, _1685, _1686, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1715 = dot(vec4(cbModelParam._m0[39u]), vec4(_1684, _1685, _1686, 1.0));
        _1727 = dot(vec3(isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1727 = 1.0;
    }
    float _1738;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1729 = dot(vec4(cbModelParam._m0[40u]), vec4(_1684, _1685, _1686, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1742 = (_1738 * cbModelParam._m0[1u].x) + (_1727 * (1.0 - cbModelParam._m0[1u].x));
    float _1752 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _772);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1752 : min(cbModelParam._m0[25u].z, _1752));
    float _1834;
    float _1836;
    float _1838;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1801 = fma(_1006, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _998)) + cbModelParam._m0[13u].w;
        float _1805 = fma(_1006, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _998)) + cbModelParam._m0[14u].w;
        float _1809 = fma(_1006, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _998)) + cbModelParam._m0[15u].w;
        float _1812 = fma(_944, cbModelParam._m0[13u].z, fma(_943, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _942));
        float _1815 = fma(_944, cbModelParam._m0[14u].z, fma(_943, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _942));
        float _1818 = fma(_944, cbModelParam._m0[15u].z, fma(_943, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _942));
        float _1846;
        if (_1812 > 0.0)
        {
            _1846 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1846 = frontier_phi_14_12_ladder;
        }
        float _2070;
        if (_1815 > 0.0)
        {
            _2070 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2070 = frontier_phi_23_19_ladder;
        }
        float _2327;
        if (_1818 > 0.0)
        {
            _2327 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2327 = frontier_phi_35_30_ladder;
        }
        float _2329 = isnan(_2070) ? _1846 : (isnan(_1846) ? _2070 : min(_1846, _2070));
        float _2330 = isnan(_2327) ? _2329 : (isnan(_2329) ? _2327 : min(_2329, _2327));
        float _2334 = (_2330 * _1812) + _1801;
        float _2335 = (_2330 * _1815) + _1805;
        float _2336 = (_2330 * _1818) + _1809;
        float _2337 = _2330 * 9.9999997473787516355514526367188e-05;
        float _2339 = (-1.0) - _2337;
        float _2341 = _2337 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2336 > _2341) || ((_2336 < _2339) || ((_2335 > _2341) || ((_2335 < _2339) || ((_2334 < _2339) || (_2334 > _2341))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2336, cbModelParam._m0[9u].z, fma(_2335, cbModelParam._m0[9u].y, _2334 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2336, cbModelParam._m0[10u].z, fma(_2335, cbModelParam._m0[10u].y, _2334 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2336, cbModelParam._m0[11u].z, fma(_2335, cbModelParam._m0[11u].y, _2334 * cbModelParam._m0[11u].x))), _1753);
            frontier_phi_13_35_ladder = _2464.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2464.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2464.x * cbModelParam._m0[1u].y;
        }
        _1834 = frontier_phi_13_35_ladder_2;
        _1836 = frontier_phi_13_35_ladder_1;
        _1838 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1822 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_942, _943, _944), _1753);
        _1834 = _1822.x * cbModelParam._m0[1u].y;
        _1836 = _1822.y * cbModelParam._m0[1u].y;
        _1838 = _1822.z * cbModelParam._m0[1u].y;
    }
    float _1842 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _772);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1842 : min(cbModelParam._m0[25u].w, _1842));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_1006, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _998)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_1006, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _998)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_1006, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _998)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_944, cbModelParam._m0[21u].z, fma(_943, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _942));
        float _1911 = fma(_944, cbModelParam._m0[22u].z, fma(_943, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _942));
        float _1914 = fma(_944, cbModelParam._m0[23u].z, fma(_943, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _942));
        float _2075;
        if (_1908 > 0.0)
        {
            _2075 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2075 = frontier_phi_25_21_ladder;
        }
        float _2354;
        if (_1911 > 0.0)
        {
            _2354 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2354 = frontier_phi_37_32_ladder;
        }
        float _2567;
        if (_1914 > 0.0)
        {
            _2567 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2567 = frontier_phi_46_43_ladder;
        }
        float _2569 = isnan(_2354) ? _2075 : (isnan(_2075) ? _2354 : min(_2075, _2354));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _1908) + _1897;
        float _2575 = (_2570 * _1911) + _1901;
        float _2576 = (_2570 * _1914) + _1905;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2578 = (-1.0) - _2577;
        float _2580 = _2577 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2576 > _2580) || ((_2576 < _2578) || ((_2575 > _2580) || ((_2575 < _2578) || ((_2574 < _2578) || (_2574 > _2580))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2576, cbModelParam._m0[17u].z, fma(_2575, cbModelParam._m0[17u].y, _2574 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2576, cbModelParam._m0[18u].z, fma(_2575, cbModelParam._m0[18u].y, _2574 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2576, cbModelParam._m0[19u].z, fma(_2575, cbModelParam._m0[19u].y, _2574 * cbModelParam._m0[19u].x))), _1843);
            frontier_phi_22_46_ladder = _2775.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2775.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2775.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_22_46_ladder_2;
        _1935 = frontier_phi_22_46_ladder_1;
        _1937 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_942, _943, _944), _1843);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1950 = (((_969 * _918) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1933 - _1834)) + _1834);
    float _1952 = (((_969 * _920) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1954 = (((_969 * _921) + _970) * _934) * ((cbModelParam._m0[1u].w * (_1937 - _1838)) + _1838);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    vec4 _1971 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_856, _857));
    float _1973 = _1971.w;
    float _1985 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1973);
    float _1986 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1973);
    float _1987 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1973);
    uvec4 _1991 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1993 = _1991.x * 14u;
    uint _1994 = _1993 + 13u;
    float _2001 = _934 + (-1.0);
    float _2006 = (cbLight._m0[_1994].x * _2001) + 1.0;
    float _2007 = (cbLight._m0[_1994].y * _2001) + 1.0;
    float _2008 = (cbLight._m0[_1994].z * _2001) + 1.0;
    float _2009 = (cbLight._m0[_1994].w * _2001) + 1.0;
    uint _2010 = _1993 + 5u;
    float _2016 = isnan(1.0) ? _2007 : (isnan(_2007) ? 1.0 : min(_2007, 1.0));
    uint _2020 = _1993 + 4u;
    float _2029 = isnan(1.0) ? _2006 : (isnan(_2006) ? 1.0 : min(_2006, 1.0));
    uint _2033 = _1993 | 1u;
    float _2044 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_769, _770, _771));
    float _2047 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_769, _770, _771));
    float _4214 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
    float _4225 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2052 = (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * 0.3183098733425140380859375;
    float _2054 = (isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * 0.3183098733425140380859375;
    float _2061 = ((cbLight._m0[_2010].x * _2016) * _2054) + (((cbLight._m0[_2020].x * _1985) * _2029) * _2052);
    float _2062 = ((_2016 * cbLight._m0[_2010].y) * _2054) + (((cbLight._m0[_2020].y * _1986) * _2029) * _2052);
    float _2063 = ((_2016 * cbLight._m0[_2010].z) * _2054) + (((cbLight._m0[_2020].z * _1987) * _2029) * _2052);
    uvec4 _2067 = floatBitsToUint(cbLight._m0[_1993 + 12u]);
    bool _2069 = _2067.x == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2069)
    {
        _2080 = _2061;
        _2082 = _2062;
        _2084 = _2063;
    }
    else
    {
        uint _2088 = _1993 + 6u;
        float _2104 = (dot(vec3(cbLight._m0[_1993 + 2u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2105 = _2104 * _2104;
        float _4236 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2106 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _2107 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2080 = (((cbLight._m0[_2088].x * 0.3183098733425140380859375) * _2106) * _2107) + _2061;
        _2082 = (((cbLight._m0[_2088].y * 0.3183098733425140380859375) * _2106) * _2107) + _2062;
        _2084 = (((cbLight._m0[_2088].z * 0.3183098733425140380859375) * _2106) * _2107) + _2063;
    }
    bool _2087 = _2067.y == 0u;
    float _2125;
    float _2127;
    float _2129;
    if (_2087)
    {
        _2125 = _2080;
        _2127 = _2082;
        _2129 = _2084;
    }
    else
    {
        uint _2298 = _1993 + 7u;
        float _2314 = (dot(vec3(cbLight._m0[_1993 + 3u].xyz), vec3(_769, _770, _771)) * 0.5) + 0.5;
        float _2315 = _2314 * _2314;
        float _4252 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2316 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2317 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2125 = (((cbLight._m0[_2298].x * 0.3183098733425140380859375) * _2316) * _2317) + _2080;
        _2127 = (((cbLight._m0[_2298].y * 0.3183098733425140380859375) * _2316) * _2317) + _2082;
        _2129 = (((cbLight._m0[_2298].z * 0.3183098733425140380859375) * _2316) * _2317) + _2084;
    }
    uint _2132 = _1993 + 8u;
    float _2145 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _772) * 0.949999988079071044921875);
    float _2146 = _2145 * _2145;
    float _2147 = cbLight._m0[_1993].x + _848;
    float _2148 = cbLight._m0[_1993].y + _849;
    float _2149 = cbLight._m0[_1993].z + _850;
    float _2153 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
    float _2154 = _2153 * _2147;
    float _2155 = _2153 * _2148;
    float _2156 = _2153 * _2149;
    float _2157 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_1993].xyz));
    float _4268 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2160 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _4279 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _2161 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2162 = dot(vec3(_769, _770, _771), vec3(_2154, _2155, _2156));
    float _4290 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2165 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _2166 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2154, _2155, _2156));
    float _4301 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _2170 = _2146 * _2146;
    float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
    float _2182 = exp2(log2(1.0 - (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * 5.0);
    float _2183 = 0.959999978542327880859375 - _915;
    float _2185 = 0.959999978542327880859375 - _916;
    float _2186 = 0.959999978542327880859375 - _917;
    float _2193 = 1.0 - _2146;
    float _2204 = (0.5 / (((_2161 * ((_2160 * _2193) + _2146)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2193) + _2146) * _2160))) * _2160;
    float _4312 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2206 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
    uint _2220 = _1993 + 9u;
    float _2231 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2033].w)) * _772) * 0.949999988079071044921875);
    float _2232 = _2231 * _2231;
    float _2233 = cbLight._m0[_2033].x + _848;
    float _2234 = cbLight._m0[_2033].y + _849;
    float _2235 = cbLight._m0[_2033].z + _850;
    float _2239 = inversesqrt(dot(vec3(_2233, _2234, _2235), vec3(_2233, _2234, _2235)));
    float _2240 = _2239 * _2233;
    float _2241 = _2239 * _2234;
    float _2242 = _2239 * _2235;
    float _2243 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2033].xyz));
    float _4323 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _2247 = dot(vec3(_769, _770, _771), vec3(_2240, _2241, _2242));
    float _4334 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2250 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _2251 = dot(vec3(cbLight._m0[_2033].xyz), vec3(_2240, _2241, _2242));
    float _4345 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2255 = _2232 * _2232;
    float _2259 = ((_2250 * _2250) * (_2255 + (-1.0))) + 1.0;
    float _2266 = exp2(log2(1.0 - (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * 5.0);
    float _2273 = 1.0 - _2232;
    float _2283 = (0.5 / (((_2161 * ((_2246 * _2273) + _2232)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2273) + _2232) * _2246))) * _2246;
    float _4356 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2285 = (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_2255 / ((_2259 * _2259) * 3.141590118408203125));
    float _2295 = (((((_2266 * _2183) + _918) * cbLight._m0[_2220].x) * _2285) * _2016) + ((((cbLight._m0[_2132].x * _1985) * ((_2182 * _2183) + _918)) * _2206) * _2029);
    float _2296 = (((((_2266 * _2185) + _920) * cbLight._m0[_2220].y) * _2285) * _2016) + ((((cbLight._m0[_2132].y * _1986) * ((_2182 * _2185) + _920)) * _2206) * _2029);
    float _2297 = (((((_2266 * _2186) + _921) * cbLight._m0[_2220].z) * _2285) * _2016) + ((((cbLight._m0[_2132].z * _1987) * ((_2182 * _2186) + _921)) * _2206) * _2029);
    float _2359;
    float _2361;
    float _2363;
    if (_2069)
    {
        _2359 = _2295;
        _2361 = _2296;
        _2363 = _2297;
    }
    else
    {
        uint _2365 = _1993 + 2u;
        uint _2369 = _1993 + 10u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _772) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _848;
        float _2386 = cbLight._m0[_2365].y + _849;
        float _2387 = cbLight._m0[_2365].z + _850;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2365].xyz));
        float _4367 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2399 = dot(vec3(_769, _770, _771), vec3(_2392, _2393, _2394));
        float _4378 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4389 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0)))) * 5.0);
        float _2425 = 1.0 - _2384;
        float _2435 = (0.5 / (((_2161 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2425) + _2384) * _2398))) * _2398;
        float _4400 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
        _2359 = (((((_2418 * _2183) + _918) * cbLight._m0[_2369].x) * _2437) * _2438) + _2295;
        _2361 = (((((_2418 * _2185) + _920) * cbLight._m0[_2369].y) * _2437) * _2438) + _2296;
        _2363 = (((((_2418 * _2186) + _921) * cbLight._m0[_2369].z) * _2437) * _2438) + _2297;
    }
    float _2473;
    float _2475;
    float _2477;
    if (_2087)
    {
        _2473 = _2359;
        _2475 = _2361;
        _2477 = _2363;
    }
    else
    {
        uint _2484 = _1993 + 3u;
        uint _2488 = _1993 + 11u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _772) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _848;
        float _2505 = cbLight._m0[_2484].y + _849;
        float _2506 = cbLight._m0[_2484].z + _850;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_769, _770, _771), vec3(cbLight._m0[_2484].xyz));
        float _4416 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2518 = dot(vec3(_769, _770, _771), vec3(_2511, _2512, _2513));
        float _4427 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4438 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2537 = exp2(log2(1.0 - (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0)))) * 5.0);
        float _2544 = 1.0 - _2503;
        float _2554 = (0.5 / (((_2161 * ((_2517 * _2544) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2161 * _2544) + _2503) * _2517))) * _2517;
        float _4449 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
        _2473 = (((((_2537 * _2183) + _918) * cbLight._m0[_2488].x) * _2556) * _2557) + _2359;
        _2475 = (((((_2537 * _2185) + _920) * cbLight._m0[_2488].y) * _2556) * _2557) + _2361;
        _2477 = (((((_2537 * _2186) + _921) * cbLight._m0[_2488].z) * _2556) * _2557) + _2363;
    }
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    float _2702;
    if (_1991.y == 0u)
    {
        float _2632 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2633 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2632;
        float _2634 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2632;
        float _2635 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2632;
        uvec4 _2647 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2648 = _2647.x;
        uint _2659 = uint((float(_2647.y) * floor(float(uint(cbSceneParam._m0[85u].y * _857) / _2648))) + floor(float(uint(cbSceneParam._m0[85u].x * _856) / _2648)));
        float _2669 = (log2(_2635 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2670 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        uint _2673 = uint(isnan(14.0) ? _2670 : (isnan(_2670) ? 14.0 : min(_2670, 14.0)));
        uvec4 _2678 = texelFetch(g_lightClusterGridBuffer, int(((_2673 << 2u) + (_2659 << 6u)) >> 2u));
        uint _2679 = _2678.x;
        uint _2680 = _2647.z;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        float _2788;
        float _2790;
        if (((((1u << ((_2680 >> 4u) & 15u)) + 4294967295u) & _2679) == 0u) || ((_2680 & 240u) == 0u))
        {
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
            _2788 = 0.0;
            _2790 = 0.0;
        }
        else
        {
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2789;
            float _2791;
            float _2925 = 0.0;
            float _2926 = 0.0;
            float _2927 = 0.0;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            uint _2931 = 0u;
            uint _2940;
            bool _2941;
            for (;;)
            {
                _2940 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_2931 << 2u)) >> 2u)).x;
                _2941 = _2940 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2941)
                {
                    frontier_phi_61_pred = _2925;
                    frontier_phi_61_pred_1 = _2930;
                    frontier_phi_61_pred_2 = _2929;
                    frontier_phi_61_pred_3 = _2928;
                    frontier_phi_61_pred_4 = _2927;
                    frontier_phi_61_pred_5 = _2926;
                }
                else
                {
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    uint _3055;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2927;
                    _3052 = _2928;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2940;
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    for (;;)
                    {
                        uint _3059 = uint(findLSB(_3055)) + (_2931 << 5u);
                        uint _3056 = (_3055 + 4294967295u) & _3055;
                        uint _3061 = _3059 * 48u;
                        vec4 _3075 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3061)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3061 + 3u)).x));
                        uint _3081 = (_3059 * 48u) + 4u;
                        vec4 _3094 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3100 = (_3059 * 48u) + 8u;
                        vec3 _3111 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3100)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3100 + 2u)).x));
                        float _3115 = _3075.x - _2633;
                        float _3116 = _3075.y - _2634;
                        float _3117 = _3075.z - _2635;
                        float _3118 = dot(vec3(_3115, _3116, _3117), vec3(_3115, _3116, _3117));
                        float _3121 = inversesqrt(_3118);
                        float _3122 = _3121 * _3115;
                        float _3123 = _3121 * _3116;
                        float _3124 = _3121 * _3117;
                        float _3125 = dot(vec3(_875, _878, _881), vec3(_3122, _3123, _3124));
                        float _3130 = 1.0 - (_3118 * _3075.w);
                        float _4475 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0));
                        float _3131 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
                        float _3132 = sqrt(_3118) * _3094.w;
                        float _3135 = 1.39999997615814208984375 / (_3132 + 1.39999997615814208984375);
                        float _3136 = _3135 * _3135;
                        float _3139 = ((1.0 - _3136) * _3125) + _3136;
                        float _3142 = _3132 * _3132;
                        float _3146 = ((isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0))) * _3131) / ((_3142 * 0.699999988079071044921875) + 1.0);
                        float _3150 = (-0.0) - _2633;
                        float _3151 = (-0.0) - _2634;
                        float _3152 = (-0.0) - _2635;
                        float _3156 = inversesqrt(dot(vec3(_3150, _3151, _3152), vec3(_3150, _3151, _3152)));
                        float _3157 = _3156 * _3150;
                        float _3158 = _3156 * _3151;
                        float _3159 = _3156 * _3152;
                        float _3167 = exp2(log2(1.0 / ((_3142 * 3.5) + 5.0)) * 0.25);
                        float _3168 = 1.0 - _950;
                        float _3175 = sqrt(1.0 - ((1.0 - (_3168 * _3168)) * (1.0 - (_3167 * _3167))));
                        float _3176 = _3175 * _3175;
                        float _3177 = _3176 * _3176;
                        float _3178 = _3157 + _3122;
                        float _3179 = _3158 + _3123;
                        float _3180 = _3159 + _3124;
                        float _3184 = inversesqrt(dot(vec3(_3178, _3179, _3180), vec3(_3178, _3179, _3180)));
                        float _3188 = dot(vec3(_875, _878, _881), vec3(_3157, _3158, _3159));
                        float _4491 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3192 = dot(vec3(_875, _878, _881), vec3(_3184 * _3178, _3184 * _3179, _3184 * _3180));
                        float _4502 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
                        float _3195 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
                        float _3199 = ((_3195 * _3195) * (_3177 + (-1.0))) + 1.0;
                        float _3200 = _3135 * _3176;
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3125) + _3201;
                        float _4513 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
                        float _3206 = 1.0 - _3176;
                        float _3216 = (0.5 / (((_3205 * ((_3191 * _3206) + _3176)) + 9.9999999392252902907785028219223e-09) + (((_3205 * _3206) + _3176) * _3191))) * _3205;
                        float _4524 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3227 = (((_3177 * 3.1415927410125732421875) * (isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0)))) / ((_3199 * _3199) * ((_3142 * 2.1991131305694580078125) + 3.141590118408203125))) * _3131;
                        _2984 = (_3146 * _3094.x) + _3052;
                        _2985 = (_3146 * _3094.y) + _3053;
                        _2986 = (_3146 * _3094.z) + _3054;
                        _2981 = (_3227 * _3111.x) + _3049;
                        _2982 = (_3227 * _3111.y) + _3050;
                        _2983 = (_3227 * _3111.z) + _3051;
                        if (_3056 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _2983;
                            _3052 = _2984;
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _3056;
                        }
                    }
                    frontier_phi_61_pred = _2981;
                    frontier_phi_61_pred_1 = _2986;
                    frontier_phi_61_pred_2 = _2985;
                    frontier_phi_61_pred_3 = _2984;
                    frontier_phi_61_pred_4 = _2983;
                    frontier_phi_61_pred_5 = _2982;
                }
                _2781 = frontier_phi_61_pred;
                _2791 = frontier_phi_61_pred_1;
                _2789 = frontier_phi_61_pred_2;
                _2787 = frontier_phi_61_pred_3;
                _2785 = frontier_phi_61_pred_4;
                _2783 = frontier_phi_61_pred_5;
                uint _2932 = _2931 + 1u;
                if (_2932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2925 = _2781;
                    _2926 = _2783;
                    _2927 = _2785;
                    _2928 = _2787;
                    _2929 = _2789;
                    _2930 = _2791;
                    _2931 = _2932;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
            _2788 = _2789;
            _2790 = _2791;
        }
        uvec4 _2794 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2795 = _2794.z;
        uint _2797 = (_2795 >> 8u) & 15u;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        if (((4294967295u << _2797) & _2679) == 0u)
        {
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
            _2901 = _2788;
            _2903 = _2790;
        }
        else
        {
            float _2918 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
            float _2919 = _2918 * _2633;
            float _2920 = _2918 * _2634;
            float _2921 = _2918 * _2635;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2797 < ((_2795 >> 12u) & 15u))
            {
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _3032 = _2780;
                float _3033 = _2782;
                float _3034 = _2784;
                float _3035 = _2786;
                float _3036 = _2788;
                float _3037 = _2790;
                uint _3038 = _2797;
                uint _3047;
                bool _3048;
                for (;;)
                {
                    _3047 = texelFetch(g_lightClassification, int((((_2673 << 5u) + (_2659 << 9u)) + (_3038 << 2u)) >> 2u)).x;
                    _3048 = _3047 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3048)
                    {
                        frontier_phi_67_pred = _3035;
                        frontier_phi_67_pred_1 = _3036;
                        frontier_phi_67_pred_2 = _3037;
                        frontier_phi_67_pred_3 = _3034;
                        frontier_phi_67_pred_4 = _3033;
                        frontier_phi_67_pred_5 = _3032;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        float _3247 = _3034;
                        float _3248 = _3035;
                        float _3249 = _3036;
                        float _3250 = _3037;
                        uint _3251 = _3047;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3336;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3262 = ((_3038 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3323 = (_3262 * 40u) + 20u;
                            _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            uint _3338 = (_3262 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3262 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2635, _3370.z, fma(_2634, _3370.y, _3370.x * _2633)) + _3370.w;
                            _3383 = !((fma(_2635, _3351.z, fma(_2634, _3351.y, _3351.x * _2633)) + _3351.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3277.x - _2633;
                                float _3411 = _3277.y - _2634;
                                float _3412 = _3277.z - _2635;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3278 * _3278));
                                float _4535 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
                                float _3428 = sqrt(_3413) * _3293.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_875, _878, _881))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2635, _3320.z, fma(_2634, _3320.y, _3320.x * _2633)) + _3320.w) / _3382;
                                float _3442 = (fma(_2635, _3336.z, fma(_2634, _3336.y, _3336.x * _2633)) + _3336.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4551 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _950;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2919;
                                float _3472 = _3418 - _2920;
                                float _3473 = _3419 - _2921;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2919, (-0.0) - _2920, (-0.0) - _2921));
                                float _4562 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                                float _3485 = dot(vec3(_875, _878, _881), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4573 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_875, _878, _881), vec3(_3417, _3418, _3419))) + _3494;
                                float _4584 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4595 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3522 * _3305.x;
                                frontier_phi_73_pred_1 = _3522 * _3305.y;
                                frontier_phi_73_pred_2 = _3448 * _3293.z;
                                frontier_phi_73_pred_3 = _3448 * _3293.y;
                                frontier_phi_73_pred_4 = _3448 * _3293.x;
                                frontier_phi_73_pred_5 = _3522 * _3305.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3526 = frontier_phi_73_pred;
                            _3527 = frontier_phi_73_pred_1;
                            _3531 = frontier_phi_73_pred_2;
                            _3530 = frontier_phi_73_pred_3;
                            _3529 = frontier_phi_73_pred_4;
                            _3528 = frontier_phi_73_pred_5;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3237 = _3531 + _3250;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            _3234 = _3528 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3235;
                        frontier_phi_67_pred_1 = _3236;
                        frontier_phi_67_pred_2 = _3237;
                        frontier_phi_67_pred_3 = _3234;
                        frontier_phi_67_pred_4 = _3233;
                        frontier_phi_67_pred_5 = _3232;
                    }
                    _2900 = frontier_phi_67_pred;
                    _2902 = frontier_phi_67_pred_1;
                    _2904 = frontier_phi_67_pred_2;
                    _2898 = frontier_phi_67_pred_3;
                    _2896 = frontier_phi_67_pred_4;
                    _2894 = frontier_phi_67_pred_5;
                    uint _3039 = _3038 + 1u;
                    if (_3039 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3032 = _2894;
                        _3033 = _2896;
                        _3034 = _2898;
                        _3035 = _2900;
                        _3036 = _2902;
                        _3037 = _2904;
                        _3038 = _3039;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2902;
                frontier_phi_55_56_ladder_1 = _2904;
                frontier_phi_55_56_ladder_2 = _2900;
                frontier_phi_55_56_ladder_3 = _2898;
                frontier_phi_55_56_ladder_4 = _2896;
                frontier_phi_55_56_ladder_5 = _2894;
            }
            else
            {
                frontier_phi_55_56_ladder = _2788;
                frontier_phi_55_56_ladder_1 = _2790;
                frontier_phi_55_56_ladder_2 = _2786;
                frontier_phi_55_56_ladder_3 = _2784;
                frontier_phi_55_56_ladder_4 = _2782;
                frontier_phi_55_56_ladder_5 = _2780;
            }
            _2893 = frontier_phi_55_56_ladder_5;
            _2895 = frontier_phi_55_56_ladder_4;
            _2897 = frontier_phi_55_56_ladder_3;
            _2899 = frontier_phi_55_56_ladder_2;
            _2901 = frontier_phi_55_56_ladder;
            _2903 = frontier_phi_55_56_ladder_1;
        }
        float _2908 = isnan(1.0) ? _934 : (isnan(_934) ? 1.0 : min(_934, 1.0));
        _2692 = (_2908 * _2899) + _2125;
        _2694 = (_2908 * _2901) + _2127;
        _2696 = (_2908 * _2903) + _2129;
        _2698 = ((_2893 * _918) * _2908) + _2473;
        _2700 = ((_2895 * _920) * _2908) + _2475;
        _2702 = ((_2897 * _921) * _2908) + _2477;
    }
    else
    {
        _2692 = _2125;
        _2694 = _2127;
        _2696 = _2129;
        _2698 = _2473;
        _2700 = _2475;
        _2702 = _2477;
    }
    float _4611 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4622 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _4633 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    uint _2722 = _253 + 6u;
    float _2730 = _856 / cbSceneParam._m0[86u].x;
    float _2731 = _857 / cbSceneParam._m0[86u].y;
    vec4 _2745 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, (log2((isnan(cbSceneParam._m0[77u].w) ? _791 : (isnan(_791) ? cbSceneParam._m0[77u].w : min(_791, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2747 = _2745.x;
    float _2748 = _2745.y;
    float _2749 = _2745.z;
    float _2750 = _2745.w;
    float _2843;
    float _2845;
    float _2847;
    float _2849;
    if (_791 > cbSceneParam._m0[78u].w)
    {
        float _2805 = isnan(_791) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _791 : min(cbSceneParam._m0[80u].w, _791));
        float _2806 = _2805 / _791;
        float _2817 = _2806 * _841;
        float _2818 = _842 * _2806;
        float _2819 = (-0.0) - _2818;
        float _2821 = _2806 * _843;
        float _2823 = (cbSceneParam._m0[77u].w * _2819) / _2805;
        float _2824 = _2823 + cbSceneParam._m0[79u].w;
        float _2825 = cbSceneParam._m0[79u].w - _2818;
        float _2831 = sqrt(((_2817 * _2817) + (_2818 * _2818)) + (_2821 * _2821));
        float _2834 = (1.0 - (cbSceneParam._m0[77u].w / _2805)) * _2831;
        float _2839 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2841 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2994;
        if (abs((_2819 - _2823) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2994 = ((((_2824 > 0.0) ? exp2(_2839 * _2824) : (2.0 - exp2(_2841 * _2824))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2834;
        }
        else
        {
            float _2954 = 1.0 / cbSceneParam._m0[80u].x;
            float _2955 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : max(_2824, _2825));
            float _2956 = isnan(_2825) ? _2824 : (isnan(_2824) ? _2825 : min(_2824, _2825));
            float _2965 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : min(_2955, 0.0));
            float _2966 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : min(_2956, 0.0));
            _2994 = ((abs(_2831 / _2819) * cbSceneParam._m0[80u].y) * ((((_2965 - _2966) * 2.0) - ((exp2(_2839 * (isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0)))) - exp2(_2839 * (isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0))))) * _2954)) - ((exp2(_2841 * _2965) - exp2(_2841 * _2966)) * _2954))) + (_2834 * cbSceneParam._m0[80u].z);
        }
        vec4 _2996 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2730, _2731, 1.0), 0.0);
        float _3005 = exp2((_2994 * (-1.44269502162933349609375)) * (1.0 - _2996.w));
        float _3006 = log2(_3005);
        float _3022 = log2(_2750);
        _2843 = (exp2(_3022 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].x)) * _2996.x) / cbSceneParam._m0[78u].x)) + _2747;
        _2845 = (exp2(_3022 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].y)) * _2996.y) / cbSceneParam._m0[78u].y)) + _2748;
        _2847 = (exp2(_3022 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3006 * cbSceneParam._m0[78u].z)) * _2996.z) / cbSceneParam._m0[78u].z)) + _2749;
        _2849 = _3005 * _2750;
    }
    else
    {
        _2843 = _2747;
        _2845 = _2748;
        _2847 = _2749;
        _2849 = _2750;
    }
    float _2861 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2862 = _2861 == 3.0;
    float _2863 = log2(_2849);
    float _2870 = exp2(_2863 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2692 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _934))) + ((_2698 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2871 = exp2(_2863 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (_2694 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _934))) + ((_2700 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2872 = exp2(_2863 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2696 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _934))) + ((_2702 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1742)) * cbPerFrame._m0[3u].x));
    float _2881 = (_2861 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2881 * (_2862 ? _2870 : (_2870 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.y = _2881 * (_2862 ? _2871 : (_2871 + (cbSceneParam._m0[72u].w * _2845)));
    SV_Target.z = _2881 * (_2862 ? _2872 : (_2872 + (cbSceneParam._m0[72u].w * _2847)));
    SV_Target.w = cbInstanceData._m0[_2722].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2722].w;
}


