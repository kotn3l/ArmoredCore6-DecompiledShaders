#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1378;
float _3756;
float _3757;
float _3758;
float _3759;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3768 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _413 = (_406 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _414 = (_406 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _415 = (_406 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3779 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _406) + _546;
    float _556 = ((_527.y - _547) * _406) + _547;
    float _557 = ((_527.z - _548) * _406) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _479) + _557;
    float _585 = ((((_569.x - _555) * _479) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _479) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3790 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _651 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_634 - _635) * cbMtdParam._m0[24u].z) + _635) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3801 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _652 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _659 = (_652 * ((_507.x * cbMtdParam._m0[18u].x) - _486)) + _486;
    float _660 = (_652 * ((_507.y * cbMtdParam._m0[18u].y) - _487)) + _487;
    float _661 = (_652 * ((_507.z * cbMtdParam._m0[18u].z) - _488)) + _488;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _689 = _687.x;
    float _707 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _689) * _406) + _689;
    float _724 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _707) * _479) + _707;
    float _728 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _724) * cbMtdParam._m0[19u].z) + _724;
    float _730 = _728 - (_728 * _652);
    float _734 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _754 = (_747.x * 2.0) + (-1.0);
    float _755 = (_747.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _3812 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = (_652 * (_747.z - _734)) + _734;
    float _767 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _768 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _780 = (((_754 - _767) + (cbMtdParam._m0[21u].x * _767)) * _652) + _767;
    float _781 = (((_755 - _768) + (cbMtdParam._m0[21u].x * _768)) * _652) + _768;
    float _782 = (_652 * (sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) - _593)) + _593;
    float _784 = cbMtdParam._m0[22u].x + _607.w;
    float _787 = fma(_782, _237 * NORMAL.x, fma(_781, _244 * TANGENT.x, (_230 * _222) * _780));
    float _790 = fma(_782, _237 * NORMAL.y, fma(_781, _244 * TANGENT.y, (_230 * _223) * _780));
    float _793 = fma(_782, _237 * NORMAL.z, fma(_781, _244 * TANGENT.z, (_230 * _224) * _780));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _3823 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _801 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _3845 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _3856 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3867 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _3878 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _806 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _3889 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _3900 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) - _1066)) + _1066) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _920 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _923 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _936 = _250 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_937].z;
    float _3911 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _949 = 1.0 - _806;
    float _950 = _946 * _949;
    float _951 = _947 * _949;
    float _952 = _948 * _949;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _806;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _806;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _806;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _976 = ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _798) - _878;
    float _985 = (_980 * _799) - _879;
    float _986 = (_980 * _800) - _880;
    float _990 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _3944 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_801);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1011 = (1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1012 = _1005 * _992;
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1377;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1102 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1106 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1110 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1135 = _1040 + _798;
        float _1136 = _1044 + _799;
        float _1137 = _1048 + _800;
        float _1147 = fma(_1137, cbModelParam._m0[26u].z, fma(_1136, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135)) - _1102;
        float _1148 = fma(_1137, cbModelParam._m0[27u].z, fma(_1136, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135)) - _1106;
        float _1149 = fma(_1137, cbModelParam._m0[28u].z, fma(_1136, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135)) - _1110;
        float _1153 = inversesqrt(dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149)));
        float _1166 = ((_1153 * _1147) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1102 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1153 * _1148) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1106 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1153 * _1149) / cbModelParam._m0[34u].z) + ((((((_1110 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1166, _1167, _1168), 0.0);
        float _1205 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1171.x + (-0.5));
        float _1207 = _1205 * (_1171.y + (-0.5));
        float _1208 = _1205 * (_1171.z + (-0.5));
        float _1215 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1178.x + (-0.5));
        float _1217 = _1215 * (_1178.y + (-0.5));
        float _1218 = _1215 * (_1178.z + (-0.5));
        float _1225 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1185.x + (-0.5));
        float _1227 = _1225 * (_1185.y + (-0.5));
        float _1228 = _1225 * (_1185.z + (-0.5));
        float _1235 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1192.x + (-0.5));
        float _1237 = _1235 * (_1192.y + (-0.5));
        float _1238 = _1235 * (_1192.z + (-0.5));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = _1206 * 0.5;
        float _1243 = _1216 * 0.5;
        float _1244 = _1226 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1259 = (dot(vec3(_798, _799, _800), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1269 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _3992 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_1271 + 1.0))) + _1276) * _1239;
        float _1286 = _1207 * 0.5;
        float _1287 = _1217 * 0.5;
        float _1288 = _1227 * 0.5;
        float _1289 = dot(vec3(_1286, _1287, _1288), vec3(_1286, _1287, _1288));
        float _1294 = (_1289 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1289);
        float _1302 = (dot(vec3(_798, _799, _800), vec3(_1294 * _1286, _1294 * _1287, _1294 * _1288)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1311 = sqrt(((_1287 * _1287) + (_1286 * _1286)) + (_1288 * _1288)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1312 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1313 = _1312 * 2.0;
        float _1317 = (1.0 - _1312) / (_1312 + 1.0);
        float _4025 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1327 = ((((1.0 - _1318) * (_1313 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1313 + 1.0))) + _1318) * _1240;
        float _1328 = _1208 * 0.5;
        float _1329 = _1218 * 0.5;
        float _1330 = _1228 * 0.5;
        float _1331 = dot(vec3(_1328, _1329, _1330), vec3(_1328, _1329, _1330));
        float _1336 = (_1331 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1331);
        float _1344 = (dot(vec3(_798, _799, _800), vec3(_1336 * _1328, _1336 * _1329, _1336 * _1330)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1353 = sqrt(((_1329 * _1329) + (_1328 * _1328)) + (_1330 * _1330)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1354 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1355 = _1354 * 2.0;
        float _1359 = (1.0 - _1354) / (_1354 + 1.0);
        float _4058 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1369 = ((((1.0 - _1360) * (_1355 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1355 + 1.0))) + _1360) * _1241;
        _1377 = _1208;
        _1379 = _1207;
        _1380 = _1206;
        _1381 = _1218;
        _1382 = _1217;
        _1383 = _1216;
        _1384 = _1228;
        _1385 = _1227;
        _1386 = _1226;
        _1387 = _1241;
        _1388 = _1240;
        _1389 = _1239;
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)));
    }
    else
    {
        _1377 = _1378;
        _1379 = _1378;
        _1380 = _1378;
        _1381 = _1378;
        _1382 = _1378;
        _1383 = _1378;
        _1384 = _1378;
        _1385 = _1378;
        _1386 = _1378;
        _1387 = _1378;
        _1388 = _1378;
        _1389 = _1378;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1423 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1427 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1450 = _1040 + _798;
        float _1451 = _1044 + _799;
        float _1452 = _1048 + _800;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_798, _799, _800), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4121 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_798, _799, _800), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4154 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_798, _799, _800), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4187 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1378;
        _1689 = _1378;
        _1690 = _1378;
        _1691 = _1378;
        _1692 = _1378;
        _1693 = _1378;
        _1694 = _1378;
        _1695 = _1378;
        _1696 = _1378;
        _1697 = _1378;
        _1698 = _1378;
        _1699 = _1378;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1390)) + _1390;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1391)) + _1391;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1392)) + _1392;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _984 * 0.5;
    float _1757 = _985 * 0.5;
    float _1758 = _986 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1377, _1381, _1384, _1387));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1905;
    float _1907;
    float _1909;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1872 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1876 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1880 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1883 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1886 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1889 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1917;
        if (_1883 > 0.0)
        {
            _1917 = abs((1.0 - _1872) / _1883);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1883 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1872 + 1.0) / _1883);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1917 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1886 > 0.0)
        {
            _2119 = abs((1.0 - _1876) / _1886);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1876 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2373;
        if (_1889 > 0.0)
        {
            _2373 = abs((1.0 - _1880) / _1889);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1880 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2373 = frontier_phi_38_33_ladder;
        }
        float _2375 = isnan(_2119) ? _1917 : (isnan(_1917) ? _2119 : min(_1917, _2119));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1883) + _1872;
        float _2381 = (_2376 * _1886) + _1876;
        float _2382 = (_2376 * _1889) + _1880;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1905 = frontier_phi_16_38_ladder_2;
        _1907 = frontier_phi_16_38_ladder_1;
        _1909 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1893 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1825);
        _1905 = _1893.x * cbModelParam._m0[1u].y;
        _1907 = _1893.y * cbModelParam._m0[1u].y;
        _1909 = _1893.z * cbModelParam._m0[1u].y;
    }
    float _1913 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1914 = isnan(_1913) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1913 : min(cbModelParam._m0[25u].w, _1913));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1981 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1984 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2124;
        if (_1978 > 0.0)
        {
            _2124 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1981 > 0.0)
        {
            _2400 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2613;
        if (_1984 > 0.0)
        {
            _2613 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2613 = frontier_phi_49_46_ladder;
        }
        float _2615 = isnan(_2400) ? _2124 : (isnan(_2124) ? _2400 : min(_2124, _2400));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1978) + _1967;
        float _2621 = (_2616 * _1981) + _1971;
        float _2622 = (_2616 * _1984) + _1975;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1914);
            frontier_phi_25_49_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_25_49_ladder_2;
        _2005 = frontier_phi_25_49_ladder_1;
        _2007 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1914);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2020 = (((_1011 * _960) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2003 - _1905)) + _1905);
    float _2022 = (((_1011 * _962) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2005 - _1907)) + _1907);
    float _2024 = (((_1011 * _963) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2007 - _1909)) + _1909);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _976 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2078 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2082 = _2045 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_798, _799, _800));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_798, _799, _800));
    float _4323 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4334 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2062].x * _2068) * _2103) + ((cbLight._m0[_2072].x * _2078) * _2101);
    float _2111 = ((_2068 * cbLight._m0[_2062].y) * _2103) + ((_2078 * cbLight._m0[_2072].y) * _2101);
    float _2112 = ((_2068 * cbLight._m0[_2062].z) * _2103) + ((_2078 * cbLight._m0[_2072].z) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2045 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4345 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _2156 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2344 = _2045 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4361 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2363 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2174 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2129;
        _2176 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2131;
        _2178 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2133;
    }
    uint _2181 = _2045 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _801) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2045].x + _878;
    float _2197 = cbLight._m0[_2045].y + _879;
    float _2198 = cbLight._m0[_2045].z + _880;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2045].xyz));
    float _4377 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _4388 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2210 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
    float _2211 = dot(vec3(_798, _799, _800), vec3(_2203, _2204, _2205));
    float _4399 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2203, _2204, _2205));
    float _4410 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0)))) * 5.0);
    float _2232 = 0.959999978542327880859375 - _957;
    float _2234 = 0.959999978542327880859375 - _958;
    float _2235 = 0.959999978542327880859375 - _959;
    float _2242 = 1.0 - _2195;
    float _2253 = (0.5 / (((_2210 * ((_2209 * _2242) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2242) + _2195) * _2209))) * _2209;
    float _4421 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2266 = _2045 + 9u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _801) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2082].x + _878;
    float _2280 = cbLight._m0[_2082].y + _879;
    float _2281 = cbLight._m0[_2082].z + _880;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2082].xyz));
    float _4432 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _2293 = dot(vec3(_798, _799, _800), vec3(_2286, _2287, _2288));
    float _4443 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2286, _2287, _2288));
    float _4454 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2278 * _2278;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
    float _2319 = 1.0 - _2278;
    float _2329 = (0.5 / (((_2210 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2319) + _2278) * _2292))) * _2292;
    float _4465 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    float _2341 = (((((_2312 * _2232) + _960) * cbLight._m0[_2266].x) * _2331) * _2068) + (((((_2231 * _2232) + _960) * cbLight._m0[_2181].x) * _2255) * _2078);
    float _2342 = (((((_2312 * _2234) + _962) * cbLight._m0[_2266].y) * _2331) * _2068) + (((((_2231 * _2234) + _962) * cbLight._m0[_2181].y) * _2255) * _2078);
    float _2343 = (((((_2312 * _2235) + _963) * cbLight._m0[_2266].z) * _2331) * _2068) + (((((_2231 * _2235) + _963) * cbLight._m0[_2181].z) * _2255) * _2078);
    float _2405;
    float _2407;
    float _2409;
    if (_2118)
    {
        _2405 = _2341;
        _2407 = _2342;
        _2409 = _2343;
    }
    else
    {
        uint _2411 = _2045 + 2u;
        uint _2415 = _2045 + 10u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _801) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _878;
        float _2432 = cbLight._m0[_2411].y + _879;
        float _2433 = cbLight._m0[_2411].z + _880;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2411].xyz));
        float _4476 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _2445 = dot(vec3(_798, _799, _800), vec3(_2438, _2439, _2440));
        float _4487 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4498 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) * 5.0);
        float _2471 = 1.0 - _2430;
        float _2481 = (0.5 / (((_2210 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2471) + _2430) * _2444))) * _2444;
        float _4509 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2405 = (((((_2464 * _2232) + _960) * cbLight._m0[_2415].x) * _2483) * _2484) + _2341;
        _2407 = (((((_2464 * _2234) + _962) * cbLight._m0[_2415].y) * _2483) * _2484) + _2342;
        _2409 = (((((_2464 * _2235) + _963) * cbLight._m0[_2415].z) * _2483) * _2484) + _2343;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2136)
    {
        _2519 = _2405;
        _2521 = _2407;
        _2523 = _2409;
    }
    else
    {
        uint _2530 = _2045 + 3u;
        uint _2534 = _2045 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _801) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _878;
        float _2551 = cbLight._m0[_2530].y + _879;
        float _2552 = cbLight._m0[_2530].z + _880;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2530].xyz));
        float _4525 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2564 = dot(vec3(_798, _799, _800), vec3(_2557, _2558, _2559));
        float _4536 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4547 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2210 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2590) + _2549) * _2563))) * _2563;
        float _4558 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2519 = (((((_2583 * _2232) + _960) * cbLight._m0[_2534].x) * _2602) * _2603) + _2405;
        _2521 = (((((_2583 * _2234) + _962) * cbLight._m0[_2534].y) * _2602) * _2603) + _2407;
        _2523 = (((((_2583 * _2235) + _963) * cbLight._m0[_2534].z) * _2602) * _2603) + _2409;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2043.y == 0u)
    {
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2678;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2678;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2678;
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.x;
        uint _2705 = uint((float(_2693.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2694))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2694)));
        float _2715 = (log2(_2681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2716 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        uint _2719 = uint(isnan(14.0) ? _2716 : (isnan(_2716) ? 14.0 : min(_2716, 14.0)));
        uvec4 _2724 = texelFetch(g_lightClusterGridBuffer, int(((_2719 << 2u) + (_2705 << 6u)) >> 2u));
        uint _2725 = _2724.x;
        uint _2726 = _2693.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2726 >> 4u) & 15u)) + 4294967295u) & _2725) == 0u) || ((_2726 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            float _2984 = 0.0;
            uint _2985 = 0u;
            uint _2994;
            bool _2995;
            for (;;)
            {
                _2994 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_2985 << 2u)) >> 2u)).x;
                _2995 = _2994 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2995)
                {
                    frontier_phi_66_pred = _2979;
                    frontier_phi_66_pred_1 = _2984;
                    frontier_phi_66_pred_2 = _2983;
                    frontier_phi_66_pred_3 = _2982;
                    frontier_phi_66_pred_4 = _2981;
                    frontier_phi_66_pred_5 = _2980;
                }
                else
                {
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    uint _3130;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2984;
                    _3130 = _2994;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    for (;;)
                    {
                        uint _3134 = uint(findLSB(_3130)) + (_2985 << 5u);
                        uint _3131 = (_3130 + 4294967295u) & _3130;
                        uint _3136 = _3134 * 48u;
                        vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3136)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3136 + 3u)).x));
                        uint _3156 = (_3134 * 48u) + 4u;
                        vec4 _3169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3156)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3156 + 3u)).x));
                        uint _3175 = (_3134 * 48u) + 8u;
                        vec3 _3186 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3175)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3175 + 2u)).x));
                        float _3190 = _3150.x - _2679;
                        float _3191 = _3150.y - _2680;
                        float _3192 = _3150.z - _2681;
                        float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                        float _3196 = inversesqrt(_3193);
                        float _3197 = _3196 * _3190;
                        float _3198 = _3196 * _3191;
                        float _3199 = _3196 * _3192;
                        float _3200 = dot(vec3(_917, _920, _923), vec3(_3197, _3198, _3199));
                        float _3205 = 1.0 - (_3193 * _3150.w);
                        float _4584 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3206 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
                        float _3207 = sqrt(_3193) * _3169.w;
                        float _3210 = 1.39999997615814208984375 / (_3207 + 1.39999997615814208984375);
                        float _3211 = _3210 * _3210;
                        float _3214 = ((1.0 - _3211) * _3200) + _3211;
                        float _3217 = _3207 * _3207;
                        float _3221 = ((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3206) / ((_3217 * 0.699999988079071044921875) + 1.0);
                        float _3225 = (-0.0) - _2679;
                        float _3226 = (-0.0) - _2680;
                        float _3227 = (-0.0) - _2681;
                        float _3231 = inversesqrt(dot(vec3(_3225, _3226, _3227), vec3(_3225, _3226, _3227)));
                        float _3232 = _3231 * _3225;
                        float _3233 = _3231 * _3226;
                        float _3234 = _3231 * _3227;
                        float _3242 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                        float _3243 = 1.0 - _992;
                        float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                        float _3251 = _3250 * _3250;
                        float _3252 = _3251 * _3251;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3255 = _3234 + _3199;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3263 = dot(vec3(_917, _920, _923), vec3(_3232, _3233, _3234));
                        float _4600 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                        float _3266 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3267 = dot(vec3(_917, _920, _923), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                        float _4611 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3270 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                        float _3275 = _3210 * _3251;
                        float _3276 = _3275 * _3275;
                        float _3279 = ((1.0 - _3276) * _3200) + _3276;
                        float _4622 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3281 = 1.0 - _3251;
                        float _3291 = (0.5 / (((_3280 * ((_3266 * _3281) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3280 * _3281) + _3251) * _3266))) * _3280;
                        float _4633 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3302 = (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) / ((_3274 * _3274) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125))) * _3206;
                        _3054 = (_3221 * _3169.x) + _3127;
                        _3055 = (_3221 * _3169.y) + _3128;
                        _3056 = (_3221 * _3169.z) + _3129;
                        _3051 = (_3302 * _3186.x) + _3124;
                        _3052 = (_3302 * _3186.y) + _3125;
                        _3053 = (_3302 * _3186.z) + _3126;
                        if (_3131 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3056;
                            _3130 = _3131;
                        }
                    }
                    frontier_phi_66_pred = _3051;
                    frontier_phi_66_pred_1 = _3056;
                    frontier_phi_66_pred_2 = _3055;
                    frontier_phi_66_pred_3 = _3054;
                    frontier_phi_66_pred_4 = _3053;
                    frontier_phi_66_pred_5 = _3052;
                }
                _2827 = frontier_phi_66_pred;
                _2837 = frontier_phi_66_pred_1;
                _2835 = frontier_phi_66_pred_2;
                _2833 = frontier_phi_66_pred_3;
                _2831 = frontier_phi_66_pred_4;
                _2829 = frontier_phi_66_pred_5;
                uint _2986 = _2985 + 1u;
                if (_2986 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2979 = _2827;
                    _2980 = _2829;
                    _2981 = _2831;
                    _2982 = _2833;
                    _2983 = _2835;
                    _2984 = _2837;
                    _2985 = _2986;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        if (((4294967295u << _2843) & _2725) == 0u)
        {
            _2947 = _2826;
            _2949 = _2828;
            _2951 = _2830;
            _2953 = _2832;
            _2955 = _2834;
            _2957 = _2836;
        }
        else
        {
            float _2972 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
            float _2973 = _2972 * _2679;
            float _2974 = _2972 * _2680;
            float _2975 = _2972 * _2681;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _3107 = _2826;
                float _3108 = _2828;
                float _3109 = _2830;
                float _3110 = _2832;
                float _3111 = _2834;
                float _3112 = _2836;
                uint _3113 = _2843;
                uint _3122;
                bool _3123;
                for (;;)
                {
                    _3122 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                    _3123 = _3122 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3123)
                    {
                        frontier_phi_77_pred = _3112;
                        frontier_phi_77_pred_1 = _3111;
                        frontier_phi_77_pred_2 = _3110;
                        frontier_phi_77_pred_3 = _3109;
                        frontier_phi_77_pred_4 = _3108;
                        frontier_phi_77_pred_5 = _3107;
                    }
                    else
                    {
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        float _3334 = _3112;
                        uint _3335 = _3122;
                        uint _3336;
                        vec4 _3361;
                        float _3362;
                        vec4 _3377;
                        vec3 _3389;
                        vec4 _3404;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3346 = ((_3113 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3335));
                            _3336 = (_3335 + 4294967295u) & _3335;
                            uint _3348 = _3346 * 40u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            _3362 = _3361.w;
                            uint _3364 = (_3346 * 40u) + 4u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3379 = (_3346 * 40u) + 8u;
                            _3389 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x));
                            uint _3391 = (_3346 * 40u) + 16u;
                            _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            uint _3406 = (_3346 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3346 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3346 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2681, _3453.z, fma(_2680, _3453.y, _3453.x * _2679)) + _3453.w;
                            _3466 = !((fma(_2681, _3434.z, fma(_2680, _3434.y, _3434.x * _2679)) + _3434.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3361.x - _2679;
                                float _3494 = _3361.y - _2680;
                                float _3495 = _3361.z - _2681;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3362 * _3362));
                                float _4644 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
                                float _3511 = sqrt(_3496) * _3377.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_917, _920, _923))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2681, _3404.z, fma(_2680, _3404.y, _3404.x * _2679)) + _3404.w) / _3465;
                                float _3525 = (fma(_2681, _3419.z, fma(_2680, _3419.y, _3419.x * _2679)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4660 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _992;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _2973;
                                float _3555 = _3501 - _2974;
                                float _3556 = _3502 - _2975;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_917, _920, _923), vec3((-0.0) - _2973, (-0.0) - _2974, (-0.0) - _2975));
                                float _4671 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3568 = dot(vec3(_917, _920, _923), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4682 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_917, _920, _923), vec3(_3500, _3501, _3502))) + _3577;
                                float _4693 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4704 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3531 * _3377.y;
                                frontier_phi_83_pred_1 = _3531 * _3377.x;
                                frontier_phi_83_pred_2 = _3605 * _3389.z;
                                frontier_phi_83_pred_3 = _3605 * _3389.y;
                                frontier_phi_83_pred_4 = _3605 * _3389.x;
                                frontier_phi_83_pred_5 = _3531 * _3377.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_83_pred;
                            _3612 = frontier_phi_83_pred_1;
                            _3611 = frontier_phi_83_pred_2;
                            _3610 = frontier_phi_83_pred_3;
                            _3609 = frontier_phi_83_pred_4;
                            _3614 = frontier_phi_83_pred_5;
                            _3319 = _3612 + _3332;
                            _3320 = _3613 + _3333;
                            _3321 = _3614 + _3334;
                            _3316 = _3609 + _3329;
                            _3317 = _3610 + _3330;
                            _3318 = _3611 + _3331;
                            if (_3336 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3321;
                                _3335 = _3336;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3321;
                        frontier_phi_77_pred_1 = _3320;
                        frontier_phi_77_pred_2 = _3319;
                        frontier_phi_77_pred_3 = _3318;
                        frontier_phi_77_pred_4 = _3317;
                        frontier_phi_77_pred_5 = _3316;
                    }
                    _2958 = frontier_phi_77_pred;
                    _2956 = frontier_phi_77_pred_1;
                    _2954 = frontier_phi_77_pred_2;
                    _2952 = frontier_phi_77_pred_3;
                    _2950 = frontier_phi_77_pred_4;
                    _2948 = frontier_phi_77_pred_5;
                    uint _3114 = _3113 + 1u;
                    if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3107 = _2948;
                        _3108 = _2950;
                        _3109 = _2952;
                        _3110 = _2954;
                        _3111 = _2956;
                        _3112 = _2958;
                        _3113 = _3114;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            else
            {
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            _2947 = frontier_phi_58_59_ladder_5;
            _2949 = frontier_phi_58_59_ladder_4;
            _2951 = frontier_phi_58_59_ladder;
            _2953 = frontier_phi_58_59_ladder_3;
            _2955 = frontier_phi_58_59_ladder_2;
            _2957 = frontier_phi_58_59_ladder_1;
        }
        float _2962 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _2738 = (_2962 * _2953) + _2174;
        _2740 = (_2962 * _2955) + _2176;
        _2742 = (_2962 * _2957) + _2178;
        _2744 = ((_2947 * _960) * _2962) + _2519;
        _2746 = ((_2949 * _962) * _2962) + _2521;
        _2748 = ((_2951 * _963) * _2962) + _2523;
    }
    else
    {
        _2738 = _2174;
        _2740 = _2176;
        _2742 = _2178;
        _2744 = _2519;
        _2746 = _2521;
        _2748 = _2523;
    }
    float _4720 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _4731 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _4742 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _2765 = ((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2738 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _976))) + ((_2744 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2766 = ((isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2740 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _976))) + ((_2746 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2742 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _976))) + ((_2748 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _2768 = _250 + 6u;
    float _2776 = _898 / cbSceneParam._m0[86u].x;
    float _2777 = _899 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2889;
    float _2891;
    float _2893;
    float _2895;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _2852 = _2851 / _820;
        float _2863 = _2852 * _871;
        float _2864 = _872 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2867 = _2852 * _873;
        float _2869 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2870 = _2869 + cbSceneParam._m0[79u].w;
        float _2871 = cbSceneParam._m0[79u].w - _2864;
        float _2877 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2867 * _2867));
        float _2880 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2877;
        float _2885 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2887 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3064;
        if (abs((_2865 - _2869) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3064 = ((((_2870 > 0.0) ? exp2(_2885 * _2870) : (2.0 - exp2(_2887 * _2870))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2880;
        }
        else
        {
            float _3008 = 1.0 / cbSceneParam._m0[80u].x;
            float _3009 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : max(_2870, _2871));
            float _3010 = isnan(_2871) ? _2870 : (isnan(_2870) ? _2871 : min(_2870, _2871));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            float _3020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : min(_3010, 0.0));
            _3064 = ((abs(_2877 / _2865) * cbSceneParam._m0[80u].y) * ((((_3019 - _3020) * 2.0) - ((exp2(_2885 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)))) - exp2(_2885 * (isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0))))) * _3008)) - ((exp2(_2887 * _3019) - exp2(_2887 * _3020)) * _3008))) + (_2880 * cbSceneParam._m0[80u].z);
        }
        vec4 _3066 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3075 = exp2((_3064 * (-1.44269502162933349609375)) * (1.0 - _3066.w));
        float _3076 = log2(_3075);
        float _3092 = log2(_2796);
        _2889 = (exp2(_3092 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].x)) * _3066.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2891 = (exp2(_3092 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].y)) * _3066.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2893 = (exp2(_3092 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3076 * cbSceneParam._m0[78u].z)) * _3066.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2895 = _3075 * _2796;
    }
    else
    {
        _2889 = _2793;
        _2891 = _2794;
        _2893 = _2795;
        _2895 = _2796;
    }
    bool _3102;
    vec4 _2905;
    vec4 _2927;
    float _2929;
    float _2933;
    float _2934;
    float _2935;
    float _2936;
    bool _2946;
    for (;;)
    {
        _2905 = cbMatDynParam._m0[0u];
        float _2907 = roundEven(_2905.y);
        bool _2908 = _2907 == 3.0;
        float _2909 = log2(_2895);
        float _2916 = exp2(_2909 * cbSceneParam._m0[78u].x) * _2765;
        float _2917 = exp2(_2909 * cbSceneParam._m0[78u].y) * _2766;
        float _2918 = exp2(_2909 * cbSceneParam._m0[78u].z) * _2767;
        float _2925 = _887 + (-0.5);
        _2927 = cbMtdParam._m0[1u];
        _2929 = _2927.y * _2925;
        float _2932 = (_2907 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2933 = _2932 * (_2908 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2889)));
        _2934 = _2932 * (_2908 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2891)));
        _2935 = _2932 * (_2908 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2893)));
        _2936 = _2925 * 0.999000012874603271484375;
        _2946 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2946)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2936) < 0.5)
            {
                _3102 = true;
                break;
            }
        }
        uint _3043 = _936 + uint(_2905.w);
        if ((cbInstanceData._m0[_3043].w < 1.0) && ((cbInstanceData._m0[_3043].w + _2936) < 0.5))
        {
            _3102 = true;
            break;
        }
        if ((_2929 + 1.0) < _2927.x)
        {
            _3102 = true;
            break;
        }
        _3102 = false;
        break;
    }
    float _3307;
    if (_3102)
    {
        discard_state = true;
        _3307 = 0.0;
    }
    else
    {
        _3307 = cbInstanceData._m0[_2768].w;
    }
    SV_Target.x = _2933;
    SV_Target.y = _2934;
    SV_Target.z = _2935;
    SV_Target.w = _3307;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
    discard_exit();
}


