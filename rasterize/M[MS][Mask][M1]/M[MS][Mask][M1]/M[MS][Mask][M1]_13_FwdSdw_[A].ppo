#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1331;
float _3995;
float _3996;
float _3997;
float _3998;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4007 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4018 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4029 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _333 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _338 = _333.x * cbMtdParam._m0[11u].x;
    float _339 = _333.y * cbMtdParam._m0[11u].y;
    float _340 = _333.z * cbMtdParam._m0[11u].z;
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4040 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _446 = (_439 * ((_359.x * cbMtdParam._m0[12u].x) - _338)) + _338;
    float _447 = (_439 * ((_359.y * cbMtdParam._m0[12u].y) - _339)) + _339;
    float _448 = (_439 * ((_359.z * cbMtdParam._m0[12u].z) - _340)) + _340;
    float _452 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _446;
    float _455 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _447;
    float _458 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _448;
    float _465 = ((_446 - _452) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _452;
    float _466 = ((_447 - _455) * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) + _455;
    float _467 = ((_448 - _458) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) + _458;
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _510 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _529 = _527.x;
    float _530 = _527.y;
    float _531 = _527.z;
    float _540 = ((_510.z - _531) * _439) + _531;
    float _543 = ((((_510.x - _529) * _439) + _529) * 2.0) + (-1.0);
    float _544 = ((((_510.y - _530) * _439) + _530) * 2.0) + (-1.0);
    float _545 = dot(vec2(_543, _544), vec2(_543, _544));
    float _4051 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _550 = sqrt(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _593 = _591.x;
    float _594 = 1.0 - _593;
    float _610 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_593 - _594) * cbMtdParam._m0[24u].z) + _594) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4062 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _618 = (_611 * (cbMtdParam._m0[17u].x - _465)) + _465;
    float _619 = (_611 * (cbMtdParam._m0[17u].y - _466)) + _466;
    float _620 = (_611 * (cbMtdParam._m0[17u].z - _467)) + _467;
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _648 = _646.x;
    float _666 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _648) * _439) + _648;
    float _670 = ((_632.x - _666) * cbMtdParam._m0[19u].z) + _666;
    float _672 = _670 - (_670 * _611);
    float _677 = (((_485.z - _540) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _540;
    float _681 = ((_566.z - _677) * cbMtdParam._m0[19u].w) + _677;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _701 = (_694.x * 2.0) + (-1.0);
    float _702 = (_694.y * 2.0) + (-1.0);
    float _703 = dot(vec2(_701, _702), vec2(_701, _702));
    float _4073 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _711 = (_611 * (_694.z - _681)) + _681;
    float _720 = (_543 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_485.x * 2.0) + (-1.0)))) + (((_566.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _721 = (_544 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_485.y * 2.0) + (-1.0)))) + (((_566.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _733 = (((_701 - _720) + (cbMtdParam._m0[21u].x * _720)) * _611) + _720;
    float _734 = (((_702 - _721) + (cbMtdParam._m0[21u].x * _721)) * _611) + _721;
    float _735 = (_611 * (sqrt(1.0 - (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) - _550)) + _550;
    float _737 = cbMtdParam._m0[22u].x + _566.w;
    float _740 = fma(_735, _242 * NORMAL.x, fma(_734, _249 * TANGENT.x, (_235 * _227) * _733));
    float _743 = fma(_735, _242 * NORMAL.y, fma(_734, _249 * TANGENT.y, (_235 * _228) * _733));
    float _746 = fma(_735, _242 * NORMAL.z, fma(_734, _249 * TANGENT.z, (_235 * _229) * _733));
    float _750 = inversesqrt(dot(vec3(_740, _743, _746), vec3(_740, _743, _746)));
    float _751 = _750 * _740;
    float _752 = _750 * _743;
    float _753 = _750 * _746;
    float _4084 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _754 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _4106 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _4117 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _4128 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4139 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _759 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _773 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _824 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _814);
    float _825 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _814);
    float _826 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _814);
    float _830 = inversesqrt(dot(vec3(_824, _825, _826), vec3(_824, _825, _826)));
    float _831 = _824 * _830;
    float _832 = _825 * _830;
    float _833 = _826 * _830;
    vec4 _838 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _840 = _838.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1012 = sqrt(((_824 * _824) + (_825 * _825)) + (_826 * _826));
        float _1018 = (cbMatDynParam._m0[5u].x * _1012) + cbMatDynParam._m0[5u].y;
        float _4150 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1023 = (cbMatDynParam._m0[5u].z * _1012) + cbMatDynParam._m0[5u].w;
        float _4161 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) - _1019)) + _1019) < ((_840 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _870 = fma(_753, cbSceneParam._m0[5u].z, fma(_752, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _751));
    float _873 = fma(_753, cbSceneParam._m0[6u].z, fma(_752, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _751));
    float _876 = fma(_753, cbSceneParam._m0[7u].z, fma(_752, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _751));
    uint _889 = _276 + 9u;
    uint _890 = _889 + uint(cbMatDynParam._m0[0u].w);
    float _896 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * cbInstanceData._m0[_890].x;
    float _897 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_890].y;
    float _898 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_890].z;
    float _4172 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _899 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _900 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _901 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _902 = 1.0 - _759;
    float _903 = _899 * _902;
    float _904 = _900 * _902;
    float _905 = _901 * _902;
    float _910 = (_899 + (-0.039999999105930328369140625)) * _759;
    float _911 = (_900 + (-0.039999999105930328369140625)) * _759;
    float _912 = (_901 + (-0.039999999105930328369140625)) * _759;
    float _913 = _910 + 0.039999999105930328369140625;
    float _915 = _911 + 0.039999999105930328369140625;
    float _916 = _912 + 0.039999999105930328369140625;
    vec4 _925 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _929 = ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * TEXCOORD_5.w) * _925.x;
    float _930 = dot(vec3(_751, _752, _753), vec3(_831, _832, _833));
    float _933 = _930 * 2.0;
    float _937 = (_933 * _751) - _831;
    float _938 = (_933 * _752) - _832;
    float _939 = (_933 * _753) - _833;
    float _943 = abs(dot(vec3(_831, _832, _833), vec3(_751, _752, _753)));
    float _4205 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _945 = sqrt(_754);
    float _958 = exp2((_945 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_945 * 3.0));
    float _964 = (1.0 - _958) * ((_945 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _965 = _958 * _945;
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1330;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1055 = fma(_1001, cbModelParam._m0[26u].z, fma(_997, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993));
        float _1059 = fma(_1001, cbModelParam._m0[27u].z, fma(_997, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993));
        float _1063 = fma(_1001, cbModelParam._m0[28u].z, fma(_997, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993));
        float _1088 = _993 + _751;
        float _1089 = _997 + _752;
        float _1090 = _1001 + _753;
        float _1100 = fma(_1090, cbModelParam._m0[26u].z, fma(_1089, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1088)) - _1055;
        float _1101 = fma(_1090, cbModelParam._m0[27u].z, fma(_1089, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1088)) - _1059;
        float _1102 = fma(_1090, cbModelParam._m0[28u].z, fma(_1089, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1088)) - _1063;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1055 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1059 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[34u].z) + ((((((_1063 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1145 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1158 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1124.x + (-0.5));
        float _1160 = _1158 * (_1124.y + (-0.5));
        float _1161 = _1158 * (_1124.z + (-0.5));
        float _1168 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1131.x + (-0.5));
        float _1170 = _1168 * (_1131.y + (-0.5));
        float _1171 = _1168 * (_1131.z + (-0.5));
        float _1178 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1138.x + (-0.5));
        float _1180 = _1178 * (_1138.y + (-0.5));
        float _1181 = _1178 * (_1138.z + (-0.5));
        float _1188 = exp2((_1145.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1145.x + (-0.5));
        float _1190 = _1188 * (_1145.y + (-0.5));
        float _1191 = _1188 * (_1145.z + (-0.5));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = _1159 * 0.5;
        float _1196 = _1169 * 0.5;
        float _1197 = _1179 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1212 = (dot(vec3(_751, _752, _753), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1222 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _4253 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1224 + 1.0))) + _1229) * _1192;
        float _1239 = _1160 * 0.5;
        float _1240 = _1170 * 0.5;
        float _1241 = _1180 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(_751, _752, _753), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4264 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1193 + 9.9999997473787516355514526367188e-06);
        float _4275 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _4286 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) * (_1266 + 1.0))) + _1271) * _1193;
        float _1281 = _1161 * 0.5;
        float _1282 = _1171 * 0.5;
        float _1283 = _1181 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(_751, _752, _753), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _4319 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1308 + 1.0))) + _1313) * _1194;
        _1330 = _1161;
        _1332 = _1160;
        _1333 = _1159;
        _1334 = _1171;
        _1335 = _1170;
        _1336 = _1169;
        _1337 = _1181;
        _1338 = _1180;
        _1339 = _1179;
        _1340 = _1194;
        _1341 = _1193;
        _1342 = _1192;
        _1343 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
        _1344 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
    }
    else
    {
        _1330 = _1331;
        _1332 = _1331;
        _1333 = _1331;
        _1334 = _1331;
        _1335 = _1331;
        _1336 = _1331;
        _1337 = _1331;
        _1338 = _1331;
        _1339 = _1331;
        _1340 = _1331;
        _1341 = _1331;
        _1342 = _1331;
        _1343 = 0.0;
        _1344 = 0.0;
        _1345 = 0.0;
    }
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1373 = fma(_1001, cbModelParam._m0[30u].z, fma(_997, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _993));
        float _1377 = fma(_1001, cbModelParam._m0[31u].z, fma(_997, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _993));
        float _1381 = fma(_1001, cbModelParam._m0[32u].z, fma(_997, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _993));
        float _1404 = _993 + _751;
        float _1405 = _997 + _752;
        float _1406 = _1001 + _753;
        float _1416 = fma(_1406, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1404)) - _1373;
        float _1417 = fma(_1406, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1404)) - _1377;
        float _1418 = fma(_1406, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1404)) - _1381;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1373 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1377 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[35u].z) + ((((((_1381 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1472 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1439.x + (-0.5));
        float _1474 = _1472 * (_1439.y + (-0.5));
        float _1475 = _1472 * (_1439.z + (-0.5));
        float _1482 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1446.x + (-0.5));
        float _1484 = _1482 * (_1446.y + (-0.5));
        float _1485 = _1482 * (_1446.z + (-0.5));
        float _1492 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1453.x + (-0.5));
        float _1494 = _1492 * (_1453.y + (-0.5));
        float _1495 = _1492 * (_1453.z + (-0.5));
        float _1502 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1460.x + (-0.5));
        float _1504 = _1502 * (_1460.y + (-0.5));
        float _1505 = _1502 * (_1460.z + (-0.5));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = _1473 * 0.5;
        float _1510 = _1483 * 0.5;
        float _1511 = _1493 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_751, _752, _753), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4382 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1536 + 1.0))) + _1541) * _1506;
        float _1551 = _1474 * 0.5;
        float _1552 = _1484 * 0.5;
        float _1553 = _1494 * 0.5;
        float _1554 = dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553));
        float _1559 = (_1554 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1554);
        float _1567 = (dot(vec3(_751, _752, _753), vec3(_1559 * _1551, _1559 * _1552, _1559 * _1553)) + 1.0) * 0.5;
        float _4393 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1576 = sqrt(((_1552 * _1552) + (_1551 * _1551)) + (_1553 * _1553)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4404 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _1578 = _1577 * 2.0;
        float _1582 = (1.0 - _1577) / (_1577 + 1.0);
        float _4415 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1592 = ((((1.0 - _1583) * (_1578 + 2.0)) * exp2(log2(isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) * (_1578 + 1.0))) + _1583) * _1507;
        float _1593 = _1475 * 0.5;
        float _1594 = _1485 * 0.5;
        float _1595 = _1495 * 0.5;
        float _1596 = dot(vec3(_1593, _1594, _1595), vec3(_1593, _1594, _1595));
        float _1601 = (_1596 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1596);
        float _1609 = (dot(vec3(_751, _752, _753), vec3(_1601 * _1593, _1601 * _1594, _1601 * _1595)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1618 = sqrt(((_1594 * _1594) + (_1593 * _1593)) + (_1595 * _1595)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1620 = _1619 * 2.0;
        float _1624 = (1.0 - _1619) / (_1619 + 1.0);
        float _4448 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1634 = ((((1.0 - _1625) * (_1620 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1620 + 1.0))) + _1625) * _1508;
        _1642 = _1475;
        _1643 = _1474;
        _1644 = _1473;
        _1645 = _1485;
        _1646 = _1484;
        _1647 = _1483;
        _1648 = _1495;
        _1649 = _1494;
        _1650 = _1493;
        _1651 = _1508;
        _1652 = _1507;
        _1653 = _1506;
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0)));
        _1656 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)));
    }
    else
    {
        _1642 = _1331;
        _1643 = _1331;
        _1644 = _1331;
        _1645 = _1331;
        _1646 = _1331;
        _1647 = _1331;
        _1648 = _1331;
        _1649 = _1331;
        _1650 = _1331;
        _1651 = _1331;
        _1652 = _1331;
        _1653 = _1331;
        _1654 = 0.0;
        _1655 = 0.0;
        _1656 = 0.0;
    }
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1343)) + _1343;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1344)) + _1344;
    float _1668 = (cbModelParam._m0[1u].x * (_1656 - _1345)) + _1345;
    float _1689 = fma(_1668, cbSceneParam._m0[89u].z, fma(_1667, cbSceneParam._m0[89u].y, _1666 * cbSceneParam._m0[89u].x));
    float _1692 = fma(_1668, cbSceneParam._m0[90u].z, fma(_1667, cbSceneParam._m0[90u].y, _1666 * cbSceneParam._m0[90u].x));
    float _1695 = fma(_1668, cbSceneParam._m0[91u].z, fma(_1667, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1666));
    float _1710 = _937 * 0.5;
    float _1711 = _938 * 0.5;
    float _1712 = _939 * 0.5;
    float _1713 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1644, _1647, _1650, _1653));
    float _1716 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1719 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1753;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1726 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1330, _1334, _1337, _1340));
        float _1730 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1332, _1335, _1338, _1341));
        float _1734 = dot(vec4(_1710, _1711, _1712, 1.0), vec4(_1333, _1336, _1339, _1342));
        float _1741 = dot(vec4(cbModelParam._m0[39u]), vec4(_1710, _1711, _1712, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)), isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1764;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1755 = dot(vec4(cbModelParam._m0[40u]), vec4(_1710, _1711, _1712, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1755) ? 0.0 : (isnan(0.0) ? _1755 : max(0.0, _1755))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1768 = (_1764 * cbModelParam._m0[1u].x) + (_1753 * (1.0 - cbModelParam._m0[1u].x));
    float _1778 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _754);
    float _1779 = isnan(_1778) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1778 : min(cbModelParam._m0[25u].z, _1778));
    float _1860;
    float _1862;
    float _1864;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1827 = fma(_1001, cbModelParam._m0[13u].z, fma(_997, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993)) + cbModelParam._m0[13u].w;
        float _1831 = fma(_1001, cbModelParam._m0[14u].z, fma(_997, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993)) + cbModelParam._m0[14u].w;
        float _1835 = fma(_1001, cbModelParam._m0[15u].z, fma(_997, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993)) + cbModelParam._m0[15u].w;
        float _1838 = fma(_939, cbModelParam._m0[13u].z, fma(_938, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _937));
        float _1841 = fma(_939, cbModelParam._m0[14u].z, fma(_938, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _937));
        float _1844 = fma(_939, cbModelParam._m0[15u].z, fma(_938, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _937));
        float _1872;
        if (_1838 > 0.0)
        {
            _1872 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1872 = frontier_phi_17_15_ladder;
        }
        float _2044;
        if (_1841 > 0.0)
        {
            _2044 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2044 = frontier_phi_26_22_ladder;
        }
        float _2339;
        if (_1844 > 0.0)
        {
            _2339 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2339 = frontier_phi_38_33_ladder;
        }
        float _2341 = isnan(_2044) ? _1872 : (isnan(_1872) ? _2044 : min(_1872, _2044));
        float _2342 = isnan(_2339) ? _2341 : (isnan(_2341) ? _2339 : min(_2341, _2339));
        float _2346 = (_2342 * _1838) + _1827;
        float _2347 = (_2342 * _1841) + _1831;
        float _2348 = (_2342 * _1844) + _1835;
        float _2349 = _2342 * 9.9999997473787516355514526367188e-05;
        float _2351 = (-1.0) - _2349;
        float _2353 = _2349 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2348 > _2353) || ((_2348 < _2351) || ((_2347 > _2353) || ((_2347 < _2351) || ((_2346 < _2351) || (_2346 > _2353))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2493 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2348, cbModelParam._m0[9u].z, fma(_2347, cbModelParam._m0[9u].y, _2346 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2348, cbModelParam._m0[10u].z, fma(_2347, cbModelParam._m0[10u].y, _2346 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2348, cbModelParam._m0[11u].z, fma(_2347, cbModelParam._m0[11u].y, _2346 * cbModelParam._m0[11u].x))), _1779);
            frontier_phi_16_38_ladder = _2493.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2493.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2493.x * cbModelParam._m0[1u].y;
        }
        _1860 = frontier_phi_16_38_ladder_2;
        _1862 = frontier_phi_16_38_ladder_1;
        _1864 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1848 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_937, _938, _939), _1779);
        _1860 = _1848.x * cbModelParam._m0[1u].y;
        _1862 = _1848.y * cbModelParam._m0[1u].y;
        _1864 = _1848.z * cbModelParam._m0[1u].y;
    }
    float _1868 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _754);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1868 : min(cbModelParam._m0[25u].w, _1868));
    float _1959;
    float _1961;
    float _1963;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1923 = fma(_1001, cbModelParam._m0[21u].z, fma(_997, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993)) + cbModelParam._m0[21u].w;
        float _1927 = fma(_1001, cbModelParam._m0[22u].z, fma(_997, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993)) + cbModelParam._m0[22u].w;
        float _1931 = fma(_1001, cbModelParam._m0[23u].z, fma(_997, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993)) + cbModelParam._m0[23u].w;
        float _1934 = fma(_939, cbModelParam._m0[21u].z, fma(_938, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _937));
        float _1937 = fma(_939, cbModelParam._m0[22u].z, fma(_938, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _937));
        float _1940 = fma(_939, cbModelParam._m0[23u].z, fma(_938, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _937));
        float _2049;
        if (_1934 > 0.0)
        {
            _2049 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2049 = frontier_phi_28_24_ladder;
        }
        float _2366;
        if (_1937 > 0.0)
        {
            _2366 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2366 = frontier_phi_40_35_ladder;
        }
        float _2704;
        if (_1940 > 0.0)
        {
            _2704 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2704 = frontier_phi_50_47_ladder;
        }
        float _2706 = isnan(_2366) ? _2049 : (isnan(_2049) ? _2366 : min(_2049, _2366));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _1934) + _1923;
        float _2712 = (_2707 * _1937) + _1927;
        float _2713 = (_2707 * _1940) + _1931;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2715 = (-1.0) - _2714;
        float _2717 = _2714 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2713 > _2717) || ((_2713 < _2715) || ((_2712 > _2717) || ((_2712 < _2715) || ((_2711 < _2715) || (_2711 > _2717))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2835 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2713, cbModelParam._m0[17u].z, fma(_2712, cbModelParam._m0[17u].y, _2711 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2713, cbModelParam._m0[18u].z, fma(_2712, cbModelParam._m0[18u].y, _2711 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2713, cbModelParam._m0[19u].z, fma(_2712, cbModelParam._m0[19u].y, _2711 * cbModelParam._m0[19u].x))), _1869);
            frontier_phi_25_50_ladder = _2835.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2835.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2835.x * cbModelParam._m0[1u].z;
        }
        _1959 = frontier_phi_25_50_ladder_2;
        _1961 = frontier_phi_25_50_ladder_1;
        _1963 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_937, _938, _939), _1869);
        _1959 = _1943.x * cbModelParam._m0[1u].z;
        _1961 = _1943.y * cbModelParam._m0[1u].z;
        _1963 = _1943.z * cbModelParam._m0[1u].z;
    }
    float _1976 = (((_964 * _913) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1959 - _1860)) + _1860);
    float _1978 = (((_964 * _915) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1961 - _1862)) + _1862);
    float _1980 = (((_964 * _916) + _965) * _929) * ((cbModelParam._m0[1u].w * (_1963 - _1864)) + _1864);
    float _1983 = fma(_1980, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1976 * cbSceneParam._m0[89u].x));
    float _1986 = fma(_1980, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1976 * cbSceneParam._m0[90u].x));
    float _1989 = fma(_1980, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, _1976 * cbSceneParam._m0[91u].x));
    float _2023 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2027 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2035 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2036 = _2023 / _2035;
    float _2037 = _2027 / _2035;
    float _2038 = _2031 / _2035;
    float _2185;
    float _2186;
    float _2187;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2065 = ((uint(_2038 > cbSceneParam._m0[59u].y) + uint(_2038 > cbSceneParam._m0[59u].x)) + uint(_2038 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2066 = _2065 + 43u;
        uint _2074 = _2065 + 44u;
        uint _2082 = _2065 + 45u;
        uint _2090 = _2065 + 46u;
        float _2101 = fma(_2035, cbSceneParam._m0[_2066].w, fma(_2031, cbSceneParam._m0[_2066].z, fma(_2027, cbSceneParam._m0[_2066].y, _2023 * cbSceneParam._m0[_2066].x)));
        float _2105 = fma(_2035, cbSceneParam._m0[_2074].w, fma(_2031, cbSceneParam._m0[_2074].z, fma(_2027, cbSceneParam._m0[_2074].y, _2023 * cbSceneParam._m0[_2074].x)));
        float _2113 = fma(_2035, cbSceneParam._m0[_2090].w, fma(_2031, cbSceneParam._m0[_2090].z, fma(_2027, cbSceneParam._m0[_2090].y, _2023 * cbSceneParam._m0[_2090].x)));
        float _2118 = cbSceneParam._m0[33u].z * _2113;
        float _2120 = cbSceneParam._m0[33u].w * _2113;
        float _2123 = fma(_2035, cbSceneParam._m0[_2082].w, fma(_2031, cbSceneParam._m0[_2082].z, fma(_2027, cbSceneParam._m0[_2082].y, _2023 * cbSceneParam._m0[_2082].x))) / _2113;
        float _2171 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
        float _4574 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
        float _2178 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2118 + _2101) / _2113, (_2120 + _2105) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2120 + _2101) / _2113, (_2105 - _2118) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2118) / _2113, (_2105 - _2120) / _2113), _2123), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2101 - _2120) / _2113, (_2118 + _2105) / _2113), _2123), 0.0)).x), vec4(0.25)));
        _2185 = 1.0 - (_2178 * cbSceneParam._m0[34u].x);
        _2186 = 1.0 - (_2178 * cbSceneParam._m0[34u].y);
        _2187 = 1.0 - (_2178 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2185 = 1.0;
        _2186 = 1.0;
        _2187 = 1.0;
    }
    float _2251;
    float _2253;
    float _2255;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2239 = fma(_2035, cbSceneParam._m0[63u].w, fma(_2031, cbSceneParam._m0[63u].z, fma(_2027, cbSceneParam._m0[63u].y, _2023 * cbSceneParam._m0[63u].x)));
        float _2240 = fma(_2035, cbSceneParam._m0[60u].w, fma(_2031, cbSceneParam._m0[60u].z, fma(_2027, cbSceneParam._m0[60u].y, _2023 * cbSceneParam._m0[60u].x))) / _2239;
        float _2241 = fma(_2035, cbSceneParam._m0[61u].w, fma(_2031, cbSceneParam._m0[61u].z, fma(_2027, cbSceneParam._m0[61u].y, _2023 * cbSceneParam._m0[61u].x))) / _2239;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2240 >= cbSceneParam._m0[64u].x) && (_2241 >= cbSceneParam._m0[64u].y)) && (_2240 <= cbSceneParam._m0[64u].z)) && (_2241 <= cbSceneParam._m0[64u].w))
        {
            float _2379 = fma(_2035, cbSceneParam._m0[62u].w, fma(_2031, cbSceneParam._m0[62u].z, fma(_2027, cbSceneParam._m0[62u].y, _2023 * cbSceneParam._m0[62u].x))) / _2239;
            float _2383 = isnan(cbSceneParam._m0[41u].w) ? _2379 : (isnan(_2379) ? cbSceneParam._m0[41u].w : max(_2379, cbSceneParam._m0[41u].w));
            float _2426 = (cbSceneParam._m0[33u].x - sqrt(((_2037 * _2037) + (_2036 * _2036)) + (_2038 * _2038))) * cbSceneParam._m0[33u].y;
            float _4590 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
            float _2433 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2240, cbSceneParam._m0[33u].w + _2241), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2240, _2241 - cbSceneParam._m0[33u].z), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].z, _2241 - cbSceneParam._m0[33u].w), _2383), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2240 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2241), _2383), 0.0)).x), vec4(0.25)));
            float _2437 = 1.0 - (_2433 * cbSceneParam._m0[34u].x);
            float _2438 = 1.0 - (_2433 * cbSceneParam._m0[34u].y);
            float _2439 = 1.0 - (_2433 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2439) ? _2187 : (isnan(_2187) ? _2439 : min(_2187, _2439));
            frontier_phi_37_36_ladder_1 = isnan(_2438) ? _2186 : (isnan(_2186) ? _2438 : min(_2186, _2438));
            frontier_phi_37_36_ladder_2 = isnan(_2437) ? _2185 : (isnan(_2185) ? _2437 : min(_2185, _2437));
        }
        else
        {
            frontier_phi_37_36_ladder = _2187;
            frontier_phi_37_36_ladder_1 = _2186;
            frontier_phi_37_36_ladder_2 = _2185;
        }
        _2251 = frontier_phi_37_36_ladder_2;
        _2253 = frontier_phi_37_36_ladder_1;
        _2255 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2251 = _2185;
        _2253 = _2186;
        _2255 = _2187;
    }
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2270 = _929 + (-1.0);
    float _2275 = (cbLight._m0[_2263].x * _2270) + 1.0;
    float _2276 = (cbLight._m0[_2263].y * _2270) + 1.0;
    float _2277 = (cbLight._m0[_2263].z * _2270) + 1.0;
    float _2278 = (cbLight._m0[_2263].w * _2270) + 1.0;
    uint _2279 = _2262 + 5u;
    float _2285 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2289 = _2262 + 4u;
    float _2298 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2302 = _2262 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_751, _752, _753));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_751, _752, _753));
    float _4626 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4637 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2279].x * _2285) * _2323) + (((cbLight._m0[_2289].x * _2251) * _2298) * _2321);
    float _2331 = ((_2285 * cbLight._m0[_2279].y) * _2323) + (((cbLight._m0[_2289].y * _2253) * _2298) * _2321);
    float _2332 = ((_2285 * cbLight._m0[_2279].z) * _2323) + (((cbLight._m0[_2289].z * _2255) * _2298) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2262 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2338)
    {
        _2440 = _2330;
        _2442 = _2331;
        _2444 = _2332;
    }
    else
    {
        uint _2448 = _2262 + 6u;
        float _2464 = (dot(vec3(cbLight._m0[_2262 + 2u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4648 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2467 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2440 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2330;
        _2442 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2331;
        _2444 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2332;
    }
    bool _2447 = _2336.y == 0u;
    float _2502;
    float _2504;
    float _2506;
    if (_2447)
    {
        _2502 = _2440;
        _2504 = _2442;
        _2506 = _2444;
    }
    else
    {
        uint _2675 = _2262 + 7u;
        float _2691 = (dot(vec3(cbLight._m0[_2262 + 3u].xyz), vec3(_751, _752, _753)) * 0.5) + 0.5;
        float _2692 = _2691 * _2691;
        float _4664 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2693 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2694 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2502 = (((cbLight._m0[_2675].x * 0.3183098733425140380859375) * _2693) * _2694) + _2440;
        _2504 = (((cbLight._m0[_2675].y * 0.3183098733425140380859375) * _2693) * _2694) + _2442;
        _2506 = (((cbLight._m0[_2675].z * 0.3183098733425140380859375) * _2693) * _2694) + _2444;
    }
    uint _2509 = _2262 + 8u;
    float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _754) * 0.949999988079071044921875);
    float _2523 = _2522 * _2522;
    float _2524 = cbLight._m0[_2262].x + _831;
    float _2525 = cbLight._m0[_2262].y + _832;
    float _2526 = cbLight._m0[_2262].z + _833;
    float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
    float _2531 = _2530 * _2524;
    float _2532 = _2530 * _2525;
    float _2533 = _2530 * _2526;
    float _2534 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2262].xyz));
    float _4680 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _4691 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _2538 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2539 = dot(vec3(_751, _752, _753), vec3(_2531, _2532, _2533));
    float _4702 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2542 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2543 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2531, _2532, _2533));
    float _4713 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2547 = _2523 * _2523;
    float _2551 = ((_2542 * _2542) * (_2547 + (-1.0))) + 1.0;
    float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
    float _2560 = 0.959999978542327880859375 - _910;
    float _2562 = 0.959999978542327880859375 - _911;
    float _2563 = 0.959999978542327880859375 - _912;
    float _2570 = 1.0 - _2523;
    float _2581 = (0.5 / (((_2538 * ((_2537 * _2570) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2570) + _2523) * _2537))) * _2537;
    float _4724 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2547 / ((_2551 * _2551) * 3.141590118408203125));
    uint _2597 = _2262 + 9u;
    float _2608 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _754) * 0.949999988079071044921875);
    float _2609 = _2608 * _2608;
    float _2610 = cbLight._m0[_2302].x + _831;
    float _2611 = cbLight._m0[_2302].y + _832;
    float _2612 = cbLight._m0[_2302].z + _833;
    float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
    float _2617 = _2616 * _2610;
    float _2618 = _2616 * _2611;
    float _2619 = _2616 * _2612;
    float _2620 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2302].xyz));
    float _4735 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
    float _2623 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2624 = dot(vec3(_751, _752, _753), vec3(_2617, _2618, _2619));
    float _4746 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2628 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2617, _2618, _2619));
    float _4757 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2632 = _2609 * _2609;
    float _2636 = ((_2627 * _2627) * (_2632 + (-1.0))) + 1.0;
    float _2643 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2650 = 1.0 - _2609;
    float _2660 = (0.5 / (((_2538 * ((_2623 * _2650) + _2609)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2650) + _2609) * _2623))) * _2623;
    float _4768 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2662 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2632 / ((_2636 * _2636) * 3.141590118408203125));
    float _2672 = (((((_2643 * _2560) + _913) * cbLight._m0[_2597].x) * _2662) * _2285) + ((((cbLight._m0[_2509].x * _2251) * ((_2559 * _2560) + _913)) * _2583) * _2298);
    float _2673 = (((((_2643 * _2562) + _915) * cbLight._m0[_2597].y) * _2662) * _2285) + ((((cbLight._m0[_2509].y * _2253) * ((_2559 * _2562) + _915)) * _2583) * _2298);
    float _2674 = (((((_2643 * _2563) + _916) * cbLight._m0[_2597].z) * _2662) * _2285) + ((((cbLight._m0[_2509].z * _2255) * ((_2559 * _2563) + _916)) * _2583) * _2298);
    float _2730;
    float _2732;
    float _2734;
    if (_2338)
    {
        _2730 = _2672;
        _2732 = _2673;
        _2734 = _2674;
    }
    else
    {
        uint _2736 = _2262 + 2u;
        uint _2740 = _2262 + 10u;
        float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2736].w)) * _754) * 0.949999988079071044921875);
        float _2755 = _2754 * _2754;
        float _2756 = cbLight._m0[_2736].x + _831;
        float _2757 = cbLight._m0[_2736].y + _832;
        float _2758 = cbLight._m0[_2736].z + _833;
        float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
        float _2763 = _2762 * _2756;
        float _2764 = _2762 * _2757;
        float _2765 = _2762 * _2758;
        float _2766 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2736].xyz));
        float _4779 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2769 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2770 = dot(vec3(_751, _752, _753), vec3(_2763, _2764, _2765));
        float _4790 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2774 = dot(vec3(cbLight._m0[_2736].xyz), vec3(_2763, _2764, _2765));
        float _4801 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2778 = _2755 * _2755;
        float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
        float _2789 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
        float _2796 = 1.0 - _2755;
        float _2806 = (0.5 / (((_2538 * ((_2769 * _2796) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2796) + _2755) * _2769))) * _2769;
        float _4812 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2808 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
        float _2809 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2730 = (((((_2789 * _2560) + _913) * cbLight._m0[_2740].x) * _2808) * _2809) + _2672;
        _2732 = (((((_2789 * _2562) + _915) * cbLight._m0[_2740].y) * _2808) * _2809) + _2673;
        _2734 = (((((_2789 * _2563) + _916) * cbLight._m0[_2740].z) * _2808) * _2809) + _2674;
    }
    float _2840;
    float _2842;
    float _2844;
    if (_2447)
    {
        _2840 = _2730;
        _2842 = _2732;
        _2844 = _2734;
    }
    else
    {
        uint _2851 = _2262 + 3u;
        uint _2855 = _2262 + 11u;
        float _2869 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2851].w)) * _754) * 0.949999988079071044921875);
        float _2870 = _2869 * _2869;
        float _2871 = cbLight._m0[_2851].x + _831;
        float _2872 = cbLight._m0[_2851].y + _832;
        float _2873 = cbLight._m0[_2851].z + _833;
        float _2877 = inversesqrt(dot(vec3(_2871, _2872, _2873), vec3(_2871, _2872, _2873)));
        float _2878 = _2877 * _2871;
        float _2879 = _2877 * _2872;
        float _2880 = _2877 * _2873;
        float _2881 = dot(vec3(_751, _752, _753), vec3(cbLight._m0[_2851].xyz));
        float _4828 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2885 = dot(vec3(_751, _752, _753), vec3(_2878, _2879, _2880));
        float _4839 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2888 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2889 = dot(vec3(cbLight._m0[_2851].xyz), vec3(_2878, _2879, _2880));
        float _4850 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
        float _2893 = _2870 * _2870;
        float _2897 = ((_2888 * _2888) * (_2893 + (-1.0))) + 1.0;
        float _2904 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2911 = 1.0 - _2870;
        float _2921 = (0.5 / (((_2538 * ((_2884 * _2911) + _2870)) + 9.9999999392252902907785028219223e-09) + (((_2538 * _2911) + _2870) * _2884))) * _2884;
        float _4861 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2923 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2893 / ((_2897 * _2897) * 3.141590118408203125));
        float _2924 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2840 = (((((_2904 * _2560) + _913) * cbLight._m0[_2855].x) * _2923) * _2924) + _2730;
        _2842 = (((((_2904 * _2562) + _915) * cbLight._m0[_2855].y) * _2923) * _2924) + _2732;
        _2844 = (((((_2904 * _2563) + _916) * cbLight._m0[_2855].z) * _2923) * _2924) + _2734;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2260.y == 0u)
    {
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2946)));
        float _2967 = (log2(_2038 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3057;
        float _3059;
        float _3061;
        float _3063;
        float _3065;
        float _3067;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3057 = 0.0;
            _3059 = 0.0;
            _3061 = 0.0;
            _3063 = 0.0;
            _3065 = 0.0;
            _3067 = 0.0;
        }
        else
        {
            float _3058;
            float _3060;
            float _3062;
            float _3064;
            float _3066;
            float _3068;
            float _3210 = 0.0;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            uint _3216 = 0u;
            uint _3225;
            bool _3226;
            for (;;)
            {
                _3225 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3216 << 2u)) >> 2u)).x;
                _3226 = _3225 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3226)
                {
                    frontier_phi_71_pred = _3215;
                    frontier_phi_71_pred_1 = _3214;
                    frontier_phi_71_pred_2 = _3213;
                    frontier_phi_71_pred_3 = _3212;
                    frontier_phi_71_pred_4 = _3211;
                    frontier_phi_71_pred_5 = _3210;
                }
                else
                {
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    uint _3361;
                    _3355 = _3210;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3225;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    for (;;)
                    {
                        uint _3365 = uint(findLSB(_3361)) + (_3216 << 5u);
                        uint _3362 = (_3361 + 4294967295u) & _3361;
                        uint _3367 = _3365 * 48u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3367)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3367 + 3u)).x));
                        uint _3387 = (_3365 * 48u) + 4u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 3u)).x));
                        uint _3406 = (_3365 * 48u) + 8u;
                        vec3 _3417 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x));
                        float _3421 = _3381.x - _2036;
                        float _3422 = _3381.y - _2037;
                        float _3423 = _3381.z - _2038;
                        float _3424 = dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423));
                        float _3427 = inversesqrt(_3424);
                        float _3428 = _3427 * _3421;
                        float _3429 = _3427 * _3422;
                        float _3430 = _3427 * _3423;
                        float _3431 = dot(vec3(_870, _873, _876), vec3(_3428, _3429, _3430));
                        float _3436 = 1.0 - (_3424 * _3381.w);
                        float _4887 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0));
                        float _3437 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3438 = sqrt(_3424) * _3400.w;
                        float _3441 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3431) + _3442;
                        float _3448 = _3438 * _3438;
                        float _3452 = ((isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0))) * _3437) / ((_3448 * 0.699999988079071044921875) + 1.0);
                        float _3456 = (-0.0) - _2036;
                        float _3457 = (-0.0) - _2037;
                        float _3458 = (-0.0) - _2038;
                        float _3462 = inversesqrt(dot(vec3(_3456, _3457, _3458), vec3(_3456, _3457, _3458)));
                        float _3463 = _3462 * _3456;
                        float _3464 = _3462 * _3457;
                        float _3465 = _3462 * _3458;
                        float _3472 = exp2(log2(1.0 / ((_3448 * 3.5) + 5.0)) * 0.25);
                        float _3473 = 1.0 - _945;
                        float _3480 = sqrt(1.0 - ((1.0 - (_3473 * _3473)) * (1.0 - (_3472 * _3472))));
                        float _3481 = _3480 * _3480;
                        float _3482 = _3481 * _3481;
                        float _3483 = _3463 + _3428;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3489 = inversesqrt(dot(vec3(_3483, _3484, _3485), vec3(_3483, _3484, _3485)));
                        float _3493 = dot(vec3(_870, _873, _876), vec3(_3463, _3464, _3465));
                        float _4903 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3496 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3497 = dot(vec3(_870, _873, _876), vec3(_3489 * _3483, _3489 * _3484, _3489 * _3485));
                        float _4914 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3504 = ((_3500 * _3500) * (_3482 + (-1.0))) + 1.0;
                        float _3505 = _3441 * _3481;
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3431) + _3506;
                        float _4925 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3510 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3511 = 1.0 - _3481;
                        float _3521 = (0.5 / (((_3510 * ((_3496 * _3511) + _3481)) + 9.9999999392252902907785028219223e-09) + (((_3510 * _3511) + _3481) * _3496))) * _3510;
                        float _4936 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3532 = (((_3482 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3504 * _3504) * ((_3448 * 2.1991131305694580078125) + 3.141590118408203125))) * _3437;
                        _3285 = (_3452 * _3400.x) + _3358;
                        _3286 = (_3452 * _3400.y) + _3359;
                        _3287 = (_3452 * _3400.z) + _3360;
                        _3282 = (_3532 * _3417.x) + _3355;
                        _3283 = (_3532 * _3417.y) + _3356;
                        _3284 = (_3532 * _3417.z) + _3357;
                        if (_3362 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3355 = _3282;
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3362;
                        }
                    }
                    frontier_phi_71_pred = _3287;
                    frontier_phi_71_pred_1 = _3286;
                    frontier_phi_71_pred_2 = _3285;
                    frontier_phi_71_pred_3 = _3284;
                    frontier_phi_71_pred_4 = _3283;
                    frontier_phi_71_pred_5 = _3282;
                }
                _3068 = frontier_phi_71_pred;
                _3066 = frontier_phi_71_pred_1;
                _3064 = frontier_phi_71_pred_2;
                _3062 = frontier_phi_71_pred_3;
                _3060 = frontier_phi_71_pred_4;
                _3058 = frontier_phi_71_pred_5;
                uint _3217 = _3216 + 1u;
                if (_3217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3210 = _3058;
                    _3211 = _3060;
                    _3212 = _3062;
                    _3213 = _3064;
                    _3214 = _3066;
                    _3215 = _3068;
                    _3216 = _3217;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3057 = _3058;
            _3059 = _3060;
            _3061 = _3062;
            _3063 = _3064;
            _3065 = _3066;
            _3067 = _3068;
        }
        uvec4 _3071 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3072 = _3071.z;
        uint _3074 = (_3072 >> 8u) & 15u;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        if (((4294967295u << _3074) & _2977) == 0u)
        {
            _3178 = _3057;
            _3180 = _3059;
            _3182 = _3061;
            _3184 = _3063;
            _3186 = _3065;
            _3188 = _3067;
        }
        else
        {
            float _3203 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
            float _3204 = _3203 * _2036;
            float _3205 = _3203 * _2037;
            float _3206 = _3203 * _2038;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3074 < ((_3072 >> 12u) & 15u))
            {
                float _3179;
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3338 = _3057;
                float _3339 = _3059;
                float _3340 = _3061;
                float _3341 = _3063;
                float _3342 = _3065;
                float _3343 = _3067;
                uint _3344 = _3074;
                uint _3353;
                bool _3354;
                for (;;)
                {
                    _3353 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3344 << 2u)) >> 2u)).x;
                    _3354 = _3353 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3354)
                    {
                        frontier_phi_82_pred = _3343;
                        frontier_phi_82_pred_1 = _3342;
                        frontier_phi_82_pred_2 = _3341;
                        frontier_phi_82_pred_3 = _3340;
                        frontier_phi_82_pred_4 = _3339;
                        frontier_phi_82_pred_5 = _3338;
                    }
                    else
                    {
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3559 = _3338;
                        float _3560 = _3339;
                        float _3561 = _3340;
                        float _3562 = _3341;
                        float _3563 = _3342;
                        float _3564 = _3343;
                        uint _3565 = _3353;
                        uint _3566;
                        vec4 _3591;
                        float _3592;
                        vec4 _3607;
                        vec3 _3619;
                        vec4 _3634;
                        vec4 _3649;
                        float _3695;
                        bool _3696;
                        for (;;)
                        {
                            uint _3576 = ((_3344 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3565));
                            _3566 = (_3565 + 4294967295u) & _3565;
                            uint _3578 = _3576 * 40u;
                            _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            _3592 = _3591.w;
                            uint _3594 = (_3576 * 40u) + 4u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3609 = (_3576 * 40u) + 8u;
                            _3619 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x));
                            uint _3621 = (_3576 * 40u) + 16u;
                            _3634 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 3u)).x));
                            uint _3636 = (_3576 * 40u) + 20u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3576 * 40u) + 24u;
                            vec4 _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            uint _3670 = (_3576 * 40u) + 28u;
                            vec4 _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            _3695 = fma(_2038, _3683.z, fma(_2037, _3683.y, _3683.x * _2036)) + _3683.w;
                            _3696 = !((fma(_2038, _3664.z, fma(_2037, _3664.y, _3664.x * _2036)) + _3664.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3696)
                            {
                                float _3723 = _3591.x - _2036;
                                float _3724 = _3591.y - _2037;
                                float _3725 = _3591.z - _2038;
                                float _3726 = dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725));
                                float _3729 = inversesqrt(_3726);
                                float _3730 = _3729 * _3723;
                                float _3731 = _3729 * _3724;
                                float _3732 = _3729 * _3725;
                                float _3736 = 1.0 - (_3726 / (_3592 * _3592));
                                float _4947 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3741 = sqrt(_3726) * _3607.w;
                                float _3743 = 1.39999997615814208984375 / (_3741 + 1.39999997615814208984375);
                                float _3744 = _3743 * _3743;
                                float _3747 = ((1.0 - _3744) * dot(vec3(_3730, _3731, _3732), vec3(_870, _873, _876))) + _3744;
                                float _3750 = _3741 * _3741;
                                float _3754 = (fma(_2038, _3634.z, fma(_2037, _3634.y, _3634.x * _2036)) + _3634.w) / _3695;
                                float _3755 = (fma(_2038, _3649.z, fma(_2037, _3649.y, _3649.x * _2036)) + _3649.w) / _3695;
                                float _3759 = 1.0 - dot(vec2(_3754, _3755), vec2(_3754, _3755));
                                float _4963 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3761 = _3760 * (((isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0))) * _3737) / ((_3750 * 0.699999988079071044921875) + 1.0));
                                float _3773 = exp2(log2(1.0 / ((_3750 * 3.5) + 5.0)) * 0.25);
                                float _3774 = 1.0 - _945;
                                float _3781 = sqrt(1.0 - ((1.0 - (_3774 * _3774)) * (1.0 - (_3773 * _3773))));
                                float _3782 = _3781 * _3781;
                                float _3783 = _3782 * _3782;
                                float _3784 = _3730 - _3204;
                                float _3785 = _3731 - _3205;
                                float _3786 = _3732 - _3206;
                                float _3790 = inversesqrt(dot(vec3(_3784, _3785, _3786), vec3(_3784, _3785, _3786)));
                                float _3794 = dot(vec3(_870, _873, _876), vec3((-0.0) - _3204, (-0.0) - _3205, (-0.0) - _3206));
                                float _4974 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3798 = dot(vec3(_870, _873, _876), vec3(_3790 * _3784, _3790 * _3785, _3790 * _3786));
                                float _4985 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3801 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3805 = ((_3801 * _3801) * (_3783 + (-1.0))) + 1.0;
                                float _3806 = _3743 * _3782;
                                float _3807 = _3806 * _3806;
                                float _3813 = ((1.0 - _3807) * dot(vec3(_870, _873, _876), vec3(_3730, _3731, _3732))) + _3807;
                                float _4996 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3815 = 1.0 - _3782;
                                float _3825 = (0.5 / (((_3814 * ((_3797 * _3815) + _3782)) + 9.9999999392252902907785028219223e-09) + (((_3814 * _3815) + _3782) * _3797))) * _3814;
                                float _5007 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3835 = (_3760 * _3737) * (((_3783 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3805 * _3805) * ((_3750 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3761 * _3607.z;
                                frontier_phi_88_pred_1 = _3761 * _3607.y;
                                frontier_phi_88_pred_2 = _3761 * _3607.x;
                                frontier_phi_88_pred_3 = _3835 * _3619.z;
                                frontier_phi_88_pred_4 = _3835 * _3619.y;
                                frontier_phi_88_pred_5 = _3835 * _3619.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3844 = frontier_phi_88_pred;
                            _3843 = frontier_phi_88_pred_1;
                            _3842 = frontier_phi_88_pred_2;
                            _3841 = frontier_phi_88_pred_3;
                            _3840 = frontier_phi_88_pred_4;
                            _3839 = frontier_phi_88_pred_5;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3551 = _3844 + _3564;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3548 = _3841 + _3561;
                            if (_3566 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3566;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3551;
                        frontier_phi_82_pred_1 = _3550;
                        frontier_phi_82_pred_2 = _3549;
                        frontier_phi_82_pred_3 = _3548;
                        frontier_phi_82_pred_4 = _3547;
                        frontier_phi_82_pred_5 = _3546;
                    }
                    _3189 = frontier_phi_82_pred;
                    _3187 = frontier_phi_82_pred_1;
                    _3185 = frontier_phi_82_pred_2;
                    _3183 = frontier_phi_82_pred_3;
                    _3181 = frontier_phi_82_pred_4;
                    _3179 = frontier_phi_82_pred_5;
                    uint _3345 = _3344 + 1u;
                    if (_3345 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3338 = _3179;
                        _3339 = _3181;
                        _3340 = _3183;
                        _3341 = _3185;
                        _3342 = _3187;
                        _3343 = _3189;
                        _3344 = _3345;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3185;
                frontier_phi_63_64_ladder_1 = _3189;
                frontier_phi_63_64_ladder_2 = _3187;
                frontier_phi_63_64_ladder_3 = _3183;
                frontier_phi_63_64_ladder_4 = _3181;
                frontier_phi_63_64_ladder_5 = _3179;
            }
            else
            {
                frontier_phi_63_64_ladder = _3063;
                frontier_phi_63_64_ladder_1 = _3067;
                frontier_phi_63_64_ladder_2 = _3065;
                frontier_phi_63_64_ladder_3 = _3061;
                frontier_phi_63_64_ladder_4 = _3059;
                frontier_phi_63_64_ladder_5 = _3057;
            }
            _3178 = frontier_phi_63_64_ladder_5;
            _3180 = frontier_phi_63_64_ladder_4;
            _3182 = frontier_phi_63_64_ladder_3;
            _3184 = frontier_phi_63_64_ladder;
            _3186 = frontier_phi_63_64_ladder_2;
            _3188 = frontier_phi_63_64_ladder_1;
        }
        float _3193 = isnan(1.0) ? _929 : (isnan(_929) ? 1.0 : min(_929, 1.0));
        _2990 = (_3193 * _3184) + _2502;
        _2992 = (_3193 * _3186) + _2504;
        _2994 = (_3193 * _3188) + _2506;
        _2996 = ((_3178 * _913) * _3193) + _2840;
        _2998 = ((_3180 * _915) * _3193) + _2842;
        _3000 = ((_3182 * _916) * _3193) + _2844;
    }
    else
    {
        _2990 = _2502;
        _2992 = _2504;
        _2994 = _2506;
        _2996 = _2840;
        _2998 = _2842;
        _3000 = _2844;
    }
    float _5023 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _5034 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _5045 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _3017 = ((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2990 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _929))) + ((_2996 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _3018 = ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2992 + ((isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0))) * _929))) + ((_2998 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    float _3019 = ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2994 + ((isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))) * _929))) + ((_3000 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1768)) * cbPerFrame._m0[3u].x);
    uint _3020 = _276 + 6u;
    float _3028 = _851 / cbSceneParam._m0[86u].x;
    float _3029 = _852 / cbSceneParam._m0[86u].y;
    vec4 _3043 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, (log2((isnan(cbSceneParam._m0[77u].w) ? _773 : (isnan(_773) ? cbSceneParam._m0[77u].w : min(_773, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3045 = _3043.x;
    float _3046 = _3043.y;
    float _3047 = _3043.z;
    float _3048 = _3043.w;
    float _3120;
    float _3122;
    float _3124;
    float _3126;
    if (_773 > cbSceneParam._m0[78u].w)
    {
        float _3082 = isnan(_773) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _773 : min(cbSceneParam._m0[80u].w, _773));
        float _3083 = _3082 / _773;
        float _3094 = _3083 * _824;
        float _3095 = _825 * _3083;
        float _3096 = (-0.0) - _3095;
        float _3098 = _3083 * _826;
        float _3100 = (cbSceneParam._m0[77u].w * _3096) / _3082;
        float _3101 = _3100 + cbSceneParam._m0[79u].w;
        float _3102 = cbSceneParam._m0[79u].w - _3095;
        float _3108 = sqrt(((_3094 * _3094) + (_3095 * _3095)) + (_3098 * _3098));
        float _3111 = (1.0 - (cbSceneParam._m0[77u].w / _3082)) * _3108;
        float _3116 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3118 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3295;
        if (abs((_3096 - _3100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3295 = ((((_3101 > 0.0) ? exp2(_3116 * _3101) : (2.0 - exp2(_3118 * _3101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3111;
        }
        else
        {
            float _3239 = 1.0 / cbSceneParam._m0[80u].x;
            float _3240 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : max(_3101, _3102));
            float _3241 = isnan(_3102) ? _3101 : (isnan(_3101) ? _3102 : min(_3101, _3102));
            float _3250 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : min(_3240, 0.0));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            _3295 = ((abs(_3108 / _3096) * cbSceneParam._m0[80u].y) * ((((_3250 - _3251) * 2.0) - ((exp2(_3116 * (isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0)))) - exp2(_3116 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))))) * _3239)) - ((exp2(_3118 * _3250) - exp2(_3118 * _3251)) * _3239))) + (_3111 * cbSceneParam._m0[80u].z);
        }
        vec4 _3297 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3028, _3029, 1.0), 0.0);
        float _3306 = exp2((_3295 * (-1.44269502162933349609375)) * (1.0 - _3297.w));
        float _3307 = log2(_3306);
        float _3323 = log2(_3048);
        _3120 = (exp2(_3323 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].x)) * _3297.x) / cbSceneParam._m0[78u].x)) + _3045;
        _3122 = (exp2(_3323 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].y)) * _3297.y) / cbSceneParam._m0[78u].y)) + _3046;
        _3124 = (exp2(_3323 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].z)) * _3297.z) / cbSceneParam._m0[78u].z)) + _3047;
        _3126 = _3306 * _3048;
    }
    else
    {
        _3120 = _3045;
        _3122 = _3046;
        _3124 = _3047;
        _3126 = _3048;
    }
    bool _3333;
    vec4 _3136;
    vec4 _3158;
    float _3160;
    float _3164;
    float _3165;
    float _3166;
    float _3167;
    bool _3177;
    for (;;)
    {
        _3136 = cbMatDynParam._m0[0u];
        float _3138 = roundEven(_3136.y);
        bool _3139 = _3138 == 3.0;
        float _3140 = log2(_3126);
        float _3147 = exp2(_3140 * cbSceneParam._m0[78u].x) * _3017;
        float _3148 = exp2(_3140 * cbSceneParam._m0[78u].y) * _3018;
        float _3149 = exp2(_3140 * cbSceneParam._m0[78u].z) * _3019;
        float _3156 = _840 + (-0.5);
        _3158 = cbMtdParam._m0[1u];
        _3160 = _3158.y * _3156;
        float _3163 = (_3138 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3164 = _3163 * (_3139 ? _3147 : (_3147 + (cbSceneParam._m0[72u].w * _3120)));
        _3165 = _3163 * (_3139 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3122)));
        _3166 = _3163 * (_3139 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3124)));
        _3167 = _3156 * 0.999000012874603271484375;
        _3177 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3177)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3167) < 0.5)
            {
                _3333 = true;
                break;
            }
        }
        uint _3274 = _889 + uint(_3136.w);
        if ((cbInstanceData._m0[_3274].w < 1.0) && ((cbInstanceData._m0[_3274].w + _3167) < 0.5))
        {
            _3333 = true;
            break;
        }
        if ((_3160 + 1.0) < _3158.x)
        {
            _3333 = true;
            break;
        }
        _3333 = false;
        break;
    }
    float _3537;
    if (_3333)
    {
        discard_state = true;
        _3537 = 0.0;
    }
    else
    {
        _3537 = cbInstanceData._m0[_3020].w;
    }
    SV_Target.x = _3164;
    SV_Target.y = _3165;
    SV_Target.z = _3166;
    SV_Target.w = _3537;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3020].w;
    discard_exit();
}


