#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1512;
float _3914;
float _3915;
float _3916;
float _3917;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _260 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _260 + 1u;
    uint _270 = _260 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _411 = _409.x;
    float _423 = dot(vec4(_411, _409.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _440 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _370.x) * 2.0) - ((((_411 - _423) * cbMtdParam._m0[23u].w) + _423) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3926 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _448 = (_441 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329;
    float _449 = (_441 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330;
    float _450 = (_441 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331;
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _280) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _281) + cbTextureTilingScale._m0[3u].w));
    vec4 _487 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _489 = _487.x;
    float _499 = dot(vec4(_489, _487.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _513 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _370.y) * 2.0) - ((((_489 - _499) * cbMtdParam._m0[23u].w) + _499) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3937 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _521 = (_514 * ((_467.x * cbMtdParam._m0[13u].x) - _448)) + _448;
    float _522 = (_514 * ((_467.y * cbMtdParam._m0[13u].y) - _449)) + _449;
    float _523 = (_514 * ((_467.z * cbMtdParam._m0[13u].z) - _450)) + _450;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _280) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _281) + cbTextureTilingScale._m0[24u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _561 = _559.x;
    float _571 = dot(vec4(_561, _559.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _583 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _370.z) * 2.0) - ((((_561 - _571) * cbMtdParam._m0[23u].w) + _571) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3948 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _584 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _597 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_584 * ((_542.x * cbMtdParam._m0[14u].x) - _521)) + _521);
    float _600 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_584 * ((_542.y * cbMtdParam._m0[14u].y) - _522)) + _522);
    float _603 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_584 * ((_542.z * cbMtdParam._m0[14u].z) - _523)) + _523);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _441) + _640;
    float _650 = ((_621.y - _641) * _441) + _641;
    float _651 = ((_621.z - _642) * _441) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _280) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _281) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_663.x - _649) * _514) + _649;
    float _675 = ((_663.y - _650) * _514) + _650;
    float _676 = ((_663.z - _651) * _514) + _651;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _280) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _281) + cbTextureTilingScale._m0[23u].w));
    float _701 = ((_688.z - _676) * _584) + _676;
    float _704 = ((((_688.x - _674) * _584) + _674) * 2.0) + (-1.0);
    float _706 = ((((_688.y - _675) * _584) + _675) * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _3959 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _769 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_753 - _754) * cbMtdParam._m0[24u].z) + _754) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3970 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _770 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _777 = (_770 * (cbMtdParam._m0[17u].x - _597)) + _597;
    float _778 = (_770 * (cbMtdParam._m0[17u].y - _600)) + _600;
    float _779 = (_770 * (cbMtdParam._m0[17u].z - _603)) + _603;
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _807 = _805.x;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _807) * _441) + _807;
    float _841 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _280) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _281) + cbTextureTilingScale._m0[21u].w)).x - _824) * _514) + _824;
    float _859 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _280) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _281) + cbTextureTilingScale._m0[10u].w)).x - _841) * _584) + _841;
    float _863 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _859) * cbMtdParam._m0[19u].z) + _859;
    float _865 = _863 - (_863 * _770);
    float _869 = (cbMtdParam._m0[19u].w * (_726.z - _701)) + _701;
    vec4 _882 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _889 = (_882.x * 2.0) + (-1.0);
    float _890 = (_882.y * 2.0) + (-1.0);
    float _891 = dot(vec2(_889, _890), vec2(_889, _890));
    float _3981 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _899 = (_770 * (_882.z - _869)) + _869;
    float _902 = (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _903 = (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    float _915 = (((_889 - _902) + (cbMtdParam._m0[21u].x * _902)) * _770) + _902;
    float _916 = (((_890 - _903) + (cbMtdParam._m0[21u].x * _903)) * _770) + _903;
    float _917 = (_770 * (sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _712)) + _712;
    float _919 = cbMtdParam._m0[22u].x + _726.w;
    float _922 = fma(_917, _247 * NORMAL.x, fma(_916, _254 * TANGENT.x, (_240 * _232) * _915));
    float _925 = fma(_917, _247 * NORMAL.y, fma(_916, _254 * TANGENT.y, (_240 * _233) * _915));
    float _928 = fma(_917, _247 * NORMAL.z, fma(_916, _254 * TANGENT.z, (_240 * _234) * _915));
    float _932 = inversesqrt(dot(vec3(_922, _925, _928), vec3(_922, _925, _928)));
    float _933 = _932 * _922;
    float _934 = _932 * _925;
    float _935 = _932 * _928;
    float _3992 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _936 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4014 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4025 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4036 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4047 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _941 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _955 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _995 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1005 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _995);
    float _1006 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _995);
    float _1007 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _995);
    float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
    float _1012 = _1005 * _1011;
    float _1013 = _1006 * _1011;
    float _1014 = _1007 * _1011;
    vec4 _1019 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1021 = _1019.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1193 = sqrt(((_1005 * _1005) + (_1006 * _1006)) + (_1007 * _1007));
        float _1199 = (cbMatDynParam._m0[5u].x * _1193) + cbMatDynParam._m0[5u].y;
        float _4058 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1204 = (cbMatDynParam._m0[5u].z * _1193) + cbMatDynParam._m0[5u].w;
        float _4069 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) - _1200)) + _1200) < ((_1021 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1032 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1033 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1051 = fma(_935, cbSceneParam._m0[5u].z, fma(_934, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _933));
    float _1054 = fma(_935, cbSceneParam._m0[6u].z, fma(_934, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _933));
    float _1057 = fma(_935, cbSceneParam._m0[7u].z, fma(_934, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _933));
    uint _1070 = _260 + 9u;
    uint _1071 = _1070 + uint(cbMatDynParam._m0[0u].w);
    float _1077 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1071].x;
    float _1078 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1071].y;
    float _1079 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1071].z;
    float _4080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _4091 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _1083 = 1.0 - _941;
    float _1084 = _1080 * _1083;
    float _1085 = _1081 * _1083;
    float _1086 = _1082 * _1083;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _941;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _941;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _941;
    float _1094 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    vec4 _1106 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1032, cbSceneParam._m0[86u].y * _1033));
    float _1110 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _1106.x;
    float _1111 = dot(vec3(_933, _934, _935), vec3(_1012, _1013, _1014));
    float _1114 = _1111 * 2.0;
    float _1118 = (_1114 * _933) - _1012;
    float _1119 = (_1114 * _934) - _1013;
    float _1120 = (_1114 * _935) - _1014;
    float _1124 = abs(dot(vec3(_1012, _1013, _1014), vec3(_933, _934, _935)));
    float _4113 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _1126 = sqrt(_936);
    float _1139 = exp2((_1126 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1126 * 3.0));
    float _1145 = (1.0 - _1139) * ((_1126 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1146 = _1139 * _1126;
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1182 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1511;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1236 = fma(_1182, cbModelParam._m0[26u].z, fma(_1178, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1174));
        float _1240 = fma(_1182, cbModelParam._m0[27u].z, fma(_1178, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1174));
        float _1244 = fma(_1182, cbModelParam._m0[28u].z, fma(_1178, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1174));
        float _1269 = _1174 + _933;
        float _1270 = _1178 + _934;
        float _1271 = _1182 + _935;
        float _1281 = fma(_1271, cbModelParam._m0[26u].z, fma(_1270, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269)) - _1236;
        float _1282 = fma(_1271, cbModelParam._m0[27u].z, fma(_1270, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269)) - _1240;
        float _1283 = fma(_1271, cbModelParam._m0[28u].z, fma(_1270, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269)) - _1244;
        float _1287 = inversesqrt(dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283)));
        float _1300 = ((_1287 * _1281) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1236 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1287 * _1282) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1240 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1302 = ((_1287 * _1283) / cbModelParam._m0[34u].z) + ((((((_1244 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1300, _1301, _1302), 0.0);
        float _1339 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1305.x + (-0.5));
        float _1341 = _1339 * (_1305.y + (-0.5));
        float _1342 = _1339 * (_1305.z + (-0.5));
        float _1349 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1312.x + (-0.5));
        float _1351 = _1349 * (_1312.y + (-0.5));
        float _1352 = _1349 * (_1312.z + (-0.5));
        float _1359 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1319.x + (-0.5));
        float _1361 = _1359 * (_1319.y + (-0.5));
        float _1362 = _1359 * (_1319.z + (-0.5));
        float _1369 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1326.x + (-0.5));
        float _1371 = _1369 * (_1326.y + (-0.5));
        float _1372 = _1369 * (_1326.z + (-0.5));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1376 = _1340 * 0.5;
        float _1377 = _1350 * 0.5;
        float _1378 = _1360 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1393 = (dot(vec3(_933, _934, _935), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1403 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4161 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1405 + 1.0))) + _1410) * _1373;
        float _1420 = _1341 * 0.5;
        float _1421 = _1351 * 0.5;
        float _1422 = _1361 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_933, _934, _935), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4172 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4183 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4194 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_1447 + 1.0))) + _1452) * _1374;
        float _1462 = _1342 * 0.5;
        float _1463 = _1352 * 0.5;
        float _1464 = _1362 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_933, _934, _935), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4205 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1375 + 9.9999997473787516355514526367188e-06);
        float _4216 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4227 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) * (_1489 + 1.0))) + _1494) * _1375;
        _1511 = _1342;
        _1513 = _1341;
        _1514 = _1340;
        _1515 = _1352;
        _1516 = _1351;
        _1517 = _1350;
        _1518 = _1362;
        _1519 = _1361;
        _1520 = _1360;
        _1521 = _1375;
        _1522 = _1374;
        _1523 = _1373;
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
        _1526 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
    }
    else
    {
        _1511 = _1512;
        _1513 = _1512;
        _1514 = _1512;
        _1515 = _1512;
        _1516 = _1512;
        _1517 = _1512;
        _1518 = _1512;
        _1519 = _1512;
        _1520 = _1512;
        _1521 = _1512;
        _1522 = _1512;
        _1523 = _1512;
        _1524 = 0.0;
        _1525 = 0.0;
        _1526 = 0.0;
    }
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1552 = fma(_1182, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1174));
        float _1556 = fma(_1182, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1174));
        float _1560 = fma(_1182, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1174));
        float _1583 = _1174 + _933;
        float _1584 = _1178 + _934;
        float _1585 = _1182 + _935;
        float _1595 = fma(_1585, cbModelParam._m0[30u].z, fma(_1584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1583)) - _1552;
        float _1596 = fma(_1585, cbModelParam._m0[31u].z, fma(_1584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1583)) - _1556;
        float _1597 = fma(_1585, cbModelParam._m0[32u].z, fma(_1584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1583)) - _1560;
        float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
        float _1614 = ((_1601 * _1595) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1552 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1601 * _1596) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1556 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1601 * _1597) / cbModelParam._m0[35u].z) + ((((((_1560 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        float _1651 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1618.x + (-0.5));
        float _1653 = _1651 * (_1618.y + (-0.5));
        float _1654 = _1651 * (_1618.z + (-0.5));
        float _1661 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1625.x + (-0.5));
        float _1663 = _1661 * (_1625.y + (-0.5));
        float _1664 = _1661 * (_1625.z + (-0.5));
        float _1671 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1632.x + (-0.5));
        float _1673 = _1671 * (_1632.y + (-0.5));
        float _1674 = _1671 * (_1632.z + (-0.5));
        float _1681 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1639.x + (-0.5));
        float _1683 = _1681 * (_1639.y + (-0.5));
        float _1684 = _1681 * (_1639.z + (-0.5));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1652 * 0.5;
        float _1689 = _1662 * 0.5;
        float _1690 = _1672 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_933, _934, _935), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4290 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1715 + 1.0))) + _1720) * _1685;
        float _1730 = _1653 * 0.5;
        float _1731 = _1663 * 0.5;
        float _1732 = _1673 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_933, _934, _935), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4323 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1757 + 1.0))) + _1762) * _1686;
        float _1772 = _1654 * 0.5;
        float _1773 = _1664 * 0.5;
        float _1774 = _1674 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_933, _934, _935), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4356 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1799 + 1.0))) + _1804) * _1687;
        _1821 = _1654;
        _1822 = _1653;
        _1823 = _1652;
        _1824 = _1664;
        _1825 = _1663;
        _1826 = _1662;
        _1827 = _1674;
        _1828 = _1673;
        _1829 = _1672;
        _1830 = _1687;
        _1831 = _1686;
        _1832 = _1685;
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = _1512;
        _1822 = _1512;
        _1823 = _1512;
        _1824 = _1512;
        _1825 = _1512;
        _1826 = _1512;
        _1827 = _1512;
        _1828 = _1512;
        _1829 = _1512;
        _1830 = _1512;
        _1831 = _1512;
        _1832 = _1512;
        _1833 = 0.0;
        _1834 = 0.0;
        _1835 = 0.0;
    }
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1524)) + _1524;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1525)) + _1525;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1526)) + _1526;
    float _1868 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1845));
    float _1889 = _1118 * 0.5;
    float _1890 = _1119 * 0.5;
    float _1891 = _1120 * 0.5;
    float _1892 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1895 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1898 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1932;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1905 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1511, _1515, _1518, _1521));
        float _1909 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1913 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1514, _1517, _1520, _1523));
        float _1920 = dot(vec4(cbModelParam._m0[39u]), vec4(_1889, _1890, _1891, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1943;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1934 = dot(vec4(cbModelParam._m0[40u]), vec4(_1889, _1890, _1891, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1947 = (_1943 * cbModelParam._m0[1u].x) + (_1932 * (1.0 - cbModelParam._m0[1u].x));
    float _1957 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _936);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1957 : min(cbModelParam._m0[25u].z, _1957));
    float _2038;
    float _2040;
    float _2042;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2005 = fma(_1182, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1174)) + cbModelParam._m0[13u].w;
        float _2009 = fma(_1182, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1174)) + cbModelParam._m0[14u].w;
        float _2013 = fma(_1182, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1174)) + cbModelParam._m0[15u].w;
        float _2016 = fma(_1120, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1118));
        float _2019 = fma(_1120, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1118));
        float _2022 = fma(_1120, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1118));
        float _2050;
        if (_2016 > 0.0)
        {
            _2050 = abs((1.0 - _2005) / _2016);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2005 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2050 = frontier_phi_17_15_ladder;
        }
        float _2274;
        if (_2019 > 0.0)
        {
            _2274 = abs((1.0 - _2009) / _2019);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2009 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2274 = frontier_phi_26_22_ladder;
        }
        float _2531;
        if (_2022 > 0.0)
        {
            _2531 = abs((1.0 - _2013) / _2022);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2013 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2531 = frontier_phi_38_33_ladder;
        }
        float _2533 = isnan(_2274) ? _2050 : (isnan(_2050) ? _2274 : min(_2050, _2274));
        float _2534 = isnan(_2531) ? _2533 : (isnan(_2533) ? _2531 : min(_2533, _2531));
        float _2538 = (_2534 * _2016) + _2005;
        float _2539 = (_2534 * _2019) + _2009;
        float _2540 = (_2534 * _2022) + _2013;
        float _2541 = _2534 * 9.9999997473787516355514526367188e-05;
        float _2543 = (-1.0) - _2541;
        float _2545 = _2541 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2540 > _2545) || ((_2540 < _2543) || ((_2539 > _2545) || ((_2539 < _2543) || ((_2538 < _2543) || (_2538 > _2545))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2668 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2540, cbModelParam._m0[9u].z, fma(_2539, cbModelParam._m0[9u].y, _2538 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2540, cbModelParam._m0[10u].z, fma(_2539, cbModelParam._m0[10u].y, _2538 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2540, cbModelParam._m0[11u].z, fma(_2539, cbModelParam._m0[11u].y, _2538 * cbModelParam._m0[11u].x))), _1958);
            frontier_phi_16_38_ladder = _2668.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2668.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2668.x * cbModelParam._m0[1u].y;
        }
        _2038 = frontier_phi_16_38_ladder_2;
        _2040 = frontier_phi_16_38_ladder_1;
        _2042 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2026 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1118, _1119, _1120), _1958);
        _2038 = _2026.x * cbModelParam._m0[1u].y;
        _2040 = _2026.y * cbModelParam._m0[1u].y;
        _2042 = _2026.z * cbModelParam._m0[1u].y;
    }
    float _2046 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _936);
    float _2047 = isnan(_2046) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2046 : min(cbModelParam._m0[25u].w, _2046));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2101 = fma(_1182, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1174)) + cbModelParam._m0[21u].w;
        float _2105 = fma(_1182, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1174)) + cbModelParam._m0[22u].w;
        float _2109 = fma(_1182, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1174)) + cbModelParam._m0[23u].w;
        float _2112 = fma(_1120, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1118));
        float _2115 = fma(_1120, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1118));
        float _2118 = fma(_1120, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1118));
        float _2279;
        if (_2112 > 0.0)
        {
            _2279 = abs((1.0 - _2101) / _2112);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2101 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2279 = frontier_phi_28_24_ladder;
        }
        float _2558;
        if (_2115 > 0.0)
        {
            _2558 = abs((1.0 - _2105) / _2115);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2105 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2558 = frontier_phi_40_35_ladder;
        }
        float _2771;
        if (_2118 > 0.0)
        {
            _2771 = abs((1.0 - _2109) / _2118);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2109 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2771 = frontier_phi_49_46_ladder;
        }
        float _2773 = isnan(_2558) ? _2279 : (isnan(_2279) ? _2558 : min(_2279, _2558));
        float _2774 = isnan(_2771) ? _2773 : (isnan(_2773) ? _2771 : min(_2773, _2771));
        float _2778 = (_2774 * _2112) + _2101;
        float _2779 = (_2774 * _2115) + _2105;
        float _2780 = (_2774 * _2118) + _2109;
        float _2781 = _2774 * 9.9999997473787516355514526367188e-05;
        float _2782 = (-1.0) - _2781;
        float _2784 = _2781 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2780 > _2784) || ((_2780 < _2782) || ((_2779 > _2784) || ((_2779 < _2782) || ((_2778 < _2782) || (_2778 > _2784))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2780, cbModelParam._m0[17u].z, fma(_2779, cbModelParam._m0[17u].y, _2778 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2780, cbModelParam._m0[18u].z, fma(_2779, cbModelParam._m0[18u].y, _2778 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2780, cbModelParam._m0[19u].z, fma(_2779, cbModelParam._m0[19u].y, _2778 * cbModelParam._m0[19u].x))), _2047);
            frontier_phi_25_49_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2137 = frontier_phi_25_49_ladder_2;
        _2139 = frontier_phi_25_49_ladder_1;
        _2141 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1118, _1119, _1120), _2047);
        _2137 = _2121.x * cbModelParam._m0[1u].z;
        _2139 = _2121.y * cbModelParam._m0[1u].z;
        _2141 = _2121.z * cbModelParam._m0[1u].z;
    }
    float _2154 = (((_1145 * _1094) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2156 = (((_1145 * _1096) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2158 = (((_1145 * _1097) + _1146) * _1110) * ((cbModelParam._m0[1u].w * (_2141 - _2042)) + _2042);
    float _2161 = fma(_2158, cbSceneParam._m0[89u].z, fma(_2156, cbSceneParam._m0[89u].y, _2154 * cbSceneParam._m0[89u].x));
    float _2164 = fma(_2158, cbSceneParam._m0[90u].z, fma(_2156, cbSceneParam._m0[90u].y, _2154 * cbSceneParam._m0[90u].x));
    float _2167 = fma(_2158, cbSceneParam._m0[91u].z, fma(_2156, cbSceneParam._m0[91u].y, _2154 * cbSceneParam._m0[91u].x));
    vec4 _2175 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1032, _1033));
    float _2177 = _2175.w;
    float _2189 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2177);
    float _2190 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2177);
    float _2191 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2177);
    uvec4 _2195 = floatBitsToUint(cbInstanceData._m0[_260 + 5u]);
    uint _2197 = _2195.x * 14u;
    uint _2198 = _2197 + 13u;
    float _2205 = _1110 + (-1.0);
    float _2210 = (cbLight._m0[_2198].x * _2205) + 1.0;
    float _2211 = (cbLight._m0[_2198].y * _2205) + 1.0;
    float _2212 = (cbLight._m0[_2198].z * _2205) + 1.0;
    float _2213 = (cbLight._m0[_2198].w * _2205) + 1.0;
    uint _2214 = _2197 + 5u;
    float _2220 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
    uint _2224 = _2197 + 4u;
    float _2233 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
    uint _2237 = _2197 | 1u;
    float _2248 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_933, _934, _935));
    float _2251 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_933, _934, _935));
    float _4492 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _4503 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _2256 = (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * 0.3183098733425140380859375;
    float _2258 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2265 = ((cbLight._m0[_2214].x * _2220) * _2258) + (((cbLight._m0[_2224].x * _2189) * _2233) * _2256);
    float _2266 = ((_2220 * cbLight._m0[_2214].y) * _2258) + (((cbLight._m0[_2224].y * _2190) * _2233) * _2256);
    float _2267 = ((_2220 * cbLight._m0[_2214].z) * _2258) + (((cbLight._m0[_2224].z * _2191) * _2233) * _2256);
    uvec4 _2271 = floatBitsToUint(cbLight._m0[_2197 + 12u]);
    bool _2273 = _2271.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2273)
    {
        _2284 = _2265;
        _2286 = _2266;
        _2288 = _2267;
    }
    else
    {
        uint _2292 = _2197 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2197 + 2u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4514 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2311 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2265;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2266;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2267;
    }
    bool _2291 = _2271.y == 0u;
    float _2329;
    float _2331;
    float _2333;
    if (_2291)
    {
        _2329 = _2284;
        _2331 = _2286;
        _2333 = _2288;
    }
    else
    {
        uint _2502 = _2197 + 7u;
        float _2518 = (dot(vec3(cbLight._m0[_2197 + 3u].xyz), vec3(_933, _934, _935)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4530 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _2521 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2329 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2284;
        _2331 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2286;
        _2333 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2288;
    }
    uint _2336 = _2197 + 8u;
    float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _936) * 0.949999988079071044921875);
    float _2350 = _2349 * _2349;
    float _2351 = cbLight._m0[_2197].x + _1012;
    float _2352 = cbLight._m0[_2197].y + _1013;
    float _2353 = cbLight._m0[_2197].z + _1014;
    float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
    float _2358 = _2357 * _2351;
    float _2359 = _2357 * _2352;
    float _2360 = _2357 * _2353;
    float _2361 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2197].xyz));
    float _4546 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _4557 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _2365 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _2366 = dot(vec3(_933, _934, _935), vec3(_2358, _2359, _2360));
    float _4568 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2358, _2359, _2360));
    float _4579 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2350 * _2350;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
    float _2387 = 0.959999978542327880859375 - _1091;
    float _2389 = 0.959999978542327880859375 - _1092;
    float _2390 = 0.959999978542327880859375 - _1093;
    float _2397 = 1.0 - _2350;
    float _2408 = (0.5 / (((_2365 * ((_2364 * _2397) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2397) + _2350) * _2364))) * _2364;
    float _4590 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2410 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    uint _2424 = _2197 + 9u;
    float _2435 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _936) * 0.949999988079071044921875);
    float _2436 = _2435 * _2435;
    float _2437 = cbLight._m0[_2237].x + _1012;
    float _2438 = cbLight._m0[_2237].y + _1013;
    float _2439 = cbLight._m0[_2237].z + _1014;
    float _2443 = inversesqrt(dot(vec3(_2437, _2438, _2439), vec3(_2437, _2438, _2439)));
    float _2444 = _2443 * _2437;
    float _2445 = _2443 * _2438;
    float _2446 = _2443 * _2439;
    float _2447 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2237].xyz));
    float _4601 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2450 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _2451 = dot(vec3(_933, _934, _935), vec3(_2444, _2445, _2446));
    float _4612 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _2454 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2455 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2444, _2445, _2446));
    float _4623 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2459 = _2436 * _2436;
    float _2463 = ((_2454 * _2454) * (_2459 + (-1.0))) + 1.0;
    float _2470 = exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0);
    float _2477 = 1.0 - _2436;
    float _2487 = (0.5 / (((_2365 * ((_2450 * _2477) + _2436)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2477) + _2436) * _2450))) * _2450;
    float _4634 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2489 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2459 / ((_2463 * _2463) * 3.141590118408203125));
    float _2499 = (((((_2470 * _2387) + _1094) * cbLight._m0[_2424].x) * _2489) * _2220) + ((((cbLight._m0[_2336].x * _2189) * ((_2386 * _2387) + _1094)) * _2410) * _2233);
    float _2500 = (((((_2470 * _2389) + _1096) * cbLight._m0[_2424].y) * _2489) * _2220) + ((((cbLight._m0[_2336].y * _2190) * ((_2386 * _2389) + _1096)) * _2410) * _2233);
    float _2501 = (((((_2470 * _2390) + _1097) * cbLight._m0[_2424].z) * _2489) * _2220) + ((((cbLight._m0[_2336].z * _2191) * ((_2386 * _2390) + _1097)) * _2410) * _2233);
    float _2563;
    float _2565;
    float _2567;
    if (_2273)
    {
        _2563 = _2499;
        _2565 = _2500;
        _2567 = _2501;
    }
    else
    {
        uint _2569 = _2197 + 2u;
        uint _2573 = _2197 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _936) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _1012;
        float _2590 = cbLight._m0[_2569].y + _1013;
        float _2591 = cbLight._m0[_2569].z + _1014;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2569].xyz));
        float _4645 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _2603 = dot(vec3(_933, _934, _935), vec3(_2596, _2597, _2598));
        float _4656 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4667 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2622 = exp2(log2(1.0 - (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0)))) * 5.0);
        float _2629 = 1.0 - _2588;
        float _2639 = (0.5 / (((_2365 * ((_2602 * _2629) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2629) + _2588) * _2602))) * _2602;
        float _4678 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2641 = (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2642 = isnan(1.0) ? _2212 : (isnan(_2212) ? 1.0 : min(_2212, 1.0));
        _2563 = (((((_2622 * _2387) + _1094) * cbLight._m0[_2573].x) * _2641) * _2642) + _2499;
        _2565 = (((((_2622 * _2389) + _1096) * cbLight._m0[_2573].y) * _2641) * _2642) + _2500;
        _2567 = (((((_2622 * _2390) + _1097) * cbLight._m0[_2573].z) * _2641) * _2642) + _2501;
    }
    float _2677;
    float _2679;
    float _2681;
    if (_2291)
    {
        _2677 = _2563;
        _2679 = _2565;
        _2681 = _2567;
    }
    else
    {
        uint _2688 = _2197 + 3u;
        uint _2692 = _2197 + 11u;
        float _2706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2688].w)) * _936) * 0.949999988079071044921875);
        float _2707 = _2706 * _2706;
        float _2708 = cbLight._m0[_2688].x + _1012;
        float _2709 = cbLight._m0[_2688].y + _1013;
        float _2710 = cbLight._m0[_2688].z + _1014;
        float _2714 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
        float _2715 = _2714 * _2708;
        float _2716 = _2714 * _2709;
        float _2717 = _2714 * _2710;
        float _2718 = dot(vec3(_933, _934, _935), vec3(cbLight._m0[_2688].xyz));
        float _4694 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2722 = dot(vec3(_933, _934, _935), vec3(_2715, _2716, _2717));
        float _4705 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2725 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2726 = dot(vec3(cbLight._m0[_2688].xyz), vec3(_2715, _2716, _2717));
        float _4716 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2730 = _2707 * _2707;
        float _2734 = ((_2725 * _2725) * (_2730 + (-1.0))) + 1.0;
        float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) * 5.0);
        float _2748 = 1.0 - _2707;
        float _2758 = (0.5 / (((_2365 * ((_2721 * _2748) + _2707)) + 9.9999999392252902907785028219223e-09) + (((_2365 * _2748) + _2707) * _2721))) * _2721;
        float _4727 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2760 = (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0))) * (_2730 / ((_2734 * _2734) * 3.141590118408203125));
        float _2761 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
        _2677 = (((((_2741 * _2387) + _1094) * cbLight._m0[_2692].x) * _2760) * _2761) + _2563;
        _2679 = (((((_2741 * _2389) + _1096) * cbLight._m0[_2692].y) * _2760) * _2761) + _2565;
        _2681 = (((((_2741 * _2390) + _1097) * cbLight._m0[_2692].z) * _2760) * _2761) + _2567;
    }
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    float _2906;
    if (_2195.y == 0u)
    {
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2836;
        float _2838 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2836;
        float _2839 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2836;
        uvec4 _2851 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2852 = _2851.x;
        uint _2863 = uint((float(_2851.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1033) / _2852))) + floor(float(uint(cbSceneParam._m0[85u].x * _1032) / _2852)));
        float _2873 = (log2(_2839 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2874 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        uint _2877 = uint(isnan(14.0) ? _2874 : (isnan(_2874) ? 14.0 : min(_2874, 14.0)));
        uvec4 _2882 = texelFetch(g_lightClusterGridBuffer, int(((_2877 << 2u) + (_2863 << 6u)) >> 2u));
        uint _2883 = _2882.x;
        uint _2884 = _2851.z;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        if (((((1u << ((_2884 >> 4u) & 15u)) + 4294967295u) & _2883) == 0u) || ((_2884 & 240u) == 0u))
        {
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
        }
        else
        {
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            uint _3143 = 0u;
            uint _3152;
            bool _3153;
            for (;;)
            {
                _3152 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3143 << 2u)) >> 2u)).x;
                _3153 = _3152 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3153)
                {
                    frontier_phi_66_pred = _3137;
                    frontier_phi_66_pred_1 = _3142;
                    frontier_phi_66_pred_2 = _3141;
                    frontier_phi_66_pred_3 = _3140;
                    frontier_phi_66_pred_4 = _3139;
                    frontier_phi_66_pred_5 = _3138;
                }
                else
                {
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    uint _3288;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3152;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    float _3213;
                    float _3214;
                    for (;;)
                    {
                        uint _3292 = uint(findLSB(_3288)) + (_3143 << 5u);
                        uint _3289 = (_3288 + 4294967295u) & _3288;
                        uint _3294 = _3292 * 48u;
                        vec4 _3308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3314 = (_3292 * 48u) + 4u;
                        vec4 _3327 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3333 = (_3292 * 48u) + 8u;
                        vec3 _3344 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3333)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3333 + 2u)).x));
                        float _3348 = _3308.x - _2837;
                        float _3349 = _3308.y - _2838;
                        float _3350 = _3308.z - _2839;
                        float _3351 = dot(vec3(_3348, _3349, _3350), vec3(_3348, _3349, _3350));
                        float _3354 = inversesqrt(_3351);
                        float _3355 = _3354 * _3348;
                        float _3356 = _3354 * _3349;
                        float _3357 = _3354 * _3350;
                        float _3358 = dot(vec3(_1051, _1054, _1057), vec3(_3355, _3356, _3357));
                        float _3363 = 1.0 - (_3351 * _3308.w);
                        float _4753 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3364 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3365 = sqrt(_3351) * _3327.w;
                        float _3368 = 1.39999997615814208984375 / (_3365 + 1.39999997615814208984375);
                        float _3369 = _3368 * _3368;
                        float _3372 = ((1.0 - _3369) * _3358) + _3369;
                        float _3375 = _3365 * _3365;
                        float _3379 = ((isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0))) * _3364) / ((_3375 * 0.699999988079071044921875) + 1.0);
                        float _3383 = (-0.0) - _2837;
                        float _3384 = (-0.0) - _2838;
                        float _3385 = (-0.0) - _2839;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3400 = exp2(log2(1.0 / ((_3375 * 3.5) + 5.0)) * 0.25);
                        float _3401 = 1.0 - _1126;
                        float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                        float _3409 = _3408 * _3408;
                        float _3410 = _3409 * _3409;
                        float _3411 = _3390 + _3355;
                        float _3412 = _3391 + _3356;
                        float _3413 = _3392 + _3357;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3421 = dot(vec3(_1051, _1054, _1057), vec3(_3390, _3391, _3392));
                        float _4769 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3425 = dot(vec3(_1051, _1054, _1057), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                        float _4780 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                        float _3433 = _3368 * _3409;
                        float _3434 = _3433 * _3433;
                        float _3437 = ((1.0 - _3434) * _3358) + _3434;
                        float _4791 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3439 = 1.0 - _3409;
                        float _3449 = (0.5 / (((_3438 * ((_3424 * _3439) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3438 * _3439) + _3409) * _3424))) * _3438;
                        float _4802 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3460 = (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) / ((_3432 * _3432) * ((_3375 * 2.1991131305694580078125) + 3.141590118408203125))) * _3364;
                        _3212 = (_3379 * _3327.x) + _3285;
                        _3213 = (_3379 * _3327.y) + _3286;
                        _3214 = (_3379 * _3327.z) + _3287;
                        _3209 = (_3460 * _3344.x) + _3282;
                        _3210 = (_3460 * _3344.y) + _3283;
                        _3211 = (_3460 * _3344.z) + _3284;
                        if (_3289 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3289;
                        }
                    }
                    frontier_phi_66_pred = _3209;
                    frontier_phi_66_pred_1 = _3214;
                    frontier_phi_66_pred_2 = _3213;
                    frontier_phi_66_pred_3 = _3212;
                    frontier_phi_66_pred_4 = _3211;
                    frontier_phi_66_pred_5 = _3210;
                }
                _2985 = frontier_phi_66_pred;
                _2995 = frontier_phi_66_pred_1;
                _2993 = frontier_phi_66_pred_2;
                _2991 = frontier_phi_66_pred_3;
                _2989 = frontier_phi_66_pred_4;
                _2987 = frontier_phi_66_pred_5;
                uint _3144 = _3143 + 1u;
                if (_3144 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3137 = _2985;
                    _3138 = _2987;
                    _3139 = _2989;
                    _3140 = _2991;
                    _3141 = _2993;
                    _3142 = _2995;
                    _3143 = _3144;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
        }
        uvec4 _2998 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2999 = _2998.z;
        uint _3001 = (_2999 >> 8u) & 15u;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((4294967295u << _3001) & _2883) == 0u)
        {
            _3105 = _2984;
            _3107 = _2986;
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
        }
        else
        {
            float _3130 = inversesqrt(dot(vec3(_2837, _2838, _2839), vec3(_2837, _2838, _2839)));
            float _3131 = _3130 * _2837;
            float _3132 = _3130 * _2838;
            float _3133 = _3130 * _2839;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3001 < ((_2999 >> 12u) & 15u))
            {
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3265 = _2984;
                float _3266 = _2986;
                float _3267 = _2988;
                float _3268 = _2990;
                float _3269 = _2992;
                float _3270 = _2994;
                uint _3271 = _3001;
                uint _3280;
                bool _3281;
                for (;;)
                {
                    _3280 = texelFetch(g_lightClassification, int((((_2877 << 5u) + (_2863 << 9u)) + (_3271 << 2u)) >> 2u)).x;
                    _3281 = _3280 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3281)
                    {
                        frontier_phi_77_pred = _3270;
                        frontier_phi_77_pred_1 = _3269;
                        frontier_phi_77_pred_2 = _3268;
                        frontier_phi_77_pred_3 = _3267;
                        frontier_phi_77_pred_4 = _3266;
                        frontier_phi_77_pred_5 = _3265;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        float _3491 = _3269;
                        float _3492 = _3270;
                        uint _3493 = _3280;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3271 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2839, _3611.z, fma(_2838, _3611.y, _3611.x * _2837)) + _3611.w;
                            _3624 = !((fma(_2839, _3592.z, fma(_2838, _3592.y, _3592.x * _2837)) + _3592.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _2837;
                                float _3652 = _3519.y - _2838;
                                float _3653 = _3519.z - _2839;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4813 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_1051, _1054, _1057))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2839, _3562.z, fma(_2838, _3562.y, _3562.x * _2837)) + _3562.w) / _3623;
                                float _3683 = (fma(_2839, _3577.z, fma(_2838, _3577.y, _3577.x * _2837)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4829 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _1126;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3131;
                                float _3713 = _3659 - _3132;
                                float _3714 = _3660 - _3133;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _3131, (-0.0) - _3132, (-0.0) - _3133));
                                float _4840 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3726 = dot(vec3(_1051, _1054, _1057), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4851 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_1051, _1054, _1057), vec3(_3658, _3659, _3660))) + _3735;
                                float _4862 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4873 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3689 * _3535.y;
                                frontier_phi_83_pred_1 = _3689 * _3535.x;
                                frontier_phi_83_pred_2 = _3763 * _3547.z;
                                frontier_phi_83_pred_3 = _3763 * _3547.y;
                                frontier_phi_83_pred_4 = _3763 * _3547.x;
                                frontier_phi_83_pred_5 = _3689 * _3535.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_83_pred;
                            _3770 = frontier_phi_83_pred_1;
                            _3769 = frontier_phi_83_pred_2;
                            _3768 = frontier_phi_83_pred_3;
                            _3767 = frontier_phi_83_pred_4;
                            _3772 = frontier_phi_83_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3479;
                        frontier_phi_77_pred_1 = _3478;
                        frontier_phi_77_pred_2 = _3477;
                        frontier_phi_77_pred_3 = _3476;
                        frontier_phi_77_pred_4 = _3475;
                        frontier_phi_77_pred_5 = _3474;
                    }
                    _3116 = frontier_phi_77_pred;
                    _3114 = frontier_phi_77_pred_1;
                    _3112 = frontier_phi_77_pred_2;
                    _3110 = frontier_phi_77_pred_3;
                    _3108 = frontier_phi_77_pred_4;
                    _3106 = frontier_phi_77_pred_5;
                    uint _3272 = _3271 + 1u;
                    if (_3272 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3265 = _3106;
                        _3266 = _3108;
                        _3267 = _3110;
                        _3268 = _3112;
                        _3269 = _3114;
                        _3270 = _3116;
                        _3271 = _3272;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3110;
                frontier_phi_58_59_ladder_1 = _3116;
                frontier_phi_58_59_ladder_2 = _3114;
                frontier_phi_58_59_ladder_3 = _3112;
                frontier_phi_58_59_ladder_4 = _3108;
                frontier_phi_58_59_ladder_5 = _3106;
            }
            else
            {
                frontier_phi_58_59_ladder = _2988;
                frontier_phi_58_59_ladder_1 = _2994;
                frontier_phi_58_59_ladder_2 = _2992;
                frontier_phi_58_59_ladder_3 = _2990;
                frontier_phi_58_59_ladder_4 = _2986;
                frontier_phi_58_59_ladder_5 = _2984;
            }
            _3105 = frontier_phi_58_59_ladder_5;
            _3107 = frontier_phi_58_59_ladder_4;
            _3109 = frontier_phi_58_59_ladder;
            _3111 = frontier_phi_58_59_ladder_3;
            _3113 = frontier_phi_58_59_ladder_2;
            _3115 = frontier_phi_58_59_ladder_1;
        }
        float _3120 = isnan(1.0) ? _1110 : (isnan(_1110) ? 1.0 : min(_1110, 1.0));
        _2896 = (_3120 * _3111) + _2329;
        _2898 = (_3120 * _3113) + _2331;
        _2900 = (_3120 * _3115) + _2333;
        _2902 = ((_3105 * _1094) * _3120) + _2677;
        _2904 = ((_3107 * _1096) * _3120) + _2679;
        _2906 = ((_3109 * _1097) * _3120) + _2681;
    }
    else
    {
        _2896 = _2329;
        _2898 = _2331;
        _2900 = _2333;
        _2902 = _2677;
        _2904 = _2679;
        _2906 = _2681;
    }
    float _4889 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _4900 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _4911 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _2923 = ((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2896 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1110))) + ((_2902 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2898 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1110))) + ((_2904 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _2925 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2900 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1110))) + ((_2906 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    uint _2926 = _260 + 6u;
    float _2934 = _1032 / cbSceneParam._m0[86u].x;
    float _2935 = _1033 / cbSceneParam._m0[86u].y;
    vec4 _2949 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, (log2((isnan(cbSceneParam._m0[77u].w) ? _955 : (isnan(_955) ? cbSceneParam._m0[77u].w : min(_955, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2951 = _2949.x;
    float _2952 = _2949.y;
    float _2953 = _2949.z;
    float _2954 = _2949.w;
    float _3047;
    float _3049;
    float _3051;
    float _3053;
    if (_955 > cbSceneParam._m0[78u].w)
    {
        float _3009 = isnan(_955) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _955 : min(cbSceneParam._m0[80u].w, _955));
        float _3010 = _3009 / _955;
        float _3021 = _3010 * _1005;
        float _3022 = _1006 * _3010;
        float _3023 = (-0.0) - _3022;
        float _3025 = _3010 * _1007;
        float _3027 = (cbSceneParam._m0[77u].w * _3023) / _3009;
        float _3028 = _3027 + cbSceneParam._m0[79u].w;
        float _3029 = cbSceneParam._m0[79u].w - _3022;
        float _3035 = sqrt(((_3021 * _3021) + (_3022 * _3022)) + (_3025 * _3025));
        float _3038 = (1.0 - (cbSceneParam._m0[77u].w / _3009)) * _3035;
        float _3043 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3045 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3222;
        if (abs((_3023 - _3027) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3222 = ((((_3028 > 0.0) ? exp2(_3043 * _3028) : (2.0 - exp2(_3045 * _3028))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3038;
        }
        else
        {
            float _3166 = 1.0 / cbSceneParam._m0[80u].x;
            float _3167 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : max(_3028, _3029));
            float _3168 = isnan(_3029) ? _3028 : (isnan(_3028) ? _3029 : min(_3028, _3029));
            float _3177 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : min(_3167, 0.0));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            _3222 = ((abs(_3035 / _3023) * cbSceneParam._m0[80u].y) * ((((_3177 - _3178) * 2.0) - ((exp2(_3043 * (isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0)))) - exp2(_3043 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0))))) * _3166)) - ((exp2(_3045 * _3177) - exp2(_3045 * _3178)) * _3166))) + (_3038 * cbSceneParam._m0[80u].z);
        }
        vec4 _3224 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2934, _2935, 1.0), 0.0);
        float _3233 = exp2((_3222 * (-1.44269502162933349609375)) * (1.0 - _3224.w));
        float _3234 = log2(_3233);
        float _3250 = log2(_2954);
        _3047 = (exp2(_3250 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].x)) * _3224.x) / cbSceneParam._m0[78u].x)) + _2951;
        _3049 = (exp2(_3250 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].y)) * _3224.y) / cbSceneParam._m0[78u].y)) + _2952;
        _3051 = (exp2(_3250 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3234 * cbSceneParam._m0[78u].z)) * _3224.z) / cbSceneParam._m0[78u].z)) + _2953;
        _3053 = _3233 * _2954;
    }
    else
    {
        _3047 = _2951;
        _3049 = _2952;
        _3051 = _2953;
        _3053 = _2954;
    }
    bool _3260;
    vec4 _3063;
    vec4 _3085;
    float _3087;
    float _3091;
    float _3092;
    float _3093;
    float _3094;
    bool _3104;
    for (;;)
    {
        _3063 = cbMatDynParam._m0[0u];
        float _3065 = roundEven(_3063.y);
        bool _3066 = _3065 == 3.0;
        float _3067 = log2(_3053);
        float _3074 = exp2(_3067 * cbSceneParam._m0[78u].x) * _2923;
        float _3075 = exp2(_3067 * cbSceneParam._m0[78u].y) * _2924;
        float _3076 = exp2(_3067 * cbSceneParam._m0[78u].z) * _2925;
        float _3083 = _1021 + (-0.5);
        _3085 = cbMtdParam._m0[1u];
        _3087 = _3085.y * _3083;
        float _3090 = (_3065 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3091 = _3090 * (_3066 ? _3074 : (_3074 + (cbSceneParam._m0[72u].w * _3047)));
        _3092 = _3090 * (_3066 ? _3075 : (_3075 + (cbSceneParam._m0[72u].w * _3049)));
        _3093 = _3090 * (_3066 ? _3076 : (_3076 + (cbSceneParam._m0[72u].w * _3051)));
        _3094 = _3083 * 0.999000012874603271484375;
        _3104 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3104)
        {
            if ((cbInstanceData._m0[_260 + 7u].x + _3094) < 0.5)
            {
                _3260 = true;
                break;
            }
        }
        uint _3201 = _1070 + uint(_3063.w);
        if ((cbInstanceData._m0[_3201].w < 1.0) && ((cbInstanceData._m0[_3201].w + _3094) < 0.5))
        {
            _3260 = true;
            break;
        }
        if ((_3087 + 1.0) < _3085.x)
        {
            _3260 = true;
            break;
        }
        _3260 = false;
        break;
    }
    float _3465;
    if (_3260)
    {
        discard_state = true;
        _3465 = 0.0;
    }
    else
    {
        _3465 = cbInstanceData._m0[_2926].w;
    }
    SV_Target.x = _3091;
    SV_Target.y = _3092;
    SV_Target.z = _3093;
    SV_Target.w = _3465;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2926].w;
    discard_exit();
}


