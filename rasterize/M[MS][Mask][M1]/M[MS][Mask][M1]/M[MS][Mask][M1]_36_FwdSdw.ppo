#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1333;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _257 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _257 + 1u;
    uint _266 = _257 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_257].x * cbInstanceData._m0[_257].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _378 = _376.x;
    float _390 = dot(vec4(_378, _376.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _407 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_378 - _390) * cbMtdParam._m0[23u].w) + _390) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3942 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _408 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
    float _415 = (_408 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _416 = (_408 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _417 = (_408 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _276) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _277) + cbTextureTilingScale._m0[14u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = ((_456.z - _477) * _408) + _477;
    float _489 = ((((_456.x - _475) * _408) + _475) * 2.0) + (-1.0);
    float _491 = ((((_456.y - _476) * _408) + _476) * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3953 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _550 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _553 = ((isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : min(_550, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _562 = (_553 - ((((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _553))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3974 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _570 = (_563 * ((_436.x * cbMtdParam._m0[18u].x) - _415)) + _415;
    float _571 = (_563 * ((_436.y * cbMtdParam._m0[18u].y) - _416)) + _416;
    float _572 = (_563 * ((_436.z * cbMtdParam._m0[18u].z) - _417)) + _417;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _276) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _277) + cbTextureTilingScale._m0[19u].w));
    float _586 = _584.x;
    float _587 = 1.0 - _586;
    float _612 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_586 - _587) * cbMtdParam._m0[24u].w) + _587) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3985 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _621 = ((((cbMtdParam._m0[10u].x - _570) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _613) + _570;
    float _622 = ((((cbMtdParam._m0[10u].y - _571) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _613) + _571;
    float _623 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _572)) * _613) + _572;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _651 = _649.x;
    float _669 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _651) * _408) + _651;
    float _673 = ((_635.x - _669) * cbMtdParam._m0[19u].z) + _669;
    float _675 = _673 - (_673 * _563);
    float _677 = _675 - (_675 * _613);
    float _681 = (cbMtdParam._m0[19u].w * (_513.z - _486)) + _486;
    vec4 _695 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _702 = (_695.x * 2.0) + (-1.0);
    float _703 = (_695.y * 2.0) + (-1.0);
    float _704 = dot(vec2(_702, _703), vec2(_702, _703));
    float _3996 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _712 = (_563 * (_695.z - _681)) + _681;
    float _715 = ((cbMtdParam._m0[23u].x - _712) * _613) + _712;
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _276) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _277) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _740 = (_734.x * 2.0) + (-1.0);
    float _741 = (_734.y * 2.0) + (-1.0);
    float _742 = dot(vec2(_740, _741), vec2(_740, _741));
    float _4007 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _750 = (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _751 = (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _763 = (((_702 - _750) + (cbMtdParam._m0[21u].x * _750)) * _563) + _750;
    float _764 = (((_703 - _751) + (cbMtdParam._m0[21u].x * _751)) * _563) + _751;
    float _765 = (_563 * (sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _497)) + _497;
    float _776 = (((_740 - _763) + (_763 * cbMtdParam._m0[22u].z)) * _613) + _763;
    float _777 = (((_741 - _764) + (_764 * cbMtdParam._m0[22u].z)) * _613) + _764;
    float _778 = ((sqrt(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) - _765) * _613) + _765;
    float _780 = cbMtdParam._m0[22u].x + _513.w;
    float _783 = fma(_778, _244 * NORMAL.x, fma(_777, _251 * TANGENT.x, (_237 * _229) * _776));
    float _786 = fma(_778, _244 * NORMAL.y, fma(_777, _251 * TANGENT.y, (_237 * _230) * _776));
    float _789 = fma(_778, _244 * NORMAL.z, fma(_777, _251 * TANGENT.z, (_237 * _231) * _776));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _4018 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _797 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4040 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4051 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4062 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4073 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _802 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _856 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _856);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _856);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _856);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _900 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _903 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _906 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _920 = (_257 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _926 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_920].x;
    float _927 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_920].y;
    float _928 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) * cbInstanceData._m0[_920].z;
    float _4084 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _4095 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _932 = 1.0 - _802;
    float _933 = _929 * _932;
    float _934 = _930 * _932;
    float _935 = _931 * _932;
    float _940 = (_929 + (-0.039999999105930328369140625)) * _802;
    float _941 = (_930 + (-0.039999999105930328369140625)) * _802;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _802;
    float _943 = _940 + 0.039999999105930328369140625;
    float _945 = _941 + 0.039999999105930328369140625;
    float _946 = _942 + 0.039999999105930328369140625;
    vec4 _955 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _959 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * TEXCOORD_5.w) * _955.x;
    float _960 = dot(vec3(_794, _795, _796), vec3(_873, _874, _875));
    float _963 = _960 * 2.0;
    float _967 = (_963 * _794) - _873;
    float _968 = (_963 * _795) - _874;
    float _969 = (_963 * _796) - _875;
    float _973 = abs(dot(vec3(_873, _874, _875), vec3(_794, _795, _796)));
    float _4117 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _975 = sqrt(_797);
    float _988 = exp2((_975 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_975 * 3.0));
    float _994 = (1.0 - _988) * ((_975 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _995 = _988 * _975;
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1031 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1332;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1057 = fma(_1031, cbModelParam._m0[26u].z, fma(_1027, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023));
        float _1061 = fma(_1031, cbModelParam._m0[27u].z, fma(_1027, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023));
        float _1065 = fma(_1031, cbModelParam._m0[28u].z, fma(_1027, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023));
        float _1090 = _1023 + _794;
        float _1091 = _1027 + _795;
        float _1092 = _1031 + _796;
        float _1102 = fma(_1092, cbModelParam._m0[26u].z, fma(_1091, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1090)) - _1057;
        float _1103 = fma(_1092, cbModelParam._m0[27u].z, fma(_1091, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1090)) - _1061;
        float _1104 = fma(_1092, cbModelParam._m0[28u].z, fma(_1091, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1090)) - _1065;
        float _1108 = inversesqrt(dot(vec3(_1102, _1103, _1104), vec3(_1102, _1103, _1104)));
        float _1121 = ((_1108 * _1102) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1057 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1122 = ((_1108 * _1103) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1061 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1123 = ((_1108 * _1104) / cbModelParam._m0[34u].z) + ((((((_1065 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1121, _1122, _1123), 0.0);
        float _1160 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1126.x + (-0.5));
        float _1162 = _1160 * (_1126.y + (-0.5));
        float _1163 = _1160 * (_1126.z + (-0.5));
        float _1170 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1133.x + (-0.5));
        float _1172 = _1170 * (_1133.y + (-0.5));
        float _1173 = _1170 * (_1133.z + (-0.5));
        float _1180 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1140.x + (-0.5));
        float _1182 = _1180 * (_1140.y + (-0.5));
        float _1183 = _1180 * (_1140.z + (-0.5));
        float _1190 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1147.x + (-0.5));
        float _1192 = _1190 * (_1147.y + (-0.5));
        float _1193 = _1190 * (_1147.z + (-0.5));
        float _1194 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1195 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1196 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1197 = _1161 * 0.5;
        float _1198 = _1171 * 0.5;
        float _1199 = _1181 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1214 = (dot(vec3(_794, _795, _796), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1224 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1194 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4165 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1226 + 1.0))) + _1231) * _1194;
        float _1241 = _1162 * 0.5;
        float _1242 = _1172 * 0.5;
        float _1243 = _1182 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_794, _795, _796), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1195 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4198 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1268 + 1.0))) + _1273) * _1195;
        float _1283 = _1163 * 0.5;
        float _1284 = _1173 * 0.5;
        float _1285 = _1183 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_794, _795, _796), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1196 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4231 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1310 + 1.0))) + _1315) * _1196;
        _1332 = _1163;
        _1334 = _1162;
        _1335 = _1161;
        _1336 = _1173;
        _1337 = _1172;
        _1338 = _1171;
        _1339 = _1183;
        _1340 = _1182;
        _1341 = _1181;
        _1342 = _1196;
        _1343 = _1195;
        _1344 = _1194;
        _1345 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
        _1346 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1347 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
    }
    else
    {
        _1332 = _1333;
        _1334 = _1333;
        _1335 = _1333;
        _1336 = _1333;
        _1337 = _1333;
        _1338 = _1333;
        _1339 = _1333;
        _1340 = _1333;
        _1341 = _1333;
        _1342 = _1333;
        _1343 = _1333;
        _1344 = _1333;
        _1345 = 0.0;
        _1346 = 0.0;
        _1347 = 0.0;
    }
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1372 = fma(_1031, cbModelParam._m0[30u].z, fma(_1027, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1023));
        float _1376 = fma(_1031, cbModelParam._m0[31u].z, fma(_1027, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1023));
        float _1380 = fma(_1031, cbModelParam._m0[32u].z, fma(_1027, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1023));
        float _1403 = _1023 + _794;
        float _1404 = _1027 + _795;
        float _1405 = _1031 + _796;
        float _1415 = fma(_1405, cbModelParam._m0[30u].z, fma(_1404, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403)) - _1372;
        float _1416 = fma(_1405, cbModelParam._m0[31u].z, fma(_1404, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403)) - _1376;
        float _1417 = fma(_1405, cbModelParam._m0[32u].z, fma(_1404, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403)) - _1380;
        float _1421 = inversesqrt(dot(vec3(_1415, _1416, _1417), vec3(_1415, _1416, _1417)));
        float _1434 = ((_1421 * _1415) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1372 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1435 = ((_1421 * _1416) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1376 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1421 * _1417) / cbModelParam._m0[35u].z) + ((((((_1380 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1434, _1435, _1436), 0.0);
        float _1471 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1438.x + (-0.5));
        float _1473 = _1471 * (_1438.y + (-0.5));
        float _1474 = _1471 * (_1438.z + (-0.5));
        float _1481 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1445.x + (-0.5));
        float _1483 = _1481 * (_1445.y + (-0.5));
        float _1484 = _1481 * (_1445.z + (-0.5));
        float _1491 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1452.x + (-0.5));
        float _1493 = _1491 * (_1452.y + (-0.5));
        float _1494 = _1491 * (_1452.z + (-0.5));
        float _1501 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1502 = _1501 * (_1459.x + (-0.5));
        float _1503 = _1501 * (_1459.y + (-0.5));
        float _1504 = _1501 * (_1459.z + (-0.5));
        float _1505 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1506 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1507 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1508 = _1472 * 0.5;
        float _1509 = _1482 * 0.5;
        float _1510 = _1492 * 0.5;
        float _1511 = dot(vec3(_1508, _1509, _1510), vec3(_1508, _1509, _1510));
        float _1516 = (_1511 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1511);
        float _1524 = (dot(vec3(_794, _795, _796), vec3(_1516 * _1508, _1516 * _1509, _1516 * _1510)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1533 = sqrt(((_1509 * _1509) + (_1508 * _1508)) + (_1510 * _1510)) / (_1505 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1535 = _1534 * 2.0;
        float _1539 = (1.0 - _1534) / (_1534 + 1.0);
        float _4294 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1549 = ((((1.0 - _1540) * (_1535 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1535 + 1.0))) + _1540) * _1505;
        float _1550 = _1473 * 0.5;
        float _1551 = _1483 * 0.5;
        float _1552 = _1493 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_794, _795, _796), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1506 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4327 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1577 + 1.0))) + _1582) * _1506;
        float _1592 = _1474 * 0.5;
        float _1593 = _1484 * 0.5;
        float _1594 = _1494 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_794, _795, _796), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1507 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4360 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1619 + 1.0))) + _1624) * _1507;
        _1641 = _1474;
        _1642 = _1473;
        _1643 = _1472;
        _1644 = _1484;
        _1645 = _1483;
        _1646 = _1482;
        _1647 = _1494;
        _1648 = _1493;
        _1649 = _1492;
        _1650 = _1507;
        _1651 = _1506;
        _1652 = _1505;
        _1653 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)));
        _1654 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1655 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
    }
    else
    {
        _1641 = _1333;
        _1642 = _1333;
        _1643 = _1333;
        _1644 = _1333;
        _1645 = _1333;
        _1646 = _1333;
        _1647 = _1333;
        _1648 = _1333;
        _1649 = _1333;
        _1650 = _1333;
        _1651 = _1333;
        _1652 = _1333;
        _1653 = 0.0;
        _1654 = 0.0;
        _1655 = 0.0;
    }
    float _1665 = (cbModelParam._m0[1u].x * (_1653 - _1345)) + _1345;
    float _1666 = (cbModelParam._m0[1u].x * (_1654 - _1346)) + _1346;
    float _1667 = (cbModelParam._m0[1u].x * (_1655 - _1347)) + _1347;
    float _1688 = fma(_1667, cbSceneParam._m0[89u].z, fma(_1666, cbSceneParam._m0[89u].y, _1665 * cbSceneParam._m0[89u].x));
    float _1691 = fma(_1667, cbSceneParam._m0[90u].z, fma(_1666, cbSceneParam._m0[90u].y, _1665 * cbSceneParam._m0[90u].x));
    float _1694 = fma(_1667, cbSceneParam._m0[91u].z, fma(_1666, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1665));
    float _1709 = _967 * 0.5;
    float _1710 = _968 * 0.5;
    float _1711 = _969 * 0.5;
    float _1712 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1643, _1646, _1649, _1652));
    float _1715 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1642, _1645, _1648, _1651));
    float _1718 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1641, _1644, _1647, _1650));
    float _1752;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1725 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1332, _1336, _1339, _1342));
        float _1729 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1334, _1337, _1340, _1343));
        float _1733 = dot(vec4(_1709, _1710, _1711, 1.0), vec4(_1335, _1338, _1341, _1344));
        float _1740 = dot(vec4(cbModelParam._m0[39u]), vec4(_1709, _1710, _1711, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)), isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1763;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1754 = dot(vec4(cbModelParam._m0[40u]), vec4(_1709, _1710, _1711, 1.0));
        _1763 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1754) ? 0.0 : (isnan(0.0) ? _1754 : max(0.0, _1754))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1763 = 1.0;
    }
    float _1767 = (_1763 * cbModelParam._m0[1u].x) + (_1752 * (1.0 - cbModelParam._m0[1u].x));
    float _1777 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1778 = isnan(_1777) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1777 : min(cbModelParam._m0[25u].z, _1777));
    float _1858;
    float _1860;
    float _1862;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1825 = fma(_1031, cbModelParam._m0[13u].z, fma(_1027, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1023)) + cbModelParam._m0[13u].w;
        float _1829 = fma(_1031, cbModelParam._m0[14u].z, fma(_1027, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1023)) + cbModelParam._m0[14u].w;
        float _1833 = fma(_1031, cbModelParam._m0[15u].z, fma(_1027, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1023)) + cbModelParam._m0[15u].w;
        float _1836 = fma(_969, cbModelParam._m0[13u].z, fma(_968, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _967));
        float _1839 = fma(_969, cbModelParam._m0[14u].z, fma(_968, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _967));
        float _1842 = fma(_969, cbModelParam._m0[15u].z, fma(_968, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _967));
        float _1870;
        if (_1836 > 0.0)
        {
            _1870 = abs((1.0 - _1825) / _1836);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1836 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1825 + 1.0) / _1836);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1870 = frontier_phi_14_12_ladder;
        }
        float _2041;
        if (_1839 > 0.0)
        {
            _2041 = abs((1.0 - _1829) / _1839);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1839 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1829 + 1.0) / _1839);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2041 = frontier_phi_23_19_ladder;
        }
        float _2336;
        if (_1842 > 0.0)
        {
            _2336 = abs((1.0 - _1833) / _1842);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1842 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1833 + 1.0) / _1842);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2336 = frontier_phi_35_30_ladder;
        }
        float _2338 = isnan(_2041) ? _1870 : (isnan(_1870) ? _2041 : min(_1870, _2041));
        float _2339 = isnan(_2336) ? _2338 : (isnan(_2338) ? _2336 : min(_2338, _2336));
        float _2343 = (_2339 * _1836) + _1825;
        float _2344 = (_2339 * _1839) + _1829;
        float _2345 = (_2339 * _1842) + _1833;
        float _2346 = _2339 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2346;
        float _2350 = _2346 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 > _2350) || ((_2344 < _2348) || ((_2343 < _2348) || (_2343 > _2350))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2345, cbModelParam._m0[9u].z, fma(_2344, cbModelParam._m0[9u].y, _2343 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2345, cbModelParam._m0[10u].z, fma(_2344, cbModelParam._m0[10u].y, _2343 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2345, cbModelParam._m0[11u].z, fma(_2344, cbModelParam._m0[11u].y, _2343 * cbModelParam._m0[11u].x))), _1778);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1858 = frontier_phi_13_35_ladder_2;
        _1860 = frontier_phi_13_35_ladder_1;
        _1862 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1846 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_967, _968, _969), _1778);
        _1858 = _1846.x * cbModelParam._m0[1u].y;
        _1860 = _1846.y * cbModelParam._m0[1u].y;
        _1862 = _1846.z * cbModelParam._m0[1u].y;
    }
    float _1866 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1866 : min(cbModelParam._m0[25u].w, _1866));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1920 = fma(_1031, cbModelParam._m0[21u].z, fma(_1027, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1023)) + cbModelParam._m0[21u].w;
        float _1924 = fma(_1031, cbModelParam._m0[22u].z, fma(_1027, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1023)) + cbModelParam._m0[22u].w;
        float _1928 = fma(_1031, cbModelParam._m0[23u].z, fma(_1027, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1023)) + cbModelParam._m0[23u].w;
        float _1931 = fma(_969, cbModelParam._m0[21u].z, fma(_968, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _967));
        float _1934 = fma(_969, cbModelParam._m0[22u].z, fma(_968, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _967));
        float _1937 = fma(_969, cbModelParam._m0[23u].z, fma(_968, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _967));
        float _2046;
        if (_1931 > 0.0)
        {
            _2046 = abs((1.0 - _1920) / _1931);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1920 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2046 = frontier_phi_25_21_ladder;
        }
        float _2363;
        if (_1934 > 0.0)
        {
            _2363 = abs((1.0 - _1924) / _1934);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1924 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2363 = frontier_phi_37_32_ladder;
        }
        float _2701;
        if (_1937 > 0.0)
        {
            _2701 = abs((1.0 - _1928) / _1937);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1928 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2701 = frontier_phi_47_44_ladder;
        }
        float _2703 = isnan(_2363) ? _2046 : (isnan(_2046) ? _2363 : min(_2046, _2363));
        float _2704 = isnan(_2701) ? _2703 : (isnan(_2703) ? _2701 : min(_2703, _2701));
        float _2708 = (_2704 * _1931) + _1920;
        float _2709 = (_2704 * _1934) + _1924;
        float _2710 = (_2704 * _1937) + _1928;
        float _2711 = _2704 * 9.9999997473787516355514526367188e-05;
        float _2712 = (-1.0) - _2711;
        float _2714 = _2711 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2710 > _2714) || ((_2710 < _2712) || ((_2709 > _2714) || ((_2709 < _2712) || ((_2708 < _2712) || (_2708 > _2714))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2832 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2710, cbModelParam._m0[17u].z, fma(_2709, cbModelParam._m0[17u].y, _2708 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2710, cbModelParam._m0[18u].z, fma(_2709, cbModelParam._m0[18u].y, _2708 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2710, cbModelParam._m0[19u].z, fma(_2709, cbModelParam._m0[19u].y, _2708 * cbModelParam._m0[19u].x))), _1867);
            frontier_phi_22_47_ladder = _2832.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2832.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2832.x * cbModelParam._m0[1u].z;
        }
        _1956 = frontier_phi_22_47_ladder_2;
        _1958 = frontier_phi_22_47_ladder_1;
        _1960 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_967, _968, _969), _1867);
        _1956 = _1940.x * cbModelParam._m0[1u].z;
        _1958 = _1940.y * cbModelParam._m0[1u].z;
        _1960 = _1940.z * cbModelParam._m0[1u].z;
    }
    float _1973 = (((_994 * _943) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1956 - _1858)) + _1858);
    float _1975 = (((_994 * _945) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1958 - _1860)) + _1860);
    float _1977 = (((_994 * _946) + _995) * _959) * ((cbModelParam._m0[1u].w * (_1960 - _1862)) + _1862);
    float _1980 = fma(_1977, cbSceneParam._m0[89u].z, fma(_1975, cbSceneParam._m0[89u].y, _1973 * cbSceneParam._m0[89u].x));
    float _1983 = fma(_1977, cbSceneParam._m0[90u].z, fma(_1975, cbSceneParam._m0[90u].y, _1973 * cbSceneParam._m0[90u].x));
    float _1986 = fma(_1977, cbSceneParam._m0[91u].z, fma(_1975, cbSceneParam._m0[91u].y, _1973 * cbSceneParam._m0[91u].x));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2024 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2028 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2032 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2033 = _2020 / _2032;
    float _2034 = _2024 / _2032;
    float _2035 = _2028 / _2032;
    float _2182;
    float _2183;
    float _2184;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2062 = ((uint(_2035 > cbSceneParam._m0[59u].y) + uint(_2035 > cbSceneParam._m0[59u].x)) + uint(_2035 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2063 = _2062 + 43u;
        uint _2071 = _2062 + 44u;
        uint _2079 = _2062 + 45u;
        uint _2087 = _2062 + 46u;
        float _2098 = fma(_2032, cbSceneParam._m0[_2063].w, fma(_2028, cbSceneParam._m0[_2063].z, fma(_2024, cbSceneParam._m0[_2063].y, _2020 * cbSceneParam._m0[_2063].x)));
        float _2102 = fma(_2032, cbSceneParam._m0[_2071].w, fma(_2028, cbSceneParam._m0[_2071].z, fma(_2024, cbSceneParam._m0[_2071].y, _2020 * cbSceneParam._m0[_2071].x)));
        float _2110 = fma(_2032, cbSceneParam._m0[_2087].w, fma(_2028, cbSceneParam._m0[_2087].z, fma(_2024, cbSceneParam._m0[_2087].y, _2020 * cbSceneParam._m0[_2087].x)));
        float _2115 = cbSceneParam._m0[33u].z * _2110;
        float _2117 = cbSceneParam._m0[33u].w * _2110;
        float _2120 = fma(_2032, cbSceneParam._m0[_2079].w, fma(_2028, cbSceneParam._m0[_2079].z, fma(_2024, cbSceneParam._m0[_2079].y, _2020 * cbSceneParam._m0[_2079].x))) / _2110;
        float _2168 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
        float _4486 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2175 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2115 + _2098) / _2110, (_2117 + _2102) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2117 + _2098) / _2110, (_2102 - _2115) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2115) / _2110, (_2102 - _2117) / _2110), _2120), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2098 - _2117) / _2110, (_2115 + _2102) / _2110), _2120), 0.0)).x), vec4(0.25)));
        _2182 = 1.0 - (_2175 * cbSceneParam._m0[34u].x);
        _2183 = 1.0 - (_2175 * cbSceneParam._m0[34u].y);
        _2184 = 1.0 - (_2175 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2182 = 1.0;
        _2183 = 1.0;
        _2184 = 1.0;
    }
    float _2248;
    float _2250;
    float _2252;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2236 = fma(_2032, cbSceneParam._m0[63u].w, fma(_2028, cbSceneParam._m0[63u].z, fma(_2024, cbSceneParam._m0[63u].y, _2020 * cbSceneParam._m0[63u].x)));
        float _2237 = fma(_2032, cbSceneParam._m0[60u].w, fma(_2028, cbSceneParam._m0[60u].z, fma(_2024, cbSceneParam._m0[60u].y, _2020 * cbSceneParam._m0[60u].x))) / _2236;
        float _2238 = fma(_2032, cbSceneParam._m0[61u].w, fma(_2028, cbSceneParam._m0[61u].z, fma(_2024, cbSceneParam._m0[61u].y, _2020 * cbSceneParam._m0[61u].x))) / _2236;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2237 >= cbSceneParam._m0[64u].x) && (_2238 >= cbSceneParam._m0[64u].y)) && (_2237 <= cbSceneParam._m0[64u].z)) && (_2238 <= cbSceneParam._m0[64u].w))
        {
            float _2376 = fma(_2032, cbSceneParam._m0[62u].w, fma(_2028, cbSceneParam._m0[62u].z, fma(_2024, cbSceneParam._m0[62u].y, _2020 * cbSceneParam._m0[62u].x))) / _2236;
            float _2380 = isnan(cbSceneParam._m0[41u].w) ? _2376 : (isnan(_2376) ? cbSceneParam._m0[41u].w : max(_2376, cbSceneParam._m0[41u].w));
            float _2423 = (cbSceneParam._m0[33u].x - sqrt(((_2034 * _2034) + (_2033 * _2033)) + (_2035 * _2035))) * cbSceneParam._m0[33u].y;
            float _4502 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
            float _2430 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2237, cbSceneParam._m0[33u].w + _2238), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2237, _2238 - cbSceneParam._m0[33u].z), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].z, _2238 - cbSceneParam._m0[33u].w), _2380), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2237 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2238), _2380), 0.0)).x), vec4(0.25)));
            float _2434 = 1.0 - (_2430 * cbSceneParam._m0[34u].x);
            float _2435 = 1.0 - (_2430 * cbSceneParam._m0[34u].y);
            float _2436 = 1.0 - (_2430 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2436) ? _2184 : (isnan(_2184) ? _2436 : min(_2184, _2436));
            frontier_phi_34_33_ladder_1 = isnan(_2435) ? _2183 : (isnan(_2183) ? _2435 : min(_2183, _2435));
            frontier_phi_34_33_ladder_2 = isnan(_2434) ? _2182 : (isnan(_2182) ? _2434 : min(_2182, _2434));
        }
        else
        {
            frontier_phi_34_33_ladder = _2184;
            frontier_phi_34_33_ladder_1 = _2183;
            frontier_phi_34_33_ladder_2 = _2182;
        }
        _2248 = frontier_phi_34_33_ladder_2;
        _2250 = frontier_phi_34_33_ladder_1;
        _2252 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2248 = _2182;
        _2250 = _2183;
        _2252 = _2184;
    }
    uvec4 _2257 = floatBitsToUint(cbInstanceData._m0[_257 + 5u]);
    uint _2259 = _2257.x * 14u;
    uint _2260 = _2259 + 13u;
    float _2267 = _959 + (-1.0);
    float _2272 = (cbLight._m0[_2260].x * _2267) + 1.0;
    float _2273 = (cbLight._m0[_2260].y * _2267) + 1.0;
    float _2274 = (cbLight._m0[_2260].z * _2267) + 1.0;
    float _2275 = (cbLight._m0[_2260].w * _2267) + 1.0;
    uint _2276 = _2259 + 5u;
    float _2282 = isnan(1.0) ? _2273 : (isnan(_2273) ? 1.0 : min(_2273, 1.0));
    uint _2286 = _2259 + 4u;
    float _2295 = isnan(1.0) ? _2272 : (isnan(_2272) ? 1.0 : min(_2272, 1.0));
    uint _2299 = _2259 | 1u;
    float _2310 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_794, _795, _796));
    float _2313 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_794, _795, _796));
    float _4538 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _4549 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2318 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * 0.3183098733425140380859375;
    float _2320 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2327 = ((cbLight._m0[_2276].x * _2282) * _2320) + (((cbLight._m0[_2286].x * _2248) * _2295) * _2318);
    float _2328 = ((_2282 * cbLight._m0[_2276].y) * _2320) + (((cbLight._m0[_2286].y * _2250) * _2295) * _2318);
    float _2329 = ((_2282 * cbLight._m0[_2276].z) * _2320) + (((cbLight._m0[_2286].z * _2252) * _2295) * _2318);
    uvec4 _2333 = floatBitsToUint(cbLight._m0[_2259 + 12u]);
    bool _2335 = _2333.x == 0u;
    float _2437;
    float _2439;
    float _2441;
    if (_2335)
    {
        _2437 = _2327;
        _2439 = _2328;
        _2441 = _2329;
    }
    else
    {
        uint _2445 = _2259 + 6u;
        float _2461 = (dot(vec3(cbLight._m0[_2259 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4560 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _2464 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2437 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2327;
        _2439 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2328;
        _2441 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2329;
    }
    bool _2444 = _2333.y == 0u;
    float _2499;
    float _2501;
    float _2503;
    if (_2444)
    {
        _2499 = _2437;
        _2501 = _2439;
        _2503 = _2441;
    }
    else
    {
        uint _2672 = _2259 + 7u;
        float _2688 = (dot(vec3(cbLight._m0[_2259 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2689 = _2688 * _2688;
        float _4576 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2690 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2691 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2499 = (((cbLight._m0[_2672].x * 0.3183098733425140380859375) * _2690) * _2691) + _2437;
        _2501 = (((cbLight._m0[_2672].y * 0.3183098733425140380859375) * _2690) * _2691) + _2439;
        _2503 = (((cbLight._m0[_2672].z * 0.3183098733425140380859375) * _2690) * _2691) + _2441;
    }
    uint _2506 = _2259 + 8u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2259].w)) * _797) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2259].x + _873;
    float _2522 = cbLight._m0[_2259].y + _874;
    float _2523 = cbLight._m0[_2259].z + _875;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2259].xyz));
    float _4592 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
    float _4603 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _2535 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2536 = dot(vec3(_794, _795, _796), vec3(_2528, _2529, _2530));
    float _4614 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2540 = dot(vec3(cbLight._m0[_2259].xyz), vec3(_2528, _2529, _2530));
    float _4625 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2544 = _2520 * _2520;
    float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
    float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2557 = 0.959999978542327880859375 - _940;
    float _2559 = 0.959999978542327880859375 - _941;
    float _2560 = 0.959999978542327880859375 - _942;
    float _2567 = 1.0 - _2520;
    float _2578 = (0.5 / (((_2535 * ((_2534 * _2567) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2567) + _2520) * _2534))) * _2534;
    float _4636 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
    float _2580 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
    uint _2594 = _2259 + 9u;
    float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _797) * 0.949999988079071044921875);
    float _2606 = _2605 * _2605;
    float _2607 = cbLight._m0[_2299].x + _873;
    float _2608 = cbLight._m0[_2299].y + _874;
    float _2609 = cbLight._m0[_2299].z + _875;
    float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
    float _2614 = _2613 * _2607;
    float _2615 = _2613 * _2608;
    float _2616 = _2613 * _2609;
    float _2617 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2299].xyz));
    float _4647 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2621 = dot(vec3(_794, _795, _796), vec3(_2614, _2615, _2616));
    float _4658 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2624 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2625 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2614, _2615, _2616));
    float _4669 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2629 = _2606 * _2606;
    float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
    float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2647 = 1.0 - _2606;
    float _2657 = (0.5 / (((_2535 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2647) + _2606) * _2620))) * _2620;
    float _4680 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2659 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
    float _2669 = (((((_2640 * _2557) + _943) * cbLight._m0[_2594].x) * _2659) * _2282) + ((((cbLight._m0[_2506].x * _2248) * ((_2556 * _2557) + _943)) * _2580) * _2295);
    float _2670 = (((((_2640 * _2559) + _945) * cbLight._m0[_2594].y) * _2659) * _2282) + ((((cbLight._m0[_2506].y * _2250) * ((_2556 * _2559) + _945)) * _2580) * _2295);
    float _2671 = (((((_2640 * _2560) + _946) * cbLight._m0[_2594].z) * _2659) * _2282) + ((((cbLight._m0[_2506].z * _2252) * ((_2556 * _2560) + _946)) * _2580) * _2295);
    float _2727;
    float _2729;
    float _2731;
    if (_2335)
    {
        _2727 = _2669;
        _2729 = _2670;
        _2731 = _2671;
    }
    else
    {
        uint _2733 = _2259 + 2u;
        uint _2737 = _2259 + 10u;
        float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2733].w)) * _797) * 0.949999988079071044921875);
        float _2752 = _2751 * _2751;
        float _2753 = cbLight._m0[_2733].x + _873;
        float _2754 = cbLight._m0[_2733].y + _874;
        float _2755 = cbLight._m0[_2733].z + _875;
        float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
        float _2760 = _2759 * _2753;
        float _2761 = _2759 * _2754;
        float _2762 = _2759 * _2755;
        float _2763 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2733].xyz));
        float _4691 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2766 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
        float _2767 = dot(vec3(_794, _795, _796), vec3(_2760, _2761, _2762));
        float _4702 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2770 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2771 = dot(vec3(cbLight._m0[_2733].xyz), vec3(_2760, _2761, _2762));
        float _4713 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2775 = _2752 * _2752;
        float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
        float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
        float _2793 = 1.0 - _2752;
        float _2803 = (0.5 / (((_2535 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2793) + _2752) * _2766))) * _2766;
        float _4724 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2805 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
        float _2806 = isnan(1.0) ? _2274 : (isnan(_2274) ? 1.0 : min(_2274, 1.0));
        _2727 = (((((_2786 * _2557) + _943) * cbLight._m0[_2737].x) * _2805) * _2806) + _2669;
        _2729 = (((((_2786 * _2559) + _945) * cbLight._m0[_2737].y) * _2805) * _2806) + _2670;
        _2731 = (((((_2786 * _2560) + _946) * cbLight._m0[_2737].z) * _2805) * _2806) + _2671;
    }
    float _2837;
    float _2839;
    float _2841;
    if (_2444)
    {
        _2837 = _2727;
        _2839 = _2729;
        _2841 = _2731;
    }
    else
    {
        uint _2848 = _2259 + 3u;
        uint _2852 = _2259 + 11u;
        float _2866 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2848].w)) * _797) * 0.949999988079071044921875);
        float _2867 = _2866 * _2866;
        float _2868 = cbLight._m0[_2848].x + _873;
        float _2869 = cbLight._m0[_2848].y + _874;
        float _2870 = cbLight._m0[_2848].z + _875;
        float _2874 = inversesqrt(dot(vec3(_2868, _2869, _2870), vec3(_2868, _2869, _2870)));
        float _2875 = _2874 * _2868;
        float _2876 = _2874 * _2869;
        float _2877 = _2874 * _2870;
        float _2878 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2848].xyz));
        float _4740 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2881 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
        float _2882 = dot(vec3(_794, _795, _796), vec3(_2875, _2876, _2877));
        float _4751 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2885 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2886 = dot(vec3(cbLight._m0[_2848].xyz), vec3(_2875, _2876, _2877));
        float _4762 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2890 = _2867 * _2867;
        float _2894 = ((_2885 * _2885) * (_2890 + (-1.0))) + 1.0;
        float _2901 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
        float _2908 = 1.0 - _2867;
        float _2918 = (0.5 / (((_2535 * ((_2881 * _2908) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2535 * _2908) + _2867) * _2881))) * _2881;
        float _4773 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2920 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2890 / ((_2894 * _2894) * 3.141590118408203125));
        float _2921 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
        _2837 = (((((_2901 * _2557) + _943) * cbLight._m0[_2852].x) * _2920) * _2921) + _2727;
        _2839 = (((((_2901 * _2559) + _945) * cbLight._m0[_2852].y) * _2920) * _2921) + _2729;
        _2841 = (((((_2901 * _2560) + _946) * cbLight._m0[_2852].z) * _2920) * _2921) + _2731;
    }
    float _2987;
    float _2989;
    float _2991;
    float _2993;
    float _2995;
    float _2997;
    if (_2257.y == 0u)
    {
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.x;
        uint _2954 = uint((float(_2942.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2943))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2943)));
        float _2964 = (log2(_2035 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2965 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        uint _2968 = uint(isnan(14.0) ? _2965 : (isnan(_2965) ? 14.0 : min(_2965, 14.0)));
        uvec4 _2973 = texelFetch(g_lightClusterGridBuffer, int(((_2968 << 2u) + (_2954 << 6u)) >> 2u));
        uint _2974 = _2973.x;
        uint _2975 = _2942.z;
        float _3054;
        float _3056;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        if (((((1u << ((_2975 >> 4u) & 15u)) + 4294967295u) & _2974) == 0u) || ((_2975 & 240u) == 0u))
        {
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
        }
        else
        {
            float _3055;
            float _3057;
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3215)
                {
                    frontier_phi_66_pred = _3204;
                    frontier_phi_66_pred_1 = _3203;
                    frontier_phi_66_pred_2 = _3202;
                    frontier_phi_66_pred_3 = _3201;
                    frontier_phi_66_pred_4 = _3200;
                    frontier_phi_66_pred_5 = _3199;
                }
                else
                {
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    uint _3329;
                    _3323 = _3199;
                    _3324 = _3200;
                    _3325 = _3201;
                    _3326 = _3202;
                    _3327 = _3203;
                    _3328 = _3204;
                    _3329 = _3214;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    for (;;)
                    {
                        uint _3333 = uint(findLSB(_3329)) + (_3205 << 5u);
                        uint _3330 = (_3329 + 4294967295u) & _3329;
                        uint _3335 = _3333 * 48u;
                        vec4 _3349 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3335)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3335 + 3u)).x));
                        uint _3355 = (_3333 * 48u) + 4u;
                        vec4 _3368 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3355)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3355 + 3u)).x));
                        uint _3374 = (_3333 * 48u) + 8u;
                        vec3 _3385 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x));
                        float _3389 = _3349.x - _2033;
                        float _3390 = _3349.y - _2034;
                        float _3391 = _3349.z - _2035;
                        float _3392 = dot(vec3(_3389, _3390, _3391), vec3(_3389, _3390, _3391));
                        float _3395 = inversesqrt(_3392);
                        float _3396 = _3395 * _3389;
                        float _3397 = _3395 * _3390;
                        float _3398 = _3395 * _3391;
                        float _3399 = dot(vec3(_900, _903, _906), vec3(_3396, _3397, _3398));
                        float _3404 = 1.0 - (_3392 * _3349.w);
                        float _4799 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3405 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3406 = sqrt(_3392) * _3368.w;
                        float _3409 = 1.39999997615814208984375 / (_3406 + 1.39999997615814208984375);
                        float _3410 = _3409 * _3409;
                        float _3413 = ((1.0 - _3410) * _3399) + _3410;
                        float _3416 = _3406 * _3406;
                        float _3420 = ((isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0))) * _3405) / ((_3416 * 0.699999988079071044921875) + 1.0);
                        float _3424 = (-0.0) - _2033;
                        float _3425 = (-0.0) - _2034;
                        float _3426 = (-0.0) - _2035;
                        float _3430 = inversesqrt(dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426)));
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3440 = exp2(log2(1.0 / ((_3416 * 3.5) + 5.0)) * 0.25);
                        float _3441 = 1.0 - _975;
                        float _3448 = sqrt(1.0 - ((1.0 - (_3441 * _3441)) * (1.0 - (_3440 * _3440))));
                        float _3449 = _3448 * _3448;
                        float _3450 = _3449 * _3449;
                        float _3451 = _3431 + _3396;
                        float _3452 = _3432 + _3397;
                        float _3453 = _3433 + _3398;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3461 = dot(vec3(_900, _903, _906), vec3(_3431, _3432, _3433));
                        float _4815 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                        float _3465 = dot(vec3(_900, _903, _906), vec3(_3457 * _3451, _3457 * _3452, _3457 * _3453));
                        float _4826 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3468 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3472 = ((_3468 * _3468) * (_3450 + (-1.0))) + 1.0;
                        float _3473 = _3409 * _3449;
                        float _3474 = _3473 * _3473;
                        float _3477 = ((1.0 - _3474) * _3399) + _3474;
                        float _4837 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3479 = 1.0 - _3449;
                        float _3489 = (0.5 / (((_3478 * ((_3464 * _3479) + _3449)) + 9.9999999392252902907785028219223e-09) + (((_3478 * _3479) + _3449) * _3464))) * _3478;
                        float _4848 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                        float _3500 = (((_3450 * 3.1415927410125732421875) * (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) / ((_3472 * _3472) * ((_3416 * 2.1991131305694580078125) + 3.141590118408203125))) * _3405;
                        _3258 = (_3420 * _3368.x) + _3326;
                        _3259 = (_3420 * _3368.y) + _3327;
                        _3260 = (_3420 * _3368.z) + _3328;
                        _3255 = (_3500 * _3385.x) + _3323;
                        _3256 = (_3500 * _3385.y) + _3324;
                        _3257 = (_3500 * _3385.z) + _3325;
                        if (_3330 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3323 = _3255;
                            _3324 = _3256;
                            _3325 = _3257;
                            _3326 = _3258;
                            _3327 = _3259;
                            _3328 = _3260;
                            _3329 = _3330;
                        }
                    }
                    frontier_phi_66_pred = _3260;
                    frontier_phi_66_pred_1 = _3259;
                    frontier_phi_66_pred_2 = _3258;
                    frontier_phi_66_pred_3 = _3257;
                    frontier_phi_66_pred_4 = _3256;
                    frontier_phi_66_pred_5 = _3255;
                }
                _3065 = frontier_phi_66_pred;
                _3063 = frontier_phi_66_pred_1;
                _3061 = frontier_phi_66_pred_2;
                _3059 = frontier_phi_66_pred_3;
                _3057 = frontier_phi_66_pred_4;
                _3055 = frontier_phi_66_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3055;
                    _3200 = _3057;
                    _3201 = _3059;
                    _3202 = _3061;
                    _3203 = _3063;
                    _3204 = _3065;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
        }
        uvec4 _3068 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3069 = _3068.z;
        uint _3071 = (_3069 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3071) & _2974) == 0u)
        {
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
            _3173 = _3060;
            _3175 = _3062;
            _3177 = _3064;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
            float _3193 = _3192 * _2033;
            float _3194 = _3192 * _2034;
            float _3195 = _3192 * _2035;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3071 < ((_3069 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3306 = _3054;
                float _3307 = _3056;
                float _3308 = _3058;
                float _3309 = _3060;
                float _3310 = _3062;
                float _3311 = _3064;
                uint _3312 = _3071;
                uint _3321;
                bool _3322;
                for (;;)
                {
                    _3321 = texelFetch(g_lightClassification, int((((_2968 << 5u) + (_2954 << 9u)) + (_3312 << 2u)) >> 2u)).x;
                    _3322 = _3321 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3322)
                    {
                        frontier_phi_72_pred = _3311;
                        frontier_phi_72_pred_1 = _3310;
                        frontier_phi_72_pred_2 = _3309;
                        frontier_phi_72_pred_3 = _3308;
                        frontier_phi_72_pred_4 = _3307;
                        frontier_phi_72_pred_5 = _3306;
                    }
                    else
                    {
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3508;
                        float _3509;
                        float _3510;
                        float _3799;
                        float _3800;
                        float _3801;
                        float _3802;
                        float _3803;
                        float _3804;
                        float _3518 = _3306;
                        float _3519 = _3307;
                        float _3520 = _3308;
                        float _3521 = _3309;
                        float _3522 = _3310;
                        float _3523 = _3311;
                        uint _3524 = _3321;
                        uint _3525;
                        vec4 _3550;
                        float _3551;
                        vec4 _3566;
                        vec3 _3578;
                        vec4 _3593;
                        vec4 _3609;
                        float _3655;
                        bool _3656;
                        for (;;)
                        {
                            uint _3535 = ((_3312 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3524));
                            _3525 = (_3524 + 4294967295u) & _3524;
                            uint _3537 = _3535 * 40u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            _3551 = _3550.w;
                            uint _3553 = (_3535 * 40u) + 4u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3535 * 40u) + 8u;
                            _3578 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x));
                            uint _3580 = (_3535 * 40u) + 16u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3596 = (_3535 * 40u) + 20u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3535 * 40u) + 24u;
                            vec4 _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3630 = (_3535 * 40u) + 28u;
                            vec4 _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3655 = fma(_2035, _3643.z, fma(_2034, _3643.y, _3643.x * _2033)) + _3643.w;
                            _3656 = !((fma(_2035, _3624.z, fma(_2034, _3624.y, _3624.x * _2033)) + _3624.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3656)
                            {
                                float _3683 = _3550.x - _2033;
                                float _3684 = _3550.y - _2034;
                                float _3685 = _3550.z - _2035;
                                float _3686 = dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685));
                                float _3689 = inversesqrt(_3686);
                                float _3690 = _3689 * _3683;
                                float _3691 = _3689 * _3684;
                                float _3692 = _3689 * _3685;
                                float _3696 = 1.0 - (_3686 / (_3551 * _3551));
                                float _4859 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3697 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3701 = sqrt(_3686) * _3566.w;
                                float _3703 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                                float _3704 = _3703 * _3703;
                                float _3707 = ((1.0 - _3704) * dot(vec3(_3690, _3691, _3692), vec3(_900, _903, _906))) + _3704;
                                float _3710 = _3701 * _3701;
                                float _3714 = (fma(_2035, _3593.z, fma(_2034, _3593.y, _3593.x * _2033)) + _3593.w) / _3655;
                                float _3715 = (fma(_2035, _3609.z, fma(_2034, _3609.y, _3609.x * _2033)) + _3609.w) / _3655;
                                float _3719 = 1.0 - dot(vec2(_3714, _3715), vec2(_3714, _3715));
                                float _4875 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3721 = _3720 * (((isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0))) * _3697) / ((_3710 * 0.699999988079071044921875) + 1.0));
                                float _3733 = exp2(log2(1.0 / ((_3710 * 3.5) + 5.0)) * 0.25);
                                float _3734 = 1.0 - _975;
                                float _3741 = sqrt(1.0 - ((1.0 - (_3734 * _3734)) * (1.0 - (_3733 * _3733))));
                                float _3742 = _3741 * _3741;
                                float _3743 = _3742 * _3742;
                                float _3744 = _3690 - _3193;
                                float _3745 = _3691 - _3194;
                                float _3746 = _3692 - _3195;
                                float _3750 = inversesqrt(dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746)));
                                float _3754 = dot(vec3(_900, _903, _906), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4886 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3758 = dot(vec3(_900, _903, _906), vec3(_3750 * _3744, _3750 * _3745, _3750 * _3746));
                                float _4897 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3761 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3765 = ((_3761 * _3761) * (_3743 + (-1.0))) + 1.0;
                                float _3766 = _3703 * _3742;
                                float _3767 = _3766 * _3766;
                                float _3773 = ((1.0 - _3767) * dot(vec3(_900, _903, _906), vec3(_3690, _3691, _3692))) + _3767;
                                float _4908 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3774 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3775 = 1.0 - _3742;
                                float _3785 = (0.5 / (((_3774 * ((_3757 * _3775) + _3742)) + 9.9999999392252902907785028219223e-09) + (((_3774 * _3775) + _3742) * _3757))) * _3774;
                                float _4919 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3795 = (_3720 * _3697) * (((_3743 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3765 * _3765) * ((_3710 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3721 * _3566.y;
                                frontier_phi_78_pred_1 = _3721 * _3566.x;
                                frontier_phi_78_pred_2 = _3795 * _3578.z;
                                frontier_phi_78_pred_3 = _3795 * _3578.y;
                                frontier_phi_78_pred_4 = _3795 * _3578.x;
                                frontier_phi_78_pred_5 = _3721 * _3566.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3803 = frontier_phi_78_pred;
                            _3802 = frontier_phi_78_pred_1;
                            _3801 = frontier_phi_78_pred_2;
                            _3800 = frontier_phi_78_pred_3;
                            _3799 = frontier_phi_78_pred_4;
                            _3804 = frontier_phi_78_pred_5;
                            _3508 = _3802 + _3521;
                            _3509 = _3803 + _3522;
                            _3510 = _3804 + _3523;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3507 = _3801 + _3520;
                            if (_3525 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3507;
                                _3521 = _3508;
                                _3522 = _3509;
                                _3523 = _3510;
                                _3524 = _3525;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3510;
                        frontier_phi_72_pred_1 = _3509;
                        frontier_phi_72_pred_2 = _3508;
                        frontier_phi_72_pred_3 = _3507;
                        frontier_phi_72_pred_4 = _3506;
                        frontier_phi_72_pred_5 = _3505;
                    }
                    _3178 = frontier_phi_72_pred;
                    _3176 = frontier_phi_72_pred_1;
                    _3174 = frontier_phi_72_pred_2;
                    _3172 = frontier_phi_72_pred_3;
                    _3170 = frontier_phi_72_pred_4;
                    _3168 = frontier_phi_72_pred_5;
                    uint _3313 = _3312 + 1u;
                    if (_3313 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3306 = _3168;
                        _3307 = _3170;
                        _3308 = _3172;
                        _3309 = _3174;
                        _3310 = _3176;
                        _3311 = _3178;
                        _3312 = _3313;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3178;
                frontier_phi_60_61_ladder_1 = _3176;
                frontier_phi_60_61_ladder_2 = _3172;
                frontier_phi_60_61_ladder_3 = _3170;
                frontier_phi_60_61_ladder_4 = _3168;
                frontier_phi_60_61_ladder_5 = _3174;
            }
            else
            {
                frontier_phi_60_61_ladder = _3064;
                frontier_phi_60_61_ladder_1 = _3062;
                frontier_phi_60_61_ladder_2 = _3058;
                frontier_phi_60_61_ladder_3 = _3056;
                frontier_phi_60_61_ladder_4 = _3054;
                frontier_phi_60_61_ladder_5 = _3060;
            }
            _3167 = frontier_phi_60_61_ladder_4;
            _3169 = frontier_phi_60_61_ladder_3;
            _3171 = frontier_phi_60_61_ladder_2;
            _3173 = frontier_phi_60_61_ladder_5;
            _3175 = frontier_phi_60_61_ladder_1;
            _3177 = frontier_phi_60_61_ladder;
        }
        float _3182 = isnan(1.0) ? _959 : (isnan(_959) ? 1.0 : min(_959, 1.0));
        _2987 = (_3182 * _3173) + _2499;
        _2989 = (_3182 * _3175) + _2501;
        _2991 = (_3182 * _3177) + _2503;
        _2993 = ((_3167 * _943) * _3182) + _2837;
        _2995 = ((_3169 * _945) * _3182) + _2839;
        _2997 = ((_3171 * _946) * _3182) + _2841;
    }
    else
    {
        _2987 = _2499;
        _2989 = _2501;
        _2991 = _2503;
        _2993 = _2837;
        _2995 = _2839;
        _2997 = _2841;
    }
    float _4935 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _4946 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4957 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    uint _3017 = _257 + 6u;
    float _3025 = _881 / cbSceneParam._m0[86u].x;
    float _3026 = _882 / cbSceneParam._m0[86u].y;
    vec4 _3040 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3042 = _3040.x;
    float _3043 = _3040.y;
    float _3044 = _3040.z;
    float _3045 = _3040.w;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _3079 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _3080 = _3079 / _816;
        float _3091 = _3080 * _866;
        float _3092 = _867 * _3080;
        float _3093 = (-0.0) - _3092;
        float _3095 = _3080 * _868;
        float _3097 = (cbSceneParam._m0[77u].w * _3093) / _3079;
        float _3098 = _3097 + cbSceneParam._m0[79u].w;
        float _3099 = cbSceneParam._m0[79u].w - _3092;
        float _3105 = sqrt(((_3091 * _3091) + (_3092 * _3092)) + (_3095 * _3095));
        float _3108 = (1.0 - (cbSceneParam._m0[77u].w / _3079)) * _3105;
        float _3113 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3115 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3268;
        if (abs((_3093 - _3097) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3268 = ((((_3098 > 0.0) ? exp2(_3113 * _3098) : (2.0 - exp2(_3115 * _3098))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3108;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : max(_3098, _3099));
            float _3230 = isnan(_3099) ? _3098 : (isnan(_3098) ? _3099 : min(_3098, _3099));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3268 = ((abs(_3105 / _3093) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3113 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3113 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3115 * _3239) - exp2(_3115 * _3240)) * _3228))) + (_3108 * cbSceneParam._m0[80u].z);
        }
        vec4 _3270 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3025, _3026, 1.0), 0.0);
        float _3279 = exp2((_3268 * (-1.44269502162933349609375)) * (1.0 - _3270.w));
        float _3280 = log2(_3279);
        float _3296 = log2(_3045);
        _3117 = (exp2(_3296 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].x)) * _3270.x) / cbSceneParam._m0[78u].x)) + _3042;
        _3119 = (exp2(_3296 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].y)) * _3270.y) / cbSceneParam._m0[78u].y)) + _3043;
        _3121 = (exp2(_3296 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3280 * cbSceneParam._m0[78u].z)) * _3270.z) / cbSceneParam._m0[78u].z)) + _3044;
        _3123 = _3279 * _3045;
    }
    else
    {
        _3117 = _3042;
        _3119 = _3043;
        _3121 = _3044;
        _3123 = _3045;
    }
    float _3135 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3136 = _3135 == 3.0;
    float _3137 = log2(_3123);
    float _3144 = exp2(_3137 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0))) * (_2987 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _959))) + ((_2993 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3145 = exp2(_3137 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2989 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _959))) + ((_2995 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3146 = exp2(_3137 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2991 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _959))) + ((_2997 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1767)) * cbPerFrame._m0[3u].x));
    float _3155 = (_3135 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3155 * (_3136 ? _3144 : (_3144 + (cbSceneParam._m0[72u].w * _3117)));
    SV_Target.y = _3155 * (_3136 ? _3145 : (_3145 + (cbSceneParam._m0[72u].w * _3119)));
    SV_Target.z = _3155 * (_3136 ? _3146 : (_3146 + (cbSceneParam._m0[72u].w * _3121)));
    SV_Target.w = cbInstanceData._m0[_3017].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3017].w;
}


