#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1630;
float _4290;
float _4291;
float _4292;
float _4293;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _247 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _248 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _249 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _255 = inversesqrt(dot(vec3(_247, _248, _249), vec3(_247, _248, _249)));
    float _262 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _269 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4302 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _4313 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _4324 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    uint _296 = uint(roundEven(NORMAL.w)) * 13u;
    uint _301 = _296 + 1u;
    uint _305 = _296 + 2u;
    float _314 = sqrt(((cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x) + (cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x)) + (cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x));
    float _315 = _314 * TEXCOORD.z;
    float _316 = _314 * TEXCOORD.w;
    vec4 _329 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _315) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _316) + cbTextureTilingScale._m0[13u].w));
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _378 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _383 = _378.x * cbMtdParam._m0[11u].x;
    float _384 = _378.y * cbMtdParam._m0[11u].y;
    float _385 = _378.z * cbMtdParam._m0[11u].z;
    vec4 _404 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _315) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _316) + cbTextureTilingScale._m0[5u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _458 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _460 = _458.x;
    float _472 = dot(vec4(_460, _458.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _489 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _423.x) * 2.0) - ((((_460 - _472) * cbMtdParam._m0[23u].w) + _472) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4335 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _490 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _497 = (_490 * ((_404.x * cbMtdParam._m0[12u].x) - _383)) + _383;
    float _498 = (_490 * ((_404.y * cbMtdParam._m0[12u].y) - _384)) + _384;
    float _499 = (_490 * ((_404.z * cbMtdParam._m0[12u].z) - _385)) + _385;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _315) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _316) + cbTextureTilingScale._m0[3u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _538 = _536.x;
    float _548 = dot(vec4(_538, _536.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _562 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _423.y) * 2.0) - ((((_538 - _548) * cbMtdParam._m0[23u].w) + _548) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4346 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _563 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _570 = (_563 * ((_516.x * cbMtdParam._m0[13u].x) - _497)) + _497;
    float _571 = (_563 * ((_516.y * cbMtdParam._m0[13u].y) - _498)) + _498;
    float _572 = (_563 * ((_516.z * cbMtdParam._m0[13u].z) - _499)) + _499;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _315) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _316) + cbTextureTilingScale._m0[24u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _610 = _608.x;
    float _620 = dot(vec4(_610, _608.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _632 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _423.z) * 2.0) - ((((_610 - _620) * cbMtdParam._m0[23u].w) + _620) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4357 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _633 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _643 = (_352.x * cbMtdParam._m0[9u].x) * ((_633 * ((_591.x * cbMtdParam._m0[14u].x) - _570)) + _570);
    float _644 = (_352.y * cbMtdParam._m0[9u].y) * ((_633 * ((_591.y * cbMtdParam._m0[14u].y) - _571)) + _571);
    float _645 = (_352.z * cbMtdParam._m0[9u].z) * ((_633 * ((_591.z * cbMtdParam._m0[14u].z) - _572)) + _572);
    float _649 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _329.x) * _643;
    float _652 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _329.y) * _644;
    float _655 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _329.z) * _645;
    float _663 = (((_643 - _649) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) + _649) * 4.55000019073486328125;
    float _665 = (((_644 - _652) * (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) + _652) * 4.55000019073486328125;
    float _667 = (((_645 - _655) * (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0)))) + _655) * 4.55000019073486328125;
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _315) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _316) + cbTextureTilingScale._m0[14u].w));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _315) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _316) + cbTextureTilingScale._m0[20u].w));
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _315) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _316) + cbTextureTilingScale._m0[4u].w));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _746 = _744.x;
    float _747 = _744.y;
    float _748 = _744.z;
    float _755 = ((_727.x - _746) * _490) + _746;
    float _756 = ((_727.y - _747) * _490) + _747;
    float _757 = ((_727.z - _748) * _490) + _748;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _315) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _316) + cbTextureTilingScale._m0[2u].w));
    float _780 = ((_769.x - _755) * _563) + _755;
    float _781 = ((_769.y - _756) * _563) + _756;
    float _782 = ((_769.z - _757) * _563) + _757;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _315) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _316) + cbTextureTilingScale._m0[23u].w));
    float _807 = ((_794.z - _782) * _633) + _782;
    float _810 = ((((_794.x - _780) * _633) + _780) * 2.0) + (-1.0);
    float _811 = ((((_794.y - _781) * _633) + _781) * 2.0) + (-1.0);
    float _812 = dot(vec2(_810, _811), vec2(_810, _811));
    float _4368 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _817 = sqrt(1.0 - (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))));
    vec4 _831 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _856 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _315) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _316) + cbTextureTilingScale._m0[11u].w));
    float _858 = _856.x;
    float _859 = 1.0 - _858;
    float _874 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_858 - _859) * cbMtdParam._m0[24u].z) + _859) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4379 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _875 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _882 = (_875 * ((_685.x * cbMtdParam._m0[18u].x) - _663)) + _663;
    float _883 = (_875 * ((_685.y * cbMtdParam._m0[18u].y) - _665)) + _665;
    float _884 = (_875 * ((_685.z * cbMtdParam._m0[18u].z) - _667)) + _667;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _912 = _910.x;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _315) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _316) + cbTextureTilingScale._m0[9u].w)).x - _912) * _490) + _912;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _315) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _316) + cbTextureTilingScale._m0[21u].w)).x - _929) * _563) + _929;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _315) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _316) + cbTextureTilingScale._m0[10u].w)).x - _946) * _633) + _946;
    float _968 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _964) * cbMtdParam._m0[19u].z) + _964;
    float _970 = _968 - (_968 * _875);
    float _975 = (((_704.z - _807) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _807;
    float _979 = ((_831.z - _975) * cbMtdParam._m0[19u].w) + _975;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _315) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _316) + cbTextureTilingScale._m0[15u].w));
    float _999 = (_992.x * 2.0) + (-1.0);
    float _1000 = (_992.y * 2.0) + (-1.0);
    float _1001 = dot(vec2(_999, _1000), vec2(_999, _1000));
    float _4390 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _1009 = (_875 * (_992.z - _979)) + _979;
    float _1018 = (_810 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_704.x * 2.0) + (-1.0)))) + (((_831.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1019 = (_811 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_704.y * 2.0) + (-1.0)))) + (((_831.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1031 = (((_999 - _1018) + (cbMtdParam._m0[21u].x * _1018)) * _875) + _1018;
    float _1032 = (((_1000 - _1019) + (cbMtdParam._m0[21u].x * _1019)) * _875) + _1019;
    float _1033 = (_875 * (sqrt(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) - _817)) + _817;
    float _1037 = cbMtdParam._m0[22u].x + _831.w;
    float _1040 = fma(_1033, _262 * NORMAL.x, fma(_1032, _269 * TANGENT.x, (_255 * _247) * _1031));
    float _1043 = fma(_1033, _262 * NORMAL.y, fma(_1032, _269 * TANGENT.y, (_255 * _248) * _1031));
    float _1046 = fma(_1033, _262 * NORMAL.z, fma(_1032, _269 * TANGENT.z, (_255 * _249) * _1031));
    float _1050 = inversesqrt(dot(vec3(_1040, _1043, _1046), vec3(_1040, _1043, _1046)));
    float _1051 = _1050 * _1040;
    float _1052 = _1050 * _1043;
    float _1053 = _1050 * _1046;
    float _4401 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1054 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _4423 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4434 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4445 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _4456 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _1059 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _1073 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1113 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1123 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1113);
    float _1124 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1113);
    float _1125 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1113);
    float _1129 = inversesqrt(dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125)));
    float _1130 = _1123 * _1129;
    float _1131 = _1124 * _1129;
    float _1132 = _1125 * _1129;
    vec4 _1137 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1139 = _1137.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1311 = sqrt(((_1123 * _1123) + (_1124 * _1124)) + (_1125 * _1125));
        float _1317 = (cbMatDynParam._m0[5u].x * _1311) + cbMatDynParam._m0[5u].y;
        float _4467 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1322 = (cbMatDynParam._m0[5u].z * _1311) + cbMatDynParam._m0[5u].w;
        float _4478 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) - _1318)) + _1318) < ((_1139 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1150 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1151 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1169 = fma(_1053, cbSceneParam._m0[5u].z, fma(_1052, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1051));
    float _1172 = fma(_1053, cbSceneParam._m0[6u].z, fma(_1052, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1051));
    float _1175 = fma(_1053, cbSceneParam._m0[7u].z, fma(_1052, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1051));
    uint _1188 = _296 + 9u;
    uint _1189 = _1188 + uint(cbMatDynParam._m0[0u].w);
    float _1195 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * cbInstanceData._m0[_1189].x;
    float _1196 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * cbInstanceData._m0[_1189].y;
    float _1197 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0)))) * cbInstanceData._m0[_1189].z;
    float _4489 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _4500 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _4511 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1200 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
    float _1201 = 1.0 - _1059;
    float _1202 = _1198 * _1201;
    float _1203 = _1199 * _1201;
    float _1204 = _1200 * _1201;
    float _1209 = (_1198 + (-0.039999999105930328369140625)) * _1059;
    float _1210 = (_1199 + (-0.039999999105930328369140625)) * _1059;
    float _1211 = (_1200 + (-0.039999999105930328369140625)) * _1059;
    float _1212 = _1209 + 0.039999999105930328369140625;
    float _1214 = _1210 + 0.039999999105930328369140625;
    float _1215 = _1211 + 0.039999999105930328369140625;
    vec4 _1224 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1150, cbSceneParam._m0[86u].y * _1151));
    float _1228 = ((isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * TEXCOORD_5.w) * _1224.x;
    float _1229 = dot(vec3(_1051, _1052, _1053), vec3(_1130, _1131, _1132));
    float _1232 = _1229 * 2.0;
    float _1236 = (_1232 * _1051) - _1130;
    float _1237 = (_1232 * _1052) - _1131;
    float _1238 = (_1232 * _1053) - _1132;
    float _1242 = abs(dot(vec3(_1130, _1131, _1132), vec3(_1051, _1052, _1053)));
    float _4522 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1244 = sqrt(_1054);
    float _1257 = exp2((_1244 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1244 * 3.0));
    float _1263 = (1.0 - _1257) * ((_1244 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1264 = _1257 * _1244;
    float _1292 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1296 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1300 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1629;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1354 = fma(_1300, cbModelParam._m0[26u].z, fma(_1296, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1292));
        float _1358 = fma(_1300, cbModelParam._m0[27u].z, fma(_1296, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1292));
        float _1362 = fma(_1300, cbModelParam._m0[28u].z, fma(_1296, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1292));
        float _1387 = _1292 + _1051;
        float _1388 = _1296 + _1052;
        float _1389 = _1300 + _1053;
        float _1399 = fma(_1389, cbModelParam._m0[26u].z, fma(_1388, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1387)) - _1354;
        float _1400 = fma(_1389, cbModelParam._m0[27u].z, fma(_1388, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1387)) - _1358;
        float _1401 = fma(_1389, cbModelParam._m0[28u].z, fma(_1388, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1387)) - _1362;
        float _1405 = inversesqrt(dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401)));
        float _1418 = ((_1405 * _1399) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1354 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1419 = ((_1405 * _1400) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1358 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1420 = ((_1405 * _1401) / cbModelParam._m0[34u].z) + ((((((_1362 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1418, _1419, _1420), 0.0);
        float _1457 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1423.x + (-0.5));
        float _1459 = _1457 * (_1423.y + (-0.5));
        float _1460 = _1457 * (_1423.z + (-0.5));
        float _1467 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1430.x + (-0.5));
        float _1469 = _1467 * (_1430.y + (-0.5));
        float _1470 = _1467 * (_1430.z + (-0.5));
        float _1477 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1437.x + (-0.5));
        float _1479 = _1477 * (_1437.y + (-0.5));
        float _1480 = _1477 * (_1437.z + (-0.5));
        float _1487 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1444.x + (-0.5));
        float _1489 = _1487 * (_1444.y + (-0.5));
        float _1490 = _1487 * (_1444.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1511 = (dot(vec3(_1051, _1052, _1053), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _4548 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1521 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _4559 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _4570 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_1523 + 1.0))) + _1528) * _1491;
        float _1538 = _1459 * 0.5;
        float _1539 = _1469 * 0.5;
        float _1540 = _1479 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_1051, _1052, _1053), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _4581 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _4592 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _4603 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0))) * (_1565 + 1.0))) + _1570) * _1492;
        float _1580 = _1460 * 0.5;
        float _1581 = _1470 * 0.5;
        float _1582 = _1480 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_1051, _1052, _1053), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4614 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _4625 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4636 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_1607 + 1.0))) + _1612) * _1493;
        _1629 = _1460;
        _1631 = _1459;
        _1632 = _1458;
        _1633 = _1470;
        _1634 = _1469;
        _1635 = _1468;
        _1636 = _1480;
        _1637 = _1479;
        _1638 = _1478;
        _1639 = _1493;
        _1640 = _1492;
        _1641 = _1491;
        _1642 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1643 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1644 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1630;
        _1631 = _1630;
        _1632 = _1630;
        _1633 = _1630;
        _1634 = _1630;
        _1635 = _1630;
        _1636 = _1630;
        _1637 = _1630;
        _1638 = _1630;
        _1639 = _1630;
        _1640 = _1630;
        _1641 = _1630;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    float _1944;
    float _1945;
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1670 = fma(_1300, cbModelParam._m0[30u].z, fma(_1296, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1292));
        float _1674 = fma(_1300, cbModelParam._m0[31u].z, fma(_1296, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1292));
        float _1678 = fma(_1300, cbModelParam._m0[32u].z, fma(_1296, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1292));
        float _1701 = _1292 + _1051;
        float _1702 = _1296 + _1052;
        float _1703 = _1300 + _1053;
        float _1713 = fma(_1703, cbModelParam._m0[30u].z, fma(_1702, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1701)) - _1670;
        float _1714 = fma(_1703, cbModelParam._m0[31u].z, fma(_1702, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1701)) - _1674;
        float _1715 = fma(_1703, cbModelParam._m0[32u].z, fma(_1702, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1701)) - _1678;
        float _1719 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
        float _1732 = ((_1719 * _1713) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1670 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1733 = ((_1719 * _1714) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1674 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1734 = ((_1719 * _1715) / cbModelParam._m0[35u].z) + ((((((_1678 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1732, _1733, _1734), 0.0);
        vec4 _1743 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1732, _1733, _1734), 0.0);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1732, _1733, _1734), 0.0);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1732, _1733, _1734), 0.0);
        float _1769 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1736.x + (-0.5));
        float _1771 = _1769 * (_1736.y + (-0.5));
        float _1772 = _1769 * (_1736.z + (-0.5));
        float _1779 = exp2((_1743.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1743.x + (-0.5));
        float _1781 = _1779 * (_1743.y + (-0.5));
        float _1782 = _1779 * (_1743.z + (-0.5));
        float _1789 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1750.x + (-0.5));
        float _1791 = _1789 * (_1750.y + (-0.5));
        float _1792 = _1789 * (_1750.z + (-0.5));
        float _1799 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1800 = _1799 * (_1757.x + (-0.5));
        float _1801 = _1799 * (_1757.y + (-0.5));
        float _1802 = _1799 * (_1757.z + (-0.5));
        float _1803 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1804 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1805 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1806 = _1770 * 0.5;
        float _1807 = _1780 * 0.5;
        float _1808 = _1790 * 0.5;
        float _1809 = dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808));
        float _1814 = (_1809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1809);
        float _1822 = (dot(vec3(_1051, _1052, _1053), vec3(_1814 * _1806, _1814 * _1807, _1814 * _1808)) + 1.0) * 0.5;
        float _4677 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = sqrt(((_1807 * _1807) + (_1806 * _1806)) + (_1808 * _1808)) / (_1803 + 9.9999997473787516355514526367188e-06);
        float _4688 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _1833 = _1832 * 2.0;
        float _1837 = (1.0 - _1832) / (_1832 + 1.0);
        float _4699 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _1847 = ((((1.0 - _1838) * (_1833 + 2.0)) * exp2(log2(isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * (_1833 + 1.0))) + _1838) * _1803;
        float _1848 = _1771 * 0.5;
        float _1849 = _1781 * 0.5;
        float _1850 = _1791 * 0.5;
        float _1851 = dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850));
        float _1856 = (_1851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1851);
        float _1864 = (dot(vec3(_1051, _1052, _1053), vec3(_1856 * _1848, _1856 * _1849, _1856 * _1850)) + 1.0) * 0.5;
        float _4710 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850)) / (_1804 + 9.9999997473787516355514526367188e-06);
        float _4721 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _1875 = _1874 * 2.0;
        float _1879 = (1.0 - _1874) / (_1874 + 1.0);
        float _4732 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1889 = ((((1.0 - _1880) * (_1875 + 2.0)) * exp2(log2(isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_1875 + 1.0))) + _1880) * _1804;
        float _1890 = _1772 * 0.5;
        float _1891 = _1782 * 0.5;
        float _1892 = _1792 * 0.5;
        float _1893 = dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892));
        float _1898 = (_1893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1893);
        float _1906 = (dot(vec3(_1051, _1052, _1053), vec3(_1898 * _1890, _1898 * _1891, _1898 * _1892)) + 1.0) * 0.5;
        float _4743 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1915 = sqrt(((_1891 * _1891) + (_1890 * _1890)) + (_1892 * _1892)) / (_1805 + 9.9999997473787516355514526367188e-06);
        float _4754 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _1917 = _1916 * 2.0;
        float _1921 = (1.0 - _1916) / (_1916 + 1.0);
        float _4765 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _1931 = ((((1.0 - _1922) * (_1917 + 2.0)) * exp2(log2(isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_1917 + 1.0))) + _1922) * _1805;
        _1939 = _1772;
        _1940 = _1771;
        _1941 = _1770;
        _1942 = _1782;
        _1943 = _1781;
        _1944 = _1780;
        _1945 = _1792;
        _1946 = _1791;
        _1947 = _1790;
        _1948 = _1805;
        _1949 = _1804;
        _1950 = _1803;
        _1951 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)));
        _1952 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)));
        _1953 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)));
    }
    else
    {
        _1939 = _1630;
        _1940 = _1630;
        _1941 = _1630;
        _1942 = _1630;
        _1943 = _1630;
        _1944 = _1630;
        _1945 = _1630;
        _1946 = _1630;
        _1947 = _1630;
        _1948 = _1630;
        _1949 = _1630;
        _1950 = _1630;
        _1951 = 0.0;
        _1952 = 0.0;
        _1953 = 0.0;
    }
    float _1963 = (cbModelParam._m0[1u].x * (_1951 - _1642)) + _1642;
    float _1964 = (cbModelParam._m0[1u].x * (_1952 - _1643)) + _1643;
    float _1965 = (cbModelParam._m0[1u].x * (_1953 - _1644)) + _1644;
    float _1986 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1963 * cbSceneParam._m0[89u].x));
    float _1989 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1963 * cbSceneParam._m0[90u].x));
    float _1992 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1963));
    float _2007 = _1236 * 0.5;
    float _2008 = _1237 * 0.5;
    float _2009 = _1238 * 0.5;
    float _2010 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1941, _1944, _1947, _1950));
    float _2013 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1940, _1943, _1946, _1949));
    float _2016 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1939, _1942, _1945, _1948));
    float _2050;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2023 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1629, _1633, _1636, _1639));
        float _2027 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1631, _1634, _1637, _1640));
        float _2031 = dot(vec4(_2007, _2008, _2009, 1.0), vec4(_1632, _1635, _1638, _1641));
        float _2038 = dot(vec4(cbModelParam._m0[39u]), vec4(_2007, _2008, _2009, 1.0));
        _2050 = dot(vec3(isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2038) ? 0.0 : (isnan(0.0) ? _2038 : max(0.0, _2038))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2050 = 1.0;
    }
    float _2061;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2052 = dot(vec4(cbModelParam._m0[40u]), vec4(_2007, _2008, _2009, 1.0));
        _2061 = dot(vec3(isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)), isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2052) ? 0.0 : (isnan(0.0) ? _2052 : max(0.0, _2052))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2061 = 1.0;
    }
    float _2065 = (_2061 * cbModelParam._m0[1u].x) + (_2050 * (1.0 - cbModelParam._m0[1u].x));
    float _2075 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1054);
    float _2076 = isnan(_2075) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2075 : min(cbModelParam._m0[25u].z, _2075));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2123 = fma(_1300, cbModelParam._m0[13u].z, fma(_1296, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1292)) + cbModelParam._m0[13u].w;
        float _2127 = fma(_1300, cbModelParam._m0[14u].z, fma(_1296, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1292)) + cbModelParam._m0[14u].w;
        float _2131 = fma(_1300, cbModelParam._m0[15u].z, fma(_1296, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1292)) + cbModelParam._m0[15u].w;
        float _2134 = fma(_1238, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1236));
        float _2137 = fma(_1238, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1236));
        float _2140 = fma(_1238, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1236));
        float _2168;
        if (_2134 > 0.0)
        {
            _2168 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2168 = frontier_phi_17_15_ladder;
        }
        float _2339;
        if (_2137 > 0.0)
        {
            _2339 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2339 = frontier_phi_26_22_ladder;
        }
        float _2634;
        if (_2140 > 0.0)
        {
            _2634 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2634 = frontier_phi_38_33_ladder;
        }
        float _2636 = isnan(_2339) ? _2168 : (isnan(_2168) ? _2339 : min(_2168, _2339));
        float _2637 = isnan(_2634) ? _2636 : (isnan(_2636) ? _2634 : min(_2636, _2634));
        float _2641 = (_2637 * _2134) + _2123;
        float _2642 = (_2637 * _2137) + _2127;
        float _2643 = (_2637 * _2140) + _2131;
        float _2644 = _2637 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2644;
        float _2648 = _2644 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 > _2648) || ((_2642 < _2646) || ((_2641 < _2646) || (_2641 > _2648))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2643, cbModelParam._m0[9u].z, fma(_2642, cbModelParam._m0[9u].y, _2641 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2643, cbModelParam._m0[10u].z, fma(_2642, cbModelParam._m0[10u].y, _2641 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2643, cbModelParam._m0[11u].z, fma(_2642, cbModelParam._m0[11u].y, _2641 * cbModelParam._m0[11u].x))), _2076);
            frontier_phi_16_38_ladder = _2788.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2788.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2788.x * cbModelParam._m0[1u].y;
        }
        _2156 = frontier_phi_16_38_ladder_2;
        _2158 = frontier_phi_16_38_ladder_1;
        _2160 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2144 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1236, _1237, _1238), _2076);
        _2156 = _2144.x * cbModelParam._m0[1u].y;
        _2158 = _2144.y * cbModelParam._m0[1u].y;
        _2160 = _2144.z * cbModelParam._m0[1u].y;
    }
    float _2164 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1054);
    float _2165 = isnan(_2164) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2164 : min(cbModelParam._m0[25u].w, _2164));
    float _2254;
    float _2256;
    float _2258;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2218 = fma(_1300, cbModelParam._m0[21u].z, fma(_1296, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1292)) + cbModelParam._m0[21u].w;
        float _2222 = fma(_1300, cbModelParam._m0[22u].z, fma(_1296, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1292)) + cbModelParam._m0[22u].w;
        float _2226 = fma(_1300, cbModelParam._m0[23u].z, fma(_1296, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1292)) + cbModelParam._m0[23u].w;
        float _2229 = fma(_1238, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1236));
        float _2232 = fma(_1238, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1236));
        float _2235 = fma(_1238, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1236));
        float _2344;
        if (_2229 > 0.0)
        {
            _2344 = abs((1.0 - _2218) / _2229);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2229 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2218 + 1.0) / _2229);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2344 = frontier_phi_28_24_ladder;
        }
        float _2661;
        if (_2232 > 0.0)
        {
            _2661 = abs((1.0 - _2222) / _2232);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2232 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2222 + 1.0) / _2232);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2661 = frontier_phi_40_35_ladder;
        }
        float _2999;
        if (_2235 > 0.0)
        {
            _2999 = abs((1.0 - _2226) / _2235);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2235 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2226 + 1.0) / _2235);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2999 = frontier_phi_50_47_ladder;
        }
        float _3001 = isnan(_2661) ? _2344 : (isnan(_2344) ? _2661 : min(_2344, _2661));
        float _3002 = isnan(_2999) ? _3001 : (isnan(_3001) ? _2999 : min(_3001, _2999));
        float _3006 = (_3002 * _2229) + _2218;
        float _3007 = (_3002 * _2232) + _2222;
        float _3008 = (_3002 * _2235) + _2226;
        float _3009 = _3002 * 9.9999997473787516355514526367188e-05;
        float _3010 = (-1.0) - _3009;
        float _3012 = _3009 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3008 > _3012) || ((_3008 < _3010) || ((_3007 > _3012) || ((_3007 < _3010) || ((_3006 < _3010) || (_3006 > _3012))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3008, cbModelParam._m0[17u].z, fma(_3007, cbModelParam._m0[17u].y, _3006 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3008, cbModelParam._m0[18u].z, fma(_3007, cbModelParam._m0[18u].y, _3006 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3008, cbModelParam._m0[19u].z, fma(_3007, cbModelParam._m0[19u].y, _3006 * cbModelParam._m0[19u].x))), _2165);
            frontier_phi_25_50_ladder = _3130.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3130.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3130.x * cbModelParam._m0[1u].z;
        }
        _2254 = frontier_phi_25_50_ladder_2;
        _2256 = frontier_phi_25_50_ladder_1;
        _2258 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2238 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1236, _1237, _1238), _2165);
        _2254 = _2238.x * cbModelParam._m0[1u].z;
        _2256 = _2238.y * cbModelParam._m0[1u].z;
        _2258 = _2238.z * cbModelParam._m0[1u].z;
    }
    float _2271 = (((_1263 * _1212) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2254 - _2156)) + _2156);
    float _2273 = (((_1263 * _1214) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2256 - _2158)) + _2158);
    float _2275 = (((_1263 * _1215) + _1264) * _1228) * ((cbModelParam._m0[1u].w * (_2258 - _2160)) + _2160);
    float _2278 = fma(_2275, cbSceneParam._m0[89u].z, fma(_2273, cbSceneParam._m0[89u].y, _2271 * cbSceneParam._m0[89u].x));
    float _2281 = fma(_2275, cbSceneParam._m0[90u].z, fma(_2273, cbSceneParam._m0[90u].y, _2271 * cbSceneParam._m0[90u].x));
    float _2284 = fma(_2275, cbSceneParam._m0[91u].z, fma(_2273, cbSceneParam._m0[91u].y, _2271 * cbSceneParam._m0[91u].x));
    float _2318 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2322 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2326 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2330 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2331 = _2318 / _2330;
    float _2332 = _2322 / _2330;
    float _2333 = _2326 / _2330;
    float _2480;
    float _2481;
    float _2482;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2360 = ((uint(_2333 > cbSceneParam._m0[59u].y) + uint(_2333 > cbSceneParam._m0[59u].x)) + uint(_2333 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2361 = _2360 + 43u;
        uint _2369 = _2360 + 44u;
        uint _2377 = _2360 + 45u;
        uint _2385 = _2360 + 46u;
        float _2396 = fma(_2330, cbSceneParam._m0[_2361].w, fma(_2326, cbSceneParam._m0[_2361].z, fma(_2322, cbSceneParam._m0[_2361].y, _2318 * cbSceneParam._m0[_2361].x)));
        float _2400 = fma(_2330, cbSceneParam._m0[_2369].w, fma(_2326, cbSceneParam._m0[_2369].z, fma(_2322, cbSceneParam._m0[_2369].y, _2318 * cbSceneParam._m0[_2369].x)));
        float _2408 = fma(_2330, cbSceneParam._m0[_2385].w, fma(_2326, cbSceneParam._m0[_2385].z, fma(_2322, cbSceneParam._m0[_2385].y, _2318 * cbSceneParam._m0[_2385].x)));
        float _2413 = cbSceneParam._m0[33u].z * _2408;
        float _2415 = cbSceneParam._m0[33u].w * _2408;
        float _2418 = fma(_2330, cbSceneParam._m0[_2377].w, fma(_2326, cbSceneParam._m0[_2377].z, fma(_2322, cbSceneParam._m0[_2377].y, _2318 * cbSceneParam._m0[_2377].x))) / _2408;
        float _2466 = (cbSceneParam._m0[33u].x - sqrt(((_2332 * _2332) + (_2331 * _2331)) + (_2333 * _2333))) * cbSceneParam._m0[33u].y;
        float _4891 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
        float _2473 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2413 + _2396) / _2408, (_2415 + _2400) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2415 + _2396) / _2408, (_2400 - _2413) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2396 - _2413) / _2408, (_2400 - _2415) / _2408), _2418), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2396 - _2415) / _2408, (_2413 + _2400) / _2408), _2418), 0.0)).x), vec4(0.25)));
        _2480 = 1.0 - (_2473 * cbSceneParam._m0[34u].x);
        _2481 = 1.0 - (_2473 * cbSceneParam._m0[34u].y);
        _2482 = 1.0 - (_2473 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2480 = 1.0;
        _2481 = 1.0;
        _2482 = 1.0;
    }
    float _2546;
    float _2548;
    float _2550;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2534 = fma(_2330, cbSceneParam._m0[63u].w, fma(_2326, cbSceneParam._m0[63u].z, fma(_2322, cbSceneParam._m0[63u].y, _2318 * cbSceneParam._m0[63u].x)));
        float _2535 = fma(_2330, cbSceneParam._m0[60u].w, fma(_2326, cbSceneParam._m0[60u].z, fma(_2322, cbSceneParam._m0[60u].y, _2318 * cbSceneParam._m0[60u].x))) / _2534;
        float _2536 = fma(_2330, cbSceneParam._m0[61u].w, fma(_2326, cbSceneParam._m0[61u].z, fma(_2322, cbSceneParam._m0[61u].y, _2318 * cbSceneParam._m0[61u].x))) / _2534;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2535 >= cbSceneParam._m0[64u].x) && (_2536 >= cbSceneParam._m0[64u].y)) && (_2535 <= cbSceneParam._m0[64u].z)) && (_2536 <= cbSceneParam._m0[64u].w))
        {
            float _2674 = fma(_2330, cbSceneParam._m0[62u].w, fma(_2326, cbSceneParam._m0[62u].z, fma(_2322, cbSceneParam._m0[62u].y, _2318 * cbSceneParam._m0[62u].x))) / _2534;
            float _2678 = isnan(cbSceneParam._m0[41u].w) ? _2674 : (isnan(_2674) ? cbSceneParam._m0[41u].w : max(_2674, cbSceneParam._m0[41u].w));
            float _2721 = (cbSceneParam._m0[33u].x - sqrt(((_2332 * _2332) + (_2331 * _2331)) + (_2333 * _2333))) * cbSceneParam._m0[33u].y;
            float _4907 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
            float _2728 = (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2535, cbSceneParam._m0[33u].w + _2536), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2535, _2536 - cbSceneParam._m0[33u].z), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2535 - cbSceneParam._m0[33u].z, _2536 - cbSceneParam._m0[33u].w), _2678), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2535 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2536), _2678), 0.0)).x), vec4(0.25)));
            float _2732 = 1.0 - (_2728 * cbSceneParam._m0[34u].x);
            float _2733 = 1.0 - (_2728 * cbSceneParam._m0[34u].y);
            float _2734 = 1.0 - (_2728 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2734) ? _2482 : (isnan(_2482) ? _2734 : min(_2482, _2734));
            frontier_phi_37_36_ladder_1 = isnan(_2733) ? _2481 : (isnan(_2481) ? _2733 : min(_2481, _2733));
            frontier_phi_37_36_ladder_2 = isnan(_2732) ? _2480 : (isnan(_2480) ? _2732 : min(_2480, _2732));
        }
        else
        {
            frontier_phi_37_36_ladder = _2482;
            frontier_phi_37_36_ladder_1 = _2481;
            frontier_phi_37_36_ladder_2 = _2480;
        }
        _2546 = frontier_phi_37_36_ladder_2;
        _2548 = frontier_phi_37_36_ladder_1;
        _2550 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2546 = _2480;
        _2548 = _2481;
        _2550 = _2482;
    }
    uvec4 _2555 = floatBitsToUint(cbInstanceData._m0[_296 + 5u]);
    uint _2557 = _2555.x * 14u;
    uint _2558 = _2557 + 13u;
    float _2565 = _1228 + (-1.0);
    float _2570 = (cbLight._m0[_2558].x * _2565) + 1.0;
    float _2571 = (cbLight._m0[_2558].y * _2565) + 1.0;
    float _2572 = (cbLight._m0[_2558].z * _2565) + 1.0;
    float _2573 = (cbLight._m0[_2558].w * _2565) + 1.0;
    uint _2574 = _2557 + 5u;
    float _2580 = isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0));
    uint _2584 = _2557 + 4u;
    float _2593 = isnan(1.0) ? _2570 : (isnan(_2570) ? 1.0 : min(_2570, 1.0));
    uint _2597 = _2557 | 1u;
    float _2608 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_1051, _1052, _1053));
    float _2611 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_1051, _1052, _1053));
    float _4943 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
    float _4954 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2616 = (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * 0.3183098733425140380859375;
    float _2618 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * 0.3183098733425140380859375;
    float _2625 = ((cbLight._m0[_2574].x * _2580) * _2618) + (((cbLight._m0[_2584].x * _2546) * _2593) * _2616);
    float _2626 = ((_2580 * cbLight._m0[_2574].y) * _2618) + (((cbLight._m0[_2584].y * _2548) * _2593) * _2616);
    float _2627 = ((_2580 * cbLight._m0[_2574].z) * _2618) + (((cbLight._m0[_2584].z * _2550) * _2593) * _2616);
    uvec4 _2631 = floatBitsToUint(cbLight._m0[_2557 + 12u]);
    bool _2633 = _2631.x == 0u;
    float _2735;
    float _2737;
    float _2739;
    if (_2633)
    {
        _2735 = _2625;
        _2737 = _2626;
        _2739 = _2627;
    }
    else
    {
        uint _2743 = _2557 + 6u;
        float _2759 = (dot(vec3(cbLight._m0[_2557 + 2u].xyz), vec3(_1051, _1052, _1053)) * 0.5) + 0.5;
        float _2760 = _2759 * _2759;
        float _4965 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2761 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2762 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _2735 = (((cbLight._m0[_2743].x * 0.3183098733425140380859375) * _2761) * _2762) + _2625;
        _2737 = (((cbLight._m0[_2743].y * 0.3183098733425140380859375) * _2761) * _2762) + _2626;
        _2739 = (((cbLight._m0[_2743].z * 0.3183098733425140380859375) * _2761) * _2762) + _2627;
    }
    bool _2742 = _2631.y == 0u;
    float _2797;
    float _2799;
    float _2801;
    if (_2742)
    {
        _2797 = _2735;
        _2799 = _2737;
        _2801 = _2739;
    }
    else
    {
        uint _2970 = _2557 + 7u;
        float _2986 = (dot(vec3(cbLight._m0[_2557 + 3u].xyz), vec3(_1051, _1052, _1053)) * 0.5) + 0.5;
        float _2987 = _2986 * _2986;
        float _4981 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        float _2988 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
        float _2989 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
        _2797 = (((cbLight._m0[_2970].x * 0.3183098733425140380859375) * _2988) * _2989) + _2735;
        _2799 = (((cbLight._m0[_2970].y * 0.3183098733425140380859375) * _2988) * _2989) + _2737;
        _2801 = (((cbLight._m0[_2970].z * 0.3183098733425140380859375) * _2988) * _2989) + _2739;
    }
    uint _2804 = _2557 + 8u;
    float _2817 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2557].w)) * _1054) * 0.949999988079071044921875);
    float _2818 = _2817 * _2817;
    float _2819 = cbLight._m0[_2557].x + _1130;
    float _2820 = cbLight._m0[_2557].y + _1131;
    float _2821 = cbLight._m0[_2557].z + _1132;
    float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
    float _2826 = _2825 * _2819;
    float _2827 = _2825 * _2820;
    float _2828 = _2825 * _2821;
    float _2829 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_2557].xyz));
    float _4997 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
    float _2832 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
    float _5008 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _2833 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
    float _2834 = dot(vec3(_1051, _1052, _1053), vec3(_2826, _2827, _2828));
    float _5019 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
    float _2837 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
    float _2838 = dot(vec3(cbLight._m0[_2557].xyz), vec3(_2826, _2827, _2828));
    float _5030 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
    float _2842 = _2818 * _2818;
    float _2846 = ((_2837 * _2837) * (_2842 + (-1.0))) + 1.0;
    float _2854 = exp2(log2(1.0 - (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0)))) * 5.0);
    float _2855 = 0.959999978542327880859375 - _1209;
    float _2857 = 0.959999978542327880859375 - _1210;
    float _2858 = 0.959999978542327880859375 - _1211;
    float _2865 = 1.0 - _2818;
    float _2876 = (0.5 / (((_2833 * ((_2832 * _2865) + _2818)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2865) + _2818) * _2832))) * _2832;
    float _5041 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2878 = (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2842 / ((_2846 * _2846) * 3.141590118408203125));
    uint _2892 = _2557 + 9u;
    float _2903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2597].w)) * _1054) * 0.949999988079071044921875);
    float _2904 = _2903 * _2903;
    float _2905 = cbLight._m0[_2597].x + _1130;
    float _2906 = cbLight._m0[_2597].y + _1131;
    float _2907 = cbLight._m0[_2597].z + _1132;
    float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
    float _2912 = _2911 * _2905;
    float _2913 = _2911 * _2906;
    float _2914 = _2911 * _2907;
    float _2915 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_2597].xyz));
    float _5052 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
    float _2918 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
    float _2919 = dot(vec3(_1051, _1052, _1053), vec3(_2912, _2913, _2914));
    float _5063 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
    float _2922 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
    float _2923 = dot(vec3(cbLight._m0[_2597].xyz), vec3(_2912, _2913, _2914));
    float _5074 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
    float _2927 = _2904 * _2904;
    float _2931 = ((_2922 * _2922) * (_2927 + (-1.0))) + 1.0;
    float _2938 = exp2(log2(1.0 - (isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0)))) * 5.0);
    float _2945 = 1.0 - _2904;
    float _2955 = (0.5 / (((_2833 * ((_2918 * _2945) + _2904)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _2945) + _2904) * _2918))) * _2918;
    float _5085 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
    float _2957 = (isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_2927 / ((_2931 * _2931) * 3.141590118408203125));
    float _2967 = (((((_2938 * _2855) + _1212) * cbLight._m0[_2892].x) * _2957) * _2580) + ((((cbLight._m0[_2804].x * _2546) * ((_2854 * _2855) + _1212)) * _2878) * _2593);
    float _2968 = (((((_2938 * _2857) + _1214) * cbLight._m0[_2892].y) * _2957) * _2580) + ((((cbLight._m0[_2804].y * _2548) * ((_2854 * _2857) + _1214)) * _2878) * _2593);
    float _2969 = (((((_2938 * _2858) + _1215) * cbLight._m0[_2892].z) * _2957) * _2580) + ((((cbLight._m0[_2804].z * _2550) * ((_2854 * _2858) + _1215)) * _2878) * _2593);
    float _3025;
    float _3027;
    float _3029;
    if (_2633)
    {
        _3025 = _2967;
        _3027 = _2968;
        _3029 = _2969;
    }
    else
    {
        uint _3031 = _2557 + 2u;
        uint _3035 = _2557 + 10u;
        float _3049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3031].w)) * _1054) * 0.949999988079071044921875);
        float _3050 = _3049 * _3049;
        float _3051 = cbLight._m0[_3031].x + _1130;
        float _3052 = cbLight._m0[_3031].y + _1131;
        float _3053 = cbLight._m0[_3031].z + _1132;
        float _3057 = inversesqrt(dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053)));
        float _3058 = _3057 * _3051;
        float _3059 = _3057 * _3052;
        float _3060 = _3057 * _3053;
        float _3061 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_3031].xyz));
        float _5096 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0));
        float _3065 = dot(vec3(_1051, _1052, _1053), vec3(_3058, _3059, _3060));
        float _5107 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3068 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
        float _3069 = dot(vec3(cbLight._m0[_3031].xyz), vec3(_3058, _3059, _3060));
        float _5118 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3073 = _3050 * _3050;
        float _3077 = ((_3068 * _3068) * (_3073 + (-1.0))) + 1.0;
        float _3084 = exp2(log2(1.0 - (isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0)))) * 5.0);
        float _3091 = 1.0 - _3050;
        float _3101 = (0.5 / (((_2833 * ((_3064 * _3091) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _3091) + _3050) * _3064))) * _3064;
        float _5129 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
        float _3103 = (isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0))) * (_3073 / ((_3077 * _3077) * 3.141590118408203125));
        float _3104 = isnan(1.0) ? _2572 : (isnan(_2572) ? 1.0 : min(_2572, 1.0));
        _3025 = (((((_3084 * _2855) + _1212) * cbLight._m0[_3035].x) * _3103) * _3104) + _2967;
        _3027 = (((((_3084 * _2857) + _1214) * cbLight._m0[_3035].y) * _3103) * _3104) + _2968;
        _3029 = (((((_3084 * _2858) + _1215) * cbLight._m0[_3035].z) * _3103) * _3104) + _2969;
    }
    float _3135;
    float _3137;
    float _3139;
    if (_2742)
    {
        _3135 = _3025;
        _3137 = _3027;
        _3139 = _3029;
    }
    else
    {
        uint _3146 = _2557 + 3u;
        uint _3150 = _2557 + 11u;
        float _3164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3146].w)) * _1054) * 0.949999988079071044921875);
        float _3165 = _3164 * _3164;
        float _3166 = cbLight._m0[_3146].x + _1130;
        float _3167 = cbLight._m0[_3146].y + _1131;
        float _3168 = cbLight._m0[_3146].z + _1132;
        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
        float _3173 = _3172 * _3166;
        float _3174 = _3172 * _3167;
        float _3175 = _3172 * _3168;
        float _3176 = dot(vec3(_1051, _1052, _1053), vec3(cbLight._m0[_3146].xyz));
        float _5145 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
        float _3179 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
        float _3180 = dot(vec3(_1051, _1052, _1053), vec3(_3173, _3174, _3175));
        float _5156 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
        float _3183 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
        float _3184 = dot(vec3(cbLight._m0[_3146].xyz), vec3(_3173, _3174, _3175));
        float _5167 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3188 = _3165 * _3165;
        float _3192 = ((_3183 * _3183) * (_3188 + (-1.0))) + 1.0;
        float _3199 = exp2(log2(1.0 - (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) * 5.0);
        float _3206 = 1.0 - _3165;
        float _3216 = (0.5 / (((_2833 * ((_3179 * _3206) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_2833 * _3206) + _3165) * _3179))) * _3179;
        float _5178 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
        float _3218 = (isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3188 / ((_3192 * _3192) * 3.141590118408203125));
        float _3219 = isnan(1.0) ? _2573 : (isnan(_2573) ? 1.0 : min(_2573, 1.0));
        _3135 = (((((_3199 * _2855) + _1212) * cbLight._m0[_3150].x) * _3218) * _3219) + _3025;
        _3137 = (((((_3199 * _2857) + _1214) * cbLight._m0[_3150].y) * _3218) * _3219) + _3027;
        _3139 = (((((_3199 * _2858) + _1215) * cbLight._m0[_3150].z) * _3218) * _3219) + _3029;
    }
    float _3285;
    float _3287;
    float _3289;
    float _3291;
    float _3293;
    float _3295;
    if (_2555.y == 0u)
    {
        uvec4 _3240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3241 = _3240.x;
        uint _3252 = uint((float(_3240.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1151) / _3241))) + floor(float(uint(cbSceneParam._m0[85u].x * _1150) / _3241)));
        float _3262 = (log2(_2333 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3263 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
        uint _3266 = uint(isnan(14.0) ? _3263 : (isnan(_3263) ? 14.0 : min(_3263, 14.0)));
        uvec4 _3271 = texelFetch(g_lightClusterGridBuffer, int(((_3266 << 2u) + (_3252 << 6u)) >> 2u));
        uint _3272 = _3271.x;
        uint _3273 = _3240.z;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        if (((((1u << ((_3273 >> 4u) & 15u)) + 4294967295u) & _3272) == 0u) || ((_3273 & 240u) == 0u))
        {
            _3352 = 0.0;
            _3354 = 0.0;
            _3356 = 0.0;
            _3358 = 0.0;
            _3360 = 0.0;
            _3362 = 0.0;
        }
        else
        {
            float _3353;
            float _3355;
            float _3357;
            float _3359;
            float _3361;
            float _3363;
            float _3505 = 0.0;
            float _3506 = 0.0;
            float _3507 = 0.0;
            float _3508 = 0.0;
            float _3509 = 0.0;
            float _3510 = 0.0;
            uint _3511 = 0u;
            uint _3520;
            bool _3521;
            for (;;)
            {
                _3520 = texelFetch(g_lightClassification, int((((_3266 << 5u) + (_3252 << 9u)) + (_3511 << 2u)) >> 2u)).x;
                _3521 = _3520 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3521)
                {
                    frontier_phi_71_pred = _3510;
                    frontier_phi_71_pred_1 = _3509;
                    frontier_phi_71_pred_2 = _3508;
                    frontier_phi_71_pred_3 = _3507;
                    frontier_phi_71_pred_4 = _3506;
                    frontier_phi_71_pred_5 = _3505;
                }
                else
                {
                    float _3650;
                    float _3651;
                    float _3652;
                    float _3653;
                    float _3654;
                    float _3655;
                    uint _3656;
                    _3650 = _3505;
                    _3651 = _3506;
                    _3652 = _3507;
                    _3653 = _3508;
                    _3654 = _3509;
                    _3655 = _3510;
                    _3656 = _3520;
                    float _3577;
                    float _3578;
                    float _3579;
                    float _3580;
                    float _3581;
                    float _3582;
                    for (;;)
                    {
                        uint _3660 = uint(findLSB(_3656)) + (_3511 << 5u);
                        uint _3657 = (_3656 + 4294967295u) & _3656;
                        uint _3662 = _3660 * 48u;
                        vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3662)).x, texelFetch(g_PointLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3662 + 3u)).x));
                        uint _3682 = (_3660 * 48u) + 4u;
                        vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3682)).x, texelFetch(g_PointLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3682 + 3u)).x));
                        uint _3701 = (_3660 * 48u) + 8u;
                        vec3 _3712 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3701)).x, texelFetch(g_PointLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3701 + 2u)).x));
                        float _3716 = _3676.x - _2331;
                        float _3717 = _3676.y - _2332;
                        float _3718 = _3676.z - _2333;
                        float _3719 = dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718));
                        float _3722 = inversesqrt(_3719);
                        float _3723 = _3722 * _3716;
                        float _3724 = _3722 * _3717;
                        float _3725 = _3722 * _3718;
                        float _3726 = dot(vec3(_1169, _1172, _1175), vec3(_3723, _3724, _3725));
                        float _3731 = 1.0 - (_3719 * _3676.w);
                        float _5204 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                        float _3732 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                        float _3733 = sqrt(_3719) * _3695.w;
                        float _3736 = 1.39999997615814208984375 / (_3733 + 1.39999997615814208984375);
                        float _3737 = _3736 * _3736;
                        float _3740 = ((1.0 - _3737) * _3726) + _3737;
                        float _3743 = _3733 * _3733;
                        float _3747 = ((isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0))) * _3732) / ((_3743 * 0.699999988079071044921875) + 1.0);
                        float _3751 = (-0.0) - _2331;
                        float _3752 = (-0.0) - _2332;
                        float _3753 = (-0.0) - _2333;
                        float _3757 = inversesqrt(dot(vec3(_3751, _3752, _3753), vec3(_3751, _3752, _3753)));
                        float _3758 = _3757 * _3751;
                        float _3759 = _3757 * _3752;
                        float _3760 = _3757 * _3753;
                        float _3767 = exp2(log2(1.0 / ((_3743 * 3.5) + 5.0)) * 0.25);
                        float _3768 = 1.0 - _1244;
                        float _3775 = sqrt(1.0 - ((1.0 - (_3768 * _3768)) * (1.0 - (_3767 * _3767))));
                        float _3776 = _3775 * _3775;
                        float _3777 = _3776 * _3776;
                        float _3778 = _3758 + _3723;
                        float _3779 = _3759 + _3724;
                        float _3780 = _3760 + _3725;
                        float _3784 = inversesqrt(dot(vec3(_3778, _3779, _3780), vec3(_3778, _3779, _3780)));
                        float _3788 = dot(vec3(_1169, _1172, _1175), vec3(_3758, _3759, _3760));
                        float _5220 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                        float _3791 = isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0));
                        float _3792 = dot(vec3(_1169, _1172, _1175), vec3(_3784 * _3778, _3784 * _3779, _3784 * _3780));
                        float _5231 = isnan(0.0) ? _3792 : (isnan(_3792) ? 0.0 : max(_3792, 0.0));
                        float _3795 = isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0));
                        float _3799 = ((_3795 * _3795) * (_3777 + (-1.0))) + 1.0;
                        float _3800 = _3736 * _3776;
                        float _3801 = _3800 * _3800;
                        float _3804 = ((1.0 - _3801) * _3726) + _3801;
                        float _5242 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                        float _3805 = isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0));
                        float _3806 = 1.0 - _3776;
                        float _3816 = (0.5 / (((_3805 * ((_3791 * _3806) + _3776)) + 9.9999999392252902907785028219223e-09) + (((_3805 * _3806) + _3776) * _3791))) * _3805;
                        float _5253 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                        float _3827 = (((_3777 * 3.1415927410125732421875) * (isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0)))) / ((_3799 * _3799) * ((_3743 * 2.1991131305694580078125) + 3.141590118408203125))) * _3732;
                        _3580 = (_3747 * _3695.x) + _3653;
                        _3581 = (_3747 * _3695.y) + _3654;
                        _3582 = (_3747 * _3695.z) + _3655;
                        _3577 = (_3827 * _3712.x) + _3650;
                        _3578 = (_3827 * _3712.y) + _3651;
                        _3579 = (_3827 * _3712.z) + _3652;
                        if (_3657 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3650 = _3577;
                            _3651 = _3578;
                            _3652 = _3579;
                            _3653 = _3580;
                            _3654 = _3581;
                            _3655 = _3582;
                            _3656 = _3657;
                        }
                    }
                    frontier_phi_71_pred = _3582;
                    frontier_phi_71_pred_1 = _3581;
                    frontier_phi_71_pred_2 = _3580;
                    frontier_phi_71_pred_3 = _3579;
                    frontier_phi_71_pred_4 = _3578;
                    frontier_phi_71_pred_5 = _3577;
                }
                _3363 = frontier_phi_71_pred;
                _3361 = frontier_phi_71_pred_1;
                _3359 = frontier_phi_71_pred_2;
                _3357 = frontier_phi_71_pred_3;
                _3355 = frontier_phi_71_pred_4;
                _3353 = frontier_phi_71_pred_5;
                uint _3512 = _3511 + 1u;
                if (_3512 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3505 = _3353;
                    _3506 = _3355;
                    _3507 = _3357;
                    _3508 = _3359;
                    _3509 = _3361;
                    _3510 = _3363;
                    _3511 = _3512;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3352 = _3353;
            _3354 = _3355;
            _3356 = _3357;
            _3358 = _3359;
            _3360 = _3361;
            _3362 = _3363;
        }
        uvec4 _3366 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3367 = _3366.z;
        uint _3369 = (_3367 >> 8u) & 15u;
        float _3473;
        float _3475;
        float _3477;
        float _3479;
        float _3481;
        float _3483;
        if (((4294967295u << _3369) & _3272) == 0u)
        {
            _3473 = _3352;
            _3475 = _3354;
            _3477 = _3356;
            _3479 = _3358;
            _3481 = _3360;
            _3483 = _3362;
        }
        else
        {
            float _3498 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
            float _3499 = _3498 * _2331;
            float _3500 = _3498 * _2332;
            float _3501 = _3498 * _2333;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3369 < ((_3367 >> 12u) & 15u))
            {
                float _3474;
                float _3476;
                float _3478;
                float _3480;
                float _3482;
                float _3484;
                float _3633 = _3352;
                float _3634 = _3354;
                float _3635 = _3356;
                float _3636 = _3358;
                float _3637 = _3360;
                float _3638 = _3362;
                uint _3639 = _3369;
                uint _3648;
                bool _3649;
                for (;;)
                {
                    _3648 = texelFetch(g_lightClassification, int((((_3266 << 5u) + (_3252 << 9u)) + (_3639 << 2u)) >> 2u)).x;
                    _3649 = _3648 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3649)
                    {
                        frontier_phi_82_pred = _3638;
                        frontier_phi_82_pred_1 = _3637;
                        frontier_phi_82_pred_2 = _3636;
                        frontier_phi_82_pred_3 = _3635;
                        frontier_phi_82_pred_4 = _3634;
                        frontier_phi_82_pred_5 = _3633;
                    }
                    else
                    {
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _4134;
                        float _4135;
                        float _4136;
                        float _4137;
                        float _4138;
                        float _4139;
                        float _3854 = _3633;
                        float _3855 = _3634;
                        float _3856 = _3635;
                        float _3857 = _3636;
                        float _3858 = _3637;
                        float _3859 = _3638;
                        uint _3860 = _3648;
                        uint _3861;
                        vec4 _3886;
                        float _3887;
                        vec4 _3902;
                        vec3 _3914;
                        vec4 _3929;
                        vec4 _3944;
                        float _3990;
                        bool _3991;
                        for (;;)
                        {
                            uint _3871 = ((_3639 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3860));
                            _3861 = (_3860 + 4294967295u) & _3860;
                            uint _3873 = _3871 * 40u;
                            _3886 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3873)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3873 + 3u)).x));
                            _3887 = _3886.w;
                            uint _3889 = (_3871 * 40u) + 4u;
                            _3902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3889 + 3u)).x));
                            uint _3904 = (_3871 * 40u) + 8u;
                            _3914 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3904 + 2u)).x));
                            uint _3916 = (_3871 * 40u) + 16u;
                            _3929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3916 + 3u)).x));
                            uint _3931 = (_3871 * 40u) + 20u;
                            _3944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3931 + 3u)).x));
                            uint _3946 = (_3871 * 40u) + 24u;
                            vec4 _3959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3946 + 3u)).x));
                            uint _3965 = (_3871 * 40u) + 28u;
                            vec4 _3978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3965 + 3u)).x));
                            _3990 = fma(_2333, _3978.z, fma(_2332, _3978.y, _3978.x * _2331)) + _3978.w;
                            _3991 = !((fma(_2333, _3959.z, fma(_2332, _3959.y, _3959.x * _2331)) + _3959.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3991)
                            {
                                float _4018 = _3886.x - _2331;
                                float _4019 = _3886.y - _2332;
                                float _4020 = _3886.z - _2333;
                                float _4021 = dot(vec3(_4018, _4019, _4020), vec3(_4018, _4019, _4020));
                                float _4024 = inversesqrt(_4021);
                                float _4025 = _4024 * _4018;
                                float _4026 = _4024 * _4019;
                                float _4027 = _4024 * _4020;
                                float _4031 = 1.0 - (_4021 / (_3887 * _3887));
                                float _5264 = isnan(0.0) ? _4031 : (isnan(_4031) ? 0.0 : max(_4031, 0.0));
                                float _4032 = isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0));
                                float _4036 = sqrt(_4021) * _3902.w;
                                float _4038 = 1.39999997615814208984375 / (_4036 + 1.39999997615814208984375);
                                float _4039 = _4038 * _4038;
                                float _4042 = ((1.0 - _4039) * dot(vec3(_4025, _4026, _4027), vec3(_1169, _1172, _1175))) + _4039;
                                float _4045 = _4036 * _4036;
                                float _4049 = (fma(_2333, _3929.z, fma(_2332, _3929.y, _3929.x * _2331)) + _3929.w) / _3990;
                                float _4050 = (fma(_2333, _3944.z, fma(_2332, _3944.y, _3944.x * _2331)) + _3944.w) / _3990;
                                float _4054 = 1.0 - dot(vec2(_4049, _4050), vec2(_4049, _4050));
                                float _5280 = isnan(0.0) ? _4054 : (isnan(_4054) ? 0.0 : max(_4054, 0.0));
                                float _4055 = isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0));
                                float _4056 = _4055 * (((isnan(0.0) ? _4042 : (isnan(_4042) ? 0.0 : max(_4042, 0.0))) * _4032) / ((_4045 * 0.699999988079071044921875) + 1.0));
                                float _4068 = exp2(log2(1.0 / ((_4045 * 3.5) + 5.0)) * 0.25);
                                float _4069 = 1.0 - _1244;
                                float _4076 = sqrt(1.0 - ((1.0 - (_4069 * _4069)) * (1.0 - (_4068 * _4068))));
                                float _4077 = _4076 * _4076;
                                float _4078 = _4077 * _4077;
                                float _4079 = _4025 - _3499;
                                float _4080 = _4026 - _3500;
                                float _4081 = _4027 - _3501;
                                float _4085 = inversesqrt(dot(vec3(_4079, _4080, _4081), vec3(_4079, _4080, _4081)));
                                float _4089 = dot(vec3(_1169, _1172, _1175), vec3((-0.0) - _3499, (-0.0) - _3500, (-0.0) - _3501));
                                float _5291 = isnan(0.0) ? _4089 : (isnan(_4089) ? 0.0 : max(_4089, 0.0));
                                float _4092 = isnan(1.0) ? _5291 : (isnan(_5291) ? 1.0 : min(_5291, 1.0));
                                float _4093 = dot(vec3(_1169, _1172, _1175), vec3(_4085 * _4079, _4085 * _4080, _4085 * _4081));
                                float _5302 = isnan(0.0) ? _4093 : (isnan(_4093) ? 0.0 : max(_4093, 0.0));
                                float _4096 = isnan(1.0) ? _5302 : (isnan(_5302) ? 1.0 : min(_5302, 1.0));
                                float _4100 = ((_4096 * _4096) * (_4078 + (-1.0))) + 1.0;
                                float _4101 = _4038 * _4077;
                                float _4102 = _4101 * _4101;
                                float _4108 = ((1.0 - _4102) * dot(vec3(_1169, _1172, _1175), vec3(_4025, _4026, _4027))) + _4102;
                                float _5313 = isnan(0.0) ? _4108 : (isnan(_4108) ? 0.0 : max(_4108, 0.0));
                                float _4109 = isnan(1.0) ? _5313 : (isnan(_5313) ? 1.0 : min(_5313, 1.0));
                                float _4110 = 1.0 - _4077;
                                float _4120 = (0.5 / (((_4109 * ((_4092 * _4110) + _4077)) + 9.9999999392252902907785028219223e-09) + (((_4109 * _4110) + _4077) * _4092))) * _4109;
                                float _5324 = isnan(0.0) ? _4120 : (isnan(_4120) ? 0.0 : max(_4120, 0.0));
                                float _4130 = (_4055 * _4032) * (((_4078 * 3.1415927410125732421875) * (isnan(1.0) ? _5324 : (isnan(_5324) ? 1.0 : min(_5324, 1.0)))) / ((_4100 * _4100) * ((_4045 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4056 * _3902.z;
                                frontier_phi_88_pred_1 = _4056 * _3902.y;
                                frontier_phi_88_pred_2 = _4056 * _3902.x;
                                frontier_phi_88_pred_3 = _4130 * _3914.z;
                                frontier_phi_88_pred_4 = _4130 * _3914.y;
                                frontier_phi_88_pred_5 = _4130 * _3914.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4139 = frontier_phi_88_pred;
                            _4138 = frontier_phi_88_pred_1;
                            _4137 = frontier_phi_88_pred_2;
                            _4136 = frontier_phi_88_pred_3;
                            _4135 = frontier_phi_88_pred_4;
                            _4134 = frontier_phi_88_pred_5;
                            _3844 = _4137 + _3857;
                            _3845 = _4138 + _3858;
                            _3846 = _4139 + _3859;
                            _3841 = _4134 + _3854;
                            _3842 = _4135 + _3855;
                            _3843 = _4136 + _3856;
                            if (_3861 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3854 = _3841;
                                _3855 = _3842;
                                _3856 = _3843;
                                _3857 = _3844;
                                _3858 = _3845;
                                _3859 = _3846;
                                _3860 = _3861;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3846;
                        frontier_phi_82_pred_1 = _3845;
                        frontier_phi_82_pred_2 = _3844;
                        frontier_phi_82_pred_3 = _3843;
                        frontier_phi_82_pred_4 = _3842;
                        frontier_phi_82_pred_5 = _3841;
                    }
                    _3484 = frontier_phi_82_pred;
                    _3482 = frontier_phi_82_pred_1;
                    _3480 = frontier_phi_82_pred_2;
                    _3478 = frontier_phi_82_pred_3;
                    _3476 = frontier_phi_82_pred_4;
                    _3474 = frontier_phi_82_pred_5;
                    uint _3640 = _3639 + 1u;
                    if (_3640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3633 = _3474;
                        _3634 = _3476;
                        _3635 = _3478;
                        _3636 = _3480;
                        _3637 = _3482;
                        _3638 = _3484;
                        _3639 = _3640;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3480;
                frontier_phi_63_64_ladder_1 = _3484;
                frontier_phi_63_64_ladder_2 = _3482;
                frontier_phi_63_64_ladder_3 = _3478;
                frontier_phi_63_64_ladder_4 = _3476;
                frontier_phi_63_64_ladder_5 = _3474;
            }
            else
            {
                frontier_phi_63_64_ladder = _3358;
                frontier_phi_63_64_ladder_1 = _3362;
                frontier_phi_63_64_ladder_2 = _3360;
                frontier_phi_63_64_ladder_3 = _3356;
                frontier_phi_63_64_ladder_4 = _3354;
                frontier_phi_63_64_ladder_5 = _3352;
            }
            _3473 = frontier_phi_63_64_ladder_5;
            _3475 = frontier_phi_63_64_ladder_4;
            _3477 = frontier_phi_63_64_ladder_3;
            _3479 = frontier_phi_63_64_ladder;
            _3481 = frontier_phi_63_64_ladder_2;
            _3483 = frontier_phi_63_64_ladder_1;
        }
        float _3488 = isnan(1.0) ? _1228 : (isnan(_1228) ? 1.0 : min(_1228, 1.0));
        _3285 = (_3488 * _3479) + _2797;
        _3287 = (_3488 * _3481) + _2799;
        _3289 = (_3488 * _3483) + _2801;
        _3291 = ((_3473 * _1212) * _3488) + _3135;
        _3293 = ((_3475 * _1214) * _3488) + _3137;
        _3295 = ((_3477 * _1215) * _3488) + _3139;
    }
    else
    {
        _3285 = _2797;
        _3287 = _2799;
        _3289 = _2801;
        _3291 = _3135;
        _3293 = _3137;
        _3295 = _3139;
    }
    float _5340 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _5351 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _5362 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _3312 = ((isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0))) * (_3285 + ((isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0))) * _1228))) + ((_3291 + ((isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))) * _2065)) * cbPerFrame._m0[3u].x);
    float _3313 = ((isnan(1.0) ? _5351 : (isnan(_5351) ? 1.0 : min(_5351, 1.0))) * (_3287 + ((isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))) * _1228))) + ((_3293 + ((isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0))) * _2065)) * cbPerFrame._m0[3u].x);
    float _3314 = ((isnan(1.0) ? _5362 : (isnan(_5362) ? 1.0 : min(_5362, 1.0))) * (_3289 + ((isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0))) * _1228))) + ((_3295 + ((isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0))) * _2065)) * cbPerFrame._m0[3u].x);
    uint _3315 = _296 + 6u;
    float _3323 = _1150 / cbSceneParam._m0[86u].x;
    float _3324 = _1151 / cbSceneParam._m0[86u].y;
    vec4 _3338 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3323, _3324, (log2((isnan(cbSceneParam._m0[77u].w) ? _1073 : (isnan(_1073) ? cbSceneParam._m0[77u].w : min(_1073, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3340 = _3338.x;
    float _3341 = _3338.y;
    float _3342 = _3338.z;
    float _3343 = _3338.w;
    float _3415;
    float _3417;
    float _3419;
    float _3421;
    if (_1073 > cbSceneParam._m0[78u].w)
    {
        float _3377 = isnan(_1073) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1073 : min(cbSceneParam._m0[80u].w, _1073));
        float _3378 = _3377 / _1073;
        float _3389 = _3378 * _1123;
        float _3390 = _1124 * _3378;
        float _3391 = (-0.0) - _3390;
        float _3393 = _3378 * _1125;
        float _3395 = (cbSceneParam._m0[77u].w * _3391) / _3377;
        float _3396 = _3395 + cbSceneParam._m0[79u].w;
        float _3397 = cbSceneParam._m0[79u].w - _3390;
        float _3403 = sqrt(((_3389 * _3389) + (_3390 * _3390)) + (_3393 * _3393));
        float _3406 = (1.0 - (cbSceneParam._m0[77u].w / _3377)) * _3403;
        float _3411 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3413 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3590;
        if (abs((_3391 - _3395) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3590 = ((((_3396 > 0.0) ? exp2(_3411 * _3396) : (2.0 - exp2(_3413 * _3396))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3406;
        }
        else
        {
            float _3534 = 1.0 / cbSceneParam._m0[80u].x;
            float _3535 = isnan(_3397) ? _3396 : (isnan(_3396) ? _3397 : max(_3396, _3397));
            float _3536 = isnan(_3397) ? _3396 : (isnan(_3396) ? _3397 : min(_3396, _3397));
            float _3545 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : min(_3535, 0.0));
            float _3546 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : min(_3536, 0.0));
            _3590 = ((abs(_3403 / _3391) * cbSceneParam._m0[80u].y) * ((((_3545 - _3546) * 2.0) - ((exp2(_3411 * (isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0)))) - exp2(_3411 * (isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0))))) * _3534)) - ((exp2(_3413 * _3545) - exp2(_3413 * _3546)) * _3534))) + (_3406 * cbSceneParam._m0[80u].z);
        }
        vec4 _3592 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3323, _3324, 1.0), 0.0);
        float _3601 = exp2((_3590 * (-1.44269502162933349609375)) * (1.0 - _3592.w));
        float _3602 = log2(_3601);
        float _3618 = log2(_3343);
        _3415 = (exp2(_3618 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3602 * cbSceneParam._m0[78u].x)) * _3592.x) / cbSceneParam._m0[78u].x)) + _3340;
        _3417 = (exp2(_3618 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3602 * cbSceneParam._m0[78u].y)) * _3592.y) / cbSceneParam._m0[78u].y)) + _3341;
        _3419 = (exp2(_3618 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3602 * cbSceneParam._m0[78u].z)) * _3592.z) / cbSceneParam._m0[78u].z)) + _3342;
        _3421 = _3601 * _3343;
    }
    else
    {
        _3415 = _3340;
        _3417 = _3341;
        _3419 = _3342;
        _3421 = _3343;
    }
    bool _3628;
    vec4 _3431;
    vec4 _3453;
    float _3455;
    float _3459;
    float _3460;
    float _3461;
    float _3462;
    bool _3472;
    for (;;)
    {
        _3431 = cbMatDynParam._m0[0u];
        float _3433 = roundEven(_3431.y);
        bool _3434 = _3433 == 3.0;
        float _3435 = log2(_3421);
        float _3442 = exp2(_3435 * cbSceneParam._m0[78u].x) * _3312;
        float _3443 = exp2(_3435 * cbSceneParam._m0[78u].y) * _3313;
        float _3444 = exp2(_3435 * cbSceneParam._m0[78u].z) * _3314;
        float _3451 = _1139 + (-0.5);
        _3453 = cbMtdParam._m0[1u];
        _3455 = _3453.y * _3451;
        float _3458 = (_3433 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3459 = _3458 * (_3434 ? _3442 : (_3442 + (cbSceneParam._m0[72u].w * _3415)));
        _3460 = _3458 * (_3434 ? _3443 : (_3443 + (cbSceneParam._m0[72u].w * _3417)));
        _3461 = _3458 * (_3434 ? _3444 : (_3444 + (cbSceneParam._m0[72u].w * _3419)));
        _3462 = _3451 * 0.999000012874603271484375;
        _3472 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3472)
        {
            if ((cbInstanceData._m0[_296 + 7u].x + _3462) < 0.5)
            {
                _3628 = true;
                break;
            }
        }
        uint _3569 = _1188 + uint(_3431.w);
        if ((cbInstanceData._m0[_3569].w < 1.0) && ((cbInstanceData._m0[_3569].w + _3462) < 0.5))
        {
            _3628 = true;
            break;
        }
        if ((_3455 + 1.0) < _3453.x)
        {
            _3628 = true;
            break;
        }
        _3628 = false;
        break;
    }
    float _3832;
    if (_3628)
    {
        discard_state = true;
        _3832 = 0.0;
    }
    else
    {
        _3832 = cbInstanceData._m0[_3315].w;
    }
    SV_Target.x = _3459;
    SV_Target.y = _3460;
    SV_Target.z = _3461;
    SV_Target.w = _3832;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3315].w;
    discard_exit();
}


