#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1594;
float _3996;
float _3997;
float _3998;
float _3999;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4008 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4019 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4030 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[23u].w) + _445) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4041 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _470 = (_463 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _471 = (_463 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _472 = (_463 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[23u].w) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4052 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    float _549 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _543;
    float _552 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _544;
    float _555 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _545;
    float _562 = ((_543 - _549) * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) + _549;
    float _563 = ((_544 - _552) * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) + _552;
    float _564 = ((_545 - _555) * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) + _555;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    float _653 = ((_625.x - _644) * _463) + _644;
    float _654 = ((_625.y - _645) * _463) + _645;
    float _655 = ((_625.z - _646) * _463) + _646;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _680 = ((_667.z - _655) * _536) + _655;
    float _683 = ((((_667.x - _653) * _536) + _653) * 2.0) + (-1.0);
    float _684 = ((((_667.y - _654) * _536) + _654) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _4063 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _729 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _731 = _729.x;
    float _732 = 1.0 - _731;
    float _741 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _744 = ((isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : min(_741, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _753 = (_744 - ((((((_731 - _732) * cbMtdParam._m0[24u].z) + _732) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _744))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4084 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _761 = (_754 * ((_583.x * cbMtdParam._m0[18u].x) - _562)) + _562;
    float _762 = (_754 * ((_583.y * cbMtdParam._m0[18u].y) - _563)) + _563;
    float _763 = (_754 * ((_583.z * cbMtdParam._m0[18u].z) - _564)) + _564;
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _316) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _317) + cbTextureTilingScale._m0[19u].w));
    float _777 = _775.x;
    float _778 = 1.0 - _777;
    float _803 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_777 - _778) * cbMtdParam._m0[24u].w) + _778) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4095 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _804 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _812 = ((((cbMtdParam._m0[10u].x - _761) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _804) + _761;
    float _813 = ((((cbMtdParam._m0[10u].y - _762) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _804) + _762;
    float _814 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _763)) * _804) + _763;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _842 = _840.x;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _842) * _463) + _842;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _860) * _536) + _860;
    float _881 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _877) * cbMtdParam._m0[19u].z) + _877;
    float _883 = _881 - (_881 * _754);
    float _885 = _883 - (_883 * _804);
    float _890 = (((_602.z - _680) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _680;
    float _894 = ((_704.z - _890) * cbMtdParam._m0[19u].w) + _890;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _915 = (_908.x * 2.0) + (-1.0);
    float _916 = (_908.y * 2.0) + (-1.0);
    float _917 = dot(vec2(_915, _916), vec2(_915, _916));
    float _4106 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _925 = (_754 * (_908.z - _894)) + _894;
    float _928 = ((cbMtdParam._m0[23u].x - _925) * _804) + _925;
    vec4 _949 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _316) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _317) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _955 = (_949.x * 2.0) + (-1.0);
    float _956 = (_949.y * 2.0) + (-1.0);
    float _957 = dot(vec2(_955, _956), vec2(_955, _956));
    float _4117 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _971 = (_683 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_602.x * 2.0) + (-1.0)))) + (((_704.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _972 = (_684 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_602.y * 2.0) + (-1.0)))) + (((_704.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _984 = (((_915 - _971) + (cbMtdParam._m0[21u].x * _971)) * _754) + _971;
    float _985 = (((_916 - _972) + (cbMtdParam._m0[21u].x * _972)) * _754) + _972;
    float _986 = (_754 * (sqrt(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) - _690)) + _690;
    float _997 = (((_955 - _984) + (_984 * cbMtdParam._m0[22u].z)) * _804) + _984;
    float _998 = (((_956 - _985) + (_985 * cbMtdParam._m0[22u].z)) * _804) + _985;
    float _999 = ((sqrt(1.0 - (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) - _986) * _804) + _986;
    float _1001 = cbMtdParam._m0[22u].x + _704.w;
    float _1004 = fma(_999, _265 * NORMAL.x, fma(_998, _272 * TANGENT.x, (_258 * _250) * _997));
    float _1007 = fma(_999, _265 * NORMAL.y, fma(_998, _272 * TANGENT.y, (_258 * _251) * _997));
    float _1010 = fma(_999, _265 * NORMAL.z, fma(_998, _272 * TANGENT.z, (_258 * _252) * _997));
    float _1014 = inversesqrt(dot(vec3(_1004, _1007, _1010), vec3(_1004, _1007, _1010)));
    float _1015 = _1014 * _1004;
    float _1016 = _1014 * _1007;
    float _1017 = _1014 * _1010;
    float _4128 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _1018 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4150 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4161 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4172 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _4183 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _1023 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _1037 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1087 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1077);
    float _1088 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1077);
    float _1089 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1077);
    float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
    float _1094 = _1087 * _1093;
    float _1095 = _1088 * _1093;
    float _1096 = _1089 * _1093;
    vec4 _1101 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1103 = _1101.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1275 = sqrt(((_1087 * _1087) + (_1088 * _1088)) + (_1089 * _1089));
        float _1281 = (cbMatDynParam._m0[5u].x * _1275) + cbMatDynParam._m0[5u].y;
        float _4194 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1286 = (cbMatDynParam._m0[5u].z * _1275) + cbMatDynParam._m0[5u].w;
        float _4205 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))) - _1282)) + _1282) < ((_1103 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1114 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1115 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1133 = fma(_1017, cbSceneParam._m0[5u].z, fma(_1016, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1015));
    float _1136 = fma(_1017, cbSceneParam._m0[6u].z, fma(_1016, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1015));
    float _1139 = fma(_1017, cbSceneParam._m0[7u].z, fma(_1016, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1015));
    uint _1152 = _297 + 9u;
    uint _1153 = _1152 + uint(cbMatDynParam._m0[0u].w);
    float _1159 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * cbInstanceData._m0[_1153].x;
    float _1160 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * cbInstanceData._m0[_1153].y;
    float _1161 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * cbInstanceData._m0[_1153].z;
    float _4216 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _4227 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _4238 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _1165 = 1.0 - _1023;
    float _1166 = _1162 * _1165;
    float _1167 = _1163 * _1165;
    float _1168 = _1164 * _1165;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1023;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1023;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1023;
    float _1176 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    float _1179 = _1175 + 0.039999999105930328369140625;
    vec4 _1188 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1114, cbSceneParam._m0[86u].y * _1115));
    float _1192 = ((isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * TEXCOORD_5.w) * _1188.x;
    float _1193 = dot(vec3(_1015, _1016, _1017), vec3(_1094, _1095, _1096));
    float _1196 = _1193 * 2.0;
    float _1200 = (_1196 * _1015) - _1094;
    float _1201 = (_1196 * _1016) - _1095;
    float _1202 = (_1196 * _1017) - _1096;
    float _1206 = abs(dot(vec3(_1094, _1095, _1096), vec3(_1015, _1016, _1017)));
    float _4249 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1208 = sqrt(_1018);
    float _1221 = exp2((_1208 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1208 * 3.0));
    float _1227 = (1.0 - _1221) * ((_1208 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1228 = _1221 * _1208;
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1593;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1318 = fma(_1264, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256));
        float _1322 = fma(_1264, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256));
        float _1326 = fma(_1264, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256));
        float _1351 = _1256 + _1015;
        float _1352 = _1260 + _1016;
        float _1353 = _1264 + _1017;
        float _1363 = fma(_1353, cbModelParam._m0[26u].z, fma(_1352, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1351)) - _1318;
        float _1364 = fma(_1353, cbModelParam._m0[27u].z, fma(_1352, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1351)) - _1322;
        float _1365 = fma(_1353, cbModelParam._m0[28u].z, fma(_1352, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1351)) - _1326;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1318 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1322 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[34u].z) + ((((((_1326 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1421 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1387.x + (-0.5));
        float _1423 = _1421 * (_1387.y + (-0.5));
        float _1424 = _1421 * (_1387.z + (-0.5));
        float _1431 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1394.x + (-0.5));
        float _1433 = _1431 * (_1394.y + (-0.5));
        float _1434 = _1431 * (_1394.z + (-0.5));
        float _1441 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1401.x + (-0.5));
        float _1443 = _1441 * (_1401.y + (-0.5));
        float _1444 = _1441 * (_1401.z + (-0.5));
        float _1451 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1408.x + (-0.5));
        float _1453 = _1451 * (_1408.y + (-0.5));
        float _1454 = _1451 * (_1408.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1475 = (dot(vec3(_1015, _1016, _1017), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1485 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4297 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1487 + 1.0))) + _1492) * _1455;
        float _1502 = _1423 * 0.5;
        float _1503 = _1433 * 0.5;
        float _1504 = _1443 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1015, _1016, _1017), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4330 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1529 + 1.0))) + _1534) * _1456;
        float _1544 = _1424 * 0.5;
        float _1545 = _1434 * 0.5;
        float _1546 = _1444 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_1015, _1016, _1017), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4363 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1571 + 1.0))) + _1576) * _1457;
        _1593 = _1424;
        _1595 = _1423;
        _1596 = _1422;
        _1597 = _1434;
        _1598 = _1433;
        _1599 = _1432;
        _1600 = _1444;
        _1601 = _1443;
        _1602 = _1442;
        _1603 = _1457;
        _1604 = _1456;
        _1605 = _1455;
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1607 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1594;
        _1595 = _1594;
        _1596 = _1594;
        _1597 = _1594;
        _1598 = _1594;
        _1599 = _1594;
        _1600 = _1594;
        _1601 = _1594;
        _1602 = _1594;
        _1603 = _1594;
        _1604 = _1594;
        _1605 = _1594;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1635 = fma(_1264, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256));
        float _1639 = fma(_1264, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256));
        float _1643 = fma(_1264, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256));
        float _1666 = _1256 + _1015;
        float _1667 = _1260 + _1016;
        float _1668 = _1264 + _1017;
        float _1678 = fma(_1668, cbModelParam._m0[30u].z, fma(_1667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1666)) - _1635;
        float _1679 = fma(_1668, cbModelParam._m0[31u].z, fma(_1667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1666)) - _1639;
        float _1680 = fma(_1668, cbModelParam._m0[32u].z, fma(_1667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1666)) - _1643;
        float _1684 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
        float _1697 = ((_1684 * _1678) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1635 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1684 * _1679) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1639 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1684 * _1680) / cbModelParam._m0[35u].z) + ((((((_1643 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        float _1734 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1735 = _1734 * (_1701.x + (-0.5));
        float _1736 = _1734 * (_1701.y + (-0.5));
        float _1737 = _1734 * (_1701.z + (-0.5));
        float _1744 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1708.x + (-0.5));
        float _1746 = _1744 * (_1708.y + (-0.5));
        float _1747 = _1744 * (_1708.z + (-0.5));
        float _1754 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1715.x + (-0.5));
        float _1756 = _1754 * (_1715.y + (-0.5));
        float _1757 = _1754 * (_1715.z + (-0.5));
        float _1764 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1722.x + (-0.5));
        float _1766 = _1764 * (_1722.y + (-0.5));
        float _1767 = _1764 * (_1722.z + (-0.5));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = _1735 * 0.5;
        float _1772 = _1745 * 0.5;
        float _1773 = _1755 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_1015, _1016, _1017), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4426 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1798 + 1.0))) + _1803) * _1768;
        float _1813 = _1736 * 0.5;
        float _1814 = _1746 * 0.5;
        float _1815 = _1756 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_1015, _1016, _1017), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4459 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1840 + 1.0))) + _1845) * _1769;
        float _1855 = _1737 * 0.5;
        float _1856 = _1747 * 0.5;
        float _1857 = _1757 * 0.5;
        float _1858 = dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857));
        float _1863 = (_1858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1858);
        float _1871 = (dot(vec3(_1015, _1016, _1017), vec3(_1863 * _1855, _1863 * _1856, _1863 * _1857)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1882 = _1881 * 2.0;
        float _1886 = (1.0 - _1881) / (_1881 + 1.0);
        float _4492 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1896 = ((((1.0 - _1887) * (_1882 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1882 + 1.0))) + _1887) * _1770;
        _1904 = _1737;
        _1905 = _1736;
        _1906 = _1735;
        _1907 = _1747;
        _1908 = _1746;
        _1909 = _1745;
        _1910 = _1757;
        _1911 = _1756;
        _1912 = _1755;
        _1913 = _1770;
        _1914 = _1769;
        _1915 = _1768;
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)));
    }
    else
    {
        _1904 = _1594;
        _1905 = _1594;
        _1906 = _1594;
        _1907 = _1594;
        _1908 = _1594;
        _1909 = _1594;
        _1910 = _1594;
        _1911 = _1594;
        _1912 = _1594;
        _1913 = _1594;
        _1914 = _1594;
        _1915 = _1594;
        _1916 = 0.0;
        _1917 = 0.0;
        _1918 = 0.0;
    }
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1606)) + _1606;
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1607)) + _1607;
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1608)) + _1608;
    float _1951 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1928));
    float _1972 = _1200 * 0.5;
    float _1973 = _1201 * 0.5;
    float _1974 = _1202 * 0.5;
    float _1975 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _1978 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _1981 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _2015;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1988 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1593, _1597, _1600, _1603));
        float _1992 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1595, _1598, _1601, _1604));
        float _1996 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1596, _1599, _1602, _1605));
        float _2003 = dot(vec4(cbModelParam._m0[39u]), vec4(_1972, _1973, _1974, 1.0));
        _2015 = dot(vec3(isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2003) ? 0.0 : (isnan(0.0) ? _2003 : max(0.0, _2003))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2015 = 1.0;
    }
    float _2026;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2017 = dot(vec4(cbModelParam._m0[40u]), vec4(_1972, _1973, _1974, 1.0));
        _2026 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2017) ? 0.0 : (isnan(0.0) ? _2017 : max(0.0, _2017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2026 = 1.0;
    }
    float _2030 = (_2026 * cbModelParam._m0[1u].x) + (_2015 * (1.0 - cbModelParam._m0[1u].x));
    float _2040 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1018);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2040 : min(cbModelParam._m0[25u].z, _2040));
    float _2121;
    float _2123;
    float _2125;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2088 = fma(_1264, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1256)) + cbModelParam._m0[13u].w;
        float _2092 = fma(_1264, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1256)) + cbModelParam._m0[14u].w;
        float _2096 = fma(_1264, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1256)) + cbModelParam._m0[15u].w;
        float _2099 = fma(_1202, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200));
        float _2102 = fma(_1202, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200));
        float _2105 = fma(_1202, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200));
        float _2133;
        if (_2099 > 0.0)
        {
            _2133 = abs((1.0 - _2088) / _2099);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2099 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2088 + 1.0) / _2099);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2133 = frontier_phi_17_15_ladder;
        }
        float _2356;
        if (_2102 > 0.0)
        {
            _2356 = abs((1.0 - _2092) / _2102);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2092 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2356 = frontier_phi_26_22_ladder;
        }
        float _2613;
        if (_2105 > 0.0)
        {
            _2613 = abs((1.0 - _2096) / _2105);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2096 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2613 = frontier_phi_38_33_ladder;
        }
        float _2615 = isnan(_2356) ? _2133 : (isnan(_2133) ? _2356 : min(_2133, _2356));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _2099) + _2088;
        float _2621 = (_2616 * _2102) + _2092;
        float _2622 = (_2616 * _2105) + _2096;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2623;
        float _2627 = _2623 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 > _2627) || ((_2621 < _2625) || ((_2620 < _2625) || (_2620 > _2627))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2750 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2622, cbModelParam._m0[9u].z, fma(_2621, cbModelParam._m0[9u].y, _2620 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2622, cbModelParam._m0[10u].z, fma(_2621, cbModelParam._m0[10u].y, _2620 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2622, cbModelParam._m0[11u].z, fma(_2621, cbModelParam._m0[11u].y, _2620 * cbModelParam._m0[11u].x))), _2041);
            frontier_phi_16_38_ladder = _2750.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2750.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2750.x * cbModelParam._m0[1u].y;
        }
        _2121 = frontier_phi_16_38_ladder_2;
        _2123 = frontier_phi_16_38_ladder_1;
        _2125 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2109 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1200, _1201, _1202), _2041);
        _2121 = _2109.x * cbModelParam._m0[1u].y;
        _2123 = _2109.y * cbModelParam._m0[1u].y;
        _2125 = _2109.z * cbModelParam._m0[1u].y;
    }
    float _2129 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1018);
    float _2130 = isnan(_2129) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2129 : min(cbModelParam._m0[25u].w, _2129));
    float _2219;
    float _2221;
    float _2223;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2183 = fma(_1264, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1256)) + cbModelParam._m0[21u].w;
        float _2187 = fma(_1264, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1256)) + cbModelParam._m0[22u].w;
        float _2191 = fma(_1264, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1256)) + cbModelParam._m0[23u].w;
        float _2194 = fma(_1202, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200));
        float _2197 = fma(_1202, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200));
        float _2200 = fma(_1202, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200));
        float _2361;
        if (_2194 > 0.0)
        {
            _2361 = abs((1.0 - _2183) / _2194);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2194 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2183 + 1.0) / _2194);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2361 = frontier_phi_28_24_ladder;
        }
        float _2640;
        if (_2197 > 0.0)
        {
            _2640 = abs((1.0 - _2187) / _2197);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2187 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2640 = frontier_phi_40_35_ladder;
        }
        float _2853;
        if (_2200 > 0.0)
        {
            _2853 = abs((1.0 - _2191) / _2200);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2191 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2853 = frontier_phi_49_46_ladder;
        }
        float _2855 = isnan(_2640) ? _2361 : (isnan(_2361) ? _2640 : min(_2361, _2640));
        float _2856 = isnan(_2853) ? _2855 : (isnan(_2855) ? _2853 : min(_2855, _2853));
        float _2860 = (_2856 * _2194) + _2183;
        float _2861 = (_2856 * _2197) + _2187;
        float _2862 = (_2856 * _2200) + _2191;
        float _2863 = _2856 * 9.9999997473787516355514526367188e-05;
        float _2864 = (-1.0) - _2863;
        float _2866 = _2863 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2862 > _2866) || ((_2862 < _2864) || ((_2861 > _2866) || ((_2861 < _2864) || ((_2860 < _2864) || (_2860 > _2866))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2862, cbModelParam._m0[17u].z, fma(_2861, cbModelParam._m0[17u].y, _2860 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2862, cbModelParam._m0[18u].z, fma(_2861, cbModelParam._m0[18u].y, _2860 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2862, cbModelParam._m0[19u].z, fma(_2861, cbModelParam._m0[19u].y, _2860 * cbModelParam._m0[19u].x))), _2130);
            frontier_phi_25_49_ladder = _3061.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3061.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3061.x * cbModelParam._m0[1u].z;
        }
        _2219 = frontier_phi_25_49_ladder_2;
        _2221 = frontier_phi_25_49_ladder_1;
        _2223 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2203 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1200, _1201, _1202), _2130);
        _2219 = _2203.x * cbModelParam._m0[1u].z;
        _2221 = _2203.y * cbModelParam._m0[1u].z;
        _2223 = _2203.z * cbModelParam._m0[1u].z;
    }
    float _2236 = (((_1227 * _1176) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2219 - _2121)) + _2121);
    float _2238 = (((_1227 * _1178) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2221 - _2123)) + _2123);
    float _2240 = (((_1227 * _1179) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2223 - _2125)) + _2125);
    float _2243 = fma(_2240, cbSceneParam._m0[89u].z, fma(_2238, cbSceneParam._m0[89u].y, _2236 * cbSceneParam._m0[89u].x));
    float _2246 = fma(_2240, cbSceneParam._m0[90u].z, fma(_2238, cbSceneParam._m0[90u].y, _2236 * cbSceneParam._m0[90u].x));
    float _2249 = fma(_2240, cbSceneParam._m0[91u].z, fma(_2238, cbSceneParam._m0[91u].y, _2236 * cbSceneParam._m0[91u].x));
    vec4 _2257 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1114, _1115));
    float _2259 = _2257.w;
    float _2271 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2259);
    float _2272 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2259);
    float _2273 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2259);
    uvec4 _2277 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2279 = _2277.x * 14u;
    uint _2280 = _2279 + 13u;
    float _2287 = _1192 + (-1.0);
    float _2292 = (cbLight._m0[_2280].x * _2287) + 1.0;
    float _2293 = (cbLight._m0[_2280].y * _2287) + 1.0;
    float _2294 = (cbLight._m0[_2280].z * _2287) + 1.0;
    float _2295 = (cbLight._m0[_2280].w * _2287) + 1.0;
    uint _2296 = _2279 + 5u;
    float _2302 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2306 = _2279 + 4u;
    float _2315 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
    uint _2319 = _2279 | 1u;
    float _2330 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_1015, _1016, _1017));
    float _2333 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_1015, _1016, _1017));
    float _4628 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _4639 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2338 = (isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * 0.3183098733425140380859375;
    float _2340 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2347 = ((cbLight._m0[_2296].x * _2302) * _2340) + (((cbLight._m0[_2306].x * _2271) * _2315) * _2338);
    float _2348 = ((_2302 * cbLight._m0[_2296].y) * _2340) + (((cbLight._m0[_2306].y * _2272) * _2315) * _2338);
    float _2349 = ((_2302 * cbLight._m0[_2296].z) * _2340) + (((cbLight._m0[_2306].z * _2273) * _2315) * _2338);
    uvec4 _2353 = floatBitsToUint(cbLight._m0[_2279 + 12u]);
    bool _2355 = _2353.x == 0u;
    float _2366;
    float _2368;
    float _2370;
    if (_2355)
    {
        _2366 = _2347;
        _2368 = _2348;
        _2370 = _2349;
    }
    else
    {
        uint _2374 = _2279 + 6u;
        float _2390 = (dot(vec3(cbLight._m0[_2279 + 2u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2391 = _2390 * _2390;
        float _4650 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2392 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2393 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2366 = (((cbLight._m0[_2374].x * 0.3183098733425140380859375) * _2392) * _2393) + _2347;
        _2368 = (((cbLight._m0[_2374].y * 0.3183098733425140380859375) * _2392) * _2393) + _2348;
        _2370 = (((cbLight._m0[_2374].z * 0.3183098733425140380859375) * _2392) * _2393) + _2349;
    }
    bool _2373 = _2353.y == 0u;
    float _2411;
    float _2413;
    float _2415;
    if (_2373)
    {
        _2411 = _2366;
        _2413 = _2368;
        _2415 = _2370;
    }
    else
    {
        uint _2584 = _2279 + 7u;
        float _2600 = (dot(vec3(cbLight._m0[_2279 + 3u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2601 = _2600 * _2600;
        float _4666 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2602 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2603 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2411 = (((cbLight._m0[_2584].x * 0.3183098733425140380859375) * _2602) * _2603) + _2366;
        _2413 = (((cbLight._m0[_2584].y * 0.3183098733425140380859375) * _2602) * _2603) + _2368;
        _2415 = (((cbLight._m0[_2584].z * 0.3183098733425140380859375) * _2602) * _2603) + _2370;
    }
    uint _2418 = _2279 + 8u;
    float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2279].w)) * _1018) * 0.949999988079071044921875);
    float _2432 = _2431 * _2431;
    float _2433 = cbLight._m0[_2279].x + _1094;
    float _2434 = cbLight._m0[_2279].y + _1095;
    float _2435 = cbLight._m0[_2279].z + _1096;
    float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
    float _2440 = _2439 * _2433;
    float _2441 = _2439 * _2434;
    float _2442 = _2439 * _2435;
    float _2443 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2279].xyz));
    float _4682 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _4693 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _2447 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _2448 = dot(vec3(_1015, _1016, _1017), vec3(_2440, _2441, _2442));
    float _4704 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2452 = dot(vec3(cbLight._m0[_2279].xyz), vec3(_2440, _2441, _2442));
    float _4715 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2456 = _2432 * _2432;
    float _2460 = ((_2451 * _2451) * (_2456 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0)))) * 5.0);
    float _2469 = 0.959999978542327880859375 - _1173;
    float _2471 = 0.959999978542327880859375 - _1174;
    float _2472 = 0.959999978542327880859375 - _1175;
    float _2479 = 1.0 - _2432;
    float _2490 = (0.5 / (((_2447 * ((_2446 * _2479) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2479) + _2432) * _2446))) * _2446;
    float _4726 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
    float _2492 = (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2456 / ((_2460 * _2460) * 3.141590118408203125));
    uint _2506 = _2279 + 9u;
    float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2319].w)) * _1018) * 0.949999988079071044921875);
    float _2518 = _2517 * _2517;
    float _2519 = cbLight._m0[_2319].x + _1094;
    float _2520 = cbLight._m0[_2319].y + _1095;
    float _2521 = cbLight._m0[_2319].z + _1096;
    float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
    float _2526 = _2525 * _2519;
    float _2527 = _2525 * _2520;
    float _2528 = _2525 * _2521;
    float _2529 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2319].xyz));
    float _4737 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2533 = dot(vec3(_1015, _1016, _1017), vec3(_2526, _2527, _2528));
    float _4748 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2536 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2537 = dot(vec3(cbLight._m0[_2319].xyz), vec3(_2526, _2527, _2528));
    float _4759 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
    float _2541 = _2518 * _2518;
    float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
    float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) * 5.0);
    float _2559 = 1.0 - _2518;
    float _2569 = (0.5 / (((_2447 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2559) + _2518) * _2532))) * _2532;
    float _4770 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2571 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
    float _2581 = (((((_2552 * _2469) + _1176) * cbLight._m0[_2506].x) * _2571) * _2302) + ((((cbLight._m0[_2418].x * _2271) * ((_2468 * _2469) + _1176)) * _2492) * _2315);
    float _2582 = (((((_2552 * _2471) + _1178) * cbLight._m0[_2506].y) * _2571) * _2302) + ((((cbLight._m0[_2418].y * _2272) * ((_2468 * _2471) + _1178)) * _2492) * _2315);
    float _2583 = (((((_2552 * _2472) + _1179) * cbLight._m0[_2506].z) * _2571) * _2302) + ((((cbLight._m0[_2418].z * _2273) * ((_2468 * _2472) + _1179)) * _2492) * _2315);
    float _2645;
    float _2647;
    float _2649;
    if (_2355)
    {
        _2645 = _2581;
        _2647 = _2582;
        _2649 = _2583;
    }
    else
    {
        uint _2651 = _2279 + 2u;
        uint _2655 = _2279 + 10u;
        float _2669 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2651].w)) * _1018) * 0.949999988079071044921875);
        float _2670 = _2669 * _2669;
        float _2671 = cbLight._m0[_2651].x + _1094;
        float _2672 = cbLight._m0[_2651].y + _1095;
        float _2673 = cbLight._m0[_2651].z + _1096;
        float _2677 = inversesqrt(dot(vec3(_2671, _2672, _2673), vec3(_2671, _2672, _2673)));
        float _2678 = _2677 * _2671;
        float _2679 = _2677 * _2672;
        float _2680 = _2677 * _2673;
        float _2681 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2651].xyz));
        float _4781 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2685 = dot(vec3(_1015, _1016, _1017), vec3(_2678, _2679, _2680));
        float _4792 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2688 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2689 = dot(vec3(cbLight._m0[_2651].xyz), vec3(_2678, _2679, _2680));
        float _4803 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2693 = _2670 * _2670;
        float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
        float _2704 = exp2(log2(1.0 - (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) * 5.0);
        float _2711 = 1.0 - _2670;
        float _2721 = (0.5 / (((_2447 * ((_2684 * _2711) + _2670)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2711) + _2670) * _2684))) * _2684;
        float _4814 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2723 = (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
        float _2724 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
        _2645 = (((((_2704 * _2469) + _1176) * cbLight._m0[_2655].x) * _2723) * _2724) + _2581;
        _2647 = (((((_2704 * _2471) + _1178) * cbLight._m0[_2655].y) * _2723) * _2724) + _2582;
        _2649 = (((((_2704 * _2472) + _1179) * cbLight._m0[_2655].z) * _2723) * _2724) + _2583;
    }
    float _2759;
    float _2761;
    float _2763;
    if (_2373)
    {
        _2759 = _2645;
        _2761 = _2647;
        _2763 = _2649;
    }
    else
    {
        uint _2770 = _2279 + 3u;
        uint _2774 = _2279 + 11u;
        float _2788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2770].w)) * _1018) * 0.949999988079071044921875);
        float _2789 = _2788 * _2788;
        float _2790 = cbLight._m0[_2770].x + _1094;
        float _2791 = cbLight._m0[_2770].y + _1095;
        float _2792 = cbLight._m0[_2770].z + _1096;
        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
        float _2797 = _2796 * _2790;
        float _2798 = _2796 * _2791;
        float _2799 = _2796 * _2792;
        float _2800 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2770].xyz));
        float _4830 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2804 = dot(vec3(_1015, _1016, _1017), vec3(_2797, _2798, _2799));
        float _4841 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2808 = dot(vec3(cbLight._m0[_2770].xyz), vec3(_2797, _2798, _2799));
        float _4852 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2812 = _2789 * _2789;
        float _2816 = ((_2807 * _2807) * (_2812 + (-1.0))) + 1.0;
        float _2823 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2830 = 1.0 - _2789;
        float _2840 = (0.5 / (((_2447 * ((_2803 * _2830) + _2789)) + 9.9999999392252902907785028219223e-09) + (((_2447 * _2830) + _2789) * _2803))) * _2803;
        float _4863 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2842 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2812 / ((_2816 * _2816) * 3.141590118408203125));
        float _2843 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2759 = (((((_2823 * _2469) + _1176) * cbLight._m0[_2774].x) * _2842) * _2843) + _2645;
        _2761 = (((((_2823 * _2471) + _1178) * cbLight._m0[_2774].y) * _2842) * _2843) + _2647;
        _2763 = (((((_2823 * _2472) + _1179) * cbLight._m0[_2774].z) * _2842) * _2843) + _2649;
    }
    float _2978;
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    if (_2277.y == 0u)
    {
        float _2918 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2918;
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2918;
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2918;
        uvec4 _2933 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2934 = _2933.x;
        uint _2945 = uint((float(_2933.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1115) / _2934))) + floor(float(uint(cbSceneParam._m0[85u].x * _1114) / _2934)));
        float _2955 = (log2(_2921 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2956 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        uint _2959 = uint(isnan(14.0) ? _2956 : (isnan(_2956) ? 14.0 : min(_2956, 14.0)));
        uvec4 _2964 = texelFetch(g_lightClusterGridBuffer, int(((_2959 << 2u) + (_2945 << 6u)) >> 2u));
        uint _2965 = _2964.x;
        uint _2966 = _2933.z;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((((1u << ((_2966 >> 4u) & 15u)) + 4294967295u) & _2965) == 0u) || ((_2966 & 240u) == 0u))
        {
            _3066 = 0.0;
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
        }
        else
        {
            float _3067;
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3219 = 0.0;
            float _3220 = 0.0;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            uint _3225 = 0u;
            uint _3234;
            bool _3235;
            for (;;)
            {
                _3234 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3225 << 2u)) >> 2u)).x;
                _3235 = _3234 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3235)
                {
                    frontier_phi_66_pred = _3219;
                    frontier_phi_66_pred_1 = _3224;
                    frontier_phi_66_pred_2 = _3223;
                    frontier_phi_66_pred_3 = _3222;
                    frontier_phi_66_pred_4 = _3221;
                    frontier_phi_66_pred_5 = _3220;
                }
                else
                {
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    uint _3370;
                    _3364 = _3219;
                    _3365 = _3220;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3234;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    for (;;)
                    {
                        uint _3374 = uint(findLSB(_3370)) + (_3225 << 5u);
                        uint _3371 = (_3370 + 4294967295u) & _3370;
                        uint _3376 = _3374 * 48u;
                        vec4 _3390 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3396 = (_3374 * 48u) + 4u;
                        vec4 _3409 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3415 = (_3374 * 48u) + 8u;
                        vec3 _3426 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x));
                        float _3430 = _3390.x - _2919;
                        float _3431 = _3390.y - _2920;
                        float _3432 = _3390.z - _2921;
                        float _3433 = dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432));
                        float _3436 = inversesqrt(_3433);
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3440 = dot(vec3(_1133, _1136, _1139), vec3(_3437, _3438, _3439));
                        float _3445 = 1.0 - (_3433 * _3390.w);
                        float _4889 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                        float _3447 = sqrt(_3433) * _3409.w;
                        float _3450 = 1.39999997615814208984375 / (_3447 + 1.39999997615814208984375);
                        float _3451 = _3450 * _3450;
                        float _3454 = ((1.0 - _3451) * _3440) + _3451;
                        float _3457 = _3447 * _3447;
                        float _3461 = ((isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0))) * _3446) / ((_3457 * 0.699999988079071044921875) + 1.0);
                        float _3465 = (-0.0) - _2919;
                        float _3466 = (-0.0) - _2920;
                        float _3467 = (-0.0) - _2921;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3472 = _3471 * _3465;
                        float _3473 = _3471 * _3466;
                        float _3474 = _3471 * _3467;
                        float _3482 = exp2(log2(1.0 / ((_3457 * 3.5) + 5.0)) * 0.25);
                        float _3483 = 1.0 - _1208;
                        float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                        float _3491 = _3490 * _3490;
                        float _3492 = _3491 * _3491;
                        float _3493 = _3472 + _3437;
                        float _3494 = _3473 + _3438;
                        float _3495 = _3474 + _3439;
                        float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                        float _3503 = dot(vec3(_1133, _1136, _1139), vec3(_3472, _3473, _3474));
                        float _4905 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3506 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3507 = dot(vec3(_1133, _1136, _1139), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                        float _4916 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3510 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                        float _3515 = _3450 * _3491;
                        float _3516 = _3515 * _3515;
                        float _3519 = ((1.0 - _3516) * _3440) + _3516;
                        float _4927 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                        float _3520 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3521 = 1.0 - _3491;
                        float _3531 = (0.5 / (((_3520 * ((_3506 * _3521) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3520 * _3521) + _3491) * _3506))) * _3520;
                        float _4938 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3542 = (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0)))) / ((_3514 * _3514) * ((_3457 * 2.1991131305694580078125) + 3.141590118408203125))) * _3446;
                        _3294 = (_3461 * _3409.x) + _3367;
                        _3295 = (_3461 * _3409.y) + _3368;
                        _3296 = (_3461 * _3409.z) + _3369;
                        _3291 = (_3542 * _3426.x) + _3364;
                        _3292 = (_3542 * _3426.y) + _3365;
                        _3293 = (_3542 * _3426.z) + _3366;
                        if (_3371 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3364 = _3291;
                            _3365 = _3292;
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3371;
                        }
                    }
                    frontier_phi_66_pred = _3291;
                    frontier_phi_66_pred_1 = _3296;
                    frontier_phi_66_pred_2 = _3295;
                    frontier_phi_66_pred_3 = _3294;
                    frontier_phi_66_pred_4 = _3293;
                    frontier_phi_66_pred_5 = _3292;
                }
                _3067 = frontier_phi_66_pred;
                _3077 = frontier_phi_66_pred_1;
                _3075 = frontier_phi_66_pred_2;
                _3073 = frontier_phi_66_pred_3;
                _3071 = frontier_phi_66_pred_4;
                _3069 = frontier_phi_66_pred_5;
                uint _3226 = _3225 + 1u;
                if (_3226 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3219 = _3067;
                    _3220 = _3069;
                    _3221 = _3071;
                    _3222 = _3073;
                    _3223 = _3075;
                    _3224 = _3077;
                    _3225 = _3226;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3066 = _3067;
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
        }
        uvec4 _3080 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3081 = _3080.z;
        uint _3083 = (_3081 >> 8u) & 15u;
        float _3187;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        if (((4294967295u << _3083) & _2965) == 0u)
        {
            _3187 = _3066;
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
        }
        else
        {
            float _3212 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
            float _3213 = _3212 * _2919;
            float _3214 = _3212 * _2920;
            float _3215 = _3212 * _2921;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3083 < ((_3081 >> 12u) & 15u))
            {
                float _3188;
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3347 = _3066;
                float _3348 = _3068;
                float _3349 = _3070;
                float _3350 = _3072;
                float _3351 = _3074;
                float _3352 = _3076;
                uint _3353 = _3083;
                uint _3362;
                bool _3363;
                for (;;)
                {
                    _3362 = texelFetch(g_lightClassification, int((((_2959 << 5u) + (_2945 << 9u)) + (_3353 << 2u)) >> 2u)).x;
                    _3363 = _3362 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3363)
                    {
                        frontier_phi_77_pred = _3352;
                        frontier_phi_77_pred_1 = _3351;
                        frontier_phi_77_pred_2 = _3350;
                        frontier_phi_77_pred_3 = _3349;
                        frontier_phi_77_pred_4 = _3348;
                        frontier_phi_77_pred_5 = _3347;
                    }
                    else
                    {
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3569 = _3347;
                        float _3570 = _3348;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        uint _3575 = _3362;
                        uint _3576;
                        vec4 _3601;
                        float _3602;
                        vec4 _3617;
                        vec3 _3629;
                        vec4 _3644;
                        vec4 _3659;
                        float _3705;
                        bool _3706;
                        for (;;)
                        {
                            uint _3586 = ((_3353 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3575));
                            _3576 = (_3575 + 4294967295u) & _3575;
                            uint _3588 = _3586 * 40u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3602 = _3601.w;
                            uint _3604 = (_3586 * 40u) + 4u;
                            _3617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 3u)).x));
                            uint _3619 = (_3586 * 40u) + 8u;
                            _3629 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x));
                            uint _3631 = (_3586 * 40u) + 16u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3586 * 40u) + 20u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3586 * 40u) + 24u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3680 = (_3586 * 40u) + 28u;
                            vec4 _3693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 3u)).x));
                            _3705 = fma(_2921, _3693.z, fma(_2920, _3693.y, _3693.x * _2919)) + _3693.w;
                            _3706 = !((fma(_2921, _3674.z, fma(_2920, _3674.y, _3674.x * _2919)) + _3674.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3706)
                            {
                                float _3733 = _3601.x - _2919;
                                float _3734 = _3601.y - _2920;
                                float _3735 = _3601.z - _2921;
                                float _3736 = dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735));
                                float _3739 = inversesqrt(_3736);
                                float _3740 = _3739 * _3733;
                                float _3741 = _3739 * _3734;
                                float _3742 = _3739 * _3735;
                                float _3746 = 1.0 - (_3736 / (_3602 * _3602));
                                float _4949 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                                float _3751 = sqrt(_3736) * _3617.w;
                                float _3753 = 1.39999997615814208984375 / (_3751 + 1.39999997615814208984375);
                                float _3754 = _3753 * _3753;
                                float _3757 = ((1.0 - _3754) * dot(vec3(_3740, _3741, _3742), vec3(_1133, _1136, _1139))) + _3754;
                                float _3760 = _3751 * _3751;
                                float _3764 = (fma(_2921, _3644.z, fma(_2920, _3644.y, _3644.x * _2919)) + _3644.w) / _3705;
                                float _3765 = (fma(_2921, _3659.z, fma(_2920, _3659.y, _3659.x * _2919)) + _3659.w) / _3705;
                                float _3769 = 1.0 - dot(vec2(_3764, _3765), vec2(_3764, _3765));
                                float _4965 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3771 = _3770 * (((isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0))) * _3747) / ((_3760 * 0.699999988079071044921875) + 1.0));
                                float _3783 = exp2(log2(1.0 / ((_3760 * 3.5) + 5.0)) * 0.25);
                                float _3784 = 1.0 - _1208;
                                float _3791 = sqrt(1.0 - ((1.0 - (_3784 * _3784)) * (1.0 - (_3783 * _3783))));
                                float _3792 = _3791 * _3791;
                                float _3793 = _3792 * _3792;
                                float _3794 = _3740 - _3213;
                                float _3795 = _3741 - _3214;
                                float _3796 = _3742 - _3215;
                                float _3800 = inversesqrt(dot(vec3(_3794, _3795, _3796), vec3(_3794, _3795, _3796)));
                                float _3804 = dot(vec3(_1133, _1136, _1139), vec3((-0.0) - _3213, (-0.0) - _3214, (-0.0) - _3215));
                                float _4976 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3807 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3808 = dot(vec3(_1133, _1136, _1139), vec3(_3800 * _3794, _3800 * _3795, _3800 * _3796));
                                float _4987 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3811 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3815 = ((_3811 * _3811) * (_3793 + (-1.0))) + 1.0;
                                float _3816 = _3753 * _3792;
                                float _3817 = _3816 * _3816;
                                float _3823 = ((1.0 - _3817) * dot(vec3(_1133, _1136, _1139), vec3(_3740, _3741, _3742))) + _3817;
                                float _4998 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3825 = 1.0 - _3792;
                                float _3835 = (0.5 / (((_3824 * ((_3807 * _3825) + _3792)) + 9.9999999392252902907785028219223e-09) + (((_3824 * _3825) + _3792) * _3807))) * _3824;
                                float _5009 = isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0));
                                float _3845 = (_3770 * _3747) * (((_3793 * 3.1415927410125732421875) * (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) / ((_3815 * _3815) * ((_3760 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3771 * _3617.y;
                                frontier_phi_83_pred_1 = _3771 * _3617.x;
                                frontier_phi_83_pred_2 = _3845 * _3629.z;
                                frontier_phi_83_pred_3 = _3845 * _3629.y;
                                frontier_phi_83_pred_4 = _3845 * _3629.x;
                                frontier_phi_83_pred_5 = _3771 * _3617.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3853 = frontier_phi_83_pred;
                            _3852 = frontier_phi_83_pred_1;
                            _3851 = frontier_phi_83_pred_2;
                            _3850 = frontier_phi_83_pred_3;
                            _3849 = frontier_phi_83_pred_4;
                            _3854 = frontier_phi_83_pred_5;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            _3561 = _3854 + _3574;
                            _3556 = _3849 + _3569;
                            _3557 = _3850 + _3570;
                            _3558 = _3851 + _3571;
                            if (_3576 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3569 = _3556;
                                _3570 = _3557;
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3576;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3561;
                        frontier_phi_77_pred_1 = _3560;
                        frontier_phi_77_pred_2 = _3559;
                        frontier_phi_77_pred_3 = _3558;
                        frontier_phi_77_pred_4 = _3557;
                        frontier_phi_77_pred_5 = _3556;
                    }
                    _3198 = frontier_phi_77_pred;
                    _3196 = frontier_phi_77_pred_1;
                    _3194 = frontier_phi_77_pred_2;
                    _3192 = frontier_phi_77_pred_3;
                    _3190 = frontier_phi_77_pred_4;
                    _3188 = frontier_phi_77_pred_5;
                    uint _3354 = _3353 + 1u;
                    if (_3354 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3347 = _3188;
                        _3348 = _3190;
                        _3349 = _3192;
                        _3350 = _3194;
                        _3351 = _3196;
                        _3352 = _3198;
                        _3353 = _3354;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3192;
                frontier_phi_58_59_ladder_1 = _3198;
                frontier_phi_58_59_ladder_2 = _3196;
                frontier_phi_58_59_ladder_3 = _3194;
                frontier_phi_58_59_ladder_4 = _3190;
                frontier_phi_58_59_ladder_5 = _3188;
            }
            else
            {
                frontier_phi_58_59_ladder = _3070;
                frontier_phi_58_59_ladder_1 = _3076;
                frontier_phi_58_59_ladder_2 = _3074;
                frontier_phi_58_59_ladder_3 = _3072;
                frontier_phi_58_59_ladder_4 = _3068;
                frontier_phi_58_59_ladder_5 = _3066;
            }
            _3187 = frontier_phi_58_59_ladder_5;
            _3189 = frontier_phi_58_59_ladder_4;
            _3191 = frontier_phi_58_59_ladder;
            _3193 = frontier_phi_58_59_ladder_3;
            _3195 = frontier_phi_58_59_ladder_2;
            _3197 = frontier_phi_58_59_ladder_1;
        }
        float _3202 = isnan(1.0) ? _1192 : (isnan(_1192) ? 1.0 : min(_1192, 1.0));
        _2978 = (_3202 * _3193) + _2411;
        _2980 = (_3202 * _3195) + _2413;
        _2982 = (_3202 * _3197) + _2415;
        _2984 = ((_3187 * _1176) * _3202) + _2759;
        _2986 = ((_3189 * _1178) * _3202) + _2761;
        _2988 = ((_3191 * _1179) * _3202) + _2763;
    }
    else
    {
        _2978 = _2411;
        _2980 = _2413;
        _2982 = _2415;
        _2984 = _2759;
        _2986 = _2761;
        _2988 = _2763;
    }
    float _5025 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _5036 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _5047 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _3005 = ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2978 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1192))) + ((_2984 + ((isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    float _3006 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_2980 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1192))) + ((_2986 + ((isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    float _3007 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2982 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1192))) + ((_2988 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    uint _3008 = _297 + 6u;
    float _3016 = _1114 / cbSceneParam._m0[86u].x;
    float _3017 = _1115 / cbSceneParam._m0[86u].y;
    vec4 _3031 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, (log2((isnan(cbSceneParam._m0[77u].w) ? _1037 : (isnan(_1037) ? cbSceneParam._m0[77u].w : min(_1037, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3033 = _3031.x;
    float _3034 = _3031.y;
    float _3035 = _3031.z;
    float _3036 = _3031.w;
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    if (_1037 > cbSceneParam._m0[78u].w)
    {
        float _3091 = isnan(_1037) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1037 : min(cbSceneParam._m0[80u].w, _1037));
        float _3092 = _3091 / _1037;
        float _3103 = _3092 * _1087;
        float _3104 = _1088 * _3092;
        float _3105 = (-0.0) - _3104;
        float _3107 = _3092 * _1089;
        float _3109 = (cbSceneParam._m0[77u].w * _3105) / _3091;
        float _3110 = _3109 + cbSceneParam._m0[79u].w;
        float _3111 = cbSceneParam._m0[79u].w - _3104;
        float _3117 = sqrt(((_3103 * _3103) + (_3104 * _3104)) + (_3107 * _3107));
        float _3120 = (1.0 - (cbSceneParam._m0[77u].w / _3091)) * _3117;
        float _3125 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3127 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3304;
        if (abs((_3105 - _3109) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3304 = ((((_3110 > 0.0) ? exp2(_3125 * _3110) : (2.0 - exp2(_3127 * _3110))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3120;
        }
        else
        {
            float _3248 = 1.0 / cbSceneParam._m0[80u].x;
            float _3249 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : max(_3110, _3111));
            float _3250 = isnan(_3111) ? _3110 : (isnan(_3110) ? _3111 : min(_3110, _3111));
            float _3259 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : min(_3249, 0.0));
            float _3260 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : min(_3250, 0.0));
            _3304 = ((abs(_3117 / _3105) * cbSceneParam._m0[80u].y) * ((((_3259 - _3260) * 2.0) - ((exp2(_3125 * (isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0)))) - exp2(_3125 * (isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0))))) * _3248)) - ((exp2(_3127 * _3259) - exp2(_3127 * _3260)) * _3248))) + (_3120 * cbSceneParam._m0[80u].z);
        }
        vec4 _3306 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3016, _3017, 1.0), 0.0);
        float _3315 = exp2((_3304 * (-1.44269502162933349609375)) * (1.0 - _3306.w));
        float _3316 = log2(_3315);
        float _3332 = log2(_3036);
        _3129 = (exp2(_3332 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].x)) * _3306.x) / cbSceneParam._m0[78u].x)) + _3033;
        _3131 = (exp2(_3332 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].y)) * _3306.y) / cbSceneParam._m0[78u].y)) + _3034;
        _3133 = (exp2(_3332 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].z)) * _3306.z) / cbSceneParam._m0[78u].z)) + _3035;
        _3135 = _3315 * _3036;
    }
    else
    {
        _3129 = _3033;
        _3131 = _3034;
        _3133 = _3035;
        _3135 = _3036;
    }
    bool _3342;
    vec4 _3145;
    vec4 _3167;
    float _3169;
    float _3173;
    float _3174;
    float _3175;
    float _3176;
    bool _3186;
    for (;;)
    {
        _3145 = cbMatDynParam._m0[0u];
        float _3147 = roundEven(_3145.y);
        bool _3148 = _3147 == 3.0;
        float _3149 = log2(_3135);
        float _3156 = exp2(_3149 * cbSceneParam._m0[78u].x) * _3005;
        float _3157 = exp2(_3149 * cbSceneParam._m0[78u].y) * _3006;
        float _3158 = exp2(_3149 * cbSceneParam._m0[78u].z) * _3007;
        float _3165 = _1103 + (-0.5);
        _3167 = cbMtdParam._m0[1u];
        _3169 = _3167.y * _3165;
        float _3172 = (_3147 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3173 = _3172 * (_3148 ? _3156 : (_3156 + (cbSceneParam._m0[72u].w * _3129)));
        _3174 = _3172 * (_3148 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
        _3175 = _3172 * (_3148 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
        _3176 = _3165 * 0.999000012874603271484375;
        _3186 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3186)
        {
            if ((cbInstanceData._m0[_297 + 7u].x + _3176) < 0.5)
            {
                _3342 = true;
                break;
            }
        }
        uint _3283 = _1152 + uint(_3145.w);
        if ((cbInstanceData._m0[_3283].w < 1.0) && ((cbInstanceData._m0[_3283].w + _3176) < 0.5))
        {
            _3342 = true;
            break;
        }
        if ((_3169 + 1.0) < _3167.x)
        {
            _3342 = true;
            break;
        }
        _3342 = false;
        break;
    }
    float _3547;
    if (_3342)
    {
        discard_state = true;
        _3547 = 0.0;
    }
    else
    {
        _3547 = cbInstanceData._m0[_3008].w;
    }
    SV_Target.x = _3173;
    SV_Target.y = _3174;
    SV_Target.z = _3175;
    SV_Target.w = _3547;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3008].w;
    discard_exit();
}


