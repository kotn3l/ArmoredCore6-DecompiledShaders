#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1427;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3752 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3763 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3774 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3785 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _453 = (_446 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _454 = (_446 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _455 = (_446 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _459 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _453;
    float _462 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _454;
    float _465 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _455;
    float _472 = ((_453 - _459) * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) + _459;
    float _473 = ((_454 - _462) * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) + _462;
    float _474 = ((_455 - _465) * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) + _465;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _568 = ((_538.z - _559) * _446) + _559;
    float _571 = ((((_538.x - _557) * _446) + _557) * 2.0) + (-1.0);
    float _572 = ((((_538.y - _558) * _446) + _558) * 2.0) + (-1.0);
    float _573 = dot(vec2(_571, _572), vec2(_571, _572));
    float _3796 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _578 = sqrt(1.0 - (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _621 = _619.x;
    float _622 = 1.0 - _621;
    float _631 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _634 = ((isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : min(_631, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _643 = (_634 - ((((((_621 - _622) * cbMtdParam._m0[24u].z) + _622) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _634))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3817 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _644 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _651 = (_644 * ((_493.x * cbMtdParam._m0[18u].x) - _472)) + _472;
    float _652 = (_644 * ((_493.y * cbMtdParam._m0[18u].y) - _473)) + _473;
    float _653 = (_644 * ((_493.z * cbMtdParam._m0[18u].z) - _474)) + _474;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _693 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_667 - _668) * cbMtdParam._m0[24u].w) + _668) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3828 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _694 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _702 = ((((cbMtdParam._m0[10u].x - _651) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _694) + _651;
    float _703 = ((((cbMtdParam._m0[10u].y - _652) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _694) + _652;
    float _704 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _653)) * _694) + _653;
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _732 = _730.x;
    float _750 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _732) * _446) + _732;
    float _754 = ((_716.x - _750) * cbMtdParam._m0[19u].z) + _750;
    float _756 = _754 - (_754 * _644);
    float _758 = _756 - (_756 * _694);
    float _763 = (((_513.z - _568) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _568;
    float _767 = ((_594.z - _763) * cbMtdParam._m0[19u].w) + _763;
    vec4 _781 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _788 = (_781.x * 2.0) + (-1.0);
    float _789 = (_781.y * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _3839 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _798 = (_644 * (_781.z - _767)) + _767;
    float _801 = ((cbMtdParam._m0[23u].x - _798) * _694) + _798;
    vec4 _820 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _826 = (_820.x * 2.0) + (-1.0);
    float _827 = (_820.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _3850 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _842 = (_571 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_513.x * 2.0) + (-1.0)))) + (((_594.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _843 = (_572 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_513.y * 2.0) + (-1.0)))) + (((_594.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _855 = (((_788 - _842) + (cbMtdParam._m0[21u].x * _842)) * _644) + _842;
    float _856 = (((_789 - _843) + (cbMtdParam._m0[21u].x * _843)) * _644) + _843;
    float _857 = (_644 * (sqrt(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) - _578)) + _578;
    float _868 = (((_826 - _855) + (_855 * cbMtdParam._m0[22u].z)) * _694) + _855;
    float _869 = (((_827 - _856) + (_856 * cbMtdParam._m0[22u].z)) * _694) + _856;
    float _870 = ((sqrt(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) - _857) * _694) + _857;
    float _874 = cbMtdParam._m0[22u].x + _594.w;
    float _877 = fma(_870, _251 * NORMAL.x, fma(_869, _258 * TANGENT.x, (_244 * _236) * _868));
    float _880 = fma(_870, _251 * NORMAL.y, fma(_869, _258 * TANGENT.y, (_244 * _237) * _868));
    float _883 = fma(_870, _251 * NORMAL.z, fma(_869, _258 * TANGENT.z, (_244 * _238) * _868));
    float _887 = inversesqrt(dot(vec3(_877, _880, _883), vec3(_877, _880, _883)));
    float _888 = _887 * _877;
    float _889 = _887 * _880;
    float _890 = _887 * _883;
    float _3861 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _891 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _3872 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _3883 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _3894 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _3905 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _3916 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _896 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _910 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _960 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _950);
    float _961 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _950);
    float _962 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _950);
    float _966 = inversesqrt(dot(vec3(_960, _961, _962), vec3(_960, _961, _962)));
    float _967 = _960 * _966;
    float _968 = _961 * _966;
    float _969 = _962 * _966;
    float _975 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _976 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _994 = fma(_890, cbSceneParam._m0[5u].z, fma(_889, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _888));
    float _997 = fma(_890, cbSceneParam._m0[6u].z, fma(_889, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _888));
    float _1000 = fma(_890, cbSceneParam._m0[7u].z, fma(_889, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _888));
    uint _1014 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1020 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) * cbInstanceData._m0[_1014].x;
    float _1021 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * cbInstanceData._m0[_1014].y;
    float _1022 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)))) * cbInstanceData._m0[_1014].z;
    float _3927 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _3938 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _1024 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _3949 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _1025 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _1026 = 1.0 - _896;
    float _1027 = _1023 * _1026;
    float _1028 = _1024 * _1026;
    float _1029 = _1025 * _1026;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _896;
    float _1035 = (_1024 + (-0.039999999105930328369140625)) * _896;
    float _1036 = (_1025 + (-0.039999999105930328369140625)) * _896;
    float _1037 = _1034 + 0.039999999105930328369140625;
    float _1039 = _1035 + 0.039999999105930328369140625;
    float _1040 = _1036 + 0.039999999105930328369140625;
    vec4 _1049 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _975, cbSceneParam._m0[86u].y * _976));
    float _1053 = ((isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * TEXCOORD_5.w) * _1049.x;
    float _1054 = dot(vec3(_888, _889, _890), vec3(_967, _968, _969));
    float _1057 = _1054 * 2.0;
    float _1061 = (_1057 * _888) - _967;
    float _1062 = (_1057 * _889) - _968;
    float _1063 = (_1057 * _890) - _969;
    float _1067 = abs(dot(vec3(_967, _968, _969), vec3(_888, _889, _890)));
    float _3960 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1069 = sqrt(_891);
    float _1082 = exp2((_1069 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1069 * 3.0));
    float _1088 = (1.0 - _1082) * ((_1069 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1089 = _1082 * _1069;
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1426;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1151 = fma(_1125, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117));
        float _1155 = fma(_1125, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117));
        float _1159 = fma(_1125, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117));
        float _1184 = _1117 + _888;
        float _1185 = _1121 + _889;
        float _1186 = _1125 + _890;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1151;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1155;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1159;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1151 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1155 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1159 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1227 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1234 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1254 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1220.x + (-0.5));
        float _1256 = _1254 * (_1220.y + (-0.5));
        float _1257 = _1254 * (_1220.z + (-0.5));
        float _1264 = exp2((_1227.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1227.x + (-0.5));
        float _1266 = _1264 * (_1227.y + (-0.5));
        float _1267 = _1264 * (_1227.z + (-0.5));
        float _1274 = exp2((_1234.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1234.x + (-0.5));
        float _1276 = _1274 * (_1234.y + (-0.5));
        float _1277 = _1274 * (_1234.z + (-0.5));
        float _1284 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1241.x + (-0.5));
        float _1286 = _1284 * (_1241.y + (-0.5));
        float _1287 = _1284 * (_1241.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1308 = (dot(vec3(_888, _889, _890), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3986 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1318 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3997 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _1320 = _1319 * 2.0;
        float _1324 = (1.0 - _1319) / (_1319 + 1.0);
        float _4008 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1334 = ((((1.0 - _1325) * (_1320 + 2.0)) * exp2(log2(isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_1320 + 1.0))) + _1325) * _1288;
        float _1335 = _1256 * 0.5;
        float _1336 = _1266 * 0.5;
        float _1337 = _1276 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_888, _889, _890), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4041 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1362 + 1.0))) + _1367) * _1289;
        float _1377 = _1257 * 0.5;
        float _1378 = _1267 * 0.5;
        float _1379 = _1277 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_888, _889, _890), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4074 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1404 + 1.0))) + _1409) * _1290;
        _1426 = _1257;
        _1428 = _1256;
        _1429 = _1255;
        _1430 = _1267;
        _1431 = _1266;
        _1432 = _1265;
        _1433 = _1277;
        _1434 = _1276;
        _1435 = _1275;
        _1436 = _1290;
        _1437 = _1289;
        _1438 = _1288;
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
    }
    else
    {
        _1426 = _1427;
        _1428 = _1427;
        _1429 = _1427;
        _1430 = _1427;
        _1431 = _1427;
        _1432 = _1427;
        _1433 = _1427;
        _1434 = _1427;
        _1435 = _1427;
        _1436 = _1427;
        _1437 = _1427;
        _1438 = _1427;
        _1439 = 0.0;
        _1440 = 0.0;
        _1441 = 0.0;
    }
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1466 = fma(_1125, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117));
        float _1470 = fma(_1125, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117));
        float _1474 = fma(_1125, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117));
        float _1497 = _1117 + _888;
        float _1498 = _1121 + _889;
        float _1499 = _1125 + _890;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1466;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1470;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1474;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1528 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1466 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1470 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1530 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1474 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        vec4 _1553 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1528, _1529, _1530), 0.0);
        float _1565 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1532.x + (-0.5));
        float _1567 = _1565 * (_1532.y + (-0.5));
        float _1568 = _1565 * (_1532.z + (-0.5));
        float _1575 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1539.x + (-0.5));
        float _1577 = _1575 * (_1539.y + (-0.5));
        float _1578 = _1575 * (_1539.z + (-0.5));
        float _1585 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1546.x + (-0.5));
        float _1587 = _1585 * (_1546.y + (-0.5));
        float _1588 = _1585 * (_1546.z + (-0.5));
        float _1595 = exp2((_1553.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1553.x + (-0.5));
        float _1597 = _1595 * (_1553.y + (-0.5));
        float _1598 = _1595 * (_1553.z + (-0.5));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1602 = _1566 * 0.5;
        float _1603 = _1576 * 0.5;
        float _1604 = _1586 * 0.5;
        float _1605 = dot(vec3(_1602, _1603, _1604), vec3(_1602, _1603, _1604));
        float _1610 = (_1605 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1605);
        float _1618 = (dot(vec3(_888, _889, _890), vec3(_1610 * _1602, _1610 * _1603, _1610 * _1604)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1627 = sqrt(((_1603 * _1603) + (_1602 * _1602)) + (_1604 * _1604)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1629 = _1628 * 2.0;
        float _1633 = (1.0 - _1628) / (_1628 + 1.0);
        float _4137 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1634 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1643 = ((((1.0 - _1634) * (_1629 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1629 + 1.0))) + _1634) * _1599;
        float _1644 = _1567 * 0.5;
        float _1645 = _1577 * 0.5;
        float _1646 = _1587 * 0.5;
        float _1647 = dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646));
        float _1652 = (_1647 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1647);
        float _1660 = (dot(vec3(_888, _889, _890), vec3(_1652 * _1644, _1652 * _1645, _1652 * _1646)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1669 = sqrt(((_1645 * _1645) + (_1644 * _1644)) + (_1646 * _1646)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1671 = _1670 * 2.0;
        float _1675 = (1.0 - _1670) / (_1670 + 1.0);
        float _4170 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1676 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1685 = ((((1.0 - _1676) * (_1671 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1671 + 1.0))) + _1676) * _1600;
        float _1686 = _1568 * 0.5;
        float _1687 = _1578 * 0.5;
        float _1688 = _1588 * 0.5;
        float _1689 = dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688));
        float _1694 = (_1689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1689);
        float _1702 = (dot(vec3(_888, _889, _890), vec3(_1694 * _1686, _1694 * _1687, _1694 * _1688)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1711 = sqrt(((_1687 * _1687) + (_1686 * _1686)) + (_1688 * _1688)) / (_1601 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1712 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1713 = _1712 * 2.0;
        float _1717 = (1.0 - _1712) / (_1712 + 1.0);
        float _4203 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1718 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1727 = ((((1.0 - _1718) * (_1713 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1713 + 1.0))) + _1718) * _1601;
        _1735 = _1568;
        _1736 = _1567;
        _1737 = _1566;
        _1738 = _1578;
        _1739 = _1577;
        _1740 = _1576;
        _1741 = _1588;
        _1742 = _1587;
        _1743 = _1586;
        _1744 = _1601;
        _1745 = _1600;
        _1746 = _1599;
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)));
        _1749 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)));
    }
    else
    {
        _1735 = _1427;
        _1736 = _1427;
        _1737 = _1427;
        _1738 = _1427;
        _1739 = _1427;
        _1740 = _1427;
        _1741 = _1427;
        _1742 = _1427;
        _1743 = _1427;
        _1744 = _1427;
        _1745 = _1427;
        _1746 = _1427;
        _1747 = 0.0;
        _1748 = 0.0;
        _1749 = 0.0;
    }
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1439)) + _1439;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1440)) + _1440;
    float _1761 = (cbModelParam._m0[1u].x * (_1749 - _1441)) + _1441;
    float _1782 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1759));
    float _1803 = _1061 * 0.5;
    float _1804 = _1062 * 0.5;
    float _1805 = _1063 * 0.5;
    float _1806 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1737, _1740, _1743, _1746));
    float _1809 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1812 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1846;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1819 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1426, _1430, _1433, _1436));
        float _1823 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1827 = dot(vec4(_1803, _1804, _1805, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1834 = dot(vec4(cbModelParam._m0[39u]), vec4(_1803, _1804, _1805, 1.0));
        _1846 = dot(vec3(isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)), isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1834) ? 0.0 : (isnan(0.0) ? _1834 : max(0.0, _1834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1846 = 1.0;
    }
    float _1857;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1848 = dot(vec4(cbModelParam._m0[40u]), vec4(_1803, _1804, _1805, 1.0));
        _1857 = dot(vec3(isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1848) ? 0.0 : (isnan(0.0) ? _1848 : max(0.0, _1848))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1857 = 1.0;
    }
    float _1861 = (_1857 * cbModelParam._m0[1u].x) + (_1846 * (1.0 - cbModelParam._m0[1u].x));
    float _1871 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _891);
    float _1872 = isnan(_1871) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1871 : min(cbModelParam._m0[25u].z, _1871));
    float _1952;
    float _1954;
    float _1956;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1919 = fma(_1125, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117)) + cbModelParam._m0[13u].w;
        float _1923 = fma(_1125, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117)) + cbModelParam._m0[14u].w;
        float _1927 = fma(_1125, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117)) + cbModelParam._m0[15u].w;
        float _1930 = fma(_1063, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1061));
        float _1933 = fma(_1063, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1061));
        float _1936 = fma(_1063, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1061));
        float _1964;
        if (_1930 > 0.0)
        {
            _1964 = abs((1.0 - _1919) / _1930);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1919 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1964 = frontier_phi_14_12_ladder;
        }
        float _2166;
        if (_1933 > 0.0)
        {
            _2166 = abs((1.0 - _1923) / _1933);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1923 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2166 = frontier_phi_23_19_ladder;
        }
        float _2420;
        if (_1936 > 0.0)
        {
            _2420 = abs((1.0 - _1927) / _1936);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1936 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1927 + 1.0) / _1936);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2420 = frontier_phi_35_30_ladder;
        }
        float _2422 = isnan(_2166) ? _1964 : (isnan(_1964) ? _2166 : min(_1964, _2166));
        float _2423 = isnan(_2420) ? _2422 : (isnan(_2422) ? _2420 : min(_2422, _2420));
        float _2427 = (_2423 * _1930) + _1919;
        float _2428 = (_2423 * _1933) + _1923;
        float _2429 = (_2423 * _1936) + _1927;
        float _2430 = _2423 * 9.9999997473787516355514526367188e-05;
        float _2432 = (-1.0) - _2430;
        float _2434 = _2430 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2429 > _2434) || ((_2429 < _2432) || ((_2428 > _2434) || ((_2428 < _2432) || ((_2427 < _2432) || (_2427 > _2434))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2557 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2429, cbModelParam._m0[9u].z, fma(_2428, cbModelParam._m0[9u].y, _2427 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2429, cbModelParam._m0[10u].z, fma(_2428, cbModelParam._m0[10u].y, _2427 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2429, cbModelParam._m0[11u].z, fma(_2428, cbModelParam._m0[11u].y, _2427 * cbModelParam._m0[11u].x))), _1872);
            frontier_phi_13_35_ladder = _2557.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2557.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2557.x * cbModelParam._m0[1u].y;
        }
        _1952 = frontier_phi_13_35_ladder_2;
        _1954 = frontier_phi_13_35_ladder_1;
        _1956 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1061, _1062, _1063), _1872);
        _1952 = _1940.x * cbModelParam._m0[1u].y;
        _1954 = _1940.y * cbModelParam._m0[1u].y;
        _1956 = _1940.z * cbModelParam._m0[1u].y;
    }
    float _1960 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _891);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1960 : min(cbModelParam._m0[25u].w, _1960));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1125, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1125, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1125, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1063, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1061));
        float _2028 = fma(_1063, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1061));
        float _2031 = fma(_1063, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1061));
        float _2171;
        if (_2025 > 0.0)
        {
            _2171 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2171 = frontier_phi_25_21_ladder;
        }
        float _2447;
        if (_2028 > 0.0)
        {
            _2447 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2447 = frontier_phi_37_32_ladder;
        }
        float _2660;
        if (_2031 > 0.0)
        {
            _2660 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2660 = frontier_phi_46_43_ladder;
        }
        float _2662 = isnan(_2447) ? _2171 : (isnan(_2171) ? _2447 : min(_2171, _2447));
        float _2663 = isnan(_2660) ? _2662 : (isnan(_2662) ? _2660 : min(_2662, _2660));
        float _2667 = (_2663 * _2025) + _2014;
        float _2668 = (_2663 * _2028) + _2018;
        float _2669 = (_2663 * _2031) + _2022;
        float _2670 = _2663 * 9.9999997473787516355514526367188e-05;
        float _2671 = (-1.0) - _2670;
        float _2673 = _2670 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2669 > _2673) || ((_2669 < _2671) || ((_2668 > _2673) || ((_2668 < _2671) || ((_2667 < _2671) || (_2667 > _2673))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2669, cbModelParam._m0[17u].z, fma(_2668, cbModelParam._m0[17u].y, _2667 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2669, cbModelParam._m0[18u].z, fma(_2668, cbModelParam._m0[18u].y, _2667 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2669, cbModelParam._m0[19u].z, fma(_2668, cbModelParam._m0[19u].y, _2667 * cbModelParam._m0[19u].x))), _1961);
            frontier_phi_22_46_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_22_46_ladder_2;
        _2052 = frontier_phi_22_46_ladder_1;
        _2054 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1061, _1062, _1063), _1961);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1088 * _1037) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2050 - _1952)) + _1952);
    float _2069 = (((_1088 * _1039) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2052 - _1954)) + _1954);
    float _2071 = (((_1088 * _1040) + _1089) * _1053) * ((cbModelParam._m0[1u].w * (_2054 - _1956)) + _1956);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    uvec4 _2090 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2092 = _2090.x * 14u;
    uint _2093 = _2092 + 13u;
    float _2100 = _1053 + (-1.0);
    float _2105 = (cbLight._m0[_2093].x * _2100) + 1.0;
    float _2106 = (cbLight._m0[_2093].y * _2100) + 1.0;
    float _2107 = (cbLight._m0[_2093].z * _2100) + 1.0;
    float _2108 = (cbLight._m0[_2093].w * _2100) + 1.0;
    uint _2109 = _2092 + 5u;
    float _2115 = isnan(1.0) ? _2106 : (isnan(_2106) ? 1.0 : min(_2106, 1.0));
    uint _2119 = _2092 + 4u;
    float _2125 = isnan(1.0) ? _2105 : (isnan(_2105) ? 1.0 : min(_2105, 1.0));
    uint _2129 = _2092 | 1u;
    float _2140 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_888, _889, _890));
    float _2143 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_888, _889, _890));
    float _4339 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _4350 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2148 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * 0.3183098733425140380859375;
    float _2150 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * 0.3183098733425140380859375;
    float _2157 = ((cbLight._m0[_2109].x * _2115) * _2150) + ((cbLight._m0[_2119].x * _2125) * _2148);
    float _2158 = ((_2115 * cbLight._m0[_2109].y) * _2150) + ((_2125 * cbLight._m0[_2119].y) * _2148);
    float _2159 = ((_2115 * cbLight._m0[_2109].z) * _2150) + ((_2125 * cbLight._m0[_2119].z) * _2148);
    uvec4 _2163 = floatBitsToUint(cbLight._m0[_2092 + 12u]);
    bool _2165 = _2163.x == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2165)
    {
        _2176 = _2157;
        _2178 = _2158;
        _2180 = _2159;
    }
    else
    {
        uint _2184 = _2092 + 6u;
        float _2200 = (dot(vec3(cbLight._m0[_2092 + 2u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2201 = _2200 * _2200;
        float _4361 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2202 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2203 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2176 = (((cbLight._m0[_2184].x * 0.3183098733425140380859375) * _2202) * _2203) + _2157;
        _2178 = (((cbLight._m0[_2184].y * 0.3183098733425140380859375) * _2202) * _2203) + _2158;
        _2180 = (((cbLight._m0[_2184].z * 0.3183098733425140380859375) * _2202) * _2203) + _2159;
    }
    bool _2183 = _2163.y == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2183)
    {
        _2221 = _2176;
        _2223 = _2178;
        _2225 = _2180;
    }
    else
    {
        uint _2391 = _2092 + 7u;
        float _2407 = (dot(vec3(cbLight._m0[_2092 + 3u].xyz), vec3(_888, _889, _890)) * 0.5) + 0.5;
        float _2408 = _2407 * _2407;
        float _4377 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2409 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2410 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2221 = (((cbLight._m0[_2391].x * 0.3183098733425140380859375) * _2409) * _2410) + _2176;
        _2223 = (((cbLight._m0[_2391].y * 0.3183098733425140380859375) * _2409) * _2410) + _2178;
        _2225 = (((cbLight._m0[_2391].z * 0.3183098733425140380859375) * _2409) * _2410) + _2180;
    }
    uint _2228 = _2092 + 8u;
    float _2241 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2092].w)) * _891) * 0.949999988079071044921875);
    float _2242 = _2241 * _2241;
    float _2243 = cbLight._m0[_2092].x + _967;
    float _2244 = cbLight._m0[_2092].y + _968;
    float _2245 = cbLight._m0[_2092].z + _969;
    float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
    float _2250 = _2249 * _2243;
    float _2251 = _2249 * _2244;
    float _2252 = _2249 * _2245;
    float _2253 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2092].xyz));
    float _4393 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2256 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
    float _4404 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _2257 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _2258 = dot(vec3(_888, _889, _890), vec3(_2250, _2251, _2252));
    float _4415 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _2262 = dot(vec3(cbLight._m0[_2092].xyz), vec3(_2250, _2251, _2252));
    float _4426 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2266 = _2242 * _2242;
    float _2270 = ((_2261 * _2261) * (_2266 + (-1.0))) + 1.0;
    float _2278 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
    float _2279 = 0.959999978542327880859375 - _1034;
    float _2281 = 0.959999978542327880859375 - _1035;
    float _2282 = 0.959999978542327880859375 - _1036;
    float _2289 = 1.0 - _2242;
    float _2300 = (0.5 / (((_2257 * ((_2256 * _2289) + _2242)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2289) + _2242) * _2256))) * _2256;
    float _4437 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2302 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2266 / ((_2270 * _2270) * 3.141590118408203125));
    uint _2313 = _2092 + 9u;
    float _2324 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2129].w)) * _891) * 0.949999988079071044921875);
    float _2325 = _2324 * _2324;
    float _2326 = cbLight._m0[_2129].x + _967;
    float _2327 = cbLight._m0[_2129].y + _968;
    float _2328 = cbLight._m0[_2129].z + _969;
    float _2332 = inversesqrt(dot(vec3(_2326, _2327, _2328), vec3(_2326, _2327, _2328)));
    float _2333 = _2332 * _2326;
    float _2334 = _2332 * _2327;
    float _2335 = _2332 * _2328;
    float _2336 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2129].xyz));
    float _4448 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
    float _2340 = dot(vec3(_888, _889, _890), vec3(_2333, _2334, _2335));
    float _4459 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2343 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
    float _2344 = dot(vec3(cbLight._m0[_2129].xyz), vec3(_2333, _2334, _2335));
    float _4470 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2348 = _2325 * _2325;
    float _2352 = ((_2343 * _2343) * (_2348 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0)))) * 5.0);
    float _2366 = 1.0 - _2325;
    float _2376 = (0.5 / (((_2257 * ((_2339 * _2366) + _2325)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2366) + _2325) * _2339))) * _2339;
    float _4481 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2378 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2348 / ((_2352 * _2352) * 3.141590118408203125));
    float _2388 = (((((_2359 * _2279) + _1037) * cbLight._m0[_2313].x) * _2378) * _2115) + (((((_2278 * _2279) + _1037) * cbLight._m0[_2228].x) * _2302) * _2125);
    float _2389 = (((((_2359 * _2281) + _1039) * cbLight._m0[_2313].y) * _2378) * _2115) + (((((_2278 * _2281) + _1039) * cbLight._m0[_2228].y) * _2302) * _2125);
    float _2390 = (((((_2359 * _2282) + _1040) * cbLight._m0[_2313].z) * _2378) * _2115) + (((((_2278 * _2282) + _1040) * cbLight._m0[_2228].z) * _2302) * _2125);
    float _2452;
    float _2454;
    float _2456;
    if (_2165)
    {
        _2452 = _2388;
        _2454 = _2389;
        _2456 = _2390;
    }
    else
    {
        uint _2458 = _2092 + 2u;
        uint _2462 = _2092 + 10u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _891) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _967;
        float _2479 = cbLight._m0[_2458].y + _968;
        float _2480 = cbLight._m0[_2458].z + _969;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2458].xyz));
        float _4492 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2492 = dot(vec3(_888, _889, _890), vec3(_2485, _2486, _2487));
        float _4503 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4514 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2257 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2518) + _2477) * _2491))) * _2491;
        float _4525 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _2107 : (isnan(_2107) ? 1.0 : min(_2107, 1.0));
        _2452 = (((((_2511 * _2279) + _1037) * cbLight._m0[_2462].x) * _2530) * _2531) + _2388;
        _2454 = (((((_2511 * _2281) + _1039) * cbLight._m0[_2462].y) * _2530) * _2531) + _2389;
        _2456 = (((((_2511 * _2282) + _1040) * cbLight._m0[_2462].z) * _2530) * _2531) + _2390;
    }
    float _2566;
    float _2568;
    float _2570;
    if (_2183)
    {
        _2566 = _2452;
        _2568 = _2454;
        _2570 = _2456;
    }
    else
    {
        uint _2577 = _2092 + 3u;
        uint _2581 = _2092 + 11u;
        float _2595 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2577].w)) * _891) * 0.949999988079071044921875);
        float _2596 = _2595 * _2595;
        float _2597 = cbLight._m0[_2577].x + _967;
        float _2598 = cbLight._m0[_2577].y + _968;
        float _2599 = cbLight._m0[_2577].z + _969;
        float _2603 = inversesqrt(dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599)));
        float _2604 = _2603 * _2597;
        float _2605 = _2603 * _2598;
        float _2606 = _2603 * _2599;
        float _2607 = dot(vec3(_888, _889, _890), vec3(cbLight._m0[_2577].xyz));
        float _4541 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2611 = dot(vec3(_888, _889, _890), vec3(_2604, _2605, _2606));
        float _4552 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2614 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2615 = dot(vec3(cbLight._m0[_2577].xyz), vec3(_2604, _2605, _2606));
        float _4563 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
        float _2619 = _2596 * _2596;
        float _2623 = ((_2614 * _2614) * (_2619 + (-1.0))) + 1.0;
        float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2637 = 1.0 - _2596;
        float _2647 = (0.5 / (((_2257 * ((_2610 * _2637) + _2596)) + 9.9999999392252902907785028219223e-09) + (((_2257 * _2637) + _2596) * _2610))) * _2610;
        float _4574 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2649 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2619 / ((_2623 * _2623) * 3.141590118408203125));
        float _2650 = isnan(1.0) ? _2108 : (isnan(_2108) ? 1.0 : min(_2108, 1.0));
        _2566 = (((((_2630 * _2279) + _1037) * cbLight._m0[_2581].x) * _2649) * _2650) + _2452;
        _2568 = (((((_2630 * _2281) + _1039) * cbLight._m0[_2581].y) * _2649) * _2650) + _2454;
        _2570 = (((((_2630 * _2282) + _1040) * cbLight._m0[_2581].z) * _2649) * _2650) + _2456;
    }
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    if (_2090.y == 0u)
    {
        float _2725 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2726 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2725;
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2725;
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2725;
        uvec4 _2740 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2741 = _2740.x;
        uint _2752 = uint((float(_2740.y) * floor(float(uint(cbSceneParam._m0[85u].y * _976) / _2741))) + floor(float(uint(cbSceneParam._m0[85u].x * _975) / _2741)));
        float _2762 = (log2(_2728 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2763 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        uint _2766 = uint(isnan(14.0) ? _2763 : (isnan(_2763) ? 14.0 : min(_2763, 14.0)));
        uvec4 _2771 = texelFetch(g_lightClusterGridBuffer, int(((_2766 << 2u) + (_2752 << 6u)) >> 2u));
        uint _2772 = _2771.x;
        uint _2773 = _2740.z;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        if (((((1u << ((_2773 >> 4u) & 15u)) + 4294967295u) & _2772) == 0u) || ((_2773 & 240u) == 0u))
        {
            _2873 = 0.0;
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
        }
        else
        {
            float _2874;
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _3018 = 0.0;
            float _3019 = 0.0;
            float _3020 = 0.0;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            uint _3024 = 0u;
            uint _3033;
            bool _3034;
            for (;;)
            {
                _3033 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3024 << 2u)) >> 2u)).x;
                _3034 = _3033 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3034)
                {
                    frontier_phi_61_pred = _3018;
                    frontier_phi_61_pred_1 = _3023;
                    frontier_phi_61_pred_2 = _3022;
                    frontier_phi_61_pred_3 = _3021;
                    frontier_phi_61_pred_4 = _3020;
                    frontier_phi_61_pred_5 = _3019;
                }
                else
                {
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    float _3146;
                    float _3147;
                    uint _3148;
                    _3142 = _3018;
                    _3143 = _3019;
                    _3144 = _3020;
                    _3145 = _3021;
                    _3146 = _3022;
                    _3147 = _3023;
                    _3148 = _3033;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3152 = uint(findLSB(_3148)) + (_3024 << 5u);
                        uint _3149 = (_3148 + 4294967295u) & _3148;
                        uint _3154 = _3152 * 48u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 3u)).x));
                        uint _3174 = (_3152 * 48u) + 4u;
                        vec4 _3187 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 3u)).x));
                        uint _3193 = (_3152 * 48u) + 8u;
                        vec3 _3204 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3193)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3193 + 2u)).x));
                        float _3208 = _3168.x - _2726;
                        float _3209 = _3168.y - _2727;
                        float _3210 = _3168.z - _2728;
                        float _3211 = dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210));
                        float _3214 = inversesqrt(_3211);
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3218 = dot(vec3(_994, _997, _1000), vec3(_3215, _3216, _3217));
                        float _3223 = 1.0 - (_3211 * _3168.w);
                        float _4600 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3225 = sqrt(_3211) * _3187.w;
                        float _3228 = 1.39999997615814208984375 / (_3225 + 1.39999997615814208984375);
                        float _3229 = _3228 * _3228;
                        float _3232 = ((1.0 - _3229) * _3218) + _3229;
                        float _3235 = _3225 * _3225;
                        float _3239 = ((isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0))) * _3224) / ((_3235 * 0.699999988079071044921875) + 1.0);
                        float _3243 = (-0.0) - _2726;
                        float _3244 = (-0.0) - _2727;
                        float _3245 = (-0.0) - _2728;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3260 = exp2(log2(1.0 / ((_3235 * 3.5) + 5.0)) * 0.25);
                        float _3261 = 1.0 - _1069;
                        float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                        float _3269 = _3268 * _3268;
                        float _3270 = _3269 * _3269;
                        float _3271 = _3250 + _3215;
                        float _3272 = _3251 + _3216;
                        float _3273 = _3252 + _3217;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3281 = dot(vec3(_994, _997, _1000), vec3(_3250, _3251, _3252));
                        float _4616 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3284 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3285 = dot(vec3(_994, _997, _1000), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                        float _4627 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                        float _3288 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
                        float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                        float _3293 = _3228 * _3269;
                        float _3294 = _3293 * _3293;
                        float _3297 = ((1.0 - _3294) * _3218) + _3294;
                        float _4638 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                        float _3298 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                        float _3299 = 1.0 - _3269;
                        float _3309 = (0.5 / (((_3298 * ((_3284 * _3299) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3298 * _3299) + _3269) * _3284))) * _3298;
                        float _4649 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3320 = (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) / ((_3292 * _3292) * ((_3235 * 2.1991131305694580078125) + 3.141590118408203125))) * _3224;
                        _3077 = (_3239 * _3187.x) + _3145;
                        _3078 = (_3239 * _3187.y) + _3146;
                        _3079 = (_3239 * _3187.z) + _3147;
                        _3074 = (_3320 * _3204.x) + _3142;
                        _3075 = (_3320 * _3204.y) + _3143;
                        _3076 = (_3320 * _3204.z) + _3144;
                        if (_3149 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3142 = _3074;
                            _3143 = _3075;
                            _3144 = _3076;
                            _3145 = _3077;
                            _3146 = _3078;
                            _3147 = _3079;
                            _3148 = _3149;
                        }
                    }
                    frontier_phi_61_pred = _3074;
                    frontier_phi_61_pred_1 = _3079;
                    frontier_phi_61_pred_2 = _3078;
                    frontier_phi_61_pred_3 = _3077;
                    frontier_phi_61_pred_4 = _3076;
                    frontier_phi_61_pred_5 = _3075;
                }
                _2874 = frontier_phi_61_pred;
                _2884 = frontier_phi_61_pred_1;
                _2882 = frontier_phi_61_pred_2;
                _2880 = frontier_phi_61_pred_3;
                _2878 = frontier_phi_61_pred_4;
                _2876 = frontier_phi_61_pred_5;
                uint _3025 = _3024 + 1u;
                if (_3025 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3018 = _2874;
                    _3019 = _2876;
                    _3020 = _2878;
                    _3021 = _2880;
                    _3022 = _2882;
                    _3023 = _2884;
                    _3024 = _3025;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2873 = _2874;
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
        }
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.z;
        uint _2890 = (_2888 >> 8u) & 15u;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        if (((4294967295u << _2890) & _2772) == 0u)
        {
            _2986 = _2873;
            _2988 = _2875;
            _2990 = _2877;
            _2992 = _2879;
            _2994 = _2881;
            _2996 = _2883;
        }
        else
        {
            float _3011 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
            float _3012 = _3011 * _2726;
            float _3013 = _3011 * _2727;
            float _3014 = _3011 * _2728;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2890 < ((_2888 >> 12u) & 15u))
            {
                float _2987;
                float _2989;
                float _2991;
                float _2993;
                float _2995;
                float _2997;
                float _3125 = _2873;
                float _3126 = _2875;
                float _3127 = _2877;
                float _3128 = _2879;
                float _3129 = _2881;
                float _3130 = _2883;
                uint _3131 = _2890;
                uint _3140;
                bool _3141;
                for (;;)
                {
                    _3140 = texelFetch(g_lightClassification, int((((_2766 << 5u) + (_2752 << 9u)) + (_3131 << 2u)) >> 2u)).x;
                    _3141 = _3140 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3141)
                    {
                        frontier_phi_67_pred = _3128;
                        frontier_phi_67_pred_1 = _3129;
                        frontier_phi_67_pred_2 = _3130;
                        frontier_phi_67_pred_3 = _3127;
                        frontier_phi_67_pred_4 = _3126;
                        frontier_phi_67_pred_5 = _3125;
                    }
                    else
                    {
                        float _3325;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3338 = _3125;
                        float _3339 = _3126;
                        float _3340 = _3127;
                        float _3341 = _3128;
                        float _3342 = _3129;
                        float _3343 = _3130;
                        uint _3344 = _3140;
                        uint _3345;
                        vec4 _3370;
                        float _3371;
                        vec4 _3386;
                        vec3 _3398;
                        vec4 _3413;
                        vec4 _3428;
                        float _3474;
                        bool _3475;
                        for (;;)
                        {
                            uint _3355 = ((_3131 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3344));
                            _3345 = (_3344 + 4294967295u) & _3344;
                            uint _3357 = _3355 * 40u;
                            _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3371 = _3370.w;
                            uint _3373 = (_3355 * 40u) + 4u;
                            _3386 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3373)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3373 + 3u)).x));
                            uint _3388 = (_3355 * 40u) + 8u;
                            _3398 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x));
                            uint _3400 = (_3355 * 40u) + 16u;
                            _3413 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3400)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3400 + 3u)).x));
                            uint _3415 = (_3355 * 40u) + 20u;
                            _3428 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3415)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3415 + 3u)).x));
                            uint _3430 = (_3355 * 40u) + 24u;
                            vec4 _3443 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3430)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3430 + 3u)).x));
                            uint _3449 = (_3355 * 40u) + 28u;
                            vec4 _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            _3474 = fma(_2728, _3462.z, fma(_2727, _3462.y, _3462.x * _2726)) + _3462.w;
                            _3475 = !((fma(_2728, _3443.z, fma(_2727, _3443.y, _3443.x * _2726)) + _3443.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3475)
                            {
                                float _3502 = _3370.x - _2726;
                                float _3503 = _3370.y - _2727;
                                float _3504 = _3370.z - _2728;
                                float _3505 = dot(vec3(_3502, _3503, _3504), vec3(_3502, _3503, _3504));
                                float _3508 = inversesqrt(_3505);
                                float _3509 = _3508 * _3502;
                                float _3510 = _3508 * _3503;
                                float _3511 = _3508 * _3504;
                                float _3515 = 1.0 - (_3505 / (_3371 * _3371));
                                float _4660 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3520 = sqrt(_3505) * _3386.w;
                                float _3522 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                                float _3523 = _3522 * _3522;
                                float _3526 = ((1.0 - _3523) * dot(vec3(_3509, _3510, _3511), vec3(_994, _997, _1000))) + _3523;
                                float _3529 = _3520 * _3520;
                                float _3533 = (fma(_2728, _3413.z, fma(_2727, _3413.y, _3413.x * _2726)) + _3413.w) / _3474;
                                float _3534 = (fma(_2728, _3428.z, fma(_2727, _3428.y, _3428.x * _2726)) + _3428.w) / _3474;
                                float _3538 = 1.0 - dot(vec2(_3533, _3534), vec2(_3533, _3534));
                                float _4676 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3539 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3540 = _3539 * (((isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0))) * _3516) / ((_3529 * 0.699999988079071044921875) + 1.0));
                                float _3552 = exp2(log2(1.0 / ((_3529 * 3.5) + 5.0)) * 0.25);
                                float _3553 = 1.0 - _1069;
                                float _3560 = sqrt(1.0 - ((1.0 - (_3553 * _3553)) * (1.0 - (_3552 * _3552))));
                                float _3561 = _3560 * _3560;
                                float _3562 = _3561 * _3561;
                                float _3563 = _3509 - _3012;
                                float _3564 = _3510 - _3013;
                                float _3565 = _3511 - _3014;
                                float _3569 = inversesqrt(dot(vec3(_3563, _3564, _3565), vec3(_3563, _3564, _3565)));
                                float _3573 = dot(vec3(_994, _997, _1000), vec3((-0.0) - _3012, (-0.0) - _3013, (-0.0) - _3014));
                                float _4687 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3576 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                                float _3577 = dot(vec3(_994, _997, _1000), vec3(_3569 * _3563, _3569 * _3564, _3569 * _3565));
                                float _4698 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3580 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3584 = ((_3580 * _3580) * (_3562 + (-1.0))) + 1.0;
                                float _3585 = _3522 * _3561;
                                float _3586 = _3585 * _3585;
                                float _3592 = ((1.0 - _3586) * dot(vec3(_994, _997, _1000), vec3(_3509, _3510, _3511))) + _3586;
                                float _4709 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3594 = 1.0 - _3561;
                                float _3604 = (0.5 / (((_3593 * ((_3576 * _3594) + _3561)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3561) * _3576))) * _3593;
                                float _4720 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3614 = (_3539 * _3516) * (((_3562 * 3.1415927410125732421875) * (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) / ((_3584 * _3584) * ((_3529 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3614 * _3398.x;
                                frontier_phi_73_pred_1 = _3614 * _3398.y;
                                frontier_phi_73_pred_2 = _3540 * _3386.z;
                                frontier_phi_73_pred_3 = _3540 * _3386.y;
                                frontier_phi_73_pred_4 = _3540 * _3386.x;
                                frontier_phi_73_pred_5 = _3614 * _3398.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3618 = frontier_phi_73_pred;
                            _3619 = frontier_phi_73_pred_1;
                            _3623 = frontier_phi_73_pred_2;
                            _3622 = frontier_phi_73_pred_3;
                            _3621 = frontier_phi_73_pred_4;
                            _3620 = frontier_phi_73_pred_5;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            _3325 = _3618 + _3338;
                            _3326 = _3619 + _3339;
                            _3327 = _3620 + _3340;
                            if (_3345 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3338 = _3325;
                                _3339 = _3326;
                                _3340 = _3327;
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3345;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3328;
                        frontier_phi_67_pred_1 = _3329;
                        frontier_phi_67_pred_2 = _3330;
                        frontier_phi_67_pred_3 = _3327;
                        frontier_phi_67_pred_4 = _3326;
                        frontier_phi_67_pred_5 = _3325;
                    }
                    _2993 = frontier_phi_67_pred;
                    _2995 = frontier_phi_67_pred_1;
                    _2997 = frontier_phi_67_pred_2;
                    _2991 = frontier_phi_67_pred_3;
                    _2989 = frontier_phi_67_pred_4;
                    _2987 = frontier_phi_67_pred_5;
                    uint _3132 = _3131 + 1u;
                    if (_3132 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3125 = _2987;
                        _3126 = _2989;
                        _3127 = _2991;
                        _3128 = _2993;
                        _3129 = _2995;
                        _3130 = _2997;
                        _3131 = _3132;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2995;
                frontier_phi_55_56_ladder_1 = _2997;
                frontier_phi_55_56_ladder_2 = _2993;
                frontier_phi_55_56_ladder_3 = _2991;
                frontier_phi_55_56_ladder_4 = _2989;
                frontier_phi_55_56_ladder_5 = _2987;
            }
            else
            {
                frontier_phi_55_56_ladder = _2881;
                frontier_phi_55_56_ladder_1 = _2883;
                frontier_phi_55_56_ladder_2 = _2879;
                frontier_phi_55_56_ladder_3 = _2877;
                frontier_phi_55_56_ladder_4 = _2875;
                frontier_phi_55_56_ladder_5 = _2873;
            }
            _2986 = frontier_phi_55_56_ladder_5;
            _2988 = frontier_phi_55_56_ladder_4;
            _2990 = frontier_phi_55_56_ladder_3;
            _2992 = frontier_phi_55_56_ladder_2;
            _2994 = frontier_phi_55_56_ladder;
            _2996 = frontier_phi_55_56_ladder_1;
        }
        float _3001 = isnan(1.0) ? _1053 : (isnan(_1053) ? 1.0 : min(_1053, 1.0));
        _2785 = (_3001 * _2992) + _2221;
        _2787 = (_3001 * _2994) + _2223;
        _2789 = (_3001 * _2996) + _2225;
        _2791 = ((_2986 * _1037) * _3001) + _2566;
        _2793 = ((_2988 * _1039) * _3001) + _2568;
        _2795 = ((_2990 * _1040) * _3001) + _2570;
    }
    else
    {
        _2785 = _2221;
        _2787 = _2223;
        _2789 = _2225;
        _2791 = _2566;
        _2793 = _2568;
        _2795 = _2570;
    }
    float _4736 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _4747 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _4758 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    uint _2815 = _283 + 6u;
    float _2823 = _975 / cbSceneParam._m0[86u].x;
    float _2824 = _976 / cbSceneParam._m0[86u].y;
    vec4 _2838 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, (log2((isnan(cbSceneParam._m0[77u].w) ? _910 : (isnan(_910) ? cbSceneParam._m0[77u].w : min(_910, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2840 = _2838.x;
    float _2841 = _2838.y;
    float _2842 = _2838.z;
    float _2843 = _2838.w;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_910 > cbSceneParam._m0[78u].w)
    {
        float _2898 = isnan(_910) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _910 : min(cbSceneParam._m0[80u].w, _910));
        float _2899 = _2898 / _910;
        float _2910 = _2899 * _960;
        float _2911 = _961 * _2899;
        float _2912 = (-0.0) - _2911;
        float _2914 = _2899 * _962;
        float _2916 = (cbSceneParam._m0[77u].w * _2912) / _2898;
        float _2917 = _2916 + cbSceneParam._m0[79u].w;
        float _2918 = cbSceneParam._m0[79u].w - _2911;
        float _2924 = sqrt(((_2910 * _2910) + (_2911 * _2911)) + (_2914 * _2914));
        float _2927 = (1.0 - (cbSceneParam._m0[77u].w / _2898)) * _2924;
        float _2932 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2934 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2912 - _2916) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2917 > 0.0) ? exp2(_2932 * _2917) : (2.0 - exp2(_2934 * _2917))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2927;
        }
        else
        {
            float _3047 = 1.0 / cbSceneParam._m0[80u].x;
            float _3048 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : max(_2917, _2918));
            float _3049 = isnan(_2918) ? _2917 : (isnan(_2917) ? _2918 : min(_2917, _2918));
            float _3058 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : min(_3048, 0.0));
            float _3059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : min(_3049, 0.0));
            _3087 = ((abs(_2924 / _2912) * cbSceneParam._m0[80u].y) * ((((_3058 - _3059) * 2.0) - ((exp2(_2932 * (isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0)))) - exp2(_2932 * (isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))))) * _3047)) - ((exp2(_2934 * _3058) - exp2(_2934 * _3059)) * _3047))) + (_2927 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2823, _2824, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2843);
        _2936 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2840;
        _2938 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2841;
        _2940 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2842;
        _2942 = _3098 * _2843;
    }
    else
    {
        _2936 = _2840;
        _2938 = _2841;
        _2940 = _2842;
        _2942 = _2843;
    }
    float _2954 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2955 = _2954 == 3.0;
    float _2956 = log2(_2942);
    float _2963 = exp2(_2956 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0))) * (_2785 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1053))) + ((_2791 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2964 = exp2(_2956 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2787 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1053))) + ((_2793 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2965 = exp2(_2956 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2789 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1053))) + ((_2795 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1861)) * cbPerFrame._m0[3u].x));
    float _2974 = (_2954 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2974 * (_2955 ? _2963 : (_2963 + (cbSceneParam._m0[72u].w * _2936)));
    SV_Target.y = _2974 * (_2955 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2938)));
    SV_Target.z = _2974 * (_2955 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2940)));
    SV_Target.w = cbInstanceData._m0[_2815].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2815].w;
}


