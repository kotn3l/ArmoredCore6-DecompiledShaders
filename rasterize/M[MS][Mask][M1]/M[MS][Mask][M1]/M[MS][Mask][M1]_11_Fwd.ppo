#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1187;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _216 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _223 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _230 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _236 = uint(roundEven(NORMAL.w)) * 13u;
    uint _242 = _236 + 1u;
    uint _246 = _236 + 2u;
    float _255 = sqrt(((cbInstanceData._m0[_242].x * cbInstanceData._m0[_242].x) + (cbInstanceData._m0[_236].x * cbInstanceData._m0[_236].x)) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x));
    float _256 = _255 * TEXCOORD.z;
    float _257 = _255 * TEXCOORD.w;
    vec4 _277 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _283 = _277.x * cbMtdParam._m0[11u].x;
    float _284 = _277.y * cbMtdParam._m0[11u].y;
    float _285 = _277.z * cbMtdParam._m0[11u].z;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _256) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _257) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _359 = _357.x;
    float _371 = dot(vec4(_359, _357.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _388 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_359 - _371) * cbMtdParam._m0[23u].w) + _371) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3515 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
    float _396 = (_389 * ((_304.x * cbMtdParam._m0[12u].x) - _283)) + _283;
    float _397 = (_389 * ((_304.y * cbMtdParam._m0[12u].y) - _284)) + _284;
    float _398 = (_389 * ((_304.z * cbMtdParam._m0[12u].z) - _285)) + _285;
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _256) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _257) + cbTextureTilingScale._m0[4u].w));
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _435 = _433.x;
    float _436 = _433.y;
    float _437 = _433.z;
    float _446 = ((_416.z - _437) * _389) + _437;
    float _449 = ((((_416.x - _435) * _389) + _435) * 2.0) + (-1.0);
    float _451 = ((((_416.y - _436) * _389) + _436) * 2.0) + (-1.0);
    float _452 = dot(vec2(_449, _451), vec2(_449, _451));
    float _3526 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _457 = sqrt(1.0 - (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _256) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _257) + cbTextureTilingScale._m0[11u].w));
    float _500 = _498.x;
    float _501 = 1.0 - _500;
    float _517 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_500 - _501) * cbMtdParam._m0[24u].z) + _501) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3537 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _525 = (_518 * (cbMtdParam._m0[17u].x - _396)) + _396;
    float _526 = (_518 * (cbMtdParam._m0[17u].y - _397)) + _397;
    float _527 = (_518 * (cbMtdParam._m0[17u].z - _398)) + _398;
    vec4 _539 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _555 = _553.x;
    float _573 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _256) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _257) + cbTextureTilingScale._m0[9u].w)).x - _555) * _389) + _555;
    float _577 = ((_539.x - _573) * cbMtdParam._m0[19u].z) + _573;
    float _579 = _577 - (_577 * _518);
    float _583 = (cbMtdParam._m0[19u].w * (_473.z - _446)) + _446;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _256) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _257) + cbTextureTilingScale._m0[15u].w));
    float _603 = (_596.x * 2.0) + (-1.0);
    float _604 = (_596.y * 2.0) + (-1.0);
    float _605 = dot(vec2(_603, _604), vec2(_603, _604));
    float _3548 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _613 = (_518 * (_596.z - _583)) + _583;
    float _616 = (((_473.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _449;
    float _617 = (((_473.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _451;
    float _629 = (((_603 - _616) + (cbMtdParam._m0[21u].x * _616)) * _518) + _616;
    float _630 = (((_604 - _617) + (cbMtdParam._m0[21u].x * _617)) * _518) + _617;
    float _631 = (_518 * (sqrt(1.0 - (isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0)))) - _457)) + _457;
    float _633 = cbMtdParam._m0[22u].x + _473.w;
    float _636 = fma(_631, _223 * NORMAL.x, fma(_630, _230 * TANGENT.x, (_216 * _208) * _629));
    float _639 = fma(_631, _223 * NORMAL.y, fma(_630, _230 * TANGENT.y, (_216 * _209) * _629));
    float _642 = fma(_631, _223 * NORMAL.z, fma(_630, _230 * TANGENT.z, (_216 * _210) * _629));
    float _646 = inversesqrt(dot(vec3(_636, _639, _642), vec3(_636, _639, _642)));
    float _647 = _646 * _636;
    float _648 = _646 * _639;
    float _649 = _646 * _642;
    float _3559 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _650 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _3570 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _3581 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3592 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3603 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3614 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _655 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
    float _669 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _720 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _710);
    float _721 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _710);
    float _722 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _710);
    float _726 = inversesqrt(dot(vec3(_720, _721, _722), vec3(_720, _721, _722)));
    float _727 = _720 * _726;
    float _728 = _721 * _726;
    float _729 = _722 * _726;
    float _735 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _736 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _754 = fma(_649, cbSceneParam._m0[5u].z, fma(_648, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _647));
    float _757 = fma(_649, cbSceneParam._m0[6u].z, fma(_648, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _647));
    float _760 = fma(_649, cbSceneParam._m0[7u].z, fma(_648, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _647));
    uint _774 = (_236 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _780 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0)))) * cbInstanceData._m0[_774].x;
    float _781 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0)))) * cbInstanceData._m0[_774].y;
    float _782 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0)))) * cbInstanceData._m0[_774].z;
    float _3625 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
    float _3636 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _784 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _3647 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _786 = 1.0 - _655;
    float _787 = _783 * _786;
    float _788 = _784 * _786;
    float _789 = _785 * _786;
    float _794 = (_783 + (-0.039999999105930328369140625)) * _655;
    float _795 = (_784 + (-0.039999999105930328369140625)) * _655;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _655;
    float _797 = _794 + 0.039999999105930328369140625;
    float _799 = _795 + 0.039999999105930328369140625;
    float _800 = _796 + 0.039999999105930328369140625;
    vec4 _809 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _735, cbSceneParam._m0[86u].y * _736));
    float _813 = ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * TEXCOORD_5.w) * _809.x;
    float _814 = dot(vec3(_647, _648, _649), vec3(_727, _728, _729));
    float _817 = _814 * 2.0;
    float _821 = (_817 * _647) - _727;
    float _822 = (_817 * _648) - _728;
    float _823 = (_817 * _649) - _729;
    float _827 = abs(dot(vec3(_727, _728, _729), vec3(_647, _648, _649)));
    float _3658 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _829 = sqrt(_650);
    float _842 = exp2((_829 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_829 * 3.0));
    float _848 = (1.0 - _842) * ((_829 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _849 = _842 * _829;
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _885 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1186;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _911 = fma(_885, cbModelParam._m0[26u].z, fma(_881, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _877));
        float _915 = fma(_885, cbModelParam._m0[27u].z, fma(_881, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _877));
        float _919 = fma(_885, cbModelParam._m0[28u].z, fma(_881, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _877));
        float _944 = _877 + _647;
        float _945 = _881 + _648;
        float _946 = _885 + _649;
        float _956 = fma(_946, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944)) - _911;
        float _957 = fma(_946, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944)) - _915;
        float _958 = fma(_946, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944)) - _919;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_911 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_915 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[34u].z) + ((((((_919 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1014 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_980.x + (-0.5));
        float _1016 = _1014 * (_980.y + (-0.5));
        float _1017 = _1014 * (_980.z + (-0.5));
        float _1024 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_987.x + (-0.5));
        float _1026 = _1024 * (_987.y + (-0.5));
        float _1027 = _1024 * (_987.z + (-0.5));
        float _1034 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_994.x + (-0.5));
        float _1036 = _1034 * (_994.y + (-0.5));
        float _1037 = _1034 * (_994.z + (-0.5));
        float _1044 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1001.x + (-0.5));
        float _1046 = _1044 * (_1001.y + (-0.5));
        float _1047 = _1044 * (_1001.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1068 = (dot(vec3(_647, _648, _649), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3684 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1078 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3695 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3706 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) * (_1080 + 1.0))) + _1085) * _1048;
        float _1095 = _1016 * 0.5;
        float _1096 = _1026 * 0.5;
        float _1097 = _1036 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_647, _648, _649), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3717 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3728 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3739 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))) * (_1122 + 1.0))) + _1127) * _1049;
        float _1137 = _1017 * 0.5;
        float _1138 = _1027 * 0.5;
        float _1139 = _1037 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_647, _648, _649), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3772 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1164 + 1.0))) + _1169) * _1050;
        _1186 = _1017;
        _1188 = _1016;
        _1189 = _1015;
        _1190 = _1027;
        _1191 = _1026;
        _1192 = _1025;
        _1193 = _1037;
        _1194 = _1036;
        _1195 = _1035;
        _1196 = _1050;
        _1197 = _1049;
        _1198 = _1048;
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _1187;
        _1188 = _1187;
        _1189 = _1187;
        _1190 = _1187;
        _1191 = _1187;
        _1192 = _1187;
        _1193 = _1187;
        _1194 = _1187;
        _1195 = _1187;
        _1196 = _1187;
        _1197 = _1187;
        _1198 = _1187;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1226 = fma(_885, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _877));
        float _1230 = fma(_885, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _877));
        float _1234 = fma(_885, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _877));
        float _1257 = _877 + _647;
        float _1258 = _881 + _648;
        float _1259 = _885 + _649;
        float _1269 = fma(_1259, cbModelParam._m0[30u].z, fma(_1258, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1257)) - _1226;
        float _1270 = fma(_1259, cbModelParam._m0[31u].z, fma(_1258, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1257)) - _1230;
        float _1271 = fma(_1259, cbModelParam._m0[32u].z, fma(_1258, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1257)) - _1234;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1226 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1230 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[35u].z) + ((((((_1234 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1306 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1325 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1292.x + (-0.5));
        float _1327 = _1325 * (_1292.y + (-0.5));
        float _1328 = _1325 * (_1292.z + (-0.5));
        float _1335 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1299.x + (-0.5));
        float _1337 = _1335 * (_1299.y + (-0.5));
        float _1338 = _1335 * (_1299.z + (-0.5));
        float _1345 = exp2((_1306.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1306.x + (-0.5));
        float _1347 = _1345 * (_1306.y + (-0.5));
        float _1348 = _1345 * (_1306.z + (-0.5));
        float _1355 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1313.x + (-0.5));
        float _1357 = _1355 * (_1313.y + (-0.5));
        float _1358 = _1355 * (_1313.z + (-0.5));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = _1326 * 0.5;
        float _1363 = _1336 * 0.5;
        float _1364 = _1346 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_647, _648, _649), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3813 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3824 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3835 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0))) * (_1389 + 1.0))) + _1394) * _1359;
        float _1404 = _1327 * 0.5;
        float _1405 = _1337 * 0.5;
        float _1406 = _1347 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_647, _648, _649), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _3846 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3857 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _3868 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_1431 + 1.0))) + _1436) * _1360;
        float _1446 = _1328 * 0.5;
        float _1447 = _1338 * 0.5;
        float _1448 = _1348 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_647, _648, _649), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3879 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3890 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3901 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * (_1473 + 1.0))) + _1478) * _1361;
        _1495 = _1328;
        _1496 = _1327;
        _1497 = _1326;
        _1498 = _1338;
        _1499 = _1337;
        _1500 = _1336;
        _1501 = _1348;
        _1502 = _1347;
        _1503 = _1346;
        _1504 = _1361;
        _1505 = _1360;
        _1506 = _1359;
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
    }
    else
    {
        _1495 = _1187;
        _1496 = _1187;
        _1497 = _1187;
        _1498 = _1187;
        _1499 = _1187;
        _1500 = _1187;
        _1501 = _1187;
        _1502 = _1187;
        _1503 = _1187;
        _1504 = _1187;
        _1505 = _1187;
        _1506 = _1187;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1199)) + _1199;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1200)) + _1200;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1201)) + _1201;
    float _1542 = fma(_1521, cbSceneParam._m0[89u].z, fma(_1520, cbSceneParam._m0[89u].y, _1519 * cbSceneParam._m0[89u].x));
    float _1545 = fma(_1521, cbSceneParam._m0[90u].z, fma(_1520, cbSceneParam._m0[90u].y, _1519 * cbSceneParam._m0[90u].x));
    float _1548 = fma(_1521, cbSceneParam._m0[91u].z, fma(_1520, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1519));
    float _1563 = _821 * 0.5;
    float _1564 = _822 * 0.5;
    float _1565 = _823 * 0.5;
    float _1566 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1569 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1572 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1606;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1579 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1186, _1190, _1193, _1196));
        float _1583 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1587 = dot(vec4(_1563, _1564, _1565, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1594 = dot(vec4(cbModelParam._m0[39u]), vec4(_1563, _1564, _1565, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)), isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)), isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1617;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1608 = dot(vec4(cbModelParam._m0[40u]), vec4(_1563, _1564, _1565, 1.0));
        _1617 = dot(vec3(isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1608) ? 0.0 : (isnan(0.0) ? _1608 : max(0.0, _1608))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1617 = 1.0;
    }
    float _1621 = (_1617 * cbModelParam._m0[1u].x) + (_1606 * (1.0 - cbModelParam._m0[1u].x));
    float _1631 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _650);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1631 : min(cbModelParam._m0[25u].z, _1631));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_885, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _877)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_885, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _877)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_885, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _877)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_823, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _821));
        float _1694 = fma(_823, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _821));
        float _1697 = fma(_823, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _821));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1725 = frontier_phi_14_12_ladder;
        }
        float _1928;
        if (_1694 > 0.0)
        {
            _1928 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1928 = frontier_phi_23_19_ladder;
        }
        float _2182;
        if (_1697 > 0.0)
        {
            _2182 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2182 = frontier_phi_35_30_ladder;
        }
        float _2184 = isnan(_1928) ? _1725 : (isnan(_1725) ? _1928 : min(_1725, _1928));
        float _2185 = isnan(_2182) ? _2184 : (isnan(_2184) ? _2182 : min(_2184, _2182));
        float _2189 = (_2185 * _1691) + _1680;
        float _2190 = (_2185 * _1694) + _1684;
        float _2191 = (_2185 * _1697) + _1688;
        float _2192 = _2185 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2192;
        float _2196 = _2192 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 > _2196) || ((_2190 < _2194) || ((_2189 < _2194) || (_2189 > _2196))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2191, cbModelParam._m0[9u].z, fma(_2190, cbModelParam._m0[9u].y, _2189 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2191, cbModelParam._m0[10u].z, fma(_2190, cbModelParam._m0[10u].y, _2189 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2191, cbModelParam._m0[11u].z, fma(_2190, cbModelParam._m0[11u].y, _2189 * cbModelParam._m0[11u].x))), _1632);
            frontier_phi_13_35_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_13_35_ladder_2;
        _1715 = frontier_phi_13_35_ladder_1;
        _1717 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_821, _822, _823), _1632);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _650);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1776 = fma(_885, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _877)) + cbModelParam._m0[21u].w;
        float _1780 = fma(_885, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _877)) + cbModelParam._m0[22u].w;
        float _1784 = fma(_885, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _877)) + cbModelParam._m0[23u].w;
        float _1787 = fma(_823, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _821));
        float _1790 = fma(_823, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _821));
        float _1793 = fma(_823, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _821));
        float _1933;
        if (_1787 > 0.0)
        {
            _1933 = abs((1.0 - _1776) / _1787);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1787 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1776 + 1.0) / _1787);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1933 = frontier_phi_25_21_ladder;
        }
        float _2209;
        if (_1790 > 0.0)
        {
            _2209 = abs((1.0 - _1780) / _1790);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1780 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2209 = frontier_phi_37_32_ladder;
        }
        float _2422;
        if (_1793 > 0.0)
        {
            _2422 = abs((1.0 - _1784) / _1793);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1784 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2422 = frontier_phi_46_43_ladder;
        }
        float _2424 = isnan(_2209) ? _1933 : (isnan(_1933) ? _2209 : min(_1933, _2209));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1787) + _1776;
        float _2430 = (_2425 * _1790) + _1780;
        float _2431 = (_2425 * _1793) + _1784;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2433 = (-1.0) - _2432;
        float _2435 = _2432 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2431 > _2435) || ((_2431 < _2433) || ((_2430 > _2435) || ((_2430 < _2433) || ((_2429 < _2433) || (_2429 > _2435))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2630 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2431, cbModelParam._m0[17u].z, fma(_2430, cbModelParam._m0[17u].y, _2429 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2431, cbModelParam._m0[18u].z, fma(_2430, cbModelParam._m0[18u].y, _2429 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2431, cbModelParam._m0[19u].z, fma(_2430, cbModelParam._m0[19u].y, _2429 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_22_46_ladder = _2630.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2630.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2630.x * cbModelParam._m0[1u].z;
        }
        _1812 = frontier_phi_22_46_ladder_2;
        _1814 = frontier_phi_22_46_ladder_1;
        _1816 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1796 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_821, _822, _823), _1722);
        _1812 = _1796.x * cbModelParam._m0[1u].z;
        _1814 = _1796.y * cbModelParam._m0[1u].z;
        _1816 = _1796.z * cbModelParam._m0[1u].z;
    }
    float _1829 = (((_848 * _797) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1812 - _1713)) + _1713);
    float _1831 = (((_848 * _799) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1814 - _1715)) + _1715);
    float _1833 = (((_848 * _800) + _849) * _813) * ((cbModelParam._m0[1u].w * (_1816 - _1717)) + _1717);
    float _1836 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1831, cbSceneParam._m0[89u].y, _1829 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1831, cbSceneParam._m0[90u].y, _1829 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1831, cbSceneParam._m0[91u].y, _1829 * cbSceneParam._m0[91u].x));
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_236 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1862 = _813 + (-1.0);
    float _1867 = (cbLight._m0[_1855].x * _1862) + 1.0;
    float _1868 = (cbLight._m0[_1855].y * _1862) + 1.0;
    float _1869 = (cbLight._m0[_1855].z * _1862) + 1.0;
    float _1870 = (cbLight._m0[_1855].w * _1862) + 1.0;
    uint _1871 = _1854 + 5u;
    float _1877 = isnan(1.0) ? _1868 : (isnan(_1868) ? 1.0 : min(_1868, 1.0));
    uint _1881 = _1854 + 4u;
    float _1887 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1891 = _1854 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_647, _648, _649));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_647, _648, _649));
    float _4037 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _4048 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1871].x * _1877) * _1912) + ((cbLight._m0[_1881].x * _1887) * _1910);
    float _1920 = ((_1877 * cbLight._m0[_1871].y) * _1912) + ((_1887 * cbLight._m0[_1881].y) * _1910);
    float _1921 = ((_1877 * cbLight._m0[_1871].z) * _1912) + ((_1887 * cbLight._m0[_1881].z) * _1910);
    uvec4 _1925 = floatBitsToUint(cbLight._m0[_1854 + 12u]);
    bool _1927 = _1925.x == 0u;
    float _1938;
    float _1940;
    float _1942;
    if (_1927)
    {
        _1938 = _1919;
        _1940 = _1920;
        _1942 = _1921;
    }
    else
    {
        uint _1946 = _1854 + 6u;
        float _1962 = (dot(vec3(cbLight._m0[_1854 + 2u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _1963 = _1962 * _1962;
        float _4059 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1965 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _1938 = (((cbLight._m0[_1946].x * 0.3183098733425140380859375) * _1964) * _1965) + _1919;
        _1940 = (((cbLight._m0[_1946].y * 0.3183098733425140380859375) * _1964) * _1965) + _1920;
        _1942 = (((cbLight._m0[_1946].z * 0.3183098733425140380859375) * _1964) * _1965) + _1921;
    }
    bool _1945 = _1925.y == 0u;
    float _1983;
    float _1985;
    float _1987;
    if (_1945)
    {
        _1983 = _1938;
        _1985 = _1940;
        _1987 = _1942;
    }
    else
    {
        uint _2153 = _1854 + 7u;
        float _2169 = (dot(vec3(cbLight._m0[_1854 + 3u].xyz), vec3(_647, _648, _649)) * 0.5) + 0.5;
        float _2170 = _2169 * _2169;
        float _4075 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2171 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _2172 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _1983 = (((cbLight._m0[_2153].x * 0.3183098733425140380859375) * _2171) * _2172) + _1938;
        _1985 = (((cbLight._m0[_2153].y * 0.3183098733425140380859375) * _2171) * _2172) + _1940;
        _1987 = (((cbLight._m0[_2153].z * 0.3183098733425140380859375) * _2171) * _2172) + _1942;
    }
    uint _1990 = _1854 + 8u;
    float _2003 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _650) * 0.949999988079071044921875);
    float _2004 = _2003 * _2003;
    float _2005 = cbLight._m0[_1854].x + _727;
    float _2006 = cbLight._m0[_1854].y + _728;
    float _2007 = cbLight._m0[_1854].z + _729;
    float _2011 = inversesqrt(dot(vec3(_2005, _2006, _2007), vec3(_2005, _2006, _2007)));
    float _2012 = _2011 * _2005;
    float _2013 = _2011 * _2006;
    float _2014 = _2011 * _2007;
    float _2015 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1854].xyz));
    float _4091 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2018 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _2019 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2020 = dot(vec3(_647, _648, _649), vec3(_2012, _2013, _2014));
    float _4113 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2024 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2012, _2013, _2014));
    float _4124 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2028 = _2004 * _2004;
    float _2032 = ((_2023 * _2023) * (_2028 + (-1.0))) + 1.0;
    float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0);
    float _2041 = 0.959999978542327880859375 - _794;
    float _2043 = 0.959999978542327880859375 - _795;
    float _2044 = 0.959999978542327880859375 - _796;
    float _2051 = 1.0 - _2004;
    float _2062 = (0.5 / (((_2019 * ((_2018 * _2051) + _2004)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2051) + _2004) * _2018))) * _2018;
    float _4135 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2028 / ((_2032 * _2032) * 3.141590118408203125));
    uint _2075 = _1854 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _650) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1891].x + _727;
    float _2089 = cbLight._m0[_1891].y + _728;
    float _2090 = cbLight._m0[_1891].z + _729;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_1891].xyz));
    float _4146 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
    float _2102 = dot(vec3(_647, _648, _649), vec3(_2095, _2096, _2097));
    float _4157 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2095, _2096, _2097));
    float _4168 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2121 = exp2(log2(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0)))) * 5.0);
    float _2128 = 1.0 - _2087;
    float _2138 = (0.5 / (((_2019 * ((_2101 * _2128) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2128) + _2087) * _2101))) * _2101;
    float _4179 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2150 = (((((_2121 * _2041) + _797) * cbLight._m0[_2075].x) * _2140) * _1877) + (((((_2040 * _2041) + _797) * cbLight._m0[_1990].x) * _2064) * _1887);
    float _2151 = (((((_2121 * _2043) + _799) * cbLight._m0[_2075].y) * _2140) * _1877) + (((((_2040 * _2043) + _799) * cbLight._m0[_1990].y) * _2064) * _1887);
    float _2152 = (((((_2121 * _2044) + _800) * cbLight._m0[_2075].z) * _2140) * _1877) + (((((_2040 * _2044) + _800) * cbLight._m0[_1990].z) * _2064) * _1887);
    float _2214;
    float _2216;
    float _2218;
    if (_1927)
    {
        _2214 = _2150;
        _2216 = _2151;
        _2218 = _2152;
    }
    else
    {
        uint _2220 = _1854 + 2u;
        uint _2224 = _1854 + 10u;
        float _2238 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _650) * 0.949999988079071044921875);
        float _2239 = _2238 * _2238;
        float _2240 = cbLight._m0[_2220].x + _727;
        float _2241 = cbLight._m0[_2220].y + _728;
        float _2242 = cbLight._m0[_2220].z + _729;
        float _2246 = inversesqrt(dot(vec3(_2240, _2241, _2242), vec3(_2240, _2241, _2242)));
        float _2247 = _2246 * _2240;
        float _2248 = _2246 * _2241;
        float _2249 = _2246 * _2242;
        float _2250 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2220].xyz));
        float _4190 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _2254 = dot(vec3(_647, _648, _649), vec3(_2247, _2248, _2249));
        float _4201 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2257 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _2258 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2247, _2248, _2249));
        float _4212 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
        float _2262 = _2239 * _2239;
        float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
        float _2273 = exp2(log2(1.0 - (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * 5.0);
        float _2280 = 1.0 - _2239;
        float _2290 = (0.5 / (((_2019 * ((_2253 * _2280) + _2239)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2280) + _2239) * _2253))) * _2253;
        float _4223 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2292 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
        float _2293 = isnan(1.0) ? _1869 : (isnan(_1869) ? 1.0 : min(_1869, 1.0));
        _2214 = (((((_2273 * _2041) + _797) * cbLight._m0[_2224].x) * _2292) * _2293) + _2150;
        _2216 = (((((_2273 * _2043) + _799) * cbLight._m0[_2224].y) * _2292) * _2293) + _2151;
        _2218 = (((((_2273 * _2044) + _800) * cbLight._m0[_2224].z) * _2292) * _2293) + _2152;
    }
    float _2328;
    float _2330;
    float _2332;
    if (_1945)
    {
        _2328 = _2214;
        _2330 = _2216;
        _2332 = _2218;
    }
    else
    {
        uint _2339 = _1854 + 3u;
        uint _2343 = _1854 + 11u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _650) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _727;
        float _2360 = cbLight._m0[_2339].y + _728;
        float _2361 = cbLight._m0[_2339].z + _729;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_647, _648, _649), vec3(cbLight._m0[_2339].xyz));
        float _4239 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2373 = dot(vec3(_647, _648, _649), vec3(_2366, _2367, _2368));
        float _4250 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4261 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2019 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2019 * _2399) + _2358) * _2372))) * _2372;
        float _4272 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1870 : (isnan(_1870) ? 1.0 : min(_1870, 1.0));
        _2328 = (((((_2392 * _2041) + _797) * cbLight._m0[_2343].x) * _2411) * _2412) + _2214;
        _2330 = (((((_2392 * _2043) + _799) * cbLight._m0[_2343].y) * _2411) * _2412) + _2216;
        _2332 = (((((_2392 * _2044) + _800) * cbLight._m0[_2343].z) * _2411) * _2412) + _2218;
    }
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    float _2555;
    float _2557;
    if (_1852.y == 0u)
    {
        float _2487 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2488 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2487;
        float _2489 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2487;
        float _2490 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2487;
        uvec4 _2502 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2503 = _2502.x;
        uint _2514 = uint((float(_2502.y) * floor(float(uint(cbSceneParam._m0[85u].y * _736) / _2503))) + floor(float(uint(cbSceneParam._m0[85u].x * _735) / _2503)));
        float _2524 = (log2(_2490 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2525 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        uint _2528 = uint(isnan(14.0) ? _2525 : (isnan(_2525) ? 14.0 : min(_2525, 14.0)));
        uvec4 _2533 = texelFetch(g_lightClusterGridBuffer, int(((_2528 << 2u) + (_2514 << 6u)) >> 2u));
        uint _2534 = _2533.x;
        uint _2535 = _2502.z;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        float _2643;
        float _2645;
        if (((((1u << ((_2535 >> 4u) & 15u)) + 4294967295u) & _2534) == 0u) || ((_2535 & 240u) == 0u))
        {
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
            _2643 = 0.0;
            _2645 = 0.0;
        }
        else
        {
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2644;
            float _2646;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2796)
                {
                    frontier_phi_61_pred = _2780;
                    frontier_phi_61_pred_1 = _2785;
                    frontier_phi_61_pred_2 = _2784;
                    frontier_phi_61_pred_3 = _2783;
                    frontier_phi_61_pred_4 = _2782;
                    frontier_phi_61_pred_5 = _2781;
                }
                else
                {
                    float _2904;
                    float _2905;
                    float _2906;
                    float _2907;
                    float _2908;
                    float _2909;
                    uint _2910;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2782;
                    _2907 = _2783;
                    _2908 = _2784;
                    _2909 = _2785;
                    _2910 = _2795;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    for (;;)
                    {
                        uint _2914 = uint(findLSB(_2910)) + (_2786 << 5u);
                        uint _2911 = (_2910 + 4294967295u) & _2910;
                        uint _2916 = _2914 * 48u;
                        vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2916)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2916 + 3u)).x));
                        uint _2936 = (_2914 * 48u) + 4u;
                        vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2936)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2936 + 3u)).x));
                        uint _2955 = (_2914 * 48u) + 8u;
                        vec3 _2966 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2955)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2955 + 2u)).x));
                        float _2970 = _2930.x - _2488;
                        float _2971 = _2930.y - _2489;
                        float _2972 = _2930.z - _2490;
                        float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                        float _2976 = inversesqrt(_2973);
                        float _2977 = _2976 * _2970;
                        float _2978 = _2976 * _2971;
                        float _2979 = _2976 * _2972;
                        float _2980 = dot(vec3(_754, _757, _760), vec3(_2977, _2978, _2979));
                        float _2985 = 1.0 - (_2973 * _2930.w);
                        float _4298 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
                        float _2986 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
                        float _2987 = sqrt(_2973) * _2949.w;
                        float _2990 = 1.39999997615814208984375 / (_2987 + 1.39999997615814208984375);
                        float _2991 = _2990 * _2990;
                        float _2994 = ((1.0 - _2991) * _2980) + _2991;
                        float _2997 = _2987 * _2987;
                        float _3001 = ((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2986) / ((_2997 * 0.699999988079071044921875) + 1.0);
                        float _3005 = (-0.0) - _2488;
                        float _3006 = (-0.0) - _2489;
                        float _3007 = (-0.0) - _2490;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3012 = _3011 * _3005;
                        float _3013 = _3011 * _3006;
                        float _3014 = _3011 * _3007;
                        float _3022 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                        float _3023 = 1.0 - _829;
                        float _3030 = sqrt(1.0 - ((1.0 - (_3023 * _3023)) * (1.0 - (_3022 * _3022))));
                        float _3031 = _3030 * _3030;
                        float _3032 = _3031 * _3031;
                        float _3033 = _3012 + _2977;
                        float _3034 = _3013 + _2978;
                        float _3035 = _3014 + _2979;
                        float _3039 = inversesqrt(dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035)));
                        float _3043 = dot(vec3(_754, _757, _760), vec3(_3012, _3013, _3014));
                        float _4314 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
                        float _3047 = dot(vec3(_754, _757, _760), vec3(_3039 * _3033, _3039 * _3034, _3039 * _3035));
                        float _4325 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                        float _3050 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
                        float _3054 = ((_3050 * _3050) * (_3032 + (-1.0))) + 1.0;
                        float _3055 = _2990 * _3031;
                        float _3056 = _3055 * _3055;
                        float _3059 = ((1.0 - _3056) * _2980) + _3056;
                        float _4336 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
                        float _3060 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
                        float _3061 = 1.0 - _3031;
                        float _3071 = (0.5 / (((_3060 * ((_3046 * _3061) + _3031)) + 9.9999999392252902907785028219223e-09) + (((_3060 * _3061) + _3031) * _3046))) * _3060;
                        float _4347 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                        float _3082 = (((_3032 * 3.1415927410125732421875) * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) / ((_3054 * _3054) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125))) * _2986;
                        _2839 = (_3001 * _2949.x) + _2907;
                        _2840 = (_3001 * _2949.y) + _2908;
                        _2841 = (_3001 * _2949.z) + _2909;
                        _2836 = (_3082 * _2966.x) + _2904;
                        _2837 = (_3082 * _2966.y) + _2905;
                        _2838 = (_3082 * _2966.z) + _2906;
                        if (_2911 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2838;
                            _2907 = _2839;
                            _2908 = _2840;
                            _2909 = _2841;
                            _2910 = _2911;
                        }
                    }
                    frontier_phi_61_pred = _2836;
                    frontier_phi_61_pred_1 = _2841;
                    frontier_phi_61_pred_2 = _2840;
                    frontier_phi_61_pred_3 = _2839;
                    frontier_phi_61_pred_4 = _2838;
                    frontier_phi_61_pred_5 = _2837;
                }
                _2636 = frontier_phi_61_pred;
                _2646 = frontier_phi_61_pred_1;
                _2644 = frontier_phi_61_pred_2;
                _2642 = frontier_phi_61_pred_3;
                _2640 = frontier_phi_61_pred_4;
                _2638 = frontier_phi_61_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2636;
                    _2781 = _2638;
                    _2782 = _2640;
                    _2783 = _2642;
                    _2784 = _2644;
                    _2785 = _2646;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
            _2643 = _2644;
            _2645 = _2646;
        }
        uvec4 _2649 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2650 = _2649.z;
        uint _2652 = (_2650 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2652) & _2534) == 0u)
        {
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
            _2756 = _2643;
            _2758 = _2645;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
            float _2774 = _2773 * _2488;
            float _2775 = _2773 * _2489;
            float _2776 = _2773 * _2490;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2652 < ((_2650 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2887 = _2635;
                float _2888 = _2637;
                float _2889 = _2639;
                float _2890 = _2641;
                float _2891 = _2643;
                float _2892 = _2645;
                uint _2893 = _2652;
                uint _2902;
                bool _2903;
                for (;;)
                {
                    _2902 = texelFetch(g_lightClassification, int((((_2528 << 5u) + (_2514 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                    _2903 = _2902 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2903)
                    {
                        frontier_phi_67_pred = _2890;
                        frontier_phi_67_pred_1 = _2891;
                        frontier_phi_67_pred_2 = _2892;
                        frontier_phi_67_pred_3 = _2889;
                        frontier_phi_67_pred_4 = _2888;
                        frontier_phi_67_pred_5 = _2887;
                    }
                    else
                    {
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        float _3102 = _2889;
                        float _3103 = _2890;
                        float _3104 = _2891;
                        float _3105 = _2892;
                        uint _3106 = _2902;
                        uint _3107;
                        vec4 _3132;
                        float _3133;
                        vec4 _3148;
                        vec3 _3160;
                        vec4 _3175;
                        vec4 _3191;
                        float _3237;
                        bool _3238;
                        for (;;)
                        {
                            uint _3117 = ((_2893 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3106));
                            _3107 = (_3106 + 4294967295u) & _3106;
                            uint _3119 = _3117 * 40u;
                            _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3133 = _3132.w;
                            uint _3135 = (_3117 * 40u) + 4u;
                            _3148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3135 + 3u)).x));
                            uint _3150 = (_3117 * 40u) + 8u;
                            _3160 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x));
                            uint _3162 = (_3117 * 40u) + 16u;
                            _3175 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3162)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3162 + 3u)).x));
                            uint _3178 = (_3117 * 40u) + 20u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3193 = (_3117 * 40u) + 24u;
                            vec4 _3206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3193 + 3u)).x));
                            uint _3212 = (_3117 * 40u) + 28u;
                            vec4 _3225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3212 + 3u)).x));
                            _3237 = fma(_2490, _3225.z, fma(_2489, _3225.y, _3225.x * _2488)) + _3225.w;
                            _3238 = !((fma(_2490, _3206.z, fma(_2489, _3206.y, _3206.x * _2488)) + _3206.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3238)
                            {
                                float _3265 = _3132.x - _2488;
                                float _3266 = _3132.y - _2489;
                                float _3267 = _3132.z - _2490;
                                float _3268 = dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267));
                                float _3271 = inversesqrt(_3268);
                                float _3272 = _3271 * _3265;
                                float _3273 = _3271 * _3266;
                                float _3274 = _3271 * _3267;
                                float _3278 = 1.0 - (_3268 / (_3133 * _3133));
                                float _4358 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3279 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
                                float _3283 = sqrt(_3268) * _3148.w;
                                float _3285 = 1.39999997615814208984375 / (_3283 + 1.39999997615814208984375);
                                float _3286 = _3285 * _3285;
                                float _3289 = ((1.0 - _3286) * dot(vec3(_3272, _3273, _3274), vec3(_754, _757, _760))) + _3286;
                                float _3292 = _3283 * _3283;
                                float _3296 = (fma(_2490, _3175.z, fma(_2489, _3175.y, _3175.x * _2488)) + _3175.w) / _3237;
                                float _3297 = (fma(_2490, _3191.z, fma(_2489, _3191.y, _3191.x * _2488)) + _3191.w) / _3237;
                                float _3301 = 1.0 - dot(vec2(_3296, _3297), vec2(_3296, _3297));
                                float _4374 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3302 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                                float _3303 = _3302 * (((isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))) * _3279) / ((_3292 * 0.699999988079071044921875) + 1.0));
                                float _3315 = exp2(log2(1.0 / ((_3292 * 3.5) + 5.0)) * 0.25);
                                float _3316 = 1.0 - _829;
                                float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                                float _3324 = _3323 * _3323;
                                float _3325 = _3324 * _3324;
                                float _3326 = _3272 - _2774;
                                float _3327 = _3273 - _2775;
                                float _3328 = _3274 - _2776;
                                float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                                float _3336 = dot(vec3(_754, _757, _760), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4385 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                                float _3340 = dot(vec3(_754, _757, _760), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                                float _4396 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                                float _3343 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
                                float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                                float _3348 = _3285 * _3324;
                                float _3349 = _3348 * _3348;
                                float _3355 = ((1.0 - _3349) * dot(vec3(_754, _757, _760), vec3(_3272, _3273, _3274))) + _3349;
                                float _4407 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                                float _3356 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3357 = 1.0 - _3324;
                                float _3367 = (0.5 / (((_3356 * ((_3339 * _3357) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3356 * _3357) + _3324) * _3339))) * _3356;
                                float _4418 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3377 = (_3302 * _3279) * (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) / ((_3347 * _3347) * ((_3292 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3377 * _3160.x;
                                frontier_phi_73_pred_1 = _3377 * _3160.y;
                                frontier_phi_73_pred_2 = _3303 * _3148.z;
                                frontier_phi_73_pred_3 = _3303 * _3148.y;
                                frontier_phi_73_pred_4 = _3303 * _3148.x;
                                frontier_phi_73_pred_5 = _3377 * _3160.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3381 = frontier_phi_73_pred;
                            _3382 = frontier_phi_73_pred_1;
                            _3386 = frontier_phi_73_pred_2;
                            _3385 = frontier_phi_73_pred_3;
                            _3384 = frontier_phi_73_pred_4;
                            _3383 = frontier_phi_73_pred_5;
                            _3090 = _3384 + _3103;
                            _3091 = _3385 + _3104;
                            _3092 = _3386 + _3105;
                            _3087 = _3381 + _3100;
                            _3088 = _3382 + _3101;
                            _3089 = _3383 + _3102;
                            if (_3107 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3089;
                                _3103 = _3090;
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3107;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3090;
                        frontier_phi_67_pred_1 = _3091;
                        frontier_phi_67_pred_2 = _3092;
                        frontier_phi_67_pred_3 = _3089;
                        frontier_phi_67_pred_4 = _3088;
                        frontier_phi_67_pred_5 = _3087;
                    }
                    _2755 = frontier_phi_67_pred;
                    _2757 = frontier_phi_67_pred_1;
                    _2759 = frontier_phi_67_pred_2;
                    _2753 = frontier_phi_67_pred_3;
                    _2751 = frontier_phi_67_pred_4;
                    _2749 = frontier_phi_67_pred_5;
                    uint _2894 = _2893 + 1u;
                    if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2887 = _2749;
                        _2888 = _2751;
                        _2889 = _2753;
                        _2890 = _2755;
                        _2891 = _2757;
                        _2892 = _2759;
                        _2893 = _2894;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2757;
                frontier_phi_55_56_ladder_1 = _2759;
                frontier_phi_55_56_ladder_2 = _2755;
                frontier_phi_55_56_ladder_3 = _2753;
                frontier_phi_55_56_ladder_4 = _2751;
                frontier_phi_55_56_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_55_56_ladder = _2643;
                frontier_phi_55_56_ladder_1 = _2645;
                frontier_phi_55_56_ladder_2 = _2641;
                frontier_phi_55_56_ladder_3 = _2639;
                frontier_phi_55_56_ladder_4 = _2637;
                frontier_phi_55_56_ladder_5 = _2635;
            }
            _2748 = frontier_phi_55_56_ladder_5;
            _2750 = frontier_phi_55_56_ladder_4;
            _2752 = frontier_phi_55_56_ladder_3;
            _2754 = frontier_phi_55_56_ladder_2;
            _2756 = frontier_phi_55_56_ladder;
            _2758 = frontier_phi_55_56_ladder_1;
        }
        float _2763 = isnan(1.0) ? _813 : (isnan(_813) ? 1.0 : min(_813, 1.0));
        _2547 = (_2763 * _2754) + _1983;
        _2549 = (_2763 * _2756) + _1985;
        _2551 = (_2763 * _2758) + _1987;
        _2553 = ((_2748 * _797) * _2763) + _2328;
        _2555 = ((_2750 * _799) * _2763) + _2330;
        _2557 = ((_2752 * _800) * _2763) + _2332;
    }
    else
    {
        _2547 = _1983;
        _2549 = _1985;
        _2551 = _1987;
        _2553 = _2328;
        _2555 = _2330;
        _2557 = _2332;
    }
    float _4434 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _4445 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4456 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    uint _2577 = _236 + 6u;
    float _2585 = _735 / cbSceneParam._m0[86u].x;
    float _2586 = _736 / cbSceneParam._m0[86u].y;
    vec4 _2600 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, (log2((isnan(cbSceneParam._m0[77u].w) ? _669 : (isnan(_669) ? cbSceneParam._m0[77u].w : min(_669, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2602 = _2600.x;
    float _2603 = _2600.y;
    float _2604 = _2600.z;
    float _2605 = _2600.w;
    float _2698;
    float _2700;
    float _2702;
    float _2704;
    if (_669 > cbSceneParam._m0[78u].w)
    {
        float _2660 = isnan(_669) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _669 : min(cbSceneParam._m0[80u].w, _669));
        float _2661 = _2660 / _669;
        float _2672 = _2661 * _720;
        float _2673 = _721 * _2661;
        float _2674 = (-0.0) - _2673;
        float _2676 = _2661 * _722;
        float _2678 = (cbSceneParam._m0[77u].w * _2674) / _2660;
        float _2679 = _2678 + cbSceneParam._m0[79u].w;
        float _2680 = cbSceneParam._m0[79u].w - _2673;
        float _2686 = sqrt(((_2672 * _2672) + (_2673 * _2673)) + (_2676 * _2676));
        float _2689 = (1.0 - (cbSceneParam._m0[77u].w / _2660)) * _2686;
        float _2694 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2696 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2849;
        if (abs((_2674 - _2678) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2849 = ((((_2679 > 0.0) ? exp2(_2694 * _2679) : (2.0 - exp2(_2696 * _2679))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2689;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : max(_2679, _2680));
            float _2811 = isnan(_2680) ? _2679 : (isnan(_2679) ? _2680 : min(_2679, _2680));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2849 = ((abs(_2686 / _2674) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2694 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2694 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2696 * _2820) - exp2(_2696 * _2821)) * _2809))) + (_2689 * cbSceneParam._m0[80u].z);
        }
        vec4 _2851 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2585, _2586, 1.0), 0.0);
        float _2860 = exp2((_2849 * (-1.44269502162933349609375)) * (1.0 - _2851.w));
        float _2861 = log2(_2860);
        float _2877 = log2(_2605);
        _2698 = (exp2(_2877 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].x)) * _2851.x) / cbSceneParam._m0[78u].x)) + _2602;
        _2700 = (exp2(_2877 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].y)) * _2851.y) / cbSceneParam._m0[78u].y)) + _2603;
        _2702 = (exp2(_2877 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2861 * cbSceneParam._m0[78u].z)) * _2851.z) / cbSceneParam._m0[78u].z)) + _2604;
        _2704 = _2860 * _2605;
    }
    else
    {
        _2698 = _2602;
        _2700 = _2603;
        _2702 = _2604;
        _2704 = _2605;
    }
    float _2716 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2717 = _2716 == 3.0;
    float _2718 = log2(_2704);
    float _2725 = exp2(_2718 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2547 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _813))) + ((_2553 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2726 = exp2(_2718 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2549 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _813))) + ((_2555 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2727 = exp2(_2718 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_2551 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _813))) + ((_2557 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1621)) * cbPerFrame._m0[3u].x));
    float _2736 = (_2716 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2736 * (_2717 ? _2725 : (_2725 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.y = _2736 * (_2717 ? _2726 : (_2726 + (cbSceneParam._m0[72u].w * _2700)));
    SV_Target.z = _2736 * (_2717 ? _2727 : (_2727 + (cbSceneParam._m0[72u].w * _2702)));
    SV_Target.w = cbInstanceData._m0[_2577].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2577].w;
}


