#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1387;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _292 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _321 = _316.x * cbMtdParam._m0[11u].x;
    float _322 = _316.y * cbMtdParam._m0[11u].y;
    float _323 = _316.z * cbMtdParam._m0[11u].z;
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3712 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _439 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _292.x) * ((_426 * ((_342.x * cbMtdParam._m0[12u].x) - _321)) + _321);
    float _442 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _292.y) * ((_426 * ((_342.y * cbMtdParam._m0[12u].y) - _322)) + _322);
    float _445 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _292.z) * ((_426 * ((_342.z * cbMtdParam._m0[12u].z) - _323)) + _323);
    vec4 _464 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _272) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _273) + cbTextureTilingScale._m0[14u].w));
    vec4 _484 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _503 = _501.x;
    float _504 = _501.y;
    float _505 = _501.z;
    float _514 = ((_484.z - _505) * _426) + _505;
    float _517 = ((((_484.x - _503) * _426) + _503) * 2.0) + (-1.0);
    float _519 = ((((_484.y - _504) * _426) + _504) * 2.0) + (-1.0);
    float _520 = dot(vec2(_517, _519), vec2(_517, _519));
    float _3723 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _525 = sqrt(1.0 - (isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0))));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _553 = (((_541.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _517;
    float _554 = (((_541.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _519;
    float _557 = fma(_525, _241, fma(_554, _248, _553 * _234));
    float _560 = fma(_525, _242, fma(_554, _249, _553 * _235));
    float _563 = fma(_525, _243, fma(_554, _250, _553 * _236));
    float _567 = inversesqrt(dot(vec3(_557, _560, _563), vec3(_557, _560, _563)));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _596 = _594.x;
    float _597 = 1.0 - _596;
    float _606 = (cbMtdParam._m0[19u].x + dot(vec4(_567 * _557, _567 * _560, _567 * _563, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_596 - _597) * cbMtdParam._m0[24u].z) + _597) * cbMtdParam._m0[21u].z);
    float _3734 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _607 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _609 = (-0.0) - cbMtdParam._m0[24u].x;
    float _611 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _611 : (isnan(_611) ? 1.0 : min(_611, 1.0));
    float _619 = _607 - ((_607 * TEXCOORD_8.x) * _612);
    float _620 = _607 - ((_607 * TEXCOORD_8.y) * _612);
    float _621 = _607 - ((_607 * TEXCOORD_8.z) * _612);
    float _628 = (_619 * ((_464.x * cbMtdParam._m0[18u].x) - _439)) + _439;
    float _629 = (_620 * ((_464.y * cbMtdParam._m0[18u].y) - _442)) + _442;
    float _630 = (_621 * ((_464.z * cbMtdParam._m0[18u].z) - _445)) + _445;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _644 = _642.x;
    float _645 = 1.0 - _644;
    float _671 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_644 - _645) * cbMtdParam._m0[24u].w) + _645) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3755 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _680 = ((((cbMtdParam._m0[10u].x - _628) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _672) + _628;
    float _681 = ((((cbMtdParam._m0[10u].y - _629) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _672) + _629;
    float _682 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _630)) * _672) + _630;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _710 = _708.x;
    float _727 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _710) * _426) + _710;
    float _731 = ((_694.x - _727) * cbMtdParam._m0[19u].z) + _727;
    float _733 = _731 - (_731 * _619);
    float _735 = _733 - (_733 * _672);
    float _739 = (cbMtdParam._m0[19u].w * (_541.z - _514)) + _514;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _760 = (_753.x * 2.0) + (-1.0);
    float _761 = (_753.y * 2.0) + (-1.0);
    float _762 = dot(vec2(_760, _761), vec2(_760, _761));
    float _3766 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _770 = ((_753.z - _739) * _619) + _739;
    float _773 = ((cbMtdParam._m0[23u].x - _770) * _672) + _770;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _798 = (_792.x * 2.0) + (-1.0);
    float _799 = (_792.y * 2.0) + (-1.0);
    float _800 = dot(vec2(_798, _799), vec2(_798, _799));
    float _3777 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _815 = ((sqrt(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) - _525) * _621) + _525;
    float _818 = (((_760 - _553) * _619) + _553) + (cbMtdParam._m0[21u].x * _553);
    float _819 = (((_761 - _554) * _620) + _554) + (cbMtdParam._m0[21u].x * _554);
    float _830 = (((_798 - _818) + (_818 * cbMtdParam._m0[22u].z)) * _672) + _818;
    float _831 = (((_799 - _819) + (_819 * cbMtdParam._m0[22u].z)) * _672) + _819;
    float _832 = (_672 * (sqrt(1.0 - (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) - _815)) + _815;
    float _834 = cbMtdParam._m0[22u].x + _541.w;
    float _837 = fma(_832, _241, fma(_831, _248, _830 * _234));
    float _840 = fma(_832, _242, fma(_831, _249, _830 * _235));
    float _843 = fma(_832, _243, fma(_831, _250, _830 * _236));
    float _847 = inversesqrt(dot(vec3(_837, _840, _843), vec3(_837, _840, _843)));
    float _848 = _847 * _837;
    float _849 = _847 * _840;
    float _850 = _847 * _843;
    float _3788 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _851 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _3810 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3821 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3832 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3843 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _856 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _870 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _910);
    float _921 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    float _935 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _936 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _954 = fma(_850, cbSceneParam._m0[5u].z, fma(_849, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _848));
    float _957 = fma(_850, cbSceneParam._m0[6u].z, fma(_849, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _848));
    float _960 = fma(_850, cbSceneParam._m0[7u].z, fma(_849, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _848));
    uint _974 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _980 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0)))) * cbInstanceData._m0[_974].x;
    float _981 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0)))) * cbInstanceData._m0[_974].y;
    float _982 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_974].z;
    float _3854 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _983 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _3865 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _984 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _985 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
    float _986 = 1.0 - _856;
    float _987 = _983 * _986;
    float _988 = _984 * _986;
    float _989 = _985 * _986;
    float _994 = (_983 + (-0.039999999105930328369140625)) * _856;
    float _995 = (_984 + (-0.039999999105930328369140625)) * _856;
    float _996 = (_985 + (-0.039999999105930328369140625)) * _856;
    float _997 = _994 + 0.039999999105930328369140625;
    float _999 = _995 + 0.039999999105930328369140625;
    float _1000 = _996 + 0.039999999105930328369140625;
    vec4 _1009 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _935, cbSceneParam._m0[86u].y * _936));
    float _1013 = ((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) * TEXCOORD_5.w) * _1009.x;
    float _1014 = dot(vec3(_848, _849, _850), vec3(_927, _928, _929));
    float _1017 = _1014 * 2.0;
    float _1021 = (_1017 * _848) - _927;
    float _1022 = (_1017 * _849) - _928;
    float _1023 = (_1017 * _850) - _929;
    float _1027 = abs(dot(vec3(_927, _928, _929), vec3(_848, _849, _850)));
    float _3887 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1029 = sqrt(_851);
    float _1042 = exp2((_1029 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1029 * 3.0));
    float _1048 = (1.0 - _1042) * ((_1029 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1049 = _1042 * _1029;
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1085 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1085, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1077));
        float _1115 = fma(_1085, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1077));
        float _1119 = fma(_1085, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1077));
        float _1144 = _1077 + _848;
        float _1145 = _1081 + _849;
        float _1146 = _1085 + _850;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_848, _849, _850), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _3913 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _3924 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _3935 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_848, _849, _850), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _3946 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3957 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _3968 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_848, _849, _850), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4001 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1426 = fma(_1085, cbModelParam._m0[30u].z, fma(_1081, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1077));
        float _1430 = fma(_1085, cbModelParam._m0[31u].z, fma(_1081, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1077));
        float _1434 = fma(_1085, cbModelParam._m0[32u].z, fma(_1081, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1077));
        float _1457 = _1077 + _848;
        float _1458 = _1081 + _849;
        float _1459 = _1085 + _850;
        float _1469 = fma(_1459, cbModelParam._m0[30u].z, fma(_1458, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1457)) - _1426;
        float _1470 = fma(_1459, cbModelParam._m0[31u].z, fma(_1458, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1457)) - _1430;
        float _1471 = fma(_1459, cbModelParam._m0[32u].z, fma(_1458, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1457)) - _1434;
        float _1475 = inversesqrt(dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471)));
        float _1488 = ((_1475 * _1469) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1426 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1489 = ((_1475 * _1470) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1430 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1490 = ((_1475 * _1471) / cbModelParam._m0[35u].z) + ((((((_1434 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1488, _1489, _1490), 0.0);
        float _1525 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1492.x + (-0.5));
        float _1527 = _1525 * (_1492.y + (-0.5));
        float _1528 = _1525 * (_1492.z + (-0.5));
        float _1535 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1499.x + (-0.5));
        float _1537 = _1535 * (_1499.y + (-0.5));
        float _1538 = _1535 * (_1499.z + (-0.5));
        float _1545 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1506.x + (-0.5));
        float _1547 = _1545 * (_1506.y + (-0.5));
        float _1548 = _1545 * (_1506.z + (-0.5));
        float _1555 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1513.x + (-0.5));
        float _1557 = _1555 * (_1513.y + (-0.5));
        float _1558 = _1555 * (_1513.z + (-0.5));
        float _1559 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1560 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1561 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1562 = _1526 * 0.5;
        float _1563 = _1536 * 0.5;
        float _1564 = _1546 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_848, _849, _850), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1559 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4064 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1589 + 1.0))) + _1594) * _1559;
        float _1604 = _1527 * 0.5;
        float _1605 = _1537 * 0.5;
        float _1606 = _1547 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_848, _849, _850), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1560 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4097 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1631 + 1.0))) + _1636) * _1560;
        float _1646 = _1528 * 0.5;
        float _1647 = _1538 * 0.5;
        float _1648 = _1548 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_848, _849, _850), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4108 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1561 + 9.9999997473787516355514526367188e-06);
        float _4119 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4130 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_1673 + 1.0))) + _1678) * _1561;
        _1695 = _1528;
        _1696 = _1527;
        _1697 = _1526;
        _1698 = _1538;
        _1699 = _1537;
        _1700 = _1536;
        _1701 = _1548;
        _1702 = _1547;
        _1703 = _1546;
        _1704 = _1561;
        _1705 = _1560;
        _1706 = _1559;
        _1707 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1708 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
        _1709 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
    }
    else
    {
        _1695 = _1387;
        _1696 = _1387;
        _1697 = _1387;
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = _1387;
        _1707 = 0.0;
        _1708 = 0.0;
        _1709 = 0.0;
    }
    float _1719 = (cbModelParam._m0[1u].x * (_1707 - _1399)) + _1399;
    float _1720 = (cbModelParam._m0[1u].x * (_1708 - _1400)) + _1400;
    float _1721 = (cbModelParam._m0[1u].x * (_1709 - _1401)) + _1401;
    float _1742 = fma(_1721, cbSceneParam._m0[89u].z, fma(_1720, cbSceneParam._m0[89u].y, _1719 * cbSceneParam._m0[89u].x));
    float _1745 = fma(_1721, cbSceneParam._m0[90u].z, fma(_1720, cbSceneParam._m0[90u].y, _1719 * cbSceneParam._m0[90u].x));
    float _1748 = fma(_1721, cbSceneParam._m0[91u].z, fma(_1720, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1719));
    float _1763 = _1021 * 0.5;
    float _1764 = _1022 * 0.5;
    float _1765 = _1023 * 0.5;
    float _1766 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1697, _1700, _1703, _1706));
    float _1769 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1696, _1699, _1702, _1705));
    float _1772 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1695, _1698, _1701, _1704));
    float _1806;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1779 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1783 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1787 = dot(vec4(_1763, _1764, _1765, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1794 = dot(vec4(cbModelParam._m0[39u]), vec4(_1763, _1764, _1765, 1.0));
        _1806 = dot(vec3(isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1794) ? 0.0 : (isnan(0.0) ? _1794 : max(0.0, _1794))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1806 = 1.0;
    }
    float _1817;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1808 = dot(vec4(cbModelParam._m0[40u]), vec4(_1763, _1764, _1765, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1821 = (_1817 * cbModelParam._m0[1u].x) + (_1806 * (1.0 - cbModelParam._m0[1u].x));
    float _1831 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _851);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1831 : min(cbModelParam._m0[25u].z, _1831));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1879 = fma(_1085, cbModelParam._m0[13u].z, fma(_1081, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1077)) + cbModelParam._m0[13u].w;
        float _1883 = fma(_1085, cbModelParam._m0[14u].z, fma(_1081, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1077)) + cbModelParam._m0[14u].w;
        float _1887 = fma(_1085, cbModelParam._m0[15u].z, fma(_1081, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1077)) + cbModelParam._m0[15u].w;
        float _1890 = fma(_1023, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1021));
        float _1893 = fma(_1023, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1021));
        float _1896 = fma(_1023, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1021));
        float _1924;
        if (_1890 > 0.0)
        {
            _1924 = abs((1.0 - _1879) / _1890);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1879 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1924 = frontier_phi_14_12_ladder;
        }
        float _2126;
        if (_1893 > 0.0)
        {
            _2126 = abs((1.0 - _1883) / _1893);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1883 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2126 = frontier_phi_23_19_ladder;
        }
        float _2380;
        if (_1896 > 0.0)
        {
            _2380 = abs((1.0 - _1887) / _1896);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1887 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2380 = frontier_phi_35_30_ladder;
        }
        float _2382 = isnan(_2126) ? _1924 : (isnan(_1924) ? _2126 : min(_1924, _2126));
        float _2383 = isnan(_2380) ? _2382 : (isnan(_2382) ? _2380 : min(_2382, _2380));
        float _2387 = (_2383 * _1890) + _1879;
        float _2388 = (_2383 * _1893) + _1883;
        float _2389 = (_2383 * _1896) + _1887;
        float _2390 = _2383 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2390;
        float _2394 = _2390 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 > _2394) || ((_2388 < _2392) || ((_2387 < _2392) || (_2387 > _2394))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2389, cbModelParam._m0[9u].z, fma(_2388, cbModelParam._m0[9u].y, _2387 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2389, cbModelParam._m0[10u].z, fma(_2388, cbModelParam._m0[10u].y, _2387 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2389, cbModelParam._m0[11u].z, fma(_2388, cbModelParam._m0[11u].y, _2387 * cbModelParam._m0[11u].x))), _1832);
            frontier_phi_13_35_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1912 = frontier_phi_13_35_ladder_2;
        _1914 = frontier_phi_13_35_ladder_1;
        _1916 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1900 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1021, _1022, _1023), _1832);
        _1912 = _1900.x * cbModelParam._m0[1u].y;
        _1914 = _1900.y * cbModelParam._m0[1u].y;
        _1916 = _1900.z * cbModelParam._m0[1u].y;
    }
    float _1920 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _851);
    float _1921 = isnan(_1920) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1920 : min(cbModelParam._m0[25u].w, _1920));
    float _2010;
    float _2012;
    float _2014;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1974 = fma(_1085, cbModelParam._m0[21u].z, fma(_1081, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1077)) + cbModelParam._m0[21u].w;
        float _1978 = fma(_1085, cbModelParam._m0[22u].z, fma(_1081, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1077)) + cbModelParam._m0[22u].w;
        float _1982 = fma(_1085, cbModelParam._m0[23u].z, fma(_1081, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1077)) + cbModelParam._m0[23u].w;
        float _1985 = fma(_1023, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1021));
        float _1988 = fma(_1023, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1021));
        float _1991 = fma(_1023, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1021));
        float _2131;
        if (_1985 > 0.0)
        {
            _2131 = abs((1.0 - _1974) / _1985);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1974 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2131 = frontier_phi_25_21_ladder;
        }
        float _2407;
        if (_1988 > 0.0)
        {
            _2407 = abs((1.0 - _1978) / _1988);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1978 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2407 = frontier_phi_37_32_ladder;
        }
        float _2620;
        if (_1991 > 0.0)
        {
            _2620 = abs((1.0 - _1982) / _1991);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1991 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1982 + 1.0) / _1991);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2620 = frontier_phi_46_43_ladder;
        }
        float _2622 = isnan(_2407) ? _2131 : (isnan(_2131) ? _2407 : min(_2131, _2407));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1985) + _1974;
        float _2628 = (_2623 * _1988) + _1978;
        float _2629 = (_2623 * _1991) + _1982;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1921);
            frontier_phi_22_46_ladder = _2828.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2828.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2828.x * cbModelParam._m0[1u].z;
        }
        _2010 = frontier_phi_22_46_ladder_2;
        _2012 = frontier_phi_22_46_ladder_1;
        _2014 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1021, _1022, _1023), _1921);
        _2010 = _1994.x * cbModelParam._m0[1u].z;
        _2012 = _1994.y * cbModelParam._m0[1u].z;
        _2014 = _1994.z * cbModelParam._m0[1u].z;
    }
    float _2027 = (((_1048 * _997) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2010 - _1912)) + _1912);
    float _2029 = (((_1048 * _999) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2012 - _1914)) + _1914);
    float _2031 = (((_1048 * _1000) + _1049) * _1013) * ((cbModelParam._m0[1u].w * (_2014 - _1916)) + _1916);
    float _2034 = fma(_2031, cbSceneParam._m0[89u].z, fma(_2029, cbSceneParam._m0[89u].y, _2027 * cbSceneParam._m0[89u].x));
    float _2037 = fma(_2031, cbSceneParam._m0[90u].z, fma(_2029, cbSceneParam._m0[90u].y, _2027 * cbSceneParam._m0[90u].x));
    float _2040 = fma(_2031, cbSceneParam._m0[91u].z, fma(_2029, cbSceneParam._m0[91u].y, _2027 * cbSceneParam._m0[91u].x));
    uvec4 _2050 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2052 = _2050.x * 14u;
    uint _2053 = _2052 + 13u;
    float _2060 = _1013 + (-1.0);
    float _2065 = (cbLight._m0[_2053].x * _2060) + 1.0;
    float _2066 = (cbLight._m0[_2053].y * _2060) + 1.0;
    float _2067 = (cbLight._m0[_2053].z * _2060) + 1.0;
    float _2068 = (cbLight._m0[_2053].w * _2060) + 1.0;
    uint _2069 = _2052 + 5u;
    float _2075 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
    uint _2079 = _2052 + 4u;
    float _2085 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2089 = _2052 | 1u;
    float _2100 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_848, _849, _850));
    float _2103 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_848, _849, _850));
    float _4266 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _4277 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2108 = (isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * 0.3183098733425140380859375;
    float _2110 = (isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.3183098733425140380859375;
    float _2117 = ((cbLight._m0[_2069].x * _2075) * _2110) + ((cbLight._m0[_2079].x * _2085) * _2108);
    float _2118 = ((_2075 * cbLight._m0[_2069].y) * _2110) + ((_2085 * cbLight._m0[_2079].y) * _2108);
    float _2119 = ((_2075 * cbLight._m0[_2069].z) * _2110) + ((_2085 * cbLight._m0[_2079].z) * _2108);
    uvec4 _2123 = floatBitsToUint(cbLight._m0[_2052 + 12u]);
    bool _2125 = _2123.x == 0u;
    float _2136;
    float _2138;
    float _2140;
    if (_2125)
    {
        _2136 = _2117;
        _2138 = _2118;
        _2140 = _2119;
    }
    else
    {
        uint _2144 = _2052 + 6u;
        float _2160 = (dot(vec3(cbLight._m0[_2052 + 2u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2161 = _2160 * _2160;
        float _4288 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2162 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2163 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2136 = (((cbLight._m0[_2144].x * 0.3183098733425140380859375) * _2162) * _2163) + _2117;
        _2138 = (((cbLight._m0[_2144].y * 0.3183098733425140380859375) * _2162) * _2163) + _2118;
        _2140 = (((cbLight._m0[_2144].z * 0.3183098733425140380859375) * _2162) * _2163) + _2119;
    }
    bool _2143 = _2123.y == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2143)
    {
        _2181 = _2136;
        _2183 = _2138;
        _2185 = _2140;
    }
    else
    {
        uint _2351 = _2052 + 7u;
        float _2367 = (dot(vec3(cbLight._m0[_2052 + 3u].xyz), vec3(_848, _849, _850)) * 0.5) + 0.5;
        float _2368 = _2367 * _2367;
        float _4304 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2369 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _2370 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2181 = (((cbLight._m0[_2351].x * 0.3183098733425140380859375) * _2369) * _2370) + _2136;
        _2183 = (((cbLight._m0[_2351].y * 0.3183098733425140380859375) * _2369) * _2370) + _2138;
        _2185 = (((cbLight._m0[_2351].z * 0.3183098733425140380859375) * _2369) * _2370) + _2140;
    }
    uint _2188 = _2052 + 8u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2052].w)) * _851) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_2052].x + _927;
    float _2204 = cbLight._m0[_2052].y + _928;
    float _2205 = cbLight._m0[_2052].z + _929;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2052].xyz));
    float _4320 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _4331 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _2217 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2218 = dot(vec3(_848, _849, _850), vec3(_2210, _2211, _2212));
    float _4342 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _2222 = dot(vec3(cbLight._m0[_2052].xyz), vec3(_2210, _2211, _2212));
    float _4353 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2226 = _2202 * _2202;
    float _2230 = ((_2221 * _2221) * (_2226 + (-1.0))) + 1.0;
    float _2238 = exp2(log2(1.0 - (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0)))) * 5.0);
    float _2239 = 0.959999978542327880859375 - _994;
    float _2241 = 0.959999978542327880859375 - _995;
    float _2242 = 0.959999978542327880859375 - _996;
    float _2249 = 1.0 - _2202;
    float _2260 = (0.5 / (((_2217 * ((_2216 * _2249) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2249) + _2202) * _2216))) * _2216;
    float _4364 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2262 = (isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * (_2226 / ((_2230 * _2230) * 3.141590118408203125));
    uint _2273 = _2052 + 9u;
    float _2284 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _851) * 0.949999988079071044921875);
    float _2285 = _2284 * _2284;
    float _2286 = cbLight._m0[_2089].x + _927;
    float _2287 = cbLight._m0[_2089].y + _928;
    float _2288 = cbLight._m0[_2089].z + _929;
    float _2292 = inversesqrt(dot(vec3(_2286, _2287, _2288), vec3(_2286, _2287, _2288)));
    float _2293 = _2292 * _2286;
    float _2294 = _2292 * _2287;
    float _2295 = _2292 * _2288;
    float _2296 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2089].xyz));
    float _4375 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2300 = dot(vec3(_848, _849, _850), vec3(_2293, _2294, _2295));
    float _4386 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2303 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2304 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2293, _2294, _2295));
    float _4397 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2308 = _2285 * _2285;
    float _2312 = ((_2303 * _2303) * (_2308 + (-1.0))) + 1.0;
    float _2319 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
    float _2326 = 1.0 - _2285;
    float _2336 = (0.5 / (((_2217 * ((_2299 * _2326) + _2285)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2326) + _2285) * _2299))) * _2299;
    float _4408 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2308 / ((_2312 * _2312) * 3.141590118408203125));
    float _2348 = (((((_2319 * _2239) + _997) * cbLight._m0[_2273].x) * _2338) * _2075) + (((((_2238 * _2239) + _997) * cbLight._m0[_2188].x) * _2262) * _2085);
    float _2349 = (((((_2319 * _2241) + _999) * cbLight._m0[_2273].y) * _2338) * _2075) + (((((_2238 * _2241) + _999) * cbLight._m0[_2188].y) * _2262) * _2085);
    float _2350 = (((((_2319 * _2242) + _1000) * cbLight._m0[_2273].z) * _2338) * _2075) + (((((_2238 * _2242) + _1000) * cbLight._m0[_2188].z) * _2262) * _2085);
    float _2412;
    float _2414;
    float _2416;
    if (_2125)
    {
        _2412 = _2348;
        _2414 = _2349;
        _2416 = _2350;
    }
    else
    {
        uint _2418 = _2052 + 2u;
        uint _2422 = _2052 + 10u;
        float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2418].w)) * _851) * 0.949999988079071044921875);
        float _2437 = _2436 * _2436;
        float _2438 = cbLight._m0[_2418].x + _927;
        float _2439 = cbLight._m0[_2418].y + _928;
        float _2440 = cbLight._m0[_2418].z + _929;
        float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
        float _2445 = _2444 * _2438;
        float _2446 = _2444 * _2439;
        float _2447 = _2444 * _2440;
        float _2448 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2418].xyz));
        float _4419 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2451 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2452 = dot(vec3(_848, _849, _850), vec3(_2445, _2446, _2447));
        float _4430 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2455 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2456 = dot(vec3(cbLight._m0[_2418].xyz), vec3(_2445, _2446, _2447));
        float _4441 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2460 = _2437 * _2437;
        float _2464 = ((_2455 * _2455) * (_2460 + (-1.0))) + 1.0;
        float _2471 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
        float _2478 = 1.0 - _2437;
        float _2488 = (0.5 / (((_2217 * ((_2451 * _2478) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2478) + _2437) * _2451))) * _2451;
        float _4452 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2490 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2460 / ((_2464 * _2464) * 3.141590118408203125));
        float _2491 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2412 = (((((_2471 * _2239) + _997) * cbLight._m0[_2422].x) * _2490) * _2491) + _2348;
        _2414 = (((((_2471 * _2241) + _999) * cbLight._m0[_2422].y) * _2490) * _2491) + _2349;
        _2416 = (((((_2471 * _2242) + _1000) * cbLight._m0[_2422].z) * _2490) * _2491) + _2350;
    }
    float _2526;
    float _2528;
    float _2530;
    if (_2143)
    {
        _2526 = _2412;
        _2528 = _2414;
        _2530 = _2416;
    }
    else
    {
        uint _2537 = _2052 + 3u;
        uint _2541 = _2052 + 11u;
        float _2555 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2537].w)) * _851) * 0.949999988079071044921875);
        float _2556 = _2555 * _2555;
        float _2557 = cbLight._m0[_2537].x + _927;
        float _2558 = cbLight._m0[_2537].y + _928;
        float _2559 = cbLight._m0[_2537].z + _929;
        float _2563 = inversesqrt(dot(vec3(_2557, _2558, _2559), vec3(_2557, _2558, _2559)));
        float _2564 = _2563 * _2557;
        float _2565 = _2563 * _2558;
        float _2566 = _2563 * _2559;
        float _2567 = dot(vec3(_848, _849, _850), vec3(cbLight._m0[_2537].xyz));
        float _4468 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2570 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2571 = dot(vec3(_848, _849, _850), vec3(_2564, _2565, _2566));
        float _4479 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2574 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _2575 = dot(vec3(cbLight._m0[_2537].xyz), vec3(_2564, _2565, _2566));
        float _4490 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2579 = _2556 * _2556;
        float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
        float _2590 = exp2(log2(1.0 - (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0)))) * 5.0);
        float _2597 = 1.0 - _2556;
        float _2607 = (0.5 / (((_2217 * ((_2570 * _2597) + _2556)) + 9.9999999392252902907785028219223e-09) + (((_2217 * _2597) + _2556) * _2570))) * _2570;
        float _4501 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2609 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
        float _2610 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
        _2526 = (((((_2590 * _2239) + _997) * cbLight._m0[_2541].x) * _2609) * _2610) + _2412;
        _2528 = (((((_2590 * _2241) + _999) * cbLight._m0[_2541].y) * _2609) * _2610) + _2414;
        _2530 = (((((_2590 * _2242) + _1000) * cbLight._m0[_2541].z) * _2609) * _2610) + _2416;
    }
    float _2745;
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_2050.y == 0u)
    {
        float _2685 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2686 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2685;
        float _2687 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2685;
        float _2688 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2685;
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.x;
        uint _2712 = uint((float(_2700.y) * floor(float(uint(cbSceneParam._m0[85u].y * _936) / _2701))) + floor(float(uint(cbSceneParam._m0[85u].x * _935) / _2701)));
        float _2722 = (log2(_2688 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2723 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        uint _2726 = uint(isnan(14.0) ? _2723 : (isnan(_2723) ? 14.0 : min(_2723, 14.0)));
        uvec4 _2731 = texelFetch(g_lightClusterGridBuffer, int(((_2726 << 2u) + (_2712 << 6u)) >> 2u));
        uint _2732 = _2731.x;
        uint _2733 = _2700.z;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((((1u << ((_2733 >> 4u) & 15u)) + 4294967295u) & _2732) == 0u) || ((_2733 & 240u) == 0u))
        {
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
        }
        else
        {
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2993)
                {
                    frontier_phi_61_pred = _2977;
                    frontier_phi_61_pred_1 = _2982;
                    frontier_phi_61_pred_2 = _2981;
                    frontier_phi_61_pred_3 = _2980;
                    frontier_phi_61_pred_4 = _2979;
                    frontier_phi_61_pred_5 = _2978;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2992;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2983 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _2686;
                        float _3168 = _3127.y - _2687;
                        float _3169 = _3127.z - _2688;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_954, _957, _960), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4527 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _2686;
                        float _3203 = (-0.0) - _2687;
                        float _3204 = (-0.0) - _2688;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3219 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3220 = 1.0 - _1029;
                        float _3227 = sqrt(1.0 - ((1.0 - (_3220 * _3220)) * (1.0 - (_3219 * _3219))));
                        float _3228 = _3227 * _3227;
                        float _3229 = _3228 * _3228;
                        float _3230 = _3209 + _3174;
                        float _3231 = _3210 + _3175;
                        float _3232 = _3211 + _3176;
                        float _3236 = inversesqrt(dot(vec3(_3230, _3231, _3232), vec3(_3230, _3231, _3232)));
                        float _3240 = dot(vec3(_954, _957, _960), vec3(_3209, _3210, _3211));
                        float _4543 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3244 = dot(vec3(_954, _957, _960), vec3(_3236 * _3230, _3236 * _3231, _3236 * _3232));
                        float _4554 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
                        float _3247 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                        float _3251 = ((_3247 * _3247) * (_3229 + (-1.0))) + 1.0;
                        float _3252 = _3187 * _3228;
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3177) + _3253;
                        float _4565 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                        float _3258 = 1.0 - _3228;
                        float _3268 = (0.5 / (((_3257 * ((_3243 * _3258) + _3228)) + 9.9999999392252902907785028219223e-09) + (((_3257 * _3258) + _3228) * _3243))) * _3257;
                        float _4576 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
                        float _3279 = (((_3229 * 3.1415927410125732421875) * (isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0)))) / ((_3251 * _3251) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3036 = (_3198 * _3146.x) + _3104;
                        _3037 = (_3198 * _3146.y) + _3105;
                        _3038 = (_3198 * _3146.z) + _3106;
                        _3033 = (_3279 * _3163.x) + _3101;
                        _3034 = (_3279 * _3163.y) + _3102;
                        _3035 = (_3279 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_61_pred = _3033;
                    frontier_phi_61_pred_1 = _3038;
                    frontier_phi_61_pred_2 = _3037;
                    frontier_phi_61_pred_3 = _3036;
                    frontier_phi_61_pred_4 = _3035;
                    frontier_phi_61_pred_5 = _3034;
                }
                _2834 = frontier_phi_61_pred;
                _2844 = frontier_phi_61_pred_1;
                _2842 = frontier_phi_61_pred_2;
                _2840 = frontier_phi_61_pred_3;
                _2838 = frontier_phi_61_pred_4;
                _2836 = frontier_phi_61_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2834;
                    _2978 = _2836;
                    _2979 = _2838;
                    _2980 = _2840;
                    _2981 = _2842;
                    _2982 = _2844;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
        }
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.z;
        uint _2850 = (_2848 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2850) & _2732) == 0u)
        {
            _2945 = _2833;
            _2947 = _2835;
            _2949 = _2837;
            _2951 = _2839;
            _2953 = _2841;
            _2955 = _2843;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
            float _2971 = _2970 * _2686;
            float _2972 = _2970 * _2687;
            float _2973 = _2970 * _2688;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2850 < ((_2848 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3084 = _2833;
                float _3085 = _2835;
                float _3086 = _2837;
                float _3087 = _2839;
                float _3088 = _2841;
                float _3089 = _2843;
                uint _3090 = _2850;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2726 << 5u) + (_2712 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3100)
                    {
                        frontier_phi_67_pred = _3087;
                        frontier_phi_67_pred_1 = _3088;
                        frontier_phi_67_pred_2 = _3089;
                        frontier_phi_67_pred_3 = _3086;
                        frontier_phi_67_pred_4 = _3085;
                        frontier_phi_67_pred_5 = _3084;
                    }
                    else
                    {
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3289;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        float _3299 = _3086;
                        float _3300 = _3087;
                        float _3301 = _3088;
                        float _3302 = _3089;
                        uint _3303 = _3099;
                        uint _3304;
                        vec4 _3329;
                        float _3330;
                        vec4 _3345;
                        vec3 _3357;
                        vec4 _3372;
                        vec4 _3388;
                        float _3434;
                        bool _3435;
                        for (;;)
                        {
                            uint _3314 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3303));
                            _3304 = (_3303 + 4294967295u) & _3303;
                            uint _3316 = _3314 * 40u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            _3330 = _3329.w;
                            uint _3332 = (_3314 * 40u) + 4u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3347 = (_3314 * 40u) + 8u;
                            _3357 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x));
                            uint _3359 = (_3314 * 40u) + 16u;
                            _3372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3359 + 3u)).x));
                            uint _3375 = (_3314 * 40u) + 20u;
                            _3388 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3375)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3375 + 3u)).x));
                            uint _3390 = (_3314 * 40u) + 24u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3409 = (_3314 * 40u) + 28u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3434 = fma(_2688, _3422.z, fma(_2687, _3422.y, _3422.x * _2686)) + _3422.w;
                            _3435 = !((fma(_2688, _3403.z, fma(_2687, _3403.y, _3403.x * _2686)) + _3403.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3435)
                            {
                                float _3462 = _3329.x - _2686;
                                float _3463 = _3329.y - _2687;
                                float _3464 = _3329.z - _2688;
                                float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                                float _3468 = inversesqrt(_3465);
                                float _3469 = _3468 * _3462;
                                float _3470 = _3468 * _3463;
                                float _3471 = _3468 * _3464;
                                float _3475 = 1.0 - (_3465 / (_3330 * _3330));
                                float _4587 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3480 = sqrt(_3465) * _3345.w;
                                float _3482 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                                float _3483 = _3482 * _3482;
                                float _3486 = ((1.0 - _3483) * dot(vec3(_3469, _3470, _3471), vec3(_954, _957, _960))) + _3483;
                                float _3489 = _3480 * _3480;
                                float _3493 = (fma(_2688, _3372.z, fma(_2687, _3372.y, _3372.x * _2686)) + _3372.w) / _3434;
                                float _3494 = (fma(_2688, _3388.z, fma(_2687, _3388.y, _3388.x * _2686)) + _3388.w) / _3434;
                                float _3498 = 1.0 - dot(vec2(_3493, _3494), vec2(_3493, _3494));
                                float _4603 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3500 = _3499 * (((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3476) / ((_3489 * 0.699999988079071044921875) + 1.0));
                                float _3512 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                                float _3513 = 1.0 - _1029;
                                float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                                float _3521 = _3520 * _3520;
                                float _3522 = _3521 * _3521;
                                float _3523 = _3469 - _2971;
                                float _3524 = _3470 - _2972;
                                float _3525 = _3471 - _2973;
                                float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                                float _3533 = dot(vec3(_954, _957, _960), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4614 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3537 = dot(vec3(_954, _957, _960), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                                float _4625 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
                                float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                                float _3545 = _3482 * _3521;
                                float _3546 = _3545 * _3545;
                                float _3552 = ((1.0 - _3546) * dot(vec3(_954, _957, _960), vec3(_3469, _3470, _3471))) + _3546;
                                float _4636 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
                                float _3554 = 1.0 - _3521;
                                float _3564 = (0.5 / (((_3553 * ((_3536 * _3554) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3521) * _3536))) * _3553;
                                float _4647 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3574 = (_3499 * _3476) * (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)))) / ((_3544 * _3544) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3574 * _3357.x;
                                frontier_phi_73_pred_1 = _3574 * _3357.y;
                                frontier_phi_73_pred_2 = _3500 * _3345.z;
                                frontier_phi_73_pred_3 = _3500 * _3345.y;
                                frontier_phi_73_pred_4 = _3500 * _3345.x;
                                frontier_phi_73_pred_5 = _3574 * _3357.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3578 = frontier_phi_73_pred;
                            _3579 = frontier_phi_73_pred_1;
                            _3583 = frontier_phi_73_pred_2;
                            _3582 = frontier_phi_73_pred_3;
                            _3581 = frontier_phi_73_pred_4;
                            _3580 = frontier_phi_73_pred_5;
                            _3287 = _3581 + _3300;
                            _3288 = _3582 + _3301;
                            _3289 = _3583 + _3302;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            _3286 = _3580 + _3299;
                            if (_3304 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3289;
                                _3303 = _3304;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3287;
                        frontier_phi_67_pred_1 = _3288;
                        frontier_phi_67_pred_2 = _3289;
                        frontier_phi_67_pred_3 = _3286;
                        frontier_phi_67_pred_4 = _3285;
                        frontier_phi_67_pred_5 = _3284;
                    }
                    _2952 = frontier_phi_67_pred;
                    _2954 = frontier_phi_67_pred_1;
                    _2956 = frontier_phi_67_pred_2;
                    _2950 = frontier_phi_67_pred_3;
                    _2948 = frontier_phi_67_pred_4;
                    _2946 = frontier_phi_67_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2946;
                        _3085 = _2948;
                        _3086 = _2950;
                        _3087 = _2952;
                        _3088 = _2954;
                        _3089 = _2956;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2954;
                frontier_phi_55_56_ladder_1 = _2956;
                frontier_phi_55_56_ladder_2 = _2952;
                frontier_phi_55_56_ladder_3 = _2950;
                frontier_phi_55_56_ladder_4 = _2948;
                frontier_phi_55_56_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_55_56_ladder = _2841;
                frontier_phi_55_56_ladder_1 = _2843;
                frontier_phi_55_56_ladder_2 = _2839;
                frontier_phi_55_56_ladder_3 = _2837;
                frontier_phi_55_56_ladder_4 = _2835;
                frontier_phi_55_56_ladder_5 = _2833;
            }
            _2945 = frontier_phi_55_56_ladder_5;
            _2947 = frontier_phi_55_56_ladder_4;
            _2949 = frontier_phi_55_56_ladder_3;
            _2951 = frontier_phi_55_56_ladder_2;
            _2953 = frontier_phi_55_56_ladder;
            _2955 = frontier_phi_55_56_ladder_1;
        }
        float _2960 = isnan(1.0) ? _1013 : (isnan(_1013) ? 1.0 : min(_1013, 1.0));
        _2745 = (_2960 * _2951) + _2181;
        _2747 = (_2960 * _2953) + _2183;
        _2749 = (_2960 * _2955) + _2185;
        _2751 = ((_2945 * _997) * _2960) + _2526;
        _2753 = ((_2947 * _999) * _2960) + _2528;
        _2755 = ((_2949 * _1000) * _2960) + _2530;
    }
    else
    {
        _2745 = _2181;
        _2747 = _2183;
        _2749 = _2185;
        _2751 = _2526;
        _2753 = _2528;
        _2755 = _2530;
    }
    float _4663 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _4674 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _4685 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    uint _2775 = _253 + 6u;
    float _2783 = _935 / cbSceneParam._m0[86u].x;
    float _2784 = _936 / cbSceneParam._m0[86u].y;
    vec4 _2798 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, (log2((isnan(cbSceneParam._m0[77u].w) ? _870 : (isnan(_870) ? cbSceneParam._m0[77u].w : min(_870, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2800 = _2798.x;
    float _2801 = _2798.y;
    float _2802 = _2798.z;
    float _2803 = _2798.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_870 > cbSceneParam._m0[78u].w)
    {
        float _2858 = isnan(_870) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _870 : min(cbSceneParam._m0[80u].w, _870));
        float _2859 = _2858 / _870;
        float _2870 = _2859 * _920;
        float _2871 = _921 * _2859;
        float _2872 = (-0.0) - _2871;
        float _2873 = _2859 * _922;
        float _2875 = (cbSceneParam._m0[77u].w * _2872) / _2858;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2871;
        float _2883 = sqrt(((_2870 * _2870) + (_2871 * _2871)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2858)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2872 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3008 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3046 = ((abs(_2883 / _2872) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2893 * _3017) - exp2(_2893 * _3018)) * _3006))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2783, _2784, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2803);
        _2895 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2800;
        _2897 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2801;
        _2899 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2802;
        _2901 = _3057 * _2803;
    }
    else
    {
        _2895 = _2800;
        _2897 = _2801;
        _2899 = _2802;
        _2901 = _2803;
    }
    float _2913 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2914 = _2913 == 3.0;
    float _2915 = log2(_2901);
    float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2745 + ((isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0))) * _1013))) + ((_2751 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2747 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1013))) + ((_2753 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2749 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1013))) + ((_2755 + ((isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0))) * _1821)) * cbPerFrame._m0[3u].x));
    float _2933 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2933 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.y = _2933 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.z = _2933 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.w = cbInstanceData._m0[_2775].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2775].w;
}


