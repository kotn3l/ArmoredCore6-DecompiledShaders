#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1387;
float _4052;
float _4053;
float _4054;
float _4055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _261 = uint(roundEven(NORMAL.w)) * 13u;
    uint _266 = _261 + 1u;
    uint _270 = _261 + 2u;
    float _279 = sqrt(((cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x) + (cbInstanceData._m0[_261].x * cbInstanceData._m0[_261].x)) + (cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x));
    float _280 = _279 * TEXCOORD.z;
    float _281 = _279 * TEXCOORD.w;
    vec4 _300 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _329 = _324.x * cbMtdParam._m0[11u].x;
    float _330 = _324.y * cbMtdParam._m0[11u].y;
    float _331 = _324.z * cbMtdParam._m0[11u].z;
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _280) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _281) + cbTextureTilingScale._m0[5u].w));
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _404 = _402.x;
    float _416 = dot(vec4(_404, _402.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _433 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_404 - _416) * cbMtdParam._m0[23u].w) + _416) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4064 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _434 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _447 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _300.x) * ((_434 * ((_350.x * cbMtdParam._m0[12u].x) - _329)) + _329);
    float _450 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _300.y) * ((_434 * ((_350.y * cbMtdParam._m0[12u].y) - _330)) + _330);
    float _453 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _300.z) * ((_434 * ((_350.z * cbMtdParam._m0[12u].z) - _331)) + _331);
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _280) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _281) + cbTextureTilingScale._m0[4u].w));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _490 = _488.x;
    float _491 = _488.y;
    float _492 = _488.z;
    float _501 = ((_471.z - _492) * _434) + _492;
    float _504 = ((((_471.x - _490) * _434) + _490) * 2.0) + (-1.0);
    float _506 = ((((_471.y - _491) * _434) + _491) * 2.0) + (-1.0);
    float _507 = dot(vec2(_504, _506), vec2(_504, _506));
    float _4075 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _280) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _281) + cbTextureTilingScale._m0[11u].w));
    float _555 = _553.x;
    float _556 = 1.0 - _555;
    float _565 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _568 = ((isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : min(_565, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _577 = (_568 - ((((((_555 - _556) * cbMtdParam._m0[24u].z) + _556) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _568))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4096 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _585 = (_578 * (cbMtdParam._m0[17u].x - _447)) + _447;
    float _586 = (_578 * (cbMtdParam._m0[17u].y - _450)) + _450;
    float _587 = (_578 * (cbMtdParam._m0[17u].z - _453)) + _453;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _280) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _281) + cbTextureTilingScale._m0[19u].w));
    float _601 = _599.x;
    float _602 = 1.0 - _601;
    float _627 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_601 - _602) * cbMtdParam._m0[24u].w) + _602) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4107 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _628 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _636 = ((((cbMtdParam._m0[10u].x - _585) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _628) + _585;
    float _637 = ((((cbMtdParam._m0[10u].y - _586) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _628) + _586;
    float _638 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _587)) * _628) + _587;
    vec4 _650 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _666 = _664.x;
    float _683 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _280) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _281) + cbTextureTilingScale._m0[9u].w)).x - _666) * _434) + _666;
    float _687 = ((_650.x - _683) * cbMtdParam._m0[19u].z) + _683;
    float _689 = _687 - (_687 * _578);
    float _691 = _689 - (_689 * _628);
    float _695 = (cbMtdParam._m0[19u].w * (_528.z - _501)) + _501;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _280) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _281) + cbTextureTilingScale._m0[15u].w));
    float _716 = (_709.x * 2.0) + (-1.0);
    float _717 = (_709.y * 2.0) + (-1.0);
    float _718 = dot(vec2(_716, _717), vec2(_716, _717));
    float _4118 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _726 = (_578 * (_709.z - _695)) + _695;
    float _729 = ((cbMtdParam._m0[23u].x - _726) * _628) + _726;
    vec4 _748 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _280) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _281) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _754 = (_748.x * 2.0) + (-1.0);
    float _755 = (_748.y * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _4129 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _764 = (((_528.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _504;
    float _765 = (((_528.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _506;
    float _777 = (((_716 - _764) + (cbMtdParam._m0[21u].x * _764)) * _578) + _764;
    float _778 = (((_717 - _765) + (cbMtdParam._m0[21u].x * _765)) * _578) + _765;
    float _779 = (_578 * (sqrt(1.0 - (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) - _512)) + _512;
    float _790 = (((_754 - _777) + (_777 * cbMtdParam._m0[22u].z)) * _628) + _777;
    float _791 = (((_755 - _778) + (_778 * cbMtdParam._m0[22u].z)) * _628) + _778;
    float _792 = ((sqrt(1.0 - (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) - _779) * _628) + _779;
    float _794 = cbMtdParam._m0[22u].x + _528.w;
    float _797 = fma(_792, _248 * NORMAL.x, fma(_791, _255 * TANGENT.x, (_241 * _233) * _790));
    float _800 = fma(_792, _248 * NORMAL.y, fma(_791, _255 * TANGENT.y, (_241 * _234) * _790));
    float _803 = fma(_792, _248 * NORMAL.z, fma(_791, _255 * TANGENT.z, (_241 * _235) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _4140 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _811 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4162 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4173 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4184 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4195 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _816 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _870 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _880 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _870);
    float _881 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _870);
    float _882 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _870);
    float _886 = inversesqrt(dot(vec3(_880, _881, _882), vec3(_880, _881, _882)));
    float _887 = _880 * _886;
    float _888 = _881 * _886;
    float _889 = _882 * _886;
    vec4 _894 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _896 = _894.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1068 = sqrt(((_880 * _880) + (_881 * _881)) + (_882 * _882));
        float _1074 = (cbMatDynParam._m0[5u].x * _1068) + cbMatDynParam._m0[5u].y;
        float _4206 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1079 = (cbMatDynParam._m0[5u].z * _1068) + cbMatDynParam._m0[5u].w;
        float _4217 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) - _1075)) + _1075) < ((_896 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _929 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _932 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _945 = _261 + 9u;
    uint _946 = _945 + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) * cbInstanceData._m0[_946].z;
    float _4228 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _4250 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _958 = 1.0 - _816;
    float _959 = _955 * _958;
    float _960 = _956 * _958;
    float _961 = _957 * _958;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _816;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _816;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _816;
    float _969 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _985 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_808, _809, _810), vec3(_887, _888, _889));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _808) - _887;
    float _994 = (_989 * _809) - _888;
    float _995 = (_989 * _810) - _889;
    float _999 = abs(dot(vec3(_887, _888, _889), vec3(_808, _809, _810)));
    float _4261 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_811);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1020 = (1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1021 = _1014 * _1001;
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1386;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1111 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1115 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1119 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1144 = _1049 + _808;
        float _1145 = _1053 + _809;
        float _1146 = _1057 + _810;
        float _1156 = fma(_1146, cbModelParam._m0[26u].z, fma(_1145, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144)) - _1111;
        float _1157 = fma(_1146, cbModelParam._m0[27u].z, fma(_1145, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144)) - _1115;
        float _1158 = fma(_1146, cbModelParam._m0[28u].z, fma(_1145, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144)) - _1119;
        float _1162 = inversesqrt(dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158)));
        float _1175 = ((_1162 * _1156) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1111 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1176 = ((_1162 * _1157) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1115 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1162 * _1158) / cbModelParam._m0[34u].z) + ((((((_1119 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1175, _1176, _1177), 0.0);
        float _1214 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1180.x + (-0.5));
        float _1216 = _1214 * (_1180.y + (-0.5));
        float _1217 = _1214 * (_1180.z + (-0.5));
        float _1224 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1187.x + (-0.5));
        float _1226 = _1224 * (_1187.y + (-0.5));
        float _1227 = _1224 * (_1187.z + (-0.5));
        float _1234 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1194.x + (-0.5));
        float _1236 = _1234 * (_1194.y + (-0.5));
        float _1237 = _1234 * (_1194.z + (-0.5));
        float _1244 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1201.x + (-0.5));
        float _1246 = _1244 * (_1201.y + (-0.5));
        float _1247 = _1244 * (_1201.z + (-0.5));
        float _1248 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = _1215 * 0.5;
        float _1252 = _1225 * 0.5;
        float _1253 = _1235 * 0.5;
        float _1254 = dot(vec3(_1251, _1252, _1253), vec3(_1251, _1252, _1253));
        float _1259 = (_1254 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1254);
        float _1268 = (dot(vec3(_808, _809, _810), vec3(_1259 * _1251, _1259 * _1252, _1259 * _1253)) + 1.0) * 0.5;
        float _4287 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1278 = sqrt(((_1252 * _1252) + (_1251 * _1251)) + (_1253 * _1253)) / (_1248 + 9.9999997473787516355514526367188e-06);
        float _4298 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1280 = _1279 * 2.0;
        float _1284 = (1.0 - _1279) / (_1279 + 1.0);
        float _4309 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
        float _1294 = ((((1.0 - _1285) * (_1280 + 2.0)) * exp2(log2(isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_1280 + 1.0))) + _1285) * _1248;
        float _1295 = _1216 * 0.5;
        float _1296 = _1226 * 0.5;
        float _1297 = _1236 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1311 = (dot(vec3(_808, _809, _810), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1320 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1322 = _1321 * 2.0;
        float _1326 = (1.0 - _1321) / (_1321 + 1.0);
        float _4342 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1336 = ((((1.0 - _1327) * (_1322 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1322 + 1.0))) + _1327) * _1249;
        float _1337 = _1217 * 0.5;
        float _1338 = _1227 * 0.5;
        float _1339 = _1237 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_808, _809, _810), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4375 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1364 + 1.0))) + _1369) * _1250;
        _1386 = _1217;
        _1388 = _1216;
        _1389 = _1215;
        _1390 = _1227;
        _1391 = _1226;
        _1392 = _1225;
        _1393 = _1237;
        _1394 = _1236;
        _1395 = _1235;
        _1396 = _1250;
        _1397 = _1249;
        _1398 = _1248;
        _1399 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)));
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
    }
    else
    {
        _1386 = _1387;
        _1388 = _1387;
        _1389 = _1387;
        _1390 = _1387;
        _1391 = _1387;
        _1392 = _1387;
        _1393 = _1387;
        _1394 = _1387;
        _1395 = _1387;
        _1396 = _1387;
        _1397 = _1387;
        _1398 = _1387;
        _1399 = 0.0;
        _1400 = 0.0;
        _1401 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1433 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1437 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1460 = _1049 + _808;
        float _1461 = _1053 + _809;
        float _1462 = _1057 + _810;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_808, _809, _810), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4416 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4427 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4438 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_808, _809, _810), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4471 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_808, _809, _810), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4504 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1387;
        _1699 = _1387;
        _1700 = _1387;
        _1701 = _1387;
        _1702 = _1387;
        _1703 = _1387;
        _1704 = _1387;
        _1705 = _1387;
        _1706 = _1387;
        _1707 = _1387;
        _1708 = _1387;
        _1709 = _1387;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1399)) + _1399;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1400)) + _1400;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1401)) + _1401;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _993 * 0.5;
    float _1767 = _994 * 0.5;
    float _1768 = _995 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1386, _1390, _1393, _1396));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1388, _1391, _1394, _1397));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1897 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1900 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1928 = frontier_phi_17_15_ladder;
        }
        float _2100;
        if (_1897 > 0.0)
        {
            _2100 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2100 = frontier_phi_26_22_ladder;
        }
        float _2395;
        if (_1900 > 0.0)
        {
            _2395 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2395 = frontier_phi_38_33_ladder;
        }
        float _2397 = isnan(_2100) ? _1928 : (isnan(_1928) ? _2100 : min(_1928, _2100));
        float _2398 = isnan(_2395) ? _2397 : (isnan(_2397) ? _2395 : min(_2397, _2395));
        float _2402 = (_2398 * _1894) + _1883;
        float _2403 = (_2398 * _1897) + _1887;
        float _2404 = (_2398 * _1900) + _1891;
        float _2405 = _2398 * 9.9999997473787516355514526367188e-05;
        float _2407 = (-1.0) - _2405;
        float _2409 = _2405 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2404 > _2409) || ((_2404 < _2407) || ((_2403 > _2409) || ((_2403 < _2407) || ((_2402 < _2407) || (_2402 > _2409))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2404, cbModelParam._m0[9u].z, fma(_2403, cbModelParam._m0[9u].y, _2402 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2404, cbModelParam._m0[10u].z, fma(_2403, cbModelParam._m0[10u].y, _2402 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2404, cbModelParam._m0[11u].z, fma(_2403, cbModelParam._m0[11u].y, _2402 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_16_38_ladder = _2549.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2549.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2549.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_16_38_ladder_2;
        _1918 = frontier_phi_16_38_ladder_1;
        _1920 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1835);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1993 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1996 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2105;
        if (_1990 > 0.0)
        {
            _2105 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2105 = frontier_phi_28_24_ladder;
        }
        float _2422;
        if (_1993 > 0.0)
        {
            _2422 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2422 = frontier_phi_40_35_ladder;
        }
        float _2760;
        if (_1996 > 0.0)
        {
            _2760 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2760 = frontier_phi_50_47_ladder;
        }
        float _2762 = isnan(_2422) ? _2105 : (isnan(_2105) ? _2422 : min(_2105, _2422));
        float _2763 = isnan(_2760) ? _2762 : (isnan(_2762) ? _2760 : min(_2762, _2760));
        float _2767 = (_2763 * _1990) + _1979;
        float _2768 = (_2763 * _1993) + _1983;
        float _2769 = (_2763 * _1996) + _1987;
        float _2770 = _2763 * 9.9999997473787516355514526367188e-05;
        float _2771 = (-1.0) - _2770;
        float _2773 = _2770 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2769 > _2773) || ((_2769 < _2771) || ((_2768 > _2773) || ((_2768 < _2771) || ((_2767 < _2771) || (_2767 > _2773))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2769, cbModelParam._m0[17u].z, fma(_2768, cbModelParam._m0[17u].y, _2767 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2769, cbModelParam._m0[18u].z, fma(_2768, cbModelParam._m0[18u].y, _2767 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2769, cbModelParam._m0[19u].z, fma(_2768, cbModelParam._m0[19u].y, _2767 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_25_50_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_25_50_ladder_2;
        _2017 = frontier_phi_25_50_ladder_1;
        _2019 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1925);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1020 * _969) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1020 * _971) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1020 * _972) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2091 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2092 = _2079 / _2091;
    float _2093 = _2083 / _2091;
    float _2094 = _2087 / _2091;
    float _2241;
    float _2242;
    float _2243;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2121 = ((uint(_2094 > cbSceneParam._m0[59u].y) + uint(_2094 > cbSceneParam._m0[59u].x)) + uint(_2094 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2122 = _2121 + 43u;
        uint _2130 = _2121 + 44u;
        uint _2138 = _2121 + 45u;
        uint _2146 = _2121 + 46u;
        float _2157 = fma(_2091, cbSceneParam._m0[_2122].w, fma(_2087, cbSceneParam._m0[_2122].z, fma(_2083, cbSceneParam._m0[_2122].y, _2079 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2091, cbSceneParam._m0[_2130].w, fma(_2087, cbSceneParam._m0[_2130].z, fma(_2083, cbSceneParam._m0[_2130].y, _2079 * cbSceneParam._m0[_2130].x)));
        float _2169 = fma(_2091, cbSceneParam._m0[_2146].w, fma(_2087, cbSceneParam._m0[_2146].z, fma(_2083, cbSceneParam._m0[_2146].y, _2079 * cbSceneParam._m0[_2146].x)));
        float _2174 = cbSceneParam._m0[33u].z * _2169;
        float _2176 = cbSceneParam._m0[33u].w * _2169;
        float _2179 = fma(_2091, cbSceneParam._m0[_2138].w, fma(_2087, cbSceneParam._m0[_2138].z, fma(_2083, cbSceneParam._m0[_2138].y, _2079 * cbSceneParam._m0[_2138].x))) / _2169;
        float _2227 = (cbSceneParam._m0[33u].x - sqrt(((_2093 * _2093) + (_2092 * _2092)) + (_2094 * _2094))) * cbSceneParam._m0[33u].y;
        float _4630 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2234 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2174 + _2157) / _2169, (_2176 + _2161) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2176 + _2157) / _2169, (_2161 - _2174) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 - _2174) / _2169, (_2161 - _2176) / _2169), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 - _2176) / _2169, (_2174 + _2161) / _2169), _2179), 0.0)).x), vec4(0.25)));
        _2241 = 1.0 - (_2234 * cbSceneParam._m0[34u].x);
        _2242 = 1.0 - (_2234 * cbSceneParam._m0[34u].y);
        _2243 = 1.0 - (_2234 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2241 = 1.0;
        _2242 = 1.0;
        _2243 = 1.0;
    }
    float _2307;
    float _2309;
    float _2311;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2295 = fma(_2091, cbSceneParam._m0[63u].w, fma(_2087, cbSceneParam._m0[63u].z, fma(_2083, cbSceneParam._m0[63u].y, _2079 * cbSceneParam._m0[63u].x)));
        float _2296 = fma(_2091, cbSceneParam._m0[60u].w, fma(_2087, cbSceneParam._m0[60u].z, fma(_2083, cbSceneParam._m0[60u].y, _2079 * cbSceneParam._m0[60u].x))) / _2295;
        float _2297 = fma(_2091, cbSceneParam._m0[61u].w, fma(_2087, cbSceneParam._m0[61u].z, fma(_2083, cbSceneParam._m0[61u].y, _2079 * cbSceneParam._m0[61u].x))) / _2295;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2296 >= cbSceneParam._m0[64u].x) && (_2297 >= cbSceneParam._m0[64u].y)) && (_2296 <= cbSceneParam._m0[64u].z)) && (_2297 <= cbSceneParam._m0[64u].w))
        {
            float _2435 = fma(_2091, cbSceneParam._m0[62u].w, fma(_2087, cbSceneParam._m0[62u].z, fma(_2083, cbSceneParam._m0[62u].y, _2079 * cbSceneParam._m0[62u].x))) / _2295;
            float _2439 = isnan(cbSceneParam._m0[41u].w) ? _2435 : (isnan(_2435) ? cbSceneParam._m0[41u].w : max(_2435, cbSceneParam._m0[41u].w));
            float _2482 = (cbSceneParam._m0[33u].x - sqrt(((_2093 * _2093) + (_2092 * _2092)) + (_2094 * _2094))) * cbSceneParam._m0[33u].y;
            float _4646 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
            float _2489 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2296, cbSceneParam._m0[33u].w + _2297), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2296, _2297 - cbSceneParam._m0[33u].z), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2296 - cbSceneParam._m0[33u].z, _2297 - cbSceneParam._m0[33u].w), _2439), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2296 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2297), _2439), 0.0)).x), vec4(0.25)));
            float _2493 = 1.0 - (_2489 * cbSceneParam._m0[34u].x);
            float _2494 = 1.0 - (_2489 * cbSceneParam._m0[34u].y);
            float _2495 = 1.0 - (_2489 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2495) ? _2243 : (isnan(_2243) ? _2495 : min(_2243, _2495));
            frontier_phi_37_36_ladder_1 = isnan(_2494) ? _2242 : (isnan(_2242) ? _2494 : min(_2242, _2494));
            frontier_phi_37_36_ladder_2 = isnan(_2493) ? _2241 : (isnan(_2241) ? _2493 : min(_2241, _2493));
        }
        else
        {
            frontier_phi_37_36_ladder = _2243;
            frontier_phi_37_36_ladder_1 = _2242;
            frontier_phi_37_36_ladder_2 = _2241;
        }
        _2307 = frontier_phi_37_36_ladder_2;
        _2309 = frontier_phi_37_36_ladder_1;
        _2311 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2307 = _2241;
        _2309 = _2242;
        _2311 = _2243;
    }
    uvec4 _2316 = floatBitsToUint(cbInstanceData._m0[_261 + 5u]);
    uint _2318 = _2316.x * 14u;
    uint _2319 = _2318 + 13u;
    float _2326 = _985 + (-1.0);
    float _2331 = (cbLight._m0[_2319].x * _2326) + 1.0;
    float _2332 = (cbLight._m0[_2319].y * _2326) + 1.0;
    float _2333 = (cbLight._m0[_2319].z * _2326) + 1.0;
    float _2334 = (cbLight._m0[_2319].w * _2326) + 1.0;
    uint _2335 = _2318 + 5u;
    float _2341 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
    uint _2345 = _2318 + 4u;
    float _2354 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2358 = _2318 | 1u;
    float _2369 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_808, _809, _810));
    float _2372 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_808, _809, _810));
    float _4682 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _4693 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2377 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2379 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2386 = ((cbLight._m0[_2335].x * _2341) * _2379) + (((cbLight._m0[_2345].x * _2307) * _2354) * _2377);
    float _2387 = ((_2341 * cbLight._m0[_2335].y) * _2379) + (((cbLight._m0[_2345].y * _2309) * _2354) * _2377);
    float _2388 = ((_2341 * cbLight._m0[_2335].z) * _2379) + (((cbLight._m0[_2345].z * _2311) * _2354) * _2377);
    uvec4 _2392 = floatBitsToUint(cbLight._m0[_2318 + 12u]);
    bool _2394 = _2392.x == 0u;
    float _2496;
    float _2498;
    float _2500;
    if (_2394)
    {
        _2496 = _2386;
        _2498 = _2387;
        _2500 = _2388;
    }
    else
    {
        uint _2504 = _2318 + 6u;
        float _2520 = (dot(vec3(cbLight._m0[_2318 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2521 = _2520 * _2520;
        float _4704 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
        float _2522 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2523 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2496 = (((cbLight._m0[_2504].x * 0.3183098733425140380859375) * _2522) * _2523) + _2386;
        _2498 = (((cbLight._m0[_2504].y * 0.3183098733425140380859375) * _2522) * _2523) + _2387;
        _2500 = (((cbLight._m0[_2504].z * 0.3183098733425140380859375) * _2522) * _2523) + _2388;
    }
    bool _2503 = _2392.y == 0u;
    float _2558;
    float _2560;
    float _2562;
    if (_2503)
    {
        _2558 = _2496;
        _2560 = _2498;
        _2562 = _2500;
    }
    else
    {
        uint _2731 = _2318 + 7u;
        float _2747 = (dot(vec3(cbLight._m0[_2318 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2748 = _2747 * _2747;
        float _4720 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2749 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2750 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2558 = (((cbLight._m0[_2731].x * 0.3183098733425140380859375) * _2749) * _2750) + _2496;
        _2560 = (((cbLight._m0[_2731].y * 0.3183098733425140380859375) * _2749) * _2750) + _2498;
        _2562 = (((cbLight._m0[_2731].z * 0.3183098733425140380859375) * _2749) * _2750) + _2500;
    }
    uint _2565 = _2318 + 8u;
    float _2578 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _811) * 0.949999988079071044921875);
    float _2579 = _2578 * _2578;
    float _2580 = cbLight._m0[_2318].x + _887;
    float _2581 = cbLight._m0[_2318].y + _888;
    float _2582 = cbLight._m0[_2318].z + _889;
    float _2586 = inversesqrt(dot(vec3(_2580, _2581, _2582), vec3(_2580, _2581, _2582)));
    float _2587 = _2586 * _2580;
    float _2588 = _2586 * _2581;
    float _2589 = _2586 * _2582;
    float _2590 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2318].xyz));
    float _4736 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2593 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2594 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2595 = dot(vec3(_808, _809, _810), vec3(_2587, _2588, _2589));
    float _4758 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2598 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2599 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2587, _2588, _2589));
    float _4769 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2603 = _2579 * _2579;
    float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
    float _2615 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2616 = 0.959999978542327880859375 - _966;
    float _2618 = 0.959999978542327880859375 - _967;
    float _2619 = 0.959999978542327880859375 - _968;
    float _2626 = 1.0 - _2579;
    float _2637 = (0.5 / (((_2594 * ((_2593 * _2626) + _2579)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2626) + _2579) * _2593))) * _2593;
    float _4780 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
    uint _2653 = _2318 + 9u;
    float _2664 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _811) * 0.949999988079071044921875);
    float _2665 = _2664 * _2664;
    float _2666 = cbLight._m0[_2358].x + _887;
    float _2667 = cbLight._m0[_2358].y + _888;
    float _2668 = cbLight._m0[_2358].z + _889;
    float _2672 = inversesqrt(dot(vec3(_2666, _2667, _2668), vec3(_2666, _2667, _2668)));
    float _2673 = _2672 * _2666;
    float _2674 = _2672 * _2667;
    float _2675 = _2672 * _2668;
    float _2676 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2358].xyz));
    float _4791 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2679 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2680 = dot(vec3(_808, _809, _810), vec3(_2673, _2674, _2675));
    float _4802 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2684 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2673, _2674, _2675));
    float _4813 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2688 = _2665 * _2665;
    float _2692 = ((_2683 * _2683) * (_2688 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2706 = 1.0 - _2665;
    float _2716 = (0.5 / (((_2594 * ((_2679 * _2706) + _2665)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2706) + _2665) * _2679))) * _2679;
    float _4824 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2718 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2688 / ((_2692 * _2692) * 3.141590118408203125));
    float _2728 = (((((_2699 * _2616) + _969) * cbLight._m0[_2653].x) * _2718) * _2341) + ((((cbLight._m0[_2565].x * _2307) * ((_2615 * _2616) + _969)) * _2639) * _2354);
    float _2729 = (((((_2699 * _2618) + _971) * cbLight._m0[_2653].y) * _2718) * _2341) + ((((cbLight._m0[_2565].y * _2309) * ((_2615 * _2618) + _971)) * _2639) * _2354);
    float _2730 = (((((_2699 * _2619) + _972) * cbLight._m0[_2653].z) * _2718) * _2341) + ((((cbLight._m0[_2565].z * _2311) * ((_2615 * _2619) + _972)) * _2639) * _2354);
    float _2786;
    float _2788;
    float _2790;
    if (_2394)
    {
        _2786 = _2728;
        _2788 = _2729;
        _2790 = _2730;
    }
    else
    {
        uint _2792 = _2318 + 2u;
        uint _2796 = _2318 + 10u;
        float _2810 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2792].w)) * _811) * 0.949999988079071044921875);
        float _2811 = _2810 * _2810;
        float _2812 = cbLight._m0[_2792].x + _887;
        float _2813 = cbLight._m0[_2792].y + _888;
        float _2814 = cbLight._m0[_2792].z + _889;
        float _2818 = inversesqrt(dot(vec3(_2812, _2813, _2814), vec3(_2812, _2813, _2814)));
        float _2819 = _2818 * _2812;
        float _2820 = _2818 * _2813;
        float _2821 = _2818 * _2814;
        float _2822 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2792].xyz));
        float _4835 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2825 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2826 = dot(vec3(_808, _809, _810), vec3(_2819, _2820, _2821));
        float _4846 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2829 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2830 = dot(vec3(cbLight._m0[_2792].xyz), vec3(_2819, _2820, _2821));
        float _4857 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2834 = _2811 * _2811;
        float _2838 = ((_2829 * _2829) * (_2834 + (-1.0))) + 1.0;
        float _2845 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2852 = 1.0 - _2811;
        float _2862 = (0.5 / (((_2594 * ((_2825 * _2852) + _2811)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2852) + _2811) * _2825))) * _2825;
        float _4868 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2864 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2834 / ((_2838 * _2838) * 3.141590118408203125));
        float _2865 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2786 = (((((_2845 * _2616) + _969) * cbLight._m0[_2796].x) * _2864) * _2865) + _2728;
        _2788 = (((((_2845 * _2618) + _971) * cbLight._m0[_2796].y) * _2864) * _2865) + _2729;
        _2790 = (((((_2845 * _2619) + _972) * cbLight._m0[_2796].z) * _2864) * _2865) + _2730;
    }
    float _2896;
    float _2898;
    float _2900;
    if (_2503)
    {
        _2896 = _2786;
        _2898 = _2788;
        _2900 = _2790;
    }
    else
    {
        uint _2907 = _2318 + 3u;
        uint _2911 = _2318 + 11u;
        float _2925 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2907].w)) * _811) * 0.949999988079071044921875);
        float _2926 = _2925 * _2925;
        float _2927 = cbLight._m0[_2907].x + _887;
        float _2928 = cbLight._m0[_2907].y + _888;
        float _2929 = cbLight._m0[_2907].z + _889;
        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
        float _2934 = _2933 * _2927;
        float _2935 = _2933 * _2928;
        float _2936 = _2933 * _2929;
        float _2937 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2907].xyz));
        float _4884 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2941 = dot(vec3(_808, _809, _810), vec3(_2934, _2935, _2936));
        float _4895 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2944 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2945 = dot(vec3(cbLight._m0[_2907].xyz), vec3(_2934, _2935, _2936));
        float _4906 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2949 = _2926 * _2926;
        float _2953 = ((_2944 * _2944) * (_2949 + (-1.0))) + 1.0;
        float _2960 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2967 = 1.0 - _2926;
        float _2977 = (0.5 / (((_2594 * ((_2940 * _2967) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2594 * _2967) + _2926) * _2940))) * _2940;
        float _4917 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2979 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2949 / ((_2953 * _2953) * 3.141590118408203125));
        float _2980 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2896 = (((((_2960 * _2616) + _969) * cbLight._m0[_2911].x) * _2979) * _2980) + _2786;
        _2898 = (((((_2960 * _2618) + _971) * cbLight._m0[_2911].y) * _2979) * _2980) + _2788;
        _2900 = (((((_2960 * _2619) + _972) * cbLight._m0[_2911].z) * _2979) * _2980) + _2790;
    }
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2316.y == 0u)
    {
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.x;
        uint _3013 = uint((float(_3001.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _3002))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _3002)));
        float _3023 = (log2(_2094 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3024 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        uint _3027 = uint(isnan(14.0) ? _3024 : (isnan(_3024) ? 14.0 : min(_3024, 14.0)));
        uvec4 _3032 = texelFetch(g_lightClusterGridBuffer, int(((_3027 << 2u) + (_3013 << 6u)) >> 2u));
        uint _3033 = _3032.x;
        uint _3034 = _3001.z;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        float _3123;
        if (((((1u << ((_3034 >> 4u) & 15u)) + 4294967295u) & _3033) == 0u) || ((_3034 & 240u) == 0u))
        {
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
            _3123 = 0.0;
        }
        else
        {
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3124;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            float _3270 = 0.0;
            float _3271 = 0.0;
            uint _3272 = 0u;
            uint _3281;
            bool _3282;
            for (;;)
            {
                _3281 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3272 << 2u)) >> 2u)).x;
                _3282 = _3281 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3282)
                {
                    frontier_phi_71_pred = _3271;
                    frontier_phi_71_pred_1 = _3270;
                    frontier_phi_71_pred_2 = _3269;
                    frontier_phi_71_pred_3 = _3268;
                    frontier_phi_71_pred_4 = _3267;
                    frontier_phi_71_pred_5 = _3266;
                }
                else
                {
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    uint _3417;
                    _3411 = _3266;
                    _3412 = _3267;
                    _3413 = _3268;
                    _3414 = _3269;
                    _3415 = _3270;
                    _3416 = _3271;
                    _3417 = _3281;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    float _3342;
                    float _3343;
                    for (;;)
                    {
                        uint _3421 = uint(findLSB(_3417)) + (_3272 << 5u);
                        uint _3418 = (_3417 + 4294967295u) & _3417;
                        uint _3423 = _3421 * 48u;
                        vec4 _3437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3423)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3423 + 3u)).x));
                        uint _3443 = (_3421 * 48u) + 4u;
                        vec4 _3456 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3462 = (_3421 * 48u) + 8u;
                        vec3 _3473 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3462)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3462 + 2u)).x));
                        float _3477 = _3437.x - _2092;
                        float _3478 = _3437.y - _2093;
                        float _3479 = _3437.z - _2094;
                        float _3480 = dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479));
                        float _3483 = inversesqrt(_3480);
                        float _3484 = _3483 * _3477;
                        float _3485 = _3483 * _3478;
                        float _3486 = _3483 * _3479;
                        float _3487 = dot(vec3(_926, _929, _932), vec3(_3484, _3485, _3486));
                        float _3492 = 1.0 - (_3480 * _3437.w);
                        float _4943 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3493 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3494 = sqrt(_3480) * _3456.w;
                        float _3497 = 1.39999997615814208984375 / (_3494 + 1.39999997615814208984375);
                        float _3498 = _3497 * _3497;
                        float _3501 = ((1.0 - _3498) * _3487) + _3498;
                        float _3504 = _3494 * _3494;
                        float _3508 = ((isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0))) * _3493) / ((_3504 * 0.699999988079071044921875) + 1.0);
                        float _3512 = (-0.0) - _2092;
                        float _3513 = (-0.0) - _2093;
                        float _3514 = (-0.0) - _2094;
                        float _3518 = inversesqrt(dot(vec3(_3512, _3513, _3514), vec3(_3512, _3513, _3514)));
                        float _3519 = _3518 * _3512;
                        float _3520 = _3518 * _3513;
                        float _3521 = _3518 * _3514;
                        float _3528 = exp2(log2(1.0 / ((_3504 * 3.5) + 5.0)) * 0.25);
                        float _3529 = 1.0 - _1001;
                        float _3536 = sqrt(1.0 - ((1.0 - (_3529 * _3529)) * (1.0 - (_3528 * _3528))));
                        float _3537 = _3536 * _3536;
                        float _3538 = _3537 * _3537;
                        float _3539 = _3519 + _3484;
                        float _3540 = _3520 + _3485;
                        float _3541 = _3521 + _3486;
                        float _3545 = inversesqrt(dot(vec3(_3539, _3540, _3541), vec3(_3539, _3540, _3541)));
                        float _3549 = dot(vec3(_926, _929, _932), vec3(_3519, _3520, _3521));
                        float _4959 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                        float _3552 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3553 = dot(vec3(_926, _929, _932), vec3(_3545 * _3539, _3545 * _3540, _3545 * _3541));
                        float _4970 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                        float _3556 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3560 = ((_3556 * _3556) * (_3538 + (-1.0))) + 1.0;
                        float _3561 = _3497 * _3537;
                        float _3562 = _3561 * _3561;
                        float _3565 = ((1.0 - _3562) * _3487) + _3562;
                        float _4981 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                        float _3566 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3567 = 1.0 - _3537;
                        float _3577 = (0.5 / (((_3566 * ((_3552 * _3567) + _3537)) + 9.9999999392252902907785028219223e-09) + (((_3566 * _3567) + _3537) * _3552))) * _3566;
                        float _4992 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                        float _3588 = (((_3538 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3560 * _3560) * ((_3504 * 2.1991131305694580078125) + 3.141590118408203125))) * _3493;
                        _3341 = (_3508 * _3456.x) + _3414;
                        _3342 = (_3508 * _3456.y) + _3415;
                        _3343 = (_3508 * _3456.z) + _3416;
                        _3338 = (_3588 * _3473.x) + _3411;
                        _3339 = (_3588 * _3473.y) + _3412;
                        _3340 = (_3588 * _3473.z) + _3413;
                        if (_3418 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3411 = _3338;
                            _3412 = _3339;
                            _3413 = _3340;
                            _3414 = _3341;
                            _3415 = _3342;
                            _3416 = _3343;
                            _3417 = _3418;
                        }
                    }
                    frontier_phi_71_pred = _3343;
                    frontier_phi_71_pred_1 = _3342;
                    frontier_phi_71_pred_2 = _3341;
                    frontier_phi_71_pred_3 = _3340;
                    frontier_phi_71_pred_4 = _3339;
                    frontier_phi_71_pred_5 = _3338;
                }
                _3124 = frontier_phi_71_pred;
                _3122 = frontier_phi_71_pred_1;
                _3120 = frontier_phi_71_pred_2;
                _3118 = frontier_phi_71_pred_3;
                _3116 = frontier_phi_71_pred_4;
                _3114 = frontier_phi_71_pred_5;
                uint _3273 = _3272 + 1u;
                if (_3273 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3266 = _3114;
                    _3267 = _3116;
                    _3268 = _3118;
                    _3269 = _3120;
                    _3270 = _3122;
                    _3271 = _3124;
                    _3272 = _3273;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
            _3123 = _3124;
        }
        uvec4 _3127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3128 = _3127.z;
        uint _3130 = (_3128 >> 8u) & 15u;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        if (((4294967295u << _3130) & _3033) == 0u)
        {
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
            _3244 = _3123;
        }
        else
        {
            float _3259 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
            float _3260 = _3259 * _2092;
            float _3261 = _3259 * _2093;
            float _3262 = _3259 * _2094;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3130 < ((_3128 >> 12u) & 15u))
            {
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3245;
                float _3394 = _3113;
                float _3395 = _3115;
                float _3396 = _3117;
                float _3397 = _3119;
                float _3398 = _3121;
                float _3399 = _3123;
                uint _3400 = _3130;
                uint _3409;
                bool _3410;
                for (;;)
                {
                    _3409 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3400 << 2u)) >> 2u)).x;
                    _3410 = _3409 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3410)
                    {
                        frontier_phi_82_pred = _3399;
                        frontier_phi_82_pred_1 = _3398;
                        frontier_phi_82_pred_2 = _3397;
                        frontier_phi_82_pred_3 = _3396;
                        frontier_phi_82_pred_4 = _3395;
                        frontier_phi_82_pred_5 = _3394;
                    }
                    else
                    {
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3606;
                        float _3607;
                        float _3896;
                        float _3897;
                        float _3898;
                        float _3899;
                        float _3900;
                        float _3901;
                        float _3615 = _3394;
                        float _3616 = _3395;
                        float _3617 = _3396;
                        float _3618 = _3397;
                        float _3619 = _3398;
                        float _3620 = _3399;
                        uint _3621 = _3409;
                        uint _3622;
                        vec4 _3647;
                        float _3648;
                        vec4 _3663;
                        vec3 _3675;
                        vec4 _3690;
                        vec4 _3706;
                        float _3752;
                        bool _3753;
                        for (;;)
                        {
                            uint _3632 = ((_3400 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3621));
                            _3622 = (_3621 + 4294967295u) & _3621;
                            uint _3634 = _3632 * 40u;
                            _3647 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 3u)).x));
                            _3648 = _3647.w;
                            uint _3650 = (_3632 * 40u) + 4u;
                            _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3665 = (_3632 * 40u) + 8u;
                            _3675 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x));
                            uint _3677 = (_3632 * 40u) + 16u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3693 = (_3632 * 40u) + 20u;
                            _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3708 = (_3632 * 40u) + 24u;
                            vec4 _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3727 = (_3632 * 40u) + 28u;
                            vec4 _3740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 3u)).x));
                            _3752 = fma(_2094, _3740.z, fma(_2093, _3740.y, _3740.x * _2092)) + _3740.w;
                            _3753 = !((fma(_2094, _3721.z, fma(_2093, _3721.y, _3721.x * _2092)) + _3721.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3753)
                            {
                                float _3780 = _3647.x - _2092;
                                float _3781 = _3647.y - _2093;
                                float _3782 = _3647.z - _2094;
                                float _3783 = dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782));
                                float _3786 = inversesqrt(_3783);
                                float _3787 = _3786 * _3780;
                                float _3788 = _3786 * _3781;
                                float _3789 = _3786 * _3782;
                                float _3793 = 1.0 - (_3783 / (_3648 * _3648));
                                float _5003 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3798 = sqrt(_3783) * _3663.w;
                                float _3800 = 1.39999997615814208984375 / (_3798 + 1.39999997615814208984375);
                                float _3801 = _3800 * _3800;
                                float _3804 = ((1.0 - _3801) * dot(vec3(_3787, _3788, _3789), vec3(_926, _929, _932))) + _3801;
                                float _3807 = _3798 * _3798;
                                float _3811 = (fma(_2094, _3690.z, fma(_2093, _3690.y, _3690.x * _2092)) + _3690.w) / _3752;
                                float _3812 = (fma(_2094, _3706.z, fma(_2093, _3706.y, _3706.x * _2092)) + _3706.w) / _3752;
                                float _3816 = 1.0 - dot(vec2(_3811, _3812), vec2(_3811, _3812));
                                float _5019 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3817 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3818 = _3817 * (((isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0))) * _3794) / ((_3807 * 0.699999988079071044921875) + 1.0));
                                float _3830 = exp2(log2(1.0 / ((_3807 * 3.5) + 5.0)) * 0.25);
                                float _3831 = 1.0 - _1001;
                                float _3838 = sqrt(1.0 - ((1.0 - (_3831 * _3831)) * (1.0 - (_3830 * _3830))));
                                float _3839 = _3838 * _3838;
                                float _3840 = _3839 * _3839;
                                float _3841 = _3787 - _3260;
                                float _3842 = _3788 - _3261;
                                float _3843 = _3789 - _3262;
                                float _3847 = inversesqrt(dot(vec3(_3841, _3842, _3843), vec3(_3841, _3842, _3843)));
                                float _3851 = dot(vec3(_926, _929, _932), vec3((-0.0) - _3260, (-0.0) - _3261, (-0.0) - _3262));
                                float _5030 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3854 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3855 = dot(vec3(_926, _929, _932), vec3(_3847 * _3841, _3847 * _3842, _3847 * _3843));
                                float _5041 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3858 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3862 = ((_3858 * _3858) * (_3840 + (-1.0))) + 1.0;
                                float _3863 = _3800 * _3839;
                                float _3864 = _3863 * _3863;
                                float _3870 = ((1.0 - _3864) * dot(vec3(_926, _929, _932), vec3(_3787, _3788, _3789))) + _3864;
                                float _5052 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3871 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3872 = 1.0 - _3839;
                                float _3882 = (0.5 / (((_3871 * ((_3854 * _3872) + _3839)) + 9.9999999392252902907785028219223e-09) + (((_3871 * _3872) + _3839) * _3854))) * _3871;
                                float _5063 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3892 = (_3817 * _3794) * (((_3840 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3862 * _3862) * ((_3807 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3818 * _3663.z;
                                frontier_phi_88_pred_1 = _3818 * _3663.y;
                                frontier_phi_88_pred_2 = _3818 * _3663.x;
                                frontier_phi_88_pred_3 = _3892 * _3675.z;
                                frontier_phi_88_pred_4 = _3892 * _3675.y;
                                frontier_phi_88_pred_5 = _3892 * _3675.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3901 = frontier_phi_88_pred;
                            _3900 = frontier_phi_88_pred_1;
                            _3899 = frontier_phi_88_pred_2;
                            _3898 = frontier_phi_88_pred_3;
                            _3897 = frontier_phi_88_pred_4;
                            _3896 = frontier_phi_88_pred_5;
                            _3605 = _3899 + _3618;
                            _3606 = _3900 + _3619;
                            _3607 = _3901 + _3620;
                            _3602 = _3896 + _3615;
                            _3603 = _3897 + _3616;
                            _3604 = _3898 + _3617;
                            if (_3622 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3604;
                                _3618 = _3605;
                                _3619 = _3606;
                                _3620 = _3607;
                                _3621 = _3622;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3607;
                        frontier_phi_82_pred_1 = _3606;
                        frontier_phi_82_pred_2 = _3605;
                        frontier_phi_82_pred_3 = _3604;
                        frontier_phi_82_pred_4 = _3603;
                        frontier_phi_82_pred_5 = _3602;
                    }
                    _3245 = frontier_phi_82_pred;
                    _3243 = frontier_phi_82_pred_1;
                    _3241 = frontier_phi_82_pred_2;
                    _3239 = frontier_phi_82_pred_3;
                    _3237 = frontier_phi_82_pred_4;
                    _3235 = frontier_phi_82_pred_5;
                    uint _3401 = _3400 + 1u;
                    if (_3401 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3394 = _3235;
                        _3395 = _3237;
                        _3396 = _3239;
                        _3397 = _3241;
                        _3398 = _3243;
                        _3399 = _3245;
                        _3400 = _3401;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3241;
                frontier_phi_63_64_ladder_1 = _3245;
                frontier_phi_63_64_ladder_2 = _3243;
                frontier_phi_63_64_ladder_3 = _3239;
                frontier_phi_63_64_ladder_4 = _3237;
                frontier_phi_63_64_ladder_5 = _3235;
            }
            else
            {
                frontier_phi_63_64_ladder = _3119;
                frontier_phi_63_64_ladder_1 = _3123;
                frontier_phi_63_64_ladder_2 = _3121;
                frontier_phi_63_64_ladder_3 = _3117;
                frontier_phi_63_64_ladder_4 = _3115;
                frontier_phi_63_64_ladder_5 = _3113;
            }
            _3234 = frontier_phi_63_64_ladder_5;
            _3236 = frontier_phi_63_64_ladder_4;
            _3238 = frontier_phi_63_64_ladder_3;
            _3240 = frontier_phi_63_64_ladder;
            _3242 = frontier_phi_63_64_ladder_2;
            _3244 = frontier_phi_63_64_ladder_1;
        }
        float _3249 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _3046 = (_3249 * _3240) + _2558;
        _3048 = (_3249 * _3242) + _2560;
        _3050 = (_3249 * _3244) + _2562;
        _3052 = ((_3234 * _969) * _3249) + _2896;
        _3054 = ((_3236 * _971) * _3249) + _2898;
        _3056 = ((_3238 * _972) * _3249) + _2900;
    }
    else
    {
        _3046 = _2558;
        _3048 = _2560;
        _3050 = _2562;
        _3052 = _2896;
        _3054 = _2898;
        _3056 = _2900;
    }
    float _5079 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _5090 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _5101 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _3073 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3046 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _985))) + ((_3052 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _3074 = ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3048 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _985))) + ((_3054 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _3075 = ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3050 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _985))) + ((_3056 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    uint _3076 = _261 + 6u;
    float _3084 = _907 / cbSceneParam._m0[86u].x;
    float _3085 = _908 / cbSceneParam._m0[86u].y;
    vec4 _3099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3101 = _3099.x;
    float _3102 = _3099.y;
    float _3103 = _3099.z;
    float _3104 = _3099.w;
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _3138 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _3139 = _3138 / _830;
        float _3150 = _3139 * _880;
        float _3151 = _881 * _3139;
        float _3152 = (-0.0) - _3151;
        float _3154 = _3139 * _882;
        float _3156 = (cbSceneParam._m0[77u].w * _3152) / _3138;
        float _3157 = _3156 + cbSceneParam._m0[79u].w;
        float _3158 = cbSceneParam._m0[79u].w - _3151;
        float _3164 = sqrt(((_3150 * _3150) + (_3151 * _3151)) + (_3154 * _3154));
        float _3167 = (1.0 - (cbSceneParam._m0[77u].w / _3138)) * _3164;
        float _3172 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3174 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3351;
        if (abs((_3152 - _3156) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3351 = ((((_3157 > 0.0) ? exp2(_3172 * _3157) : (2.0 - exp2(_3174 * _3157))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3167;
        }
        else
        {
            float _3295 = 1.0 / cbSceneParam._m0[80u].x;
            float _3296 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : max(_3157, _3158));
            float _3297 = isnan(_3158) ? _3157 : (isnan(_3157) ? _3158 : min(_3157, _3158));
            float _3306 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : min(_3296, 0.0));
            float _3307 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : min(_3297, 0.0));
            _3351 = ((abs(_3164 / _3152) * cbSceneParam._m0[80u].y) * ((((_3306 - _3307) * 2.0) - ((exp2(_3172 * (isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0)))) - exp2(_3172 * (isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))))) * _3295)) - ((exp2(_3174 * _3306) - exp2(_3174 * _3307)) * _3295))) + (_3167 * cbSceneParam._m0[80u].z);
        }
        vec4 _3353 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, 1.0), 0.0);
        float _3362 = exp2((_3351 * (-1.44269502162933349609375)) * (1.0 - _3353.w));
        float _3363 = log2(_3362);
        float _3379 = log2(_3104);
        _3176 = (exp2(_3379 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].x)) * _3353.x) / cbSceneParam._m0[78u].x)) + _3101;
        _3178 = (exp2(_3379 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].y)) * _3353.y) / cbSceneParam._m0[78u].y)) + _3102;
        _3180 = (exp2(_3379 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3363 * cbSceneParam._m0[78u].z)) * _3353.z) / cbSceneParam._m0[78u].z)) + _3103;
        _3182 = _3362 * _3104;
    }
    else
    {
        _3176 = _3101;
        _3178 = _3102;
        _3180 = _3103;
        _3182 = _3104;
    }
    bool _3389;
    vec4 _3192;
    vec4 _3214;
    float _3216;
    float _3220;
    float _3221;
    float _3222;
    float _3223;
    bool _3233;
    for (;;)
    {
        _3192 = cbMatDynParam._m0[0u];
        float _3194 = roundEven(_3192.y);
        bool _3195 = _3194 == 3.0;
        float _3196 = log2(_3182);
        float _3203 = exp2(_3196 * cbSceneParam._m0[78u].x) * _3073;
        float _3204 = exp2(_3196 * cbSceneParam._m0[78u].y) * _3074;
        float _3205 = exp2(_3196 * cbSceneParam._m0[78u].z) * _3075;
        float _3212 = _896 + (-0.5);
        _3214 = cbMtdParam._m0[1u];
        _3216 = _3214.y * _3212;
        float _3219 = (_3194 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3220 = _3219 * (_3195 ? _3203 : (_3203 + (cbSceneParam._m0[72u].w * _3176)));
        _3221 = _3219 * (_3195 ? _3204 : (_3204 + (cbSceneParam._m0[72u].w * _3178)));
        _3222 = _3219 * (_3195 ? _3205 : (_3205 + (cbSceneParam._m0[72u].w * _3180)));
        _3223 = _3212 * 0.999000012874603271484375;
        _3233 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3233)
        {
            if ((cbInstanceData._m0[_261 + 7u].x + _3223) < 0.5)
            {
                _3389 = true;
                break;
            }
        }
        uint _3330 = _945 + uint(_3192.w);
        if ((cbInstanceData._m0[_3330].w < 1.0) && ((cbInstanceData._m0[_3330].w + _3223) < 0.5))
        {
            _3389 = true;
            break;
        }
        if ((_3216 + 1.0) < _3214.x)
        {
            _3389 = true;
            break;
        }
        _3389 = false;
        break;
    }
    float _3593;
    if (_3389)
    {
        discard_state = true;
        _3593 = 0.0;
    }
    else
    {
        _3593 = cbInstanceData._m0[_3076].w;
    }
    SV_Target.x = _3220;
    SV_Target.y = _3221;
    SV_Target.z = _3222;
    SV_Target.w = _3593;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3076].w;
    discard_exit();
}


