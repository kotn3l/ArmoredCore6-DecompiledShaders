#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1450;
float _3830;
float _3831;
float _3832;
float _3833;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3842 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _3853 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3864 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3875 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
    float _453 = (_446 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _454 = (_446 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _455 = (_446 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3886 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) + _538;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _446) + _606;
    float _616 = ((_587.y - _607) * _446) + _607;
    float _617 = ((_587.z - _608) * _446) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _519) + _617;
    float _645 = ((((_629.x - _615) * _519) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _519) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3897 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))));
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _710 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_693 - _694) * cbMtdParam._m0[24u].z) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3908 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _711 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _718 = (_711 * (cbMtdParam._m0[17u].x - _545)) + _545;
    float _719 = (_711 * (cbMtdParam._m0[17u].y - _546)) + _546;
    float _720 = (_711 * (cbMtdParam._m0[17u].z - _547)) + _547;
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _748 = _746.x;
    float _766 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _748) * _446) + _748;
    float _783 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _766) * _519) + _766;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _783) * cbMtdParam._m0[19u].z) + _783;
    float _789 = _787 - (_787 * _711);
    float _794 = (((_564.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _798 = ((_666.z - _794) * cbMtdParam._m0[19u].w) + _794;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _818 = (_811.x * 2.0) + (-1.0);
    float _819 = (_811.y * 2.0) + (-1.0);
    float _820 = dot(vec2(_818, _819), vec2(_818, _819));
    float _3919 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _828 = (_711 * (_811.z - _798)) + _798;
    float _837 = (_645 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_564.x * 2.0) + (-1.0)))) + (((_666.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _838 = (_646 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_564.y * 2.0) + (-1.0)))) + (((_666.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _850 = (((_818 - _837) + (cbMtdParam._m0[21u].x * _837)) * _711) + _837;
    float _851 = (((_819 - _838) + (cbMtdParam._m0[21u].x * _838)) * _711) + _838;
    float _852 = (_711 * (sqrt(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) - _652)) + _652;
    float _856 = cbMtdParam._m0[22u].x + _666.w;
    float _859 = fma(_852, _246 * NORMAL.x, fma(_851, _253 * TANGENT.x, (_239 * _231) * _850));
    float _862 = fma(_852, _246 * NORMAL.y, fma(_851, _253 * TANGENT.y, (_239 * _232) * _850));
    float _865 = fma(_852, _246 * NORMAL.z, fma(_851, _253 * TANGENT.z, (_239 * _233) * _850));
    float _869 = inversesqrt(dot(vec3(_859, _862, _865), vec3(_859, _862, _865)));
    float _870 = _869 * _859;
    float _871 = _869 * _862;
    float _872 = _869 * _865;
    float _3930 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _873 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _3941 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _3952 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3963 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _3974 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _3985 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _878 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _933 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _943 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _933);
    float _944 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _933);
    float _945 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _933);
    float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
    float _950 = _943 * _949;
    float _951 = _944 * _949;
    float _952 = _945 * _949;
    vec4 _957 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _959 = _957.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1131 = sqrt(((_943 * _943) + (_944 * _944)) + (_945 * _945));
        float _1137 = (cbMatDynParam._m0[5u].x * _1131) + cbMatDynParam._m0[5u].y;
        float _3996 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1142 = (cbMatDynParam._m0[5u].z * _1131) + cbMatDynParam._m0[5u].w;
        float _4007 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) - _1138)) + _1138) < ((_959 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _970 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _971 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _989 = fma(_872, cbSceneParam._m0[5u].z, fma(_871, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _870));
    float _992 = fma(_872, cbSceneParam._m0[6u].z, fma(_871, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _870));
    float _995 = fma(_872, cbSceneParam._m0[7u].z, fma(_871, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _870));
    uint _1008 = _280 + 9u;
    uint _1009 = _1008 + uint(cbMatDynParam._m0[0u].w);
    float _1015 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_1009].x;
    float _1016 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) * cbInstanceData._m0[_1009].y;
    float _1017 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0)))) * cbInstanceData._m0[_1009].z;
    float _4018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
    float _1019 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _4040 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    float _1020 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1021 = 1.0 - _878;
    float _1022 = _1018 * _1021;
    float _1023 = _1019 * _1021;
    float _1024 = _1020 * _1021;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _878;
    float _1030 = (_1019 + (-0.039999999105930328369140625)) * _878;
    float _1031 = (_1020 + (-0.039999999105930328369140625)) * _878;
    float _1032 = _1029 + 0.039999999105930328369140625;
    float _1034 = _1030 + 0.039999999105930328369140625;
    float _1035 = _1031 + 0.039999999105930328369140625;
    vec4 _1044 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _970, cbSceneParam._m0[86u].y * _971));
    float _1048 = ((isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * TEXCOORD_5.w) * _1044.x;
    float _1049 = dot(vec3(_870, _871, _872), vec3(_950, _951, _952));
    float _1052 = _1049 * 2.0;
    float _1056 = (_1052 * _870) - _950;
    float _1057 = (_1052 * _871) - _951;
    float _1058 = (_1052 * _872) - _952;
    float _1062 = abs(dot(vec3(_950, _951, _952), vec3(_870, _871, _872)));
    float _4051 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1064 = sqrt(_873);
    float _1077 = exp2((_1064 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1064 * 3.0));
    float _1083 = (1.0 - _1077) * ((_1064 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1084 = _1077 * _1064;
    float _1112 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1449;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1174 = fma(_1120, cbModelParam._m0[26u].z, fma(_1116, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112));
        float _1178 = fma(_1120, cbModelParam._m0[27u].z, fma(_1116, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112));
        float _1182 = fma(_1120, cbModelParam._m0[28u].z, fma(_1116, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112));
        float _1207 = _1112 + _870;
        float _1208 = _1116 + _871;
        float _1209 = _1120 + _872;
        float _1219 = fma(_1209, cbModelParam._m0[26u].z, fma(_1208, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1207)) - _1174;
        float _1220 = fma(_1209, cbModelParam._m0[27u].z, fma(_1208, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1207)) - _1178;
        float _1221 = fma(_1209, cbModelParam._m0[28u].z, fma(_1208, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1207)) - _1182;
        float _1225 = inversesqrt(dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221)));
        float _1238 = ((_1225 * _1219) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1174 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1225 * _1220) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1178 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1225 * _1221) / cbModelParam._m0[34u].z) + ((((((_1182 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1238, _1239, _1240), 0.0);
        float _1277 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1243.x + (-0.5));
        float _1279 = _1277 * (_1243.y + (-0.5));
        float _1280 = _1277 * (_1243.z + (-0.5));
        float _1287 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1250.x + (-0.5));
        float _1289 = _1287 * (_1250.y + (-0.5));
        float _1290 = _1287 * (_1250.z + (-0.5));
        float _1297 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1257.x + (-0.5));
        float _1299 = _1297 * (_1257.y + (-0.5));
        float _1300 = _1297 * (_1257.z + (-0.5));
        float _1307 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1264.x + (-0.5));
        float _1309 = _1307 * (_1264.y + (-0.5));
        float _1310 = _1307 * (_1264.z + (-0.5));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = _1278 * 0.5;
        float _1315 = _1288 * 0.5;
        float _1316 = _1298 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1331 = (dot(vec3(_870, _871, _872), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1341 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4099 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1343 + 1.0))) + _1348) * _1311;
        float _1358 = _1279 * 0.5;
        float _1359 = _1289 * 0.5;
        float _1360 = _1299 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_870, _871, _872), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _4132 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1385 + 1.0))) + _1390) * _1312;
        float _1400 = _1280 * 0.5;
        float _1401 = _1290 * 0.5;
        float _1402 = _1300 * 0.5;
        float _1403 = dot(vec3(_1400, _1401, _1402), vec3(_1400, _1401, _1402));
        float _1408 = (_1403 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1403);
        float _1416 = (dot(vec3(_870, _871, _872), vec3(_1408 * _1400, _1408 * _1401, _1408 * _1402)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1425 = sqrt(((_1401 * _1401) + (_1400 * _1400)) + (_1402 * _1402)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1427 = _1426 * 2.0;
        float _1431 = (1.0 - _1426) / (_1426 + 1.0);
        float _4165 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1432 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1441 = ((((1.0 - _1432) * (_1427 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1427 + 1.0))) + _1432) * _1313;
        _1449 = _1280;
        _1451 = _1279;
        _1452 = _1278;
        _1453 = _1290;
        _1454 = _1289;
        _1455 = _1288;
        _1456 = _1300;
        _1457 = _1299;
        _1458 = _1298;
        _1459 = _1313;
        _1460 = _1312;
        _1461 = _1311;
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1463 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
        _1464 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)));
    }
    else
    {
        _1449 = _1450;
        _1451 = _1450;
        _1452 = _1450;
        _1453 = _1450;
        _1454 = _1450;
        _1455 = _1450;
        _1456 = _1450;
        _1457 = _1450;
        _1458 = _1450;
        _1459 = _1450;
        _1460 = _1450;
        _1461 = _1450;
        _1462 = 0.0;
        _1463 = 0.0;
        _1464 = 0.0;
    }
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1491 = fma(_1120, cbModelParam._m0[30u].z, fma(_1116, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1112));
        float _1495 = fma(_1120, cbModelParam._m0[31u].z, fma(_1116, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1112));
        float _1499 = fma(_1120, cbModelParam._m0[32u].z, fma(_1116, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1112));
        float _1522 = _1112 + _870;
        float _1523 = _1116 + _871;
        float _1524 = _1120 + _872;
        float _1534 = fma(_1524, cbModelParam._m0[30u].z, fma(_1523, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1522)) - _1491;
        float _1535 = fma(_1524, cbModelParam._m0[31u].z, fma(_1523, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1522)) - _1495;
        float _1536 = fma(_1524, cbModelParam._m0[32u].z, fma(_1523, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1522)) - _1499;
        float _1540 = inversesqrt(dot(vec3(_1534, _1535, _1536), vec3(_1534, _1535, _1536)));
        float _1553 = ((_1540 * _1534) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1491 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1540 * _1535) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1495 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1555 = ((_1540 * _1536) / cbModelParam._m0[35u].z) + ((((((_1499 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1571 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        vec4 _1578 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1553, _1554, _1555), 0.0);
        float _1590 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1557.x + (-0.5));
        float _1592 = _1590 * (_1557.y + (-0.5));
        float _1593 = _1590 * (_1557.z + (-0.5));
        float _1600 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1601 = _1600 * (_1564.x + (-0.5));
        float _1602 = _1600 * (_1564.y + (-0.5));
        float _1603 = _1600 * (_1564.z + (-0.5));
        float _1610 = exp2((_1571.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1571.x + (-0.5));
        float _1612 = _1610 * (_1571.y + (-0.5));
        float _1613 = _1610 * (_1571.z + (-0.5));
        float _1620 = exp2((_1578.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1578.x + (-0.5));
        float _1622 = _1620 * (_1578.y + (-0.5));
        float _1623 = _1620 * (_1578.z + (-0.5));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = _1591 * 0.5;
        float _1628 = _1601 * 0.5;
        float _1629 = _1611 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_870, _871, _872), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4228 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1654 + 1.0))) + _1659) * _1624;
        float _1669 = _1592 * 0.5;
        float _1670 = _1602 * 0.5;
        float _1671 = _1612 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_870, _871, _872), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4261 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1696 + 1.0))) + _1701) * _1625;
        float _1711 = _1593 * 0.5;
        float _1712 = _1603 * 0.5;
        float _1713 = _1613 * 0.5;
        float _1714 = dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713));
        float _1719 = (_1714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1714);
        float _1727 = (dot(vec3(_870, _871, _872), vec3(_1719 * _1711, _1719 * _1712, _1719 * _1713)) + 1.0) * 0.5;
        float _4272 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1736 = sqrt(((_1712 * _1712) + (_1711 * _1711)) + (_1713 * _1713)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4283 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _1738 = _1737 * 2.0;
        float _1742 = (1.0 - _1737) / (_1737 + 1.0);
        float _4294 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1752 = ((((1.0 - _1743) * (_1738 + 2.0)) * exp2(log2(isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_1738 + 1.0))) + _1743) * _1626;
        _1760 = _1593;
        _1761 = _1592;
        _1762 = _1591;
        _1763 = _1603;
        _1764 = _1602;
        _1765 = _1601;
        _1766 = _1613;
        _1767 = _1612;
        _1768 = _1611;
        _1769 = _1626;
        _1770 = _1625;
        _1771 = _1624;
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)));
    }
    else
    {
        _1760 = _1450;
        _1761 = _1450;
        _1762 = _1450;
        _1763 = _1450;
        _1764 = _1450;
        _1765 = _1450;
        _1766 = _1450;
        _1767 = _1450;
        _1768 = _1450;
        _1769 = _1450;
        _1770 = _1450;
        _1771 = _1450;
        _1772 = 0.0;
        _1773 = 0.0;
        _1774 = 0.0;
    }
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1462)) + _1462;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1463)) + _1463;
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1464)) + _1464;
    float _1807 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1810 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1813 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1784));
    float _1828 = _1056 * 0.5;
    float _1829 = _1057 * 0.5;
    float _1830 = _1058 * 0.5;
    float _1831 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1834 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1837 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1871;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1844 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1449, _1453, _1456, _1459));
        float _1848 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1451, _1454, _1457, _1460));
        float _1852 = dot(vec4(_1828, _1829, _1830, 1.0), vec4(_1452, _1455, _1458, _1461));
        float _1859 = dot(vec4(cbModelParam._m0[39u]), vec4(_1828, _1829, _1830, 1.0));
        _1871 = dot(vec3(isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1859) ? 0.0 : (isnan(0.0) ? _1859 : max(0.0, _1859))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1871 = 1.0;
    }
    float _1882;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1873 = dot(vec4(cbModelParam._m0[40u]), vec4(_1828, _1829, _1830, 1.0));
        _1882 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)), isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1882 = 1.0;
    }
    float _1886 = (_1882 * cbModelParam._m0[1u].x) + (_1871 * (1.0 - cbModelParam._m0[1u].x));
    float _1896 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _873);
    float _1897 = isnan(_1896) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1896 : min(cbModelParam._m0[25u].z, _1896));
    float _1978;
    float _1980;
    float _1982;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1945 = fma(_1120, cbModelParam._m0[13u].z, fma(_1116, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1112)) + cbModelParam._m0[13u].w;
        float _1949 = fma(_1120, cbModelParam._m0[14u].z, fma(_1116, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1112)) + cbModelParam._m0[14u].w;
        float _1953 = fma(_1120, cbModelParam._m0[15u].z, fma(_1116, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1112)) + cbModelParam._m0[15u].w;
        float _1956 = fma(_1058, cbModelParam._m0[13u].z, fma(_1057, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056));
        float _1959 = fma(_1058, cbModelParam._m0[14u].z, fma(_1057, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056));
        float _1962 = fma(_1058, cbModelParam._m0[15u].z, fma(_1057, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056));
        float _1990;
        if (_1956 > 0.0)
        {
            _1990 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1990 = frontier_phi_17_15_ladder;
        }
        float _2193;
        if (_1959 > 0.0)
        {
            _2193 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2193 = frontier_phi_26_22_ladder;
        }
        float _2447;
        if (_1962 > 0.0)
        {
            _2447 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2447 = frontier_phi_38_33_ladder;
        }
        float _2449 = isnan(_2193) ? _1990 : (isnan(_1990) ? _2193 : min(_1990, _2193));
        float _2450 = isnan(_2447) ? _2449 : (isnan(_2449) ? _2447 : min(_2449, _2447));
        float _2454 = (_2450 * _1956) + _1945;
        float _2455 = (_2450 * _1959) + _1949;
        float _2456 = (_2450 * _1962) + _1953;
        float _2457 = _2450 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2457;
        float _2461 = _2457 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 > _2461) || ((_2455 < _2459) || ((_2454 < _2459) || (_2454 > _2461))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2584 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2456, cbModelParam._m0[9u].z, fma(_2455, cbModelParam._m0[9u].y, _2454 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2456, cbModelParam._m0[10u].z, fma(_2455, cbModelParam._m0[10u].y, _2454 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2456, cbModelParam._m0[11u].z, fma(_2455, cbModelParam._m0[11u].y, _2454 * cbModelParam._m0[11u].x))), _1897);
            frontier_phi_16_38_ladder = _2584.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2584.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2584.x * cbModelParam._m0[1u].y;
        }
        _1978 = frontier_phi_16_38_ladder_2;
        _1980 = frontier_phi_16_38_ladder_1;
        _1982 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1966 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1056, _1057, _1058), _1897);
        _1978 = _1966.x * cbModelParam._m0[1u].y;
        _1980 = _1966.y * cbModelParam._m0[1u].y;
        _1982 = _1966.z * cbModelParam._m0[1u].y;
    }
    float _1986 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _873);
    float _1987 = isnan(_1986) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1986 : min(cbModelParam._m0[25u].w, _1986));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2041 = fma(_1120, cbModelParam._m0[21u].z, fma(_1116, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1112)) + cbModelParam._m0[21u].w;
        float _2045 = fma(_1120, cbModelParam._m0[22u].z, fma(_1116, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1112)) + cbModelParam._m0[22u].w;
        float _2049 = fma(_1120, cbModelParam._m0[23u].z, fma(_1116, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1112)) + cbModelParam._m0[23u].w;
        float _2052 = fma(_1058, cbModelParam._m0[21u].z, fma(_1057, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056));
        float _2055 = fma(_1058, cbModelParam._m0[22u].z, fma(_1057, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056));
        float _2058 = fma(_1058, cbModelParam._m0[23u].z, fma(_1057, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056));
        float _2198;
        if (_2052 > 0.0)
        {
            _2198 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2198 = frontier_phi_28_24_ladder;
        }
        float _2474;
        if (_2055 > 0.0)
        {
            _2474 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2474 = frontier_phi_40_35_ladder;
        }
        float _2687;
        if (_2058 > 0.0)
        {
            _2687 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2687 = frontier_phi_49_46_ladder;
        }
        float _2689 = isnan(_2474) ? _2198 : (isnan(_2198) ? _2474 : min(_2198, _2474));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _2052) + _2041;
        float _2695 = (_2690 * _2055) + _2045;
        float _2696 = (_2690 * _2058) + _2049;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2895 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1987);
            frontier_phi_25_49_ladder = _2895.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2895.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2895.x * cbModelParam._m0[1u].z;
        }
        _2077 = frontier_phi_25_49_ladder_2;
        _2079 = frontier_phi_25_49_ladder_1;
        _2081 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1056, _1057, _1058), _1987);
        _2077 = _2061.x * cbModelParam._m0[1u].z;
        _2079 = _2061.y * cbModelParam._m0[1u].z;
        _2081 = _2061.z * cbModelParam._m0[1u].z;
    }
    float _2094 = (((_1083 * _1032) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2077 - _1978)) + _1978);
    float _2096 = (((_1083 * _1034) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2079 - _1980)) + _1980);
    float _2098 = (((_1083 * _1035) + _1084) * _1048) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2101 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2094 * cbSceneParam._m0[89u].x));
    float _2104 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2094 * cbSceneParam._m0[90u].x));
    float _2107 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2094 * cbSceneParam._m0[91u].x));
    uvec4 _2117 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2119 = _2117.x * 14u;
    uint _2120 = _2119 + 13u;
    float _2127 = _1048 + (-1.0);
    float _2132 = (cbLight._m0[_2120].x * _2127) + 1.0;
    float _2133 = (cbLight._m0[_2120].y * _2127) + 1.0;
    float _2134 = (cbLight._m0[_2120].z * _2127) + 1.0;
    float _2135 = (cbLight._m0[_2120].w * _2127) + 1.0;
    uint _2136 = _2119 + 5u;
    float _2142 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
    uint _2146 = _2119 + 4u;
    float _2152 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2156 = _2119 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_870, _871, _872));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_870, _871, _872));
    float _4430 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4441 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2136].x * _2142) * _2177) + ((cbLight._m0[_2146].x * _2152) * _2175);
    float _2185 = ((_2142 * cbLight._m0[_2136].y) * _2177) + ((_2152 * cbLight._m0[_2146].y) * _2175);
    float _2186 = ((_2142 * cbLight._m0[_2136].z) * _2177) + ((_2152 * cbLight._m0[_2146].z) * _2175);
    uvec4 _2190 = floatBitsToUint(cbLight._m0[_2119 + 12u]);
    bool _2192 = _2190.x == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2192)
    {
        _2203 = _2184;
        _2205 = _2185;
        _2207 = _2186;
    }
    else
    {
        uint _2211 = _2119 + 6u;
        float _2227 = (dot(vec3(cbLight._m0[_2119 + 2u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4452 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2230 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2203 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _2184;
        _2205 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _2185;
        _2207 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2186;
    }
    bool _2210 = _2190.y == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2210)
    {
        _2248 = _2203;
        _2250 = _2205;
        _2252 = _2207;
    }
    else
    {
        uint _2418 = _2119 + 7u;
        float _2434 = (dot(vec3(cbLight._m0[_2119 + 3u].xyz), vec3(_870, _871, _872)) * 0.5) + 0.5;
        float _2435 = _2434 * _2434;
        float _4468 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2436 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _2437 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2248 = (((cbLight._m0[_2418].x * 0.3183098733425140380859375) * _2436) * _2437) + _2203;
        _2250 = (((cbLight._m0[_2418].y * 0.3183098733425140380859375) * _2436) * _2437) + _2205;
        _2252 = (((cbLight._m0[_2418].z * 0.3183098733425140380859375) * _2436) * _2437) + _2207;
    }
    uint _2255 = _2119 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2119].w)) * _873) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2119].x + _950;
    float _2271 = cbLight._m0[_2119].y + _951;
    float _2272 = cbLight._m0[_2119].z + _952;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2119].xyz));
    float _4484 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _4495 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _2284 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2285 = dot(vec3(_870, _871, _872), vec3(_2277, _2278, _2279));
    float _4506 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2119].xyz), vec3(_2277, _2278, _2279));
    float _4517 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2269 * _2269;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
    float _2306 = 0.959999978542327880859375 - _1029;
    float _2308 = 0.959999978542327880859375 - _1030;
    float _2309 = 0.959999978542327880859375 - _1031;
    float _2316 = 1.0 - _2269;
    float _2327 = (0.5 / (((_2284 * ((_2283 * _2316) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2316) + _2269) * _2283))) * _2283;
    float _4528 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    uint _2340 = _2119 + 9u;
    float _2351 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _873) * 0.949999988079071044921875);
    float _2352 = _2351 * _2351;
    float _2353 = cbLight._m0[_2156].x + _950;
    float _2354 = cbLight._m0[_2156].y + _951;
    float _2355 = cbLight._m0[_2156].z + _952;
    float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
    float _2360 = _2359 * _2353;
    float _2361 = _2359 * _2354;
    float _2362 = _2359 * _2355;
    float _2363 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2156].xyz));
    float _4539 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2366 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2367 = dot(vec3(_870, _871, _872), vec3(_2360, _2361, _2362));
    float _4550 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2360, _2361, _2362));
    float _4561 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2352 * _2352;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2386 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2393 = 1.0 - _2352;
    float _2403 = (0.5 / (((_2284 * ((_2366 * _2393) + _2352)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2393) + _2352) * _2366))) * _2366;
    float _4572 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    float _2415 = (((((_2386 * _2306) + _1032) * cbLight._m0[_2340].x) * _2405) * _2142) + (((((_2305 * _2306) + _1032) * cbLight._m0[_2255].x) * _2329) * _2152);
    float _2416 = (((((_2386 * _2308) + _1034) * cbLight._m0[_2340].y) * _2405) * _2142) + (((((_2305 * _2308) + _1034) * cbLight._m0[_2255].y) * _2329) * _2152);
    float _2417 = (((((_2386 * _2309) + _1035) * cbLight._m0[_2340].z) * _2405) * _2142) + (((((_2305 * _2309) + _1035) * cbLight._m0[_2255].z) * _2329) * _2152);
    float _2479;
    float _2481;
    float _2483;
    if (_2192)
    {
        _2479 = _2415;
        _2481 = _2416;
        _2483 = _2417;
    }
    else
    {
        uint _2485 = _2119 + 2u;
        uint _2489 = _2119 + 10u;
        float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _873) * 0.949999988079071044921875);
        float _2504 = _2503 * _2503;
        float _2505 = cbLight._m0[_2485].x + _950;
        float _2506 = cbLight._m0[_2485].y + _951;
        float _2507 = cbLight._m0[_2485].z + _952;
        float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
        float _2512 = _2511 * _2505;
        float _2513 = _2511 * _2506;
        float _2514 = _2511 * _2507;
        float _2515 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2485].xyz));
        float _4583 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2518 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2519 = dot(vec3(_870, _871, _872), vec3(_2512, _2513, _2514));
        float _4594 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2522 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2523 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2512, _2513, _2514));
        float _4605 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2527 = _2504 * _2504;
        float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
        float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
        float _2545 = 1.0 - _2504;
        float _2555 = (0.5 / (((_2284 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2545) + _2504) * _2518))) * _2518;
        float _4616 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2557 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
        float _2558 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2479 = (((((_2538 * _2306) + _1032) * cbLight._m0[_2489].x) * _2557) * _2558) + _2415;
        _2481 = (((((_2538 * _2308) + _1034) * cbLight._m0[_2489].y) * _2557) * _2558) + _2416;
        _2483 = (((((_2538 * _2309) + _1035) * cbLight._m0[_2489].z) * _2557) * _2558) + _2417;
    }
    float _2593;
    float _2595;
    float _2597;
    if (_2210)
    {
        _2593 = _2479;
        _2595 = _2481;
        _2597 = _2483;
    }
    else
    {
        uint _2604 = _2119 + 3u;
        uint _2608 = _2119 + 11u;
        float _2622 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2604].w)) * _873) * 0.949999988079071044921875);
        float _2623 = _2622 * _2622;
        float _2624 = cbLight._m0[_2604].x + _950;
        float _2625 = cbLight._m0[_2604].y + _951;
        float _2626 = cbLight._m0[_2604].z + _952;
        float _2630 = inversesqrt(dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626)));
        float _2631 = _2630 * _2624;
        float _2632 = _2630 * _2625;
        float _2633 = _2630 * _2626;
        float _2634 = dot(vec3(_870, _871, _872), vec3(cbLight._m0[_2604].xyz));
        float _4632 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2637 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2638 = dot(vec3(_870, _871, _872), vec3(_2631, _2632, _2633));
        float _4643 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2642 = dot(vec3(cbLight._m0[_2604].xyz), vec3(_2631, _2632, _2633));
        float _4654 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2646 = _2623 * _2623;
        float _2650 = ((_2641 * _2641) * (_2646 + (-1.0))) + 1.0;
        float _2657 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
        float _2664 = 1.0 - _2623;
        float _2674 = (0.5 / (((_2284 * ((_2637 * _2664) + _2623)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2664) + _2623) * _2637))) * _2637;
        float _4665 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
        float _2676 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2646 / ((_2650 * _2650) * 3.141590118408203125));
        float _2677 = isnan(1.0) ? _2135 : (isnan(_2135) ? 1.0 : min(_2135, 1.0));
        _2593 = (((((_2657 * _2306) + _1032) * cbLight._m0[_2608].x) * _2676) * _2677) + _2479;
        _2595 = (((((_2657 * _2308) + _1034) * cbLight._m0[_2608].y) * _2676) * _2677) + _2481;
        _2597 = (((((_2657 * _2309) + _1035) * cbLight._m0[_2608].z) * _2676) * _2677) + _2483;
    }
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_2117.y == 0u)
    {
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2752;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2752;
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2752;
        uvec4 _2767 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2768 = _2767.x;
        uint _2779 = uint((float(_2767.y) * floor(float(uint(cbSceneParam._m0[85u].y * _971) / _2768))) + floor(float(uint(cbSceneParam._m0[85u].x * _970) / _2768)));
        float _2789 = (log2(_2755 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2790 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        uint _2793 = uint(isnan(14.0) ? _2790 : (isnan(_2790) ? 14.0 : min(_2790, 14.0)));
        uvec4 _2798 = texelFetch(g_lightClusterGridBuffer, int(((_2793 << 2u) + (_2779 << 6u)) >> 2u));
        uint _2799 = _2798.x;
        uint _2800 = _2767.z;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        if (((((1u << ((_2800 >> 4u) & 15u)) + 4294967295u) & _2799) == 0u) || ((_2800 & 240u) == 0u))
        {
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
            _2910 = 0.0;
        }
        else
        {
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _2911;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            uint _3059 = 0u;
            uint _3068;
            bool _3069;
            for (;;)
            {
                _3068 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                _3069 = _3068 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3069)
                {
                    frontier_phi_66_pred = _3053;
                    frontier_phi_66_pred_1 = _3058;
                    frontier_phi_66_pred_2 = _3057;
                    frontier_phi_66_pred_3 = _3056;
                    frontier_phi_66_pred_4 = _3055;
                    frontier_phi_66_pred_5 = _3054;
                }
                else
                {
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    uint _3204;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3058;
                    _3204 = _3068;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    float _3130;
                    for (;;)
                    {
                        uint _3208 = uint(findLSB(_3204)) + (_3059 << 5u);
                        uint _3205 = (_3204 + 4294967295u) & _3204;
                        uint _3210 = _3208 * 48u;
                        vec4 _3224 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3230 = (_3208 * 48u) + 4u;
                        vec4 _3243 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3230)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3230 + 3u)).x));
                        uint _3249 = (_3208 * 48u) + 8u;
                        vec3 _3260 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3249)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3249 + 2u)).x));
                        float _3264 = _3224.x - _2753;
                        float _3265 = _3224.y - _2754;
                        float _3266 = _3224.z - _2755;
                        float _3267 = dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266));
                        float _3270 = inversesqrt(_3267);
                        float _3271 = _3270 * _3264;
                        float _3272 = _3270 * _3265;
                        float _3273 = _3270 * _3266;
                        float _3274 = dot(vec3(_989, _992, _995), vec3(_3271, _3272, _3273));
                        float _3279 = 1.0 - (_3267 * _3224.w);
                        float _4691 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3280 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3281 = sqrt(_3267) * _3243.w;
                        float _3284 = 1.39999997615814208984375 / (_3281 + 1.39999997615814208984375);
                        float _3285 = _3284 * _3284;
                        float _3288 = ((1.0 - _3285) * _3274) + _3285;
                        float _3291 = _3281 * _3281;
                        float _3295 = ((isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0))) * _3280) / ((_3291 * 0.699999988079071044921875) + 1.0);
                        float _3299 = (-0.0) - _2753;
                        float _3300 = (-0.0) - _2754;
                        float _3301 = (-0.0) - _2755;
                        float _3305 = inversesqrt(dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301)));
                        float _3306 = _3305 * _3299;
                        float _3307 = _3305 * _3300;
                        float _3308 = _3305 * _3301;
                        float _3316 = exp2(log2(1.0 / ((_3291 * 3.5) + 5.0)) * 0.25);
                        float _3317 = 1.0 - _1064;
                        float _3324 = sqrt(1.0 - ((1.0 - (_3317 * _3317)) * (1.0 - (_3316 * _3316))));
                        float _3325 = _3324 * _3324;
                        float _3326 = _3325 * _3325;
                        float _3327 = _3306 + _3271;
                        float _3328 = _3307 + _3272;
                        float _3329 = _3308 + _3273;
                        float _3333 = inversesqrt(dot(vec3(_3327, _3328, _3329), vec3(_3327, _3328, _3329)));
                        float _3337 = dot(vec3(_989, _992, _995), vec3(_3306, _3307, _3308));
                        float _4707 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3340 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                        float _3341 = dot(vec3(_989, _992, _995), vec3(_3333 * _3327, _3333 * _3328, _3333 * _3329));
                        float _4718 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3344 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
                        float _3348 = ((_3344 * _3344) * (_3326 + (-1.0))) + 1.0;
                        float _3349 = _3284 * _3325;
                        float _3350 = _3349 * _3349;
                        float _3353 = ((1.0 - _3350) * _3274) + _3350;
                        float _4729 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3355 = 1.0 - _3325;
                        float _3365 = (0.5 / (((_3354 * ((_3340 * _3355) + _3325)) + 9.9999999392252902907785028219223e-09) + (((_3354 * _3355) + _3325) * _3340))) * _3354;
                        float _4740 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                        float _3376 = (((_3326 * 3.1415927410125732421875) * (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) / ((_3348 * _3348) * ((_3291 * 2.1991131305694580078125) + 3.141590118408203125))) * _3280;
                        _3128 = (_3295 * _3243.x) + _3201;
                        _3129 = (_3295 * _3243.y) + _3202;
                        _3130 = (_3295 * _3243.z) + _3203;
                        _3125 = (_3376 * _3260.x) + _3198;
                        _3126 = (_3376 * _3260.y) + _3199;
                        _3127 = (_3376 * _3260.z) + _3200;
                        if (_3205 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3130;
                            _3204 = _3205;
                        }
                    }
                    frontier_phi_66_pred = _3125;
                    frontier_phi_66_pred_1 = _3130;
                    frontier_phi_66_pred_2 = _3129;
                    frontier_phi_66_pred_3 = _3128;
                    frontier_phi_66_pred_4 = _3127;
                    frontier_phi_66_pred_5 = _3126;
                }
                _2901 = frontier_phi_66_pred;
                _2911 = frontier_phi_66_pred_1;
                _2909 = frontier_phi_66_pred_2;
                _2907 = frontier_phi_66_pred_3;
                _2905 = frontier_phi_66_pred_4;
                _2903 = frontier_phi_66_pred_5;
                uint _3060 = _3059 + 1u;
                if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3053 = _2901;
                    _3054 = _2903;
                    _3055 = _2905;
                    _3056 = _2907;
                    _3057 = _2909;
                    _3058 = _2911;
                    _3059 = _3060;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
            _2910 = _2911;
        }
        uvec4 _2914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2915 = _2914.z;
        uint _2917 = (_2915 >> 8u) & 15u;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((4294967295u << _2917) & _2799) == 0u)
        {
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
            _3031 = _2910;
        }
        else
        {
            float _3046 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
            float _3047 = _3046 * _2753;
            float _3048 = _3046 * _2754;
            float _3049 = _3046 * _2755;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2917 < ((_2915 >> 12u) & 15u))
            {
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3181 = _2900;
                float _3182 = _2902;
                float _3183 = _2904;
                float _3184 = _2906;
                float _3185 = _2908;
                float _3186 = _2910;
                uint _3187 = _2917;
                uint _3196;
                bool _3197;
                for (;;)
                {
                    _3196 = texelFetch(g_lightClassification, int((((_2793 << 5u) + (_2779 << 9u)) + (_3187 << 2u)) >> 2u)).x;
                    _3197 = _3196 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3197)
                    {
                        frontier_phi_77_pred = _3186;
                        frontier_phi_77_pred_1 = _3185;
                        frontier_phi_77_pred_2 = _3184;
                        frontier_phi_77_pred_3 = _3183;
                        frontier_phi_77_pred_4 = _3182;
                        frontier_phi_77_pred_5 = _3181;
                    }
                    else
                    {
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3688;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        float _3408 = _3186;
                        uint _3409 = _3196;
                        uint _3410;
                        vec4 _3435;
                        float _3436;
                        vec4 _3451;
                        vec3 _3463;
                        vec4 _3478;
                        vec4 _3493;
                        float _3539;
                        bool _3540;
                        for (;;)
                        {
                            uint _3420 = ((_3187 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3409));
                            _3410 = (_3409 + 4294967295u) & _3409;
                            uint _3422 = _3420 * 40u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            _3436 = _3435.w;
                            uint _3438 = (_3420 * 40u) + 4u;
                            _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3453 = (_3420 * 40u) + 8u;
                            _3463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3453 + 2u)).x));
                            uint _3465 = (_3420 * 40u) + 16u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3420 * 40u) + 20u;
                            _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3495 = (_3420 * 40u) + 24u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            uint _3514 = (_3420 * 40u) + 28u;
                            vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            _3539 = fma(_2755, _3527.z, fma(_2754, _3527.y, _3527.x * _2753)) + _3527.w;
                            _3540 = !((fma(_2755, _3508.z, fma(_2754, _3508.y, _3508.x * _2753)) + _3508.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3540)
                            {
                                float _3567 = _3435.x - _2753;
                                float _3568 = _3435.y - _2754;
                                float _3569 = _3435.z - _2755;
                                float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                                float _3573 = inversesqrt(_3570);
                                float _3574 = _3573 * _3567;
                                float _3575 = _3573 * _3568;
                                float _3576 = _3573 * _3569;
                                float _3580 = 1.0 - (_3570 / (_3436 * _3436));
                                float _4751 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3581 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3585 = sqrt(_3570) * _3451.w;
                                float _3587 = 1.39999997615814208984375 / (_3585 + 1.39999997615814208984375);
                                float _3588 = _3587 * _3587;
                                float _3591 = ((1.0 - _3588) * dot(vec3(_3574, _3575, _3576), vec3(_989, _992, _995))) + _3588;
                                float _3594 = _3585 * _3585;
                                float _3598 = (fma(_2755, _3478.z, fma(_2754, _3478.y, _3478.x * _2753)) + _3478.w) / _3539;
                                float _3599 = (fma(_2755, _3493.z, fma(_2754, _3493.y, _3493.x * _2753)) + _3493.w) / _3539;
                                float _3603 = 1.0 - dot(vec2(_3598, _3599), vec2(_3598, _3599));
                                float _4767 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                                float _3605 = _3604 * (((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3581) / ((_3594 * 0.699999988079071044921875) + 1.0));
                                float _3617 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                                float _3618 = 1.0 - _1064;
                                float _3625 = sqrt(1.0 - ((1.0 - (_3618 * _3618)) * (1.0 - (_3617 * _3617))));
                                float _3626 = _3625 * _3625;
                                float _3627 = _3626 * _3626;
                                float _3628 = _3574 - _3047;
                                float _3629 = _3575 - _3048;
                                float _3630 = _3576 - _3049;
                                float _3634 = inversesqrt(dot(vec3(_3628, _3629, _3630), vec3(_3628, _3629, _3630)));
                                float _3638 = dot(vec3(_989, _992, _995), vec3((-0.0) - _3047, (-0.0) - _3048, (-0.0) - _3049));
                                float _4778 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3641 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                                float _3642 = dot(vec3(_989, _992, _995), vec3(_3634 * _3628, _3634 * _3629, _3634 * _3630));
                                float _4789 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3645 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3649 = ((_3645 * _3645) * (_3627 + (-1.0))) + 1.0;
                                float _3650 = _3587 * _3626;
                                float _3651 = _3650 * _3650;
                                float _3657 = ((1.0 - _3651) * dot(vec3(_989, _992, _995), vec3(_3574, _3575, _3576))) + _3651;
                                float _4800 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                                float _3659 = 1.0 - _3626;
                                float _3669 = (0.5 / (((_3658 * ((_3641 * _3659) + _3626)) + 9.9999999392252902907785028219223e-09) + (((_3658 * _3659) + _3626) * _3641))) * _3658;
                                float _4811 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3679 = (_3604 * _3581) * (((_3627 * 3.1415927410125732421875) * (isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0)))) / ((_3649 * _3649) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3605 * _3451.y;
                                frontier_phi_83_pred_1 = _3605 * _3451.x;
                                frontier_phi_83_pred_2 = _3679 * _3463.z;
                                frontier_phi_83_pred_3 = _3679 * _3463.y;
                                frontier_phi_83_pred_4 = _3679 * _3463.x;
                                frontier_phi_83_pred_5 = _3605 * _3451.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3687 = frontier_phi_83_pred;
                            _3686 = frontier_phi_83_pred_1;
                            _3685 = frontier_phi_83_pred_2;
                            _3684 = frontier_phi_83_pred_3;
                            _3683 = frontier_phi_83_pred_4;
                            _3688 = frontier_phi_83_pred_5;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3395 = _3688 + _3408;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            _3392 = _3685 + _3405;
                            if (_3410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3395;
                                _3409 = _3410;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3395;
                        frontier_phi_77_pred_1 = _3394;
                        frontier_phi_77_pred_2 = _3393;
                        frontier_phi_77_pred_3 = _3392;
                        frontier_phi_77_pred_4 = _3391;
                        frontier_phi_77_pred_5 = _3390;
                    }
                    _3032 = frontier_phi_77_pred;
                    _3030 = frontier_phi_77_pred_1;
                    _3028 = frontier_phi_77_pred_2;
                    _3026 = frontier_phi_77_pred_3;
                    _3024 = frontier_phi_77_pred_4;
                    _3022 = frontier_phi_77_pred_5;
                    uint _3188 = _3187 + 1u;
                    if (_3188 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3181 = _3022;
                        _3182 = _3024;
                        _3183 = _3026;
                        _3184 = _3028;
                        _3185 = _3030;
                        _3186 = _3032;
                        _3187 = _3188;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3026;
                frontier_phi_58_59_ladder_1 = _3032;
                frontier_phi_58_59_ladder_2 = _3030;
                frontier_phi_58_59_ladder_3 = _3028;
                frontier_phi_58_59_ladder_4 = _3024;
                frontier_phi_58_59_ladder_5 = _3022;
            }
            else
            {
                frontier_phi_58_59_ladder = _2904;
                frontier_phi_58_59_ladder_1 = _2910;
                frontier_phi_58_59_ladder_2 = _2908;
                frontier_phi_58_59_ladder_3 = _2906;
                frontier_phi_58_59_ladder_4 = _2902;
                frontier_phi_58_59_ladder_5 = _2900;
            }
            _3021 = frontier_phi_58_59_ladder_5;
            _3023 = frontier_phi_58_59_ladder_4;
            _3025 = frontier_phi_58_59_ladder;
            _3027 = frontier_phi_58_59_ladder_3;
            _3029 = frontier_phi_58_59_ladder_2;
            _3031 = frontier_phi_58_59_ladder_1;
        }
        float _3036 = isnan(1.0) ? _1048 : (isnan(_1048) ? 1.0 : min(_1048, 1.0));
        _2812 = (_3036 * _3027) + _2248;
        _2814 = (_3036 * _3029) + _2250;
        _2816 = (_3036 * _3031) + _2252;
        _2818 = ((_3021 * _1032) * _3036) + _2593;
        _2820 = ((_3023 * _1034) * _3036) + _2595;
        _2822 = ((_3025 * _1035) * _3036) + _2597;
    }
    else
    {
        _2812 = _2248;
        _2814 = _2250;
        _2816 = _2252;
        _2818 = _2593;
        _2820 = _2595;
        _2822 = _2597;
    }
    float _4827 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _4838 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
    float _4849 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _2839 = ((isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * (_2812 + ((isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))) * _1048))) + ((_2818 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _2840 = ((isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0))) * (_2814 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1048))) + ((_2820 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    float _2841 = ((isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2816 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1048))) + ((_2822 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1886)) * cbPerFrame._m0[3u].x);
    uint _2842 = _280 + 6u;
    float _2850 = _970 / cbSceneParam._m0[86u].x;
    float _2851 = _971 / cbSceneParam._m0[86u].y;
    vec4 _2865 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2867 = _2865.x;
    float _2868 = _2865.y;
    float _2869 = _2865.z;
    float _2870 = _2865.w;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _2925 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _2926 = _2925 / _892;
        float _2937 = _2926 * _943;
        float _2938 = _944 * _2926;
        float _2939 = (-0.0) - _2938;
        float _2941 = _2926 * _945;
        float _2943 = (cbSceneParam._m0[77u].w * _2939) / _2925;
        float _2944 = _2943 + cbSceneParam._m0[79u].w;
        float _2945 = cbSceneParam._m0[79u].w - _2938;
        float _2951 = sqrt(((_2937 * _2937) + (_2938 * _2938)) + (_2941 * _2941));
        float _2954 = (1.0 - (cbSceneParam._m0[77u].w / _2925)) * _2951;
        float _2959 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2961 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3138;
        if (abs((_2939 - _2943) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3138 = ((((_2944 > 0.0) ? exp2(_2959 * _2944) : (2.0 - exp2(_2961 * _2944))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2954;
        }
        else
        {
            float _3082 = 1.0 / cbSceneParam._m0[80u].x;
            float _3083 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : max(_2944, _2945));
            float _3084 = isnan(_2945) ? _2944 : (isnan(_2944) ? _2945 : min(_2944, _2945));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            _3138 = ((abs(_2951 / _2939) * cbSceneParam._m0[80u].y) * ((((_3093 - _3094) * 2.0) - ((exp2(_2959 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0)))) - exp2(_2959 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))))) * _3082)) - ((exp2(_2961 * _3093) - exp2(_2961 * _3094)) * _3082))) + (_2954 * cbSceneParam._m0[80u].z);
        }
        vec4 _3140 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2850, _2851, 1.0), 0.0);
        float _3149 = exp2((_3138 * (-1.44269502162933349609375)) * (1.0 - _3140.w));
        float _3150 = log2(_3149);
        float _3166 = log2(_2870);
        _2963 = (exp2(_3166 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].x)) * _3140.x) / cbSceneParam._m0[78u].x)) + _2867;
        _2965 = (exp2(_3166 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].y)) * _3140.y) / cbSceneParam._m0[78u].y)) + _2868;
        _2967 = (exp2(_3166 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3150 * cbSceneParam._m0[78u].z)) * _3140.z) / cbSceneParam._m0[78u].z)) + _2869;
        _2969 = _3149 * _2870;
    }
    else
    {
        _2963 = _2867;
        _2965 = _2868;
        _2967 = _2869;
        _2969 = _2870;
    }
    bool _3176;
    vec4 _2979;
    vec4 _3001;
    float _3003;
    float _3007;
    float _3008;
    float _3009;
    float _3010;
    bool _3020;
    for (;;)
    {
        _2979 = cbMatDynParam._m0[0u];
        float _2981 = roundEven(_2979.y);
        bool _2982 = _2981 == 3.0;
        float _2983 = log2(_2969);
        float _2990 = exp2(_2983 * cbSceneParam._m0[78u].x) * _2839;
        float _2991 = exp2(_2983 * cbSceneParam._m0[78u].y) * _2840;
        float _2992 = exp2(_2983 * cbSceneParam._m0[78u].z) * _2841;
        float _2999 = _959 + (-0.5);
        _3001 = cbMtdParam._m0[1u];
        _3003 = _3001.y * _2999;
        float _3006 = (_2981 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3007 = _3006 * (_2982 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2963)));
        _3008 = _3006 * (_2982 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2965)));
        _3009 = _3006 * (_2982 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2967)));
        _3010 = _2999 * 0.999000012874603271484375;
        _3020 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3020)
        {
            if ((cbInstanceData._m0[_280 + 7u].x + _3010) < 0.5)
            {
                _3176 = true;
                break;
            }
        }
        uint _3117 = _1008 + uint(_2979.w);
        if ((cbInstanceData._m0[_3117].w < 1.0) && ((cbInstanceData._m0[_3117].w + _3010) < 0.5))
        {
            _3176 = true;
            break;
        }
        if ((_3003 + 1.0) < _3001.x)
        {
            _3176 = true;
            break;
        }
        _3176 = false;
        break;
    }
    float _3381;
    if (_3176)
    {
        discard_state = true;
        _3381 = 0.0;
    }
    else
    {
        _3381 = cbInstanceData._m0[_2842].w;
    }
    SV_Target.x = _3007;
    SV_Target.y = _3008;
    SV_Target.z = _3009;
    SV_Target.w = _3381;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2842].w;
    discard_exit();
}


