#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1258;
float _3642;
float _3643;
float _3644;
float _3645;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _257 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _258 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3654 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _3665 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _3676 = isnan(0.0) ? _258 : (isnan(_258) ? 0.0 : max(_258, 0.0));
    uint _268 = uint(roundEven(NORMAL.w)) * 13u;
    uint _273 = _268 + 1u;
    uint _277 = _268 + 2u;
    float _286 = sqrt(((cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x)) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x));
    float _287 = _286 * TEXCOORD.z;
    float _288 = _286 * TEXCOORD.w;
    vec4 _301 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _287) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _288) + cbTextureTilingScale._m0[13u].w));
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _287) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _288) + cbTextureTilingScale._m0[5u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[23u].w) + _438) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3687 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _466 = (_324.x * cbMtdParam._m0[9u].x) * ((_456 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355);
    float _467 = (_324.y * cbMtdParam._m0[9u].y) * ((_456 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356);
    float _468 = (_324.z * cbMtdParam._m0[9u].z) * ((_456 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357);
    float _472 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _301.x) * _466;
    float _475 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _301.y) * _467;
    float _478 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _301.z) * _468;
    float _486 = (((_466 - _472) * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) + _472) * 4.55000019073486328125;
    float _488 = (((_467 - _475) * (isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0)))) + _475) * 4.55000019073486328125;
    float _490 = (((_468 - _478) * (isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0)))) + _478) * 4.55000019073486328125;
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _287) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _288) + cbTextureTilingScale._m0[20u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _287) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _288) + cbTextureTilingScale._m0[4u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _547 = _545.x;
    float _548 = _545.y;
    float _549 = _545.z;
    float _558 = ((_528.z - _549) * _456) + _549;
    float _561 = ((((_528.x - _547) * _456) + _547) * 2.0) + (-1.0);
    float _562 = ((((_528.y - _548) * _456) + _548) * 2.0) + (-1.0);
    float _563 = dot(vec2(_561, _562), vec2(_561, _562));
    float _3698 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))));
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _602 = (_561 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_503.x * 2.0) + (-1.0)))) + (((_590.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _603 = (_562 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_503.y * 2.0) + (-1.0)))) + (((_590.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _631 = _629.x;
    float _648 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _287) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _288) + cbTextureTilingScale._m0[9u].w)).x - _631) * _456) + _631;
    float _652 = ((_615.x - _648) * cbMtdParam._m0[19u].z) + _648;
    float _657 = (((_503.z - _558) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _558;
    float _661 = ((_590.z - _657) * cbMtdParam._m0[19u].w) + _657;
    float _663 = cbMtdParam._m0[22u].x + _590.w;
    float _666 = fma(_568, _234 * NORMAL.x, fma(_603, _241 * TANGENT.x, (_227 * _219) * _602));
    float _669 = fma(_568, _234 * NORMAL.y, fma(_603, _241 * TANGENT.y, (_227 * _220) * _602));
    float _672 = fma(_568, _234 * NORMAL.z, fma(_603, _241 * TANGENT.z, (_227 * _221) * _602));
    float _676 = inversesqrt(dot(vec3(_666, _669, _672), vec3(_666, _669, _672)));
    float _677 = _676 * _666;
    float _678 = _676 * _669;
    float _679 = _676 * _672;
    float _3709 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _680 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _3731 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3742 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3753 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3764 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _685 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _750 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _740);
    float _751 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _740);
    float _752 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _740);
    float _756 = inversesqrt(dot(vec3(_750, _751, _752), vec3(_750, _751, _752)));
    float _757 = _750 * _756;
    float _758 = _751 * _756;
    float _759 = _752 * _756;
    vec4 _764 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _766 = _764.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _938 = sqrt(((_750 * _750) + (_751 * _751)) + (_752 * _752));
        float _944 = (cbMatDynParam._m0[5u].x * _938) + cbMatDynParam._m0[5u].y;
        float _3775 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _949 = (cbMatDynParam._m0[5u].z * _938) + cbMatDynParam._m0[5u].w;
        float _3786 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) - _945)) + _945) < ((_766 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _777 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _778 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _796 = fma(_679, cbSceneParam._m0[5u].z, fma(_678, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _677));
    float _799 = fma(_679, cbSceneParam._m0[6u].z, fma(_678, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _677));
    float _802 = fma(_679, cbSceneParam._m0[7u].z, fma(_678, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _677));
    uint _815 = _268 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3797 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
    float _3808 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
    float _3819 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
    float _828 = 1.0 - _685;
    float _829 = _825 * _828;
    float _830 = _826 * _828;
    float _831 = _827 * _828;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _685;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _685;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _685;
    float _839 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _777, cbSceneParam._m0[86u].y * _778));
    float _855 = ((isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * TEXCOORD_5.w) * _851.x;
    float _856 = dot(vec3(_677, _678, _679), vec3(_757, _758, _759));
    float _859 = _856 * 2.0;
    float _863 = (_859 * _677) - _757;
    float _864 = (_859 * _678) - _758;
    float _865 = (_859 * _679) - _759;
    float _869 = abs(dot(vec3(_757, _758, _759), vec3(_677, _678, _679)));
    float _3830 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _871 = sqrt(_680);
    float _884 = exp2((_871 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_871 * 3.0));
    float _890 = (1.0 - _884) * ((_871 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _891 = _884 * _871;
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _986 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _990 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _1015 = _919 + _677;
        float _1016 = _923 + _678;
        float _1017 = _927 + _679;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_677, _678, _679), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3878 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_677, _678, _679), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3911 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_677, _678, _679), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3922 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3933 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3944 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1300 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1304 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1308 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1331 = _919 + _677;
        float _1332 = _923 + _678;
        float _1333 = _927 + _679;
        float _1343 = fma(_1333, cbModelParam._m0[30u].z, fma(_1332, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1331)) - _1300;
        float _1344 = fma(_1333, cbModelParam._m0[31u].z, fma(_1332, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1331)) - _1304;
        float _1345 = fma(_1333, cbModelParam._m0[32u].z, fma(_1332, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1331)) - _1308;
        float _1349 = inversesqrt(dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345)));
        float _1362 = ((_1349 * _1343) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1300 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1349 * _1344) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1304 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1349 * _1345) / cbModelParam._m0[35u].z) + ((((((_1308 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1362, _1363, _1364), 0.0);
        float _1399 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1366.x + (-0.5));
        float _1401 = _1399 * (_1366.y + (-0.5));
        float _1402 = _1399 * (_1366.z + (-0.5));
        float _1409 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1373.x + (-0.5));
        float _1411 = _1409 * (_1373.y + (-0.5));
        float _1412 = _1409 * (_1373.z + (-0.5));
        float _1419 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1380.x + (-0.5));
        float _1421 = _1419 * (_1380.y + (-0.5));
        float _1422 = _1419 * (_1380.z + (-0.5));
        float _1429 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1387.x + (-0.5));
        float _1431 = _1429 * (_1387.y + (-0.5));
        float _1432 = _1429 * (_1387.z + (-0.5));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = _1400 * 0.5;
        float _1437 = _1410 * 0.5;
        float _1438 = _1420 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_677, _678, _679), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _3985 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3996 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4007 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (_1463 + 1.0))) + _1468) * _1433;
        float _1478 = _1401 * 0.5;
        float _1479 = _1411 * 0.5;
        float _1480 = _1421 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_677, _678, _679), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4040 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1505 + 1.0))) + _1510) * _1434;
        float _1520 = _1402 * 0.5;
        float _1521 = _1412 * 0.5;
        float _1522 = _1422 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_677, _678, _679), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4073 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1547 + 1.0))) + _1552) * _1435;
        _1569 = _1402;
        _1570 = _1401;
        _1571 = _1400;
        _1572 = _1412;
        _1573 = _1411;
        _1574 = _1410;
        _1575 = _1422;
        _1576 = _1421;
        _1577 = _1420;
        _1578 = _1435;
        _1579 = _1434;
        _1580 = _1433;
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1258;
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = _1258;
        _1580 = _1258;
        _1581 = 0.0;
        _1582 = 0.0;
        _1583 = 0.0;
    }
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1270)) + _1270;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1271)) + _1271;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1272)) + _1272;
    float _1616 = fma(_1595, cbSceneParam._m0[89u].z, fma(_1594, cbSceneParam._m0[89u].y, _1593 * cbSceneParam._m0[89u].x));
    float _1619 = fma(_1595, cbSceneParam._m0[90u].z, fma(_1594, cbSceneParam._m0[90u].y, _1593 * cbSceneParam._m0[90u].x));
    float _1622 = fma(_1595, cbSceneParam._m0[91u].z, fma(_1594, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1593));
    float _1637 = _863 * 0.5;
    float _1638 = _864 * 0.5;
    float _1639 = _865 * 0.5;
    float _1640 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1643 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1646 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1680;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1653 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1657 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1661 = dot(vec4(_1637, _1638, _1639, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1668 = dot(vec4(cbModelParam._m0[39u]), vec4(_1637, _1638, _1639, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1668) ? 0.0 : (isnan(0.0) ? _1668 : max(0.0, _1668))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1691;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1682 = dot(vec4(cbModelParam._m0[40u]), vec4(_1637, _1638, _1639, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)), isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1682) ? 0.0 : (isnan(0.0) ? _1682 : max(0.0, _1682))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1695 = (_1691 * cbModelParam._m0[1u].x) + (_1680 * (1.0 - cbModelParam._m0[1u].x));
    float _1705 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _680);
    float _1706 = isnan(_1705) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1705 : min(cbModelParam._m0[25u].z, _1705));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1755 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1759 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1763 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1766 = fma(_865, cbModelParam._m0[13u].z, fma(_864, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _863));
        float _1769 = fma(_865, cbModelParam._m0[14u].z, fma(_864, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _863));
        float _1772 = fma(_865, cbModelParam._m0[15u].z, fma(_864, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _863));
        float _1800;
        if (_1766 > 0.0)
        {
            _1800 = abs((1.0 - _1755) / _1766);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1755 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1800 = frontier_phi_17_15_ladder;
        }
        float _2004;
        if (_1769 > 0.0)
        {
            _2004 = abs((1.0 - _1759) / _1769);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1759 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2004 = frontier_phi_26_22_ladder;
        }
        float _2258;
        if (_1772 > 0.0)
        {
            _2258 = abs((1.0 - _1763) / _1772);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1763 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2258 = frontier_phi_38_33_ladder;
        }
        float _2260 = isnan(_2004) ? _1800 : (isnan(_1800) ? _2004 : min(_1800, _2004));
        float _2261 = isnan(_2258) ? _2260 : (isnan(_2260) ? _2258 : min(_2260, _2258));
        float _2265 = (_2261 * _1766) + _1755;
        float _2266 = (_2261 * _1769) + _1759;
        float _2267 = (_2261 * _1772) + _1763;
        float _2268 = _2261 * 9.9999997473787516355514526367188e-05;
        float _2270 = (-1.0) - _2268;
        float _2272 = _2268 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2267 > _2272) || ((_2267 < _2270) || ((_2266 > _2272) || ((_2266 < _2270) || ((_2265 < _2270) || (_2265 > _2272))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2395 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2267, cbModelParam._m0[9u].z, fma(_2266, cbModelParam._m0[9u].y, _2265 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2267, cbModelParam._m0[10u].z, fma(_2266, cbModelParam._m0[10u].y, _2265 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2267, cbModelParam._m0[11u].z, fma(_2266, cbModelParam._m0[11u].y, _2265 * cbModelParam._m0[11u].x))), _1706);
            frontier_phi_16_38_ladder = _2395.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2395.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2395.x * cbModelParam._m0[1u].y;
        }
        _1788 = frontier_phi_16_38_ladder_2;
        _1790 = frontier_phi_16_38_ladder_1;
        _1792 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_863, _864, _865), _1706);
        _1788 = _1776.x * cbModelParam._m0[1u].y;
        _1790 = _1776.y * cbModelParam._m0[1u].y;
        _1792 = _1776.z * cbModelParam._m0[1u].y;
    }
    float _1796 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _680);
    float _1797 = isnan(_1796) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1796 : min(cbModelParam._m0[25u].w, _1796));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_865, cbModelParam._m0[21u].z, fma(_864, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _863));
        float _1866 = fma(_865, cbModelParam._m0[22u].z, fma(_864, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _863));
        float _1869 = fma(_865, cbModelParam._m0[23u].z, fma(_864, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _863));
        float _2009;
        if (_1863 > 0.0)
        {
            _2009 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2009 = frontier_phi_28_24_ladder;
        }
        float _2285;
        if (_1866 > 0.0)
        {
            _2285 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2285 = frontier_phi_40_35_ladder;
        }
        float _2498;
        if (_1869 > 0.0)
        {
            _2498 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2498 = frontier_phi_49_46_ladder;
        }
        float _2500 = isnan(_2285) ? _2009 : (isnan(_2009) ? _2285 : min(_2009, _2285));
        float _2501 = isnan(_2498) ? _2500 : (isnan(_2500) ? _2498 : min(_2500, _2498));
        float _2505 = (_2501 * _1863) + _1852;
        float _2506 = (_2501 * _1866) + _1856;
        float _2507 = (_2501 * _1869) + _1860;
        float _2508 = _2501 * 9.9999997473787516355514526367188e-05;
        float _2509 = (-1.0) - _2508;
        float _2511 = _2508 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2507 > _2511) || ((_2507 < _2509) || ((_2506 > _2511) || ((_2506 < _2509) || ((_2505 < _2509) || (_2505 > _2511))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2507, cbModelParam._m0[17u].z, fma(_2506, cbModelParam._m0[17u].y, _2505 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2507, cbModelParam._m0[18u].z, fma(_2506, cbModelParam._m0[18u].y, _2505 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2507, cbModelParam._m0[19u].z, fma(_2506, cbModelParam._m0[19u].y, _2505 * cbModelParam._m0[19u].x))), _1797);
            frontier_phi_25_49_ladder = _2706.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2706.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2706.x * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_25_49_ladder_2;
        _1890 = frontier_phi_25_49_ladder_1;
        _1892 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_863, _864, _865), _1797);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1905 = (((_890 * _839) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1888 - _1788)) + _1788);
    float _1907 = (((_890 * _841) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1890 - _1790)) + _1790);
    float _1909 = (((_890 * _842) + _891) * _855) * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1907, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1907, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1907, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    uvec4 _1928 = floatBitsToUint(cbInstanceData._m0[_268 + 5u]);
    uint _1930 = _1928.x * 14u;
    uint _1931 = _1930 + 13u;
    float _1938 = _855 + (-1.0);
    float _1943 = (cbLight._m0[_1931].x * _1938) + 1.0;
    float _1944 = (cbLight._m0[_1931].y * _1938) + 1.0;
    float _1945 = (cbLight._m0[_1931].z * _1938) + 1.0;
    float _1946 = (cbLight._m0[_1931].w * _1938) + 1.0;
    uint _1947 = _1930 + 5u;
    float _1953 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1957 = _1930 + 4u;
    float _1963 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1967 = _1930 | 1u;
    float _1978 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_677, _678, _679));
    float _1981 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_677, _678, _679));
    float _4209 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _4220 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1986 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * 0.3183098733425140380859375;
    float _1988 = (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * 0.3183098733425140380859375;
    float _1995 = ((cbLight._m0[_1947].x * _1953) * _1988) + ((cbLight._m0[_1957].x * _1963) * _1986);
    float _1996 = ((_1953 * cbLight._m0[_1947].y) * _1988) + ((_1963 * cbLight._m0[_1957].y) * _1986);
    float _1997 = ((_1953 * cbLight._m0[_1947].z) * _1988) + ((_1963 * cbLight._m0[_1957].z) * _1986);
    uvec4 _2001 = floatBitsToUint(cbLight._m0[_1930 + 12u]);
    bool _2003 = _2001.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_2003)
    {
        _2014 = _1995;
        _2016 = _1996;
        _2018 = _1997;
    }
    else
    {
        uint _2022 = _1930 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1930 + 2u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4231 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _2041 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1995;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1996;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1997;
    }
    bool _2021 = _2001.y == 0u;
    float _2059;
    float _2061;
    float _2063;
    if (_2021)
    {
        _2059 = _2014;
        _2061 = _2016;
        _2063 = _2018;
    }
    else
    {
        uint _2229 = _1930 + 7u;
        float _2245 = (dot(vec3(cbLight._m0[_1930 + 3u].xyz), vec3(_677, _678, _679)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4247 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _2248 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2059 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2014;
        _2061 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2016;
        _2063 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2018;
    }
    uint _2066 = _1930 + 8u;
    float _2079 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1930].w)) * _680) * 0.949999988079071044921875);
    float _2080 = _2079 * _2079;
    float _2081 = cbLight._m0[_1930].x + _757;
    float _2082 = cbLight._m0[_1930].y + _758;
    float _2083 = cbLight._m0[_1930].z + _759;
    float _2087 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
    float _2088 = _2087 * _2081;
    float _2089 = _2087 * _2082;
    float _2090 = _2087 * _2083;
    float _2091 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1930].xyz));
    float _4263 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _4274 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _2095 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _2096 = dot(vec3(_677, _678, _679), vec3(_2088, _2089, _2090));
    float _4285 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2099 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _2100 = dot(vec3(cbLight._m0[_1930].xyz), vec3(_2088, _2089, _2090));
    float _4296 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
    float _2104 = _2080 * _2080;
    float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
    float _2116 = exp2(log2(1.0 - (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * 5.0);
    float _2117 = 0.959999978542327880859375 - _836;
    float _2119 = 0.959999978542327880859375 - _837;
    float _2120 = 0.959999978542327880859375 - _838;
    float _2127 = 1.0 - _2080;
    float _2138 = (0.5 / (((_2095 * ((_2094 * _2127) + _2080)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2127) + _2080) * _2094))) * _2094;
    float _4307 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2140 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
    uint _2151 = _1930 + 9u;
    float _2162 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _680) * 0.949999988079071044921875);
    float _2163 = _2162 * _2162;
    float _2164 = cbLight._m0[_1967].x + _757;
    float _2165 = cbLight._m0[_1967].y + _758;
    float _2166 = cbLight._m0[_1967].z + _759;
    float _2170 = inversesqrt(dot(vec3(_2164, _2165, _2166), vec3(_2164, _2165, _2166)));
    float _2171 = _2170 * _2164;
    float _2172 = _2170 * _2165;
    float _2173 = _2170 * _2166;
    float _2174 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_1967].xyz));
    float _4318 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
    float _2177 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
    float _2178 = dot(vec3(_677, _678, _679), vec3(_2171, _2172, _2173));
    float _4329 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
    float _2181 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _2182 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_2171, _2172, _2173));
    float _4340 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2186 = _2163 * _2163;
    float _2190 = ((_2181 * _2181) * (_2186 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0)))) * 5.0);
    float _2204 = 1.0 - _2163;
    float _2214 = (0.5 / (((_2095 * ((_2177 * _2204) + _2163)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2204) + _2163) * _2177))) * _2177;
    float _4351 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2216 = (isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0))) * (_2186 / ((_2190 * _2190) * 3.141590118408203125));
    float _2226 = (((((_2197 * _2117) + _839) * cbLight._m0[_2151].x) * _2216) * _1953) + (((((_2116 * _2117) + _839) * cbLight._m0[_2066].x) * _2140) * _1963);
    float _2227 = (((((_2197 * _2119) + _841) * cbLight._m0[_2151].y) * _2216) * _1953) + (((((_2116 * _2119) + _841) * cbLight._m0[_2066].y) * _2140) * _1963);
    float _2228 = (((((_2197 * _2120) + _842) * cbLight._m0[_2151].z) * _2216) * _1953) + (((((_2116 * _2120) + _842) * cbLight._m0[_2066].z) * _2140) * _1963);
    float _2290;
    float _2292;
    float _2294;
    if (_2003)
    {
        _2290 = _2226;
        _2292 = _2227;
        _2294 = _2228;
    }
    else
    {
        uint _2296 = _1930 + 2u;
        uint _2300 = _1930 + 10u;
        float _2314 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _680) * 0.949999988079071044921875);
        float _2315 = _2314 * _2314;
        float _2316 = cbLight._m0[_2296].x + _757;
        float _2317 = cbLight._m0[_2296].y + _758;
        float _2318 = cbLight._m0[_2296].z + _759;
        float _2322 = inversesqrt(dot(vec3(_2316, _2317, _2318), vec3(_2316, _2317, _2318)));
        float _2323 = _2322 * _2316;
        float _2324 = _2322 * _2317;
        float _2325 = _2322 * _2318;
        float _2326 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2296].xyz));
        float _4362 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        float _2329 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _2330 = dot(vec3(_677, _678, _679), vec3(_2323, _2324, _2325));
        float _4373 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2333 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2334 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2323, _2324, _2325));
        float _4384 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2338 = _2315 * _2315;
        float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
        float _2349 = exp2(log2(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0)))) * 5.0);
        float _2356 = 1.0 - _2315;
        float _2366 = (0.5 / (((_2095 * ((_2329 * _2356) + _2315)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2356) + _2315) * _2329))) * _2329;
        float _4395 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2368 = (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
        float _2369 = isnan(1.0) ? _1945 : (isnan(_1945) ? 1.0 : min(_1945, 1.0));
        _2290 = (((((_2349 * _2117) + _839) * cbLight._m0[_2300].x) * _2368) * _2369) + _2226;
        _2292 = (((((_2349 * _2119) + _841) * cbLight._m0[_2300].y) * _2368) * _2369) + _2227;
        _2294 = (((((_2349 * _2120) + _842) * cbLight._m0[_2300].z) * _2368) * _2369) + _2228;
    }
    float _2404;
    float _2406;
    float _2408;
    if (_2021)
    {
        _2404 = _2290;
        _2406 = _2292;
        _2408 = _2294;
    }
    else
    {
        uint _2415 = _1930 + 3u;
        uint _2419 = _1930 + 11u;
        float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2415].w)) * _680) * 0.949999988079071044921875);
        float _2434 = _2433 * _2433;
        float _2435 = cbLight._m0[_2415].x + _757;
        float _2436 = cbLight._m0[_2415].y + _758;
        float _2437 = cbLight._m0[_2415].z + _759;
        float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
        float _2442 = _2441 * _2435;
        float _2443 = _2441 * _2436;
        float _2444 = _2441 * _2437;
        float _2445 = dot(vec3(_677, _678, _679), vec3(cbLight._m0[_2415].xyz));
        float _4411 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2449 = dot(vec3(_677, _678, _679), vec3(_2442, _2443, _2444));
        float _4422 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _2453 = dot(vec3(cbLight._m0[_2415].xyz), vec3(_2442, _2443, _2444));
        float _4433 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2457 = _2434 * _2434;
        float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
        float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) * 5.0);
        float _2475 = 1.0 - _2434;
        float _2485 = (0.5 / (((_2095 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2095 * _2475) + _2434) * _2448))) * _2448;
        float _4444 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2487 = (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
        float _2488 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
        _2404 = (((((_2468 * _2117) + _839) * cbLight._m0[_2419].x) * _2487) * _2488) + _2290;
        _2406 = (((((_2468 * _2119) + _841) * cbLight._m0[_2419].y) * _2487) * _2488) + _2292;
        _2408 = (((((_2468 * _2120) + _842) * cbLight._m0[_2419].z) * _2487) * _2488) + _2294;
    }
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    float _2633;
    if (_1928.y == 0u)
    {
        float _2563 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2563;
        float _2565 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2563;
        float _2566 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2563;
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.x;
        uint _2590 = uint((float(_2578.y) * floor(float(uint(cbSceneParam._m0[85u].y * _778) / _2579))) + floor(float(uint(cbSceneParam._m0[85u].x * _777) / _2579)));
        float _2600 = (log2(_2566 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2601 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        uint _2604 = uint(isnan(14.0) ? _2601 : (isnan(_2601) ? 14.0 : min(_2601, 14.0)));
        uvec4 _2609 = texelFetch(g_lightClusterGridBuffer, int(((_2604 << 2u) + (_2590 << 6u)) >> 2u));
        uint _2610 = _2609.x;
        uint _2611 = _2578.z;
        float _2711;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        if (((((1u << ((_2611 >> 4u) & 15u)) + 4294967295u) & _2610) == 0u) || ((_2611 & 240u) == 0u))
        {
            _2711 = 0.0;
            _2713 = 0.0;
            _2715 = 0.0;
            _2717 = 0.0;
            _2719 = 0.0;
            _2721 = 0.0;
        }
        else
        {
            float _2712;
            float _2714;
            float _2716;
            float _2718;
            float _2720;
            float _2722;
            float _2864 = 0.0;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            uint _2870 = 0u;
            uint _2879;
            bool _2880;
            for (;;)
            {
                _2879 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2870 << 2u)) >> 2u)).x;
                _2880 = _2879 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2880)
                {
                    frontier_phi_66_pred = _2864;
                    frontier_phi_66_pred_1 = _2869;
                    frontier_phi_66_pred_2 = _2868;
                    frontier_phi_66_pred_3 = _2867;
                    frontier_phi_66_pred_4 = _2866;
                    frontier_phi_66_pred_5 = _2865;
                }
                else
                {
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    float _3014;
                    uint _3015;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2866;
                    _3012 = _2867;
                    _3013 = _2868;
                    _3014 = _2869;
                    _3015 = _2879;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    for (;;)
                    {
                        uint _3019 = uint(findLSB(_3015)) + (_2870 << 5u);
                        uint _3016 = (_3015 + 4294967295u) & _3015;
                        uint _3021 = _3019 * 48u;
                        vec4 _3035 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3041 = (_3019 * 48u) + 4u;
                        vec4 _3054 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3041)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3041 + 3u)).x));
                        uint _3060 = (_3019 * 48u) + 8u;
                        vec3 _3071 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3060)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3060 + 2u)).x));
                        float _3075 = _3035.x - _2564;
                        float _3076 = _3035.y - _2565;
                        float _3077 = _3035.z - _2566;
                        float _3078 = dot(vec3(_3075, _3076, _3077), vec3(_3075, _3076, _3077));
                        float _3081 = inversesqrt(_3078);
                        float _3082 = _3081 * _3075;
                        float _3083 = _3081 * _3076;
                        float _3084 = _3081 * _3077;
                        float _3085 = dot(vec3(_796, _799, _802), vec3(_3082, _3083, _3084));
                        float _3090 = 1.0 - (_3078 * _3035.w);
                        float _4470 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                        float _3091 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3092 = sqrt(_3078) * _3054.w;
                        float _3095 = 1.39999997615814208984375 / (_3092 + 1.39999997615814208984375);
                        float _3096 = _3095 * _3095;
                        float _3099 = ((1.0 - _3096) * _3085) + _3096;
                        float _3102 = _3092 * _3092;
                        float _3106 = ((isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))) * _3091) / ((_3102 * 0.699999988079071044921875) + 1.0);
                        float _3110 = (-0.0) - _2564;
                        float _3111 = (-0.0) - _2565;
                        float _3112 = (-0.0) - _2566;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3117 = _3116 * _3110;
                        float _3118 = _3116 * _3111;
                        float _3119 = _3116 * _3112;
                        float _3127 = exp2(log2(1.0 / ((_3102 * 3.5) + 5.0)) * 0.25);
                        float _3128 = 1.0 - _871;
                        float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                        float _3136 = _3135 * _3135;
                        float _3137 = _3136 * _3136;
                        float _3138 = _3117 + _3082;
                        float _3139 = _3118 + _3083;
                        float _3140 = _3119 + _3084;
                        float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                        float _3148 = dot(vec3(_796, _799, _802), vec3(_3117, _3118, _3119));
                        float _4486 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3151 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
                        float _3152 = dot(vec3(_796, _799, _802), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                        float _4497 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3155 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
                        float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                        float _3160 = _3095 * _3136;
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3085) + _3161;
                        float _4508 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                        float _3166 = 1.0 - _3136;
                        float _3176 = (0.5 / (((_3165 * ((_3151 * _3166) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3165 * _3166) + _3136) * _3151))) * _3165;
                        float _4519 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3187 = (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) / ((_3159 * _3159) * ((_3102 * 2.1991131305694580078125) + 3.141590118408203125))) * _3091;
                        _2939 = (_3106 * _3054.x) + _3012;
                        _2940 = (_3106 * _3054.y) + _3013;
                        _2941 = (_3106 * _3054.z) + _3014;
                        _2936 = (_3187 * _3071.x) + _3009;
                        _2937 = (_3187 * _3071.y) + _3010;
                        _2938 = (_3187 * _3071.z) + _3011;
                        if (_3016 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _2938;
                            _3012 = _2939;
                            _3013 = _2940;
                            _3014 = _2941;
                            _3015 = _3016;
                        }
                    }
                    frontier_phi_66_pred = _2936;
                    frontier_phi_66_pred_1 = _2941;
                    frontier_phi_66_pred_2 = _2940;
                    frontier_phi_66_pred_3 = _2939;
                    frontier_phi_66_pred_4 = _2938;
                    frontier_phi_66_pred_5 = _2937;
                }
                _2712 = frontier_phi_66_pred;
                _2722 = frontier_phi_66_pred_1;
                _2720 = frontier_phi_66_pred_2;
                _2718 = frontier_phi_66_pred_3;
                _2716 = frontier_phi_66_pred_4;
                _2714 = frontier_phi_66_pred_5;
                uint _2871 = _2870 + 1u;
                if (_2871 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2864 = _2712;
                    _2865 = _2714;
                    _2866 = _2716;
                    _2867 = _2718;
                    _2868 = _2720;
                    _2869 = _2722;
                    _2870 = _2871;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2711 = _2712;
            _2713 = _2714;
            _2715 = _2716;
            _2717 = _2718;
            _2719 = _2720;
            _2721 = _2722;
        }
        uvec4 _2725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2726 = _2725.z;
        uint _2728 = (_2726 >> 8u) & 15u;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        float _2840;
        float _2842;
        if (((4294967295u << _2728) & _2610) == 0u)
        {
            _2832 = _2711;
            _2834 = _2713;
            _2836 = _2715;
            _2838 = _2717;
            _2840 = _2719;
            _2842 = _2721;
        }
        else
        {
            float _2857 = inversesqrt(dot(vec3(_2564, _2565, _2566), vec3(_2564, _2565, _2566)));
            float _2858 = _2857 * _2564;
            float _2859 = _2857 * _2565;
            float _2860 = _2857 * _2566;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2728 < ((_2726 >> 12u) & 15u))
            {
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2841;
                float _2843;
                float _2992 = _2711;
                float _2993 = _2713;
                float _2994 = _2715;
                float _2995 = _2717;
                float _2996 = _2719;
                float _2997 = _2721;
                uint _2998 = _2728;
                uint _3007;
                bool _3008;
                for (;;)
                {
                    _3007 = texelFetch(g_lightClassification, int((((_2604 << 5u) + (_2590 << 9u)) + (_2998 << 2u)) >> 2u)).x;
                    _3008 = _3007 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3008)
                    {
                        frontier_phi_77_pred = _2997;
                        frontier_phi_77_pred_1 = _2996;
                        frontier_phi_77_pred_2 = _2995;
                        frontier_phi_77_pred_3 = _2994;
                        frontier_phi_77_pred_4 = _2993;
                        frontier_phi_77_pred_5 = _2992;
                    }
                    else
                    {
                        float _3201;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3500;
                        float _3214 = _2992;
                        float _3215 = _2993;
                        float _3216 = _2994;
                        float _3217 = _2995;
                        float _3218 = _2996;
                        float _3219 = _2997;
                        uint _3220 = _3007;
                        uint _3221;
                        vec4 _3246;
                        float _3247;
                        vec4 _3262;
                        vec3 _3274;
                        vec4 _3289;
                        vec4 _3304;
                        float _3351;
                        bool _3352;
                        for (;;)
                        {
                            uint _3231 = ((_2998 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3220));
                            _3221 = (_3220 + 4294967295u) & _3220;
                            uint _3233 = _3231 * 40u;
                            _3246 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3233)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3233 + 3u)).x));
                            _3247 = _3246.w;
                            uint _3249 = (_3231 * 40u) + 4u;
                            _3262 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3249)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3249 + 3u)).x));
                            uint _3264 = (_3231 * 40u) + 8u;
                            _3274 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x));
                            uint _3276 = (_3231 * 40u) + 16u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3231 * 40u) + 20u;
                            _3304 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 3u)).x));
                            uint _3307 = (_3231 * 40u) + 24u;
                            vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3326 = (_3231 * 40u) + 28u;
                            vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            _3351 = fma(_2566, _3339.z, fma(_2565, _3339.y, _3339.x * _2564)) + _3339.w;
                            _3352 = !((fma(_2566, _3320.z, fma(_2565, _3320.y, _3320.x * _2564)) + _3320.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3352)
                            {
                                float _3379 = _3246.x - _2564;
                                float _3380 = _3246.y - _2565;
                                float _3381 = _3246.z - _2566;
                                float _3382 = dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381));
                                float _3385 = inversesqrt(_3382);
                                float _3386 = _3385 * _3379;
                                float _3387 = _3385 * _3380;
                                float _3388 = _3385 * _3381;
                                float _3392 = 1.0 - (_3382 / (_3247 * _3247));
                                float _4530 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3397 = sqrt(_3382) * _3262.w;
                                float _3399 = 1.39999997615814208984375 / (_3397 + 1.39999997615814208984375);
                                float _3400 = _3399 * _3399;
                                float _3403 = ((1.0 - _3400) * dot(vec3(_3386, _3387, _3388), vec3(_796, _799, _802))) + _3400;
                                float _3406 = _3397 * _3397;
                                float _3410 = (fma(_2566, _3289.z, fma(_2565, _3289.y, _3289.x * _2564)) + _3289.w) / _3351;
                                float _3411 = (fma(_2566, _3304.z, fma(_2565, _3304.y, _3304.x * _2564)) + _3304.w) / _3351;
                                float _3415 = 1.0 - dot(vec2(_3410, _3411), vec2(_3410, _3411));
                                float _4546 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                                float _3416 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
                                float _3417 = _3416 * (((isnan(0.0) ? _3403 : (isnan(_3403) ? 0.0 : max(_3403, 0.0))) * _3393) / ((_3406 * 0.699999988079071044921875) + 1.0));
                                float _3429 = exp2(log2(1.0 / ((_3406 * 3.5) + 5.0)) * 0.25);
                                float _3430 = 1.0 - _871;
                                float _3437 = sqrt(1.0 - ((1.0 - (_3430 * _3430)) * (1.0 - (_3429 * _3429))));
                                float _3438 = _3437 * _3437;
                                float _3439 = _3438 * _3438;
                                float _3440 = _3386 - _2858;
                                float _3441 = _3387 - _2859;
                                float _3442 = _3388 - _2860;
                                float _3446 = inversesqrt(dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442)));
                                float _3450 = dot(vec3(_796, _799, _802), vec3((-0.0) - _2858, (-0.0) - _2859, (-0.0) - _2860));
                                float _4557 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3453 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
                                float _3454 = dot(vec3(_796, _799, _802), vec3(_3446 * _3440, _3446 * _3441, _3446 * _3442));
                                float _4568 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0));
                                float _3457 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                                float _3461 = ((_3457 * _3457) * (_3439 + (-1.0))) + 1.0;
                                float _3462 = _3399 * _3438;
                                float _3463 = _3462 * _3462;
                                float _3469 = ((1.0 - _3463) * dot(vec3(_796, _799, _802), vec3(_3386, _3387, _3388))) + _3463;
                                float _4579 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3470 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                                float _3471 = 1.0 - _3438;
                                float _3481 = (0.5 / (((_3470 * ((_3453 * _3471) + _3438)) + 9.9999999392252902907785028219223e-09) + (((_3470 * _3471) + _3438) * _3453))) * _3470;
                                float _4590 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3491 = (_3416 * _3393) * (((_3439 * 3.1415927410125732421875) * (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) / ((_3461 * _3461) * ((_3406 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3417 * _3262.y;
                                frontier_phi_83_pred_1 = _3417 * _3262.x;
                                frontier_phi_83_pred_2 = _3491 * _3274.z;
                                frontier_phi_83_pred_3 = _3491 * _3274.y;
                                frontier_phi_83_pred_4 = _3491 * _3274.x;
                                frontier_phi_83_pred_5 = _3417 * _3262.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3499 = frontier_phi_83_pred;
                            _3498 = frontier_phi_83_pred_1;
                            _3497 = frontier_phi_83_pred_2;
                            _3496 = frontier_phi_83_pred_3;
                            _3495 = frontier_phi_83_pred_4;
                            _3500 = frontier_phi_83_pred_5;
                            _3204 = _3498 + _3217;
                            _3205 = _3499 + _3218;
                            _3206 = _3500 + _3219;
                            _3201 = _3495 + _3214;
                            _3202 = _3496 + _3215;
                            _3203 = _3497 + _3216;
                            if (_3221 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3214 = _3201;
                                _3215 = _3202;
                                _3216 = _3203;
                                _3217 = _3204;
                                _3218 = _3205;
                                _3219 = _3206;
                                _3220 = _3221;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3206;
                        frontier_phi_77_pred_1 = _3205;
                        frontier_phi_77_pred_2 = _3204;
                        frontier_phi_77_pred_3 = _3203;
                        frontier_phi_77_pred_4 = _3202;
                        frontier_phi_77_pred_5 = _3201;
                    }
                    _2843 = frontier_phi_77_pred;
                    _2841 = frontier_phi_77_pred_1;
                    _2839 = frontier_phi_77_pred_2;
                    _2837 = frontier_phi_77_pred_3;
                    _2835 = frontier_phi_77_pred_4;
                    _2833 = frontier_phi_77_pred_5;
                    uint _2999 = _2998 + 1u;
                    if (_2999 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2992 = _2833;
                        _2993 = _2835;
                        _2994 = _2837;
                        _2995 = _2839;
                        _2996 = _2841;
                        _2997 = _2843;
                        _2998 = _2999;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2837;
                frontier_phi_58_59_ladder_1 = _2843;
                frontier_phi_58_59_ladder_2 = _2841;
                frontier_phi_58_59_ladder_3 = _2839;
                frontier_phi_58_59_ladder_4 = _2835;
                frontier_phi_58_59_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_58_59_ladder = _2715;
                frontier_phi_58_59_ladder_1 = _2721;
                frontier_phi_58_59_ladder_2 = _2719;
                frontier_phi_58_59_ladder_3 = _2717;
                frontier_phi_58_59_ladder_4 = _2713;
                frontier_phi_58_59_ladder_5 = _2711;
            }
            _2832 = frontier_phi_58_59_ladder_5;
            _2834 = frontier_phi_58_59_ladder_4;
            _2836 = frontier_phi_58_59_ladder;
            _2838 = frontier_phi_58_59_ladder_3;
            _2840 = frontier_phi_58_59_ladder_2;
            _2842 = frontier_phi_58_59_ladder_1;
        }
        float _2847 = isnan(1.0) ? _855 : (isnan(_855) ? 1.0 : min(_855, 1.0));
        _2623 = (_2847 * _2838) + _2059;
        _2625 = (_2847 * _2840) + _2061;
        _2627 = (_2847 * _2842) + _2063;
        _2629 = ((_2832 * _839) * _2847) + _2404;
        _2631 = ((_2834 * _841) * _2847) + _2406;
        _2633 = ((_2836 * _842) * _2847) + _2408;
    }
    else
    {
        _2623 = _2059;
        _2625 = _2061;
        _2627 = _2063;
        _2629 = _2404;
        _2631 = _2406;
        _2633 = _2408;
    }
    float _4606 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4617 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4628 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _2650 = ((isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2623 + ((isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) * _855))) + ((_2629 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2651 = ((isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2625 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _855))) + ((_2631 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    float _2652 = ((isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2627 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _855))) + ((_2633 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1695)) * cbPerFrame._m0[3u].x);
    uint _2653 = _268 + 6u;
    float _2661 = _777 / cbSceneParam._m0[86u].x;
    float _2662 = _778 / cbSceneParam._m0[86u].y;
    vec4 _2676 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2678 = _2676.x;
    float _2679 = _2676.y;
    float _2680 = _2676.z;
    float _2681 = _2676.w;
    float _2774;
    float _2776;
    float _2778;
    float _2780;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2736 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2737 = _2736 / _699;
        float _2748 = _2737 * _750;
        float _2749 = _751 * _2737;
        float _2750 = (-0.0) - _2749;
        float _2752 = _2737 * _752;
        float _2754 = (cbSceneParam._m0[77u].w * _2750) / _2736;
        float _2755 = _2754 + cbSceneParam._m0[79u].w;
        float _2756 = cbSceneParam._m0[79u].w - _2749;
        float _2762 = sqrt(((_2748 * _2748) + (_2749 * _2749)) + (_2752 * _2752));
        float _2765 = (1.0 - (cbSceneParam._m0[77u].w / _2736)) * _2762;
        float _2770 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2772 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2949;
        if (abs((_2750 - _2754) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2949 = ((((_2755 > 0.0) ? exp2(_2770 * _2755) : (2.0 - exp2(_2772 * _2755))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2765;
        }
        else
        {
            float _2893 = 1.0 / cbSceneParam._m0[80u].x;
            float _2894 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : max(_2755, _2756));
            float _2895 = isnan(_2756) ? _2755 : (isnan(_2755) ? _2756 : min(_2755, _2756));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            _2949 = ((abs(_2762 / _2750) * cbSceneParam._m0[80u].y) * ((((_2904 - _2905) * 2.0) - ((exp2(_2770 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0)))) - exp2(_2770 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0))))) * _2893)) - ((exp2(_2772 * _2904) - exp2(_2772 * _2905)) * _2893))) + (_2765 * cbSceneParam._m0[80u].z);
        }
        vec4 _2951 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2661, _2662, 1.0), 0.0);
        float _2960 = exp2((_2949 * (-1.44269502162933349609375)) * (1.0 - _2951.w));
        float _2961 = log2(_2960);
        float _2977 = log2(_2681);
        _2774 = (exp2(_2977 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].x)) * _2951.x) / cbSceneParam._m0[78u].x)) + _2678;
        _2776 = (exp2(_2977 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].y)) * _2951.y) / cbSceneParam._m0[78u].y)) + _2679;
        _2778 = (exp2(_2977 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2961 * cbSceneParam._m0[78u].z)) * _2951.z) / cbSceneParam._m0[78u].z)) + _2680;
        _2780 = _2960 * _2681;
    }
    else
    {
        _2774 = _2678;
        _2776 = _2679;
        _2778 = _2680;
        _2780 = _2681;
    }
    bool _2987;
    vec4 _2790;
    vec4 _2812;
    float _2814;
    float _2818;
    float _2819;
    float _2820;
    float _2821;
    bool _2831;
    for (;;)
    {
        _2790 = cbMatDynParam._m0[0u];
        float _2792 = roundEven(_2790.y);
        bool _2793 = _2792 == 3.0;
        float _2794 = log2(_2780);
        float _2801 = exp2(_2794 * cbSceneParam._m0[78u].x) * _2650;
        float _2802 = exp2(_2794 * cbSceneParam._m0[78u].y) * _2651;
        float _2803 = exp2(_2794 * cbSceneParam._m0[78u].z) * _2652;
        float _2810 = _766 + (-0.5);
        _2812 = cbMtdParam._m0[1u];
        _2814 = _2812.y * _2810;
        float _2817 = (_2792 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2818 = _2817 * (_2793 ? _2801 : (_2801 + (cbSceneParam._m0[72u].w * _2774)));
        _2819 = _2817 * (_2793 ? _2802 : (_2802 + (cbSceneParam._m0[72u].w * _2776)));
        _2820 = _2817 * (_2793 ? _2803 : (_2803 + (cbSceneParam._m0[72u].w * _2778)));
        _2821 = _2810 * 0.999000012874603271484375;
        _2831 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2831)
        {
            if ((cbInstanceData._m0[_268 + 7u].x + _2821) < 0.5)
            {
                _2987 = true;
                break;
            }
        }
        uint _2928 = _815 + uint(_2790.w);
        if ((cbInstanceData._m0[_2928].w < 1.0) && ((cbInstanceData._m0[_2928].w + _2821) < 0.5))
        {
            _2987 = true;
            break;
        }
        if ((_2814 + 1.0) < _2812.x)
        {
            _2987 = true;
            break;
        }
        _2987 = false;
        break;
    }
    float _3192;
    if (_2987)
    {
        discard_state = true;
        _3192 = 0.0;
    }
    else
    {
        _3192 = cbInstanceData._m0[_2653].w;
    }
    SV_Target.x = _2818;
    SV_Target.y = _2819;
    SV_Target.z = _2820;
    SV_Target.w = _3192;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2653].w;
    discard_exit();
}


