#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1396;
float _3798;
float _3799;
float _3800;
float _3801;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _231 = _230 * _222;
    float _232 = _230 * _223;
    float _233 = _230 * _224;
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = _237 * NORMAL.x;
    float _239 = _237 * NORMAL.y;
    float _240 = _237 * NORMAL.z;
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _245 = _244 * TANGENT.x;
    float _246 = _244 * TANGENT.y;
    float _247 = _244 * TANGENT.z;
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _376 = _374.x;
    float _388 = dot(vec4(_376, _374.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _405 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _338.x) * 2.0) - ((((_376 - _388) * cbMtdParam._m0[23u].w) + _388) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3810 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _406 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _413 = (_406 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _414 = (_406 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _415 = (_406 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _454 = _452.x;
    float _464 = dot(vec4(_454, _452.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _478 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _338.y) * 2.0) - ((((_454 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3821 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _486 = (_479 * ((_432.x * cbMtdParam._m0[13u].x) - _413)) + _413;
    float _487 = (_479 * ((_432.y * cbMtdParam._m0[13u].y) - _414)) + _414;
    float _488 = (_479 * ((_432.z * cbMtdParam._m0[13u].z) - _415)) + _415;
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _270) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _271) + cbTextureTilingScale._m0[14u].w));
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _546 = _544.x;
    float _547 = _544.y;
    float _548 = _544.z;
    float _555 = ((_527.x - _546) * _406) + _546;
    float _556 = ((_527.y - _547) * _406) + _547;
    float _557 = ((_527.z - _548) * _406) + _548;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _582 = ((_569.z - _557) * _479) + _557;
    float _585 = ((((_569.x - _555) * _479) + _555) * 2.0) + (-1.0);
    float _587 = ((((_569.y - _556) * _479) + _556) * 2.0) + (-1.0);
    float _588 = dot(vec2(_585, _587), vec2(_585, _587));
    float _3832 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _593 = sqrt(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _585;
    float _620 = (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _587;
    float _623 = fma(_593, _238, fma(_620, _245, _619 * _231));
    float _626 = fma(_593, _239, fma(_620, _246, _619 * _232));
    float _629 = fma(_593, _240, fma(_620, _247, _619 * _233));
    float _633 = inversesqrt(dot(vec3(_623, _626, _629), vec3(_623, _626, _629)));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _672 = (cbMtdParam._m0[19u].x + dot(vec4(_633 * _623, _633 * _626, _633 * _629, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_662 - _663) * cbMtdParam._m0[24u].z) + _663) * cbMtdParam._m0[21u].z);
    float _3843 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _673 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _680 = (_673 * ((_507.x * cbMtdParam._m0[18u].x) - _486)) + _486;
    float _681 = (_673 * ((_507.y * cbMtdParam._m0[18u].y) - _487)) + _487;
    float _682 = (_673 * ((_507.z * cbMtdParam._m0[18u].z) - _488)) + _488;
    vec4 _708 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _710 = _708.x;
    float _728 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _710) * _406) + _710;
    float _745 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _728) * _479) + _728;
    float _749 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _745) * cbMtdParam._m0[19u].z) + _745;
    float _751 = _749 - (_749 * _673);
    float _755 = (cbMtdParam._m0[19u].w * (_607.z - _582)) + _582;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3854 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _785 = ((_768.z - _755) * _673) + _755;
    float _795 = ((sqrt(1.0 - (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) - _593) * _673) + _593;
    float _798 = (((_775 - _619) * _673) + _619) + (cbMtdParam._m0[21u].x * _619);
    float _799 = (((_776 - _620) * _673) + _620) + (cbMtdParam._m0[21u].x * _620);
    float _801 = cbMtdParam._m0[22u].x + _607.w;
    float _804 = fma(_795, _238, fma(_799, _245, _798 * _231));
    float _807 = fma(_795, _239, fma(_799, _246, _798 * _232));
    float _810 = fma(_795, _240, fma(_799, _247, _798 * _233));
    float _814 = inversesqrt(dot(vec3(_804, _807, _810), vec3(_804, _807, _810)));
    float _815 = _814 * _804;
    float _816 = _814 * _807;
    float _817 = _814 * _810;
    float _3865 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _818 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _3876 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _3887 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _3898 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _3909 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _3920 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _823 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _888 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _878);
    float _889 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _878);
    float _890 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _878);
    float _894 = inversesqrt(dot(vec3(_888, _889, _890), vec3(_888, _889, _890)));
    float _895 = _888 * _894;
    float _896 = _889 * _894;
    float _897 = _890 * _894;
    vec4 _902 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _904 = _902.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1076 = sqrt(((_888 * _888) + (_889 * _889)) + (_890 * _890));
        float _1082 = (cbMatDynParam._m0[5u].x * _1076) + cbMatDynParam._m0[5u].y;
        float _3931 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1083 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1087 = (cbMatDynParam._m0[5u].z * _1076) + cbMatDynParam._m0[5u].w;
        float _3942 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))) - _1083)) + _1083) < ((_904 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _915 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _916 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _934 = fma(_817, cbSceneParam._m0[5u].z, fma(_816, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _815));
    float _937 = fma(_817, cbSceneParam._m0[6u].z, fma(_816, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _815));
    float _940 = fma(_817, cbSceneParam._m0[7u].z, fma(_816, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _815));
    uint _953 = _250 + 9u;
    uint _954 = _953 + uint(cbMatDynParam._m0[0u].w);
    float _960 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0)))) * cbInstanceData._m0[_954].x;
    float _961 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0)))) * cbInstanceData._m0[_954].y;
    float _962 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * cbInstanceData._m0[_954].z;
    float _3953 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _3964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
    float _3975 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _966 = 1.0 - _823;
    float _967 = _963 * _966;
    float _968 = _964 * _966;
    float _969 = _965 * _966;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _823;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _823;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _823;
    float _977 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    float _980 = _976 + 0.039999999105930328369140625;
    vec4 _989 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _915, cbSceneParam._m0[86u].y * _916));
    float _993 = ((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * TEXCOORD_5.w) * _989.x;
    float _994 = dot(vec3(_815, _816, _817), vec3(_895, _896, _897));
    float _997 = _994 * 2.0;
    float _1001 = (_997 * _815) - _895;
    float _1002 = (_997 * _816) - _896;
    float _1003 = (_997 * _817) - _897;
    float _1007 = abs(dot(vec3(_895, _896, _897), vec3(_815, _816, _817)));
    float _3986 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1009 = sqrt(_818);
    float _1022 = exp2((_1009 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1009 * 3.0));
    float _1028 = (1.0 - _1022) * ((_1009 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1029 = _1022 * _1009;
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1061 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1065 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1395;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1120 = fma(_1065, cbModelParam._m0[26u].z, fma(_1061, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1057));
        float _1124 = fma(_1065, cbModelParam._m0[27u].z, fma(_1061, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1057));
        float _1128 = fma(_1065, cbModelParam._m0[28u].z, fma(_1061, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1057));
        float _1153 = _1057 + _815;
        float _1154 = _1061 + _816;
        float _1155 = _1065 + _817;
        float _1165 = fma(_1155, cbModelParam._m0[26u].z, fma(_1154, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1153)) - _1120;
        float _1166 = fma(_1155, cbModelParam._m0[27u].z, fma(_1154, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1153)) - _1124;
        float _1167 = fma(_1155, cbModelParam._m0[28u].z, fma(_1154, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1153)) - _1128;
        float _1171 = inversesqrt(dot(vec3(_1165, _1166, _1167), vec3(_1165, _1166, _1167)));
        float _1184 = ((_1171 * _1165) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1120 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1185 = ((_1171 * _1166) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1124 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1171 * _1167) / cbModelParam._m0[34u].z) + ((((((_1128 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1184, _1185, _1186), 0.0);
        float _1223 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1189.x + (-0.5));
        float _1225 = _1223 * (_1189.y + (-0.5));
        float _1226 = _1223 * (_1189.z + (-0.5));
        float _1233 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1196.x + (-0.5));
        float _1235 = _1233 * (_1196.y + (-0.5));
        float _1236 = _1233 * (_1196.z + (-0.5));
        float _1243 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1203.x + (-0.5));
        float _1245 = _1243 * (_1203.y + (-0.5));
        float _1246 = _1243 * (_1203.z + (-0.5));
        float _1253 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1210.x + (-0.5));
        float _1255 = _1253 * (_1210.y + (-0.5));
        float _1256 = _1253 * (_1210.z + (-0.5));
        float _1257 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = _1224 * 0.5;
        float _1261 = _1234 * 0.5;
        float _1262 = _1244 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1277 = (dot(vec3(_815, _816, _817), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1287 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1257 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _4034 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1289 + 1.0))) + _1294) * _1257;
        float _1304 = _1225 * 0.5;
        float _1305 = _1235 * 0.5;
        float _1306 = _1245 * 0.5;
        float _1307 = dot(vec3(_1304, _1305, _1306), vec3(_1304, _1305, _1306));
        float _1312 = (_1307 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1307);
        float _1320 = (dot(vec3(_815, _816, _817), vec3(_1312 * _1304, _1312 * _1305, _1312 * _1306)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1329 = sqrt(((_1305 * _1305) + (_1304 * _1304)) + (_1306 * _1306)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1331 = _1330 * 2.0;
        float _1335 = (1.0 - _1330) / (_1330 + 1.0);
        float _4067 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1345 = ((((1.0 - _1336) * (_1331 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1331 + 1.0))) + _1336) * _1258;
        float _1346 = _1226 * 0.5;
        float _1347 = _1236 * 0.5;
        float _1348 = _1246 * 0.5;
        float _1349 = dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348));
        float _1354 = (_1349 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1349);
        float _1362 = (dot(vec3(_815, _816, _817), vec3(_1354 * _1346, _1354 * _1347, _1354 * _1348)) + 1.0) * 0.5;
        float _4078 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1371 = sqrt(((_1347 * _1347) + (_1346 * _1346)) + (_1348 * _1348)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4089 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1372 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1373 = _1372 * 2.0;
        float _1377 = (1.0 - _1372) / (_1372 + 1.0);
        float _4100 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1378 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1387 = ((((1.0 - _1378) * (_1373 + 2.0)) * exp2(log2(isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_1373 + 1.0))) + _1378) * _1259;
        _1395 = _1226;
        _1397 = _1225;
        _1398 = _1224;
        _1399 = _1236;
        _1400 = _1235;
        _1401 = _1234;
        _1402 = _1246;
        _1403 = _1245;
        _1404 = _1244;
        _1405 = _1259;
        _1406 = _1258;
        _1407 = _1257;
        _1408 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)));
    }
    else
    {
        _1395 = _1396;
        _1397 = _1396;
        _1398 = _1396;
        _1399 = _1396;
        _1400 = _1396;
        _1401 = _1396;
        _1402 = _1396;
        _1403 = _1396;
        _1404 = _1396;
        _1405 = _1396;
        _1406 = _1396;
        _1407 = _1396;
        _1408 = 0.0;
        _1409 = 0.0;
        _1410 = 0.0;
    }
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1437 = fma(_1065, cbModelParam._m0[30u].z, fma(_1061, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057));
        float _1441 = fma(_1065, cbModelParam._m0[31u].z, fma(_1061, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057));
        float _1445 = fma(_1065, cbModelParam._m0[32u].z, fma(_1061, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057));
        float _1468 = _1057 + _815;
        float _1469 = _1061 + _816;
        float _1470 = _1065 + _817;
        float _1480 = fma(_1470, cbModelParam._m0[30u].z, fma(_1469, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1468)) - _1437;
        float _1481 = fma(_1470, cbModelParam._m0[31u].z, fma(_1469, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1468)) - _1441;
        float _1482 = fma(_1470, cbModelParam._m0[32u].z, fma(_1469, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1468)) - _1445;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1499 = ((_1486 * _1480) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1437 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1481) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1441 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1486 * _1482) / cbModelParam._m0[35u].z) + ((((((_1445 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1499, _1500, _1501), 0.0);
        float _1536 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1503.x + (-0.5));
        float _1538 = _1536 * (_1503.y + (-0.5));
        float _1539 = _1536 * (_1503.z + (-0.5));
        float _1546 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1510.x + (-0.5));
        float _1548 = _1546 * (_1510.y + (-0.5));
        float _1549 = _1546 * (_1510.z + (-0.5));
        float _1556 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1517.x + (-0.5));
        float _1558 = _1556 * (_1517.y + (-0.5));
        float _1559 = _1556 * (_1517.z + (-0.5));
        float _1566 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1524.x + (-0.5));
        float _1568 = _1566 * (_1524.y + (-0.5));
        float _1569 = _1566 * (_1524.z + (-0.5));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = _1537 * 0.5;
        float _1574 = _1547 * 0.5;
        float _1575 = _1557 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_815, _816, _817), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4163 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1600 + 1.0))) + _1605) * _1570;
        float _1615 = _1538 * 0.5;
        float _1616 = _1548 * 0.5;
        float _1617 = _1558 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_815, _816, _817), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4196 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1642 + 1.0))) + _1647) * _1571;
        float _1657 = _1539 * 0.5;
        float _1658 = _1549 * 0.5;
        float _1659 = _1559 * 0.5;
        float _1660 = dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659));
        float _1665 = (_1660 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1660);
        float _1673 = (dot(vec3(_815, _816, _817), vec3(_1665 * _1657, _1665 * _1658, _1665 * _1659)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1682 = sqrt(((_1658 * _1658) + (_1657 * _1657)) + (_1659 * _1659)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1683 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1684 = _1683 * 2.0;
        float _1688 = (1.0 - _1683) / (_1683 + 1.0);
        float _4229 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1689 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1698 = ((((1.0 - _1689) * (_1684 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1684 + 1.0))) + _1689) * _1572;
        _1706 = _1539;
        _1707 = _1538;
        _1708 = _1537;
        _1709 = _1549;
        _1710 = _1548;
        _1711 = _1547;
        _1712 = _1559;
        _1713 = _1558;
        _1714 = _1557;
        _1715 = _1572;
        _1716 = _1571;
        _1717 = _1570;
        _1718 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1719 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
        _1720 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)));
    }
    else
    {
        _1706 = _1396;
        _1707 = _1396;
        _1708 = _1396;
        _1709 = _1396;
        _1710 = _1396;
        _1711 = _1396;
        _1712 = _1396;
        _1713 = _1396;
        _1714 = _1396;
        _1715 = _1396;
        _1716 = _1396;
        _1717 = _1396;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _1730 = (cbModelParam._m0[1u].x * (_1718 - _1408)) + _1408;
    float _1731 = (cbModelParam._m0[1u].x * (_1719 - _1409)) + _1409;
    float _1732 = (cbModelParam._m0[1u].x * (_1720 - _1410)) + _1410;
    float _1753 = fma(_1732, cbSceneParam._m0[89u].z, fma(_1731, cbSceneParam._m0[89u].y, _1730 * cbSceneParam._m0[89u].x));
    float _1756 = fma(_1732, cbSceneParam._m0[90u].z, fma(_1731, cbSceneParam._m0[90u].y, _1730 * cbSceneParam._m0[90u].x));
    float _1759 = fma(_1732, cbSceneParam._m0[91u].z, fma(_1731, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1730));
    float _1774 = _1001 * 0.5;
    float _1775 = _1002 * 0.5;
    float _1776 = _1003 * 0.5;
    float _1777 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1708, _1711, _1714, _1717));
    float _1780 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1707, _1710, _1713, _1716));
    float _1783 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1706, _1709, _1712, _1715));
    float _1817;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1790 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1395, _1399, _1402, _1405));
        float _1794 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1397, _1400, _1403, _1406));
        float _1798 = dot(vec4(_1774, _1775, _1776, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1805 = dot(vec4(cbModelParam._m0[39u]), vec4(_1774, _1775, _1776, 1.0));
        _1817 = dot(vec3(isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1805) ? 0.0 : (isnan(0.0) ? _1805 : max(0.0, _1805))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1817 = 1.0;
    }
    float _1828;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1819 = dot(vec4(cbModelParam._m0[40u]), vec4(_1774, _1775, _1776, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)), isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1819) ? 0.0 : (isnan(0.0) ? _1819 : max(0.0, _1819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1832 = (_1828 * cbModelParam._m0[1u].x) + (_1817 * (1.0 - cbModelParam._m0[1u].x));
    float _1842 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _818);
    float _1843 = isnan(_1842) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1842 : min(cbModelParam._m0[25u].z, _1842));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1890 = fma(_1065, cbModelParam._m0[13u].z, fma(_1061, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1057)) + cbModelParam._m0[13u].w;
        float _1894 = fma(_1065, cbModelParam._m0[14u].z, fma(_1061, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1057)) + cbModelParam._m0[14u].w;
        float _1898 = fma(_1065, cbModelParam._m0[15u].z, fma(_1061, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1057)) + cbModelParam._m0[15u].w;
        float _1901 = fma(_1003, cbModelParam._m0[13u].z, fma(_1002, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001));
        float _1904 = fma(_1003, cbModelParam._m0[14u].z, fma(_1002, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001));
        float _1907 = fma(_1003, cbModelParam._m0[15u].z, fma(_1002, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001));
        float _1935;
        if (_1901 > 0.0)
        {
            _1935 = abs((1.0 - _1890) / _1901);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1890 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1935 = frontier_phi_17_15_ladder;
        }
        float _2158;
        if (_1904 > 0.0)
        {
            _2158 = abs((1.0 - _1894) / _1904);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1894 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2158 = frontier_phi_26_22_ladder;
        }
        float _2415;
        if (_1907 > 0.0)
        {
            _2415 = abs((1.0 - _1898) / _1907);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1898 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2415 = frontier_phi_38_33_ladder;
        }
        float _2417 = isnan(_2158) ? _1935 : (isnan(_1935) ? _2158 : min(_1935, _2158));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1901) + _1890;
        float _2423 = (_2418 * _1904) + _1894;
        float _2424 = (_2418 * _1907) + _1898;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2425;
        float _2429 = _2425 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 > _2429) || ((_2423 < _2427) || ((_2422 < _2427) || (_2422 > _2429))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2424, cbModelParam._m0[9u].z, fma(_2423, cbModelParam._m0[9u].y, _2422 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2424, cbModelParam._m0[10u].z, fma(_2423, cbModelParam._m0[10u].y, _2422 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2424, cbModelParam._m0[11u].z, fma(_2423, cbModelParam._m0[11u].y, _2422 * cbModelParam._m0[11u].x))), _1843);
            frontier_phi_16_38_ladder = _2552.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2552.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2552.x * cbModelParam._m0[1u].y;
        }
        _1923 = frontier_phi_16_38_ladder_2;
        _1925 = frontier_phi_16_38_ladder_1;
        _1927 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1911 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1001, _1002, _1003), _1843);
        _1923 = _1911.x * cbModelParam._m0[1u].y;
        _1925 = _1911.y * cbModelParam._m0[1u].y;
        _1927 = _1911.z * cbModelParam._m0[1u].y;
    }
    float _1931 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _818);
    float _1932 = isnan(_1931) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1931 : min(cbModelParam._m0[25u].w, _1931));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1985 = fma(_1065, cbModelParam._m0[21u].z, fma(_1061, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1057)) + cbModelParam._m0[21u].w;
        float _1989 = fma(_1065, cbModelParam._m0[22u].z, fma(_1061, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1057)) + cbModelParam._m0[22u].w;
        float _1993 = fma(_1065, cbModelParam._m0[23u].z, fma(_1061, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1057)) + cbModelParam._m0[23u].w;
        float _1996 = fma(_1003, cbModelParam._m0[21u].z, fma(_1002, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001));
        float _1999 = fma(_1003, cbModelParam._m0[22u].z, fma(_1002, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001));
        float _2002 = fma(_1003, cbModelParam._m0[23u].z, fma(_1002, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001));
        float _2163;
        if (_1996 > 0.0)
        {
            _2163 = abs((1.0 - _1985) / _1996);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1985 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2163 = frontier_phi_28_24_ladder;
        }
        float _2442;
        if (_1999 > 0.0)
        {
            _2442 = abs((1.0 - _1989) / _1999);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1989 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2442 = frontier_phi_40_35_ladder;
        }
        float _2655;
        if (_2002 > 0.0)
        {
            _2655 = abs((1.0 - _1993) / _2002);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1993 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2655 = frontier_phi_49_46_ladder;
        }
        float _2657 = isnan(_2442) ? _2163 : (isnan(_2163) ? _2442 : min(_2163, _2442));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1996) + _1985;
        float _2663 = (_2658 * _1999) + _1989;
        float _2664 = (_2658 * _2002) + _1993;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1932);
            frontier_phi_25_49_ladder = _2863.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2863.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2863.x * cbModelParam._m0[1u].z;
        }
        _2021 = frontier_phi_25_49_ladder_2;
        _2023 = frontier_phi_25_49_ladder_1;
        _2025 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2005 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1001, _1002, _1003), _1932);
        _2021 = _2005.x * cbModelParam._m0[1u].z;
        _2023 = _2005.y * cbModelParam._m0[1u].z;
        _2025 = _2005.z * cbModelParam._m0[1u].z;
    }
    float _2038 = (((_1028 * _977) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_2021 - _1923)) + _1923);
    float _2040 = (((_1028 * _979) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_2023 - _1925)) + _1925);
    float _2042 = (((_1028 * _980) + _1029) * _993) * ((cbModelParam._m0[1u].w * (_2025 - _1927)) + _1927);
    float _2045 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2040, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2048 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2040, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2051 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2040, cbSceneParam._m0[91u].y, _2038 * cbSceneParam._m0[91u].x));
    vec4 _2059 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_915, _916));
    float _2061 = _2059.w;
    float _2073 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2061);
    float _2074 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2061);
    float _2075 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2061);
    uvec4 _2079 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2081 = _2079.x * 14u;
    uint _2082 = _2081 + 13u;
    float _2089 = _993 + (-1.0);
    float _2094 = (cbLight._m0[_2082].x * _2089) + 1.0;
    float _2095 = (cbLight._m0[_2082].y * _2089) + 1.0;
    float _2096 = (cbLight._m0[_2082].z * _2089) + 1.0;
    float _2097 = (cbLight._m0[_2082].w * _2089) + 1.0;
    uint _2098 = _2081 + 5u;
    float _2104 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2108 = _2081 + 4u;
    float _2117 = isnan(1.0) ? _2094 : (isnan(_2094) ? 1.0 : min(_2094, 1.0));
    uint _2121 = _2081 | 1u;
    float _2132 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_815, _816, _817));
    float _2135 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_815, _816, _817));
    float _4365 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _4376 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2140 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2142 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2149 = ((cbLight._m0[_2098].x * _2104) * _2142) + (((cbLight._m0[_2108].x * _2073) * _2117) * _2140);
    float _2150 = ((_2104 * cbLight._m0[_2098].y) * _2142) + (((cbLight._m0[_2108].y * _2074) * _2117) * _2140);
    float _2151 = ((_2104 * cbLight._m0[_2098].z) * _2142) + (((cbLight._m0[_2108].z * _2075) * _2117) * _2140);
    uvec4 _2155 = floatBitsToUint(cbLight._m0[_2081 + 12u]);
    bool _2157 = _2155.x == 0u;
    float _2168;
    float _2170;
    float _2172;
    if (_2157)
    {
        _2168 = _2149;
        _2170 = _2150;
        _2172 = _2151;
    }
    else
    {
        uint _2176 = _2081 + 6u;
        float _2192 = (dot(vec3(cbLight._m0[_2081 + 2u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2193 = _2192 * _2192;
        float _4387 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2194 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2195 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2168 = (((cbLight._m0[_2176].x * 0.3183098733425140380859375) * _2194) * _2195) + _2149;
        _2170 = (((cbLight._m0[_2176].y * 0.3183098733425140380859375) * _2194) * _2195) + _2150;
        _2172 = (((cbLight._m0[_2176].z * 0.3183098733425140380859375) * _2194) * _2195) + _2151;
    }
    bool _2175 = _2155.y == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2175)
    {
        _2213 = _2168;
        _2215 = _2170;
        _2217 = _2172;
    }
    else
    {
        uint _2386 = _2081 + 7u;
        float _2402 = (dot(vec3(cbLight._m0[_2081 + 3u].xyz), vec3(_815, _816, _817)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4403 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2405 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2213 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2168;
        _2215 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2170;
        _2217 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2172;
    }
    uint _2220 = _2081 + 8u;
    float _2233 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _818) * 0.949999988079071044921875);
    float _2234 = _2233 * _2233;
    float _2235 = cbLight._m0[_2081].x + _895;
    float _2236 = cbLight._m0[_2081].y + _896;
    float _2237 = cbLight._m0[_2081].z + _897;
    float _2241 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
    float _2242 = _2241 * _2235;
    float _2243 = _2241 * _2236;
    float _2244 = _2241 * _2237;
    float _2245 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2081].xyz));
    float _4419 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2248 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _4430 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _2249 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2250 = dot(vec3(_815, _816, _817), vec3(_2242, _2243, _2244));
    float _4441 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2253 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2254 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2242, _2243, _2244));
    float _4452 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2258 = _2234 * _2234;
    float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
    float _2270 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
    float _2271 = 0.959999978542327880859375 - _974;
    float _2273 = 0.959999978542327880859375 - _975;
    float _2274 = 0.959999978542327880859375 - _976;
    float _2281 = 1.0 - _2234;
    float _2292 = (0.5 / (((_2249 * ((_2248 * _2281) + _2234)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2281) + _2234) * _2248))) * _2248;
    float _4463 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2294 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
    uint _2308 = _2081 + 9u;
    float _2319 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2121].w)) * _818) * 0.949999988079071044921875);
    float _2320 = _2319 * _2319;
    float _2321 = cbLight._m0[_2121].x + _895;
    float _2322 = cbLight._m0[_2121].y + _896;
    float _2323 = cbLight._m0[_2121].z + _897;
    float _2327 = inversesqrt(dot(vec3(_2321, _2322, _2323), vec3(_2321, _2322, _2323)));
    float _2328 = _2327 * _2321;
    float _2329 = _2327 * _2322;
    float _2330 = _2327 * _2323;
    float _2331 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2121].xyz));
    float _4474 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2334 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2335 = dot(vec3(_815, _816, _817), vec3(_2328, _2329, _2330));
    float _4485 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2121].xyz), vec3(_2328, _2329, _2330));
    float _4496 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2320 * _2320;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2354 = exp2(log2(1.0 - (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0)))) * 5.0);
    float _2361 = 1.0 - _2320;
    float _2371 = (0.5 / (((_2249 * ((_2334 * _2361) + _2320)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2361) + _2320) * _2334))) * _2334;
    float _4507 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2373 = (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    float _2383 = (((((_2354 * _2271) + _977) * cbLight._m0[_2308].x) * _2373) * _2104) + ((((cbLight._m0[_2220].x * _2073) * ((_2270 * _2271) + _977)) * _2294) * _2117);
    float _2384 = (((((_2354 * _2273) + _979) * cbLight._m0[_2308].y) * _2373) * _2104) + ((((cbLight._m0[_2220].y * _2074) * ((_2270 * _2273) + _979)) * _2294) * _2117);
    float _2385 = (((((_2354 * _2274) + _980) * cbLight._m0[_2308].z) * _2373) * _2104) + ((((cbLight._m0[_2220].z * _2075) * ((_2270 * _2274) + _980)) * _2294) * _2117);
    float _2447;
    float _2449;
    float _2451;
    if (_2157)
    {
        _2447 = _2383;
        _2449 = _2384;
        _2451 = _2385;
    }
    else
    {
        uint _2453 = _2081 + 2u;
        uint _2457 = _2081 + 10u;
        float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2453].w)) * _818) * 0.949999988079071044921875);
        float _2472 = _2471 * _2471;
        float _2473 = cbLight._m0[_2453].x + _895;
        float _2474 = cbLight._m0[_2453].y + _896;
        float _2475 = cbLight._m0[_2453].z + _897;
        float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
        float _2480 = _2479 * _2473;
        float _2481 = _2479 * _2474;
        float _2482 = _2479 * _2475;
        float _2483 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2453].xyz));
        float _4518 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2486 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _2487 = dot(vec3(_815, _816, _817), vec3(_2480, _2481, _2482));
        float _4529 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2490 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2491 = dot(vec3(cbLight._m0[_2453].xyz), vec3(_2480, _2481, _2482));
        float _4540 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2495 = _2472 * _2472;
        float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
        float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) * 5.0);
        float _2513 = 1.0 - _2472;
        float _2523 = (0.5 / (((_2249 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2513) + _2472) * _2486))) * _2486;
        float _4551 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2525 = (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
        float _2526 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
        _2447 = (((((_2506 * _2271) + _977) * cbLight._m0[_2457].x) * _2525) * _2526) + _2383;
        _2449 = (((((_2506 * _2273) + _979) * cbLight._m0[_2457].y) * _2525) * _2526) + _2384;
        _2451 = (((((_2506 * _2274) + _980) * cbLight._m0[_2457].z) * _2525) * _2526) + _2385;
    }
    float _2561;
    float _2563;
    float _2565;
    if (_2175)
    {
        _2561 = _2447;
        _2563 = _2449;
        _2565 = _2451;
    }
    else
    {
        uint _2572 = _2081 + 3u;
        uint _2576 = _2081 + 11u;
        float _2590 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2572].w)) * _818) * 0.949999988079071044921875);
        float _2591 = _2590 * _2590;
        float _2592 = cbLight._m0[_2572].x + _895;
        float _2593 = cbLight._m0[_2572].y + _896;
        float _2594 = cbLight._m0[_2572].z + _897;
        float _2598 = inversesqrt(dot(vec3(_2592, _2593, _2594), vec3(_2592, _2593, _2594)));
        float _2599 = _2598 * _2592;
        float _2600 = _2598 * _2593;
        float _2601 = _2598 * _2594;
        float _2602 = dot(vec3(_815, _816, _817), vec3(cbLight._m0[_2572].xyz));
        float _4567 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2605 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2606 = dot(vec3(_815, _816, _817), vec3(_2599, _2600, _2601));
        float _4578 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
        float _2609 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2610 = dot(vec3(cbLight._m0[_2572].xyz), vec3(_2599, _2600, _2601));
        float _4589 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2614 = _2591 * _2591;
        float _2618 = ((_2609 * _2609) * (_2614 + (-1.0))) + 1.0;
        float _2625 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2632 = 1.0 - _2591;
        float _2642 = (0.5 / (((_2249 * ((_2605 * _2632) + _2591)) + 9.9999999392252902907785028219223e-09) + (((_2249 * _2632) + _2591) * _2605))) * _2605;
        float _4600 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2644 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2614 / ((_2618 * _2618) * 3.141590118408203125));
        float _2645 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2561 = (((((_2625 * _2271) + _977) * cbLight._m0[_2576].x) * _2644) * _2645) + _2447;
        _2563 = (((((_2625 * _2273) + _979) * cbLight._m0[_2576].y) * _2644) * _2645) + _2449;
        _2565 = (((((_2625 * _2274) + _980) * cbLight._m0[_2576].z) * _2644) * _2645) + _2451;
    }
    float _2780;
    float _2782;
    float _2784;
    float _2786;
    float _2788;
    float _2790;
    if (_2079.y == 0u)
    {
        float _2720 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2720;
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2720;
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2720;
        uvec4 _2735 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2736 = _2735.x;
        uint _2747 = uint((float(_2735.y) * floor(float(uint(cbSceneParam._m0[85u].y * _916) / _2736))) + floor(float(uint(cbSceneParam._m0[85u].x * _915) / _2736)));
        float _2757 = (log2(_2723 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2758 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        uint _2761 = uint(isnan(14.0) ? _2758 : (isnan(_2758) ? 14.0 : min(_2758, 14.0)));
        uvec4 _2766 = texelFetch(g_lightClusterGridBuffer, int(((_2761 << 2u) + (_2747 << 6u)) >> 2u));
        uint _2767 = _2766.x;
        uint _2768 = _2735.z;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        float _2876;
        float _2878;
        if (((((1u << ((_2768 >> 4u) & 15u)) + 4294967295u) & _2767) == 0u) || ((_2768 & 240u) == 0u))
        {
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
            _2876 = 0.0;
            _2878 = 0.0;
        }
        else
        {
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _2877;
            float _2879;
            float _3021 = 0.0;
            float _3022 = 0.0;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            uint _3027 = 0u;
            uint _3036;
            bool _3037;
            for (;;)
            {
                _3036 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                _3037 = _3036 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3037)
                {
                    frontier_phi_66_pred = _3021;
                    frontier_phi_66_pred_1 = _3026;
                    frontier_phi_66_pred_2 = _3025;
                    frontier_phi_66_pred_3 = _3024;
                    frontier_phi_66_pred_4 = _3023;
                    frontier_phi_66_pred_5 = _3022;
                }
                else
                {
                    float _3166;
                    float _3167;
                    float _3168;
                    float _3169;
                    float _3170;
                    float _3171;
                    uint _3172;
                    _3166 = _3021;
                    _3167 = _3022;
                    _3168 = _3023;
                    _3169 = _3024;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3036;
                    float _3093;
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    for (;;)
                    {
                        uint _3176 = uint(findLSB(_3172)) + (_3027 << 5u);
                        uint _3173 = (_3172 + 4294967295u) & _3172;
                        uint _3178 = _3176 * 48u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3178)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3178 + 3u)).x));
                        uint _3198 = (_3176 * 48u) + 4u;
                        vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 3u)).x));
                        uint _3217 = (_3176 * 48u) + 8u;
                        vec3 _3228 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3217)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3217 + 2u)).x));
                        float _3232 = _3192.x - _2721;
                        float _3233 = _3192.y - _2722;
                        float _3234 = _3192.z - _2723;
                        float _3235 = dot(vec3(_3232, _3233, _3234), vec3(_3232, _3233, _3234));
                        float _3238 = inversesqrt(_3235);
                        float _3239 = _3238 * _3232;
                        float _3240 = _3238 * _3233;
                        float _3241 = _3238 * _3234;
                        float _3242 = dot(vec3(_934, _937, _940), vec3(_3239, _3240, _3241));
                        float _3247 = 1.0 - (_3235 * _3192.w);
                        float _4626 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                        float _3248 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                        float _3249 = sqrt(_3235) * _3211.w;
                        float _3252 = 1.39999997615814208984375 / (_3249 + 1.39999997615814208984375);
                        float _3253 = _3252 * _3252;
                        float _3256 = ((1.0 - _3253) * _3242) + _3253;
                        float _3259 = _3249 * _3249;
                        float _3263 = ((isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))) * _3248) / ((_3259 * 0.699999988079071044921875) + 1.0);
                        float _3267 = (-0.0) - _2721;
                        float _3268 = (-0.0) - _2722;
                        float _3269 = (-0.0) - _2723;
                        float _3273 = inversesqrt(dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269)));
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3284 = exp2(log2(1.0 / ((_3259 * 3.5) + 5.0)) * 0.25);
                        float _3285 = 1.0 - _1009;
                        float _3292 = sqrt(1.0 - ((1.0 - (_3285 * _3285)) * (1.0 - (_3284 * _3284))));
                        float _3293 = _3292 * _3292;
                        float _3294 = _3293 * _3293;
                        float _3295 = _3274 + _3239;
                        float _3296 = _3275 + _3240;
                        float _3297 = _3276 + _3241;
                        float _3301 = inversesqrt(dot(vec3(_3295, _3296, _3297), vec3(_3295, _3296, _3297)));
                        float _3305 = dot(vec3(_934, _937, _940), vec3(_3274, _3275, _3276));
                        float _4642 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3308 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                        float _3309 = dot(vec3(_934, _937, _940), vec3(_3301 * _3295, _3301 * _3296, _3301 * _3297));
                        float _4653 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3312 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3316 = ((_3312 * _3312) * (_3294 + (-1.0))) + 1.0;
                        float _3317 = _3252 * _3293;
                        float _3318 = _3317 * _3317;
                        float _3321 = ((1.0 - _3318) * _3242) + _3318;
                        float _4664 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3322 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3323 = 1.0 - _3293;
                        float _3333 = (0.5 / (((_3322 * ((_3308 * _3323) + _3293)) + 9.9999999392252902907785028219223e-09) + (((_3322 * _3323) + _3293) * _3308))) * _3322;
                        float _4675 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3344 = (((_3294 * 3.1415927410125732421875) * (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) / ((_3316 * _3316) * ((_3259 * 2.1991131305694580078125) + 3.141590118408203125))) * _3248;
                        _3096 = (_3263 * _3211.x) + _3169;
                        _3097 = (_3263 * _3211.y) + _3170;
                        _3098 = (_3263 * _3211.z) + _3171;
                        _3093 = (_3344 * _3228.x) + _3166;
                        _3094 = (_3344 * _3228.y) + _3167;
                        _3095 = (_3344 * _3228.z) + _3168;
                        if (_3173 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3166 = _3093;
                            _3167 = _3094;
                            _3168 = _3095;
                            _3169 = _3096;
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3173;
                        }
                    }
                    frontier_phi_66_pred = _3093;
                    frontier_phi_66_pred_1 = _3098;
                    frontier_phi_66_pred_2 = _3097;
                    frontier_phi_66_pred_3 = _3096;
                    frontier_phi_66_pred_4 = _3095;
                    frontier_phi_66_pred_5 = _3094;
                }
                _2869 = frontier_phi_66_pred;
                _2879 = frontier_phi_66_pred_1;
                _2877 = frontier_phi_66_pred_2;
                _2875 = frontier_phi_66_pred_3;
                _2873 = frontier_phi_66_pred_4;
                _2871 = frontier_phi_66_pred_5;
                uint _3028 = _3027 + 1u;
                if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3021 = _2869;
                    _3022 = _2871;
                    _3023 = _2873;
                    _3024 = _2875;
                    _3025 = _2877;
                    _3026 = _2879;
                    _3027 = _3028;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
            _2876 = _2877;
            _2878 = _2879;
        }
        uvec4 _2882 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2883 = _2882.z;
        uint _2885 = (_2883 >> 8u) & 15u;
        float _2989;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        if (((4294967295u << _2885) & _2767) == 0u)
        {
            _2989 = _2868;
            _2991 = _2870;
            _2993 = _2872;
            _2995 = _2874;
            _2997 = _2876;
            _2999 = _2878;
        }
        else
        {
            float _3014 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
            float _3015 = _3014 * _2721;
            float _3016 = _3014 * _2722;
            float _3017 = _3014 * _2723;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2885 < ((_2883 >> 12u) & 15u))
            {
                float _2990;
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3149 = _2868;
                float _3150 = _2870;
                float _3151 = _2872;
                float _3152 = _2874;
                float _3153 = _2876;
                float _3154 = _2878;
                uint _3155 = _2885;
                uint _3164;
                bool _3165;
                for (;;)
                {
                    _3164 = texelFetch(g_lightClassification, int((((_2761 << 5u) + (_2747 << 9u)) + (_3155 << 2u)) >> 2u)).x;
                    _3165 = _3164 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3165)
                    {
                        frontier_phi_77_pred = _3154;
                        frontier_phi_77_pred_1 = _3153;
                        frontier_phi_77_pred_2 = _3152;
                        frontier_phi_77_pred_3 = _3151;
                        frontier_phi_77_pred_4 = _3150;
                        frontier_phi_77_pred_5 = _3149;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3371 = _3149;
                        float _3372 = _3150;
                        float _3373 = _3151;
                        float _3374 = _3152;
                        float _3375 = _3153;
                        float _3376 = _3154;
                        uint _3377 = _3164;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3446;
                        vec4 _3461;
                        float _3507;
                        bool _3508;
                        for (;;)
                        {
                            uint _3388 = ((_3155 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3433 = (_3388 * 40u) + 16u;
                            _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3448 = (_3388 * 40u) + 20u;
                            _3461 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3448)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3448 + 3u)).x));
                            uint _3463 = (_3388 * 40u) + 24u;
                            vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3482 = (_3388 * 40u) + 28u;
                            vec4 _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            _3507 = fma(_2723, _3495.z, fma(_2722, _3495.y, _3495.x * _2721)) + _3495.w;
                            _3508 = !((fma(_2723, _3476.z, fma(_2722, _3476.y, _3476.x * _2721)) + _3476.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3508)
                            {
                                float _3535 = _3403.x - _2721;
                                float _3536 = _3403.y - _2722;
                                float _3537 = _3403.z - _2723;
                                float _3538 = dot(vec3(_3535, _3536, _3537), vec3(_3535, _3536, _3537));
                                float _3541 = inversesqrt(_3538);
                                float _3542 = _3541 * _3535;
                                float _3543 = _3541 * _3536;
                                float _3544 = _3541 * _3537;
                                float _3548 = 1.0 - (_3538 / (_3404 * _3404));
                                float _4686 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                                float _3553 = sqrt(_3538) * _3419.w;
                                float _3555 = 1.39999997615814208984375 / (_3553 + 1.39999997615814208984375);
                                float _3556 = _3555 * _3555;
                                float _3559 = ((1.0 - _3556) * dot(vec3(_3542, _3543, _3544), vec3(_934, _937, _940))) + _3556;
                                float _3562 = _3553 * _3553;
                                float _3566 = (fma(_2723, _3446.z, fma(_2722, _3446.y, _3446.x * _2721)) + _3446.w) / _3507;
                                float _3567 = (fma(_2723, _3461.z, fma(_2722, _3461.y, _3461.x * _2721)) + _3461.w) / _3507;
                                float _3571 = 1.0 - dot(vec2(_3566, _3567), vec2(_3566, _3567));
                                float _4702 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                                float _3572 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                                float _3573 = _3572 * (((isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0))) * _3549) / ((_3562 * 0.699999988079071044921875) + 1.0));
                                float _3585 = exp2(log2(1.0 / ((_3562 * 3.5) + 5.0)) * 0.25);
                                float _3586 = 1.0 - _1009;
                                float _3593 = sqrt(1.0 - ((1.0 - (_3586 * _3586)) * (1.0 - (_3585 * _3585))));
                                float _3594 = _3593 * _3593;
                                float _3595 = _3594 * _3594;
                                float _3596 = _3542 - _3015;
                                float _3597 = _3543 - _3016;
                                float _3598 = _3544 - _3017;
                                float _3602 = inversesqrt(dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598)));
                                float _3606 = dot(vec3(_934, _937, _940), vec3((-0.0) - _3015, (-0.0) - _3016, (-0.0) - _3017));
                                float _4713 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3610 = dot(vec3(_934, _937, _940), vec3(_3602 * _3596, _3602 * _3597, _3602 * _3598));
                                float _4724 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                                float _3613 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3617 = ((_3613 * _3613) * (_3595 + (-1.0))) + 1.0;
                                float _3618 = _3555 * _3594;
                                float _3619 = _3618 * _3618;
                                float _3625 = ((1.0 - _3619) * dot(vec3(_934, _937, _940), vec3(_3542, _3543, _3544))) + _3619;
                                float _4735 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3627 = 1.0 - _3594;
                                float _3637 = (0.5 / (((_3626 * ((_3609 * _3627) + _3594)) + 9.9999999392252902907785028219223e-09) + (((_3626 * _3627) + _3594) * _3609))) * _3626;
                                float _4746 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3647 = (_3572 * _3549) * (((_3595 * 3.1415927410125732421875) * (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) / ((_3617 * _3617) * ((_3562 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3573 * _3419.y;
                                frontier_phi_83_pred_1 = _3573 * _3419.x;
                                frontier_phi_83_pred_2 = _3647 * _3431.z;
                                frontier_phi_83_pred_3 = _3647 * _3431.y;
                                frontier_phi_83_pred_4 = _3647 * _3431.x;
                                frontier_phi_83_pred_5 = _3573 * _3419.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3655 = frontier_phi_83_pred;
                            _3654 = frontier_phi_83_pred_1;
                            _3653 = frontier_phi_83_pred_2;
                            _3652 = frontier_phi_83_pred_3;
                            _3651 = frontier_phi_83_pred_4;
                            _3656 = frontier_phi_83_pred_5;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            _3363 = _3656 + _3376;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3360 = _3653 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3363;
                        frontier_phi_77_pred_1 = _3362;
                        frontier_phi_77_pred_2 = _3361;
                        frontier_phi_77_pred_3 = _3360;
                        frontier_phi_77_pred_4 = _3359;
                        frontier_phi_77_pred_5 = _3358;
                    }
                    _3000 = frontier_phi_77_pred;
                    _2998 = frontier_phi_77_pred_1;
                    _2996 = frontier_phi_77_pred_2;
                    _2994 = frontier_phi_77_pred_3;
                    _2992 = frontier_phi_77_pred_4;
                    _2990 = frontier_phi_77_pred_5;
                    uint _3156 = _3155 + 1u;
                    if (_3156 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3149 = _2990;
                        _3150 = _2992;
                        _3151 = _2994;
                        _3152 = _2996;
                        _3153 = _2998;
                        _3154 = _3000;
                        _3155 = _3156;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2994;
                frontier_phi_58_59_ladder_1 = _3000;
                frontier_phi_58_59_ladder_2 = _2998;
                frontier_phi_58_59_ladder_3 = _2996;
                frontier_phi_58_59_ladder_4 = _2992;
                frontier_phi_58_59_ladder_5 = _2990;
            }
            else
            {
                frontier_phi_58_59_ladder = _2872;
                frontier_phi_58_59_ladder_1 = _2878;
                frontier_phi_58_59_ladder_2 = _2876;
                frontier_phi_58_59_ladder_3 = _2874;
                frontier_phi_58_59_ladder_4 = _2870;
                frontier_phi_58_59_ladder_5 = _2868;
            }
            _2989 = frontier_phi_58_59_ladder_5;
            _2991 = frontier_phi_58_59_ladder_4;
            _2993 = frontier_phi_58_59_ladder;
            _2995 = frontier_phi_58_59_ladder_3;
            _2997 = frontier_phi_58_59_ladder_2;
            _2999 = frontier_phi_58_59_ladder_1;
        }
        float _3004 = isnan(1.0) ? _993 : (isnan(_993) ? 1.0 : min(_993, 1.0));
        _2780 = (_3004 * _2995) + _2213;
        _2782 = (_3004 * _2997) + _2215;
        _2784 = (_3004 * _2999) + _2217;
        _2786 = ((_2989 * _977) * _3004) + _2561;
        _2788 = ((_2991 * _979) * _3004) + _2563;
        _2790 = ((_2993 * _980) * _3004) + _2565;
    }
    else
    {
        _2780 = _2213;
        _2782 = _2215;
        _2784 = _2217;
        _2786 = _2561;
        _2788 = _2563;
        _2790 = _2565;
    }
    float _4762 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4773 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4784 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2807 = ((isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0))) * (_2780 + ((isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0))) * _993))) + ((_2786 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _2808 = ((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2782 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _993))) + ((_2788 + ((isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    float _2809 = ((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2784 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _993))) + ((_2790 + ((isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0))) * _1832)) * cbPerFrame._m0[3u].x);
    uint _2810 = _250 + 6u;
    float _2818 = _915 / cbSceneParam._m0[86u].x;
    float _2819 = _916 / cbSceneParam._m0[86u].y;
    vec4 _2833 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2835 = _2833.x;
    float _2836 = _2833.y;
    float _2837 = _2833.z;
    float _2838 = _2833.w;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2893 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2894 = _2893 / _837;
        float _2905 = _2894 * _888;
        float _2906 = _889 * _2894;
        float _2907 = (-0.0) - _2906;
        float _2909 = _2894 * _890;
        float _2911 = (cbSceneParam._m0[77u].w * _2907) / _2893;
        float _2912 = _2911 + cbSceneParam._m0[79u].w;
        float _2913 = cbSceneParam._m0[79u].w - _2906;
        float _2919 = sqrt(((_2905 * _2905) + (_2906 * _2906)) + (_2909 * _2909));
        float _2922 = (1.0 - (cbSceneParam._m0[77u].w / _2893)) * _2919;
        float _2927 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2929 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3106;
        if (abs((_2907 - _2911) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3106 = ((((_2912 > 0.0) ? exp2(_2927 * _2912) : (2.0 - exp2(_2929 * _2912))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2922;
        }
        else
        {
            float _3050 = 1.0 / cbSceneParam._m0[80u].x;
            float _3051 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : max(_2912, _2913));
            float _3052 = isnan(_2913) ? _2912 : (isnan(_2912) ? _2913 : min(_2912, _2913));
            float _3061 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : min(_3051, 0.0));
            float _3062 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : min(_3052, 0.0));
            _3106 = ((abs(_2919 / _2907) * cbSceneParam._m0[80u].y) * ((((_3061 - _3062) * 2.0) - ((exp2(_2927 * (isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0)))) - exp2(_2927 * (isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0))))) * _3050)) - ((exp2(_2929 * _3061) - exp2(_2929 * _3062)) * _3050))) + (_2922 * cbSceneParam._m0[80u].z);
        }
        vec4 _3108 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2818, _2819, 1.0), 0.0);
        float _3117 = exp2((_3106 * (-1.44269502162933349609375)) * (1.0 - _3108.w));
        float _3118 = log2(_3117);
        float _3134 = log2(_2838);
        _2931 = (exp2(_3134 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].x)) * _3108.x) / cbSceneParam._m0[78u].x)) + _2835;
        _2933 = (exp2(_3134 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].y)) * _3108.y) / cbSceneParam._m0[78u].y)) + _2836;
        _2935 = (exp2(_3134 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3118 * cbSceneParam._m0[78u].z)) * _3108.z) / cbSceneParam._m0[78u].z)) + _2837;
        _2937 = _3117 * _2838;
    }
    else
    {
        _2931 = _2835;
        _2933 = _2836;
        _2935 = _2837;
        _2937 = _2838;
    }
    bool _3144;
    vec4 _2947;
    vec4 _2969;
    float _2971;
    float _2975;
    float _2976;
    float _2977;
    float _2978;
    bool _2988;
    for (;;)
    {
        _2947 = cbMatDynParam._m0[0u];
        float _2949 = roundEven(_2947.y);
        bool _2950 = _2949 == 3.0;
        float _2951 = log2(_2937);
        float _2958 = exp2(_2951 * cbSceneParam._m0[78u].x) * _2807;
        float _2959 = exp2(_2951 * cbSceneParam._m0[78u].y) * _2808;
        float _2960 = exp2(_2951 * cbSceneParam._m0[78u].z) * _2809;
        float _2967 = _904 + (-0.5);
        _2969 = cbMtdParam._m0[1u];
        _2971 = _2969.y * _2967;
        float _2974 = (_2949 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2975 = _2974 * (_2950 ? _2958 : (_2958 + (cbSceneParam._m0[72u].w * _2931)));
        _2976 = _2974 * (_2950 ? _2959 : (_2959 + (cbSceneParam._m0[72u].w * _2933)));
        _2977 = _2974 * (_2950 ? _2960 : (_2960 + (cbSceneParam._m0[72u].w * _2935)));
        _2978 = _2967 * 0.999000012874603271484375;
        _2988 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2988)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2978) < 0.5)
            {
                _3144 = true;
                break;
            }
        }
        uint _3085 = _953 + uint(_2947.w);
        if ((cbInstanceData._m0[_3085].w < 1.0) && ((cbInstanceData._m0[_3085].w + _2978) < 0.5))
        {
            _3144 = true;
            break;
        }
        if ((_2971 + 1.0) < _2969.x)
        {
            _3144 = true;
            break;
        }
        _3144 = false;
        break;
    }
    float _3349;
    if (_3144)
    {
        discard_state = true;
        _3349 = 0.0;
    }
    else
    {
        _3349 = cbInstanceData._m0[_2810].w;
    }
    SV_Target.x = _2975;
    SV_Target.y = _2976;
    SV_Target.z = _2977;
    SV_Target.w = _3349;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2810].w;
    discard_exit();
}


