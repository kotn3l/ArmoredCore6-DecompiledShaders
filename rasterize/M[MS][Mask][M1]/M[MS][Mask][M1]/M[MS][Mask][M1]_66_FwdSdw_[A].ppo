#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1478;
float _4141;
float _4142;
float _4143;
float _4144;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[23u].w) + _403) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4153 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _428 = (_421 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _429 = (_421 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _430 = (_421 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4164 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _540 = _538.x;
    float _541 = _538.y;
    float _542 = _538.z;
    float _549 = ((_521.x - _540) * _421) + _540;
    float _550 = ((_521.y - _541) * _421) + _541;
    float _551 = ((_521.z - _542) * _421) + _542;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _576 = ((_563.z - _551) * _494) + _551;
    float _579 = ((((_563.x - _549) * _494) + _549) * 2.0) + (-1.0);
    float _581 = ((((_563.y - _550) * _494) + _550) * 2.0) + (-1.0);
    float _582 = dot(vec2(_579, _581), vec2(_579, _581));
    float _4175 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _587 = sqrt(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _626 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _628 = _626.x;
    float _629 = 1.0 - _628;
    float _638 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _641 = ((isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : min(_638, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _650 = (_641 - ((((((_628 - _629) * cbMtdParam._m0[24u].z) + _629) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _641))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4196 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _651 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _658 = (_651 * (cbMtdParam._m0[17u].x - _501)) + _501;
    float _659 = (_651 * (cbMtdParam._m0[17u].y - _502)) + _502;
    float _660 = (_651 * (cbMtdParam._m0[17u].z - _503)) + _503;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _674 = _672.x;
    float _675 = 1.0 - _674;
    float _700 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_674 - _675) * cbMtdParam._m0[24u].w) + _675) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4207 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _709 = ((((cbMtdParam._m0[10u].x - _658) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _701) + _658;
    float _710 = ((((cbMtdParam._m0[10u].y - _659) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _701) + _659;
    float _711 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _660)) * _701) + _660;
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _739 = _737.x;
    float _757 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _739) * _421) + _739;
    float _774 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _757) * _494) + _757;
    float _778 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _774) * cbMtdParam._m0[19u].z) + _774;
    float _780 = _778 - (_778 * _651);
    float _782 = _780 - (_780 * _701);
    float _786 = (cbMtdParam._m0[19u].w * (_601.z - _576)) + _576;
    vec4 _800 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _807 = (_800.x * 2.0) + (-1.0);
    float _808 = (_800.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _4218 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _817 = (_651 * (_800.z - _786)) + _786;
    float _820 = ((cbMtdParam._m0[23u].x - _817) * _701) + _817;
    vec4 _839 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _845 = (_839.x * 2.0) + (-1.0);
    float _846 = (_839.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _4229 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _855 = (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _579;
    float _856 = (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _581;
    float _868 = (((_807 - _855) + (cbMtdParam._m0[21u].x * _855)) * _651) + _855;
    float _869 = (((_808 - _856) + (cbMtdParam._m0[21u].x * _856)) * _651) + _856;
    float _870 = (_651 * (sqrt(1.0 - (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0)))) - _587)) + _587;
    float _881 = (((_845 - _868) + (_868 * cbMtdParam._m0[22u].z)) * _701) + _868;
    float _882 = (((_846 - _869) + (_869 * cbMtdParam._m0[22u].z)) * _701) + _869;
    float _883 = ((sqrt(1.0 - (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0)))) - _870) * _701) + _870;
    float _885 = cbMtdParam._m0[22u].x + _601.w;
    float _888 = fma(_883, _254 * NORMAL.x, fma(_882, _261 * TANGENT.x, (_247 * _239) * _881));
    float _891 = fma(_883, _254 * NORMAL.y, fma(_882, _261 * TANGENT.y, (_247 * _240) * _881));
    float _894 = fma(_883, _254 * NORMAL.z, fma(_882, _261 * TANGENT.z, (_247 * _241) * _881));
    float _898 = inversesqrt(dot(vec3(_888, _891, _894), vec3(_888, _891, _894)));
    float _899 = _898 * _888;
    float _900 = _898 * _891;
    float _901 = _898 * _894;
    float _4240 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _902 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _4251 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4262 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4273 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4284 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4295 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _907 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _921 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _971 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _961);
    float _972 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _961);
    float _973 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _961);
    float _977 = inversesqrt(dot(vec3(_971, _972, _973), vec3(_971, _972, _973)));
    float _978 = _971 * _977;
    float _979 = _972 * _977;
    float _980 = _973 * _977;
    vec4 _985 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _987 = _985.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1159 = sqrt(((_971 * _971) + (_972 * _972)) + (_973 * _973));
        float _1165 = (cbMatDynParam._m0[5u].x * _1159) + cbMatDynParam._m0[5u].y;
        float _4306 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1170 = (cbMatDynParam._m0[5u].z * _1159) + cbMatDynParam._m0[5u].w;
        float _4317 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) - _1166)) + _1166) < ((_987 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _998 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _999 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1017 = fma(_901, cbSceneParam._m0[5u].z, fma(_900, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _899));
    float _1020 = fma(_901, cbSceneParam._m0[6u].z, fma(_900, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _899));
    float _1023 = fma(_901, cbSceneParam._m0[7u].z, fma(_900, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _899));
    uint _1036 = _267 + 9u;
    uint _1037 = _1036 + uint(cbMatDynParam._m0[0u].w);
    float _1043 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) * cbInstanceData._m0[_1037].x;
    float _1044 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0)))) * cbInstanceData._m0[_1037].y;
    float _1045 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * cbInstanceData._m0[_1037].z;
    float _4328 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _4339 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _4350 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
    float _1048 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _1049 = 1.0 - _907;
    float _1050 = _1046 * _1049;
    float _1051 = _1047 * _1049;
    float _1052 = _1048 * _1049;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _907;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _907;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _907;
    float _1060 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _998, cbSceneParam._m0[86u].y * _999));
    float _1076 = ((isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * TEXCOORD_5.w) * _1072.x;
    float _1077 = dot(vec3(_899, _900, _901), vec3(_978, _979, _980));
    float _1080 = _1077 * 2.0;
    float _1084 = (_1080 * _899) - _978;
    float _1085 = (_1080 * _900) - _979;
    float _1086 = (_1080 * _901) - _980;
    float _1090 = abs(dot(vec3(_978, _979, _980), vec3(_899, _900, _901)));
    float _4361 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1092 = sqrt(_902);
    float _1105 = exp2((_1092 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1092 * 3.0));
    float _1111 = (1.0 - _1105) * ((_1092 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1112 = _1105 * _1092;
    float _1140 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1477;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1202 = fma(_1148, cbModelParam._m0[26u].z, fma(_1144, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1140));
        float _1206 = fma(_1148, cbModelParam._m0[27u].z, fma(_1144, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1140));
        float _1210 = fma(_1148, cbModelParam._m0[28u].z, fma(_1144, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1140));
        float _1235 = _1140 + _899;
        float _1236 = _1144 + _900;
        float _1237 = _1148 + _901;
        float _1247 = fma(_1237, cbModelParam._m0[26u].z, fma(_1236, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235)) - _1202;
        float _1248 = fma(_1237, cbModelParam._m0[27u].z, fma(_1236, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235)) - _1206;
        float _1249 = fma(_1237, cbModelParam._m0[28u].z, fma(_1236, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235)) - _1210;
        float _1253 = inversesqrt(dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249)));
        float _1266 = ((_1253 * _1247) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1202 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1253 * _1248) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1206 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1268 = ((_1253 * _1249) / cbModelParam._m0[34u].z) + ((((((_1210 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1266, _1267, _1268), 0.0);
        float _1305 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1271.x + (-0.5));
        float _1307 = _1305 * (_1271.y + (-0.5));
        float _1308 = _1305 * (_1271.z + (-0.5));
        float _1315 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1278.x + (-0.5));
        float _1317 = _1315 * (_1278.y + (-0.5));
        float _1318 = _1315 * (_1278.z + (-0.5));
        float _1325 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1285.x + (-0.5));
        float _1327 = _1325 * (_1285.y + (-0.5));
        float _1328 = _1325 * (_1285.z + (-0.5));
        float _1335 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1292.x + (-0.5));
        float _1337 = _1335 * (_1292.y + (-0.5));
        float _1338 = _1335 * (_1292.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1359 = (dot(vec3(_899, _900, _901), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1369 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _4409 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1371 + 1.0))) + _1376) * _1339;
        float _1386 = _1307 * 0.5;
        float _1387 = _1317 * 0.5;
        float _1388 = _1327 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_899, _900, _901), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4442 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1413 + 1.0))) + _1418) * _1340;
        float _1428 = _1308 * 0.5;
        float _1429 = _1318 * 0.5;
        float _1430 = _1328 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_899, _900, _901), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4475 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1455 + 1.0))) + _1460) * _1341;
        _1477 = _1308;
        _1479 = _1307;
        _1480 = _1306;
        _1481 = _1318;
        _1482 = _1317;
        _1483 = _1316;
        _1484 = _1328;
        _1485 = _1327;
        _1486 = _1326;
        _1487 = _1341;
        _1488 = _1340;
        _1489 = _1339;
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1492 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
    }
    else
    {
        _1477 = _1478;
        _1479 = _1478;
        _1480 = _1478;
        _1481 = _1478;
        _1482 = _1478;
        _1483 = _1478;
        _1484 = _1478;
        _1485 = _1478;
        _1486 = _1478;
        _1487 = _1478;
        _1488 = _1478;
        _1489 = _1478;
        _1490 = 0.0;
        _1491 = 0.0;
        _1492 = 0.0;
    }
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1519 = fma(_1148, cbModelParam._m0[30u].z, fma(_1144, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140));
        float _1523 = fma(_1148, cbModelParam._m0[31u].z, fma(_1144, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140));
        float _1527 = fma(_1148, cbModelParam._m0[32u].z, fma(_1144, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140));
        float _1550 = _1140 + _899;
        float _1551 = _1144 + _900;
        float _1552 = _1148 + _901;
        float _1562 = fma(_1552, cbModelParam._m0[30u].z, fma(_1551, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1550)) - _1519;
        float _1563 = fma(_1552, cbModelParam._m0[31u].z, fma(_1551, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1550)) - _1523;
        float _1564 = fma(_1552, cbModelParam._m0[32u].z, fma(_1551, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1550)) - _1527;
        float _1568 = inversesqrt(dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564)));
        float _1581 = ((_1568 * _1562) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1519 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1568 * _1563) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1523 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1583 = ((_1568 * _1564) / cbModelParam._m0[35u].z) + ((((((_1527 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1585 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1592 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1599 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        vec4 _1606 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1581, _1582, _1583), 0.0);
        float _1618 = exp2((_1585.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1585.x + (-0.5));
        float _1620 = _1618 * (_1585.y + (-0.5));
        float _1621 = _1618 * (_1585.z + (-0.5));
        float _1628 = exp2((_1592.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1592.x + (-0.5));
        float _1630 = _1628 * (_1592.y + (-0.5));
        float _1631 = _1628 * (_1592.z + (-0.5));
        float _1638 = exp2((_1599.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1599.x + (-0.5));
        float _1640 = _1638 * (_1599.y + (-0.5));
        float _1641 = _1638 * (_1599.z + (-0.5));
        float _1648 = exp2((_1606.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1606.x + (-0.5));
        float _1650 = _1648 * (_1606.y + (-0.5));
        float _1651 = _1648 * (_1606.z + (-0.5));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1655 = _1619 * 0.5;
        float _1656 = _1629 * 0.5;
        float _1657 = _1639 * 0.5;
        float _1658 = dot(vec3(_1655, _1656, _1657), vec3(_1655, _1656, _1657));
        float _1663 = (_1658 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1658);
        float _1671 = (dot(vec3(_899, _900, _901), vec3(_1663 * _1655, _1663 * _1656, _1663 * _1657)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1680 = sqrt(((_1656 * _1656) + (_1655 * _1655)) + (_1657 * _1657)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1682 = _1681 * 2.0;
        float _1686 = (1.0 - _1681) / (_1681 + 1.0);
        float _4538 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1687 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1696 = ((((1.0 - _1687) * (_1682 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1682 + 1.0))) + _1687) * _1652;
        float _1697 = _1620 * 0.5;
        float _1698 = _1630 * 0.5;
        float _1699 = _1640 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_899, _900, _901), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4571 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1724 + 1.0))) + _1729) * _1653;
        float _1739 = _1621 * 0.5;
        float _1740 = _1631 * 0.5;
        float _1741 = _1641 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_899, _900, _901), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1654 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4604 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1766 + 1.0))) + _1771) * _1654;
        _1788 = _1621;
        _1789 = _1620;
        _1790 = _1619;
        _1791 = _1631;
        _1792 = _1630;
        _1793 = _1629;
        _1794 = _1641;
        _1795 = _1640;
        _1796 = _1639;
        _1797 = _1654;
        _1798 = _1653;
        _1799 = _1652;
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1802 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
    }
    else
    {
        _1788 = _1478;
        _1789 = _1478;
        _1790 = _1478;
        _1791 = _1478;
        _1792 = _1478;
        _1793 = _1478;
        _1794 = _1478;
        _1795 = _1478;
        _1796 = _1478;
        _1797 = _1478;
        _1798 = _1478;
        _1799 = _1478;
        _1800 = 0.0;
        _1801 = 0.0;
        _1802 = 0.0;
    }
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1490)) + _1490;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1491)) + _1491;
    float _1814 = (cbModelParam._m0[1u].x * (_1802 - _1492)) + _1492;
    float _1835 = fma(_1814, cbSceneParam._m0[89u].z, fma(_1813, cbSceneParam._m0[89u].y, _1812 * cbSceneParam._m0[89u].x));
    float _1838 = fma(_1814, cbSceneParam._m0[90u].z, fma(_1813, cbSceneParam._m0[90u].y, _1812 * cbSceneParam._m0[90u].x));
    float _1841 = fma(_1814, cbSceneParam._m0[91u].z, fma(_1813, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1812));
    float _1856 = _1084 * 0.5;
    float _1857 = _1085 * 0.5;
    float _1858 = _1086 * 0.5;
    float _1859 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1790, _1793, _1796, _1799));
    float _1862 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1865 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1899;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1872 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1477, _1481, _1484, _1487));
        float _1876 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1880 = dot(vec4(_1856, _1857, _1858, 1.0), vec4(_1480, _1483, _1486, _1489));
        float _1887 = dot(vec4(cbModelParam._m0[39u]), vec4(_1856, _1857, _1858, 1.0));
        _1899 = dot(vec3(isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0)), isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)), isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1899 = 1.0;
    }
    float _1910;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1901 = dot(vec4(cbModelParam._m0[40u]), vec4(_1856, _1857, _1858, 1.0));
        _1910 = dot(vec3(isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1901) ? 0.0 : (isnan(0.0) ? _1901 : max(0.0, _1901))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1910 = 1.0;
    }
    float _1914 = (_1910 * cbModelParam._m0[1u].x) + (_1899 * (1.0 - cbModelParam._m0[1u].x));
    float _1924 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _902);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1924 : min(cbModelParam._m0[25u].z, _1924));
    float _2006;
    float _2008;
    float _2010;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1973 = fma(_1148, cbModelParam._m0[13u].z, fma(_1144, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1140)) + cbModelParam._m0[13u].w;
        float _1977 = fma(_1148, cbModelParam._m0[14u].z, fma(_1144, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1140)) + cbModelParam._m0[14u].w;
        float _1981 = fma(_1148, cbModelParam._m0[15u].z, fma(_1144, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1140)) + cbModelParam._m0[15u].w;
        float _1984 = fma(_1086, cbModelParam._m0[13u].z, fma(_1085, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1084));
        float _1987 = fma(_1086, cbModelParam._m0[14u].z, fma(_1085, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1084));
        float _1990 = fma(_1086, cbModelParam._m0[15u].z, fma(_1085, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1084));
        float _2018;
        if (_1984 > 0.0)
        {
            _2018 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2018 = frontier_phi_17_15_ladder;
        }
        float _2190;
        if (_1987 > 0.0)
        {
            _2190 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2190 = frontier_phi_26_22_ladder;
        }
        float _2485;
        if (_1990 > 0.0)
        {
            _2485 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2485 = frontier_phi_38_33_ladder;
        }
        float _2487 = isnan(_2190) ? _2018 : (isnan(_2018) ? _2190 : min(_2018, _2190));
        float _2488 = isnan(_2485) ? _2487 : (isnan(_2487) ? _2485 : min(_2487, _2485));
        float _2492 = (_2488 * _1984) + _1973;
        float _2493 = (_2488 * _1987) + _1977;
        float _2494 = (_2488 * _1990) + _1981;
        float _2495 = _2488 * 9.9999997473787516355514526367188e-05;
        float _2497 = (-1.0) - _2495;
        float _2499 = _2495 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2494 > _2499) || ((_2494 < _2497) || ((_2493 > _2499) || ((_2493 < _2497) || ((_2492 < _2497) || (_2492 > _2499))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2494, cbModelParam._m0[9u].z, fma(_2493, cbModelParam._m0[9u].y, _2492 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2494, cbModelParam._m0[10u].z, fma(_2493, cbModelParam._m0[10u].y, _2492 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2494, cbModelParam._m0[11u].z, fma(_2493, cbModelParam._m0[11u].y, _2492 * cbModelParam._m0[11u].x))), _1925);
            frontier_phi_16_38_ladder = _2639.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2639.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2639.x * cbModelParam._m0[1u].y;
        }
        _2006 = frontier_phi_16_38_ladder_2;
        _2008 = frontier_phi_16_38_ladder_1;
        _2010 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1994 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1084, _1085, _1086), _1925);
        _2006 = _1994.x * cbModelParam._m0[1u].y;
        _2008 = _1994.y * cbModelParam._m0[1u].y;
        _2010 = _1994.z * cbModelParam._m0[1u].y;
    }
    float _2014 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _902);
    float _2015 = isnan(_2014) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2014 : min(cbModelParam._m0[25u].w, _2014));
    float _2105;
    float _2107;
    float _2109;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2069 = fma(_1148, cbModelParam._m0[21u].z, fma(_1144, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1140)) + cbModelParam._m0[21u].w;
        float _2073 = fma(_1148, cbModelParam._m0[22u].z, fma(_1144, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1140)) + cbModelParam._m0[22u].w;
        float _2077 = fma(_1148, cbModelParam._m0[23u].z, fma(_1144, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1140)) + cbModelParam._m0[23u].w;
        float _2080 = fma(_1086, cbModelParam._m0[21u].z, fma(_1085, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1084));
        float _2083 = fma(_1086, cbModelParam._m0[22u].z, fma(_1085, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1084));
        float _2086 = fma(_1086, cbModelParam._m0[23u].z, fma(_1085, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1084));
        float _2195;
        if (_2080 > 0.0)
        {
            _2195 = abs((1.0 - _2069) / _2080);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2069 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2195 = frontier_phi_28_24_ladder;
        }
        float _2512;
        if (_2083 > 0.0)
        {
            _2512 = abs((1.0 - _2073) / _2083);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2073 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2512 = frontier_phi_40_35_ladder;
        }
        float _2850;
        if (_2086 > 0.0)
        {
            _2850 = abs((1.0 - _2077) / _2086);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2077 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2850 = frontier_phi_50_47_ladder;
        }
        float _2852 = isnan(_2512) ? _2195 : (isnan(_2195) ? _2512 : min(_2195, _2512));
        float _2853 = isnan(_2850) ? _2852 : (isnan(_2852) ? _2850 : min(_2852, _2850));
        float _2857 = (_2853 * _2080) + _2069;
        float _2858 = (_2853 * _2083) + _2073;
        float _2859 = (_2853 * _2086) + _2077;
        float _2860 = _2853 * 9.9999997473787516355514526367188e-05;
        float _2861 = (-1.0) - _2860;
        float _2863 = _2860 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2859 > _2863) || ((_2859 < _2861) || ((_2858 > _2863) || ((_2858 < _2861) || ((_2857 < _2861) || (_2857 > _2863))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2981 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2859, cbModelParam._m0[17u].z, fma(_2858, cbModelParam._m0[17u].y, _2857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2859, cbModelParam._m0[18u].z, fma(_2858, cbModelParam._m0[18u].y, _2857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2859, cbModelParam._m0[19u].z, fma(_2858, cbModelParam._m0[19u].y, _2857 * cbModelParam._m0[19u].x))), _2015);
            frontier_phi_25_50_ladder = _2981.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2981.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2981.x * cbModelParam._m0[1u].z;
        }
        _2105 = frontier_phi_25_50_ladder_2;
        _2107 = frontier_phi_25_50_ladder_1;
        _2109 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1084, _1085, _1086), _2015);
        _2105 = _2089.x * cbModelParam._m0[1u].z;
        _2107 = _2089.y * cbModelParam._m0[1u].z;
        _2109 = _2089.z * cbModelParam._m0[1u].z;
    }
    float _2122 = (((_1111 * _1060) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1111 * _1062) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2126 = (((_1111 * _1063) + _1112) * _1076) * ((cbModelParam._m0[1u].w * (_2109 - _2010)) + _2010);
    float _2129 = fma(_2126, cbSceneParam._m0[89u].z, fma(_2124, cbSceneParam._m0[89u].y, _2122 * cbSceneParam._m0[89u].x));
    float _2132 = fma(_2126, cbSceneParam._m0[90u].z, fma(_2124, cbSceneParam._m0[90u].y, _2122 * cbSceneParam._m0[90u].x));
    float _2135 = fma(_2126, cbSceneParam._m0[91u].z, fma(_2124, cbSceneParam._m0[91u].y, _2122 * cbSceneParam._m0[91u].x));
    float _2169 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2173 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2177 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2181 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2182 = _2169 / _2181;
    float _2183 = _2173 / _2181;
    float _2184 = _2177 / _2181;
    float _2331;
    float _2332;
    float _2333;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2211 = ((uint(_2184 > cbSceneParam._m0[59u].y) + uint(_2184 > cbSceneParam._m0[59u].x)) + uint(_2184 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2212 = _2211 + 43u;
        uint _2220 = _2211 + 44u;
        uint _2228 = _2211 + 45u;
        uint _2236 = _2211 + 46u;
        float _2247 = fma(_2181, cbSceneParam._m0[_2212].w, fma(_2177, cbSceneParam._m0[_2212].z, fma(_2173, cbSceneParam._m0[_2212].y, _2169 * cbSceneParam._m0[_2212].x)));
        float _2251 = fma(_2181, cbSceneParam._m0[_2220].w, fma(_2177, cbSceneParam._m0[_2220].z, fma(_2173, cbSceneParam._m0[_2220].y, _2169 * cbSceneParam._m0[_2220].x)));
        float _2259 = fma(_2181, cbSceneParam._m0[_2236].w, fma(_2177, cbSceneParam._m0[_2236].z, fma(_2173, cbSceneParam._m0[_2236].y, _2169 * cbSceneParam._m0[_2236].x)));
        float _2264 = cbSceneParam._m0[33u].z * _2259;
        float _2266 = cbSceneParam._m0[33u].w * _2259;
        float _2269 = fma(_2181, cbSceneParam._m0[_2228].w, fma(_2177, cbSceneParam._m0[_2228].z, fma(_2173, cbSceneParam._m0[_2228].y, _2169 * cbSceneParam._m0[_2228].x))) / _2259;
        float _2317 = (cbSceneParam._m0[33u].x - sqrt(((_2183 * _2183) + (_2182 * _2182)) + (_2184 * _2184))) * cbSceneParam._m0[33u].y;
        float _4730 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2324 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 + _2247) / _2259, (_2266 + _2251) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2266 + _2247) / _2259, (_2251 - _2264) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 - _2264) / _2259, (_2251 - _2266) / _2259), _2269), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2247 - _2266) / _2259, (_2264 + _2251) / _2259), _2269), 0.0)).x), vec4(0.25)));
        _2331 = 1.0 - (_2324 * cbSceneParam._m0[34u].x);
        _2332 = 1.0 - (_2324 * cbSceneParam._m0[34u].y);
        _2333 = 1.0 - (_2324 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2331 = 1.0;
        _2332 = 1.0;
        _2333 = 1.0;
    }
    float _2397;
    float _2399;
    float _2401;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2385 = fma(_2181, cbSceneParam._m0[63u].w, fma(_2177, cbSceneParam._m0[63u].z, fma(_2173, cbSceneParam._m0[63u].y, _2169 * cbSceneParam._m0[63u].x)));
        float _2386 = fma(_2181, cbSceneParam._m0[60u].w, fma(_2177, cbSceneParam._m0[60u].z, fma(_2173, cbSceneParam._m0[60u].y, _2169 * cbSceneParam._m0[60u].x))) / _2385;
        float _2387 = fma(_2181, cbSceneParam._m0[61u].w, fma(_2177, cbSceneParam._m0[61u].z, fma(_2173, cbSceneParam._m0[61u].y, _2169 * cbSceneParam._m0[61u].x))) / _2385;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2386 >= cbSceneParam._m0[64u].x) && (_2387 >= cbSceneParam._m0[64u].y)) && (_2386 <= cbSceneParam._m0[64u].z)) && (_2387 <= cbSceneParam._m0[64u].w))
        {
            float _2525 = fma(_2181, cbSceneParam._m0[62u].w, fma(_2177, cbSceneParam._m0[62u].z, fma(_2173, cbSceneParam._m0[62u].y, _2169 * cbSceneParam._m0[62u].x))) / _2385;
            float _2529 = isnan(cbSceneParam._m0[41u].w) ? _2525 : (isnan(_2525) ? cbSceneParam._m0[41u].w : max(_2525, cbSceneParam._m0[41u].w));
            float _2572 = (cbSceneParam._m0[33u].x - sqrt(((_2183 * _2183) + (_2182 * _2182)) + (_2184 * _2184))) * cbSceneParam._m0[33u].y;
            float _4746 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
            float _2579 = (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2386, cbSceneParam._m0[33u].w + _2387), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2386, _2387 - cbSceneParam._m0[33u].z), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2386 - cbSceneParam._m0[33u].z, _2387 - cbSceneParam._m0[33u].w), _2529), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2386 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2387), _2529), 0.0)).x), vec4(0.25)));
            float _2583 = 1.0 - (_2579 * cbSceneParam._m0[34u].x);
            float _2584 = 1.0 - (_2579 * cbSceneParam._m0[34u].y);
            float _2585 = 1.0 - (_2579 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2585) ? _2333 : (isnan(_2333) ? _2585 : min(_2333, _2585));
            frontier_phi_37_36_ladder_1 = isnan(_2584) ? _2332 : (isnan(_2332) ? _2584 : min(_2332, _2584));
            frontier_phi_37_36_ladder_2 = isnan(_2583) ? _2331 : (isnan(_2331) ? _2583 : min(_2331, _2583));
        }
        else
        {
            frontier_phi_37_36_ladder = _2333;
            frontier_phi_37_36_ladder_1 = _2332;
            frontier_phi_37_36_ladder_2 = _2331;
        }
        _2397 = frontier_phi_37_36_ladder_2;
        _2399 = frontier_phi_37_36_ladder_1;
        _2401 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2397 = _2331;
        _2399 = _2332;
        _2401 = _2333;
    }
    uvec4 _2406 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2408 = _2406.x * 14u;
    uint _2409 = _2408 + 13u;
    float _2416 = _1076 + (-1.0);
    float _2421 = (cbLight._m0[_2409].x * _2416) + 1.0;
    float _2422 = (cbLight._m0[_2409].y * _2416) + 1.0;
    float _2423 = (cbLight._m0[_2409].z * _2416) + 1.0;
    float _2424 = (cbLight._m0[_2409].w * _2416) + 1.0;
    uint _2425 = _2408 + 5u;
    float _2431 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
    uint _2435 = _2408 + 4u;
    float _2444 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
    uint _2448 = _2408 | 1u;
    float _2459 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_899, _900, _901));
    float _2462 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_899, _900, _901));
    float _4782 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _4793 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _2467 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * 0.3183098733425140380859375;
    float _2469 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * 0.3183098733425140380859375;
    float _2476 = ((cbLight._m0[_2425].x * _2431) * _2469) + (((cbLight._m0[_2435].x * _2397) * _2444) * _2467);
    float _2477 = ((_2431 * cbLight._m0[_2425].y) * _2469) + (((cbLight._m0[_2435].y * _2399) * _2444) * _2467);
    float _2478 = ((_2431 * cbLight._m0[_2425].z) * _2469) + (((cbLight._m0[_2435].z * _2401) * _2444) * _2467);
    uvec4 _2482 = floatBitsToUint(cbLight._m0[_2408 + 12u]);
    bool _2484 = _2482.x == 0u;
    float _2586;
    float _2588;
    float _2590;
    if (_2484)
    {
        _2586 = _2476;
        _2588 = _2477;
        _2590 = _2478;
    }
    else
    {
        uint _2594 = _2408 + 6u;
        float _2610 = (dot(vec3(cbLight._m0[_2408 + 2u].xyz), vec3(_899, _900, _901)) * 0.5) + 0.5;
        float _2611 = _2610 * _2610;
        float _4804 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2612 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2613 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2586 = (((cbLight._m0[_2594].x * 0.3183098733425140380859375) * _2612) * _2613) + _2476;
        _2588 = (((cbLight._m0[_2594].y * 0.3183098733425140380859375) * _2612) * _2613) + _2477;
        _2590 = (((cbLight._m0[_2594].z * 0.3183098733425140380859375) * _2612) * _2613) + _2478;
    }
    bool _2593 = _2482.y == 0u;
    float _2648;
    float _2650;
    float _2652;
    if (_2593)
    {
        _2648 = _2586;
        _2650 = _2588;
        _2652 = _2590;
    }
    else
    {
        uint _2821 = _2408 + 7u;
        float _2837 = (dot(vec3(cbLight._m0[_2408 + 3u].xyz), vec3(_899, _900, _901)) * 0.5) + 0.5;
        float _2838 = _2837 * _2837;
        float _4820 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2839 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2840 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2648 = (((cbLight._m0[_2821].x * 0.3183098733425140380859375) * _2839) * _2840) + _2586;
        _2650 = (((cbLight._m0[_2821].y * 0.3183098733425140380859375) * _2839) * _2840) + _2588;
        _2652 = (((cbLight._m0[_2821].z * 0.3183098733425140380859375) * _2839) * _2840) + _2590;
    }
    uint _2655 = _2408 + 8u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _902) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2408].x + _978;
    float _2671 = cbLight._m0[_2408].y + _979;
    float _2672 = cbLight._m0[_2408].z + _980;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2408].xyz));
    float _4836 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
    float _4847 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _2684 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
    float _2685 = dot(vec3(_899, _900, _901), vec3(_2677, _2678, _2679));
    float _4858 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
    float _2688 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
    float _2689 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2677, _2678, _2679));
    float _4869 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
    float _2693 = _2669 * _2669;
    float _2697 = ((_2688 * _2688) * (_2693 + (-1.0))) + 1.0;
    float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) * 5.0);
    float _2706 = 0.959999978542327880859375 - _1057;
    float _2708 = 0.959999978542327880859375 - _1058;
    float _2709 = 0.959999978542327880859375 - _1059;
    float _2716 = 1.0 - _2669;
    float _2727 = (0.5 / (((_2684 * ((_2683 * _2716) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2716) + _2669) * _2683))) * _2683;
    float _4880 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _2729 = (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0))) * (_2693 / ((_2697 * _2697) * 3.141590118408203125));
    uint _2743 = _2408 + 9u;
    float _2754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _902) * 0.949999988079071044921875);
    float _2755 = _2754 * _2754;
    float _2756 = cbLight._m0[_2448].x + _978;
    float _2757 = cbLight._m0[_2448].y + _979;
    float _2758 = cbLight._m0[_2448].z + _980;
    float _2762 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
    float _2763 = _2762 * _2756;
    float _2764 = _2762 * _2757;
    float _2765 = _2762 * _2758;
    float _2766 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2448].xyz));
    float _4891 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2769 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2770 = dot(vec3(_899, _900, _901), vec3(_2763, _2764, _2765));
    float _4902 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
    float _2773 = isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0));
    float _2774 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2763, _2764, _2765));
    float _4913 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
    float _2778 = _2755 * _2755;
    float _2782 = ((_2773 * _2773) * (_2778 + (-1.0))) + 1.0;
    float _2789 = exp2(log2(1.0 - (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0)))) * 5.0);
    float _2796 = 1.0 - _2755;
    float _2806 = (0.5 / (((_2684 * ((_2769 * _2796) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2796) + _2755) * _2769))) * _2769;
    float _4924 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2808 = (isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2778 / ((_2782 * _2782) * 3.141590118408203125));
    float _2818 = (((((_2789 * _2706) + _1060) * cbLight._m0[_2743].x) * _2808) * _2431) + ((((cbLight._m0[_2655].x * _2397) * ((_2705 * _2706) + _1060)) * _2729) * _2444);
    float _2819 = (((((_2789 * _2708) + _1062) * cbLight._m0[_2743].y) * _2808) * _2431) + ((((cbLight._m0[_2655].y * _2399) * ((_2705 * _2708) + _1062)) * _2729) * _2444);
    float _2820 = (((((_2789 * _2709) + _1063) * cbLight._m0[_2743].z) * _2808) * _2431) + ((((cbLight._m0[_2655].z * _2401) * ((_2705 * _2709) + _1063)) * _2729) * _2444);
    float _2876;
    float _2878;
    float _2880;
    if (_2484)
    {
        _2876 = _2818;
        _2878 = _2819;
        _2880 = _2820;
    }
    else
    {
        uint _2882 = _2408 + 2u;
        uint _2886 = _2408 + 10u;
        float _2900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2882].w)) * _902) * 0.949999988079071044921875);
        float _2901 = _2900 * _2900;
        float _2902 = cbLight._m0[_2882].x + _978;
        float _2903 = cbLight._m0[_2882].y + _979;
        float _2904 = cbLight._m0[_2882].z + _980;
        float _2908 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
        float _2909 = _2908 * _2902;
        float _2910 = _2908 * _2903;
        float _2911 = _2908 * _2904;
        float _2912 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2882].xyz));
        float _4935 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2915 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
        float _2916 = dot(vec3(_899, _900, _901), vec3(_2909, _2910, _2911));
        float _4946 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
        float _2919 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
        float _2920 = dot(vec3(cbLight._m0[_2882].xyz), vec3(_2909, _2910, _2911));
        float _4957 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2924 = _2901 * _2901;
        float _2928 = ((_2919 * _2919) * (_2924 + (-1.0))) + 1.0;
        float _2935 = exp2(log2(1.0 - (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) * 5.0);
        float _2942 = 1.0 - _2901;
        float _2952 = (0.5 / (((_2684 * ((_2915 * _2942) + _2901)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _2942) + _2901) * _2915))) * _2915;
        float _4968 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2954 = (isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2924 / ((_2928 * _2928) * 3.141590118408203125));
        float _2955 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
        _2876 = (((((_2935 * _2706) + _1060) * cbLight._m0[_2886].x) * _2954) * _2955) + _2818;
        _2878 = (((((_2935 * _2708) + _1062) * cbLight._m0[_2886].y) * _2954) * _2955) + _2819;
        _2880 = (((((_2935 * _2709) + _1063) * cbLight._m0[_2886].z) * _2954) * _2955) + _2820;
    }
    float _2986;
    float _2988;
    float _2990;
    if (_2593)
    {
        _2986 = _2876;
        _2988 = _2878;
        _2990 = _2880;
    }
    else
    {
        uint _2997 = _2408 + 3u;
        uint _3001 = _2408 + 11u;
        float _3015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2997].w)) * _902) * 0.949999988079071044921875);
        float _3016 = _3015 * _3015;
        float _3017 = cbLight._m0[_2997].x + _978;
        float _3018 = cbLight._m0[_2997].y + _979;
        float _3019 = cbLight._m0[_2997].z + _980;
        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
        float _3024 = _3023 * _3017;
        float _3025 = _3023 * _3018;
        float _3026 = _3023 * _3019;
        float _3027 = dot(vec3(_899, _900, _901), vec3(cbLight._m0[_2997].xyz));
        float _4984 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3030 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
        float _3031 = dot(vec3(_899, _900, _901), vec3(_3024, _3025, _3026));
        float _4995 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
        float _3034 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
        float _3035 = dot(vec3(cbLight._m0[_2997].xyz), vec3(_3024, _3025, _3026));
        float _5006 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3039 = _3016 * _3016;
        float _3043 = ((_3034 * _3034) * (_3039 + (-1.0))) + 1.0;
        float _3050 = exp2(log2(1.0 - (isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0)))) * 5.0);
        float _3057 = 1.0 - _3016;
        float _3067 = (0.5 / (((_2684 * ((_3030 * _3057) + _3016)) + 9.9999999392252902907785028219223e-09) + (((_2684 * _3057) + _3016) * _3030))) * _3030;
        float _5017 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3069 = (isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_3039 / ((_3043 * _3043) * 3.141590118408203125));
        float _3070 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
        _2986 = (((((_3050 * _2706) + _1060) * cbLight._m0[_3001].x) * _3069) * _3070) + _2876;
        _2988 = (((((_3050 * _2708) + _1062) * cbLight._m0[_3001].y) * _3069) * _3070) + _2878;
        _2990 = (((((_3050 * _2709) + _1063) * cbLight._m0[_3001].z) * _3069) * _3070) + _2880;
    }
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    float _3146;
    if (_2406.y == 0u)
    {
        uvec4 _3091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3092 = _3091.x;
        uint _3103 = uint((float(_3091.y) * floor(float(uint(cbSceneParam._m0[85u].y * _999) / _3092))) + floor(float(uint(cbSceneParam._m0[85u].x * _998) / _3092)));
        float _3113 = (log2(_2184 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3114 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
        uint _3117 = uint(isnan(14.0) ? _3114 : (isnan(_3114) ? 14.0 : min(_3114, 14.0)));
        uvec4 _3122 = texelFetch(g_lightClusterGridBuffer, int(((_3117 << 2u) + (_3103 << 6u)) >> 2u));
        uint _3123 = _3122.x;
        uint _3124 = _3091.z;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((((1u << ((_3124 >> 4u) & 15u)) + 4294967295u) & _3123) == 0u) || ((_3124 & 240u) == 0u))
        {
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
        }
        else
        {
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            uint _3362 = 0u;
            uint _3371;
            bool _3372;
            for (;;)
            {
                _3371 = texelFetch(g_lightClassification, int((((_3117 << 5u) + (_3103 << 9u)) + (_3362 << 2u)) >> 2u)).x;
                _3372 = _3371 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3372)
                {
                    frontier_phi_71_pred = _3361;
                    frontier_phi_71_pred_1 = _3360;
                    frontier_phi_71_pred_2 = _3359;
                    frontier_phi_71_pred_3 = _3358;
                    frontier_phi_71_pred_4 = _3357;
                    frontier_phi_71_pred_5 = _3356;
                }
                else
                {
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    float _3505;
                    float _3506;
                    uint _3507;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3360;
                    _3506 = _3361;
                    _3507 = _3371;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    float _3432;
                    float _3433;
                    for (;;)
                    {
                        uint _3511 = uint(findLSB(_3507)) + (_3362 << 5u);
                        uint _3508 = (_3507 + 4294967295u) & _3507;
                        uint _3513 = _3511 * 48u;
                        vec4 _3527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3533 = (_3511 * 48u) + 4u;
                        vec4 _3546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 3u)).x));
                        uint _3552 = (_3511 * 48u) + 8u;
                        vec3 _3563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3552)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3552 + 2u)).x));
                        float _3567 = _3527.x - _2182;
                        float _3568 = _3527.y - _2183;
                        float _3569 = _3527.z - _2184;
                        float _3570 = dot(vec3(_3567, _3568, _3569), vec3(_3567, _3568, _3569));
                        float _3573 = inversesqrt(_3570);
                        float _3574 = _3573 * _3567;
                        float _3575 = _3573 * _3568;
                        float _3576 = _3573 * _3569;
                        float _3577 = dot(vec3(_1017, _1020, _1023), vec3(_3574, _3575, _3576));
                        float _3582 = 1.0 - (_3570 * _3527.w);
                        float _5043 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3583 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                        float _3584 = sqrt(_3570) * _3546.w;
                        float _3587 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3577) + _3588;
                        float _3594 = _3584 * _3584;
                        float _3598 = ((isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0))) * _3583) / ((_3594 * 0.699999988079071044921875) + 1.0);
                        float _3602 = (-0.0) - _2182;
                        float _3603 = (-0.0) - _2183;
                        float _3604 = (-0.0) - _2184;
                        float _3608 = inversesqrt(dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604)));
                        float _3609 = _3608 * _3602;
                        float _3610 = _3608 * _3603;
                        float _3611 = _3608 * _3604;
                        float _3618 = exp2(log2(1.0 / ((_3594 * 3.5) + 5.0)) * 0.25);
                        float _3619 = 1.0 - _1092;
                        float _3626 = sqrt(1.0 - ((1.0 - (_3619 * _3619)) * (1.0 - (_3618 * _3618))));
                        float _3627 = _3626 * _3626;
                        float _3628 = _3627 * _3627;
                        float _3629 = _3609 + _3574;
                        float _3630 = _3610 + _3575;
                        float _3631 = _3611 + _3576;
                        float _3635 = inversesqrt(dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631)));
                        float _3639 = dot(vec3(_1017, _1020, _1023), vec3(_3609, _3610, _3611));
                        float _5059 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                        float _3642 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
                        float _3643 = dot(vec3(_1017, _1020, _1023), vec3(_3635 * _3629, _3635 * _3630, _3635 * _3631));
                        float _5070 = isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0));
                        float _3646 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
                        float _3650 = ((_3646 * _3646) * (_3628 + (-1.0))) + 1.0;
                        float _3651 = _3587 * _3627;
                        float _3652 = _3651 * _3651;
                        float _3655 = ((1.0 - _3652) * _3577) + _3652;
                        float _5081 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                        float _3656 = isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0));
                        float _3657 = 1.0 - _3627;
                        float _3667 = (0.5 / (((_3656 * ((_3642 * _3657) + _3627)) + 9.9999999392252902907785028219223e-09) + (((_3656 * _3657) + _3627) * _3642))) * _3656;
                        float _5092 = isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0));
                        float _3678 = (((_3628 * 3.1415927410125732421875) * (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0)))) / ((_3650 * _3650) * ((_3594 * 2.1991131305694580078125) + 3.141590118408203125))) * _3583;
                        _3431 = (_3598 * _3546.x) + _3504;
                        _3432 = (_3598 * _3546.y) + _3505;
                        _3433 = (_3598 * _3546.z) + _3506;
                        _3428 = (_3678 * _3563.x) + _3501;
                        _3429 = (_3678 * _3563.y) + _3502;
                        _3430 = (_3678 * _3563.z) + _3503;
                        if (_3508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3432;
                            _3506 = _3433;
                            _3507 = _3508;
                        }
                    }
                    frontier_phi_71_pred = _3433;
                    frontier_phi_71_pred_1 = _3432;
                    frontier_phi_71_pred_2 = _3431;
                    frontier_phi_71_pred_3 = _3430;
                    frontier_phi_71_pred_4 = _3429;
                    frontier_phi_71_pred_5 = _3428;
                }
                _3214 = frontier_phi_71_pred;
                _3212 = frontier_phi_71_pred_1;
                _3210 = frontier_phi_71_pred_2;
                _3208 = frontier_phi_71_pred_3;
                _3206 = frontier_phi_71_pred_4;
                _3204 = frontier_phi_71_pred_5;
                uint _3363 = _3362 + 1u;
                if (_3363 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3356 = _3204;
                    _3357 = _3206;
                    _3358 = _3208;
                    _3359 = _3210;
                    _3360 = _3212;
                    _3361 = _3214;
                    _3362 = _3363;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
        }
        uvec4 _3217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3218 = _3217.z;
        uint _3220 = (_3218 >> 8u) & 15u;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        float _3334;
        if (((4294967295u << _3220) & _3123) == 0u)
        {
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
            _3330 = _3209;
            _3332 = _3211;
            _3334 = _3213;
        }
        else
        {
            float _3349 = inversesqrt(dot(vec3(_2182, _2183, _2184), vec3(_2182, _2183, _2184)));
            float _3350 = _3349 * _2182;
            float _3351 = _3349 * _2183;
            float _3352 = _3349 * _2184;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3220 < ((_3218 >> 12u) & 15u))
            {
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3335;
                float _3484 = _3203;
                float _3485 = _3205;
                float _3486 = _3207;
                float _3487 = _3209;
                float _3488 = _3211;
                float _3489 = _3213;
                uint _3490 = _3220;
                uint _3499;
                bool _3500;
                for (;;)
                {
                    _3499 = texelFetch(g_lightClassification, int((((_3117 << 5u) + (_3103 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                    _3500 = _3499 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3500)
                    {
                        frontier_phi_82_pred = _3489;
                        frontier_phi_82_pred_1 = _3488;
                        frontier_phi_82_pred_2 = _3487;
                        frontier_phi_82_pred_3 = _3486;
                        frontier_phi_82_pred_4 = _3485;
                        frontier_phi_82_pred_5 = _3484;
                    }
                    else
                    {
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3696;
                        float _3697;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3989;
                        float _3990;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        float _3709 = _3488;
                        float _3710 = _3489;
                        uint _3711 = _3499;
                        uint _3712;
                        vec4 _3737;
                        float _3738;
                        vec4 _3753;
                        vec3 _3765;
                        vec4 _3780;
                        vec4 _3795;
                        float _3841;
                        bool _3842;
                        for (;;)
                        {
                            uint _3722 = ((_3490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3711));
                            _3712 = (_3711 + 4294967295u) & _3711;
                            uint _3724 = _3722 * 40u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            _3738 = _3737.w;
                            uint _3740 = (_3722 * 40u) + 4u;
                            _3753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3740 + 3u)).x));
                            uint _3755 = (_3722 * 40u) + 8u;
                            _3765 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x));
                            uint _3767 = (_3722 * 40u) + 16u;
                            _3780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3767 + 3u)).x));
                            uint _3782 = (_3722 * 40u) + 20u;
                            _3795 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3782)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3782 + 3u)).x));
                            uint _3797 = (_3722 * 40u) + 24u;
                            vec4 _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3816 = (_3722 * 40u) + 28u;
                            vec4 _3829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3816 + 3u)).x));
                            _3841 = fma(_2184, _3829.z, fma(_2183, _3829.y, _3829.x * _2182)) + _3829.w;
                            _3842 = !((fma(_2184, _3810.z, fma(_2183, _3810.y, _3810.x * _2182)) + _3810.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3842)
                            {
                                float _3869 = _3737.x - _2182;
                                float _3870 = _3737.y - _2183;
                                float _3871 = _3737.z - _2184;
                                float _3872 = dot(vec3(_3869, _3870, _3871), vec3(_3869, _3870, _3871));
                                float _3875 = inversesqrt(_3872);
                                float _3876 = _3875 * _3869;
                                float _3877 = _3875 * _3870;
                                float _3878 = _3875 * _3871;
                                float _3882 = 1.0 - (_3872 / (_3738 * _3738));
                                float _5103 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3883 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                                float _3887 = sqrt(_3872) * _3753.w;
                                float _3889 = 1.39999997615814208984375 / (_3887 + 1.39999997615814208984375);
                                float _3890 = _3889 * _3889;
                                float _3893 = ((1.0 - _3890) * dot(vec3(_3876, _3877, _3878), vec3(_1017, _1020, _1023))) + _3890;
                                float _3896 = _3887 * _3887;
                                float _3900 = (fma(_2184, _3780.z, fma(_2183, _3780.y, _3780.x * _2182)) + _3780.w) / _3841;
                                float _3901 = (fma(_2184, _3795.z, fma(_2183, _3795.y, _3795.x * _2182)) + _3795.w) / _3841;
                                float _3905 = 1.0 - dot(vec2(_3900, _3901), vec2(_3900, _3901));
                                float _5119 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5119 : (isnan(_5119) ? 1.0 : min(_5119, 1.0));
                                float _3907 = _3906 * (((isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0))) * _3883) / ((_3896 * 0.699999988079071044921875) + 1.0));
                                float _3919 = exp2(log2(1.0 / ((_3896 * 3.5) + 5.0)) * 0.25);
                                float _3920 = 1.0 - _1092;
                                float _3927 = sqrt(1.0 - ((1.0 - (_3920 * _3920)) * (1.0 - (_3919 * _3919))));
                                float _3928 = _3927 * _3927;
                                float _3929 = _3928 * _3928;
                                float _3930 = _3876 - _3350;
                                float _3931 = _3877 - _3351;
                                float _3932 = _3878 - _3352;
                                float _3936 = inversesqrt(dot(vec3(_3930, _3931, _3932), vec3(_3930, _3931, _3932)));
                                float _3940 = dot(vec3(_1017, _1020, _1023), vec3((-0.0) - _3350, (-0.0) - _3351, (-0.0) - _3352));
                                float _5130 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3943 = isnan(1.0) ? _5130 : (isnan(_5130) ? 1.0 : min(_5130, 1.0));
                                float _3944 = dot(vec3(_1017, _1020, _1023), vec3(_3936 * _3930, _3936 * _3931, _3936 * _3932));
                                float _5141 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3947 = isnan(1.0) ? _5141 : (isnan(_5141) ? 1.0 : min(_5141, 1.0));
                                float _3951 = ((_3947 * _3947) * (_3929 + (-1.0))) + 1.0;
                                float _3952 = _3889 * _3928;
                                float _3953 = _3952 * _3952;
                                float _3959 = ((1.0 - _3953) * dot(vec3(_1017, _1020, _1023), vec3(_3876, _3877, _3878))) + _3953;
                                float _5152 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                                float _3960 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3961 = 1.0 - _3928;
                                float _3971 = (0.5 / (((_3960 * ((_3943 * _3961) + _3928)) + 9.9999999392252902907785028219223e-09) + (((_3960 * _3961) + _3928) * _3943))) * _3960;
                                float _5163 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                                float _3981 = (_3906 * _3883) * (((_3929 * 3.1415927410125732421875) * (isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0)))) / ((_3951 * _3951) * ((_3896 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3907 * _3753.z;
                                frontier_phi_88_pred_1 = _3907 * _3753.y;
                                frontier_phi_88_pred_2 = _3907 * _3753.x;
                                frontier_phi_88_pred_3 = _3981 * _3765.z;
                                frontier_phi_88_pred_4 = _3981 * _3765.y;
                                frontier_phi_88_pred_5 = _3981 * _3765.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3990 = frontier_phi_88_pred;
                            _3989 = frontier_phi_88_pred_1;
                            _3988 = frontier_phi_88_pred_2;
                            _3987 = frontier_phi_88_pred_3;
                            _3986 = frontier_phi_88_pred_4;
                            _3985 = frontier_phi_88_pred_5;
                            _3695 = _3988 + _3708;
                            _3696 = _3989 + _3709;
                            _3697 = _3990 + _3710;
                            _3692 = _3985 + _3705;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            if (_3712 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3696;
                                _3710 = _3697;
                                _3711 = _3712;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3697;
                        frontier_phi_82_pred_1 = _3696;
                        frontier_phi_82_pred_2 = _3695;
                        frontier_phi_82_pred_3 = _3694;
                        frontier_phi_82_pred_4 = _3693;
                        frontier_phi_82_pred_5 = _3692;
                    }
                    _3335 = frontier_phi_82_pred;
                    _3333 = frontier_phi_82_pred_1;
                    _3331 = frontier_phi_82_pred_2;
                    _3329 = frontier_phi_82_pred_3;
                    _3327 = frontier_phi_82_pred_4;
                    _3325 = frontier_phi_82_pred_5;
                    uint _3491 = _3490 + 1u;
                    if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3484 = _3325;
                        _3485 = _3327;
                        _3486 = _3329;
                        _3487 = _3331;
                        _3488 = _3333;
                        _3489 = _3335;
                        _3490 = _3491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3331;
                frontier_phi_63_64_ladder_1 = _3335;
                frontier_phi_63_64_ladder_2 = _3333;
                frontier_phi_63_64_ladder_3 = _3329;
                frontier_phi_63_64_ladder_4 = _3327;
                frontier_phi_63_64_ladder_5 = _3325;
            }
            else
            {
                frontier_phi_63_64_ladder = _3209;
                frontier_phi_63_64_ladder_1 = _3213;
                frontier_phi_63_64_ladder_2 = _3211;
                frontier_phi_63_64_ladder_3 = _3207;
                frontier_phi_63_64_ladder_4 = _3205;
                frontier_phi_63_64_ladder_5 = _3203;
            }
            _3324 = frontier_phi_63_64_ladder_5;
            _3326 = frontier_phi_63_64_ladder_4;
            _3328 = frontier_phi_63_64_ladder_3;
            _3330 = frontier_phi_63_64_ladder;
            _3332 = frontier_phi_63_64_ladder_2;
            _3334 = frontier_phi_63_64_ladder_1;
        }
        float _3339 = isnan(1.0) ? _1076 : (isnan(_1076) ? 1.0 : min(_1076, 1.0));
        _3136 = (_3339 * _3330) + _2648;
        _3138 = (_3339 * _3332) + _2650;
        _3140 = (_3339 * _3334) + _2652;
        _3142 = ((_3324 * _1060) * _3339) + _2986;
        _3144 = ((_3326 * _1062) * _3339) + _2988;
        _3146 = ((_3328 * _1063) * _3339) + _2990;
    }
    else
    {
        _3136 = _2648;
        _3138 = _2650;
        _3140 = _2652;
        _3142 = _2986;
        _3144 = _2988;
        _3146 = _2990;
    }
    float _5179 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _5190 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _5201 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _3163 = ((isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0))) * (_3136 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1076))) + ((_3142 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _3164 = ((isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0))) * (_3138 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1076))) + ((_3144 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    float _3165 = ((isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3140 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1076))) + ((_3146 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1914)) * cbPerFrame._m0[3u].x);
    uint _3166 = _267 + 6u;
    float _3174 = _998 / cbSceneParam._m0[86u].x;
    float _3175 = _999 / cbSceneParam._m0[86u].y;
    vec4 _3189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, (log2((isnan(cbSceneParam._m0[77u].w) ? _921 : (isnan(_921) ? cbSceneParam._m0[77u].w : min(_921, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3191 = _3189.x;
    float _3192 = _3189.y;
    float _3193 = _3189.z;
    float _3194 = _3189.w;
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    if (_921 > cbSceneParam._m0[78u].w)
    {
        float _3228 = isnan(_921) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _921 : min(cbSceneParam._m0[80u].w, _921));
        float _3229 = _3228 / _921;
        float _3240 = _3229 * _971;
        float _3241 = _972 * _3229;
        float _3242 = (-0.0) - _3241;
        float _3244 = _3229 * _973;
        float _3246 = (cbSceneParam._m0[77u].w * _3242) / _3228;
        float _3247 = _3246 + cbSceneParam._m0[79u].w;
        float _3248 = cbSceneParam._m0[79u].w - _3241;
        float _3254 = sqrt(((_3240 * _3240) + (_3241 * _3241)) + (_3244 * _3244));
        float _3257 = (1.0 - (cbSceneParam._m0[77u].w / _3228)) * _3254;
        float _3262 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3264 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3441;
        if (abs((_3242 - _3246) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3441 = ((((_3247 > 0.0) ? exp2(_3262 * _3247) : (2.0 - exp2(_3264 * _3247))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3257;
        }
        else
        {
            float _3385 = 1.0 / cbSceneParam._m0[80u].x;
            float _3386 = isnan(_3248) ? _3247 : (isnan(_3247) ? _3248 : max(_3247, _3248));
            float _3387 = isnan(_3248) ? _3247 : (isnan(_3247) ? _3248 : min(_3247, _3248));
            float _3396 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : min(_3386, 0.0));
            float _3397 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : min(_3387, 0.0));
            _3441 = ((abs(_3254 / _3242) * cbSceneParam._m0[80u].y) * ((((_3396 - _3397) * 2.0) - ((exp2(_3262 * (isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0)))) - exp2(_3262 * (isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0))))) * _3385)) - ((exp2(_3264 * _3396) - exp2(_3264 * _3397)) * _3385))) + (_3257 * cbSceneParam._m0[80u].z);
        }
        vec4 _3443 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, 1.0), 0.0);
        float _3452 = exp2((_3441 * (-1.44269502162933349609375)) * (1.0 - _3443.w));
        float _3453 = log2(_3452);
        float _3469 = log2(_3194);
        _3266 = (exp2(_3469 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3453 * cbSceneParam._m0[78u].x)) * _3443.x) / cbSceneParam._m0[78u].x)) + _3191;
        _3268 = (exp2(_3469 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3453 * cbSceneParam._m0[78u].y)) * _3443.y) / cbSceneParam._m0[78u].y)) + _3192;
        _3270 = (exp2(_3469 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3453 * cbSceneParam._m0[78u].z)) * _3443.z) / cbSceneParam._m0[78u].z)) + _3193;
        _3272 = _3452 * _3194;
    }
    else
    {
        _3266 = _3191;
        _3268 = _3192;
        _3270 = _3193;
        _3272 = _3194;
    }
    bool _3479;
    vec4 _3282;
    vec4 _3304;
    float _3306;
    float _3310;
    float _3311;
    float _3312;
    float _3313;
    bool _3323;
    for (;;)
    {
        _3282 = cbMatDynParam._m0[0u];
        float _3284 = roundEven(_3282.y);
        bool _3285 = _3284 == 3.0;
        float _3286 = log2(_3272);
        float _3293 = exp2(_3286 * cbSceneParam._m0[78u].x) * _3163;
        float _3294 = exp2(_3286 * cbSceneParam._m0[78u].y) * _3164;
        float _3295 = exp2(_3286 * cbSceneParam._m0[78u].z) * _3165;
        float _3302 = _987 + (-0.5);
        _3304 = cbMtdParam._m0[1u];
        _3306 = _3304.y * _3302;
        float _3309 = (_3284 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3310 = _3309 * (_3285 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3266)));
        _3311 = _3309 * (_3285 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3268)));
        _3312 = _3309 * (_3285 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3270)));
        _3313 = _3302 * 0.999000012874603271484375;
        _3323 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3323)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3313) < 0.5)
            {
                _3479 = true;
                break;
            }
        }
        uint _3420 = _1036 + uint(_3282.w);
        if ((cbInstanceData._m0[_3420].w < 1.0) && ((cbInstanceData._m0[_3420].w + _3313) < 0.5))
        {
            _3479 = true;
            break;
        }
        if ((_3306 + 1.0) < _3304.x)
        {
            _3479 = true;
            break;
        }
        _3479 = false;
        break;
    }
    float _3683;
    if (_3479)
    {
        discard_state = true;
        _3683 = 0.0;
    }
    else
    {
        _3683 = cbInstanceData._m0[_3166].w;
    }
    SV_Target.x = _3310;
    SV_Target.y = _3311;
    SV_Target.z = _3312;
    SV_Target.w = _3683;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3166].w;
    discard_exit();
}


