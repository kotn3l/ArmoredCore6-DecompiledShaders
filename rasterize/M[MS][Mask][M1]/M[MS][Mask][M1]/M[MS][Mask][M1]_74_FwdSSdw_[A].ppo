#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1500;
float _3904;
float _3905;
float _3906;
float _3907;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _233 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _234 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _235 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _241 = inversesqrt(dot(vec3(_233, _234, _235), vec3(_233, _234, _235)));
    float _242 = _241 * _233;
    float _243 = _241 * _234;
    float _244 = _241 * _235;
    float _248 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = _248 * NORMAL.x;
    float _250 = _248 * NORMAL.y;
    float _251 = _248 * NORMAL.z;
    float _255 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _256 = _255 * TANGENT.x;
    float _257 = _255 * TANGENT.y;
    float _258 = _255 * TANGENT.z;
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3916 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _3927 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3938 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    uint _282 = uint(roundEven(NORMAL.w)) * 13u;
    uint _287 = _282 + 1u;
    uint _291 = _282 + 2u;
    float _300 = sqrt(((cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x)) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x));
    float _301 = _300 * TEXCOORD.z;
    float _302 = _300 * TEXCOORD.w;
    vec4 _315 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _301) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _302) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _369 = _364.x * cbMtdParam._m0[11u].x;
    float _370 = _364.y * cbMtdParam._m0[11u].y;
    float _371 = _364.z * cbMtdParam._m0[11u].z;
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _301) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _302) + cbTextureTilingScale._m0[5u].w));
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _409.x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3949 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _480 = (_473 * ((_390.x * cbMtdParam._m0[12u].x) - _369)) + _369;
    float _481 = (_473 * ((_390.y * cbMtdParam._m0[12u].y) - _370)) + _370;
    float _482 = (_473 * ((_390.z * cbMtdParam._m0[12u].z) - _371)) + _371;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _301) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _302) + cbTextureTilingScale._m0[3u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _521 = _519.x;
    float _531 = dot(vec4(_521, _519.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _545 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _409.y) * 2.0) - ((((_521 - _531) * cbMtdParam._m0[23u].w) + _531) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3960 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _546 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _556 = (_338.x * cbMtdParam._m0[9u].x) * ((_546 * ((_499.x * cbMtdParam._m0[13u].x) - _480)) + _480);
    float _557 = (_338.y * cbMtdParam._m0[9u].y) * ((_546 * ((_499.y * cbMtdParam._m0[13u].y) - _481)) + _481);
    float _558 = (_338.z * cbMtdParam._m0[9u].z) * ((_546 * ((_499.z * cbMtdParam._m0[13u].z) - _482)) + _482);
    float _562 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _315.x) * _556;
    float _565 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _315.y) * _557;
    float _568 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _315.z) * _558;
    float _576 = (((_556 - _562) * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) + _562) * 4.55000019073486328125;
    float _578 = (((_557 - _565) * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) + _565) * 4.55000019073486328125;
    float _580 = (((_558 - _568) * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) + _568) * 4.55000019073486328125;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _301) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _302) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _301) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _302) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _473) + _641;
    float _651 = ((_622.y - _642) * _473) + _642;
    float _652 = ((_622.z - _643) * _473) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _301) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _302) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _546) + _652;
    float _680 = ((((_664.x - _650) * _546) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _546) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _3971 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _717 = (_680 + ((((_597.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_705.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _718 = (_681 + ((((_597.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_705.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _721 = fma(_687, _249, fma(_718, _256, _717 * _242));
    float _724 = fma(_687, _250, fma(_718, _257, _717 * _243));
    float _727 = fma(_687, _251, fma(_718, _258, _717 * _244));
    float _731 = inversesqrt(dot(vec3(_721, _724, _727), vec3(_721, _724, _727)));
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _301) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _302) + cbTextureTilingScale._m0[11u].w));
    float _760 = _758.x;
    float _761 = 1.0 - _760;
    float _770 = (cbMtdParam._m0[19u].x + dot(vec4(_731 * _721, _731 * _724, _731 * _727, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_760 - _761) * cbMtdParam._m0[24u].z) + _761) * cbMtdParam._m0[21u].z);
    float _3982 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _771 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _778 = (_771 * (cbMtdParam._m0[17u].x - _576)) + _576;
    float _779 = (_771 * (cbMtdParam._m0[17u].y - _578)) + _578;
    float _780 = (_771 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _808 = _806.x;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _301) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _302) + cbTextureTilingScale._m0[9u].w)).x - _808) * _473) + _808;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _301) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _302) + cbTextureTilingScale._m0[21u].w)).x - _825) * _546) + _825;
    float _846 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _842) * cbMtdParam._m0[19u].z) + _842;
    float _848 = _846 - (_846 * _771);
    float _853 = (((_597.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _857 = ((_705.z - _853) * cbMtdParam._m0[19u].w) + _853;
    vec4 _870 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _301) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _302) + cbTextureTilingScale._m0[15u].w));
    float _877 = (_870.x * 2.0) + (-1.0);
    float _878 = (_870.y * 2.0) + (-1.0);
    float _879 = dot(vec2(_877, _878), vec2(_877, _878));
    float _3993 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _887 = ((_870.z - _857) * _771) + _857;
    float _897 = ((sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0)))) - _687) * _771) + _687;
    float _900 = (((_877 - _717) * _771) + _717) + (cbMtdParam._m0[21u].x * _717);
    float _901 = (((_878 - _718) * _771) + _718) + (cbMtdParam._m0[21u].x * _718);
    float _905 = cbMtdParam._m0[22u].x + _705.w;
    float _908 = fma(_897, _249, fma(_901, _256, _900 * _242));
    float _911 = fma(_897, _250, fma(_901, _257, _900 * _243));
    float _914 = fma(_897, _251, fma(_901, _258, _900 * _244));
    float _918 = inversesqrt(dot(vec3(_908, _911, _914), vec3(_908, _911, _914)));
    float _919 = _918 * _908;
    float _920 = _918 * _911;
    float _921 = _918 * _914;
    float _4004 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _922 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4026 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4037 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4048 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4059 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _927 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
    float _941 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    vec4 _1006 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1008 = _1006.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1180 = sqrt(((_992 * _992) + (_993 * _993)) + (_994 * _994));
        float _1186 = (cbMatDynParam._m0[5u].x * _1180) + cbMatDynParam._m0[5u].y;
        float _4070 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1191 = (cbMatDynParam._m0[5u].z * _1180) + cbMatDynParam._m0[5u].w;
        float _4081 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) - _1187)) + _1187) < ((_1008 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1019 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1020 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1038 = fma(_921, cbSceneParam._m0[5u].z, fma(_920, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _919));
    float _1041 = fma(_921, cbSceneParam._m0[6u].z, fma(_920, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _919));
    float _1044 = fma(_921, cbSceneParam._m0[7u].z, fma(_920, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _919));
    uint _1057 = _282 + 9u;
    uint _1058 = _1057 + uint(cbMatDynParam._m0[0u].w);
    float _1064 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1058].x;
    float _1065 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1058].y;
    float _1066 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_1058].z;
    float _4092 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _1070 = 1.0 - _927;
    float _1071 = _1067 * _1070;
    float _1072 = _1068 * _1070;
    float _1073 = _1069 * _1070;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _927;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _927;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _927;
    float _1081 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    vec4 _1093 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1019, cbSceneParam._m0[86u].y * _1020));
    float _1097 = ((isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * TEXCOORD_5.w) * _1093.x;
    float _1098 = dot(vec3(_919, _920, _921), vec3(_999, _1000, _1001));
    float _1101 = _1098 * 2.0;
    float _1105 = (_1101 * _919) - _999;
    float _1106 = (_1101 * _920) - _1000;
    float _1107 = (_1101 * _921) - _1001;
    float _1111 = abs(dot(vec3(_999, _1000, _1001), vec3(_919, _920, _921)));
    float _4125 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1113 = sqrt(_922);
    float _1126 = exp2((_1113 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1113 * 3.0));
    float _1132 = (1.0 - _1126) * ((_1113 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1133 = _1126 * _1113;
    float _1161 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1165 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1169 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1499;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1224 = fma(_1169, cbModelParam._m0[26u].z, fma(_1165, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1161));
        float _1228 = fma(_1169, cbModelParam._m0[27u].z, fma(_1165, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1161));
        float _1232 = fma(_1169, cbModelParam._m0[28u].z, fma(_1165, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1161));
        float _1257 = _1161 + _919;
        float _1258 = _1165 + _920;
        float _1259 = _1169 + _921;
        float _1269 = fma(_1259, cbModelParam._m0[26u].z, fma(_1258, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1257)) - _1224;
        float _1270 = fma(_1259, cbModelParam._m0[27u].z, fma(_1258, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1257)) - _1228;
        float _1271 = fma(_1259, cbModelParam._m0[28u].z, fma(_1258, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1257)) - _1232;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1224 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1228 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[34u].z) + ((((((_1232 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1327 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1293.x + (-0.5));
        float _1329 = _1327 * (_1293.y + (-0.5));
        float _1330 = _1327 * (_1293.z + (-0.5));
        float _1337 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1300.x + (-0.5));
        float _1339 = _1337 * (_1300.y + (-0.5));
        float _1340 = _1337 * (_1300.z + (-0.5));
        float _1347 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1307.x + (-0.5));
        float _1349 = _1347 * (_1307.y + (-0.5));
        float _1350 = _1347 * (_1307.z + (-0.5));
        float _1357 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1314.x + (-0.5));
        float _1359 = _1357 * (_1314.y + (-0.5));
        float _1360 = _1357 * (_1314.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1381 = (dot(vec3(_919, _920, _921), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1391 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4173 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1393 + 1.0))) + _1398) * _1361;
        float _1408 = _1329 * 0.5;
        float _1409 = _1339 * 0.5;
        float _1410 = _1349 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_919, _920, _921), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4206 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1435 + 1.0))) + _1440) * _1362;
        float _1450 = _1330 * 0.5;
        float _1451 = _1340 * 0.5;
        float _1452 = _1350 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_919, _920, _921), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4239 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1477 + 1.0))) + _1482) * _1363;
        _1499 = _1330;
        _1501 = _1329;
        _1502 = _1328;
        _1503 = _1340;
        _1504 = _1339;
        _1505 = _1338;
        _1506 = _1350;
        _1507 = _1349;
        _1508 = _1348;
        _1509 = _1363;
        _1510 = _1362;
        _1511 = _1361;
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1500;
        _1501 = _1500;
        _1502 = _1500;
        _1503 = _1500;
        _1504 = _1500;
        _1505 = _1500;
        _1506 = _1500;
        _1507 = _1500;
        _1508 = _1500;
        _1509 = _1500;
        _1510 = _1500;
        _1511 = _1500;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1541 = fma(_1169, cbModelParam._m0[30u].z, fma(_1165, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1161));
        float _1545 = fma(_1169, cbModelParam._m0[31u].z, fma(_1165, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1161));
        float _1549 = fma(_1169, cbModelParam._m0[32u].z, fma(_1165, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1161));
        float _1572 = _1161 + _919;
        float _1573 = _1165 + _920;
        float _1574 = _1169 + _921;
        float _1584 = fma(_1574, cbModelParam._m0[30u].z, fma(_1573, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1572)) - _1541;
        float _1585 = fma(_1574, cbModelParam._m0[31u].z, fma(_1573, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1572)) - _1545;
        float _1586 = fma(_1574, cbModelParam._m0[32u].z, fma(_1573, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1572)) - _1549;
        float _1590 = inversesqrt(dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586)));
        float _1603 = ((_1590 * _1584) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1541 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1604 = ((_1590 * _1585) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1545 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1590 * _1586) / cbModelParam._m0[35u].z) + ((((((_1549 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1607 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1614 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1603, _1604, _1605), 0.0);
        float _1640 = exp2((_1607.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1607.x + (-0.5));
        float _1642 = _1640 * (_1607.y + (-0.5));
        float _1643 = _1640 * (_1607.z + (-0.5));
        float _1650 = exp2((_1614.w + (-0.5)) * 20.0) * 2.0;
        float _1651 = _1650 * (_1614.x + (-0.5));
        float _1652 = _1650 * (_1614.y + (-0.5));
        float _1653 = _1650 * (_1614.z + (-0.5));
        float _1660 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1621.x + (-0.5));
        float _1662 = _1660 * (_1621.y + (-0.5));
        float _1663 = _1660 * (_1621.z + (-0.5));
        float _1670 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1628.x + (-0.5));
        float _1672 = _1670 * (_1628.y + (-0.5));
        float _1673 = _1670 * (_1628.z + (-0.5));
        float _1674 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = _1641 * 0.5;
        float _1678 = _1651 * 0.5;
        float _1679 = _1661 * 0.5;
        float _1680 = dot(vec3(_1677, _1678, _1679), vec3(_1677, _1678, _1679));
        float _1685 = (_1680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1680);
        float _1693 = (dot(vec3(_919, _920, _921), vec3(_1685 * _1677, _1685 * _1678, _1685 * _1679)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1702 = sqrt(((_1678 * _1678) + (_1677 * _1677)) + (_1679 * _1679)) / (_1674 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1704 = _1703 * 2.0;
        float _1708 = (1.0 - _1703) / (_1703 + 1.0);
        float _4302 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1718 = ((((1.0 - _1709) * (_1704 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1704 + 1.0))) + _1709) * _1674;
        float _1719 = _1642 * 0.5;
        float _1720 = _1652 * 0.5;
        float _1721 = _1662 * 0.5;
        float _1722 = dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721));
        float _1727 = (_1722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1722);
        float _1735 = (dot(vec3(_919, _920, _921), vec3(_1727 * _1719, _1727 * _1720, _1727 * _1721)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1744 = sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1746 = _1745 * 2.0;
        float _1750 = (1.0 - _1745) / (_1745 + 1.0);
        float _4335 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1760 = ((((1.0 - _1751) * (_1746 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1746 + 1.0))) + _1751) * _1675;
        float _1761 = _1643 * 0.5;
        float _1762 = _1653 * 0.5;
        float _1763 = _1663 * 0.5;
        float _1764 = dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763));
        float _1769 = (_1764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1764);
        float _1777 = (dot(vec3(_919, _920, _921), vec3(_1769 * _1761, _1769 * _1762, _1769 * _1763)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1786 = sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1788 = _1787 * 2.0;
        float _1792 = (1.0 - _1787) / (_1787 + 1.0);
        float _4368 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1802 = ((((1.0 - _1793) * (_1788 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1788 + 1.0))) + _1793) * _1676;
        _1810 = _1643;
        _1811 = _1642;
        _1812 = _1641;
        _1813 = _1653;
        _1814 = _1652;
        _1815 = _1651;
        _1816 = _1663;
        _1817 = _1662;
        _1818 = _1661;
        _1819 = _1676;
        _1820 = _1675;
        _1821 = _1674;
        _1822 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)));
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)));
    }
    else
    {
        _1810 = _1500;
        _1811 = _1500;
        _1812 = _1500;
        _1813 = _1500;
        _1814 = _1500;
        _1815 = _1500;
        _1816 = _1500;
        _1817 = _1500;
        _1818 = _1500;
        _1819 = _1500;
        _1820 = _1500;
        _1821 = _1500;
        _1822 = 0.0;
        _1823 = 0.0;
        _1824 = 0.0;
    }
    float _1834 = (cbModelParam._m0[1u].x * (_1822 - _1512)) + _1512;
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1857 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1835, cbSceneParam._m0[89u].y, _1834 * cbSceneParam._m0[89u].x));
    float _1860 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1835, cbSceneParam._m0[90u].y, _1834 * cbSceneParam._m0[90u].x));
    float _1863 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1835, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1834));
    float _1878 = _1105 * 0.5;
    float _1879 = _1106 * 0.5;
    float _1880 = _1107 * 0.5;
    float _1881 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1884 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1887 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1810, _1813, _1816, _1819));
    float _1921;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1894 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1499, _1503, _1506, _1509));
        float _1898 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1902 = dot(vec4(_1878, _1879, _1880, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1909 = dot(vec4(cbModelParam._m0[39u]), vec4(_1878, _1879, _1880, 1.0));
        _1921 = dot(vec3(isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1909) ? 0.0 : (isnan(0.0) ? _1909 : max(0.0, _1909))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1921 = 1.0;
    }
    float _1932;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1923 = dot(vec4(cbModelParam._m0[40u]), vec4(_1878, _1879, _1880, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0)), isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1936 = (_1932 * cbModelParam._m0[1u].x) + (_1921 * (1.0 - cbModelParam._m0[1u].x));
    float _1946 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _922);
    float _1947 = isnan(_1946) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1946 : min(cbModelParam._m0[25u].z, _1946));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1169, cbModelParam._m0[13u].z, fma(_1165, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1169, cbModelParam._m0[14u].z, fma(_1165, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1169, cbModelParam._m0[15u].z, fma(_1165, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1107, cbModelParam._m0[13u].z, fma(_1106, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1105));
        float _2009 = fma(_1107, cbModelParam._m0[14u].z, fma(_1106, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1105));
        float _2012 = fma(_1107, cbModelParam._m0[15u].z, fma(_1106, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1105));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2264;
        if (_2009 > 0.0)
        {
            _2264 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2264 = frontier_phi_26_22_ladder;
        }
        float _2521;
        if (_2012 > 0.0)
        {
            _2521 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2521 = frontier_phi_38_33_ladder;
        }
        float _2523 = isnan(_2264) ? _2040 : (isnan(_2040) ? _2264 : min(_2040, _2264));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2006) + _1995;
        float _2529 = (_2524 * _2009) + _1999;
        float _2530 = (_2524 * _2012) + _2003;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2658 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1947);
            frontier_phi_16_38_ladder = _2658.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2658.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2658.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1105, _1106, _1107), _1947);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _922);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2127;
    float _2129;
    float _2131;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2091 = fma(_1169, cbModelParam._m0[21u].z, fma(_1165, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161)) + cbModelParam._m0[21u].w;
        float _2095 = fma(_1169, cbModelParam._m0[22u].z, fma(_1165, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161)) + cbModelParam._m0[22u].w;
        float _2099 = fma(_1169, cbModelParam._m0[23u].z, fma(_1165, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161)) + cbModelParam._m0[23u].w;
        float _2102 = fma(_1107, cbModelParam._m0[21u].z, fma(_1106, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1105));
        float _2105 = fma(_1107, cbModelParam._m0[22u].z, fma(_1106, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1105));
        float _2108 = fma(_1107, cbModelParam._m0[23u].z, fma(_1106, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1105));
        float _2269;
        if (_2102 > 0.0)
        {
            _2269 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2269 = frontier_phi_28_24_ladder;
        }
        float _2548;
        if (_2105 > 0.0)
        {
            _2548 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2548 = frontier_phi_40_35_ladder;
        }
        float _2761;
        if (_2108 > 0.0)
        {
            _2761 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2761 = frontier_phi_49_46_ladder;
        }
        float _2763 = isnan(_2548) ? _2269 : (isnan(_2269) ? _2548 : min(_2269, _2548));
        float _2764 = isnan(_2761) ? _2763 : (isnan(_2763) ? _2761 : min(_2763, _2761));
        float _2768 = (_2764 * _2102) + _2091;
        float _2769 = (_2764 * _2105) + _2095;
        float _2770 = (_2764 * _2108) + _2099;
        float _2771 = _2764 * 9.9999997473787516355514526367188e-05;
        float _2772 = (-1.0) - _2771;
        float _2774 = _2771 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2770 > _2774) || ((_2770 < _2772) || ((_2769 > _2774) || ((_2769 < _2772) || ((_2768 < _2772) || (_2768 > _2774))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2770, cbModelParam._m0[17u].z, fma(_2769, cbModelParam._m0[17u].y, _2768 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2770, cbModelParam._m0[18u].z, fma(_2769, cbModelParam._m0[18u].y, _2768 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2770, cbModelParam._m0[19u].z, fma(_2769, cbModelParam._m0[19u].y, _2768 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_49_ladder = _2969.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2969.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2969.x * cbModelParam._m0[1u].z;
        }
        _2127 = frontier_phi_25_49_ladder_2;
        _2129 = frontier_phi_25_49_ladder_1;
        _2131 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2111 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1105, _1106, _1107), _2037);
        _2127 = _2111.x * cbModelParam._m0[1u].z;
        _2129 = _2111.y * cbModelParam._m0[1u].z;
        _2131 = _2111.z * cbModelParam._m0[1u].z;
    }
    float _2144 = (((_1132 * _1081) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2127 - _2028)) + _2028);
    float _2146 = (((_1132 * _1083) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2129 - _2030)) + _2030);
    float _2148 = (((_1132 * _1084) + _1133) * _1097) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2151 = fma(_2148, cbSceneParam._m0[89u].z, fma(_2146, cbSceneParam._m0[89u].y, _2144 * cbSceneParam._m0[89u].x));
    float _2154 = fma(_2148, cbSceneParam._m0[90u].z, fma(_2146, cbSceneParam._m0[90u].y, _2144 * cbSceneParam._m0[90u].x));
    float _2157 = fma(_2148, cbSceneParam._m0[91u].z, fma(_2146, cbSceneParam._m0[91u].y, _2144 * cbSceneParam._m0[91u].x));
    vec4 _2165 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1019, _1020));
    float _2167 = _2165.w;
    float _2179 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2167);
    float _2180 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2167);
    float _2181 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2167);
    uvec4 _2185 = floatBitsToUint(cbInstanceData._m0[_282 + 5u]);
    uint _2187 = _2185.x * 14u;
    uint _2188 = _2187 + 13u;
    float _2195 = _1097 + (-1.0);
    float _2200 = (cbLight._m0[_2188].x * _2195) + 1.0;
    float _2201 = (cbLight._m0[_2188].y * _2195) + 1.0;
    float _2202 = (cbLight._m0[_2188].z * _2195) + 1.0;
    float _2203 = (cbLight._m0[_2188].w * _2195) + 1.0;
    uint _2204 = _2187 + 5u;
    float _2210 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
    uint _2214 = _2187 + 4u;
    float _2223 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2227 = _2187 | 1u;
    float _2238 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_919, _920, _921));
    float _2241 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_919, _920, _921));
    float _4504 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _4515 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
    float _2246 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2248 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * 0.3183098733425140380859375;
    float _2255 = ((cbLight._m0[_2204].x * _2210) * _2248) + (((cbLight._m0[_2214].x * _2179) * _2223) * _2246);
    float _2256 = ((_2210 * cbLight._m0[_2204].y) * _2248) + (((cbLight._m0[_2214].y * _2180) * _2223) * _2246);
    float _2257 = ((_2210 * cbLight._m0[_2204].z) * _2248) + (((cbLight._m0[_2214].z * _2181) * _2223) * _2246);
    uvec4 _2261 = floatBitsToUint(cbLight._m0[_2187 + 12u]);
    bool _2263 = _2261.x == 0u;
    float _2274;
    float _2276;
    float _2278;
    if (_2263)
    {
        _2274 = _2255;
        _2276 = _2256;
        _2278 = _2257;
    }
    else
    {
        uint _2282 = _2187 + 6u;
        float _2298 = (dot(vec3(cbLight._m0[_2187 + 2u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2299 = _2298 * _2298;
        float _4526 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2300 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2301 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2274 = (((cbLight._m0[_2282].x * 0.3183098733425140380859375) * _2300) * _2301) + _2255;
        _2276 = (((cbLight._m0[_2282].y * 0.3183098733425140380859375) * _2300) * _2301) + _2256;
        _2278 = (((cbLight._m0[_2282].z * 0.3183098733425140380859375) * _2300) * _2301) + _2257;
    }
    bool _2281 = _2261.y == 0u;
    float _2319;
    float _2321;
    float _2323;
    if (_2281)
    {
        _2319 = _2274;
        _2321 = _2276;
        _2323 = _2278;
    }
    else
    {
        uint _2492 = _2187 + 7u;
        float _2508 = (dot(vec3(cbLight._m0[_2187 + 3u].xyz), vec3(_919, _920, _921)) * 0.5) + 0.5;
        float _2509 = _2508 * _2508;
        float _4542 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2510 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2511 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2319 = (((cbLight._m0[_2492].x * 0.3183098733425140380859375) * _2510) * _2511) + _2274;
        _2321 = (((cbLight._m0[_2492].y * 0.3183098733425140380859375) * _2510) * _2511) + _2276;
        _2323 = (((cbLight._m0[_2492].z * 0.3183098733425140380859375) * _2510) * _2511) + _2278;
    }
    uint _2326 = _2187 + 8u;
    float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _922) * 0.949999988079071044921875);
    float _2340 = _2339 * _2339;
    float _2341 = cbLight._m0[_2187].x + _999;
    float _2342 = cbLight._m0[_2187].y + _1000;
    float _2343 = cbLight._m0[_2187].z + _1001;
    float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
    float _2348 = _2347 * _2341;
    float _2349 = _2347 * _2342;
    float _2350 = _2347 * _2343;
    float _2351 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2187].xyz));
    float _4558 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _4569 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _2355 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2356 = dot(vec3(_919, _920, _921), vec3(_2348, _2349, _2350));
    float _4580 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
    float _2360 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2348, _2349, _2350));
    float _4591 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2364 = _2340 * _2340;
    float _2368 = ((_2359 * _2359) * (_2364 + (-1.0))) + 1.0;
    float _2376 = exp2(log2(1.0 - (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0)))) * 5.0);
    float _2377 = 0.959999978542327880859375 - _1078;
    float _2379 = 0.959999978542327880859375 - _1079;
    float _2380 = 0.959999978542327880859375 - _1080;
    float _2387 = 1.0 - _2340;
    float _2398 = (0.5 / (((_2355 * ((_2354 * _2387) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2387) + _2340) * _2354))) * _2354;
    float _4602 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_2364 / ((_2368 * _2368) * 3.141590118408203125));
    uint _2414 = _2187 + 9u;
    float _2425 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _922) * 0.949999988079071044921875);
    float _2426 = _2425 * _2425;
    float _2427 = cbLight._m0[_2227].x + _999;
    float _2428 = cbLight._m0[_2227].y + _1000;
    float _2429 = cbLight._m0[_2227].z + _1001;
    float _2433 = inversesqrt(dot(vec3(_2427, _2428, _2429), vec3(_2427, _2428, _2429)));
    float _2434 = _2433 * _2427;
    float _2435 = _2433 * _2428;
    float _2436 = _2433 * _2429;
    float _2437 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2227].xyz));
    float _4613 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2441 = dot(vec3(_919, _920, _921), vec3(_2434, _2435, _2436));
    float _4624 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2434, _2435, _2436));
    float _4635 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2426 * _2426;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2460 = exp2(log2(1.0 - (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0)))) * 5.0);
    float _2467 = 1.0 - _2426;
    float _2477 = (0.5 / (((_2355 * ((_2440 * _2467) + _2426)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2467) + _2426) * _2440))) * _2440;
    float _4646 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2479 = (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    float _2489 = (((((_2460 * _2377) + _1081) * cbLight._m0[_2414].x) * _2479) * _2210) + ((((cbLight._m0[_2326].x * _2179) * ((_2376 * _2377) + _1081)) * _2400) * _2223);
    float _2490 = (((((_2460 * _2379) + _1083) * cbLight._m0[_2414].y) * _2479) * _2210) + ((((cbLight._m0[_2326].y * _2180) * ((_2376 * _2379) + _1083)) * _2400) * _2223);
    float _2491 = (((((_2460 * _2380) + _1084) * cbLight._m0[_2414].z) * _2479) * _2210) + ((((cbLight._m0[_2326].z * _2181) * ((_2376 * _2380) + _1084)) * _2400) * _2223);
    float _2553;
    float _2555;
    float _2557;
    if (_2263)
    {
        _2553 = _2489;
        _2555 = _2490;
        _2557 = _2491;
    }
    else
    {
        uint _2559 = _2187 + 2u;
        uint _2563 = _2187 + 10u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _922) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _999;
        float _2580 = cbLight._m0[_2559].y + _1000;
        float _2581 = cbLight._m0[_2559].z + _1001;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2559].xyz));
        float _4657 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2593 = dot(vec3(_919, _920, _921), vec3(_2586, _2587, _2588));
        float _4668 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4679 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2355 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2619) + _2578) * _2592))) * _2592;
        float _4690 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2553 = (((((_2612 * _2377) + _1081) * cbLight._m0[_2563].x) * _2631) * _2632) + _2489;
        _2555 = (((((_2612 * _2379) + _1083) * cbLight._m0[_2563].y) * _2631) * _2632) + _2490;
        _2557 = (((((_2612 * _2380) + _1084) * cbLight._m0[_2563].z) * _2631) * _2632) + _2491;
    }
    float _2667;
    float _2669;
    float _2671;
    if (_2281)
    {
        _2667 = _2553;
        _2669 = _2555;
        _2671 = _2557;
    }
    else
    {
        uint _2678 = _2187 + 3u;
        uint _2682 = _2187 + 11u;
        float _2696 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2678].w)) * _922) * 0.949999988079071044921875);
        float _2697 = _2696 * _2696;
        float _2698 = cbLight._m0[_2678].x + _999;
        float _2699 = cbLight._m0[_2678].y + _1000;
        float _2700 = cbLight._m0[_2678].z + _1001;
        float _2704 = inversesqrt(dot(vec3(_2698, _2699, _2700), vec3(_2698, _2699, _2700)));
        float _2705 = _2704 * _2698;
        float _2706 = _2704 * _2699;
        float _2707 = _2704 * _2700;
        float _2708 = dot(vec3(_919, _920, _921), vec3(cbLight._m0[_2678].xyz));
        float _4706 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2712 = dot(vec3(_919, _920, _921), vec3(_2705, _2706, _2707));
        float _4717 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2715 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2716 = dot(vec3(cbLight._m0[_2678].xyz), vec3(_2705, _2706, _2707));
        float _4728 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2720 = _2697 * _2697;
        float _2724 = ((_2715 * _2715) * (_2720 + (-1.0))) + 1.0;
        float _2731 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2738 = 1.0 - _2697;
        float _2748 = (0.5 / (((_2355 * ((_2711 * _2738) + _2697)) + 9.9999999392252902907785028219223e-09) + (((_2355 * _2738) + _2697) * _2711))) * _2711;
        float _4739 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2750 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2720 / ((_2724 * _2724) * 3.141590118408203125));
        float _2751 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
        _2667 = (((((_2731 * _2377) + _1081) * cbLight._m0[_2682].x) * _2750) * _2751) + _2553;
        _2669 = (((((_2731 * _2379) + _1083) * cbLight._m0[_2682].y) * _2750) * _2751) + _2555;
        _2671 = (((((_2731 * _2380) + _1084) * cbLight._m0[_2682].z) * _2750) * _2751) + _2557;
    }
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    if (_2185.y == 0u)
    {
        float _2826 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2827 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2826;
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2826;
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2826;
        uvec4 _2841 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2842 = _2841.x;
        uint _2853 = uint((float(_2841.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1020) / _2842))) + floor(float(uint(cbSceneParam._m0[85u].x * _1019) / _2842)));
        float _2863 = (log2(_2829 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2864 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        uint _2867 = uint(isnan(14.0) ? _2864 : (isnan(_2864) ? 14.0 : min(_2864, 14.0)));
        uvec4 _2872 = texelFetch(g_lightClusterGridBuffer, int(((_2867 << 2u) + (_2853 << 6u)) >> 2u));
        uint _2873 = _2872.x;
        uint _2874 = _2841.z;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((((1u << ((_2874 >> 4u) & 15u)) + 4294967295u) & _2873) == 0u) || ((_2874 & 240u) == 0u))
        {
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
        }
        else
        {
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _3127 = 0.0;
            float _3128 = 0.0;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            uint _3133 = 0u;
            uint _3142;
            bool _3143;
            for (;;)
            {
                _3142 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3133 << 2u)) >> 2u)).x;
                _3143 = _3142 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3143)
                {
                    frontier_phi_66_pred = _3127;
                    frontier_phi_66_pred_1 = _3132;
                    frontier_phi_66_pred_2 = _3131;
                    frontier_phi_66_pred_3 = _3130;
                    frontier_phi_66_pred_4 = _3129;
                    frontier_phi_66_pred_5 = _3128;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3127;
                    _3273 = _3128;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3142;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3133 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2827;
                        float _3339 = _3298.y - _2828;
                        float _3340 = _3298.z - _2829;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1038, _1041, _1044), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4765 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2827;
                        float _3374 = (-0.0) - _2828;
                        float _3375 = (-0.0) - _2829;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1113;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1038, _1041, _1044), vec3(_3380, _3381, _3382));
                        float _4781 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3415 = dot(vec3(_1038, _1041, _1044), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4792 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4803 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4814 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3202 = (_3369 * _3317.x) + _3275;
                        _3203 = (_3369 * _3317.y) + _3276;
                        _3204 = (_3369 * _3317.z) + _3277;
                        _3199 = (_3450 * _3334.x) + _3272;
                        _3200 = (_3450 * _3334.y) + _3273;
                        _3201 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3199;
                            _3273 = _3200;
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                _2975 = frontier_phi_66_pred;
                _2985 = frontier_phi_66_pred_1;
                _2983 = frontier_phi_66_pred_2;
                _2981 = frontier_phi_66_pred_3;
                _2979 = frontier_phi_66_pred_4;
                _2977 = frontier_phi_66_pred_5;
                uint _3134 = _3133 + 1u;
                if (_3134 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3127 = _2975;
                    _3128 = _2977;
                    _3129 = _2979;
                    _3130 = _2981;
                    _3131 = _2983;
                    _3132 = _2985;
                    _3133 = _3134;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
        }
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.z;
        uint _2991 = (_2989 >> 8u) & 15u;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((4294967295u << _2991) & _2873) == 0u)
        {
            _3095 = _2974;
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
        }
        else
        {
            float _3120 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
            float _3121 = _3120 * _2827;
            float _3122 = _3120 * _2828;
            float _3123 = _3120 * _2829;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2991 < ((_2989 >> 12u) & 15u))
            {
                float _3096;
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3255 = _2974;
                float _3256 = _2976;
                float _3257 = _2978;
                float _3258 = _2980;
                float _3259 = _2982;
                float _3260 = _2984;
                uint _3261 = _2991;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2867 << 5u) + (_2853 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3271)
                    {
                        frontier_phi_77_pred = _3260;
                        frontier_phi_77_pred_1 = _3259;
                        frontier_phi_77_pred_2 = _3258;
                        frontier_phi_77_pred_3 = _3257;
                        frontier_phi_77_pred_4 = _3256;
                        frontier_phi_77_pred_5 = _3255;
                    }
                    else
                    {
                        float _3464;
                        float _3465;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3757;
                        float _3758;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3477 = _3255;
                        float _3478 = _3256;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        uint _3483 = _3270;
                        uint _3484;
                        vec4 _3509;
                        float _3510;
                        vec4 _3525;
                        vec3 _3537;
                        vec4 _3552;
                        vec4 _3567;
                        float _3613;
                        bool _3614;
                        for (;;)
                        {
                            uint _3494 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3483));
                            _3484 = (_3483 + 4294967295u) & _3483;
                            uint _3496 = _3494 * 40u;
                            _3509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3496 + 3u)).x));
                            _3510 = _3509.w;
                            uint _3512 = (_3494 * 40u) + 4u;
                            _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3527 = (_3494 * 40u) + 8u;
                            _3537 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x));
                            uint _3539 = (_3494 * 40u) + 16u;
                            _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3554 = (_3494 * 40u) + 20u;
                            _3567 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3554)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3554 + 3u)).x));
                            uint _3569 = (_3494 * 40u) + 24u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3588 = (_3494 * 40u) + 28u;
                            vec4 _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            _3613 = fma(_2829, _3601.z, fma(_2828, _3601.y, _3601.x * _2827)) + _3601.w;
                            _3614 = !((fma(_2829, _3582.z, fma(_2828, _3582.y, _3582.x * _2827)) + _3582.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3614)
                            {
                                float _3641 = _3509.x - _2827;
                                float _3642 = _3509.y - _2828;
                                float _3643 = _3509.z - _2829;
                                float _3644 = dot(vec3(_3641, _3642, _3643), vec3(_3641, _3642, _3643));
                                float _3647 = inversesqrt(_3644);
                                float _3648 = _3647 * _3641;
                                float _3649 = _3647 * _3642;
                                float _3650 = _3647 * _3643;
                                float _3654 = 1.0 - (_3644 / (_3510 * _3510));
                                float _4825 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3659 = sqrt(_3644) * _3525.w;
                                float _3661 = 1.39999997615814208984375 / (_3659 + 1.39999997615814208984375);
                                float _3662 = _3661 * _3661;
                                float _3665 = ((1.0 - _3662) * dot(vec3(_3648, _3649, _3650), vec3(_1038, _1041, _1044))) + _3662;
                                float _3668 = _3659 * _3659;
                                float _3672 = (fma(_2829, _3552.z, fma(_2828, _3552.y, _3552.x * _2827)) + _3552.w) / _3613;
                                float _3673 = (fma(_2829, _3567.z, fma(_2828, _3567.y, _3567.x * _2827)) + _3567.w) / _3613;
                                float _3677 = 1.0 - dot(vec2(_3672, _3673), vec2(_3672, _3673));
                                float _4841 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3678 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3679 = _3678 * (((isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0))) * _3655) / ((_3668 * 0.699999988079071044921875) + 1.0));
                                float _3691 = exp2(log2(1.0 / ((_3668 * 3.5) + 5.0)) * 0.25);
                                float _3692 = 1.0 - _1113;
                                float _3699 = sqrt(1.0 - ((1.0 - (_3692 * _3692)) * (1.0 - (_3691 * _3691))));
                                float _3700 = _3699 * _3699;
                                float _3701 = _3700 * _3700;
                                float _3702 = _3648 - _3121;
                                float _3703 = _3649 - _3122;
                                float _3704 = _3650 - _3123;
                                float _3708 = inversesqrt(dot(vec3(_3702, _3703, _3704), vec3(_3702, _3703, _3704)));
                                float _3712 = dot(vec3(_1038, _1041, _1044), vec3((-0.0) - _3121, (-0.0) - _3122, (-0.0) - _3123));
                                float _4852 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3715 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3716 = dot(vec3(_1038, _1041, _1044), vec3(_3708 * _3702, _3708 * _3703, _3708 * _3704));
                                float _4863 = isnan(0.0) ? _3716 : (isnan(_3716) ? 0.0 : max(_3716, 0.0));
                                float _3719 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3723 = ((_3719 * _3719) * (_3701 + (-1.0))) + 1.0;
                                float _3724 = _3661 * _3700;
                                float _3725 = _3724 * _3724;
                                float _3731 = ((1.0 - _3725) * dot(vec3(_1038, _1041, _1044), vec3(_3648, _3649, _3650))) + _3725;
                                float _4874 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3733 = 1.0 - _3700;
                                float _3743 = (0.5 / (((_3732 * ((_3715 * _3733) + _3700)) + 9.9999999392252902907785028219223e-09) + (((_3732 * _3733) + _3700) * _3715))) * _3732;
                                float _4885 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3753 = (_3678 * _3655) * (((_3701 * 3.1415927410125732421875) * (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) / ((_3723 * _3723) * ((_3668 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3679 * _3525.y;
                                frontier_phi_83_pred_1 = _3679 * _3525.x;
                                frontier_phi_83_pred_2 = _3753 * _3537.z;
                                frontier_phi_83_pred_3 = _3753 * _3537.y;
                                frontier_phi_83_pred_4 = _3753 * _3537.x;
                                frontier_phi_83_pred_5 = _3679 * _3525.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3761 = frontier_phi_83_pred;
                            _3760 = frontier_phi_83_pred_1;
                            _3759 = frontier_phi_83_pred_2;
                            _3758 = frontier_phi_83_pred_3;
                            _3757 = frontier_phi_83_pred_4;
                            _3762 = frontier_phi_83_pred_5;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            _3469 = _3762 + _3482;
                            _3464 = _3757 + _3477;
                            _3465 = _3758 + _3478;
                            _3466 = _3759 + _3479;
                            if (_3484 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3477 = _3464;
                                _3478 = _3465;
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3484;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3469;
                        frontier_phi_77_pred_1 = _3468;
                        frontier_phi_77_pred_2 = _3467;
                        frontier_phi_77_pred_3 = _3466;
                        frontier_phi_77_pred_4 = _3465;
                        frontier_phi_77_pred_5 = _3464;
                    }
                    _3106 = frontier_phi_77_pred;
                    _3104 = frontier_phi_77_pred_1;
                    _3102 = frontier_phi_77_pred_2;
                    _3100 = frontier_phi_77_pred_3;
                    _3098 = frontier_phi_77_pred_4;
                    _3096 = frontier_phi_77_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3096;
                        _3256 = _3098;
                        _3257 = _3100;
                        _3258 = _3102;
                        _3259 = _3104;
                        _3260 = _3106;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3100;
                frontier_phi_58_59_ladder_1 = _3106;
                frontier_phi_58_59_ladder_2 = _3104;
                frontier_phi_58_59_ladder_3 = _3102;
                frontier_phi_58_59_ladder_4 = _3098;
                frontier_phi_58_59_ladder_5 = _3096;
            }
            else
            {
                frontier_phi_58_59_ladder = _2978;
                frontier_phi_58_59_ladder_1 = _2984;
                frontier_phi_58_59_ladder_2 = _2982;
                frontier_phi_58_59_ladder_3 = _2980;
                frontier_phi_58_59_ladder_4 = _2976;
                frontier_phi_58_59_ladder_5 = _2974;
            }
            _3095 = frontier_phi_58_59_ladder_5;
            _3097 = frontier_phi_58_59_ladder_4;
            _3099 = frontier_phi_58_59_ladder;
            _3101 = frontier_phi_58_59_ladder_3;
            _3103 = frontier_phi_58_59_ladder_2;
            _3105 = frontier_phi_58_59_ladder_1;
        }
        float _3110 = isnan(1.0) ? _1097 : (isnan(_1097) ? 1.0 : min(_1097, 1.0));
        _2886 = (_3110 * _3101) + _2319;
        _2888 = (_3110 * _3103) + _2321;
        _2890 = (_3110 * _3105) + _2323;
        _2892 = ((_3095 * _1081) * _3110) + _2667;
        _2894 = ((_3097 * _1083) * _3110) + _2669;
        _2896 = ((_3099 * _1084) * _3110) + _2671;
    }
    else
    {
        _2886 = _2319;
        _2888 = _2321;
        _2890 = _2323;
        _2892 = _2667;
        _2894 = _2669;
        _2896 = _2671;
    }
    float _4901 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _4912 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _4923 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _2913 = ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2886 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1097))) + ((_2892 + ((isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2914 = ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2888 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1097))) + ((_2894 + ((isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    float _2915 = ((isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2890 + ((isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))) * _1097))) + ((_2896 + ((isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0))) * _1936)) * cbPerFrame._m0[3u].x);
    uint _2916 = _282 + 6u;
    float _2924 = _1019 / cbSceneParam._m0[86u].x;
    float _2925 = _1020 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _941 : (isnan(_941) ? cbSceneParam._m0[77u].w : min(_941, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    if (_941 > cbSceneParam._m0[78u].w)
    {
        float _2999 = isnan(_941) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _941 : min(cbSceneParam._m0[80u].w, _941));
        float _3000 = _2999 / _941;
        float _3011 = _3000 * _992;
        float _3012 = _993 * _3000;
        float _3013 = (-0.0) - _3012;
        float _3015 = _3000 * _994;
        float _3017 = (cbSceneParam._m0[77u].w * _3013) / _2999;
        float _3018 = _3017 + cbSceneParam._m0[79u].w;
        float _3019 = cbSceneParam._m0[79u].w - _3012;
        float _3025 = sqrt(((_3011 * _3011) + (_3012 * _3012)) + (_3015 * _3015));
        float _3028 = (1.0 - (cbSceneParam._m0[77u].w / _2999)) * _3025;
        float _3033 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3035 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3212;
        if (abs((_3013 - _3017) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3212 = ((((_3018 > 0.0) ? exp2(_3033 * _3018) : (2.0 - exp2(_3035 * _3018))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3028;
        }
        else
        {
            float _3156 = 1.0 / cbSceneParam._m0[80u].x;
            float _3157 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : max(_3018, _3019));
            float _3158 = isnan(_3019) ? _3018 : (isnan(_3018) ? _3019 : min(_3018, _3019));
            float _3167 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : min(_3157, 0.0));
            float _3168 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : min(_3158, 0.0));
            _3212 = ((abs(_3025 / _3013) * cbSceneParam._m0[80u].y) * ((((_3167 - _3168) * 2.0) - ((exp2(_3033 * (isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0)))) - exp2(_3033 * (isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0))))) * _3156)) - ((exp2(_3035 * _3167) - exp2(_3035 * _3168)) * _3156))) + (_3028 * cbSceneParam._m0[80u].z);
        }
        vec4 _3214 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3223 = exp2((_3212 * (-1.44269502162933349609375)) * (1.0 - _3214.w));
        float _3224 = log2(_3223);
        float _3240 = log2(_2944);
        _3037 = (exp2(_3240 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].x)) * _3214.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3039 = (exp2(_3240 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].y)) * _3214.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3041 = (exp2(_3240 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3224 * cbSceneParam._m0[78u].z)) * _3214.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3043 = _3223 * _2944;
    }
    else
    {
        _3037 = _2941;
        _3039 = _2942;
        _3041 = _2943;
        _3043 = _2944;
    }
    bool _3250;
    vec4 _3053;
    vec4 _3075;
    float _3077;
    float _3081;
    float _3082;
    float _3083;
    float _3084;
    bool _3094;
    for (;;)
    {
        _3053 = cbMatDynParam._m0[0u];
        float _3055 = roundEven(_3053.y);
        bool _3056 = _3055 == 3.0;
        float _3057 = log2(_3043);
        float _3064 = exp2(_3057 * cbSceneParam._m0[78u].x) * _2913;
        float _3065 = exp2(_3057 * cbSceneParam._m0[78u].y) * _2914;
        float _3066 = exp2(_3057 * cbSceneParam._m0[78u].z) * _2915;
        float _3073 = _1008 + (-0.5);
        _3075 = cbMtdParam._m0[1u];
        _3077 = _3075.y * _3073;
        float _3080 = (_3055 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3081 = _3080 * (_3056 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3037)));
        _3082 = _3080 * (_3056 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3039)));
        _3083 = _3080 * (_3056 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3041)));
        _3084 = _3073 * 0.999000012874603271484375;
        _3094 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3094)
        {
            if ((cbInstanceData._m0[_282 + 7u].x + _3084) < 0.5)
            {
                _3250 = true;
                break;
            }
        }
        uint _3191 = _1057 + uint(_3053.w);
        if ((cbInstanceData._m0[_3191].w < 1.0) && ((cbInstanceData._m0[_3191].w + _3084) < 0.5))
        {
            _3250 = true;
            break;
        }
        if ((_3077 + 1.0) < _3075.x)
        {
            _3250 = true;
            break;
        }
        _3250 = false;
        break;
    }
    float _3455;
    if (_3250)
    {
        discard_state = true;
        _3455 = 0.0;
    }
    else
    {
        _3455 = cbInstanceData._m0[_2916].w;
    }
    SV_Target.x = _3081;
    SV_Target.y = _3082;
    SV_Target.z = _3083;
    SV_Target.w = _3455;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
    discard_exit();
}


