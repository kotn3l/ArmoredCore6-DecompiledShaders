#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1406;
float _3786;
float _3787;
float _3788;
float _3789;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3798 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _445 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_432 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327);
    float _448 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_432 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328);
    float _451 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_432 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329);
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _520 = ((_490.z - _511) * _432) + _511;
    float _523 = ((((_490.x - _509) * _432) + _509) * 2.0) + (-1.0);
    float _525 = ((((_490.y - _510) * _432) + _510) * 2.0) + (-1.0);
    float _526 = dot(vec2(_523, _525), vec2(_523, _525));
    float _3809 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _584 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _587 = ((isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : min(_584, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _596 = (_587 - ((((((_574 - _575) * cbMtdParam._m0[24u].z) + _575) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _587))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3830 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
    float _604 = (_597 * ((_470.x * cbMtdParam._m0[18u].x) - _445)) + _445;
    float _605 = (_597 * ((_470.y * cbMtdParam._m0[18u].y) - _448)) + _448;
    float _606 = (_597 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _646 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_620 - _621) * cbMtdParam._m0[24u].w) + _621) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3841 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
    float _655 = ((((cbMtdParam._m0[10u].x - _604) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _647) + _604;
    float _656 = ((((cbMtdParam._m0[10u].y - _605) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _647) + _605;
    float _657 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _606)) * _647) + _606;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _685 = _683.x;
    float _702 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _685) * _432) + _685;
    float _706 = ((_669.x - _702) * cbMtdParam._m0[19u].z) + _702;
    float _708 = _706 - (_706 * _597);
    float _710 = _708 - (_708 * _647);
    float _714 = (cbMtdParam._m0[19u].w * (_547.z - _520)) + _520;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _3852 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_597 * (_728.z - _714)) + _714;
    float _748 = ((cbMtdParam._m0[23u].x - _745) * _647) + _745;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _773 = (_767.x * 2.0) + (-1.0);
    float _774 = (_767.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3863 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = (((_547.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _523;
    float _784 = (((_547.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _525;
    float _796 = (((_735 - _783) + (cbMtdParam._m0[21u].x * _783)) * _597) + _783;
    float _797 = (((_736 - _784) + (cbMtdParam._m0[21u].x * _784)) * _597) + _784;
    float _798 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) - _531)) + _531;
    float _809 = (((_773 - _796) + (_796 * cbMtdParam._m0[22u].z)) * _647) + _796;
    float _810 = (((_774 - _797) + (_797 * cbMtdParam._m0[22u].z)) * _647) + _797;
    float _811 = ((sqrt(1.0 - (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) - _798) * _647) + _798;
    float _813 = cbMtdParam._m0[22u].x + _547.w;
    float _816 = fma(_811, _246 * NORMAL.x, fma(_810, _253 * TANGENT.x, (_239 * _231) * _809));
    float _819 = fma(_811, _246 * NORMAL.y, fma(_810, _253 * TANGENT.y, (_239 * _232) * _809));
    float _822 = fma(_811, _246 * NORMAL.z, fma(_810, _253 * TANGENT.z, (_239 * _233) * _809));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _3874 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _830 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _3896 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _3907 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _3918 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _3929 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _835 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _899 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _889);
    float _900 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _889);
    float _901 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _889);
    float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
    float _906 = _899 * _905;
    float _907 = _900 * _905;
    float _908 = _901 * _905;
    vec4 _913 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _915 = _913.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1087 = sqrt(((_899 * _899) + (_900 * _900)) + (_901 * _901));
        float _1093 = (cbMatDynParam._m0[5u].x * _1087) + cbMatDynParam._m0[5u].y;
        float _3940 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _1098 = (cbMatDynParam._m0[5u].z * _1087) + cbMatDynParam._m0[5u].w;
        float _3951 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))) - _1094)) + _1094) < ((_915 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _926 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _927 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _945 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _948 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _951 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _964 = _259 + 9u;
    uint _965 = _964 + uint(cbMatDynParam._m0[0u].w);
    float _971 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) * cbInstanceData._m0[_965].x;
    float _972 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * cbInstanceData._m0[_965].y;
    float _973 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_965].z;
    float _3962 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _974 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _975 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _976 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _977 = 1.0 - _835;
    float _978 = _974 * _977;
    float _979 = _975 * _977;
    float _980 = _976 * _977;
    float _985 = (_974 + (-0.039999999105930328369140625)) * _835;
    float _986 = (_975 + (-0.039999999105930328369140625)) * _835;
    float _987 = (_976 + (-0.039999999105930328369140625)) * _835;
    float _988 = _985 + 0.039999999105930328369140625;
    float _990 = _986 + 0.039999999105930328369140625;
    float _991 = _987 + 0.039999999105930328369140625;
    vec4 _1000 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _926, cbSceneParam._m0[86u].y * _927));
    float _1004 = ((isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * TEXCOORD_5.w) * _1000.x;
    float _1005 = dot(vec3(_827, _828, _829), vec3(_906, _907, _908));
    float _1008 = _1005 * 2.0;
    float _1012 = (_1008 * _827) - _906;
    float _1013 = (_1008 * _828) - _907;
    float _1014 = (_1008 * _829) - _908;
    float _1018 = abs(dot(vec3(_906, _907, _908), vec3(_827, _828, _829)));
    float _3995 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1020 = sqrt(_830);
    float _1033 = exp2((_1020 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1020 * 3.0));
    float _1039 = (1.0 - _1033) * ((_1020 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1040 = _1033 * _1020;
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1072 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1076 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1405;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1130 = fma(_1076, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1068));
        float _1134 = fma(_1076, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1068));
        float _1138 = fma(_1076, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1068));
        float _1163 = _1068 + _827;
        float _1164 = _1072 + _828;
        float _1165 = _1076 + _829;
        float _1175 = fma(_1165, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163)) - _1130;
        float _1176 = fma(_1165, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163)) - _1134;
        float _1177 = fma(_1165, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163)) - _1138;
        float _1181 = inversesqrt(dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177)));
        float _1194 = ((_1181 * _1175) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1130 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1195 = ((_1181 * _1176) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1134 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1196 = ((_1181 * _1177) / cbModelParam._m0[34u].z) + ((((((_1138 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        vec4 _1220 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1194, _1195, _1196), 0.0);
        float _1233 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1199.x + (-0.5));
        float _1235 = _1233 * (_1199.y + (-0.5));
        float _1236 = _1233 * (_1199.z + (-0.5));
        float _1243 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1206.x + (-0.5));
        float _1245 = _1243 * (_1206.y + (-0.5));
        float _1246 = _1243 * (_1206.z + (-0.5));
        float _1253 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1213.x + (-0.5));
        float _1255 = _1253 * (_1213.y + (-0.5));
        float _1256 = _1253 * (_1213.z + (-0.5));
        float _1263 = exp2((_1220.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1220.x + (-0.5));
        float _1265 = _1263 * (_1220.y + (-0.5));
        float _1266 = _1263 * (_1220.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1287 = (dot(vec3(_827, _828, _829), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1297 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1298 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1299 = _1298 * 2.0;
        float _1303 = (1.0 - _1298) / (_1298 + 1.0);
        float _4043 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1313 = ((((1.0 - _1304) * (_1299 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1299 + 1.0))) + _1304) * _1267;
        float _1314 = _1235 * 0.5;
        float _1315 = _1245 * 0.5;
        float _1316 = _1255 * 0.5;
        float _1317 = dot(vec3(_1314, _1315, _1316), vec3(_1314, _1315, _1316));
        float _1322 = (_1317 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1317);
        float _1330 = (dot(vec3(_827, _828, _829), vec3(_1322 * _1314, _1322 * _1315, _1322 * _1316)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1339 = sqrt(((_1315 * _1315) + (_1314 * _1314)) + (_1316 * _1316)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4076 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1341 + 1.0))) + _1346) * _1268;
        float _1356 = _1236 * 0.5;
        float _1357 = _1246 * 0.5;
        float _1358 = _1256 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_827, _828, _829), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4109 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1383 + 1.0))) + _1388) * _1269;
        _1405 = _1236;
        _1407 = _1235;
        _1408 = _1234;
        _1409 = _1246;
        _1410 = _1245;
        _1411 = _1244;
        _1412 = _1256;
        _1413 = _1255;
        _1414 = _1254;
        _1415 = _1269;
        _1416 = _1268;
        _1417 = _1267;
        _1418 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)));
        _1419 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1420 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
    }
    else
    {
        _1405 = _1406;
        _1407 = _1406;
        _1408 = _1406;
        _1409 = _1406;
        _1410 = _1406;
        _1411 = _1406;
        _1412 = _1406;
        _1413 = _1406;
        _1414 = _1406;
        _1415 = _1406;
        _1416 = _1406;
        _1417 = _1406;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1448 = fma(_1076, cbModelParam._m0[30u].z, fma(_1072, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068));
        float _1452 = fma(_1076, cbModelParam._m0[31u].z, fma(_1072, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068));
        float _1456 = fma(_1076, cbModelParam._m0[32u].z, fma(_1072, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068));
        float _1479 = _1068 + _827;
        float _1480 = _1072 + _828;
        float _1481 = _1076 + _829;
        float _1491 = fma(_1481, cbModelParam._m0[30u].z, fma(_1480, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1479)) - _1448;
        float _1492 = fma(_1481, cbModelParam._m0[31u].z, fma(_1480, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1479)) - _1452;
        float _1493 = fma(_1481, cbModelParam._m0[32u].z, fma(_1480, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1479)) - _1456;
        float _1497 = inversesqrt(dot(vec3(_1491, _1492, _1493), vec3(_1491, _1492, _1493)));
        float _1510 = ((_1497 * _1491) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1448 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1497 * _1492) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1452 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1512 = ((_1497 * _1493) / cbModelParam._m0[35u].z) + ((((((_1456 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1510, _1511, _1512), 0.0);
        float _1547 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1514.x + (-0.5));
        float _1549 = _1547 * (_1514.y + (-0.5));
        float _1550 = _1547 * (_1514.z + (-0.5));
        float _1557 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1521.x + (-0.5));
        float _1559 = _1557 * (_1521.y + (-0.5));
        float _1560 = _1557 * (_1521.z + (-0.5));
        float _1567 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1528.x + (-0.5));
        float _1569 = _1567 * (_1528.y + (-0.5));
        float _1570 = _1567 * (_1528.z + (-0.5));
        float _1577 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1535.x + (-0.5));
        float _1579 = _1577 * (_1535.y + (-0.5));
        float _1580 = _1577 * (_1535.z + (-0.5));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = _1548 * 0.5;
        float _1585 = _1558 * 0.5;
        float _1586 = _1568 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_827, _828, _829), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4172 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1611 + 1.0))) + _1616) * _1581;
        float _1626 = _1549 * 0.5;
        float _1627 = _1559 * 0.5;
        float _1628 = _1569 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_827, _828, _829), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4205 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1653 + 1.0))) + _1658) * _1582;
        float _1668 = _1550 * 0.5;
        float _1669 = _1560 * 0.5;
        float _1670 = _1570 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_827, _828, _829), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4238 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1695 + 1.0))) + _1700) * _1583;
        _1717 = _1550;
        _1718 = _1549;
        _1719 = _1548;
        _1720 = _1560;
        _1721 = _1559;
        _1722 = _1558;
        _1723 = _1570;
        _1724 = _1569;
        _1725 = _1568;
        _1726 = _1583;
        _1727 = _1582;
        _1728 = _1581;
        _1729 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1730 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1731 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
    }
    else
    {
        _1717 = _1406;
        _1718 = _1406;
        _1719 = _1406;
        _1720 = _1406;
        _1721 = _1406;
        _1722 = _1406;
        _1723 = _1406;
        _1724 = _1406;
        _1725 = _1406;
        _1726 = _1406;
        _1727 = _1406;
        _1728 = _1406;
        _1729 = 0.0;
        _1730 = 0.0;
        _1731 = 0.0;
    }
    float _1741 = (cbModelParam._m0[1u].x * (_1729 - _1418)) + _1418;
    float _1742 = (cbModelParam._m0[1u].x * (_1730 - _1419)) + _1419;
    float _1743 = (cbModelParam._m0[1u].x * (_1731 - _1420)) + _1420;
    float _1764 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1741));
    float _1785 = _1012 * 0.5;
    float _1786 = _1013 * 0.5;
    float _1787 = _1014 * 0.5;
    float _1788 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1719, _1722, _1725, _1728));
    float _1791 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1718, _1721, _1724, _1727));
    float _1794 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1717, _1720, _1723, _1726));
    float _1828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1801 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1405, _1409, _1412, _1415));
        float _1805 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1407, _1410, _1413, _1416));
        float _1809 = dot(vec4(_1785, _1786, _1787, 1.0), vec4(_1408, _1411, _1414, _1417));
        float _1816 = dot(vec4(cbModelParam._m0[39u]), vec4(_1785, _1786, _1787, 1.0));
        _1828 = dot(vec3(isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1816) ? 0.0 : (isnan(0.0) ? _1816 : max(0.0, _1816))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1828 = 1.0;
    }
    float _1839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1830 = dot(vec4(cbModelParam._m0[40u]), vec4(_1785, _1786, _1787, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)), isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)), isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1830) ? 0.0 : (isnan(0.0) ? _1830 : max(0.0, _1830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1843 = (_1839 * cbModelParam._m0[1u].x) + (_1828 * (1.0 - cbModelParam._m0[1u].x));
    float _1853 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1853 : min(cbModelParam._m0[25u].z, _1853));
    float _1934;
    float _1936;
    float _1938;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1901 = fma(_1076, cbModelParam._m0[13u].z, fma(_1072, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1068)) + cbModelParam._m0[13u].w;
        float _1905 = fma(_1076, cbModelParam._m0[14u].z, fma(_1072, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1068)) + cbModelParam._m0[14u].w;
        float _1909 = fma(_1076, cbModelParam._m0[15u].z, fma(_1072, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1068)) + cbModelParam._m0[15u].w;
        float _1912 = fma(_1014, cbModelParam._m0[13u].z, fma(_1013, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012));
        float _1915 = fma(_1014, cbModelParam._m0[14u].z, fma(_1013, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012));
        float _1918 = fma(_1014, cbModelParam._m0[15u].z, fma(_1013, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012));
        float _1946;
        if (_1912 > 0.0)
        {
            _1946 = abs((1.0 - _1901) / _1912);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1901 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1946 = frontier_phi_17_15_ladder;
        }
        float _2148;
        if (_1915 > 0.0)
        {
            _2148 = abs((1.0 - _1905) / _1915);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1905 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2148 = frontier_phi_26_22_ladder;
        }
        float _2402;
        if (_1918 > 0.0)
        {
            _2402 = abs((1.0 - _1909) / _1918);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1909 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2402 = frontier_phi_38_33_ladder;
        }
        float _2404 = isnan(_2148) ? _1946 : (isnan(_1946) ? _2148 : min(_1946, _2148));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1912) + _1901;
        float _2410 = (_2405 * _1915) + _1905;
        float _2411 = (_2405 * _1918) + _1909;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2414 = (-1.0) - _2412;
        float _2416 = _2412 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2411 > _2416) || ((_2411 < _2414) || ((_2410 > _2416) || ((_2410 < _2414) || ((_2409 < _2414) || (_2409 > _2416))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2539 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1854);
            frontier_phi_16_38_ladder = _2539.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2539.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2539.x * cbModelParam._m0[1u].y;
        }
        _1934 = frontier_phi_16_38_ladder_2;
        _1936 = frontier_phi_16_38_ladder_1;
        _1938 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1012, _1013, _1014), _1854);
        _1934 = _1922.x * cbModelParam._m0[1u].y;
        _1936 = _1922.y * cbModelParam._m0[1u].y;
        _1938 = _1922.z * cbModelParam._m0[1u].y;
    }
    float _1942 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1943 = isnan(_1942) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1942 : min(cbModelParam._m0[25u].w, _1942));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1996 = fma(_1076, cbModelParam._m0[21u].z, fma(_1072, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1068)) + cbModelParam._m0[21u].w;
        float _2000 = fma(_1076, cbModelParam._m0[22u].z, fma(_1072, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1068)) + cbModelParam._m0[22u].w;
        float _2004 = fma(_1076, cbModelParam._m0[23u].z, fma(_1072, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1068)) + cbModelParam._m0[23u].w;
        float _2007 = fma(_1014, cbModelParam._m0[21u].z, fma(_1013, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012));
        float _2010 = fma(_1014, cbModelParam._m0[22u].z, fma(_1013, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012));
        float _2013 = fma(_1014, cbModelParam._m0[23u].z, fma(_1013, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012));
        float _2153;
        if (_2007 > 0.0)
        {
            _2153 = abs((1.0 - _1996) / _2007);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1996 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2153 = frontier_phi_28_24_ladder;
        }
        float _2429;
        if (_2010 > 0.0)
        {
            _2429 = abs((1.0 - _2000) / _2010);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2000 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2429 = frontier_phi_40_35_ladder;
        }
        float _2642;
        if (_2013 > 0.0)
        {
            _2642 = abs((1.0 - _2004) / _2013);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2004 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2642 = frontier_phi_49_46_ladder;
        }
        float _2644 = isnan(_2429) ? _2153 : (isnan(_2153) ? _2429 : min(_2153, _2429));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _2007) + _1996;
        float _2650 = (_2645 * _2010) + _2000;
        float _2651 = (_2645 * _2013) + _2004;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1943);
            frontier_phi_25_49_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _2032 = frontier_phi_25_49_ladder_2;
        _2034 = frontier_phi_25_49_ladder_1;
        _2036 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1012, _1013, _1014), _1943);
        _2032 = _2016.x * cbModelParam._m0[1u].z;
        _2034 = _2016.y * cbModelParam._m0[1u].z;
        _2036 = _2016.z * cbModelParam._m0[1u].z;
    }
    float _2049 = (((_1039 * _988) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2032 - _1934)) + _1934);
    float _2051 = (((_1039 * _990) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2034 - _1936)) + _1936);
    float _2053 = (((_1039 * _991) + _1040) * _1004) * ((cbModelParam._m0[1u].w * (_2036 - _1938)) + _1938);
    float _2056 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2051, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2059 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2051, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2062 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2051, cbSceneParam._m0[91u].y, _2049 * cbSceneParam._m0[91u].x));
    uvec4 _2072 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2074 = _2072.x * 14u;
    uint _2075 = _2074 + 13u;
    float _2082 = _1004 + (-1.0);
    float _2087 = (cbLight._m0[_2075].x * _2082) + 1.0;
    float _2088 = (cbLight._m0[_2075].y * _2082) + 1.0;
    float _2089 = (cbLight._m0[_2075].z * _2082) + 1.0;
    float _2090 = (cbLight._m0[_2075].w * _2082) + 1.0;
    uint _2091 = _2074 + 5u;
    float _2097 = isnan(1.0) ? _2088 : (isnan(_2088) ? 1.0 : min(_2088, 1.0));
    uint _2101 = _2074 + 4u;
    float _2107 = isnan(1.0) ? _2087 : (isnan(_2087) ? 1.0 : min(_2087, 1.0));
    uint _2111 = _2074 | 1u;
    float _2122 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_827, _828, _829));
    float _2125 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_827, _828, _829));
    float _4374 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _4385 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2130 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2132 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2139 = ((cbLight._m0[_2091].x * _2097) * _2132) + ((cbLight._m0[_2101].x * _2107) * _2130);
    float _2140 = ((_2097 * cbLight._m0[_2091].y) * _2132) + ((_2107 * cbLight._m0[_2101].y) * _2130);
    float _2141 = ((_2097 * cbLight._m0[_2091].z) * _2132) + ((_2107 * cbLight._m0[_2101].z) * _2130);
    uvec4 _2145 = floatBitsToUint(cbLight._m0[_2074 + 12u]);
    bool _2147 = _2145.x == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2147)
    {
        _2158 = _2139;
        _2160 = _2140;
        _2162 = _2141;
    }
    else
    {
        uint _2166 = _2074 + 6u;
        float _2182 = (dot(vec3(cbLight._m0[_2074 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2183 = _2182 * _2182;
        float _4396 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
        float _2184 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2185 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2158 = (((cbLight._m0[_2166].x * 0.3183098733425140380859375) * _2184) * _2185) + _2139;
        _2160 = (((cbLight._m0[_2166].y * 0.3183098733425140380859375) * _2184) * _2185) + _2140;
        _2162 = (((cbLight._m0[_2166].z * 0.3183098733425140380859375) * _2184) * _2185) + _2141;
    }
    bool _2165 = _2145.y == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2165)
    {
        _2203 = _2158;
        _2205 = _2160;
        _2207 = _2162;
    }
    else
    {
        uint _2373 = _2074 + 7u;
        float _2389 = (dot(vec3(cbLight._m0[_2074 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2390 = _2389 * _2389;
        float _4412 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2391 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2392 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2203 = (((cbLight._m0[_2373].x * 0.3183098733425140380859375) * _2391) * _2392) + _2158;
        _2205 = (((cbLight._m0[_2373].y * 0.3183098733425140380859375) * _2391) * _2392) + _2160;
        _2207 = (((cbLight._m0[_2373].z * 0.3183098733425140380859375) * _2391) * _2392) + _2162;
    }
    uint _2210 = _2074 + 8u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2074].w)) * _830) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2074].x + _906;
    float _2226 = cbLight._m0[_2074].y + _907;
    float _2227 = cbLight._m0[_2074].z + _908;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2074].xyz));
    float _4428 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _2239 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2240 = dot(vec3(_827, _828, _829), vec3(_2232, _2233, _2234));
    float _4450 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2243 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2244 = dot(vec3(cbLight._m0[_2074].xyz), vec3(_2232, _2233, _2234));
    float _4461 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2248 = _2224 * _2224;
    float _2252 = ((_2243 * _2243) * (_2248 + (-1.0))) + 1.0;
    float _2260 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2261 = 0.959999978542327880859375 - _985;
    float _2263 = 0.959999978542327880859375 - _986;
    float _2264 = 0.959999978542327880859375 - _987;
    float _2271 = 1.0 - _2224;
    float _2282 = (0.5 / (((_2239 * ((_2238 * _2271) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2271) + _2224) * _2238))) * _2238;
    float _4472 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
    float _2284 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2248 / ((_2252 * _2252) * 3.141590118408203125));
    uint _2295 = _2074 + 9u;
    float _2306 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2111].w)) * _830) * 0.949999988079071044921875);
    float _2307 = _2306 * _2306;
    float _2308 = cbLight._m0[_2111].x + _906;
    float _2309 = cbLight._m0[_2111].y + _907;
    float _2310 = cbLight._m0[_2111].z + _908;
    float _2314 = inversesqrt(dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310)));
    float _2315 = _2314 * _2308;
    float _2316 = _2314 * _2309;
    float _2317 = _2314 * _2310;
    float _2318 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2111].xyz));
    float _4483 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
    float _2321 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2322 = dot(vec3(_827, _828, _829), vec3(_2315, _2316, _2317));
    float _4494 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2326 = dot(vec3(cbLight._m0[_2111].xyz), vec3(_2315, _2316, _2317));
    float _4505 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2330 = _2307 * _2307;
    float _2334 = ((_2325 * _2325) * (_2330 + (-1.0))) + 1.0;
    float _2341 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
    float _2348 = 1.0 - _2307;
    float _2358 = (0.5 / (((_2239 * ((_2321 * _2348) + _2307)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2348) + _2307) * _2321))) * _2321;
    float _4516 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2360 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2330 / ((_2334 * _2334) * 3.141590118408203125));
    float _2370 = (((((_2341 * _2261) + _988) * cbLight._m0[_2295].x) * _2360) * _2097) + (((((_2260 * _2261) + _988) * cbLight._m0[_2210].x) * _2284) * _2107);
    float _2371 = (((((_2341 * _2263) + _990) * cbLight._m0[_2295].y) * _2360) * _2097) + (((((_2260 * _2263) + _990) * cbLight._m0[_2210].y) * _2284) * _2107);
    float _2372 = (((((_2341 * _2264) + _991) * cbLight._m0[_2295].z) * _2360) * _2097) + (((((_2260 * _2264) + _991) * cbLight._m0[_2210].z) * _2284) * _2107);
    float _2434;
    float _2436;
    float _2438;
    if (_2147)
    {
        _2434 = _2370;
        _2436 = _2371;
        _2438 = _2372;
    }
    else
    {
        uint _2440 = _2074 + 2u;
        uint _2444 = _2074 + 10u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _830) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _906;
        float _2461 = cbLight._m0[_2440].y + _907;
        float _2462 = cbLight._m0[_2440].z + _908;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2440].xyz));
        float _4527 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2474 = dot(vec3(_827, _828, _829), vec3(_2467, _2468, _2469));
        float _4538 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4549 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
        float _2500 = 1.0 - _2459;
        float _2510 = (0.5 / (((_2239 * ((_2473 * _2500) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2500) + _2459) * _2473))) * _2473;
        float _4560 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _2089 : (isnan(_2089) ? 1.0 : min(_2089, 1.0));
        _2434 = (((((_2493 * _2261) + _988) * cbLight._m0[_2444].x) * _2512) * _2513) + _2370;
        _2436 = (((((_2493 * _2263) + _990) * cbLight._m0[_2444].y) * _2512) * _2513) + _2371;
        _2438 = (((((_2493 * _2264) + _991) * cbLight._m0[_2444].z) * _2512) * _2513) + _2372;
    }
    float _2548;
    float _2550;
    float _2552;
    if (_2165)
    {
        _2548 = _2434;
        _2550 = _2436;
        _2552 = _2438;
    }
    else
    {
        uint _2559 = _2074 + 3u;
        uint _2563 = _2074 + 11u;
        float _2577 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2559].w)) * _830) * 0.949999988079071044921875);
        float _2578 = _2577 * _2577;
        float _2579 = cbLight._m0[_2559].x + _906;
        float _2580 = cbLight._m0[_2559].y + _907;
        float _2581 = cbLight._m0[_2559].z + _908;
        float _2585 = inversesqrt(dot(vec3(_2579, _2580, _2581), vec3(_2579, _2580, _2581)));
        float _2586 = _2585 * _2579;
        float _2587 = _2585 * _2580;
        float _2588 = _2585 * _2581;
        float _2589 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2559].xyz));
        float _4576 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        float _2592 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2593 = dot(vec3(_827, _828, _829), vec3(_2586, _2587, _2588));
        float _4587 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2596 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2597 = dot(vec3(cbLight._m0[_2559].xyz), vec3(_2586, _2587, _2588));
        float _4598 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2601 = _2578 * _2578;
        float _2605 = ((_2596 * _2596) * (_2601 + (-1.0))) + 1.0;
        float _2612 = exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0);
        float _2619 = 1.0 - _2578;
        float _2629 = (0.5 / (((_2239 * ((_2592 * _2619) + _2578)) + 9.9999999392252902907785028219223e-09) + (((_2239 * _2619) + _2578) * _2592))) * _2592;
        float _4609 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2631 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2601 / ((_2605 * _2605) * 3.141590118408203125));
        float _2632 = isnan(1.0) ? _2090 : (isnan(_2090) ? 1.0 : min(_2090, 1.0));
        _2548 = (((((_2612 * _2261) + _988) * cbLight._m0[_2563].x) * _2631) * _2632) + _2434;
        _2550 = (((((_2612 * _2263) + _990) * cbLight._m0[_2563].y) * _2631) * _2632) + _2436;
        _2552 = (((((_2612 * _2264) + _991) * cbLight._m0[_2563].z) * _2631) * _2632) + _2438;
    }
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    float _2775;
    float _2777;
    if (_2072.y == 0u)
    {
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2708 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2707;
        float _2709 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2707;
        float _2710 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2707;
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _927) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _926) / _2723)));
        float _2744 = (log2(_2710 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2855;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
            _2861 = 0.0;
            _2863 = 0.0;
            _2865 = 0.0;
        }
        else
        {
            float _2856;
            float _2858;
            float _2860;
            float _2862;
            float _2864;
            float _2866;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            float _3011 = 0.0;
            float _3012 = 0.0;
            float _3013 = 0.0;
            uint _3014 = 0u;
            uint _3023;
            bool _3024;
            for (;;)
            {
                _3023 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3014 << 2u)) >> 2u)).x;
                _3024 = _3023 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3024)
                {
                    frontier_phi_66_pred = _3008;
                    frontier_phi_66_pred_1 = _3013;
                    frontier_phi_66_pred_2 = _3012;
                    frontier_phi_66_pred_3 = _3011;
                    frontier_phi_66_pred_4 = _3010;
                    frontier_phi_66_pred_5 = _3009;
                }
                else
                {
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    uint _3159;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3011;
                    _3157 = _3012;
                    _3158 = _3013;
                    _3159 = _3023;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    float _3085;
                    for (;;)
                    {
                        uint _3163 = uint(findLSB(_3159)) + (_3014 << 5u);
                        uint _3160 = (_3159 + 4294967295u) & _3159;
                        uint _3165 = _3163 * 48u;
                        vec4 _3179 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 3u)).x));
                        uint _3185 = (_3163 * 48u) + 4u;
                        vec4 _3198 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3204 = (_3163 * 48u) + 8u;
                        vec3 _3215 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x));
                        float _3219 = _3179.x - _2708;
                        float _3220 = _3179.y - _2709;
                        float _3221 = _3179.z - _2710;
                        float _3222 = dot(vec3(_3219, _3220, _3221), vec3(_3219, _3220, _3221));
                        float _3225 = inversesqrt(_3222);
                        float _3226 = _3225 * _3219;
                        float _3227 = _3225 * _3220;
                        float _3228 = _3225 * _3221;
                        float _3229 = dot(vec3(_945, _948, _951), vec3(_3226, _3227, _3228));
                        float _3234 = 1.0 - (_3222 * _3179.w);
                        float _4635 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                        float _3235 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3236 = sqrt(_3222) * _3198.w;
                        float _3239 = 1.39999997615814208984375 / (_3236 + 1.39999997615814208984375);
                        float _3240 = _3239 * _3239;
                        float _3243 = ((1.0 - _3240) * _3229) + _3240;
                        float _3246 = _3236 * _3236;
                        float _3250 = ((isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))) * _3235) / ((_3246 * 0.699999988079071044921875) + 1.0);
                        float _3254 = (-0.0) - _2708;
                        float _3255 = (-0.0) - _2709;
                        float _3256 = (-0.0) - _2710;
                        float _3260 = inversesqrt(dot(vec3(_3254, _3255, _3256), vec3(_3254, _3255, _3256)));
                        float _3261 = _3260 * _3254;
                        float _3262 = _3260 * _3255;
                        float _3263 = _3260 * _3256;
                        float _3271 = exp2(log2(1.0 / ((_3246 * 3.5) + 5.0)) * 0.25);
                        float _3272 = 1.0 - _1020;
                        float _3279 = sqrt(1.0 - ((1.0 - (_3272 * _3272)) * (1.0 - (_3271 * _3271))));
                        float _3280 = _3279 * _3279;
                        float _3281 = _3280 * _3280;
                        float _3282 = _3261 + _3226;
                        float _3283 = _3262 + _3227;
                        float _3284 = _3263 + _3228;
                        float _3288 = inversesqrt(dot(vec3(_3282, _3283, _3284), vec3(_3282, _3283, _3284)));
                        float _3292 = dot(vec3(_945, _948, _951), vec3(_3261, _3262, _3263));
                        float _4651 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                        float _3295 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3296 = dot(vec3(_945, _948, _951), vec3(_3288 * _3282, _3288 * _3283, _3288 * _3284));
                        float _4662 = isnan(0.0) ? _3296 : (isnan(_3296) ? 0.0 : max(_3296, 0.0));
                        float _3299 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3303 = ((_3299 * _3299) * (_3281 + (-1.0))) + 1.0;
                        float _3304 = _3239 * _3280;
                        float _3305 = _3304 * _3304;
                        float _3308 = ((1.0 - _3305) * _3229) + _3305;
                        float _4673 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3309 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3310 = 1.0 - _3280;
                        float _3320 = (0.5 / (((_3309 * ((_3295 * _3310) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_3309 * _3310) + _3280) * _3295))) * _3309;
                        float _4684 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3331 = (((_3281 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3303 * _3303) * ((_3246 * 2.1991131305694580078125) + 3.141590118408203125))) * _3235;
                        _3083 = (_3250 * _3198.x) + _3156;
                        _3084 = (_3250 * _3198.y) + _3157;
                        _3085 = (_3250 * _3198.z) + _3158;
                        _3080 = (_3331 * _3215.x) + _3153;
                        _3081 = (_3331 * _3215.y) + _3154;
                        _3082 = (_3331 * _3215.z) + _3155;
                        if (_3160 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3083;
                            _3157 = _3084;
                            _3158 = _3085;
                            _3159 = _3160;
                        }
                    }
                    frontier_phi_66_pred = _3080;
                    frontier_phi_66_pred_1 = _3085;
                    frontier_phi_66_pred_2 = _3084;
                    frontier_phi_66_pred_3 = _3083;
                    frontier_phi_66_pred_4 = _3082;
                    frontier_phi_66_pred_5 = _3081;
                }
                _2856 = frontier_phi_66_pred;
                _2866 = frontier_phi_66_pred_1;
                _2864 = frontier_phi_66_pred_2;
                _2862 = frontier_phi_66_pred_3;
                _2860 = frontier_phi_66_pred_4;
                _2858 = frontier_phi_66_pred_5;
                uint _3015 = _3014 + 1u;
                if (_3015 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3008 = _2856;
                    _3009 = _2858;
                    _3010 = _2860;
                    _3011 = _2862;
                    _3012 = _2864;
                    _3013 = _2866;
                    _3014 = _3015;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
            _2861 = _2862;
            _2863 = _2864;
            _2865 = _2866;
        }
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.z;
        uint _2872 = (_2870 >> 8u) & 15u;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((4294967295u << _2872) & _2754) == 0u)
        {
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
            _2982 = _2861;
            _2984 = _2863;
            _2986 = _2865;
        }
        else
        {
            float _3001 = inversesqrt(dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710)));
            float _3002 = _3001 * _2708;
            float _3003 = _3001 * _2709;
            float _3004 = _3001 * _2710;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2872 < ((_2870 >> 12u) & 15u))
            {
                float _2977;
                float _2979;
                float _2981;
                float _2983;
                float _2985;
                float _2987;
                float _3136 = _2855;
                float _3137 = _2857;
                float _3138 = _2859;
                float _3139 = _2861;
                float _3140 = _2863;
                float _3141 = _2865;
                uint _3142 = _2872;
                uint _3151;
                bool _3152;
                for (;;)
                {
                    _3151 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3142 << 2u)) >> 2u)).x;
                    _3152 = _3151 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3152)
                    {
                        frontier_phi_77_pred = _3141;
                        frontier_phi_77_pred_1 = _3140;
                        frontier_phi_77_pred_2 = _3139;
                        frontier_phi_77_pred_3 = _3138;
                        frontier_phi_77_pred_4 = _3137;
                        frontier_phi_77_pred_5 = _3136;
                    }
                    else
                    {
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3348;
                        float _3349;
                        float _3350;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        float _3361 = _3139;
                        float _3362 = _3140;
                        float _3363 = _3141;
                        uint _3364 = _3151;
                        uint _3365;
                        vec4 _3390;
                        float _3391;
                        vec4 _3406;
                        vec3 _3418;
                        vec4 _3433;
                        vec4 _3449;
                        float _3495;
                        bool _3496;
                        for (;;)
                        {
                            uint _3375 = ((_3142 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3364));
                            _3365 = (_3364 + 4294967295u) & _3364;
                            uint _3377 = _3375 * 40u;
                            _3390 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3377)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3377 + 3u)).x));
                            _3391 = _3390.w;
                            uint _3393 = (_3375 * 40u) + 4u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            uint _3408 = (_3375 * 40u) + 8u;
                            _3418 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x));
                            uint _3420 = (_3375 * 40u) + 16u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3436 = (_3375 * 40u) + 20u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3451 = (_3375 * 40u) + 24u;
                            vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            uint _3470 = (_3375 * 40u) + 28u;
                            vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 3u)).x));
                            _3495 = fma(_2710, _3483.z, fma(_2709, _3483.y, _3483.x * _2708)) + _3483.w;
                            _3496 = !((fma(_2710, _3464.z, fma(_2709, _3464.y, _3464.x * _2708)) + _3464.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3496)
                            {
                                float _3523 = _3390.x - _2708;
                                float _3524 = _3390.y - _2709;
                                float _3525 = _3390.z - _2710;
                                float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                                float _3529 = inversesqrt(_3526);
                                float _3530 = _3529 * _3523;
                                float _3531 = _3529 * _3524;
                                float _3532 = _3529 * _3525;
                                float _3536 = 1.0 - (_3526 / (_3391 * _3391));
                                float _4695 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                                float _3537 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3541 = sqrt(_3526) * _3406.w;
                                float _3543 = 1.39999997615814208984375 / (_3541 + 1.39999997615814208984375);
                                float _3544 = _3543 * _3543;
                                float _3547 = ((1.0 - _3544) * dot(vec3(_3530, _3531, _3532), vec3(_945, _948, _951))) + _3544;
                                float _3550 = _3541 * _3541;
                                float _3554 = (fma(_2710, _3433.z, fma(_2709, _3433.y, _3433.x * _2708)) + _3433.w) / _3495;
                                float _3555 = (fma(_2710, _3449.z, fma(_2709, _3449.y, _3449.x * _2708)) + _3449.w) / _3495;
                                float _3559 = 1.0 - dot(vec2(_3554, _3555), vec2(_3554, _3555));
                                float _4711 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3560 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3561 = _3560 * (((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3537) / ((_3550 * 0.699999988079071044921875) + 1.0));
                                float _3573 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                                float _3574 = 1.0 - _1020;
                                float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                                float _3582 = _3581 * _3581;
                                float _3583 = _3582 * _3582;
                                float _3584 = _3530 - _3002;
                                float _3585 = _3531 - _3003;
                                float _3586 = _3532 - _3004;
                                float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                                float _3594 = dot(vec3(_945, _948, _951), vec3((-0.0) - _3002, (-0.0) - _3003, (-0.0) - _3004));
                                float _4722 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3598 = dot(vec3(_945, _948, _951), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                                float _4733 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3601 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                                float _3606 = _3543 * _3582;
                                float _3607 = _3606 * _3606;
                                float _3613 = ((1.0 - _3607) * dot(vec3(_945, _948, _951), vec3(_3530, _3531, _3532))) + _3607;
                                float _4744 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                                float _3614 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3615 = 1.0 - _3582;
                                float _3625 = (0.5 / (((_3614 * ((_3597 * _3615) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3582) * _3597))) * _3614;
                                float _4755 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3635 = (_3560 * _3537) * (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3605 * _3605) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3561 * _3406.y;
                                frontier_phi_83_pred_1 = _3561 * _3406.x;
                                frontier_phi_83_pred_2 = _3635 * _3418.z;
                                frontier_phi_83_pred_3 = _3635 * _3418.y;
                                frontier_phi_83_pred_4 = _3635 * _3418.x;
                                frontier_phi_83_pred_5 = _3561 * _3406.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3643 = frontier_phi_83_pred;
                            _3642 = frontier_phi_83_pred_1;
                            _3641 = frontier_phi_83_pred_2;
                            _3640 = frontier_phi_83_pred_3;
                            _3639 = frontier_phi_83_pred_4;
                            _3644 = frontier_phi_83_pred_5;
                            _3348 = _3642 + _3361;
                            _3349 = _3643 + _3362;
                            _3350 = _3644 + _3363;
                            _3345 = _3639 + _3358;
                            _3346 = _3640 + _3359;
                            _3347 = _3641 + _3360;
                            if (_3365 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3348;
                                _3362 = _3349;
                                _3363 = _3350;
                                _3364 = _3365;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3350;
                        frontier_phi_77_pred_1 = _3349;
                        frontier_phi_77_pred_2 = _3348;
                        frontier_phi_77_pred_3 = _3347;
                        frontier_phi_77_pred_4 = _3346;
                        frontier_phi_77_pred_5 = _3345;
                    }
                    _2987 = frontier_phi_77_pred;
                    _2985 = frontier_phi_77_pred_1;
                    _2983 = frontier_phi_77_pred_2;
                    _2981 = frontier_phi_77_pred_3;
                    _2979 = frontier_phi_77_pred_4;
                    _2977 = frontier_phi_77_pred_5;
                    uint _3143 = _3142 + 1u;
                    if (_3143 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3136 = _2977;
                        _3137 = _2979;
                        _3138 = _2981;
                        _3139 = _2983;
                        _3140 = _2985;
                        _3141 = _2987;
                        _3142 = _3143;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2981;
                frontier_phi_58_59_ladder_1 = _2987;
                frontier_phi_58_59_ladder_2 = _2985;
                frontier_phi_58_59_ladder_3 = _2983;
                frontier_phi_58_59_ladder_4 = _2979;
                frontier_phi_58_59_ladder_5 = _2977;
            }
            else
            {
                frontier_phi_58_59_ladder = _2859;
                frontier_phi_58_59_ladder_1 = _2865;
                frontier_phi_58_59_ladder_2 = _2863;
                frontier_phi_58_59_ladder_3 = _2861;
                frontier_phi_58_59_ladder_4 = _2857;
                frontier_phi_58_59_ladder_5 = _2855;
            }
            _2976 = frontier_phi_58_59_ladder_5;
            _2978 = frontier_phi_58_59_ladder_4;
            _2980 = frontier_phi_58_59_ladder;
            _2982 = frontier_phi_58_59_ladder_3;
            _2984 = frontier_phi_58_59_ladder_2;
            _2986 = frontier_phi_58_59_ladder_1;
        }
        float _2991 = isnan(1.0) ? _1004 : (isnan(_1004) ? 1.0 : min(_1004, 1.0));
        _2767 = (_2991 * _2982) + _2203;
        _2769 = (_2991 * _2984) + _2205;
        _2771 = (_2991 * _2986) + _2207;
        _2773 = ((_2976 * _988) * _2991) + _2548;
        _2775 = ((_2978 * _990) * _2991) + _2550;
        _2777 = ((_2980 * _991) * _2991) + _2552;
    }
    else
    {
        _2767 = _2203;
        _2769 = _2205;
        _2771 = _2207;
        _2773 = _2548;
        _2775 = _2550;
        _2777 = _2552;
    }
    float _4771 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _4782 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _4793 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2794 = ((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2767 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1004))) + ((_2773 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _2795 = ((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2769 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1004))) + ((_2775 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    float _2796 = ((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2771 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1004))) + ((_2777 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1843)) * cbPerFrame._m0[3u].x);
    uint _2797 = _259 + 6u;
    float _2805 = _926 / cbSceneParam._m0[86u].x;
    float _2806 = _927 / cbSceneParam._m0[86u].y;
    vec4 _2820 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2822 = _2820.x;
    float _2823 = _2820.y;
    float _2824 = _2820.z;
    float _2825 = _2820.w;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _2880 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _2881 = _2880 / _849;
        float _2892 = _2881 * _899;
        float _2893 = _900 * _2881;
        float _2894 = (-0.0) - _2893;
        float _2896 = _2881 * _901;
        float _2898 = (cbSceneParam._m0[77u].w * _2894) / _2880;
        float _2899 = _2898 + cbSceneParam._m0[79u].w;
        float _2900 = cbSceneParam._m0[79u].w - _2893;
        float _2906 = sqrt(((_2892 * _2892) + (_2893 * _2893)) + (_2896 * _2896));
        float _2909 = (1.0 - (cbSceneParam._m0[77u].w / _2880)) * _2906;
        float _2914 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2916 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3093;
        if (abs((_2894 - _2898) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3093 = ((((_2899 > 0.0) ? exp2(_2914 * _2899) : (2.0 - exp2(_2916 * _2899))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2909;
        }
        else
        {
            float _3037 = 1.0 / cbSceneParam._m0[80u].x;
            float _3038 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : max(_2899, _2900));
            float _3039 = isnan(_2900) ? _2899 : (isnan(_2899) ? _2900 : min(_2899, _2900));
            float _3048 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : min(_3038, 0.0));
            float _3049 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : min(_3039, 0.0));
            _3093 = ((abs(_2906 / _2894) * cbSceneParam._m0[80u].y) * ((((_3048 - _3049) * 2.0) - ((exp2(_2914 * (isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0)))) - exp2(_2914 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))))) * _3037)) - ((exp2(_2916 * _3048) - exp2(_2916 * _3049)) * _3037))) + (_2909 * cbSceneParam._m0[80u].z);
        }
        vec4 _3095 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2805, _2806, 1.0), 0.0);
        float _3104 = exp2((_3093 * (-1.44269502162933349609375)) * (1.0 - _3095.w));
        float _3105 = log2(_3104);
        float _3121 = log2(_2825);
        _2918 = (exp2(_3121 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].x)) * _3095.x) / cbSceneParam._m0[78u].x)) + _2822;
        _2920 = (exp2(_3121 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].y)) * _3095.y) / cbSceneParam._m0[78u].y)) + _2823;
        _2922 = (exp2(_3121 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3105 * cbSceneParam._m0[78u].z)) * _3095.z) / cbSceneParam._m0[78u].z)) + _2824;
        _2924 = _3104 * _2825;
    }
    else
    {
        _2918 = _2822;
        _2920 = _2823;
        _2922 = _2824;
        _2924 = _2825;
    }
    bool _3131;
    vec4 _2934;
    vec4 _2956;
    float _2958;
    float _2962;
    float _2963;
    float _2964;
    float _2965;
    bool _2975;
    for (;;)
    {
        _2934 = cbMatDynParam._m0[0u];
        float _2936 = roundEven(_2934.y);
        bool _2937 = _2936 == 3.0;
        float _2938 = log2(_2924);
        float _2945 = exp2(_2938 * cbSceneParam._m0[78u].x) * _2794;
        float _2946 = exp2(_2938 * cbSceneParam._m0[78u].y) * _2795;
        float _2947 = exp2(_2938 * cbSceneParam._m0[78u].z) * _2796;
        float _2954 = _915 + (-0.5);
        _2956 = cbMtdParam._m0[1u];
        _2958 = _2956.y * _2954;
        float _2961 = (_2936 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2962 = _2961 * (_2937 ? _2945 : (_2945 + (cbSceneParam._m0[72u].w * _2918)));
        _2963 = _2961 * (_2937 ? _2946 : (_2946 + (cbSceneParam._m0[72u].w * _2920)));
        _2964 = _2961 * (_2937 ? _2947 : (_2947 + (cbSceneParam._m0[72u].w * _2922)));
        _2965 = _2954 * 0.999000012874603271484375;
        _2975 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2975)
        {
            if ((cbInstanceData._m0[_259 + 7u].x + _2965) < 0.5)
            {
                _3131 = true;
                break;
            }
        }
        uint _3072 = _964 + uint(_2934.w);
        if ((cbInstanceData._m0[_3072].w < 1.0) && ((cbInstanceData._m0[_3072].w + _2965) < 0.5))
        {
            _3131 = true;
            break;
        }
        if ((_2958 + 1.0) < _2956.x)
        {
            _3131 = true;
            break;
        }
        _3131 = false;
        break;
    }
    float _3336;
    if (_3131)
    {
        discard_state = true;
        _3336 = 0.0;
    }
    else
    {
        _3336 = cbInstanceData._m0[_2797].w;
    }
    SV_Target.x = _2962;
    SV_Target.y = _2963;
    SV_Target.z = _2964;
    SV_Target.w = _3336;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2797].w;
    discard_exit();
}


