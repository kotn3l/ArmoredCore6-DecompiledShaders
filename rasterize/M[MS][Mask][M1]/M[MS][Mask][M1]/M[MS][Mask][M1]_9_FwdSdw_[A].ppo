#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1379;
float _4045;
float _4046;
float _4047;
float _4048;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4057 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _4068 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _4079 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _341 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _367 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _372 = _367.x * cbMtdParam._m0[11u].x;
    float _373 = _367.y * cbMtdParam._m0[11u].y;
    float _374 = _367.z * cbMtdParam._m0[11u].z;
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _443 = _441.x;
    float _455 = dot(vec4(_443, _441.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _472 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_443 - _455) * cbMtdParam._m0[23u].w) + _455) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4090 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _473 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _483 = (_341.x * cbMtdParam._m0[9u].x) * ((_473 * ((_393.x * cbMtdParam._m0[12u].x) - _372)) + _372);
    float _484 = (_341.y * cbMtdParam._m0[9u].y) * ((_473 * ((_393.y * cbMtdParam._m0[12u].y) - _373)) + _373);
    float _485 = (_341.z * cbMtdParam._m0[9u].z) * ((_473 * ((_393.z * cbMtdParam._m0[12u].z) - _374)) + _374);
    float _489 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _483;
    float _492 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _484;
    float _495 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _485;
    float _503 = (((_483 - _489) * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) + _489) * 4.55000019073486328125;
    float _505 = (((_484 - _492) * (isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0)))) + _492) * 4.55000019073486328125;
    float _507 = (((_485 - _495) * (isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0)))) + _495) * 4.55000019073486328125;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _564 = _562.x;
    float _565 = _562.y;
    float _566 = _562.z;
    float _575 = ((_545.z - _566) * _473) + _566;
    float _578 = ((((_545.x - _564) * _473) + _564) * 2.0) + (-1.0);
    float _579 = ((((_545.y - _565) * _473) + _565) * 2.0) + (-1.0);
    float _580 = dot(vec2(_578, _579), vec2(_578, _579));
    float _4101 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _585 = sqrt(1.0 - (isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _619 = (_578 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_520.x * 2.0) + (-1.0)))) + (((_607.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _620 = (_579 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_520.y * 2.0) + (-1.0)))) + (((_607.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _634 = _632.x;
    float _635 = 1.0 - _634;
    float _664 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_634 - _635) * cbMtdParam._m0[24u].w) + _635) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4112 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _665 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _673 = ((((cbMtdParam._m0[10u].x - _503) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _665) + _503;
    float _674 = ((((cbMtdParam._m0[10u].y - _505) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _665) + _505;
    float _675 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _507)) * _665) + _507;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _703 = _701.x;
    float _720 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _703) * _473) + _703;
    float _724 = ((_687.x - _720) * cbMtdParam._m0[19u].z) + _720;
    float _726 = _724 - (_724 * _665);
    float _731 = (((_520.z - _575) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _575;
    float _735 = ((_607.z - _731) * cbMtdParam._m0[19u].w) + _731;
    float _739 = ((cbMtdParam._m0[23u].x - _735) * _665) + _735;
    vec4 _758 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _764 = (_758.x * 2.0) + (-1.0);
    float _765 = (_758.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _4123 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _782 = (_665 * (((cbMtdParam._m0[22u].z * _619) - _619) + _764)) + _619;
    float _783 = (_665 * (((cbMtdParam._m0[22u].z * _620) - _620) + _765)) + _620;
    float _784 = (_665 * (sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) - _585)) + _585;
    float _786 = cbMtdParam._m0[22u].x + _607.w;
    float _789 = fma(_784, _253 * NORMAL.x, fma(_783, _260 * TANGENT.x, (_246 * _238) * _782));
    float _792 = fma(_784, _253 * NORMAL.y, fma(_783, _260 * TANGENT.y, (_246 * _239) * _782));
    float _795 = fma(_784, _253 * NORMAL.z, fma(_783, _260 * TANGENT.z, (_246 * _240) * _782));
    float _799 = inversesqrt(dot(vec3(_789, _792, _795), vec3(_789, _792, _795)));
    float _800 = _799 * _789;
    float _801 = _799 * _792;
    float _802 = _799 * _795;
    float _4134 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _803 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _4156 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _4167 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _4178 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _4189 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _808 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _822 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _862 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _872 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _862);
    float _873 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _862);
    float _874 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _862);
    float _878 = inversesqrt(dot(vec3(_872, _873, _874), vec3(_872, _873, _874)));
    float _879 = _872 * _878;
    float _880 = _873 * _878;
    float _881 = _874 * _878;
    vec4 _886 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _888 = _886.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1060 = sqrt(((_872 * _872) + (_873 * _873)) + (_874 * _874));
        float _1066 = (cbMatDynParam._m0[5u].x * _1060) + cbMatDynParam._m0[5u].y;
        float _4200 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1071 = (cbMatDynParam._m0[5u].z * _1060) + cbMatDynParam._m0[5u].w;
        float _4211 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) - _1067)) + _1067) < ((_888 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _899 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _900 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _918 = fma(_802, cbSceneParam._m0[5u].z, fma(_801, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _800));
    float _921 = fma(_802, cbSceneParam._m0[6u].z, fma(_801, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _800));
    float _924 = fma(_802, cbSceneParam._m0[7u].z, fma(_801, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _800));
    uint _937 = _285 + 9u;
    uint _938 = _937 + uint(cbMatDynParam._m0[0u].w);
    float _944 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * cbInstanceData._m0[_938].x;
    float _945 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * cbInstanceData._m0[_938].y;
    float _946 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * cbInstanceData._m0[_938].z;
    float _4222 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _4244 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _950 = 1.0 - _808;
    float _951 = _947 * _950;
    float _952 = _948 * _950;
    float _953 = _949 * _950;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _808;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _808;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _808;
    float _961 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    float _964 = _960 + 0.039999999105930328369140625;
    vec4 _973 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _899, cbSceneParam._m0[86u].y * _900));
    float _977 = ((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * TEXCOORD_5.w) * _973.x;
    float _978 = dot(vec3(_800, _801, _802), vec3(_879, _880, _881));
    float _981 = _978 * 2.0;
    float _985 = (_981 * _800) - _879;
    float _986 = (_981 * _801) - _880;
    float _987 = (_981 * _802) - _881;
    float _991 = abs(dot(vec3(_879, _880, _881), vec3(_800, _801, _802)));
    float _4255 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _993 = sqrt(_803);
    float _1006 = exp2((_993 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_993 * 3.0));
    float _1012 = (1.0 - _1006) * ((_993 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1013 = _1006 * _993;
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1049, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041));
        float _1107 = fma(_1049, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041));
        float _1111 = fma(_1049, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041));
        float _1136 = _1041 + _800;
        float _1137 = _1045 + _801;
        float _1138 = _1049 + _802;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_800, _801, _802), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4303 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_800, _801, _802), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4336 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_800, _801, _802), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4369 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1049, cbModelParam._m0[30u].z, fma(_1045, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1041));
        float _1425 = fma(_1049, cbModelParam._m0[31u].z, fma(_1045, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1041));
        float _1429 = fma(_1049, cbModelParam._m0[32u].z, fma(_1045, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1041));
        float _1452 = _1041 + _800;
        float _1453 = _1045 + _801;
        float _1454 = _1049 + _802;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_800, _801, _802), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4410 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4421 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4432 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_800, _801, _802), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4443 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4454 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4465 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_800, _801, _802), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4476 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4487 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4498 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1379;
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = _1379;
        _1698 = _1379;
        _1699 = _1379;
        _1700 = _1379;
        _1701 = _1379;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _985 * 0.5;
    float _1759 = _986 * 0.5;
    float _1760 = _987 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _803);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1049, cbModelParam._m0[13u].z, fma(_1045, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1041)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1049, cbModelParam._m0[14u].z, fma(_1045, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1041)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1049, cbModelParam._m0[15u].z, fma(_1045, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1041)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_987, cbModelParam._m0[13u].z, fma(_986, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _985));
        float _1890 = fma(_987, cbModelParam._m0[14u].z, fma(_986, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _985));
        float _1893 = fma(_987, cbModelParam._m0[15u].z, fma(_986, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _985));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2094;
        if (_1890 > 0.0)
        {
            _2094 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2094 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1893 > 0.0)
        {
            _2389 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2094) ? _1921 : (isnan(_1921) ? _2094 : min(_1921, _2094));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1887) + _1876;
        float _2397 = (_2392 * _1890) + _1880;
        float _2398 = (_2392 * _1893) + _1884;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2543 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_16_38_ladder = _2543.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2543.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2543.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_985, _986, _987), _1827);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _803);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1973 = fma(_1049, cbModelParam._m0[21u].z, fma(_1045, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1041)) + cbModelParam._m0[21u].w;
        float _1977 = fma(_1049, cbModelParam._m0[22u].z, fma(_1045, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1041)) + cbModelParam._m0[22u].w;
        float _1981 = fma(_1049, cbModelParam._m0[23u].z, fma(_1045, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1041)) + cbModelParam._m0[23u].w;
        float _1984 = fma(_987, cbModelParam._m0[21u].z, fma(_986, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _985));
        float _1987 = fma(_987, cbModelParam._m0[22u].z, fma(_986, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _985));
        float _1990 = fma(_987, cbModelParam._m0[23u].z, fma(_986, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _985));
        float _2099;
        if (_1984 > 0.0)
        {
            _2099 = abs((1.0 - _1973) / _1984);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1973 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2099 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1987 > 0.0)
        {
            _2416 = abs((1.0 - _1977) / _1987);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1977 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2754;
        if (_1990 > 0.0)
        {
            _2754 = abs((1.0 - _1981) / _1990);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1981 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2754 = frontier_phi_50_47_ladder;
        }
        float _2756 = isnan(_2416) ? _2099 : (isnan(_2099) ? _2416 : min(_2099, _2416));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _1984) + _1973;
        float _2762 = (_2757 * _1987) + _1977;
        float _2763 = (_2757 * _1990) + _1981;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2885 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_50_ladder = _2885.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2885.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2885.x * cbModelParam._m0[1u].z;
        }
        _2009 = frontier_phi_25_50_ladder_2;
        _2011 = frontier_phi_25_50_ladder_1;
        _2013 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_985, _986, _987), _1918);
        _2009 = _1993.x * cbModelParam._m0[1u].z;
        _2011 = _1993.y * cbModelParam._m0[1u].z;
        _2013 = _1993.z * cbModelParam._m0[1u].z;
    }
    float _2026 = (((_1012 * _961) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2009 - _1909)) + _1909);
    float _2028 = (((_1012 * _963) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2011 - _1911)) + _1911);
    float _2030 = (((_1012 * _964) + _1013) * _977) * ((cbModelParam._m0[1u].w * (_2013 - _1913)) + _1913);
    float _2033 = fma(_2030, cbSceneParam._m0[89u].z, fma(_2028, cbSceneParam._m0[89u].y, _2026 * cbSceneParam._m0[89u].x));
    float _2036 = fma(_2030, cbSceneParam._m0[90u].z, fma(_2028, cbSceneParam._m0[90u].y, _2026 * cbSceneParam._m0[90u].x));
    float _2039 = fma(_2030, cbSceneParam._m0[91u].z, fma(_2028, cbSceneParam._m0[91u].y, _2026 * cbSceneParam._m0[91u].x));
    float _2073 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2077 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2081 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2085 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2086 = _2073 / _2085;
    float _2087 = _2077 / _2085;
    float _2088 = _2081 / _2085;
    float _2235;
    float _2236;
    float _2237;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2115 = ((uint(_2088 > cbSceneParam._m0[59u].y) + uint(_2088 > cbSceneParam._m0[59u].x)) + uint(_2088 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2116 = _2115 + 43u;
        uint _2124 = _2115 + 44u;
        uint _2132 = _2115 + 45u;
        uint _2140 = _2115 + 46u;
        float _2151 = fma(_2085, cbSceneParam._m0[_2116].w, fma(_2081, cbSceneParam._m0[_2116].z, fma(_2077, cbSceneParam._m0[_2116].y, _2073 * cbSceneParam._m0[_2116].x)));
        float _2155 = fma(_2085, cbSceneParam._m0[_2124].w, fma(_2081, cbSceneParam._m0[_2124].z, fma(_2077, cbSceneParam._m0[_2124].y, _2073 * cbSceneParam._m0[_2124].x)));
        float _2163 = fma(_2085, cbSceneParam._m0[_2140].w, fma(_2081, cbSceneParam._m0[_2140].z, fma(_2077, cbSceneParam._m0[_2140].y, _2073 * cbSceneParam._m0[_2140].x)));
        float _2168 = cbSceneParam._m0[33u].z * _2163;
        float _2170 = cbSceneParam._m0[33u].w * _2163;
        float _2173 = fma(_2085, cbSceneParam._m0[_2132].w, fma(_2081, cbSceneParam._m0[_2132].z, fma(_2077, cbSceneParam._m0[_2132].y, _2073 * cbSceneParam._m0[_2132].x))) / _2163;
        float _2221 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
        float _4624 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2228 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2151) / _2163, (_2170 + _2155) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2170 + _2151) / _2163, (_2155 - _2168) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2168) / _2163, (_2155 - _2170) / _2163), _2173), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2151 - _2170) / _2163, (_2168 + _2155) / _2163), _2173), 0.0)).x), vec4(0.25)));
        _2235 = 1.0 - (_2228 * cbSceneParam._m0[34u].x);
        _2236 = 1.0 - (_2228 * cbSceneParam._m0[34u].y);
        _2237 = 1.0 - (_2228 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2235 = 1.0;
        _2236 = 1.0;
        _2237 = 1.0;
    }
    float _2301;
    float _2303;
    float _2305;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2289 = fma(_2085, cbSceneParam._m0[63u].w, fma(_2081, cbSceneParam._m0[63u].z, fma(_2077, cbSceneParam._m0[63u].y, _2073 * cbSceneParam._m0[63u].x)));
        float _2290 = fma(_2085, cbSceneParam._m0[60u].w, fma(_2081, cbSceneParam._m0[60u].z, fma(_2077, cbSceneParam._m0[60u].y, _2073 * cbSceneParam._m0[60u].x))) / _2289;
        float _2291 = fma(_2085, cbSceneParam._m0[61u].w, fma(_2081, cbSceneParam._m0[61u].z, fma(_2077, cbSceneParam._m0[61u].y, _2073 * cbSceneParam._m0[61u].x))) / _2289;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2290 >= cbSceneParam._m0[64u].x) && (_2291 >= cbSceneParam._m0[64u].y)) && (_2290 <= cbSceneParam._m0[64u].z)) && (_2291 <= cbSceneParam._m0[64u].w))
        {
            float _2429 = fma(_2085, cbSceneParam._m0[62u].w, fma(_2081, cbSceneParam._m0[62u].z, fma(_2077, cbSceneParam._m0[62u].y, _2073 * cbSceneParam._m0[62u].x))) / _2289;
            float _2433 = isnan(cbSceneParam._m0[41u].w) ? _2429 : (isnan(_2429) ? cbSceneParam._m0[41u].w : max(_2429, cbSceneParam._m0[41u].w));
            float _2476 = (cbSceneParam._m0[33u].x - sqrt(((_2087 * _2087) + (_2086 * _2086)) + (_2088 * _2088))) * cbSceneParam._m0[33u].y;
            float _4640 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
            float _2483 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2290, cbSceneParam._m0[33u].w + _2291), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2290, _2291 - cbSceneParam._m0[33u].z), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].z, _2291 - cbSceneParam._m0[33u].w), _2433), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2290 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2291), _2433), 0.0)).x), vec4(0.25)));
            float _2487 = 1.0 - (_2483 * cbSceneParam._m0[34u].x);
            float _2488 = 1.0 - (_2483 * cbSceneParam._m0[34u].y);
            float _2489 = 1.0 - (_2483 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2489) ? _2237 : (isnan(_2237) ? _2489 : min(_2237, _2489));
            frontier_phi_37_36_ladder_1 = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_37_36_ladder_2 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
        }
        else
        {
            frontier_phi_37_36_ladder = _2237;
            frontier_phi_37_36_ladder_1 = _2236;
            frontier_phi_37_36_ladder_2 = _2235;
        }
        _2301 = frontier_phi_37_36_ladder_2;
        _2303 = frontier_phi_37_36_ladder_1;
        _2305 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2301 = _2235;
        _2303 = _2236;
        _2305 = _2237;
    }
    uvec4 _2310 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2312 = _2310.x * 14u;
    uint _2313 = _2312 + 13u;
    float _2320 = _977 + (-1.0);
    float _2325 = (cbLight._m0[_2313].x * _2320) + 1.0;
    float _2326 = (cbLight._m0[_2313].y * _2320) + 1.0;
    float _2327 = (cbLight._m0[_2313].z * _2320) + 1.0;
    float _2328 = (cbLight._m0[_2313].w * _2320) + 1.0;
    uint _2329 = _2312 + 5u;
    float _2335 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
    uint _2339 = _2312 + 4u;
    float _2348 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2352 = _2312 | 1u;
    float _2363 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_800, _801, _802));
    float _2366 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_800, _801, _802));
    float _4676 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _4687 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2371 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * 0.3183098733425140380859375;
    float _2373 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * 0.3183098733425140380859375;
    float _2380 = ((cbLight._m0[_2329].x * _2335) * _2373) + (((cbLight._m0[_2339].x * _2301) * _2348) * _2371);
    float _2381 = ((_2335 * cbLight._m0[_2329].y) * _2373) + (((cbLight._m0[_2339].y * _2303) * _2348) * _2371);
    float _2382 = ((_2335 * cbLight._m0[_2329].z) * _2373) + (((cbLight._m0[_2339].z * _2305) * _2348) * _2371);
    uvec4 _2386 = floatBitsToUint(cbLight._m0[_2312 + 12u]);
    bool _2388 = _2386.x == 0u;
    float _2490;
    float _2492;
    float _2494;
    if (_2388)
    {
        _2490 = _2380;
        _2492 = _2381;
        _2494 = _2382;
    }
    else
    {
        uint _2498 = _2312 + 6u;
        float _2514 = (dot(vec3(cbLight._m0[_2312 + 2u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2515 = _2514 * _2514;
        float _4698 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2516 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2517 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2490 = (((cbLight._m0[_2498].x * 0.3183098733425140380859375) * _2516) * _2517) + _2380;
        _2492 = (((cbLight._m0[_2498].y * 0.3183098733425140380859375) * _2516) * _2517) + _2381;
        _2494 = (((cbLight._m0[_2498].z * 0.3183098733425140380859375) * _2516) * _2517) + _2382;
    }
    bool _2497 = _2386.y == 0u;
    float _2552;
    float _2554;
    float _2556;
    if (_2497)
    {
        _2552 = _2490;
        _2554 = _2492;
        _2556 = _2494;
    }
    else
    {
        uint _2725 = _2312 + 7u;
        float _2741 = (dot(vec3(cbLight._m0[_2312 + 3u].xyz), vec3(_800, _801, _802)) * 0.5) + 0.5;
        float _2742 = _2741 * _2741;
        float _4714 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2743 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2744 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2552 = (((cbLight._m0[_2725].x * 0.3183098733425140380859375) * _2743) * _2744) + _2490;
        _2554 = (((cbLight._m0[_2725].y * 0.3183098733425140380859375) * _2743) * _2744) + _2492;
        _2556 = (((cbLight._m0[_2725].z * 0.3183098733425140380859375) * _2743) * _2744) + _2494;
    }
    uint _2559 = _2312 + 8u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _803) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2312].x + _879;
    float _2575 = cbLight._m0[_2312].y + _880;
    float _2576 = cbLight._m0[_2312].z + _881;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2312].xyz));
    float _4730 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _4741 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _2588 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2589 = dot(vec3(_800, _801, _802), vec3(_2581, _2582, _2583));
    float _4752 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2581, _2582, _2583));
    float _4763 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2573 * _2573;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2610 = 0.959999978542327880859375 - _958;
    float _2612 = 0.959999978542327880859375 - _959;
    float _2613 = 0.959999978542327880859375 - _960;
    float _2620 = 1.0 - _2573;
    float _2631 = (0.5 / (((_2588 * ((_2587 * _2620) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2620) + _2573) * _2587))) * _2587;
    float _4774 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2633 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    uint _2647 = _2312 + 9u;
    float _2658 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _803) * 0.949999988079071044921875);
    float _2659 = _2658 * _2658;
    float _2660 = cbLight._m0[_2352].x + _879;
    float _2661 = cbLight._m0[_2352].y + _880;
    float _2662 = cbLight._m0[_2352].z + _881;
    float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
    float _2667 = _2666 * _2660;
    float _2668 = _2666 * _2661;
    float _2669 = _2666 * _2662;
    float _2670 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2352].xyz));
    float _4785 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
    float _2673 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2674 = dot(vec3(_800, _801, _802), vec3(_2667, _2668, _2669));
    float _4796 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2678 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2667, _2668, _2669));
    float _4807 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2682 = _2659 * _2659;
    float _2686 = ((_2677 * _2677) * (_2682 + (-1.0))) + 1.0;
    float _2693 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
    float _2700 = 1.0 - _2659;
    float _2710 = (0.5 / (((_2588 * ((_2673 * _2700) + _2659)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2700) + _2659) * _2673))) * _2673;
    float _4818 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2712 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2682 / ((_2686 * _2686) * 3.141590118408203125));
    float _2722 = (((((_2693 * _2610) + _961) * cbLight._m0[_2647].x) * _2712) * _2335) + ((((cbLight._m0[_2559].x * _2301) * ((_2609 * _2610) + _961)) * _2633) * _2348);
    float _2723 = (((((_2693 * _2612) + _963) * cbLight._m0[_2647].y) * _2712) * _2335) + ((((cbLight._m0[_2559].y * _2303) * ((_2609 * _2612) + _963)) * _2633) * _2348);
    float _2724 = (((((_2693 * _2613) + _964) * cbLight._m0[_2647].z) * _2712) * _2335) + ((((cbLight._m0[_2559].z * _2305) * ((_2609 * _2613) + _964)) * _2633) * _2348);
    float _2780;
    float _2782;
    float _2784;
    if (_2388)
    {
        _2780 = _2722;
        _2782 = _2723;
        _2784 = _2724;
    }
    else
    {
        uint _2786 = _2312 + 2u;
        uint _2790 = _2312 + 10u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _803) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _879;
        float _2807 = cbLight._m0[_2786].y + _880;
        float _2808 = cbLight._m0[_2786].z + _881;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2786].xyz));
        float _4829 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2820 = dot(vec3(_800, _801, _802), vec3(_2813, _2814, _2815));
        float _4840 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4851 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2846 = 1.0 - _2805;
        float _2856 = (0.5 / (((_2588 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2846) + _2805) * _2819))) * _2819;
        float _4862 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2780 = (((((_2839 * _2610) + _961) * cbLight._m0[_2790].x) * _2858) * _2859) + _2722;
        _2782 = (((((_2839 * _2612) + _963) * cbLight._m0[_2790].y) * _2858) * _2859) + _2723;
        _2784 = (((((_2839 * _2613) + _964) * cbLight._m0[_2790].z) * _2858) * _2859) + _2724;
    }
    float _2890;
    float _2892;
    float _2894;
    if (_2497)
    {
        _2890 = _2780;
        _2892 = _2782;
        _2894 = _2784;
    }
    else
    {
        uint _2901 = _2312 + 3u;
        uint _2905 = _2312 + 11u;
        float _2919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2901].w)) * _803) * 0.949999988079071044921875);
        float _2920 = _2919 * _2919;
        float _2921 = cbLight._m0[_2901].x + _879;
        float _2922 = cbLight._m0[_2901].y + _880;
        float _2923 = cbLight._m0[_2901].z + _881;
        float _2927 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
        float _2928 = _2927 * _2921;
        float _2929 = _2927 * _2922;
        float _2930 = _2927 * _2923;
        float _2931 = dot(vec3(_800, _801, _802), vec3(cbLight._m0[_2901].xyz));
        float _4878 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2934 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2935 = dot(vec3(_800, _801, _802), vec3(_2928, _2929, _2930));
        float _4889 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
        float _2938 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2939 = dot(vec3(cbLight._m0[_2901].xyz), vec3(_2928, _2929, _2930));
        float _4900 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2943 = _2920 * _2920;
        float _2947 = ((_2938 * _2938) * (_2943 + (-1.0))) + 1.0;
        float _2954 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
        float _2961 = 1.0 - _2920;
        float _2971 = (0.5 / (((_2588 * ((_2934 * _2961) + _2920)) + 9.9999999392252902907785028219223e-09) + (((_2588 * _2961) + _2920) * _2934))) * _2934;
        float _4911 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2973 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2943 / ((_2947 * _2947) * 3.141590118408203125));
        float _2974 = isnan(1.0) ? _2328 : (isnan(_2328) ? 1.0 : min(_2328, 1.0));
        _2890 = (((((_2954 * _2610) + _961) * cbLight._m0[_2905].x) * _2973) * _2974) + _2780;
        _2892 = (((((_2954 * _2612) + _963) * cbLight._m0[_2905].y) * _2973) * _2974) + _2782;
        _2894 = (((((_2954 * _2613) + _964) * cbLight._m0[_2905].z) * _2973) * _2974) + _2784;
    }
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_2310.y == 0u)
    {
        uvec4 _2995 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2996 = _2995.x;
        uint _3007 = uint((float(_2995.y) * floor(float(uint(cbSceneParam._m0[85u].y * _900) / _2996))) + floor(float(uint(cbSceneParam._m0[85u].x * _899) / _2996)));
        float _3017 = (log2(_2088 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3018 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
        uint _3021 = uint(isnan(14.0) ? _3018 : (isnan(_3018) ? 14.0 : min(_3018, 14.0)));
        uvec4 _3026 = texelFetch(g_lightClusterGridBuffer, int(((_3021 << 2u) + (_3007 << 6u)) >> 2u));
        uint _3027 = _3026.x;
        uint _3028 = _2995.z;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((((1u << ((_3028 >> 4u) & 15u)) + 4294967295u) & _3027) == 0u) || ((_3028 & 240u) == 0u))
        {
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
        }
        else
        {
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3276)
                {
                    frontier_phi_71_pred = _3265;
                    frontier_phi_71_pred_1 = _3264;
                    frontier_phi_71_pred_2 = _3263;
                    frontier_phi_71_pred_3 = _3262;
                    frontier_phi_71_pred_4 = _3261;
                    frontier_phi_71_pred_5 = _3260;
                }
                else
                {
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    uint _3411;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3275;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    for (;;)
                    {
                        uint _3415 = uint(findLSB(_3411)) + (_3266 << 5u);
                        uint _3412 = (_3411 + 4294967295u) & _3411;
                        uint _3417 = _3415 * 48u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3437 = (_3415 * 48u) + 4u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3456 = (_3415 * 48u) + 8u;
                        vec3 _3467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x));
                        float _3471 = _3431.x - _2086;
                        float _3472 = _3431.y - _2087;
                        float _3473 = _3431.z - _2088;
                        float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                        float _3477 = inversesqrt(_3474);
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3481 = dot(vec3(_918, _921, _924), vec3(_3478, _3479, _3480));
                        float _3486 = 1.0 - (_3474 * _3431.w);
                        float _4937 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3487 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3488 = sqrt(_3474) * _3450.w;
                        float _3491 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3481) + _3492;
                        float _3498 = _3488 * _3488;
                        float _3502 = ((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3487) / ((_3498 * 0.699999988079071044921875) + 1.0);
                        float _3506 = (-0.0) - _2086;
                        float _3507 = (-0.0) - _2087;
                        float _3508 = (-0.0) - _2088;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3522 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                        float _3523 = 1.0 - _993;
                        float _3530 = sqrt(1.0 - ((1.0 - (_3523 * _3523)) * (1.0 - (_3522 * _3522))));
                        float _3531 = _3530 * _3530;
                        float _3532 = _3531 * _3531;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3535 = _3515 + _3480;
                        float _3539 = inversesqrt(dot(vec3(_3533, _3534, _3535), vec3(_3533, _3534, _3535)));
                        float _3543 = dot(vec3(_918, _921, _924), vec3(_3513, _3514, _3515));
                        float _4953 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3546 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3547 = dot(vec3(_918, _921, _924), vec3(_3539 * _3533, _3539 * _3534, _3539 * _3535));
                        float _4964 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3550 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3554 = ((_3550 * _3550) * (_3532 + (-1.0))) + 1.0;
                        float _3555 = _3491 * _3531;
                        float _3556 = _3555 * _3555;
                        float _3559 = ((1.0 - _3556) * _3481) + _3556;
                        float _4975 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3560 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3561 = 1.0 - _3531;
                        float _3571 = (0.5 / (((_3560 * ((_3546 * _3561) + _3531)) + 9.9999999392252902907785028219223e-09) + (((_3560 * _3561) + _3531) * _3546))) * _3560;
                        float _4986 = isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0));
                        float _3582 = (((_3532 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3554 * _3554) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125))) * _3487;
                        _3335 = (_3502 * _3450.x) + _3408;
                        _3336 = (_3502 * _3450.y) + _3409;
                        _3337 = (_3502 * _3450.z) + _3410;
                        _3332 = (_3582 * _3467.x) + _3405;
                        _3333 = (_3582 * _3467.y) + _3406;
                        _3334 = (_3582 * _3467.z) + _3407;
                        if (_3412 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3412;
                        }
                    }
                    frontier_phi_71_pred = _3337;
                    frontier_phi_71_pred_1 = _3336;
                    frontier_phi_71_pred_2 = _3335;
                    frontier_phi_71_pred_3 = _3334;
                    frontier_phi_71_pred_4 = _3333;
                    frontier_phi_71_pred_5 = _3332;
                }
                _3118 = frontier_phi_71_pred;
                _3116 = frontier_phi_71_pred_1;
                _3114 = frontier_phi_71_pred_2;
                _3112 = frontier_phi_71_pred_3;
                _3110 = frontier_phi_71_pred_4;
                _3108 = frontier_phi_71_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3108;
                    _3261 = _3110;
                    _3262 = _3112;
                    _3263 = _3114;
                    _3264 = _3116;
                    _3265 = _3118;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
        }
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.z;
        uint _3124 = (_3122 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3124) & _3027) == 0u)
        {
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2086, _2087, _2088), vec3(_2086, _2087, _2088)));
            float _3254 = _3253 * _2086;
            float _3255 = _3253 * _2087;
            float _3256 = _3253 * _2088;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3124 < ((_3122 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3388 = _3107;
                float _3389 = _3109;
                float _3390 = _3111;
                float _3391 = _3113;
                float _3392 = _3115;
                float _3393 = _3117;
                uint _3394 = _3124;
                uint _3403;
                bool _3404;
                for (;;)
                {
                    _3403 = texelFetch(g_lightClassification, int((((_3021 << 5u) + (_3007 << 9u)) + (_3394 << 2u)) >> 2u)).x;
                    _3404 = _3403 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3404)
                    {
                        frontier_phi_82_pred = _3393;
                        frontier_phi_82_pred_1 = _3392;
                        frontier_phi_82_pred_2 = _3391;
                        frontier_phi_82_pred_3 = _3390;
                        frontier_phi_82_pred_4 = _3389;
                        frontier_phi_82_pred_5 = _3388;
                    }
                    else
                    {
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        float _3614 = _3393;
                        uint _3615 = _3403;
                        uint _3616;
                        vec4 _3641;
                        float _3642;
                        vec4 _3657;
                        vec3 _3669;
                        vec4 _3684;
                        vec4 _3699;
                        float _3745;
                        bool _3746;
                        for (;;)
                        {
                            uint _3626 = ((_3394 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3615));
                            _3616 = (_3615 + 4294967295u) & _3615;
                            uint _3628 = _3626 * 40u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            _3642 = _3641.w;
                            uint _3644 = (_3626 * 40u) + 4u;
                            _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3659 = (_3626 * 40u) + 8u;
                            _3669 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x));
                            uint _3671 = (_3626 * 40u) + 16u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3626 * 40u) + 20u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3626 * 40u) + 24u;
                            vec4 _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3720 = (_3626 * 40u) + 28u;
                            vec4 _3733 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3720 + 3u)).x));
                            _3745 = fma(_2088, _3733.z, fma(_2087, _3733.y, _3733.x * _2086)) + _3733.w;
                            _3746 = !((fma(_2088, _3714.z, fma(_2087, _3714.y, _3714.x * _2086)) + _3714.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3746)
                            {
                                float _3773 = _3641.x - _2086;
                                float _3774 = _3641.y - _2087;
                                float _3775 = _3641.z - _2088;
                                float _3776 = dot(vec3(_3773, _3774, _3775), vec3(_3773, _3774, _3775));
                                float _3779 = inversesqrt(_3776);
                                float _3780 = _3779 * _3773;
                                float _3781 = _3779 * _3774;
                                float _3782 = _3779 * _3775;
                                float _3786 = 1.0 - (_3776 / (_3642 * _3642));
                                float _4997 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3791 = sqrt(_3776) * _3657.w;
                                float _3793 = 1.39999997615814208984375 / (_3791 + 1.39999997615814208984375);
                                float _3794 = _3793 * _3793;
                                float _3797 = ((1.0 - _3794) * dot(vec3(_3780, _3781, _3782), vec3(_918, _921, _924))) + _3794;
                                float _3800 = _3791 * _3791;
                                float _3804 = (fma(_2088, _3684.z, fma(_2087, _3684.y, _3684.x * _2086)) + _3684.w) / _3745;
                                float _3805 = (fma(_2088, _3699.z, fma(_2087, _3699.y, _3699.x * _2086)) + _3699.w) / _3745;
                                float _3809 = 1.0 - dot(vec2(_3804, _3805), vec2(_3804, _3805));
                                float _5013 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3811 = _3810 * (((isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0))) * _3787) / ((_3800 * 0.699999988079071044921875) + 1.0));
                                float _3823 = exp2(log2(1.0 / ((_3800 * 3.5) + 5.0)) * 0.25);
                                float _3824 = 1.0 - _993;
                                float _3831 = sqrt(1.0 - ((1.0 - (_3824 * _3824)) * (1.0 - (_3823 * _3823))));
                                float _3832 = _3831 * _3831;
                                float _3833 = _3832 * _3832;
                                float _3834 = _3780 - _3254;
                                float _3835 = _3781 - _3255;
                                float _3836 = _3782 - _3256;
                                float _3840 = inversesqrt(dot(vec3(_3834, _3835, _3836), vec3(_3834, _3835, _3836)));
                                float _3844 = dot(vec3(_918, _921, _924), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _5024 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3848 = dot(vec3(_918, _921, _924), vec3(_3840 * _3834, _3840 * _3835, _3840 * _3836));
                                float _5035 = isnan(0.0) ? _3848 : (isnan(_3848) ? 0.0 : max(_3848, 0.0));
                                float _3851 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3855 = ((_3851 * _3851) * (_3833 + (-1.0))) + 1.0;
                                float _3856 = _3793 * _3832;
                                float _3857 = _3856 * _3856;
                                float _3863 = ((1.0 - _3857) * dot(vec3(_918, _921, _924), vec3(_3780, _3781, _3782))) + _3857;
                                float _5046 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3864 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3865 = 1.0 - _3832;
                                float _3875 = (0.5 / (((_3864 * ((_3847 * _3865) + _3832)) + 9.9999999392252902907785028219223e-09) + (((_3864 * _3865) + _3832) * _3847))) * _3864;
                                float _5057 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3885 = (_3810 * _3787) * (((_3833 * 3.1415927410125732421875) * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) / ((_3855 * _3855) * ((_3800 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3811 * _3657.z;
                                frontier_phi_88_pred_1 = _3811 * _3657.y;
                                frontier_phi_88_pred_2 = _3811 * _3657.x;
                                frontier_phi_88_pred_3 = _3885 * _3669.z;
                                frontier_phi_88_pred_4 = _3885 * _3669.y;
                                frontier_phi_88_pred_5 = _3885 * _3669.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3894 = frontier_phi_88_pred;
                            _3893 = frontier_phi_88_pred_1;
                            _3892 = frontier_phi_88_pred_2;
                            _3891 = frontier_phi_88_pred_3;
                            _3890 = frontier_phi_88_pred_4;
                            _3889 = frontier_phi_88_pred_5;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            if (_3616 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3616;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3601;
                        frontier_phi_82_pred_1 = _3600;
                        frontier_phi_82_pred_2 = _3599;
                        frontier_phi_82_pred_3 = _3598;
                        frontier_phi_82_pred_4 = _3597;
                        frontier_phi_82_pred_5 = _3596;
                    }
                    _3239 = frontier_phi_82_pred;
                    _3237 = frontier_phi_82_pred_1;
                    _3235 = frontier_phi_82_pred_2;
                    _3233 = frontier_phi_82_pred_3;
                    _3231 = frontier_phi_82_pred_4;
                    _3229 = frontier_phi_82_pred_5;
                    uint _3395 = _3394 + 1u;
                    if (_3395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3388 = _3229;
                        _3389 = _3231;
                        _3390 = _3233;
                        _3391 = _3235;
                        _3392 = _3237;
                        _3393 = _3239;
                        _3394 = _3395;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3235;
                frontier_phi_63_64_ladder_1 = _3239;
                frontier_phi_63_64_ladder_2 = _3237;
                frontier_phi_63_64_ladder_3 = _3233;
                frontier_phi_63_64_ladder_4 = _3231;
                frontier_phi_63_64_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_63_64_ladder = _3113;
                frontier_phi_63_64_ladder_1 = _3117;
                frontier_phi_63_64_ladder_2 = _3115;
                frontier_phi_63_64_ladder_3 = _3111;
                frontier_phi_63_64_ladder_4 = _3109;
                frontier_phi_63_64_ladder_5 = _3107;
            }
            _3228 = frontier_phi_63_64_ladder_5;
            _3230 = frontier_phi_63_64_ladder_4;
            _3232 = frontier_phi_63_64_ladder_3;
            _3234 = frontier_phi_63_64_ladder;
            _3236 = frontier_phi_63_64_ladder_2;
            _3238 = frontier_phi_63_64_ladder_1;
        }
        float _3243 = isnan(1.0) ? _977 : (isnan(_977) ? 1.0 : min(_977, 1.0));
        _3040 = (_3243 * _3234) + _2552;
        _3042 = (_3243 * _3236) + _2554;
        _3044 = (_3243 * _3238) + _2556;
        _3046 = ((_3228 * _961) * _3243) + _2890;
        _3048 = ((_3230 * _963) * _3243) + _2892;
        _3050 = ((_3232 * _964) * _3243) + _2894;
    }
    else
    {
        _3040 = _2552;
        _3042 = _2554;
        _3044 = _2556;
        _3046 = _2890;
        _3048 = _2892;
        _3050 = _2894;
    }
    float _5073 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5084 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _5095 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _3067 = ((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3040 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _977))) + ((_3046 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3068 = ((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3042 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _977))) + ((_3048 + ((isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3069 = ((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3044 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _977))) + ((_3050 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    uint _3070 = _285 + 6u;
    float _3078 = _899 / cbSceneParam._m0[86u].x;
    float _3079 = _900 / cbSceneParam._m0[86u].y;
    vec4 _3093 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, (log2((isnan(cbSceneParam._m0[77u].w) ? _822 : (isnan(_822) ? cbSceneParam._m0[77u].w : min(_822, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3095 = _3093.x;
    float _3096 = _3093.y;
    float _3097 = _3093.z;
    float _3098 = _3093.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_822 > cbSceneParam._m0[78u].w)
    {
        float _3132 = isnan(_822) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _822 : min(cbSceneParam._m0[80u].w, _822));
        float _3133 = _3132 / _822;
        float _3144 = _3133 * _872;
        float _3145 = _873 * _3133;
        float _3146 = (-0.0) - _3145;
        float _3148 = _3133 * _874;
        float _3150 = (cbSceneParam._m0[77u].w * _3146) / _3132;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3145;
        float _3158 = sqrt(((_3144 * _3144) + (_3145 * _3145)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3132)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3345;
        if (abs((_3146 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3345 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3291 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3345 = ((abs(_3158 / _3146) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3168 * _3300) - exp2(_3168 * _3301)) * _3289))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3078, _3079, 1.0), 0.0);
        float _3356 = exp2((_3345 * (-1.44269502162933349609375)) * (1.0 - _3347.w));
        float _3357 = log2(_3356);
        float _3373 = log2(_3098);
        _3170 = (exp2(_3373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].x)) * _3347.x) / cbSceneParam._m0[78u].x)) + _3095;
        _3172 = (exp2(_3373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].y)) * _3347.y) / cbSceneParam._m0[78u].y)) + _3096;
        _3174 = (exp2(_3373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].z)) * _3347.z) / cbSceneParam._m0[78u].z)) + _3097;
        _3176 = _3356 * _3098;
    }
    else
    {
        _3170 = _3095;
        _3172 = _3096;
        _3174 = _3097;
        _3176 = _3098;
    }
    bool _3383;
    vec4 _3186;
    vec4 _3208;
    float _3210;
    float _3214;
    float _3215;
    float _3216;
    float _3217;
    bool _3227;
    for (;;)
    {
        _3186 = cbMatDynParam._m0[0u];
        float _3188 = roundEven(_3186.y);
        bool _3189 = _3188 == 3.0;
        float _3190 = log2(_3176);
        float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * _3067;
        float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * _3068;
        float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * _3069;
        float _3206 = _888 + (-0.5);
        _3208 = cbMtdParam._m0[1u];
        _3210 = _3208.y * _3206;
        float _3213 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3214 = _3213 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
        _3215 = _3213 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
        _3216 = _3213 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
        _3217 = _3206 * 0.999000012874603271484375;
        _3227 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3227)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3217) < 0.5)
            {
                _3383 = true;
                break;
            }
        }
        uint _3324 = _937 + uint(_3186.w);
        if ((cbInstanceData._m0[_3324].w < 1.0) && ((cbInstanceData._m0[_3324].w + _3217) < 0.5))
        {
            _3383 = true;
            break;
        }
        if ((_3210 + 1.0) < _3208.x)
        {
            _3383 = true;
            break;
        }
        _3383 = false;
        break;
    }
    float _3587;
    if (_3383)
    {
        discard_state = true;
        _3587 = 0.0;
    }
    else
    {
        _3587 = cbInstanceData._m0[_3070].w;
    }
    SV_Target.x = _3214;
    SV_Target.y = _3215;
    SV_Target.z = _3216;
    SV_Target.w = _3587;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3070].w;
    discard_exit();
}


