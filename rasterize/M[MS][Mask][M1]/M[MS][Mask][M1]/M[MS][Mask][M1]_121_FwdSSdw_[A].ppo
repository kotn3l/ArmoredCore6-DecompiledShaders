#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1495;
float _3897;
float _3898;
float _3899;
float _3900;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _237 = _236 * _228;
    float _238 = _236 * _229;
    float _239 = _236 * _230;
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = _243 * NORMAL.x;
    float _245 = _243 * NORMAL.y;
    float _246 = _243 * NORMAL.z;
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = _250 * TANGENT.x;
    float _252 = _250 * TANGENT.y;
    float _253 = _250 * TANGENT.z;
    uint _256 = uint(roundEven(NORMAL.w)) * 13u;
    uint _262 = _256 + 1u;
    uint _266 = _256 + 2u;
    float _275 = sqrt(((cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x)) + (cbInstanceData._m0[_266].x * cbInstanceData._m0[_266].x));
    float _276 = _275 * TEXCOORD.z;
    float _277 = _275 * TEXCOORD.w;
    vec4 _297 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _303 = _297.x * cbMtdParam._m0[11u].x;
    float _304 = _297.y * cbMtdParam._m0[11u].y;
    float _305 = _297.z * cbMtdParam._m0[11u].z;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _276) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _277) + cbTextureTilingScale._m0[5u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _383 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _385 = _383.x;
    float _397 = dot(vec4(_385, _383.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _414 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _344.x) * 2.0) - ((((_385 - _397) * cbMtdParam._m0[23u].w) + _397) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3909 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _415 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _422 = (_415 * ((_324.x * cbMtdParam._m0[12u].x) - _303)) + _303;
    float _423 = (_415 * ((_324.y * cbMtdParam._m0[12u].y) - _304)) + _304;
    float _424 = (_415 * ((_324.z * cbMtdParam._m0[12u].z) - _305)) + _305;
    vec4 _441 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _276) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _277) + cbTextureTilingScale._m0[3u].w));
    vec4 _461 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _463 = _461.x;
    float _473 = dot(vec4(_463, _461.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _487 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _344.y) * 2.0) - ((((_463 - _473) * cbMtdParam._m0[23u].w) + _473) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3920 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _495 = (_488 * ((_441.x * cbMtdParam._m0[13u].x) - _422)) + _422;
    float _496 = (_488 * ((_441.y * cbMtdParam._m0[13u].y) - _423)) + _423;
    float _497 = (_488 * ((_441.z * cbMtdParam._m0[13u].z) - _424)) + _424;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _276) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _277) + cbTextureTilingScale._m0[24u].w));
    vec4 _533 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _535 = _533.x;
    float _545 = dot(vec4(_535, _533.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _557 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _344.z) * 2.0) - ((((_535 - _545) * cbMtdParam._m0[23u].w) + _545) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3931 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
    float _565 = (_558 * ((_516.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _566 = (_558 * ((_516.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _567 = (_558 * ((_516.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _276) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _277) + cbTextureTilingScale._m0[4u].w));
    vec4 _602 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _604 = _602.x;
    float _605 = _602.y;
    float _606 = _602.z;
    float _613 = ((_585.x - _604) * _415) + _604;
    float _614 = ((_585.y - _605) * _415) + _605;
    float _615 = ((_585.z - _606) * _415) + _606;
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _276) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _277) + cbTextureTilingScale._m0[2u].w));
    float _638 = ((_627.x - _613) * _488) + _613;
    float _639 = ((_627.y - _614) * _488) + _614;
    float _640 = ((_627.z - _615) * _488) + _615;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _276) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _277) + cbTextureTilingScale._m0[23u].w));
    float _665 = ((_652.z - _640) * _558) + _640;
    float _668 = ((((_652.x - _638) * _558) + _638) * 2.0) + (-1.0);
    float _670 = ((((_652.y - _639) * _558) + _639) * 2.0) + (-1.0);
    float _671 = dot(vec2(_668, _670), vec2(_668, _670));
    float _3942 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _676 = sqrt(1.0 - (isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0))));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _702 = (((_690.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _668;
    float _703 = (((_690.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _670;
    float _706 = fma(_676, _244, fma(_703, _251, _702 * _237));
    float _709 = fma(_676, _245, fma(_703, _252, _702 * _238));
    float _712 = fma(_676, _246, fma(_703, _253, _702 * _239));
    float _716 = inversesqrt(dot(vec3(_706, _709, _712), vec3(_706, _709, _712)));
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _276) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _277) + cbTextureTilingScale._m0[11u].w));
    float _745 = _743.x;
    float _746 = 1.0 - _745;
    float _754 = (cbMtdParam._m0[19u].x + dot(vec4(_716 * _706, _716 * _709, _716 * _712, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_745 - _746) * cbMtdParam._m0[24u].z) + _746) * cbMtdParam._m0[21u].z);
    float _3953 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
    float _762 = (_755 * (cbMtdParam._m0[17u].x - _565)) + _565;
    float _763 = (_755 * (cbMtdParam._m0[17u].y - _566)) + _566;
    float _764 = (_755 * (cbMtdParam._m0[17u].z - _567)) + _567;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _792 = _790.x;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _276) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _277) + cbTextureTilingScale._m0[9u].w)).x - _792) * _415) + _792;
    float _827 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _276) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _277) + cbTextureTilingScale._m0[21u].w)).x - _810) * _488) + _810;
    float _845 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _276) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _277) + cbTextureTilingScale._m0[10u].w)).x - _827) * _558) + _827;
    float _849 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _845) * cbMtdParam._m0[19u].z) + _845;
    float _851 = _849 - (_849 * _755);
    float _855 = (cbMtdParam._m0[19u].w * (_690.z - _665)) + _665;
    vec4 _868 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _276) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _277) + cbTextureTilingScale._m0[15u].w));
    float _875 = (_868.x * 2.0) + (-1.0);
    float _876 = (_868.y * 2.0) + (-1.0);
    float _877 = dot(vec2(_875, _876), vec2(_875, _876));
    float _3964 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _885 = ((_868.z - _855) * _755) + _855;
    float _895 = ((sqrt(1.0 - (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) - _676) * _755) + _676;
    float _898 = (((_875 - _702) * _755) + _702) + (cbMtdParam._m0[21u].x * _702);
    float _899 = (((_876 - _703) * _755) + _703) + (cbMtdParam._m0[21u].x * _703);
    float _901 = cbMtdParam._m0[22u].x + _690.w;
    float _904 = fma(_895, _244, fma(_899, _251, _898 * _237));
    float _907 = fma(_895, _245, fma(_899, _252, _898 * _238));
    float _910 = fma(_895, _246, fma(_899, _253, _898 * _239));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _3975 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _918 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _3986 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _3997 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4008 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4019 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4030 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _923 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _937 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _987 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _977);
    float _988 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _977);
    float _989 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _977);
    float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
    float _994 = _987 * _993;
    float _995 = _988 * _993;
    float _996 = _989 * _993;
    vec4 _1001 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1003 = _1001.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1175 = sqrt(((_987 * _987) + (_988 * _988)) + (_989 * _989));
        float _1181 = (cbMatDynParam._m0[5u].x * _1175) + cbMatDynParam._m0[5u].y;
        float _4041 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1186 = (cbMatDynParam._m0[5u].z * _1175) + cbMatDynParam._m0[5u].w;
        float _4052 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) - _1182)) + _1182) < ((_1003 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1014 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1015 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1033 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1036 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1039 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1052 = _256 + 9u;
    uint _1053 = _1052 + uint(cbMatDynParam._m0[0u].w);
    float _1059 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0)))) * cbInstanceData._m0[_1053].x;
    float _1060 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1053].y;
    float _1061 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1053].z;
    float _4063 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _1062 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1063 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _4085 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _1064 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _1065 = 1.0 - _923;
    float _1066 = _1062 * _1065;
    float _1067 = _1063 * _1065;
    float _1068 = _1064 * _1065;
    float _1073 = (_1062 + (-0.039999999105930328369140625)) * _923;
    float _1074 = (_1063 + (-0.039999999105930328369140625)) * _923;
    float _1075 = (_1064 + (-0.039999999105930328369140625)) * _923;
    float _1076 = _1073 + 0.039999999105930328369140625;
    float _1078 = _1074 + 0.039999999105930328369140625;
    float _1079 = _1075 + 0.039999999105930328369140625;
    vec4 _1088 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1014, cbSceneParam._m0[86u].y * _1015));
    float _1092 = ((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * TEXCOORD_5.w) * _1088.x;
    float _1093 = dot(vec3(_915, _916, _917), vec3(_994, _995, _996));
    float _1096 = _1093 * 2.0;
    float _1100 = (_1096 * _915) - _994;
    float _1101 = (_1096 * _916) - _995;
    float _1102 = (_1096 * _917) - _996;
    float _1106 = abs(dot(vec3(_994, _995, _996), vec3(_915, _916, _917)));
    float _4096 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1108 = sqrt(_918);
    float _1121 = exp2((_1108 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1108 * 3.0));
    float _1127 = (1.0 - _1121) * ((_1108 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1128 = _1121 * _1108;
    float _1156 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1494;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1219 = fma(_1164, cbModelParam._m0[26u].z, fma(_1160, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156));
        float _1223 = fma(_1164, cbModelParam._m0[27u].z, fma(_1160, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156));
        float _1227 = fma(_1164, cbModelParam._m0[28u].z, fma(_1160, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156));
        float _1252 = _1156 + _915;
        float _1253 = _1160 + _916;
        float _1254 = _1164 + _917;
        float _1264 = fma(_1254, cbModelParam._m0[26u].z, fma(_1253, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1252)) - _1219;
        float _1265 = fma(_1254, cbModelParam._m0[27u].z, fma(_1253, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1252)) - _1223;
        float _1266 = fma(_1254, cbModelParam._m0[28u].z, fma(_1253, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1252)) - _1227;
        float _1270 = inversesqrt(dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266)));
        float _1283 = ((_1270 * _1264) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1219 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1270 * _1265) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1223 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1285 = ((_1270 * _1266) / cbModelParam._m0[34u].z) + ((((((_1227 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1283, _1284, _1285), 0.0);
        float _1322 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1288.x + (-0.5));
        float _1324 = _1322 * (_1288.y + (-0.5));
        float _1325 = _1322 * (_1288.z + (-0.5));
        float _1332 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1295.x + (-0.5));
        float _1334 = _1332 * (_1295.y + (-0.5));
        float _1335 = _1332 * (_1295.z + (-0.5));
        float _1342 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1302.x + (-0.5));
        float _1344 = _1342 * (_1302.y + (-0.5));
        float _1345 = _1342 * (_1302.z + (-0.5));
        float _1352 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1309.x + (-0.5));
        float _1354 = _1352 * (_1309.y + (-0.5));
        float _1355 = _1352 * (_1309.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1376 = (dot(vec3(_915, _916, _917), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1386 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _4144 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1388 + 1.0))) + _1393) * _1356;
        float _1403 = _1324 * 0.5;
        float _1404 = _1334 * 0.5;
        float _1405 = _1344 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_915, _916, _917), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _4177 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1430 + 1.0))) + _1435) * _1357;
        float _1445 = _1325 * 0.5;
        float _1446 = _1335 * 0.5;
        float _1447 = _1345 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_915, _916, _917), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _4188 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4199 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4210 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_1472 + 1.0))) + _1477) * _1358;
        _1494 = _1325;
        _1496 = _1324;
        _1497 = _1323;
        _1498 = _1335;
        _1499 = _1334;
        _1500 = _1333;
        _1501 = _1345;
        _1502 = _1344;
        _1503 = _1343;
        _1504 = _1358;
        _1505 = _1357;
        _1506 = _1356;
        _1507 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1508 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1495;
        _1496 = _1495;
        _1497 = _1495;
        _1498 = _1495;
        _1499 = _1495;
        _1500 = _1495;
        _1501 = _1495;
        _1502 = _1495;
        _1503 = _1495;
        _1504 = _1495;
        _1505 = _1495;
        _1506 = _1495;
        _1507 = 0.0;
        _1508 = 0.0;
        _1509 = 0.0;
    }
    float _1804;
    float _1805;
    float _1806;
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1535 = fma(_1164, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1156));
        float _1539 = fma(_1164, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1156));
        float _1543 = fma(_1164, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1156));
        float _1566 = _1156 + _915;
        float _1567 = _1160 + _916;
        float _1568 = _1164 + _917;
        float _1578 = fma(_1568, cbModelParam._m0[30u].z, fma(_1567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1566)) - _1535;
        float _1579 = fma(_1568, cbModelParam._m0[31u].z, fma(_1567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1566)) - _1539;
        float _1580 = fma(_1568, cbModelParam._m0[32u].z, fma(_1567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1566)) - _1543;
        float _1584 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
        float _1597 = ((_1584 * _1578) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1535 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1598 = ((_1584 * _1579) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1539 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1599 = ((_1584 * _1580) / cbModelParam._m0[35u].z) + ((((((_1543 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1601 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1597, _1598, _1599), 0.0);
        float _1634 = exp2((_1601.w + (-0.5)) * 20.0) * 2.0;
        float _1635 = _1634 * (_1601.x + (-0.5));
        float _1636 = _1634 * (_1601.y + (-0.5));
        float _1637 = _1634 * (_1601.z + (-0.5));
        float _1644 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1608.x + (-0.5));
        float _1646 = _1644 * (_1608.y + (-0.5));
        float _1647 = _1644 * (_1608.z + (-0.5));
        float _1654 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1615.x + (-0.5));
        float _1656 = _1654 * (_1615.y + (-0.5));
        float _1657 = _1654 * (_1615.z + (-0.5));
        float _1664 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1622.x + (-0.5));
        float _1666 = _1664 * (_1622.y + (-0.5));
        float _1667 = _1664 * (_1622.z + (-0.5));
        float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1670 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1671 = _1635 * 0.5;
        float _1672 = _1645 * 0.5;
        float _1673 = _1655 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_915, _916, _917), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4251 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1668 + 9.9999997473787516355514526367188e-06);
        float _4262 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4273 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0))) * (_1698 + 1.0))) + _1703) * _1668;
        float _1713 = _1636 * 0.5;
        float _1714 = _1646 * 0.5;
        float _1715 = _1656 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_915, _916, _917), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4284 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1669 + 9.9999997473787516355514526367188e-06);
        float _4295 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4306 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (_1740 + 1.0))) + _1745) * _1669;
        float _1755 = _1637 * 0.5;
        float _1756 = _1647 * 0.5;
        float _1757 = _1657 * 0.5;
        float _1758 = dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757));
        float _1763 = (_1758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1758);
        float _1771 = (dot(vec3(_915, _916, _917), vec3(_1763 * _1755, _1763 * _1756, _1763 * _1757)) + 1.0) * 0.5;
        float _4317 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = sqrt(((_1756 * _1756) + (_1755 * _1755)) + (_1757 * _1757)) / (_1670 + 9.9999997473787516355514526367188e-06);
        float _4328 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1782 = _1781 * 2.0;
        float _1786 = (1.0 - _1781) / (_1781 + 1.0);
        float _4339 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
        float _1787 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1796 = ((((1.0 - _1787) * (_1782 + 2.0)) * exp2(log2(isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_1782 + 1.0))) + _1787) * _1670;
        _1804 = _1637;
        _1805 = _1636;
        _1806 = _1635;
        _1807 = _1647;
        _1808 = _1646;
        _1809 = _1645;
        _1810 = _1657;
        _1811 = _1656;
        _1812 = _1655;
        _1813 = _1670;
        _1814 = _1669;
        _1815 = _1668;
        _1816 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1817 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
        _1818 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0)));
    }
    else
    {
        _1804 = _1495;
        _1805 = _1495;
        _1806 = _1495;
        _1807 = _1495;
        _1808 = _1495;
        _1809 = _1495;
        _1810 = _1495;
        _1811 = _1495;
        _1812 = _1495;
        _1813 = _1495;
        _1814 = _1495;
        _1815 = _1495;
        _1816 = 0.0;
        _1817 = 0.0;
        _1818 = 0.0;
    }
    float _1828 = (cbModelParam._m0[1u].x * (_1816 - _1507)) + _1507;
    float _1829 = (cbModelParam._m0[1u].x * (_1817 - _1508)) + _1508;
    float _1830 = (cbModelParam._m0[1u].x * (_1818 - _1509)) + _1509;
    float _1851 = fma(_1830, cbSceneParam._m0[89u].z, fma(_1829, cbSceneParam._m0[89u].y, _1828 * cbSceneParam._m0[89u].x));
    float _1854 = fma(_1830, cbSceneParam._m0[90u].z, fma(_1829, cbSceneParam._m0[90u].y, _1828 * cbSceneParam._m0[90u].x));
    float _1857 = fma(_1830, cbSceneParam._m0[91u].z, fma(_1829, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1828));
    float _1872 = _1100 * 0.5;
    float _1873 = _1101 * 0.5;
    float _1874 = _1102 * 0.5;
    float _1875 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1806, _1809, _1812, _1815));
    float _1878 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1805, _1808, _1811, _1814));
    float _1881 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1804, _1807, _1810, _1813));
    float _1915;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1888 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1494, _1498, _1501, _1504));
        float _1892 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1496, _1499, _1502, _1505));
        float _1896 = dot(vec4(_1872, _1873, _1874, 1.0), vec4(_1497, _1500, _1503, _1506));
        float _1903 = dot(vec4(cbModelParam._m0[39u]), vec4(_1872, _1873, _1874, 1.0));
        _1915 = dot(vec3(isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1903) ? 0.0 : (isnan(0.0) ? _1903 : max(0.0, _1903))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1915 = 1.0;
    }
    float _1926;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1917 = dot(vec4(cbModelParam._m0[40u]), vec4(_1872, _1873, _1874, 1.0));
        _1926 = dot(vec3(isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1926 = 1.0;
    }
    float _1930 = (_1926 * cbModelParam._m0[1u].x) + (_1915 * (1.0 - cbModelParam._m0[1u].x));
    float _1940 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1941 = isnan(_1940) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1940 : min(cbModelParam._m0[25u].z, _1940));
    float _2021;
    float _2023;
    float _2025;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1988 = fma(_1164, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1156)) + cbModelParam._m0[13u].w;
        float _1992 = fma(_1164, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1156)) + cbModelParam._m0[14u].w;
        float _1996 = fma(_1164, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1156)) + cbModelParam._m0[15u].w;
        float _1999 = fma(_1102, cbModelParam._m0[13u].z, fma(_1101, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1100));
        float _2002 = fma(_1102, cbModelParam._m0[14u].z, fma(_1101, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1100));
        float _2005 = fma(_1102, cbModelParam._m0[15u].z, fma(_1101, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1100));
        float _2033;
        if (_1999 > 0.0)
        {
            _2033 = abs((1.0 - _1988) / _1999);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1999 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1988 + 1.0) / _1999);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2033 = frontier_phi_17_15_ladder;
        }
        float _2257;
        if (_2002 > 0.0)
        {
            _2257 = abs((1.0 - _1992) / _2002);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1992 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2257 = frontier_phi_26_22_ladder;
        }
        float _2514;
        if (_2005 > 0.0)
        {
            _2514 = abs((1.0 - _1996) / _2005);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1996 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2514 = frontier_phi_38_33_ladder;
        }
        float _2516 = isnan(_2257) ? _2033 : (isnan(_2033) ? _2257 : min(_2033, _2257));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _1999) + _1988;
        float _2522 = (_2517 * _2002) + _1992;
        float _2523 = (_2517 * _2005) + _1996;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1941);
            frontier_phi_16_38_ladder = _2651.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2651.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2651.x * cbModelParam._m0[1u].y;
        }
        _2021 = frontier_phi_16_38_ladder_2;
        _2023 = frontier_phi_16_38_ladder_1;
        _2025 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2009 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1100, _1101, _1102), _1941);
        _2021 = _2009.x * cbModelParam._m0[1u].y;
        _2023 = _2009.y * cbModelParam._m0[1u].y;
        _2025 = _2009.z * cbModelParam._m0[1u].y;
    }
    float _2029 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _2030 = isnan(_2029) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2029 : min(cbModelParam._m0[25u].w, _2029));
    float _2120;
    float _2122;
    float _2124;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2084 = fma(_1164, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1156)) + cbModelParam._m0[21u].w;
        float _2088 = fma(_1164, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1156)) + cbModelParam._m0[22u].w;
        float _2092 = fma(_1164, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1156)) + cbModelParam._m0[23u].w;
        float _2095 = fma(_1102, cbModelParam._m0[21u].z, fma(_1101, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1100));
        float _2098 = fma(_1102, cbModelParam._m0[22u].z, fma(_1101, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1100));
        float _2101 = fma(_1102, cbModelParam._m0[23u].z, fma(_1101, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1100));
        float _2262;
        if (_2095 > 0.0)
        {
            _2262 = abs((1.0 - _2084) / _2095);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2095 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2084 + 1.0) / _2095);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2262 = frontier_phi_28_24_ladder;
        }
        float _2541;
        if (_2098 > 0.0)
        {
            _2541 = abs((1.0 - _2088) / _2098);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2098 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2088 + 1.0) / _2098);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2541 = frontier_phi_40_35_ladder;
        }
        float _2754;
        if (_2101 > 0.0)
        {
            _2754 = abs((1.0 - _2092) / _2101);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2092 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2754 = frontier_phi_49_46_ladder;
        }
        float _2756 = isnan(_2541) ? _2262 : (isnan(_2262) ? _2541 : min(_2262, _2541));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _2095) + _2084;
        float _2762 = (_2757 * _2098) + _2088;
        float _2763 = (_2757 * _2101) + _2092;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2962 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _2030);
            frontier_phi_25_49_ladder = _2962.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2962.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2962.x * cbModelParam._m0[1u].z;
        }
        _2120 = frontier_phi_25_49_ladder_2;
        _2122 = frontier_phi_25_49_ladder_1;
        _2124 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1100, _1101, _1102), _2030);
        _2120 = _2104.x * cbModelParam._m0[1u].z;
        _2122 = _2104.y * cbModelParam._m0[1u].z;
        _2124 = _2104.z * cbModelParam._m0[1u].z;
    }
    float _2137 = (((_1127 * _1076) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2120 - _2021)) + _2021);
    float _2139 = (((_1127 * _1078) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2122 - _2023)) + _2023);
    float _2141 = (((_1127 * _1079) + _1128) * _1092) * ((cbModelParam._m0[1u].w * (_2124 - _2025)) + _2025);
    float _2144 = fma(_2141, cbSceneParam._m0[89u].z, fma(_2139, cbSceneParam._m0[89u].y, _2137 * cbSceneParam._m0[89u].x));
    float _2147 = fma(_2141, cbSceneParam._m0[90u].z, fma(_2139, cbSceneParam._m0[90u].y, _2137 * cbSceneParam._m0[90u].x));
    float _2150 = fma(_2141, cbSceneParam._m0[91u].z, fma(_2139, cbSceneParam._m0[91u].y, _2137 * cbSceneParam._m0[91u].x));
    vec4 _2158 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1014, _1015));
    float _2160 = _2158.w;
    float _2172 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2160);
    float _2173 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2160);
    float _2174 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2160);
    uvec4 _2178 = floatBitsToUint(cbInstanceData._m0[_256 + 5u]);
    uint _2180 = _2178.x * 14u;
    uint _2181 = _2180 + 13u;
    float _2188 = _1092 + (-1.0);
    float _2193 = (cbLight._m0[_2181].x * _2188) + 1.0;
    float _2194 = (cbLight._m0[_2181].y * _2188) + 1.0;
    float _2195 = (cbLight._m0[_2181].z * _2188) + 1.0;
    float _2196 = (cbLight._m0[_2181].w * _2188) + 1.0;
    uint _2197 = _2180 + 5u;
    float _2203 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
    uint _2207 = _2180 + 4u;
    float _2216 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
    uint _2220 = _2180 | 1u;
    float _2231 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_915, _916, _917));
    float _2234 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_915, _916, _917));
    float _4475 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _4486 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2239 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2241 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * 0.3183098733425140380859375;
    float _2248 = ((cbLight._m0[_2197].x * _2203) * _2241) + (((cbLight._m0[_2207].x * _2172) * _2216) * _2239);
    float _2249 = ((_2203 * cbLight._m0[_2197].y) * _2241) + (((cbLight._m0[_2207].y * _2173) * _2216) * _2239);
    float _2250 = ((_2203 * cbLight._m0[_2197].z) * _2241) + (((cbLight._m0[_2207].z * _2174) * _2216) * _2239);
    uvec4 _2254 = floatBitsToUint(cbLight._m0[_2180 + 12u]);
    bool _2256 = _2254.x == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2256)
    {
        _2267 = _2248;
        _2269 = _2249;
        _2271 = _2250;
    }
    else
    {
        uint _2275 = _2180 + 6u;
        float _2291 = (dot(vec3(cbLight._m0[_2180 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2292 = _2291 * _2291;
        float _4497 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2293 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2294 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2267 = (((cbLight._m0[_2275].x * 0.3183098733425140380859375) * _2293) * _2294) + _2248;
        _2269 = (((cbLight._m0[_2275].y * 0.3183098733425140380859375) * _2293) * _2294) + _2249;
        _2271 = (((cbLight._m0[_2275].z * 0.3183098733425140380859375) * _2293) * _2294) + _2250;
    }
    bool _2274 = _2254.y == 0u;
    float _2312;
    float _2314;
    float _2316;
    if (_2274)
    {
        _2312 = _2267;
        _2314 = _2269;
        _2316 = _2271;
    }
    else
    {
        uint _2485 = _2180 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2180 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4513 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2504 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2312 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2267;
        _2314 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2269;
        _2316 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2271;
    }
    uint _2319 = _2180 + 8u;
    float _2332 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2180].w)) * _918) * 0.949999988079071044921875);
    float _2333 = _2332 * _2332;
    float _2334 = cbLight._m0[_2180].x + _994;
    float _2335 = cbLight._m0[_2180].y + _995;
    float _2336 = cbLight._m0[_2180].z + _996;
    float _2340 = inversesqrt(dot(vec3(_2334, _2335, _2336), vec3(_2334, _2335, _2336)));
    float _2341 = _2340 * _2334;
    float _2342 = _2340 * _2335;
    float _2343 = _2340 * _2336;
    float _2344 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2180].xyz));
    float _4529 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2347 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _4540 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _2348 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2349 = dot(vec3(_915, _916, _917), vec3(_2341, _2342, _2343));
    float _4551 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2352 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
    float _2353 = dot(vec3(cbLight._m0[_2180].xyz), vec3(_2341, _2342, _2343));
    float _4562 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2357 = _2333 * _2333;
    float _2361 = ((_2352 * _2352) * (_2357 + (-1.0))) + 1.0;
    float _2369 = exp2(log2(1.0 - (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0)))) * 5.0);
    float _2370 = 0.959999978542327880859375 - _1073;
    float _2372 = 0.959999978542327880859375 - _1074;
    float _2373 = 0.959999978542327880859375 - _1075;
    float _2380 = 1.0 - _2333;
    float _2391 = (0.5 / (((_2348 * ((_2347 * _2380) + _2333)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2380) + _2333) * _2347))) * _2347;
    float _4573 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2393 = (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0))) * (_2357 / ((_2361 * _2361) * 3.141590118408203125));
    uint _2407 = _2180 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2220].w)) * _918) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2220].x + _994;
    float _2421 = cbLight._m0[_2220].y + _995;
    float _2422 = cbLight._m0[_2220].z + _996;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2220].xyz));
    float _4584 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2434 = dot(vec3(_915, _916, _917), vec3(_2427, _2428, _2429));
    float _4595 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2220].xyz), vec3(_2427, _2428, _2429));
    float _4606 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2460 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2348 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2460) + _2419) * _2433))) * _2433;
    float _4617 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2482 = (((((_2453 * _2370) + _1076) * cbLight._m0[_2407].x) * _2472) * _2203) + ((((cbLight._m0[_2319].x * _2172) * ((_2369 * _2370) + _1076)) * _2393) * _2216);
    float _2483 = (((((_2453 * _2372) + _1078) * cbLight._m0[_2407].y) * _2472) * _2203) + ((((cbLight._m0[_2319].y * _2173) * ((_2369 * _2372) + _1078)) * _2393) * _2216);
    float _2484 = (((((_2453 * _2373) + _1079) * cbLight._m0[_2407].z) * _2472) * _2203) + ((((cbLight._m0[_2319].z * _2174) * ((_2369 * _2373) + _1079)) * _2393) * _2216);
    float _2546;
    float _2548;
    float _2550;
    if (_2256)
    {
        _2546 = _2482;
        _2548 = _2483;
        _2550 = _2484;
    }
    else
    {
        uint _2552 = _2180 + 2u;
        uint _2556 = _2180 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _918) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _994;
        float _2573 = cbLight._m0[_2552].y + _995;
        float _2574 = cbLight._m0[_2552].z + _996;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2552].xyz));
        float _4628 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2586 = dot(vec3(_915, _916, _917), vec3(_2579, _2580, _2581));
        float _4639 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4650 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2348 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2612) + _2571) * _2585))) * _2585;
        float _4661 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
        _2546 = (((((_2605 * _2370) + _1076) * cbLight._m0[_2556].x) * _2624) * _2625) + _2482;
        _2548 = (((((_2605 * _2372) + _1078) * cbLight._m0[_2556].y) * _2624) * _2625) + _2483;
        _2550 = (((((_2605 * _2373) + _1079) * cbLight._m0[_2556].z) * _2624) * _2625) + _2484;
    }
    float _2660;
    float _2662;
    float _2664;
    if (_2274)
    {
        _2660 = _2546;
        _2662 = _2548;
        _2664 = _2550;
    }
    else
    {
        uint _2671 = _2180 + 3u;
        uint _2675 = _2180 + 11u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _918) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _994;
        float _2692 = cbLight._m0[_2671].y + _995;
        float _2693 = cbLight._m0[_2671].z + _996;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2671].xyz));
        float _4677 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2705 = dot(vec3(_915, _916, _917), vec3(_2698, _2699, _2700));
        float _4688 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4699 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
        float _2731 = 1.0 - _2690;
        float _2741 = (0.5 / (((_2348 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2348 * _2731) + _2690) * _2704))) * _2704;
        float _4710 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
        _2660 = (((((_2724 * _2370) + _1076) * cbLight._m0[_2675].x) * _2743) * _2744) + _2546;
        _2662 = (((((_2724 * _2372) + _1078) * cbLight._m0[_2675].y) * _2743) * _2744) + _2548;
        _2664 = (((((_2724 * _2373) + _1079) * cbLight._m0[_2675].z) * _2743) * _2744) + _2550;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2178.y == 0u)
    {
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2819;
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2819;
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2819;
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.x;
        uint _2846 = uint((float(_2834.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1015) / _2835))) + floor(float(uint(cbSceneParam._m0[85u].x * _1014) / _2835)));
        float _2856 = (log2(_2822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2857 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        uint _2860 = uint(isnan(14.0) ? _2857 : (isnan(_2857) ? 14.0 : min(_2857, 14.0)));
        uvec4 _2865 = texelFetch(g_lightClusterGridBuffer, int(((_2860 << 2u) + (_2846 << 6u)) >> 2u));
        uint _2866 = _2865.x;
        uint _2867 = _2834.z;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        float _2975;
        float _2977;
        if (((((1u << ((_2867 >> 4u) & 15u)) + 4294967295u) & _2866) == 0u) || ((_2867 & 240u) == 0u))
        {
            _2967 = 0.0;
            _2969 = 0.0;
            _2971 = 0.0;
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
        }
        else
        {
            float _2968;
            float _2970;
            float _2972;
            float _2974;
            float _2976;
            float _2978;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            float _3124 = 0.0;
            float _3125 = 0.0;
            uint _3126 = 0u;
            uint _3135;
            bool _3136;
            for (;;)
            {
                _3135 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3126 << 2u)) >> 2u)).x;
                _3136 = _3135 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3136)
                {
                    frontier_phi_66_pred = _3120;
                    frontier_phi_66_pred_1 = _3125;
                    frontier_phi_66_pred_2 = _3124;
                    frontier_phi_66_pred_3 = _3123;
                    frontier_phi_66_pred_4 = _3122;
                    frontier_phi_66_pred_5 = _3121;
                }
                else
                {
                    float _3265;
                    float _3266;
                    float _3267;
                    float _3268;
                    float _3269;
                    float _3270;
                    uint _3271;
                    _3265 = _3120;
                    _3266 = _3121;
                    _3267 = _3122;
                    _3268 = _3123;
                    _3269 = _3124;
                    _3270 = _3125;
                    _3271 = _3135;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    for (;;)
                    {
                        uint _3275 = uint(findLSB(_3271)) + (_3126 << 5u);
                        uint _3272 = (_3271 + 4294967295u) & _3271;
                        uint _3277 = _3275 * 48u;
                        vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3277)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3277 + 3u)).x));
                        uint _3297 = (_3275 * 48u) + 4u;
                        vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3297)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3297 + 3u)).x));
                        uint _3316 = (_3275 * 48u) + 8u;
                        vec3 _3327 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3316)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3316 + 2u)).x));
                        float _3331 = _3291.x - _2820;
                        float _3332 = _3291.y - _2821;
                        float _3333 = _3291.z - _2822;
                        float _3334 = dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333));
                        float _3337 = inversesqrt(_3334);
                        float _3338 = _3337 * _3331;
                        float _3339 = _3337 * _3332;
                        float _3340 = _3337 * _3333;
                        float _3341 = dot(vec3(_1033, _1036, _1039), vec3(_3338, _3339, _3340));
                        float _3346 = 1.0 - (_3334 * _3291.w);
                        float _4736 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3347 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                        float _3348 = sqrt(_3334) * _3310.w;
                        float _3351 = 1.39999997615814208984375 / (_3348 + 1.39999997615814208984375);
                        float _3352 = _3351 * _3351;
                        float _3355 = ((1.0 - _3352) * _3341) + _3352;
                        float _3358 = _3348 * _3348;
                        float _3362 = ((isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0))) * _3347) / ((_3358 * 0.699999988079071044921875) + 1.0);
                        float _3366 = (-0.0) - _2820;
                        float _3367 = (-0.0) - _2821;
                        float _3368 = (-0.0) - _2822;
                        float _3372 = inversesqrt(dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368)));
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3383 = exp2(log2(1.0 / ((_3358 * 3.5) + 5.0)) * 0.25);
                        float _3384 = 1.0 - _1108;
                        float _3391 = sqrt(1.0 - ((1.0 - (_3384 * _3384)) * (1.0 - (_3383 * _3383))));
                        float _3392 = _3391 * _3391;
                        float _3393 = _3392 * _3392;
                        float _3394 = _3373 + _3338;
                        float _3395 = _3374 + _3339;
                        float _3396 = _3375 + _3340;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3404 = dot(vec3(_1033, _1036, _1039), vec3(_3373, _3374, _3375));
                        float _4752 = isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0));
                        float _3407 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3408 = dot(vec3(_1033, _1036, _1039), vec3(_3400 * _3394, _3400 * _3395, _3400 * _3396));
                        float _4763 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3411 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3415 = ((_3411 * _3411) * (_3393 + (-1.0))) + 1.0;
                        float _3416 = _3351 * _3392;
                        float _3417 = _3416 * _3416;
                        float _3420 = ((1.0 - _3417) * _3341) + _3417;
                        float _4774 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                        float _3421 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
                        float _3422 = 1.0 - _3392;
                        float _3432 = (0.5 / (((_3421 * ((_3407 * _3422) + _3392)) + 9.9999999392252902907785028219223e-09) + (((_3421 * _3422) + _3392) * _3407))) * _3421;
                        float _4785 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3443 = (((_3393 * 3.1415927410125732421875) * (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0)))) / ((_3415 * _3415) * ((_3358 * 2.1991131305694580078125) + 3.141590118408203125))) * _3347;
                        _3195 = (_3362 * _3310.x) + _3268;
                        _3196 = (_3362 * _3310.y) + _3269;
                        _3197 = (_3362 * _3310.z) + _3270;
                        _3192 = (_3443 * _3327.x) + _3265;
                        _3193 = (_3443 * _3327.y) + _3266;
                        _3194 = (_3443 * _3327.z) + _3267;
                        if (_3272 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3265 = _3192;
                            _3266 = _3193;
                            _3267 = _3194;
                            _3268 = _3195;
                            _3269 = _3196;
                            _3270 = _3197;
                            _3271 = _3272;
                        }
                    }
                    frontier_phi_66_pred = _3192;
                    frontier_phi_66_pred_1 = _3197;
                    frontier_phi_66_pred_2 = _3196;
                    frontier_phi_66_pred_3 = _3195;
                    frontier_phi_66_pred_4 = _3194;
                    frontier_phi_66_pred_5 = _3193;
                }
                _2968 = frontier_phi_66_pred;
                _2978 = frontier_phi_66_pred_1;
                _2976 = frontier_phi_66_pred_2;
                _2974 = frontier_phi_66_pred_3;
                _2972 = frontier_phi_66_pred_4;
                _2970 = frontier_phi_66_pred_5;
                uint _3127 = _3126 + 1u;
                if (_3127 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3120 = _2968;
                    _3121 = _2970;
                    _3122 = _2972;
                    _3123 = _2974;
                    _3124 = _2976;
                    _3125 = _2978;
                    _3126 = _3127;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2967 = _2968;
            _2969 = _2970;
            _2971 = _2972;
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
        }
        uvec4 _2981 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2982 = _2981.z;
        uint _2984 = (_2982 >> 8u) & 15u;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        if (((4294967295u << _2984) & _2866) == 0u)
        {
            _3088 = _2967;
            _3090 = _2969;
            _3092 = _2971;
            _3094 = _2973;
            _3096 = _2975;
            _3098 = _2977;
        }
        else
        {
            float _3113 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
            float _3114 = _3113 * _2820;
            float _3115 = _3113 * _2821;
            float _3116 = _3113 * _2822;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2984 < ((_2982 >> 12u) & 15u))
            {
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3099;
                float _3248 = _2967;
                float _3249 = _2969;
                float _3250 = _2971;
                float _3251 = _2973;
                float _3252 = _2975;
                float _3253 = _2977;
                uint _3254 = _2984;
                uint _3263;
                bool _3264;
                for (;;)
                {
                    _3263 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                    _3264 = _3263 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3264)
                    {
                        frontier_phi_77_pred = _3253;
                        frontier_phi_77_pred_1 = _3252;
                        frontier_phi_77_pred_2 = _3251;
                        frontier_phi_77_pred_3 = _3250;
                        frontier_phi_77_pred_4 = _3249;
                        frontier_phi_77_pred_5 = _3248;
                    }
                    else
                    {
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3461;
                        float _3462;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3755;
                        float _3470 = _3248;
                        float _3471 = _3249;
                        float _3472 = _3250;
                        float _3473 = _3251;
                        float _3474 = _3252;
                        float _3475 = _3253;
                        uint _3476 = _3263;
                        uint _3477;
                        vec4 _3502;
                        float _3503;
                        vec4 _3518;
                        vec3 _3530;
                        vec4 _3545;
                        vec4 _3560;
                        float _3606;
                        bool _3607;
                        for (;;)
                        {
                            uint _3487 = ((_3254 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3476));
                            _3477 = (_3476 + 4294967295u) & _3476;
                            uint _3489 = _3487 * 40u;
                            _3502 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3489)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3489 + 3u)).x));
                            _3503 = _3502.w;
                            uint _3505 = (_3487 * 40u) + 4u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            uint _3520 = (_3487 * 40u) + 8u;
                            _3530 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x));
                            uint _3532 = (_3487 * 40u) + 16u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3487 * 40u) + 20u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3487 * 40u) + 24u;
                            vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3581 = (_3487 * 40u) + 28u;
                            vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            _3606 = fma(_2822, _3594.z, fma(_2821, _3594.y, _3594.x * _2820)) + _3594.w;
                            _3607 = !((fma(_2822, _3575.z, fma(_2821, _3575.y, _3575.x * _2820)) + _3575.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3607)
                            {
                                float _3634 = _3502.x - _2820;
                                float _3635 = _3502.y - _2821;
                                float _3636 = _3502.z - _2822;
                                float _3637 = dot(vec3(_3634, _3635, _3636), vec3(_3634, _3635, _3636));
                                float _3640 = inversesqrt(_3637);
                                float _3641 = _3640 * _3634;
                                float _3642 = _3640 * _3635;
                                float _3643 = _3640 * _3636;
                                float _3647 = 1.0 - (_3637 / (_3503 * _3503));
                                float _4796 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                                float _3652 = sqrt(_3637) * _3518.w;
                                float _3654 = 1.39999997615814208984375 / (_3652 + 1.39999997615814208984375);
                                float _3655 = _3654 * _3654;
                                float _3658 = ((1.0 - _3655) * dot(vec3(_3641, _3642, _3643), vec3(_1033, _1036, _1039))) + _3655;
                                float _3661 = _3652 * _3652;
                                float _3665 = (fma(_2822, _3545.z, fma(_2821, _3545.y, _3545.x * _2820)) + _3545.w) / _3606;
                                float _3666 = (fma(_2822, _3560.z, fma(_2821, _3560.y, _3560.x * _2820)) + _3560.w) / _3606;
                                float _3670 = 1.0 - dot(vec2(_3665, _3666), vec2(_3665, _3666));
                                float _4812 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                                float _3671 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3672 = _3671 * (((isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0))) * _3648) / ((_3661 * 0.699999988079071044921875) + 1.0));
                                float _3684 = exp2(log2(1.0 / ((_3661 * 3.5) + 5.0)) * 0.25);
                                float _3685 = 1.0 - _1108;
                                float _3692 = sqrt(1.0 - ((1.0 - (_3685 * _3685)) * (1.0 - (_3684 * _3684))));
                                float _3693 = _3692 * _3692;
                                float _3694 = _3693 * _3693;
                                float _3695 = _3641 - _3114;
                                float _3696 = _3642 - _3115;
                                float _3697 = _3643 - _3116;
                                float _3701 = inversesqrt(dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697)));
                                float _3705 = dot(vec3(_1033, _1036, _1039), vec3((-0.0) - _3114, (-0.0) - _3115, (-0.0) - _3116));
                                float _4823 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3708 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3709 = dot(vec3(_1033, _1036, _1039), vec3(_3701 * _3695, _3701 * _3696, _3701 * _3697));
                                float _4834 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3712 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3716 = ((_3712 * _3712) * (_3694 + (-1.0))) + 1.0;
                                float _3717 = _3654 * _3693;
                                float _3718 = _3717 * _3717;
                                float _3724 = ((1.0 - _3718) * dot(vec3(_1033, _1036, _1039), vec3(_3641, _3642, _3643))) + _3718;
                                float _4845 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                                float _3726 = 1.0 - _3693;
                                float _3736 = (0.5 / (((_3725 * ((_3708 * _3726) + _3693)) + 9.9999999392252902907785028219223e-09) + (((_3725 * _3726) + _3693) * _3708))) * _3725;
                                float _4856 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3746 = (_3671 * _3648) * (((_3694 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3716 * _3716) * ((_3661 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3672 * _3518.y;
                                frontier_phi_83_pred_1 = _3672 * _3518.x;
                                frontier_phi_83_pred_2 = _3746 * _3530.z;
                                frontier_phi_83_pred_3 = _3746 * _3530.y;
                                frontier_phi_83_pred_4 = _3746 * _3530.x;
                                frontier_phi_83_pred_5 = _3672 * _3518.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3754 = frontier_phi_83_pred;
                            _3753 = frontier_phi_83_pred_1;
                            _3752 = frontier_phi_83_pred_2;
                            _3751 = frontier_phi_83_pred_3;
                            _3750 = frontier_phi_83_pred_4;
                            _3755 = frontier_phi_83_pred_5;
                            _3460 = _3753 + _3473;
                            _3461 = _3754 + _3474;
                            _3462 = _3755 + _3475;
                            _3457 = _3750 + _3470;
                            _3458 = _3751 + _3471;
                            _3459 = _3752 + _3472;
                            if (_3477 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3461;
                                _3475 = _3462;
                                _3476 = _3477;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3462;
                        frontier_phi_77_pred_1 = _3461;
                        frontier_phi_77_pred_2 = _3460;
                        frontier_phi_77_pred_3 = _3459;
                        frontier_phi_77_pred_4 = _3458;
                        frontier_phi_77_pred_5 = _3457;
                    }
                    _3099 = frontier_phi_77_pred;
                    _3097 = frontier_phi_77_pred_1;
                    _3095 = frontier_phi_77_pred_2;
                    _3093 = frontier_phi_77_pred_3;
                    _3091 = frontier_phi_77_pred_4;
                    _3089 = frontier_phi_77_pred_5;
                    uint _3255 = _3254 + 1u;
                    if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3248 = _3089;
                        _3249 = _3091;
                        _3250 = _3093;
                        _3251 = _3095;
                        _3252 = _3097;
                        _3253 = _3099;
                        _3254 = _3255;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3093;
                frontier_phi_58_59_ladder_1 = _3099;
                frontier_phi_58_59_ladder_2 = _3097;
                frontier_phi_58_59_ladder_3 = _3095;
                frontier_phi_58_59_ladder_4 = _3091;
                frontier_phi_58_59_ladder_5 = _3089;
            }
            else
            {
                frontier_phi_58_59_ladder = _2971;
                frontier_phi_58_59_ladder_1 = _2977;
                frontier_phi_58_59_ladder_2 = _2975;
                frontier_phi_58_59_ladder_3 = _2973;
                frontier_phi_58_59_ladder_4 = _2969;
                frontier_phi_58_59_ladder_5 = _2967;
            }
            _3088 = frontier_phi_58_59_ladder_5;
            _3090 = frontier_phi_58_59_ladder_4;
            _3092 = frontier_phi_58_59_ladder;
            _3094 = frontier_phi_58_59_ladder_3;
            _3096 = frontier_phi_58_59_ladder_2;
            _3098 = frontier_phi_58_59_ladder_1;
        }
        float _3103 = isnan(1.0) ? _1092 : (isnan(_1092) ? 1.0 : min(_1092, 1.0));
        _2879 = (_3103 * _3094) + _2312;
        _2881 = (_3103 * _3096) + _2314;
        _2883 = (_3103 * _3098) + _2316;
        _2885 = ((_3088 * _1076) * _3103) + _2660;
        _2887 = ((_3090 * _1078) * _3103) + _2662;
        _2889 = ((_3092 * _1079) * _3103) + _2664;
    }
    else
    {
        _2879 = _2312;
        _2881 = _2314;
        _2883 = _2316;
        _2885 = _2660;
        _2887 = _2662;
        _2889 = _2664;
    }
    float _4872 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _4883 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4894 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2906 = ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2879 + ((isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))) * _1092))) + ((_2885 + ((isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _2907 = ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2881 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1092))) + ((_2887 + ((isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    float _2908 = ((isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0))) * (_2883 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1092))) + ((_2889 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1930)) * cbPerFrame._m0[3u].x);
    uint _2909 = _256 + 6u;
    float _2917 = _1014 / cbSceneParam._m0[86u].x;
    float _2918 = _1015 / cbSceneParam._m0[86u].y;
    vec4 _2932 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, (log2((isnan(cbSceneParam._m0[77u].w) ? _937 : (isnan(_937) ? cbSceneParam._m0[77u].w : min(_937, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2934 = _2932.x;
    float _2935 = _2932.y;
    float _2936 = _2932.z;
    float _2937 = _2932.w;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    if (_937 > cbSceneParam._m0[78u].w)
    {
        float _2992 = isnan(_937) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _937 : min(cbSceneParam._m0[80u].w, _937));
        float _2993 = _2992 / _937;
        float _3004 = _2993 * _987;
        float _3005 = _988 * _2993;
        float _3006 = (-0.0) - _3005;
        float _3008 = _2993 * _989;
        float _3010 = (cbSceneParam._m0[77u].w * _3006) / _2992;
        float _3011 = _3010 + cbSceneParam._m0[79u].w;
        float _3012 = cbSceneParam._m0[79u].w - _3005;
        float _3018 = sqrt(((_3004 * _3004) + (_3005 * _3005)) + (_3008 * _3008));
        float _3021 = (1.0 - (cbSceneParam._m0[77u].w / _2992)) * _3018;
        float _3026 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3028 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3205;
        if (abs((_3006 - _3010) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3205 = ((((_3011 > 0.0) ? exp2(_3026 * _3011) : (2.0 - exp2(_3028 * _3011))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3021;
        }
        else
        {
            float _3149 = 1.0 / cbSceneParam._m0[80u].x;
            float _3150 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : max(_3011, _3012));
            float _3151 = isnan(_3012) ? _3011 : (isnan(_3011) ? _3012 : min(_3011, _3012));
            float _3160 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : min(_3150, 0.0));
            float _3161 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : min(_3151, 0.0));
            _3205 = ((abs(_3018 / _3006) * cbSceneParam._m0[80u].y) * ((((_3160 - _3161) * 2.0) - ((exp2(_3026 * (isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0)))) - exp2(_3026 * (isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))))) * _3149)) - ((exp2(_3028 * _3160) - exp2(_3028 * _3161)) * _3149))) + (_3021 * cbSceneParam._m0[80u].z);
        }
        vec4 _3207 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2917, _2918, 1.0), 0.0);
        float _3216 = exp2((_3205 * (-1.44269502162933349609375)) * (1.0 - _3207.w));
        float _3217 = log2(_3216);
        float _3233 = log2(_2937);
        _3030 = (exp2(_3233 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].x)) * _3207.x) / cbSceneParam._m0[78u].x)) + _2934;
        _3032 = (exp2(_3233 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].y)) * _3207.y) / cbSceneParam._m0[78u].y)) + _2935;
        _3034 = (exp2(_3233 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3217 * cbSceneParam._m0[78u].z)) * _3207.z) / cbSceneParam._m0[78u].z)) + _2936;
        _3036 = _3216 * _2937;
    }
    else
    {
        _3030 = _2934;
        _3032 = _2935;
        _3034 = _2936;
        _3036 = _2937;
    }
    bool _3243;
    vec4 _3046;
    vec4 _3068;
    float _3070;
    float _3074;
    float _3075;
    float _3076;
    float _3077;
    bool _3087;
    for (;;)
    {
        _3046 = cbMatDynParam._m0[0u];
        float _3048 = roundEven(_3046.y);
        bool _3049 = _3048 == 3.0;
        float _3050 = log2(_3036);
        float _3057 = exp2(_3050 * cbSceneParam._m0[78u].x) * _2906;
        float _3058 = exp2(_3050 * cbSceneParam._m0[78u].y) * _2907;
        float _3059 = exp2(_3050 * cbSceneParam._m0[78u].z) * _2908;
        float _3066 = _1003 + (-0.5);
        _3068 = cbMtdParam._m0[1u];
        _3070 = _3068.y * _3066;
        float _3073 = (_3048 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3074 = _3073 * (_3049 ? _3057 : (_3057 + (cbSceneParam._m0[72u].w * _3030)));
        _3075 = _3073 * (_3049 ? _3058 : (_3058 + (cbSceneParam._m0[72u].w * _3032)));
        _3076 = _3073 * (_3049 ? _3059 : (_3059 + (cbSceneParam._m0[72u].w * _3034)));
        _3077 = _3066 * 0.999000012874603271484375;
        _3087 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3087)
        {
            if ((cbInstanceData._m0[_256 + 7u].x + _3077) < 0.5)
            {
                _3243 = true;
                break;
            }
        }
        uint _3184 = _1052 + uint(_3046.w);
        if ((cbInstanceData._m0[_3184].w < 1.0) && ((cbInstanceData._m0[_3184].w + _3077) < 0.5))
        {
            _3243 = true;
            break;
        }
        if ((_3070 + 1.0) < _3068.x)
        {
            _3243 = true;
            break;
        }
        _3243 = false;
        break;
    }
    float _3448;
    if (_3243)
    {
        discard_state = true;
        _3448 = 0.0;
    }
    else
    {
        _3448 = cbInstanceData._m0[_2909].w;
    }
    SV_Target.x = _3074;
    SV_Target.y = _3075;
    SV_Target.z = _3076;
    SV_Target.w = _3448;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2909].w;
    discard_exit();
}


