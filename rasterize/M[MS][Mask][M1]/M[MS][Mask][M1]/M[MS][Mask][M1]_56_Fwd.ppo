#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1328;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _339 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _377 = _375.x;
    float _389 = dot(vec4(_377, _375.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _406 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _339.x) * 2.0) - ((((_377 - _389) * cbMtdParam._m0[23u].w) + _389) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3655 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _414 = (_407 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _415 = (_407 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _416 = (_407 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _433 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _453 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _455 = _453.x;
    float _465 = dot(vec4(_455, _453.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _479 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _339.y) * 2.0) - ((((_455 - _465) * cbMtdParam._m0[23u].w) + _465) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3666 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _487 = (_480 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414;
    float _488 = (_480 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415;
    float _489 = (_480 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416;
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = _519.x;
    float _522 = _519.y;
    float _523 = _519.z;
    float _530 = ((_502.x - _521) * _407) + _521;
    float _531 = ((_502.y - _522) * _407) + _522;
    float _532 = ((_502.z - _523) * _407) + _523;
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _557 = ((_544.z - _532) * _480) + _532;
    float _560 = ((((_544.x - _530) * _480) + _530) * 2.0) + (-1.0);
    float _562 = ((((_544.y - _531) * _480) + _531) * 2.0) + (-1.0);
    float _563 = dot(vec2(_560, _562), vec2(_560, _562));
    float _3677 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _568 = sqrt(1.0 - (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))));
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _594 = (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _560;
    float _595 = (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _562;
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _609 = _607.x;
    float _610 = 1.0 - _609;
    float _639 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_609 - _610) * cbMtdParam._m0[24u].w) + _610) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3688 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _640 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _648 = ((((cbMtdParam._m0[10u].x - _487) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _640) + _487;
    float _649 = ((((cbMtdParam._m0[10u].y - _488) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _640) + _488;
    float _650 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _489)) * _640) + _489;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _678 = _676.x;
    float _696 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _678) * _407) + _678;
    float _714 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _696) * _480) + _696;
    float _718 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _714) * cbMtdParam._m0[19u].z) + _714;
    float _720 = _718 - (_718 * _640);
    float _724 = (cbMtdParam._m0[19u].w * (_582.z - _557)) + _557;
    float _728 = ((cbMtdParam._m0[23u].x - _724) * _640) + _724;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _753 = (_747.x * 2.0) + (-1.0);
    float _754 = (_747.y * 2.0) + (-1.0);
    float _755 = dot(vec2(_753, _754), vec2(_753, _754));
    float _3699 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _771 = (_640 * (((cbMtdParam._m0[22u].z * _594) - _594) + _753)) + _594;
    float _772 = (_640 * (((cbMtdParam._m0[22u].z * _595) - _595) + _754)) + _595;
    float _773 = (_640 * (sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) - _568)) + _568;
    float _775 = cbMtdParam._m0[22u].x + _582.w;
    float _778 = fma(_773, _240 * NORMAL.x, fma(_772, _247 * TANGENT.x, (_233 * _225) * _771));
    float _781 = fma(_773, _240 * NORMAL.y, fma(_772, _247 * TANGENT.y, (_233 * _226) * _771));
    float _784 = fma(_773, _240 * NORMAL.z, fma(_772, _247 * TANGENT.z, (_233 * _227) * _771));
    float _788 = inversesqrt(dot(vec3(_778, _781, _784), vec3(_778, _781, _784)));
    float _789 = _788 * _778;
    float _790 = _788 * _781;
    float _791 = _788 * _784;
    float _3710 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _792 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _3732 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _3743 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _3754 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _3765 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _797 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _811 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _851 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _861 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _851);
    float _862 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _851);
    float _863 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _851);
    float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
    float _868 = _861 * _867;
    float _869 = _862 * _867;
    float _870 = _863 * _867;
    float _876 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _877 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _895 = fma(_791, cbSceneParam._m0[5u].z, fma(_790, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _789));
    float _898 = fma(_791, cbSceneParam._m0[6u].z, fma(_790, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _789));
    float _901 = fma(_791, cbSceneParam._m0[7u].z, fma(_790, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _789));
    uint _915 = (_253 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _921 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_915].x;
    float _922 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_915].y;
    float _923 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_915].z;
    float _3776 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _924 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _925 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _927 = 1.0 - _797;
    float _928 = _924 * _927;
    float _929 = _925 * _927;
    float _930 = _926 * _927;
    float _935 = (_924 + (-0.039999999105930328369140625)) * _797;
    float _936 = (_925 + (-0.039999999105930328369140625)) * _797;
    float _937 = (_926 + (-0.039999999105930328369140625)) * _797;
    float _938 = _935 + 0.039999999105930328369140625;
    float _940 = _936 + 0.039999999105930328369140625;
    float _941 = _937 + 0.039999999105930328369140625;
    vec4 _950 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _876, cbSceneParam._m0[86u].y * _877));
    float _954 = ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * TEXCOORD_5.w) * _950.x;
    float _955 = dot(vec3(_789, _790, _791), vec3(_868, _869, _870));
    float _958 = _955 * 2.0;
    float _962 = (_958 * _789) - _868;
    float _963 = (_958 * _790) - _869;
    float _964 = (_958 * _791) - _870;
    float _968 = abs(dot(vec3(_868, _869, _870), vec3(_789, _790, _791)));
    float _3809 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _970 = sqrt(_792);
    float _983 = exp2((_970 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_970 * 3.0));
    float _989 = (1.0 - _983) * ((_970 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _990 = _983 * _970;
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1022 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1327;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    float _1341;
    float _1342;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1052 = fma(_1026, cbModelParam._m0[26u].z, fma(_1022, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1018));
        float _1056 = fma(_1026, cbModelParam._m0[27u].z, fma(_1022, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1018));
        float _1060 = fma(_1026, cbModelParam._m0[28u].z, fma(_1022, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1018));
        float _1085 = _1018 + _789;
        float _1086 = _1022 + _790;
        float _1087 = _1026 + _791;
        float _1097 = fma(_1087, cbModelParam._m0[26u].z, fma(_1086, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1085)) - _1052;
        float _1098 = fma(_1087, cbModelParam._m0[27u].z, fma(_1086, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1085)) - _1056;
        float _1099 = fma(_1087, cbModelParam._m0[28u].z, fma(_1086, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1085)) - _1060;
        float _1103 = inversesqrt(dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099)));
        float _1116 = ((_1103 * _1097) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1052 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1117 = ((_1103 * _1098) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1056 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1118 = ((_1103 * _1099) / cbModelParam._m0[34u].z) + ((((((_1060 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1116, _1117, _1118), 0.0);
        float _1155 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1121.x + (-0.5));
        float _1157 = _1155 * (_1121.y + (-0.5));
        float _1158 = _1155 * (_1121.z + (-0.5));
        float _1165 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1128.x + (-0.5));
        float _1167 = _1165 * (_1128.y + (-0.5));
        float _1168 = _1165 * (_1128.z + (-0.5));
        float _1175 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1135.x + (-0.5));
        float _1177 = _1175 * (_1135.y + (-0.5));
        float _1178 = _1175 * (_1135.z + (-0.5));
        float _1185 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1142.x + (-0.5));
        float _1187 = _1185 * (_1142.y + (-0.5));
        float _1188 = _1185 * (_1142.z + (-0.5));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = _1156 * 0.5;
        float _1193 = _1166 * 0.5;
        float _1194 = _1176 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1209 = (dot(vec3(_789, _790, _791), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1219 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3857 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1221 + 1.0))) + _1226) * _1189;
        float _1236 = _1157 * 0.5;
        float _1237 = _1167 * 0.5;
        float _1238 = _1177 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_789, _790, _791), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3890 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1263 + 1.0))) + _1268) * _1190;
        float _1278 = _1158 * 0.5;
        float _1279 = _1168 * 0.5;
        float _1280 = _1178 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_789, _790, _791), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3923 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1305 + 1.0))) + _1310) * _1191;
        _1327 = _1158;
        _1329 = _1157;
        _1330 = _1156;
        _1331 = _1168;
        _1332 = _1167;
        _1333 = _1166;
        _1334 = _1178;
        _1335 = _1177;
        _1336 = _1176;
        _1337 = _1191;
        _1338 = _1190;
        _1339 = _1189;
        _1340 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1341 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
        _1342 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
    }
    else
    {
        _1327 = _1328;
        _1329 = _1328;
        _1330 = _1328;
        _1331 = _1328;
        _1332 = _1328;
        _1333 = _1328;
        _1334 = _1328;
        _1335 = _1328;
        _1336 = _1328;
        _1337 = _1328;
        _1338 = _1328;
        _1339 = _1328;
        _1340 = 0.0;
        _1341 = 0.0;
        _1342 = 0.0;
    }
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1366 = fma(_1026, cbModelParam._m0[30u].z, fma(_1022, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1018));
        float _1370 = fma(_1026, cbModelParam._m0[31u].z, fma(_1022, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1018));
        float _1374 = fma(_1026, cbModelParam._m0[32u].z, fma(_1022, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1018));
        float _1397 = _1018 + _789;
        float _1398 = _1022 + _790;
        float _1399 = _1026 + _791;
        float _1409 = fma(_1399, cbModelParam._m0[30u].z, fma(_1398, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1397)) - _1366;
        float _1410 = fma(_1399, cbModelParam._m0[31u].z, fma(_1398, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1397)) - _1370;
        float _1411 = fma(_1399, cbModelParam._m0[32u].z, fma(_1398, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1397)) - _1374;
        float _1415 = inversesqrt(dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411)));
        float _1428 = ((_1415 * _1409) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1366 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1429 = ((_1415 * _1410) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1370 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1430 = ((_1415 * _1411) / cbModelParam._m0[35u].z) + ((((((_1374 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1428, _1429, _1430), 0.0);
        float _1465 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1432.x + (-0.5));
        float _1467 = _1465 * (_1432.y + (-0.5));
        float _1468 = _1465 * (_1432.z + (-0.5));
        float _1475 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1439.x + (-0.5));
        float _1477 = _1475 * (_1439.y + (-0.5));
        float _1478 = _1475 * (_1439.z + (-0.5));
        float _1485 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1486 = _1485 * (_1446.x + (-0.5));
        float _1487 = _1485 * (_1446.y + (-0.5));
        float _1488 = _1485 * (_1446.z + (-0.5));
        float _1495 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1496 = _1495 * (_1453.x + (-0.5));
        float _1497 = _1495 * (_1453.y + (-0.5));
        float _1498 = _1495 * (_1453.z + (-0.5));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1502 = _1466 * 0.5;
        float _1503 = _1476 * 0.5;
        float _1504 = _1486 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_789, _790, _791), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _3986 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1529 + 1.0))) + _1534) * _1499;
        float _1544 = _1467 * 0.5;
        float _1545 = _1477 * 0.5;
        float _1546 = _1487 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_789, _790, _791), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4019 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1571 + 1.0))) + _1576) * _1500;
        float _1586 = _1468 * 0.5;
        float _1587 = _1478 * 0.5;
        float _1588 = _1488 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_789, _790, _791), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1501 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4052 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1613 + 1.0))) + _1618) * _1501;
        _1635 = _1468;
        _1636 = _1467;
        _1637 = _1466;
        _1638 = _1478;
        _1639 = _1477;
        _1640 = _1476;
        _1641 = _1488;
        _1642 = _1487;
        _1643 = _1486;
        _1644 = _1501;
        _1645 = _1500;
        _1646 = _1499;
        _1647 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1648 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1649 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
    }
    else
    {
        _1635 = _1328;
        _1636 = _1328;
        _1637 = _1328;
        _1638 = _1328;
        _1639 = _1328;
        _1640 = _1328;
        _1641 = _1328;
        _1642 = _1328;
        _1643 = _1328;
        _1644 = _1328;
        _1645 = _1328;
        _1646 = _1328;
        _1647 = 0.0;
        _1648 = 0.0;
        _1649 = 0.0;
    }
    float _1659 = (cbModelParam._m0[1u].x * (_1647 - _1340)) + _1340;
    float _1660 = (cbModelParam._m0[1u].x * (_1648 - _1341)) + _1341;
    float _1661 = (cbModelParam._m0[1u].x * (_1649 - _1342)) + _1342;
    float _1682 = fma(_1661, cbSceneParam._m0[89u].z, fma(_1660, cbSceneParam._m0[89u].y, _1659 * cbSceneParam._m0[89u].x));
    float _1685 = fma(_1661, cbSceneParam._m0[90u].z, fma(_1660, cbSceneParam._m0[90u].y, _1659 * cbSceneParam._m0[90u].x));
    float _1688 = fma(_1661, cbSceneParam._m0[91u].z, fma(_1660, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1659));
    float _1703 = _962 * 0.5;
    float _1704 = _963 * 0.5;
    float _1705 = _964 * 0.5;
    float _1706 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1637, _1640, _1643, _1646));
    float _1709 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1636, _1639, _1642, _1645));
    float _1712 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1635, _1638, _1641, _1644));
    float _1746;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1719 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1327, _1331, _1334, _1337));
        float _1723 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1329, _1332, _1335, _1338));
        float _1727 = dot(vec4(_1703, _1704, _1705, 1.0), vec4(_1330, _1333, _1336, _1339));
        float _1734 = dot(vec4(cbModelParam._m0[39u]), vec4(_1703, _1704, _1705, 1.0));
        _1746 = dot(vec3(isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1746 = 1.0;
    }
    float _1757;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1748 = dot(vec4(cbModelParam._m0[40u]), vec4(_1703, _1704, _1705, 1.0));
        _1757 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1748) ? 0.0 : (isnan(0.0) ? _1748 : max(0.0, _1748))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1757 = 1.0;
    }
    float _1761 = (_1757 * cbModelParam._m0[1u].x) + (_1746 * (1.0 - cbModelParam._m0[1u].x));
    float _1771 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _792);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1771 : min(cbModelParam._m0[25u].z, _1771));
    float _1854;
    float _1856;
    float _1858;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1821 = fma(_1026, cbModelParam._m0[13u].z, fma(_1022, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1018)) + cbModelParam._m0[13u].w;
        float _1825 = fma(_1026, cbModelParam._m0[14u].z, fma(_1022, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1018)) + cbModelParam._m0[14u].w;
        float _1829 = fma(_1026, cbModelParam._m0[15u].z, fma(_1022, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1018)) + cbModelParam._m0[15u].w;
        float _1832 = fma(_964, cbModelParam._m0[13u].z, fma(_963, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962));
        float _1835 = fma(_964, cbModelParam._m0[14u].z, fma(_963, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962));
        float _1838 = fma(_964, cbModelParam._m0[15u].z, fma(_963, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962));
        float _1866;
        if (_1832 > 0.0)
        {
            _1866 = abs((1.0 - _1821) / _1832);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1832 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1821 + 1.0) / _1832);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1866 = frontier_phi_14_12_ladder;
        }
        float _2069;
        if (_1835 > 0.0)
        {
            _2069 = abs((1.0 - _1825) / _1835);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1835 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1825 + 1.0) / _1835);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2069 = frontier_phi_23_19_ladder;
        }
        float _2323;
        if (_1838 > 0.0)
        {
            _2323 = abs((1.0 - _1829) / _1838);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1829 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2323 = frontier_phi_35_30_ladder;
        }
        float _2325 = isnan(_2069) ? _1866 : (isnan(_1866) ? _2069 : min(_1866, _2069));
        float _2326 = isnan(_2323) ? _2325 : (isnan(_2325) ? _2323 : min(_2325, _2323));
        float _2330 = (_2326 * _1832) + _1821;
        float _2331 = (_2326 * _1835) + _1825;
        float _2332 = (_2326 * _1838) + _1829;
        float _2333 = _2326 * 9.9999997473787516355514526367188e-05;
        float _2335 = (-1.0) - _2333;
        float _2337 = _2333 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2332 > _2337) || ((_2332 < _2335) || ((_2331 > _2337) || ((_2331 < _2335) || ((_2330 < _2335) || (_2330 > _2337))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2332, cbModelParam._m0[9u].z, fma(_2331, cbModelParam._m0[9u].y, _2330 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2332, cbModelParam._m0[10u].z, fma(_2331, cbModelParam._m0[10u].y, _2330 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2332, cbModelParam._m0[11u].z, fma(_2331, cbModelParam._m0[11u].y, _2330 * cbModelParam._m0[11u].x))), _1772);
            frontier_phi_13_35_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1854 = frontier_phi_13_35_ladder_2;
        _1856 = frontier_phi_13_35_ladder_1;
        _1858 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1842 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_962, _963, _964), _1772);
        _1854 = _1842.x * cbModelParam._m0[1u].y;
        _1856 = _1842.y * cbModelParam._m0[1u].y;
        _1858 = _1842.z * cbModelParam._m0[1u].y;
    }
    float _1862 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _792);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1862 : min(cbModelParam._m0[25u].w, _1862));
    float _1953;
    float _1955;
    float _1957;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1917 = fma(_1026, cbModelParam._m0[21u].z, fma(_1022, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1018)) + cbModelParam._m0[21u].w;
        float _1921 = fma(_1026, cbModelParam._m0[22u].z, fma(_1022, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1018)) + cbModelParam._m0[22u].w;
        float _1925 = fma(_1026, cbModelParam._m0[23u].z, fma(_1022, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1018)) + cbModelParam._m0[23u].w;
        float _1928 = fma(_964, cbModelParam._m0[21u].z, fma(_963, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962));
        float _1931 = fma(_964, cbModelParam._m0[22u].z, fma(_963, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962));
        float _1934 = fma(_964, cbModelParam._m0[23u].z, fma(_963, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962));
        float _2074;
        if (_1928 > 0.0)
        {
            _2074 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2074 = frontier_phi_25_21_ladder;
        }
        float _2350;
        if (_1931 > 0.0)
        {
            _2350 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2350 = frontier_phi_37_32_ladder;
        }
        float _2563;
        if (_1934 > 0.0)
        {
            _2563 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2563 = frontier_phi_46_43_ladder;
        }
        float _2565 = isnan(_2350) ? _2074 : (isnan(_2074) ? _2350 : min(_2074, _2350));
        float _2566 = isnan(_2563) ? _2565 : (isnan(_2565) ? _2563 : min(_2565, _2563));
        float _2570 = (_2566 * _1928) + _1917;
        float _2571 = (_2566 * _1931) + _1921;
        float _2572 = (_2566 * _1934) + _1925;
        float _2573 = _2566 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2573;
        float _2576 = _2573 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2572 > _2576) || ((_2572 < _2574) || ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 < _2574) || (_2570 > _2576))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2771 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2572, cbModelParam._m0[17u].z, fma(_2571, cbModelParam._m0[17u].y, _2570 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2572, cbModelParam._m0[18u].z, fma(_2571, cbModelParam._m0[18u].y, _2570 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2572, cbModelParam._m0[19u].z, fma(_2571, cbModelParam._m0[19u].y, _2570 * cbModelParam._m0[19u].x))), _1863);
            frontier_phi_22_46_ladder = _2771.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2771.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2771.x * cbModelParam._m0[1u].z;
        }
        _1953 = frontier_phi_22_46_ladder_2;
        _1955 = frontier_phi_22_46_ladder_1;
        _1957 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_962, _963, _964), _1863);
        _1953 = _1937.x * cbModelParam._m0[1u].z;
        _1955 = _1937.y * cbModelParam._m0[1u].z;
        _1957 = _1937.z * cbModelParam._m0[1u].z;
    }
    float _1970 = (((_989 * _938) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1953 - _1854)) + _1854);
    float _1972 = (((_989 * _940) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1955 - _1856)) + _1856);
    float _1974 = (((_989 * _941) + _990) * _954) * ((cbModelParam._m0[1u].w * (_1957 - _1858)) + _1858);
    float _1977 = fma(_1974, cbSceneParam._m0[89u].z, fma(_1972, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1980 = fma(_1974, cbSceneParam._m0[90u].z, fma(_1972, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1983 = fma(_1974, cbSceneParam._m0[91u].z, fma(_1972, cbSceneParam._m0[91u].y, _1970 * cbSceneParam._m0[91u].x));
    uvec4 _1993 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _1995 = _1993.x * 14u;
    uint _1996 = _1995 + 13u;
    float _2003 = _954 + (-1.0);
    float _2008 = (cbLight._m0[_1996].x * _2003) + 1.0;
    float _2009 = (cbLight._m0[_1996].y * _2003) + 1.0;
    float _2010 = (cbLight._m0[_1996].z * _2003) + 1.0;
    float _2011 = (cbLight._m0[_1996].w * _2003) + 1.0;
    uint _2012 = _1995 + 5u;
    float _2018 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2022 = _1995 + 4u;
    float _2028 = isnan(1.0) ? _2008 : (isnan(_2008) ? 1.0 : min(_2008, 1.0));
    uint _2032 = _1995 | 1u;
    float _2043 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_789, _790, _791));
    float _2046 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_789, _790, _791));
    float _4188 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _4199 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2051 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2053 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2060 = ((cbLight._m0[_2012].x * _2018) * _2053) + ((cbLight._m0[_2022].x * _2028) * _2051);
    float _2061 = ((_2018 * cbLight._m0[_2012].y) * _2053) + ((_2028 * cbLight._m0[_2022].y) * _2051);
    float _2062 = ((_2018 * cbLight._m0[_2012].z) * _2053) + ((_2028 * cbLight._m0[_2022].z) * _2051);
    uvec4 _2066 = floatBitsToUint(cbLight._m0[_1995 + 12u]);
    bool _2068 = _2066.x == 0u;
    float _2079;
    float _2081;
    float _2083;
    if (_2068)
    {
        _2079 = _2060;
        _2081 = _2061;
        _2083 = _2062;
    }
    else
    {
        uint _2087 = _1995 + 6u;
        float _2103 = (dot(vec3(cbLight._m0[_1995 + 2u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2104 = _2103 * _2103;
        float _4210 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
        float _2105 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2106 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2079 = (((cbLight._m0[_2087].x * 0.3183098733425140380859375) * _2105) * _2106) + _2060;
        _2081 = (((cbLight._m0[_2087].y * 0.3183098733425140380859375) * _2105) * _2106) + _2061;
        _2083 = (((cbLight._m0[_2087].z * 0.3183098733425140380859375) * _2105) * _2106) + _2062;
    }
    bool _2086 = _2066.y == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2086)
    {
        _2124 = _2079;
        _2126 = _2081;
        _2128 = _2083;
    }
    else
    {
        uint _2294 = _1995 + 7u;
        float _2310 = (dot(vec3(cbLight._m0[_1995 + 3u].xyz), vec3(_789, _790, _791)) * 0.5) + 0.5;
        float _2311 = _2310 * _2310;
        float _4226 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2312 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2313 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2124 = (((cbLight._m0[_2294].x * 0.3183098733425140380859375) * _2312) * _2313) + _2079;
        _2126 = (((cbLight._m0[_2294].y * 0.3183098733425140380859375) * _2312) * _2313) + _2081;
        _2128 = (((cbLight._m0[_2294].z * 0.3183098733425140380859375) * _2312) * _2313) + _2083;
    }
    uint _2131 = _1995 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1995].w)) * _792) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_1995].x + _868;
    float _2147 = cbLight._m0[_1995].y + _869;
    float _2148 = cbLight._m0[_1995].z + _870;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_1995].xyz));
    float _4242 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _2160 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2161 = dot(vec3(_789, _790, _791), vec3(_2153, _2154, _2155));
    float _4264 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_1995].xyz), vec3(_2153, _2154, _2155));
    float _4275 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2182 = 0.959999978542327880859375 - _935;
    float _2184 = 0.959999978542327880859375 - _936;
    float _2185 = 0.959999978542327880859375 - _937;
    float _2192 = 1.0 - _2145;
    float _2203 = (0.5 / (((_2160 * ((_2159 * _2192) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2192) + _2145) * _2159))) * _2159;
    float _4286 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2205 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2216 = _1995 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2032].w)) * _792) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2032].x + _868;
    float _2230 = cbLight._m0[_2032].y + _869;
    float _2231 = cbLight._m0[_2032].z + _870;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2032].xyz));
    float _4297 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2243 = dot(vec3(_789, _790, _791), vec3(_2236, _2237, _2238));
    float _4308 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2032].xyz), vec3(_2236, _2237, _2238));
    float _4319 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2269 = 1.0 - _2228;
    float _2279 = (0.5 / (((_2160 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2269) + _2228) * _2242))) * _2242;
    float _4330 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2291 = (((((_2262 * _2182) + _938) * cbLight._m0[_2216].x) * _2281) * _2018) + (((((_2181 * _2182) + _938) * cbLight._m0[_2131].x) * _2205) * _2028);
    float _2292 = (((((_2262 * _2184) + _940) * cbLight._m0[_2216].y) * _2281) * _2018) + (((((_2181 * _2184) + _940) * cbLight._m0[_2131].y) * _2205) * _2028);
    float _2293 = (((((_2262 * _2185) + _941) * cbLight._m0[_2216].z) * _2281) * _2018) + (((((_2181 * _2185) + _941) * cbLight._m0[_2131].z) * _2205) * _2028);
    float _2355;
    float _2357;
    float _2359;
    if (_2068)
    {
        _2355 = _2291;
        _2357 = _2292;
        _2359 = _2293;
    }
    else
    {
        uint _2361 = _1995 + 2u;
        uint _2365 = _1995 + 10u;
        float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2361].w)) * _792) * 0.949999988079071044921875);
        float _2380 = _2379 * _2379;
        float _2381 = cbLight._m0[_2361].x + _868;
        float _2382 = cbLight._m0[_2361].y + _869;
        float _2383 = cbLight._m0[_2361].z + _870;
        float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
        float _2388 = _2387 * _2381;
        float _2389 = _2387 * _2382;
        float _2390 = _2387 * _2383;
        float _2391 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2361].xyz));
        float _4341 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2395 = dot(vec3(_789, _790, _791), vec3(_2388, _2389, _2390));
        float _4352 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2399 = dot(vec3(cbLight._m0[_2361].xyz), vec3(_2388, _2389, _2390));
        float _4363 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2403 = _2380 * _2380;
        float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
        float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2421 = 1.0 - _2380;
        float _2431 = (0.5 / (((_2160 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2421) + _2380) * _2394))) * _2394;
        float _4374 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2433 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
        float _2434 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
        _2355 = (((((_2414 * _2182) + _938) * cbLight._m0[_2365].x) * _2433) * _2434) + _2291;
        _2357 = (((((_2414 * _2184) + _940) * cbLight._m0[_2365].y) * _2433) * _2434) + _2292;
        _2359 = (((((_2414 * _2185) + _941) * cbLight._m0[_2365].z) * _2433) * _2434) + _2293;
    }
    float _2469;
    float _2471;
    float _2473;
    if (_2086)
    {
        _2469 = _2355;
        _2471 = _2357;
        _2473 = _2359;
    }
    else
    {
        uint _2480 = _1995 + 3u;
        uint _2484 = _1995 + 11u;
        float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2480].w)) * _792) * 0.949999988079071044921875);
        float _2499 = _2498 * _2498;
        float _2500 = cbLight._m0[_2480].x + _868;
        float _2501 = cbLight._m0[_2480].y + _869;
        float _2502 = cbLight._m0[_2480].z + _870;
        float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
        float _2507 = _2506 * _2500;
        float _2508 = _2506 * _2501;
        float _2509 = _2506 * _2502;
        float _2510 = dot(vec3(_789, _790, _791), vec3(cbLight._m0[_2480].xyz));
        float _4390 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2514 = dot(vec3(_789, _790, _791), vec3(_2507, _2508, _2509));
        float _4401 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2518 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_2507, _2508, _2509));
        float _4412 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2522 = _2499 * _2499;
        float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
        float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2540 = 1.0 - _2499;
        float _2550 = (0.5 / (((_2160 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2540) + _2499) * _2513))) * _2513;
        float _4423 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2469 = (((((_2533 * _2182) + _938) * cbLight._m0[_2484].x) * _2552) * _2553) + _2355;
        _2471 = (((((_2533 * _2184) + _940) * cbLight._m0[_2484].y) * _2552) * _2553) + _2357;
        _2473 = (((((_2533 * _2185) + _941) * cbLight._m0[_2484].z) * _2552) * _2553) + _2359;
    }
    float _2688;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    float _2698;
    if (_1993.y == 0u)
    {
        float _2628 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2629 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2628;
        float _2630 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2628;
        float _2631 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2628;
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _877) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _876) / _2644)));
        float _2665 = (log2(_2631 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uvec4 _2674 = texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u));
        uint _2675 = _2674.x;
        uint _2676 = _2643.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & _2675) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2937)
                {
                    frontier_phi_61_pred = _2921;
                    frontier_phi_61_pred_1 = _2926;
                    frontier_phi_61_pred_2 = _2925;
                    frontier_phi_61_pred_3 = _2924;
                    frontier_phi_61_pred_4 = _2923;
                    frontier_phi_61_pred_5 = _2922;
                }
                else
                {
                    float _3045;
                    float _3046;
                    float _3047;
                    float _3048;
                    float _3049;
                    float _3050;
                    uint _3051;
                    _3045 = _2921;
                    _3046 = _2922;
                    _3047 = _2923;
                    _3048 = _2924;
                    _3049 = _2925;
                    _3050 = _2926;
                    _3051 = _2936;
                    float _2977;
                    float _2978;
                    float _2979;
                    float _2980;
                    float _2981;
                    float _2982;
                    for (;;)
                    {
                        uint _3055 = uint(findLSB(_3051)) + (_2927 << 5u);
                        uint _3052 = (_3051 + 4294967295u) & _3051;
                        uint _3057 = _3055 * 48u;
                        vec4 _3071 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3057)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3057 + 3u)).x));
                        uint _3077 = (_3055 * 48u) + 4u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3077)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3077 + 3u)).x));
                        uint _3096 = (_3055 * 48u) + 8u;
                        vec3 _3107 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x));
                        float _3111 = _3071.x - _2629;
                        float _3112 = _3071.y - _2630;
                        float _3113 = _3071.z - _2631;
                        float _3114 = dot(vec3(_3111, _3112, _3113), vec3(_3111, _3112, _3113));
                        float _3117 = inversesqrt(_3114);
                        float _3118 = _3117 * _3111;
                        float _3119 = _3117 * _3112;
                        float _3120 = _3117 * _3113;
                        float _3121 = dot(vec3(_895, _898, _901), vec3(_3118, _3119, _3120));
                        float _3126 = 1.0 - (_3114 * _3071.w);
                        float _4449 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                        float _3127 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3128 = sqrt(_3114) * _3090.w;
                        float _3131 = 1.39999997615814208984375 / (_3128 + 1.39999997615814208984375);
                        float _3132 = _3131 * _3131;
                        float _3135 = ((1.0 - _3132) * _3121) + _3132;
                        float _3138 = _3128 * _3128;
                        float _3142 = ((isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0))) * _3127) / ((_3138 * 0.699999988079071044921875) + 1.0);
                        float _3146 = (-0.0) - _2629;
                        float _3147 = (-0.0) - _2630;
                        float _3148 = (-0.0) - _2631;
                        float _3152 = inversesqrt(dot(vec3(_3146, _3147, _3148), vec3(_3146, _3147, _3148)));
                        float _3153 = _3152 * _3146;
                        float _3154 = _3152 * _3147;
                        float _3155 = _3152 * _3148;
                        float _3163 = exp2(log2(1.0 / ((_3138 * 3.5) + 5.0)) * 0.25);
                        float _3164 = 1.0 - _970;
                        float _3171 = sqrt(1.0 - ((1.0 - (_3164 * _3164)) * (1.0 - (_3163 * _3163))));
                        float _3172 = _3171 * _3171;
                        float _3173 = _3172 * _3172;
                        float _3174 = _3153 + _3118;
                        float _3175 = _3154 + _3119;
                        float _3176 = _3155 + _3120;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3184 = dot(vec3(_895, _898, _901), vec3(_3153, _3154, _3155));
                        float _4465 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
                        float _3187 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3188 = dot(vec3(_895, _898, _901), vec3(_3180 * _3174, _3180 * _3175, _3180 * _3176));
                        float _4476 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3191 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3195 = ((_3191 * _3191) * (_3173 + (-1.0))) + 1.0;
                        float _3196 = _3131 * _3172;
                        float _3197 = _3196 * _3196;
                        float _3200 = ((1.0 - _3197) * _3121) + _3197;
                        float _4487 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3201 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3202 = 1.0 - _3172;
                        float _3212 = (0.5 / (((_3201 * ((_3187 * _3202) + _3172)) + 9.9999999392252902907785028219223e-09) + (((_3201 * _3202) + _3172) * _3187))) * _3201;
                        float _4498 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3223 = (((_3173 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3195 * _3195) * ((_3138 * 2.1991131305694580078125) + 3.141590118408203125))) * _3127;
                        _2980 = (_3142 * _3090.x) + _3048;
                        _2981 = (_3142 * _3090.y) + _3049;
                        _2982 = (_3142 * _3090.z) + _3050;
                        _2977 = (_3223 * _3107.x) + _3045;
                        _2978 = (_3223 * _3107.y) + _3046;
                        _2979 = (_3223 * _3107.z) + _3047;
                        if (_3052 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3045 = _2977;
                            _3046 = _2978;
                            _3047 = _2979;
                            _3048 = _2980;
                            _3049 = _2981;
                            _3050 = _2982;
                            _3051 = _3052;
                        }
                    }
                    frontier_phi_61_pred = _2977;
                    frontier_phi_61_pred_1 = _2982;
                    frontier_phi_61_pred_2 = _2981;
                    frontier_phi_61_pred_3 = _2980;
                    frontier_phi_61_pred_4 = _2979;
                    frontier_phi_61_pred_5 = _2978;
                }
                _2777 = frontier_phi_61_pred;
                _2787 = frontier_phi_61_pred_1;
                _2785 = frontier_phi_61_pred_2;
                _2783 = frontier_phi_61_pred_3;
                _2781 = frontier_phi_61_pred_4;
                _2779 = frontier_phi_61_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2777;
                    _2922 = _2779;
                    _2923 = _2781;
                    _2924 = _2783;
                    _2925 = _2785;
                    _2926 = _2787;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2793) & _2675) == 0u)
        {
            _2889 = _2776;
            _2891 = _2778;
            _2893 = _2780;
            _2895 = _2782;
            _2897 = _2784;
            _2899 = _2786;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
            float _2915 = _2914 * _2629;
            float _2916 = _2914 * _2630;
            float _2917 = _2914 * _2631;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3028 = _2776;
                float _3029 = _2778;
                float _3030 = _2780;
                float _3031 = _2782;
                float _3032 = _2784;
                float _3033 = _2786;
                uint _3034 = _2793;
                uint _3043;
                bool _3044;
                for (;;)
                {
                    _3043 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                    _3044 = _3043 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3044)
                    {
                        frontier_phi_67_pred = _3031;
                        frontier_phi_67_pred_1 = _3032;
                        frontier_phi_67_pred_2 = _3033;
                        frontier_phi_67_pred_3 = _3030;
                        frontier_phi_67_pred_4 = _3029;
                        frontier_phi_67_pred_5 = _3028;
                    }
                    else
                    {
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3526;
                        float _3241 = _3028;
                        float _3242 = _3029;
                        float _3243 = _3030;
                        float _3244 = _3031;
                        float _3245 = _3032;
                        float _3246 = _3033;
                        uint _3247 = _3043;
                        uint _3248;
                        vec4 _3273;
                        float _3274;
                        vec4 _3289;
                        vec3 _3301;
                        vec4 _3316;
                        vec4 _3331;
                        float _3377;
                        bool _3378;
                        for (;;)
                        {
                            uint _3258 = ((_3034 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3247));
                            _3248 = (_3247 + 4294967295u) & _3247;
                            uint _3260 = _3258 * 40u;
                            _3273 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3260)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3260 + 3u)).x));
                            _3274 = _3273.w;
                            uint _3276 = (_3258 * 40u) + 4u;
                            _3289 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3276)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3276 + 3u)).x));
                            uint _3291 = (_3258 * 40u) + 8u;
                            _3301 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3291)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3291 + 2u)).x));
                            uint _3303 = (_3258 * 40u) + 16u;
                            _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            uint _3318 = (_3258 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3333 = (_3258 * 40u) + 24u;
                            vec4 _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3352 = (_3258 * 40u) + 28u;
                            vec4 _3365 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3352)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3352 + 3u)).x));
                            _3377 = fma(_2631, _3365.z, fma(_2630, _3365.y, _3365.x * _2629)) + _3365.w;
                            _3378 = !((fma(_2631, _3346.z, fma(_2630, _3346.y, _3346.x * _2629)) + _3346.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3378)
                            {
                                float _3405 = _3273.x - _2629;
                                float _3406 = _3273.y - _2630;
                                float _3407 = _3273.z - _2631;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3274 * _3274));
                                float _4509 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3423 = sqrt(_3408) * _3289.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3429 = ((1.0 - _3426) * dot(vec3(_3412, _3413, _3414), vec3(_895, _898, _901))) + _3426;
                                float _3432 = _3423 * _3423;
                                float _3436 = (fma(_2631, _3316.z, fma(_2630, _3316.y, _3316.x * _2629)) + _3316.w) / _3377;
                                float _3437 = (fma(_2631, _3331.z, fma(_2630, _3331.y, _3331.x * _2629)) + _3331.w) / _3377;
                                float _3441 = 1.0 - dot(vec2(_3436, _3437), vec2(_3436, _3437));
                                float _4525 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3443 = _3442 * (((isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0))) * _3419) / ((_3432 * 0.699999988079071044921875) + 1.0));
                                float _3455 = exp2(log2(1.0 / ((_3432 * 3.5) + 5.0)) * 0.25);
                                float _3456 = 1.0 - _970;
                                float _3463 = sqrt(1.0 - ((1.0 - (_3456 * _3456)) * (1.0 - (_3455 * _3455))));
                                float _3464 = _3463 * _3463;
                                float _3465 = _3464 * _3464;
                                float _3466 = _3412 - _2915;
                                float _3467 = _3413 - _2916;
                                float _3468 = _3414 - _2917;
                                float _3472 = inversesqrt(dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468)));
                                float _3476 = dot(vec3(_895, _898, _901), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4536 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3479 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3480 = dot(vec3(_895, _898, _901), vec3(_3472 * _3466, _3472 * _3467, _3472 * _3468));
                                float _4547 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3487 = ((_3483 * _3483) * (_3465 + (-1.0))) + 1.0;
                                float _3488 = _3425 * _3464;
                                float _3489 = _3488 * _3488;
                                float _3495 = ((1.0 - _3489) * dot(vec3(_895, _898, _901), vec3(_3412, _3413, _3414))) + _3489;
                                float _4558 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3496 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3497 = 1.0 - _3464;
                                float _3507 = (0.5 / (((_3496 * ((_3479 * _3497) + _3464)) + 9.9999999392252902907785028219223e-09) + (((_3496 * _3497) + _3464) * _3479))) * _3496;
                                float _4569 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3517 = (_3442 * _3419) * (((_3465 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3487 * _3487) * ((_3432 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3517 * _3301.x;
                                frontier_phi_73_pred_1 = _3517 * _3301.y;
                                frontier_phi_73_pred_2 = _3443 * _3289.z;
                                frontier_phi_73_pred_3 = _3443 * _3289.y;
                                frontier_phi_73_pred_4 = _3443 * _3289.x;
                                frontier_phi_73_pred_5 = _3517 * _3301.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3521 = frontier_phi_73_pred;
                            _3522 = frontier_phi_73_pred_1;
                            _3526 = frontier_phi_73_pred_2;
                            _3525 = frontier_phi_73_pred_3;
                            _3524 = frontier_phi_73_pred_4;
                            _3523 = frontier_phi_73_pred_5;
                            _3231 = _3524 + _3244;
                            _3232 = _3525 + _3245;
                            _3233 = _3526 + _3246;
                            _3228 = _3521 + _3241;
                            _3229 = _3522 + _3242;
                            _3230 = _3523 + _3243;
                            if (_3248 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3248;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3231;
                        frontier_phi_67_pred_1 = _3232;
                        frontier_phi_67_pred_2 = _3233;
                        frontier_phi_67_pred_3 = _3230;
                        frontier_phi_67_pred_4 = _3229;
                        frontier_phi_67_pred_5 = _3228;
                    }
                    _2896 = frontier_phi_67_pred;
                    _2898 = frontier_phi_67_pred_1;
                    _2900 = frontier_phi_67_pred_2;
                    _2894 = frontier_phi_67_pred_3;
                    _2892 = frontier_phi_67_pred_4;
                    _2890 = frontier_phi_67_pred_5;
                    uint _3035 = _3034 + 1u;
                    if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3028 = _2890;
                        _3029 = _2892;
                        _3030 = _2894;
                        _3031 = _2896;
                        _3032 = _2898;
                        _3033 = _2900;
                        _3034 = _3035;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2898;
                frontier_phi_55_56_ladder_1 = _2900;
                frontier_phi_55_56_ladder_2 = _2896;
                frontier_phi_55_56_ladder_3 = _2894;
                frontier_phi_55_56_ladder_4 = _2892;
                frontier_phi_55_56_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_55_56_ladder = _2784;
                frontier_phi_55_56_ladder_1 = _2786;
                frontier_phi_55_56_ladder_2 = _2782;
                frontier_phi_55_56_ladder_3 = _2780;
                frontier_phi_55_56_ladder_4 = _2778;
                frontier_phi_55_56_ladder_5 = _2776;
            }
            _2889 = frontier_phi_55_56_ladder_5;
            _2891 = frontier_phi_55_56_ladder_4;
            _2893 = frontier_phi_55_56_ladder_3;
            _2895 = frontier_phi_55_56_ladder_2;
            _2897 = frontier_phi_55_56_ladder;
            _2899 = frontier_phi_55_56_ladder_1;
        }
        float _2904 = isnan(1.0) ? _954 : (isnan(_954) ? 1.0 : min(_954, 1.0));
        _2688 = (_2904 * _2895) + _2124;
        _2690 = (_2904 * _2897) + _2126;
        _2692 = (_2904 * _2899) + _2128;
        _2694 = ((_2889 * _938) * _2904) + _2469;
        _2696 = ((_2891 * _940) * _2904) + _2471;
        _2698 = ((_2893 * _941) * _2904) + _2473;
    }
    else
    {
        _2688 = _2124;
        _2690 = _2126;
        _2692 = _2128;
        _2694 = _2469;
        _2696 = _2471;
        _2698 = _2473;
    }
    float _4585 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4596 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4607 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    uint _2718 = _253 + 6u;
    float _2726 = _876 / cbSceneParam._m0[86u].x;
    float _2727 = _877 / cbSceneParam._m0[86u].y;
    vec4 _2741 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, (log2((isnan(cbSceneParam._m0[77u].w) ? _811 : (isnan(_811) ? cbSceneParam._m0[77u].w : min(_811, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2743 = _2741.x;
    float _2744 = _2741.y;
    float _2745 = _2741.z;
    float _2746 = _2741.w;
    float _2839;
    float _2841;
    float _2843;
    float _2845;
    if (_811 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_811) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _811 : min(cbSceneParam._m0[80u].w, _811));
        float _2802 = _2801 / _811;
        float _2813 = _2802 * _861;
        float _2814 = _862 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2817 = _2802 * _863;
        float _2819 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2820 = _2819 + cbSceneParam._m0[79u].w;
        float _2821 = cbSceneParam._m0[79u].w - _2814;
        float _2827 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2817 * _2817));
        float _2830 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2827;
        float _2835 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2837 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2990;
        if (abs((_2815 - _2819) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2990 = ((((_2820 > 0.0) ? exp2(_2835 * _2820) : (2.0 - exp2(_2837 * _2820))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2830;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : max(_2820, _2821));
            float _2952 = isnan(_2821) ? _2820 : (isnan(_2820) ? _2821 : min(_2820, _2821));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _2990 = ((abs(_2827 / _2815) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2835 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2835 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2837 * _2961) - exp2(_2837 * _2962)) * _2950))) + (_2830 * cbSceneParam._m0[80u].z);
        }
        vec4 _2992 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2726, _2727, 1.0), 0.0);
        float _3001 = exp2((_2990 * (-1.44269502162933349609375)) * (1.0 - _2992.w));
        float _3002 = log2(_3001);
        float _3018 = log2(_2746);
        _2839 = (exp2(_3018 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].x)) * _2992.x) / cbSceneParam._m0[78u].x)) + _2743;
        _2841 = (exp2(_3018 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].y)) * _2992.y) / cbSceneParam._m0[78u].y)) + _2744;
        _2843 = (exp2(_3018 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3002 * cbSceneParam._m0[78u].z)) * _2992.z) / cbSceneParam._m0[78u].z)) + _2745;
        _2845 = _3001 * _2746;
    }
    else
    {
        _2839 = _2743;
        _2841 = _2744;
        _2843 = _2745;
        _2845 = _2746;
    }
    float _2857 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2858 = _2857 == 3.0;
    float _2859 = log2(_2845);
    float _2866 = exp2(_2859 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2688 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _954))) + ((_2694 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2867 = exp2(_2859 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2690 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _954))) + ((_2696 + ((isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2868 = exp2(_2859 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2692 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _954))) + ((_2698 + ((isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0))) * _1761)) * cbPerFrame._m0[3u].x));
    float _2877 = (_2857 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2877 * (_2858 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2839)));
    SV_Target.y = _2877 * (_2858 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2841)));
    SV_Target.z = _2877 * (_2858 ? _2868 : (_2868 + (cbSceneParam._m0[72u].w * _2843)));
    SV_Target.w = cbInstanceData._m0[_2718].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2718].w;
}


