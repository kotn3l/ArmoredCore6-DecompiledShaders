#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1181;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _251 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _252 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3511 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _3522 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _3533 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    uint _262 = uint(roundEven(NORMAL.w)) * 13u;
    uint _267 = _262 + 1u;
    uint _271 = _262 + 2u;
    float _280 = sqrt(((cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x)) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x));
    float _281 = _280 * TEXCOORD.z;
    float _282 = _280 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _281) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _282) + cbTextureTilingScale._m0[13u].w));
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _324 = _319.x * cbMtdParam._m0[11u].x;
    float _325 = _319.y * cbMtdParam._m0[11u].y;
    float _326 = _319.z * cbMtdParam._m0[11u].z;
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _281) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _282) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _395 = _393.x;
    float _407 = dot(vec4(_395, _393.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _424 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_395 - _407) * cbMtdParam._m0[23u].w) + _407) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3544 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _432 = (_425 * ((_345.x * cbMtdParam._m0[12u].x) - _324)) + _324;
    float _433 = (_425 * ((_345.y * cbMtdParam._m0[12u].y) - _325)) + _325;
    float _434 = (_425 * ((_345.z * cbMtdParam._m0[12u].z) - _326)) + _326;
    float _438 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _295.x) * _432;
    float _441 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _295.y) * _433;
    float _444 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _295.z) * _434;
    float _451 = ((_432 - _438) * (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0)))) + _438;
    float _452 = ((_433 - _441) * (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0)))) + _441;
    float _453 = ((_434 - _444) * (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) + _444;
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _281) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _282) + cbTextureTilingScale._m0[20u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _281) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _282) + cbTextureTilingScale._m0[4u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _510 = _508.x;
    float _511 = _508.y;
    float _512 = _508.z;
    float _521 = ((_491.z - _512) * _425) + _512;
    float _524 = ((((_491.x - _510) * _425) + _510) * 2.0) + (-1.0);
    float _525 = ((((_491.y - _511) * _425) + _511) * 2.0) + (-1.0);
    float _526 = dot(vec2(_524, _525), vec2(_524, _525));
    float _3555 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))));
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _565 = (_524 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_466.x * 2.0) + (-1.0)))) + (((_553.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _566 = (_525 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_466.y * 2.0) + (-1.0)))) + (((_553.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _592 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _594 = _592.x;
    float _612 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _281) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _282) + cbTextureTilingScale._m0[9u].w)).x - _594) * _425) + _594;
    float _616 = ((_578.x - _612) * cbMtdParam._m0[19u].z) + _612;
    float _621 = (((_466.z - _521) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _521;
    float _625 = ((_553.z - _621) * cbMtdParam._m0[19u].w) + _621;
    float _627 = cbMtdParam._m0[22u].x + _553.w;
    float _630 = fma(_531, _228 * NORMAL.x, fma(_566, _235 * TANGENT.x, (_221 * _213) * _565));
    float _633 = fma(_531, _228 * NORMAL.y, fma(_566, _235 * TANGENT.y, (_221 * _214) * _565));
    float _636 = fma(_531, _228 * NORMAL.z, fma(_566, _235 * TANGENT.z, (_221 * _215) * _565));
    float _640 = inversesqrt(dot(vec3(_630, _633, _636), vec3(_630, _633, _636)));
    float _641 = _640 * _630;
    float _642 = _640 * _633;
    float _643 = _640 * _636;
    float _3566 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _644 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3588 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _3599 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3610 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3621 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _649 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
    float _663 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _714 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _704);
    float _715 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _704);
    float _716 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _704);
    float _720 = inversesqrt(dot(vec3(_714, _715, _716), vec3(_714, _715, _716)));
    float _721 = _714 * _720;
    float _722 = _715 * _720;
    float _723 = _716 * _720;
    float _729 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _730 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _748 = fma(_643, cbSceneParam._m0[5u].z, fma(_642, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _641));
    float _751 = fma(_643, cbSceneParam._m0[6u].z, fma(_642, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _641));
    float _754 = fma(_643, cbSceneParam._m0[7u].z, fma(_642, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _641));
    uint _768 = (_262 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _774 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_768].x;
    float _775 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_768].y;
    float _776 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0)))) * cbInstanceData._m0[_768].z;
    float _3632 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _777 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _778 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _779 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _780 = 1.0 - _649;
    float _781 = _777 * _780;
    float _782 = _778 * _780;
    float _783 = _779 * _780;
    float _788 = (_777 + (-0.039999999105930328369140625)) * _649;
    float _789 = (_778 + (-0.039999999105930328369140625)) * _649;
    float _790 = (_779 + (-0.039999999105930328369140625)) * _649;
    float _791 = _788 + 0.039999999105930328369140625;
    float _793 = _789 + 0.039999999105930328369140625;
    float _794 = _790 + 0.039999999105930328369140625;
    vec4 _803 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _729, cbSceneParam._m0[86u].y * _730));
    float _807 = ((isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * TEXCOORD_5.w) * _803.x;
    float _808 = dot(vec3(_641, _642, _643), vec3(_721, _722, _723));
    float _811 = _808 * 2.0;
    float _815 = (_811 * _641) - _721;
    float _816 = (_811 * _642) - _722;
    float _817 = (_811 * _643) - _723;
    float _821 = abs(dot(vec3(_721, _722, _723), vec3(_641, _642, _643)));
    float _3665 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
    float _823 = sqrt(_644);
    float _836 = exp2((_823 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_823 * 3.0));
    float _842 = (1.0 - _836) * ((_823 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _843 = _836 * _823;
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1180;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _905 = fma(_879, cbModelParam._m0[26u].z, fma(_875, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871));
        float _909 = fma(_879, cbModelParam._m0[27u].z, fma(_875, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871));
        float _913 = fma(_879, cbModelParam._m0[28u].z, fma(_875, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871));
        float _938 = _871 + _641;
        float _939 = _875 + _642;
        float _940 = _879 + _643;
        float _950 = fma(_940, cbModelParam._m0[26u].z, fma(_939, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938)) - _905;
        float _951 = fma(_940, cbModelParam._m0[27u].z, fma(_939, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938)) - _909;
        float _952 = fma(_940, cbModelParam._m0[28u].z, fma(_939, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938)) - _913;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_905 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_909 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[34u].z) + ((((((_913 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1008 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_974.x + (-0.5));
        float _1010 = _1008 * (_974.y + (-0.5));
        float _1011 = _1008 * (_974.z + (-0.5));
        float _1018 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_981.x + (-0.5));
        float _1020 = _1018 * (_981.y + (-0.5));
        float _1021 = _1018 * (_981.z + (-0.5));
        float _1028 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_988.x + (-0.5));
        float _1030 = _1028 * (_988.y + (-0.5));
        float _1031 = _1028 * (_988.z + (-0.5));
        float _1038 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_995.x + (-0.5));
        float _1040 = _1038 * (_995.y + (-0.5));
        float _1041 = _1038 * (_995.z + (-0.5));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = _1009 * 0.5;
        float _1046 = _1019 * 0.5;
        float _1047 = _1029 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1062 = (dot(vec3(_641, _642, _643), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1072 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3713 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_1074 + 1.0))) + _1079) * _1042;
        float _1089 = _1010 * 0.5;
        float _1090 = _1020 * 0.5;
        float _1091 = _1030 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_641, _642, _643), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3746 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_1116 + 1.0))) + _1121) * _1043;
        float _1131 = _1011 * 0.5;
        float _1132 = _1021 * 0.5;
        float _1133 = _1031 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_641, _642, _643), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _3779 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_1158 + 1.0))) + _1163) * _1044;
        _1180 = _1011;
        _1182 = _1010;
        _1183 = _1009;
        _1184 = _1021;
        _1185 = _1020;
        _1186 = _1019;
        _1187 = _1031;
        _1188 = _1030;
        _1189 = _1029;
        _1190 = _1044;
        _1191 = _1043;
        _1192 = _1042;
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _1181;
        _1182 = _1181;
        _1183 = _1181;
        _1184 = _1181;
        _1185 = _1181;
        _1186 = _1181;
        _1187 = _1181;
        _1188 = _1181;
        _1189 = _1181;
        _1190 = _1181;
        _1191 = _1181;
        _1192 = _1181;
        _1193 = 0.0;
        _1194 = 0.0;
        _1195 = 0.0;
    }
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1220 = fma(_879, cbModelParam._m0[30u].z, fma(_875, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _871));
        float _1224 = fma(_879, cbModelParam._m0[31u].z, fma(_875, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _871));
        float _1228 = fma(_879, cbModelParam._m0[32u].z, fma(_875, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _871));
        float _1251 = _871 + _641;
        float _1252 = _875 + _642;
        float _1253 = _879 + _643;
        float _1263 = fma(_1253, cbModelParam._m0[30u].z, fma(_1252, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1251)) - _1220;
        float _1264 = fma(_1253, cbModelParam._m0[31u].z, fma(_1252, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1251)) - _1224;
        float _1265 = fma(_1253, cbModelParam._m0[32u].z, fma(_1252, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1251)) - _1228;
        float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
        float _1282 = ((_1269 * _1263) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1220 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1283 = ((_1269 * _1264) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1224 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1284 = ((_1269 * _1265) / cbModelParam._m0[35u].z) + ((((((_1228 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1282, _1283, _1284), 0.0);
        float _1319 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1320 = _1319 * (_1286.x + (-0.5));
        float _1321 = _1319 * (_1286.y + (-0.5));
        float _1322 = _1319 * (_1286.z + (-0.5));
        float _1329 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1330 = _1329 * (_1293.x + (-0.5));
        float _1331 = _1329 * (_1293.y + (-0.5));
        float _1332 = _1329 * (_1293.z + (-0.5));
        float _1339 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1340 = _1339 * (_1300.x + (-0.5));
        float _1341 = _1339 * (_1300.y + (-0.5));
        float _1342 = _1339 * (_1300.z + (-0.5));
        float _1349 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1307.x + (-0.5));
        float _1351 = _1349 * (_1307.y + (-0.5));
        float _1352 = _1349 * (_1307.z + (-0.5));
        float _1353 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1354 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1355 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1356 = _1320 * 0.5;
        float _1357 = _1330 * 0.5;
        float _1358 = _1340 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_641, _642, _643), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1353 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _3842 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1383 + 1.0))) + _1388) * _1353;
        float _1398 = _1321 * 0.5;
        float _1399 = _1331 * 0.5;
        float _1400 = _1341 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_641, _642, _643), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1354 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _3875 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1425 + 1.0))) + _1430) * _1354;
        float _1440 = _1322 * 0.5;
        float _1441 = _1332 * 0.5;
        float _1442 = _1342 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_641, _642, _643), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1355 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _3908 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1467 + 1.0))) + _1472) * _1355;
        _1489 = _1322;
        _1490 = _1321;
        _1491 = _1320;
        _1492 = _1332;
        _1493 = _1331;
        _1494 = _1330;
        _1495 = _1342;
        _1496 = _1341;
        _1497 = _1340;
        _1498 = _1355;
        _1499 = _1354;
        _1500 = _1353;
        _1501 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1502 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1503 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
    }
    else
    {
        _1489 = _1181;
        _1490 = _1181;
        _1491 = _1181;
        _1492 = _1181;
        _1493 = _1181;
        _1494 = _1181;
        _1495 = _1181;
        _1496 = _1181;
        _1497 = _1181;
        _1498 = _1181;
        _1499 = _1181;
        _1500 = _1181;
        _1501 = 0.0;
        _1502 = 0.0;
        _1503 = 0.0;
    }
    float _1513 = (cbModelParam._m0[1u].x * (_1501 - _1193)) + _1193;
    float _1514 = (cbModelParam._m0[1u].x * (_1502 - _1194)) + _1194;
    float _1515 = (cbModelParam._m0[1u].x * (_1503 - _1195)) + _1195;
    float _1536 = fma(_1515, cbSceneParam._m0[89u].z, fma(_1514, cbSceneParam._m0[89u].y, _1513 * cbSceneParam._m0[89u].x));
    float _1539 = fma(_1515, cbSceneParam._m0[90u].z, fma(_1514, cbSceneParam._m0[90u].y, _1513 * cbSceneParam._m0[90u].x));
    float _1542 = fma(_1515, cbSceneParam._m0[91u].z, fma(_1514, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1513));
    float _1557 = _815 * 0.5;
    float _1558 = _816 * 0.5;
    float _1559 = _817 * 0.5;
    float _1560 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1491, _1494, _1497, _1500));
    float _1563 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1490, _1493, _1496, _1499));
    float _1566 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1489, _1492, _1495, _1498));
    float _1600;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1573 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1180, _1184, _1187, _1190));
        float _1577 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1581 = dot(vec4(_1557, _1558, _1559, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1588 = dot(vec4(cbModelParam._m0[39u]), vec4(_1557, _1558, _1559, 1.0));
        _1600 = dot(vec3(isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)), isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1600 = 1.0;
    }
    float _1611;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1602 = dot(vec4(cbModelParam._m0[40u]), vec4(_1557, _1558, _1559, 1.0));
        _1611 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1602) ? 0.0 : (isnan(0.0) ? _1602 : max(0.0, _1602))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1611 = 1.0;
    }
    float _1615 = (_1611 * cbModelParam._m0[1u].x) + (_1600 * (1.0 - cbModelParam._m0[1u].x));
    float _1625 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _644);
    float _1626 = isnan(_1625) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1625 : min(cbModelParam._m0[25u].z, _1625));
    float _1708;
    float _1710;
    float _1712;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1675 = fma(_879, cbModelParam._m0[13u].z, fma(_875, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _871)) + cbModelParam._m0[13u].w;
        float _1679 = fma(_879, cbModelParam._m0[14u].z, fma(_875, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _871)) + cbModelParam._m0[14u].w;
        float _1683 = fma(_879, cbModelParam._m0[15u].z, fma(_875, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _871)) + cbModelParam._m0[15u].w;
        float _1686 = fma(_817, cbModelParam._m0[13u].z, fma(_816, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _815));
        float _1689 = fma(_817, cbModelParam._m0[14u].z, fma(_816, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _815));
        float _1692 = fma(_817, cbModelParam._m0[15u].z, fma(_816, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _815));
        float _1720;
        if (_1686 > 0.0)
        {
            _1720 = abs((1.0 - _1675) / _1686);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1675 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1720 = frontier_phi_14_12_ladder;
        }
        float _1924;
        if (_1689 > 0.0)
        {
            _1924 = abs((1.0 - _1679) / _1689);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1679 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1924 = frontier_phi_23_19_ladder;
        }
        float _2178;
        if (_1692 > 0.0)
        {
            _2178 = abs((1.0 - _1683) / _1692);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1683 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2178 = frontier_phi_35_30_ladder;
        }
        float _2180 = isnan(_1924) ? _1720 : (isnan(_1720) ? _1924 : min(_1720, _1924));
        float _2181 = isnan(_2178) ? _2180 : (isnan(_2180) ? _2178 : min(_2180, _2178));
        float _2185 = (_2181 * _1686) + _1675;
        float _2186 = (_2181 * _1689) + _1679;
        float _2187 = (_2181 * _1692) + _1683;
        float _2188 = _2181 * 9.9999997473787516355514526367188e-05;
        float _2190 = (-1.0) - _2188;
        float _2192 = _2188 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2187 > _2192) || ((_2187 < _2190) || ((_2186 > _2192) || ((_2186 < _2190) || ((_2185 < _2190) || (_2185 > _2192))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2187, cbModelParam._m0[9u].z, fma(_2186, cbModelParam._m0[9u].y, _2185 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2187, cbModelParam._m0[10u].z, fma(_2186, cbModelParam._m0[10u].y, _2185 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2187, cbModelParam._m0[11u].z, fma(_2186, cbModelParam._m0[11u].y, _2185 * cbModelParam._m0[11u].x))), _1626);
            frontier_phi_13_35_ladder = _2315.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2315.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2315.x * cbModelParam._m0[1u].y;
        }
        _1708 = frontier_phi_13_35_ladder_2;
        _1710 = frontier_phi_13_35_ladder_1;
        _1712 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1696 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_815, _816, _817), _1626);
        _1708 = _1696.x * cbModelParam._m0[1u].y;
        _1710 = _1696.y * cbModelParam._m0[1u].y;
        _1712 = _1696.z * cbModelParam._m0[1u].y;
    }
    float _1716 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _644);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1716 : min(cbModelParam._m0[25u].w, _1716));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_879, cbModelParam._m0[21u].z, fma(_875, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _871)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_879, cbModelParam._m0[22u].z, fma(_875, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _871)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_879, cbModelParam._m0[23u].z, fma(_875, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _871)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_817, cbModelParam._m0[21u].z, fma(_816, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _815));
        float _1786 = fma(_817, cbModelParam._m0[22u].z, fma(_816, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _815));
        float _1789 = fma(_817, cbModelParam._m0[23u].z, fma(_816, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _815));
        float _1929;
        if (_1783 > 0.0)
        {
            _1929 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1929 = frontier_phi_25_21_ladder;
        }
        float _2205;
        if (_1786 > 0.0)
        {
            _2205 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2205 = frontier_phi_37_32_ladder;
        }
        float _2418;
        if (_1789 > 0.0)
        {
            _2418 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2418 = frontier_phi_46_43_ladder;
        }
        float _2420 = isnan(_2205) ? _1929 : (isnan(_1929) ? _2205 : min(_1929, _2205));
        float _2421 = isnan(_2418) ? _2420 : (isnan(_2420) ? _2418 : min(_2420, _2418));
        float _2425 = (_2421 * _1783) + _1772;
        float _2426 = (_2421 * _1786) + _1776;
        float _2427 = (_2421 * _1789) + _1780;
        float _2428 = _2421 * 9.9999997473787516355514526367188e-05;
        float _2429 = (-1.0) - _2428;
        float _2431 = _2428 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2427 > _2431) || ((_2427 < _2429) || ((_2426 > _2431) || ((_2426 < _2429) || ((_2425 < _2429) || (_2425 > _2431))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2427, cbModelParam._m0[17u].z, fma(_2426, cbModelParam._m0[17u].y, _2425 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2427, cbModelParam._m0[18u].z, fma(_2426, cbModelParam._m0[18u].y, _2425 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2427, cbModelParam._m0[19u].z, fma(_2426, cbModelParam._m0[19u].y, _2425 * cbModelParam._m0[19u].x))), _1717);
            frontier_phi_22_46_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_22_46_ladder_2;
        _1810 = frontier_phi_22_46_ladder_1;
        _1812 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_815, _816, _817), _1717);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1825 = (((_842 * _791) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1808 - _1708)) + _1708);
    float _1827 = (((_842 * _793) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1810 - _1710)) + _1710);
    float _1829 = (((_842 * _794) + _843) * _807) * ((cbModelParam._m0[1u].w * (_1812 - _1712)) + _1712);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1827, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1827, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1827, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    uvec4 _1848 = floatBitsToUint(cbInstanceData._m0[_262 + 5u]);
    uint _1850 = _1848.x * 14u;
    uint _1851 = _1850 + 13u;
    float _1858 = _807 + (-1.0);
    float _1863 = (cbLight._m0[_1851].x * _1858) + 1.0;
    float _1864 = (cbLight._m0[_1851].y * _1858) + 1.0;
    float _1865 = (cbLight._m0[_1851].z * _1858) + 1.0;
    float _1866 = (cbLight._m0[_1851].w * _1858) + 1.0;
    uint _1867 = _1850 + 5u;
    float _1873 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    uint _1877 = _1850 + 4u;
    float _1883 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1887 = _1850 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_641, _642, _643));
    float _1901 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_641, _642, _643));
    float _4044 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _4055 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1906 = (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 0.3183098733425140380859375;
    float _1908 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1915 = ((cbLight._m0[_1867].x * _1873) * _1908) + ((cbLight._m0[_1877].x * _1883) * _1906);
    float _1916 = ((_1873 * cbLight._m0[_1867].y) * _1908) + ((_1883 * cbLight._m0[_1877].y) * _1906);
    float _1917 = ((_1873 * cbLight._m0[_1867].z) * _1908) + ((_1883 * cbLight._m0[_1877].z) * _1906);
    uvec4 _1921 = floatBitsToUint(cbLight._m0[_1850 + 12u]);
    bool _1923 = _1921.x == 0u;
    float _1934;
    float _1936;
    float _1938;
    if (_1923)
    {
        _1934 = _1915;
        _1936 = _1916;
        _1938 = _1917;
    }
    else
    {
        uint _1942 = _1850 + 6u;
        float _1958 = (dot(vec3(cbLight._m0[_1850 + 2u].xyz), vec3(_641, _642, _643)) * 0.5) + 0.5;
        float _1959 = _1958 * _1958;
        float _4066 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
        float _1961 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _1934 = (((cbLight._m0[_1942].x * 0.3183098733425140380859375) * _1960) * _1961) + _1915;
        _1936 = (((cbLight._m0[_1942].y * 0.3183098733425140380859375) * _1960) * _1961) + _1916;
        _1938 = (((cbLight._m0[_1942].z * 0.3183098733425140380859375) * _1960) * _1961) + _1917;
    }
    bool _1941 = _1921.y == 0u;
    float _1979;
    float _1981;
    float _1983;
    if (_1941)
    {
        _1979 = _1934;
        _1981 = _1936;
        _1983 = _1938;
    }
    else
    {
        uint _2149 = _1850 + 7u;
        float _2165 = (dot(vec3(cbLight._m0[_1850 + 3u].xyz), vec3(_641, _642, _643)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4082 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _2168 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _1979 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _1934;
        _1981 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _1936;
        _1983 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _1938;
    }
    uint _1986 = _1850 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1850].w)) * _644) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1850].x + _721;
    float _2002 = cbLight._m0[_1850].y + _722;
    float _2003 = cbLight._m0[_1850].z + _723;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_1850].xyz));
    float _4098 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _2015 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2016 = dot(vec3(_641, _642, _643), vec3(_2008, _2009, _2010));
    float _4120 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1850].xyz), vec3(_2008, _2009, _2010));
    float _4131 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2036 = exp2(log2(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * 5.0);
    float _2037 = 0.959999978542327880859375 - _788;
    float _2039 = 0.959999978542327880859375 - _789;
    float _2040 = 0.959999978542327880859375 - _790;
    float _2047 = 1.0 - _2000;
    float _2058 = (0.5 / (((_2015 * ((_2014 * _2047) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2047) + _2000) * _2014))) * _2014;
    float _4142 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2060 = (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2071 = _1850 + 9u;
    float _2082 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _644) * 0.949999988079071044921875);
    float _2083 = _2082 * _2082;
    float _2084 = cbLight._m0[_1887].x + _721;
    float _2085 = cbLight._m0[_1887].y + _722;
    float _2086 = cbLight._m0[_1887].z + _723;
    float _2090 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
    float _2091 = _2090 * _2084;
    float _2092 = _2090 * _2085;
    float _2093 = _2090 * _2086;
    float _2094 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_1887].xyz));
    float _4153 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2097 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2098 = dot(vec3(_641, _642, _643), vec3(_2091, _2092, _2093));
    float _4164 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2091, _2092, _2093));
    float _4175 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2083 * _2083;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2117 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
    float _2124 = 1.0 - _2083;
    float _2134 = (0.5 / (((_2015 * ((_2097 * _2124) + _2083)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2124) + _2083) * _2097))) * _2097;
    float _4186 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    float _2146 = (((((_2117 * _2037) + _791) * cbLight._m0[_2071].x) * _2136) * _1873) + (((((_2036 * _2037) + _791) * cbLight._m0[_1986].x) * _2060) * _1883);
    float _2147 = (((((_2117 * _2039) + _793) * cbLight._m0[_2071].y) * _2136) * _1873) + (((((_2036 * _2039) + _793) * cbLight._m0[_1986].y) * _2060) * _1883);
    float _2148 = (((((_2117 * _2040) + _794) * cbLight._m0[_2071].z) * _2136) * _1873) + (((((_2036 * _2040) + _794) * cbLight._m0[_1986].z) * _2060) * _1883);
    float _2210;
    float _2212;
    float _2214;
    if (_1923)
    {
        _2210 = _2146;
        _2212 = _2147;
        _2214 = _2148;
    }
    else
    {
        uint _2216 = _1850 + 2u;
        uint _2220 = _1850 + 10u;
        float _2234 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _644) * 0.949999988079071044921875);
        float _2235 = _2234 * _2234;
        float _2236 = cbLight._m0[_2216].x + _721;
        float _2237 = cbLight._m0[_2216].y + _722;
        float _2238 = cbLight._m0[_2216].z + _723;
        float _2242 = inversesqrt(dot(vec3(_2236, _2237, _2238), vec3(_2236, _2237, _2238)));
        float _2243 = _2242 * _2236;
        float _2244 = _2242 * _2237;
        float _2245 = _2242 * _2238;
        float _2246 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_2216].xyz));
        float _4197 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2249 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2250 = dot(vec3(_641, _642, _643), vec3(_2243, _2244, _2245));
        float _4208 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        float _2253 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2254 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2243, _2244, _2245));
        float _4219 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        float _2258 = _2235 * _2235;
        float _2262 = ((_2253 * _2253) * (_2258 + (-1.0))) + 1.0;
        float _2269 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
        float _2276 = 1.0 - _2235;
        float _2286 = (0.5 / (((_2015 * ((_2249 * _2276) + _2235)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2276) + _2235) * _2249))) * _2249;
        float _4230 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
        float _2288 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2258 / ((_2262 * _2262) * 3.141590118408203125));
        float _2289 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
        _2210 = (((((_2269 * _2037) + _791) * cbLight._m0[_2220].x) * _2288) * _2289) + _2146;
        _2212 = (((((_2269 * _2039) + _793) * cbLight._m0[_2220].y) * _2288) * _2289) + _2147;
        _2214 = (((((_2269 * _2040) + _794) * cbLight._m0[_2220].z) * _2288) * _2289) + _2148;
    }
    float _2324;
    float _2326;
    float _2328;
    if (_1941)
    {
        _2324 = _2210;
        _2326 = _2212;
        _2328 = _2214;
    }
    else
    {
        uint _2335 = _1850 + 3u;
        uint _2339 = _1850 + 11u;
        float _2353 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _644) * 0.949999988079071044921875);
        float _2354 = _2353 * _2353;
        float _2355 = cbLight._m0[_2335].x + _721;
        float _2356 = cbLight._m0[_2335].y + _722;
        float _2357 = cbLight._m0[_2335].z + _723;
        float _2361 = inversesqrt(dot(vec3(_2355, _2356, _2357), vec3(_2355, _2356, _2357)));
        float _2362 = _2361 * _2355;
        float _2363 = _2361 * _2356;
        float _2364 = _2361 * _2357;
        float _2365 = dot(vec3(_641, _642, _643), vec3(cbLight._m0[_2335].xyz));
        float _4246 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2369 = dot(vec3(_641, _642, _643), vec3(_2362, _2363, _2364));
        float _4257 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2373 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2362, _2363, _2364));
        float _4268 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2377 = _2354 * _2354;
        float _2381 = ((_2372 * _2372) * (_2377 + (-1.0))) + 1.0;
        float _2388 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
        float _2395 = 1.0 - _2354;
        float _2405 = (0.5 / (((_2015 * ((_2368 * _2395) + _2354)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2395) + _2354) * _2368))) * _2368;
        float _4279 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2407 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2377 / ((_2381 * _2381) * 3.141590118408203125));
        float _2408 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
        _2324 = (((((_2388 * _2037) + _791) * cbLight._m0[_2339].x) * _2407) * _2408) + _2210;
        _2326 = (((((_2388 * _2039) + _793) * cbLight._m0[_2339].y) * _2407) * _2408) + _2212;
        _2328 = (((((_2388 * _2040) + _794) * cbLight._m0[_2339].z) * _2407) * _2408) + _2214;
    }
    float _2543;
    float _2545;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_1848.y == 0u)
    {
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2483;
        float _2485 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2483;
        float _2486 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2483;
        uvec4 _2498 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2499 = _2498.x;
        uint _2510 = uint((float(_2498.y) * floor(float(uint(cbSceneParam._m0[85u].y * _730) / _2499))) + floor(float(uint(cbSceneParam._m0[85u].x * _729) / _2499)));
        float _2520 = (log2(_2486 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2521 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        uint _2524 = uint(isnan(14.0) ? _2521 : (isnan(_2521) ? 14.0 : min(_2521, 14.0)));
        uvec4 _2529 = texelFetch(g_lightClusterGridBuffer, int(((_2524 << 2u) + (_2510 << 6u)) >> 2u));
        uint _2530 = _2529.x;
        uint _2531 = _2498.z;
        float _2631;
        float _2633;
        float _2635;
        float _2637;
        float _2639;
        float _2641;
        if (((((1u << ((_2531 >> 4u) & 15u)) + 4294967295u) & _2530) == 0u) || ((_2531 & 240u) == 0u))
        {
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
            _2637 = 0.0;
            _2639 = 0.0;
            _2641 = 0.0;
        }
        else
        {
            float _2632;
            float _2634;
            float _2636;
            float _2638;
            float _2640;
            float _2642;
            float _2776 = 0.0;
            float _2777 = 0.0;
            float _2778 = 0.0;
            float _2779 = 0.0;
            float _2780 = 0.0;
            float _2781 = 0.0;
            uint _2782 = 0u;
            uint _2791;
            bool _2792;
            for (;;)
            {
                _2791 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2782 << 2u)) >> 2u)).x;
                _2792 = _2791 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2792)
                {
                    frontier_phi_61_pred = _2776;
                    frontier_phi_61_pred_1 = _2781;
                    frontier_phi_61_pred_2 = _2780;
                    frontier_phi_61_pred_3 = _2779;
                    frontier_phi_61_pred_4 = _2778;
                    frontier_phi_61_pred_5 = _2777;
                }
                else
                {
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    float _2905;
                    uint _2906;
                    _2900 = _2776;
                    _2901 = _2777;
                    _2902 = _2778;
                    _2903 = _2779;
                    _2904 = _2780;
                    _2905 = _2781;
                    _2906 = _2791;
                    float _2832;
                    float _2833;
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    for (;;)
                    {
                        uint _2910 = uint(findLSB(_2906)) + (_2782 << 5u);
                        uint _2907 = (_2906 + 4294967295u) & _2906;
                        uint _2912 = _2910 * 48u;
                        vec4 _2926 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2912)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2912 + 3u)).x));
                        uint _2932 = (_2910 * 48u) + 4u;
                        vec4 _2945 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2932)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2932 + 3u)).x));
                        uint _2951 = (_2910 * 48u) + 8u;
                        vec3 _2962 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2951)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2951 + 2u)).x));
                        float _2966 = _2926.x - _2484;
                        float _2967 = _2926.y - _2485;
                        float _2968 = _2926.z - _2486;
                        float _2969 = dot(vec3(_2966, _2967, _2968), vec3(_2966, _2967, _2968));
                        float _2972 = inversesqrt(_2969);
                        float _2973 = _2972 * _2966;
                        float _2974 = _2972 * _2967;
                        float _2975 = _2972 * _2968;
                        float _2976 = dot(vec3(_748, _751, _754), vec3(_2973, _2974, _2975));
                        float _2981 = 1.0 - (_2969 * _2926.w);
                        float _4305 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2982 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
                        float _2983 = sqrt(_2969) * _2945.w;
                        float _2986 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                        float _2987 = _2986 * _2986;
                        float _2990 = ((1.0 - _2987) * _2976) + _2987;
                        float _2993 = _2983 * _2983;
                        float _2997 = ((isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))) * _2982) / ((_2993 * 0.699999988079071044921875) + 1.0);
                        float _3001 = (-0.0) - _2484;
                        float _3002 = (-0.0) - _2485;
                        float _3003 = (-0.0) - _2486;
                        float _3007 = inversesqrt(dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003)));
                        float _3008 = _3007 * _3001;
                        float _3009 = _3007 * _3002;
                        float _3010 = _3007 * _3003;
                        float _3018 = exp2(log2(1.0 / ((_2993 * 3.5) + 5.0)) * 0.25);
                        float _3019 = 1.0 - _823;
                        float _3026 = sqrt(1.0 - ((1.0 - (_3019 * _3019)) * (1.0 - (_3018 * _3018))));
                        float _3027 = _3026 * _3026;
                        float _3028 = _3027 * _3027;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3031 = _3010 + _2975;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3039 = dot(vec3(_748, _751, _754), vec3(_3008, _3009, _3010));
                        float _4321 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                        float _3042 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                        float _3043 = dot(vec3(_748, _751, _754), vec3(_3035 * _3029, _3035 * _3030, _3035 * _3031));
                        float _4332 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3046 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3050 = ((_3046 * _3046) * (_3028 + (-1.0))) + 1.0;
                        float _3051 = _2986 * _3027;
                        float _3052 = _3051 * _3051;
                        float _3055 = ((1.0 - _3052) * _2976) + _3052;
                        float _4343 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3056 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3057 = 1.0 - _3027;
                        float _3067 = (0.5 / (((_3056 * ((_3042 * _3057) + _3027)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3027) * _3042))) * _3056;
                        float _4354 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                        float _3078 = (((_3028 * 3.1415927410125732421875) * (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) / ((_3050 * _3050) * ((_2993 * 2.1991131305694580078125) + 3.141590118408203125))) * _2982;
                        _2835 = (_2997 * _2945.x) + _2903;
                        _2836 = (_2997 * _2945.y) + _2904;
                        _2837 = (_2997 * _2945.z) + _2905;
                        _2832 = (_3078 * _2962.x) + _2900;
                        _2833 = (_3078 * _2962.y) + _2901;
                        _2834 = (_3078 * _2962.z) + _2902;
                        if (_2907 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2900 = _2832;
                            _2901 = _2833;
                            _2902 = _2834;
                            _2903 = _2835;
                            _2904 = _2836;
                            _2905 = _2837;
                            _2906 = _2907;
                        }
                    }
                    frontier_phi_61_pred = _2832;
                    frontier_phi_61_pred_1 = _2837;
                    frontier_phi_61_pred_2 = _2836;
                    frontier_phi_61_pred_3 = _2835;
                    frontier_phi_61_pred_4 = _2834;
                    frontier_phi_61_pred_5 = _2833;
                }
                _2632 = frontier_phi_61_pred;
                _2642 = frontier_phi_61_pred_1;
                _2640 = frontier_phi_61_pred_2;
                _2638 = frontier_phi_61_pred_3;
                _2636 = frontier_phi_61_pred_4;
                _2634 = frontier_phi_61_pred_5;
                uint _2783 = _2782 + 1u;
                if (_2783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2776 = _2632;
                    _2777 = _2634;
                    _2778 = _2636;
                    _2779 = _2638;
                    _2780 = _2640;
                    _2781 = _2642;
                    _2782 = _2783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
            _2637 = _2638;
            _2639 = _2640;
            _2641 = _2642;
        }
        uvec4 _2645 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2646 = _2645.z;
        uint _2648 = (_2646 >> 8u) & 15u;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        if (((4294967295u << _2648) & _2530) == 0u)
        {
            _2744 = _2631;
            _2746 = _2633;
            _2748 = _2635;
            _2750 = _2637;
            _2752 = _2639;
            _2754 = _2641;
        }
        else
        {
            float _2769 = inversesqrt(dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486)));
            float _2770 = _2769 * _2484;
            float _2771 = _2769 * _2485;
            float _2772 = _2769 * _2486;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2648 < ((_2646 >> 12u) & 15u))
            {
                float _2745;
                float _2747;
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2883 = _2631;
                float _2884 = _2633;
                float _2885 = _2635;
                float _2886 = _2637;
                float _2887 = _2639;
                float _2888 = _2641;
                uint _2889 = _2648;
                uint _2898;
                bool _2899;
                for (;;)
                {
                    _2898 = texelFetch(g_lightClassification, int((((_2524 << 5u) + (_2510 << 9u)) + (_2889 << 2u)) >> 2u)).x;
                    _2899 = _2898 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2899)
                    {
                        frontier_phi_67_pred = _2886;
                        frontier_phi_67_pred_1 = _2887;
                        frontier_phi_67_pred_2 = _2888;
                        frontier_phi_67_pred_3 = _2885;
                        frontier_phi_67_pred_4 = _2884;
                        frontier_phi_67_pred_5 = _2883;
                    }
                    else
                    {
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3096 = _2883;
                        float _3097 = _2884;
                        float _3098 = _2885;
                        float _3099 = _2886;
                        float _3100 = _2887;
                        float _3101 = _2888;
                        uint _3102 = _2898;
                        uint _3103;
                        vec4 _3128;
                        float _3129;
                        vec4 _3144;
                        vec3 _3156;
                        vec4 _3171;
                        vec4 _3186;
                        float _3233;
                        bool _3234;
                        for (;;)
                        {
                            uint _3113 = ((_2889 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3102));
                            _3103 = (_3102 + 4294967295u) & _3102;
                            uint _3115 = _3113 * 40u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            _3129 = _3128.w;
                            uint _3131 = (_3113 * 40u) + 4u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3146 = (_3113 * 40u) + 8u;
                            _3156 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x));
                            uint _3158 = (_3113 * 40u) + 16u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3113 * 40u) + 20u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            uint _3189 = (_3113 * 40u) + 24u;
                            vec4 _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3208 = (_3113 * 40u) + 28u;
                            vec4 _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            _3233 = fma(_2486, _3221.z, fma(_2485, _3221.y, _3221.x * _2484)) + _3221.w;
                            _3234 = !((fma(_2486, _3202.z, fma(_2485, _3202.y, _3202.x * _2484)) + _3202.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3234)
                            {
                                float _3261 = _3128.x - _2484;
                                float _3262 = _3128.y - _2485;
                                float _3263 = _3128.z - _2486;
                                float _3264 = dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263));
                                float _3267 = inversesqrt(_3264);
                                float _3268 = _3267 * _3261;
                                float _3269 = _3267 * _3262;
                                float _3270 = _3267 * _3263;
                                float _3274 = 1.0 - (_3264 / (_3129 * _3129));
                                float _4365 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                                float _3279 = sqrt(_3264) * _3144.w;
                                float _3281 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                                float _3282 = _3281 * _3281;
                                float _3285 = ((1.0 - _3282) * dot(vec3(_3268, _3269, _3270), vec3(_748, _751, _754))) + _3282;
                                float _3288 = _3279 * _3279;
                                float _3292 = (fma(_2486, _3171.z, fma(_2485, _3171.y, _3171.x * _2484)) + _3171.w) / _3233;
                                float _3293 = (fma(_2486, _3186.z, fma(_2485, _3186.y, _3186.x * _2484)) + _3186.w) / _3233;
                                float _3297 = 1.0 - dot(vec2(_3292, _3293), vec2(_3292, _3293));
                                float _4381 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3298 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                                float _3299 = _3298 * (((isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0))) * _3275) / ((_3288 * 0.699999988079071044921875) + 1.0));
                                float _3311 = exp2(log2(1.0 / ((_3288 * 3.5) + 5.0)) * 0.25);
                                float _3312 = 1.0 - _823;
                                float _3319 = sqrt(1.0 - ((1.0 - (_3312 * _3312)) * (1.0 - (_3311 * _3311))));
                                float _3320 = _3319 * _3319;
                                float _3321 = _3320 * _3320;
                                float _3322 = _3268 - _2770;
                                float _3323 = _3269 - _2771;
                                float _3324 = _3270 - _2772;
                                float _3328 = inversesqrt(dot(vec3(_3322, _3323, _3324), vec3(_3322, _3323, _3324)));
                                float _3332 = dot(vec3(_748, _751, _754), vec3((-0.0) - _2770, (-0.0) - _2771, (-0.0) - _2772));
                                float _4392 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3335 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3336 = dot(vec3(_748, _751, _754), vec3(_3328 * _3322, _3328 * _3323, _3328 * _3324));
                                float _4403 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                                float _3339 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3343 = ((_3339 * _3339) * (_3321 + (-1.0))) + 1.0;
                                float _3344 = _3281 * _3320;
                                float _3345 = _3344 * _3344;
                                float _3351 = ((1.0 - _3345) * dot(vec3(_748, _751, _754), vec3(_3268, _3269, _3270))) + _3345;
                                float _4414 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3353 = 1.0 - _3320;
                                float _3363 = (0.5 / (((_3352 * ((_3335 * _3353) + _3320)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3320) * _3335))) * _3352;
                                float _4425 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3373 = (_3298 * _3275) * (((_3321 * 3.1415927410125732421875) * (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0)))) / ((_3343 * _3343) * ((_3288 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3373 * _3156.x;
                                frontier_phi_73_pred_1 = _3373 * _3156.y;
                                frontier_phi_73_pred_2 = _3299 * _3144.z;
                                frontier_phi_73_pred_3 = _3299 * _3144.y;
                                frontier_phi_73_pred_4 = _3299 * _3144.x;
                                frontier_phi_73_pred_5 = _3373 * _3156.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3377 = frontier_phi_73_pred;
                            _3378 = frontier_phi_73_pred_1;
                            _3382 = frontier_phi_73_pred_2;
                            _3381 = frontier_phi_73_pred_3;
                            _3380 = frontier_phi_73_pred_4;
                            _3379 = frontier_phi_73_pred_5;
                            _3086 = _3380 + _3099;
                            _3087 = _3381 + _3100;
                            _3088 = _3382 + _3101;
                            _3083 = _3377 + _3096;
                            _3084 = _3378 + _3097;
                            _3085 = _3379 + _3098;
                            if (_3103 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3096 = _3083;
                                _3097 = _3084;
                                _3098 = _3085;
                                _3099 = _3086;
                                _3100 = _3087;
                                _3101 = _3088;
                                _3102 = _3103;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3086;
                        frontier_phi_67_pred_1 = _3087;
                        frontier_phi_67_pred_2 = _3088;
                        frontier_phi_67_pred_3 = _3085;
                        frontier_phi_67_pred_4 = _3084;
                        frontier_phi_67_pred_5 = _3083;
                    }
                    _2751 = frontier_phi_67_pred;
                    _2753 = frontier_phi_67_pred_1;
                    _2755 = frontier_phi_67_pred_2;
                    _2749 = frontier_phi_67_pred_3;
                    _2747 = frontier_phi_67_pred_4;
                    _2745 = frontier_phi_67_pred_5;
                    uint _2890 = _2889 + 1u;
                    if (_2890 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2883 = _2745;
                        _2884 = _2747;
                        _2885 = _2749;
                        _2886 = _2751;
                        _2887 = _2753;
                        _2888 = _2755;
                        _2889 = _2890;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2753;
                frontier_phi_55_56_ladder_1 = _2755;
                frontier_phi_55_56_ladder_2 = _2751;
                frontier_phi_55_56_ladder_3 = _2749;
                frontier_phi_55_56_ladder_4 = _2747;
                frontier_phi_55_56_ladder_5 = _2745;
            }
            else
            {
                frontier_phi_55_56_ladder = _2639;
                frontier_phi_55_56_ladder_1 = _2641;
                frontier_phi_55_56_ladder_2 = _2637;
                frontier_phi_55_56_ladder_3 = _2635;
                frontier_phi_55_56_ladder_4 = _2633;
                frontier_phi_55_56_ladder_5 = _2631;
            }
            _2744 = frontier_phi_55_56_ladder_5;
            _2746 = frontier_phi_55_56_ladder_4;
            _2748 = frontier_phi_55_56_ladder_3;
            _2750 = frontier_phi_55_56_ladder_2;
            _2752 = frontier_phi_55_56_ladder;
            _2754 = frontier_phi_55_56_ladder_1;
        }
        float _2759 = isnan(1.0) ? _807 : (isnan(_807) ? 1.0 : min(_807, 1.0));
        _2543 = (_2759 * _2750) + _1979;
        _2545 = (_2759 * _2752) + _1981;
        _2547 = (_2759 * _2754) + _1983;
        _2549 = ((_2744 * _791) * _2759) + _2324;
        _2551 = ((_2746 * _793) * _2759) + _2326;
        _2553 = ((_2748 * _794) * _2759) + _2328;
    }
    else
    {
        _2543 = _1979;
        _2545 = _1981;
        _2547 = _1983;
        _2549 = _2324;
        _2551 = _2326;
        _2553 = _2328;
    }
    float _4441 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _4452 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _4463 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    uint _2573 = _262 + 6u;
    float _2581 = _729 / cbSceneParam._m0[86u].x;
    float _2582 = _730 / cbSceneParam._m0[86u].y;
    vec4 _2596 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, (log2((isnan(cbSceneParam._m0[77u].w) ? _663 : (isnan(_663) ? cbSceneParam._m0[77u].w : min(_663, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2598 = _2596.x;
    float _2599 = _2596.y;
    float _2600 = _2596.z;
    float _2601 = _2596.w;
    float _2694;
    float _2696;
    float _2698;
    float _2700;
    if (_663 > cbSceneParam._m0[78u].w)
    {
        float _2656 = isnan(_663) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _663 : min(cbSceneParam._m0[80u].w, _663));
        float _2657 = _2656 / _663;
        float _2668 = _2657 * _714;
        float _2669 = _715 * _2657;
        float _2670 = (-0.0) - _2669;
        float _2672 = _2657 * _716;
        float _2674 = (cbSceneParam._m0[77u].w * _2670) / _2656;
        float _2675 = _2674 + cbSceneParam._m0[79u].w;
        float _2676 = cbSceneParam._m0[79u].w - _2669;
        float _2682 = sqrt(((_2668 * _2668) + (_2669 * _2669)) + (_2672 * _2672));
        float _2685 = (1.0 - (cbSceneParam._m0[77u].w / _2656)) * _2682;
        float _2690 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2692 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2845;
        if (abs((_2670 - _2674) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2845 = ((((_2675 > 0.0) ? exp2(_2690 * _2675) : (2.0 - exp2(_2692 * _2675))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2685;
        }
        else
        {
            float _2805 = 1.0 / cbSceneParam._m0[80u].x;
            float _2806 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : max(_2675, _2676));
            float _2807 = isnan(_2676) ? _2675 : (isnan(_2675) ? _2676 : min(_2675, _2676));
            float _2816 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : min(_2806, 0.0));
            float _2817 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : min(_2807, 0.0));
            _2845 = ((abs(_2682 / _2670) * cbSceneParam._m0[80u].y) * ((((_2816 - _2817) * 2.0) - ((exp2(_2690 * (isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0)))) - exp2(_2690 * (isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0))))) * _2805)) - ((exp2(_2692 * _2816) - exp2(_2692 * _2817)) * _2805))) + (_2685 * cbSceneParam._m0[80u].z);
        }
        vec4 _2847 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2581, _2582, 1.0), 0.0);
        float _2856 = exp2((_2845 * (-1.44269502162933349609375)) * (1.0 - _2847.w));
        float _2857 = log2(_2856);
        float _2873 = log2(_2601);
        _2694 = (exp2(_2873 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].x)) * _2847.x) / cbSceneParam._m0[78u].x)) + _2598;
        _2696 = (exp2(_2873 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].y)) * _2847.y) / cbSceneParam._m0[78u].y)) + _2599;
        _2698 = (exp2(_2873 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2857 * cbSceneParam._m0[78u].z)) * _2847.z) / cbSceneParam._m0[78u].z)) + _2600;
        _2700 = _2856 * _2601;
    }
    else
    {
        _2694 = _2598;
        _2696 = _2599;
        _2698 = _2600;
        _2700 = _2601;
    }
    float _2712 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2713 = _2712 == 3.0;
    float _2714 = log2(_2700);
    float _2721 = exp2(_2714 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_2543 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _807))) + ((_2549 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2722 = exp2(_2714 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2545 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _807))) + ((_2551 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2723 = exp2(_2714 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2547 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _807))) + ((_2553 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1615)) * cbPerFrame._m0[3u].x));
    float _2732 = (_2712 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2732 * (_2713 ? _2721 : (_2721 + (cbSceneParam._m0[72u].w * _2694)));
    SV_Target.y = _2732 * (_2713 ? _2722 : (_2722 + (cbSceneParam._m0[72u].w * _2696)));
    SV_Target.z = _2732 * (_2713 ? _2723 : (_2723 + (cbSceneParam._m0[72u].w * _2698)));
    SV_Target.w = cbInstanceData._m0[_2573].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2573].w;
}


