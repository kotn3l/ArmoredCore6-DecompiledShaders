#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _3911;
float _3912;
float _3913;
float _3914;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _244 = _243 * _235;
    float _245 = _243 * _236;
    float _246 = _243 * _237;
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = _250 * NORMAL.x;
    float _252 = _250 * NORMAL.y;
    float _253 = _250 * NORMAL.z;
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _258 = _257 * TANGENT.x;
    float _259 = _257 * TANGENT.y;
    float _260 = _257 * TANGENT.z;
    uint _263 = uint(roundEven(NORMAL.w)) * 13u;
    uint _268 = _263 + 1u;
    uint _272 = _263 + 2u;
    float _281 = sqrt(((cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x) + (cbInstanceData._m0[_263].x * cbInstanceData._m0[_263].x)) + (cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x));
    float _282 = _281 * TEXCOORD.z;
    float _283 = _281 * TEXCOORD.w;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _331 = _326.x * cbMtdParam._m0[11u].x;
    float _332 = _326.y * cbMtdParam._m0[11u].y;
    float _333 = _326.z * cbMtdParam._m0[11u].z;
    vec4 _352 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _282) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _283) + cbTextureTilingScale._m0[5u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _371.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3923 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _446 = (_439 * ((_352.x * cbMtdParam._m0[12u].x) - _331)) + _331;
    float _447 = (_439 * ((_352.y * cbMtdParam._m0[12u].y) - _332)) + _332;
    float _448 = (_439 * ((_352.z * cbMtdParam._m0[12u].z) - _333)) + _333;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _282) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _283) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _371.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3934 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _525 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _302.x) * ((_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446);
    float _528 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _302.y) * ((_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447);
    float _531 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _302.z) * ((_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448);
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _282) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _283) + cbTextureTilingScale._m0[4u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _568 = _566.x;
    float _569 = _566.y;
    float _570 = _566.z;
    float _577 = ((_549.x - _568) * _439) + _568;
    float _578 = ((_549.y - _569) * _439) + _569;
    float _579 = ((_549.z - _570) * _439) + _570;
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _282) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _283) + cbTextureTilingScale._m0[2u].w));
    float _604 = ((_591.z - _579) * _512) + _579;
    float _607 = ((((_591.x - _577) * _512) + _577) * 2.0) + (-1.0);
    float _609 = ((((_591.y - _578) * _512) + _578) * 2.0) + (-1.0);
    float _610 = dot(vec2(_607, _609), vec2(_607, _609));
    float _3945 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _615 = sqrt(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))));
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _641 = (((_629.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _607;
    float _642 = (((_629.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _609;
    float _645 = fma(_615, _251, fma(_642, _258, _641 * _244));
    float _648 = fma(_615, _252, fma(_642, _259, _641 * _245));
    float _651 = fma(_615, _253, fma(_642, _260, _641 * _246));
    float _655 = inversesqrt(dot(vec3(_645, _648, _651), vec3(_645, _648, _651)));
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _282) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _283) + cbTextureTilingScale._m0[11u].w));
    float _684 = _682.x;
    float _685 = 1.0 - _684;
    float _694 = (cbMtdParam._m0[19u].x + dot(vec4(_655 * _645, _655 * _648, _655 * _651, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_684 - _685) * cbMtdParam._m0[24u].z) + _685) * cbMtdParam._m0[21u].z);
    float _3956 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _697 = (-0.0) - cbMtdParam._m0[24u].x;
    float _699 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _699 : (isnan(_699) ? 1.0 : min(_699, 1.0));
    float _707 = _695 - ((_695 * TEXCOORD_8.x) * _700);
    float _708 = _695 - ((_695 * TEXCOORD_8.y) * _700);
    float _709 = _695 - ((_695 * TEXCOORD_8.z) * _700);
    float _716 = (_707 * (cbMtdParam._m0[17u].x - _525)) + _525;
    float _717 = (_708 * (cbMtdParam._m0[17u].y - _528)) + _528;
    float _718 = (_709 * (cbMtdParam._m0[17u].z - _531)) + _531;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _282) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _283) + cbTextureTilingScale._m0[19u].w));
    float _732 = _730.x;
    float _733 = 1.0 - _732;
    float _759 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_732 - _733) * cbMtdParam._m0[24u].w) + _733) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3977 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _760 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _768 = ((((cbMtdParam._m0[10u].x - _716) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _760) + _716;
    float _769 = ((((cbMtdParam._m0[10u].y - _717) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _760) + _717;
    float _770 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _718)) * _760) + _718;
    vec4 _796 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _798 = _796.x;
    float _815 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _282) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _283) + cbTextureTilingScale._m0[9u].w)).x - _798) * _439) + _798;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _282) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _283) + cbTextureTilingScale._m0[21u].w)).x - _815) * _512) + _815;
    float _836 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _832) * cbMtdParam._m0[19u].z) + _832;
    float _838 = _836 - (_836 * _707);
    float _840 = _838 - (_838 * _760);
    float _844 = (cbMtdParam._m0[19u].w * (_629.z - _604)) + _604;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _282) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _283) + cbTextureTilingScale._m0[15u].w));
    float _865 = (_858.x * 2.0) + (-1.0);
    float _866 = (_858.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3988 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _875 = ((_858.z - _844) * _707) + _844;
    float _878 = ((cbMtdParam._m0[23u].x - _875) * _760) + _875;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _282) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _283) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _3999 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _920 = ((sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) - _615) * _709) + _615;
    float _923 = (((_865 - _641) * _707) + _641) + (cbMtdParam._m0[21u].x * _641);
    float _924 = (((_866 - _642) * _708) + _642) + (cbMtdParam._m0[21u].x * _642);
    float _935 = (((_903 - _923) + (_923 * cbMtdParam._m0[22u].z)) * _760) + _923;
    float _936 = (((_904 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _760) + _924;
    float _937 = (_760 * (sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _920)) + _920;
    float _939 = cbMtdParam._m0[22u].x + _629.w;
    float _942 = fma(_937, _251, fma(_936, _258, _935 * _244));
    float _945 = fma(_937, _252, fma(_936, _259, _935 * _245));
    float _948 = fma(_937, _253, fma(_936, _260, _935 * _246));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4010 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _956 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4032 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4043 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4054 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4065 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _961 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4076 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4087 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) - _1220)) + _1220) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1074 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1077 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1090 = _263 + 9u;
    uint _1091 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _1097 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1091].x;
    float _1098 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1091].y;
    float _1099 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1091].z;
    float _4098 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1103 = 1.0 - _961;
    float _1104 = _1100 * _1103;
    float _1105 = _1101 * _1103;
    float _1106 = _1102 * _1103;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _961;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _961;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _961;
    float _1114 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _953) - _1032;
    float _1139 = (_1134 * _954) - _1033;
    float _1140 = (_1134 * _955) - _1034;
    float _1144 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4131 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_956);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1146;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1260 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1264 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1289 = _1194 + _953;
        float _1290 = _1198 + _954;
        float _1291 = _1202 + _955;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_953, _954, _955), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4179 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_953, _954, _955), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4212 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_953, _954, _955), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4245 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1573 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1577 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1581 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1604 = _1194 + _953;
        float _1605 = _1198 + _954;
        float _1606 = _1202 + _955;
        float _1616 = fma(_1606, cbModelParam._m0[30u].z, fma(_1605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1604)) - _1573;
        float _1617 = fma(_1606, cbModelParam._m0[31u].z, fma(_1605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1604)) - _1577;
        float _1618 = fma(_1606, cbModelParam._m0[32u].z, fma(_1605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1604)) - _1581;
        float _1622 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
        float _1635 = ((_1622 * _1616) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1573 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1622 * _1617) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1577 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1622 * _1618) / cbModelParam._m0[35u].z) + ((((((_1581 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        float _1672 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1639.x + (-0.5));
        float _1674 = _1672 * (_1639.y + (-0.5));
        float _1675 = _1672 * (_1639.z + (-0.5));
        float _1682 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1646.x + (-0.5));
        float _1684 = _1682 * (_1646.y + (-0.5));
        float _1685 = _1682 * (_1646.z + (-0.5));
        float _1692 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1653.x + (-0.5));
        float _1694 = _1692 * (_1653.y + (-0.5));
        float _1695 = _1692 * (_1653.z + (-0.5));
        float _1702 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1660.x + (-0.5));
        float _1704 = _1702 * (_1660.y + (-0.5));
        float _1705 = _1702 * (_1660.z + (-0.5));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1673 * 0.5;
        float _1710 = _1683 * 0.5;
        float _1711 = _1693 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_953, _954, _955), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4308 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1736 + 1.0))) + _1741) * _1706;
        float _1751 = _1674 * 0.5;
        float _1752 = _1684 * 0.5;
        float _1753 = _1694 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_953, _954, _955), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4341 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1778 + 1.0))) + _1783) * _1707;
        float _1793 = _1675 * 0.5;
        float _1794 = _1685 * 0.5;
        float _1795 = _1695 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_953, _954, _955), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4374 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1820 + 1.0))) + _1825) * _1708;
        _1842 = _1675;
        _1843 = _1674;
        _1844 = _1673;
        _1845 = _1685;
        _1846 = _1684;
        _1847 = _1683;
        _1848 = _1695;
        _1849 = _1694;
        _1850 = _1693;
        _1851 = _1708;
        _1852 = _1707;
        _1853 = _1706;
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
    }
    else
    {
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = _1532;
        _1854 = 0.0;
        _1855 = 0.0;
        _1856 = 0.0;
    }
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1544)) + _1544;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1545)) + _1545;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1889 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1866));
    float _1910 = _1138 * 0.5;
    float _1911 = _1139 * 0.5;
    float _1912 = _1140 * 0.5;
    float _1913 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1916 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1919 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1953;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1926 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1930 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1934 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1941 = dot(vec4(cbModelParam._m0[39u]), vec4(_1910, _1911, _1912, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1964;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1955 = dot(vec4(cbModelParam._m0[40u]), vec4(_1910, _1911, _1912, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1955) ? 0.0 : (isnan(0.0) ? _1955 : max(0.0, _1955))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1968 = (_1964 * cbModelParam._m0[1u].x) + (_1953 * (1.0 - cbModelParam._m0[1u].x));
    float _1978 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1978 : min(cbModelParam._m0[25u].z, _1978));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2027 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2031 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2035 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2038 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2041 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2044 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2072;
        if (_2038 > 0.0)
        {
            _2072 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2072 = frontier_phi_17_15_ladder;
        }
        float _2275;
        if (_2041 > 0.0)
        {
            _2275 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2275 = frontier_phi_26_22_ladder;
        }
        float _2529;
        if (_2044 > 0.0)
        {
            _2529 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2529 = frontier_phi_38_33_ladder;
        }
        float _2531 = isnan(_2275) ? _2072 : (isnan(_2072) ? _2275 : min(_2072, _2275));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _2038) + _2027;
        float _2537 = (_2532 * _2041) + _2031;
        float _2538 = (_2532 * _2044) + _2035;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2541 = (-1.0) - _2539;
        float _2543 = _2539 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2538 > _2543) || ((_2538 < _2541) || ((_2537 > _2543) || ((_2537 < _2541) || ((_2536 < _2541) || (_2536 > _2543))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2666 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2538, cbModelParam._m0[9u].z, fma(_2537, cbModelParam._m0[9u].y, _2536 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2538, cbModelParam._m0[10u].z, fma(_2537, cbModelParam._m0[10u].y, _2536 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2538, cbModelParam._m0[11u].z, fma(_2537, cbModelParam._m0[11u].y, _2536 * cbModelParam._m0[11u].x))), _1979);
            frontier_phi_16_38_ladder = _2666.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2666.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2666.x * cbModelParam._m0[1u].y;
        }
        _2060 = frontier_phi_16_38_ladder_2;
        _2062 = frontier_phi_16_38_ladder_1;
        _2064 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1979);
        _2060 = _2048.x * cbModelParam._m0[1u].y;
        _2062 = _2048.y * cbModelParam._m0[1u].y;
        _2064 = _2048.z * cbModelParam._m0[1u].y;
    }
    float _2068 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2068 : min(cbModelParam._m0[25u].w, _2068));
    float _2159;
    float _2161;
    float _2163;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2123 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2127 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2131 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2134 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2137 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2140 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2280;
        if (_2134 > 0.0)
        {
            _2280 = abs((1.0 - _2123) / _2134);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2123 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2280 = frontier_phi_28_24_ladder;
        }
        float _2556;
        if (_2137 > 0.0)
        {
            _2556 = abs((1.0 - _2127) / _2137);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2127 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2556 = frontier_phi_40_35_ladder;
        }
        float _2769;
        if (_2140 > 0.0)
        {
            _2769 = abs((1.0 - _2131) / _2140);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2140 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2131 + 1.0) / _2140);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2769 = frontier_phi_49_46_ladder;
        }
        float _2771 = isnan(_2556) ? _2280 : (isnan(_2280) ? _2556 : min(_2280, _2556));
        float _2772 = isnan(_2769) ? _2771 : (isnan(_2771) ? _2769 : min(_2771, _2769));
        float _2776 = (_2772 * _2134) + _2123;
        float _2777 = (_2772 * _2137) + _2127;
        float _2778 = (_2772 * _2140) + _2131;
        float _2779 = _2772 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2779;
        float _2782 = _2779 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2778 > _2782) || ((_2778 < _2780) || ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 < _2780) || (_2776 > _2782))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2778, cbModelParam._m0[17u].z, fma(_2777, cbModelParam._m0[17u].y, _2776 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2778, cbModelParam._m0[18u].z, fma(_2777, cbModelParam._m0[18u].y, _2776 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2778, cbModelParam._m0[19u].z, fma(_2777, cbModelParam._m0[19u].y, _2776 * cbModelParam._m0[19u].x))), _2069);
            frontier_phi_25_49_ladder = _2977.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2977.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2977.x * cbModelParam._m0[1u].z;
        }
        _2159 = frontier_phi_25_49_ladder_2;
        _2161 = frontier_phi_25_49_ladder_1;
        _2163 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2143 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2069);
        _2159 = _2143.x * cbModelParam._m0[1u].z;
        _2161 = _2143.y * cbModelParam._m0[1u].z;
        _2163 = _2143.z * cbModelParam._m0[1u].z;
    }
    float _2176 = (((_1165 * _1114) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2178 = (((_1165 * _1116) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2161 - _2062)) + _2062);
    float _2180 = (((_1165 * _1117) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2163 - _2064)) + _2064);
    float _2183 = fma(_2180, cbSceneParam._m0[89u].z, fma(_2178, cbSceneParam._m0[89u].y, _2176 * cbSceneParam._m0[89u].x));
    float _2186 = fma(_2180, cbSceneParam._m0[90u].z, fma(_2178, cbSceneParam._m0[90u].y, _2176 * cbSceneParam._m0[90u].x));
    float _2189 = fma(_2180, cbSceneParam._m0[91u].z, fma(_2178, cbSceneParam._m0[91u].y, _2176 * cbSceneParam._m0[91u].x));
    uvec4 _2199 = floatBitsToUint(cbInstanceData._m0[_263 + 5u]);
    uint _2201 = _2199.x * 14u;
    uint _2202 = _2201 + 13u;
    float _2209 = _1130 + (-1.0);
    float _2214 = (cbLight._m0[_2202].x * _2209) + 1.0;
    float _2215 = (cbLight._m0[_2202].y * _2209) + 1.0;
    float _2216 = (cbLight._m0[_2202].z * _2209) + 1.0;
    float _2217 = (cbLight._m0[_2202].w * _2209) + 1.0;
    uint _2218 = _2201 + 5u;
    float _2224 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2228 = _2201 + 4u;
    float _2234 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2238 = _2201 | 1u;
    float _2249 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_953, _954, _955));
    float _2252 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_953, _954, _955));
    float _4510 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _4521 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2257 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2259 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2266 = ((cbLight._m0[_2218].x * _2224) * _2259) + ((cbLight._m0[_2228].x * _2234) * _2257);
    float _2267 = ((_2224 * cbLight._m0[_2218].y) * _2259) + ((_2234 * cbLight._m0[_2228].y) * _2257);
    float _2268 = ((_2224 * cbLight._m0[_2218].z) * _2259) + ((_2234 * cbLight._m0[_2228].z) * _2257);
    uvec4 _2272 = floatBitsToUint(cbLight._m0[_2201 + 12u]);
    bool _2274 = _2272.x == 0u;
    float _2285;
    float _2287;
    float _2289;
    if (_2274)
    {
        _2285 = _2266;
        _2287 = _2267;
        _2289 = _2268;
    }
    else
    {
        uint _2293 = _2201 + 6u;
        float _2309 = (dot(vec3(cbLight._m0[_2201 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2310 = _2309 * _2309;
        float _4532 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2311 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2312 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2285 = (((cbLight._m0[_2293].x * 0.3183098733425140380859375) * _2311) * _2312) + _2266;
        _2287 = (((cbLight._m0[_2293].y * 0.3183098733425140380859375) * _2311) * _2312) + _2267;
        _2289 = (((cbLight._m0[_2293].z * 0.3183098733425140380859375) * _2311) * _2312) + _2268;
    }
    bool _2292 = _2272.y == 0u;
    float _2330;
    float _2332;
    float _2334;
    if (_2292)
    {
        _2330 = _2285;
        _2332 = _2287;
        _2334 = _2289;
    }
    else
    {
        uint _2500 = _2201 + 7u;
        float _2516 = (dot(vec3(cbLight._m0[_2201 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2517 = _2516 * _2516;
        float _4548 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
        float _2518 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2519 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2330 = (((cbLight._m0[_2500].x * 0.3183098733425140380859375) * _2518) * _2519) + _2285;
        _2332 = (((cbLight._m0[_2500].y * 0.3183098733425140380859375) * _2518) * _2519) + _2287;
        _2334 = (((cbLight._m0[_2500].z * 0.3183098733425140380859375) * _2518) * _2519) + _2289;
    }
    uint _2337 = _2201 + 8u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _956) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2201].x + _1032;
    float _2353 = cbLight._m0[_2201].y + _1033;
    float _2354 = cbLight._m0[_2201].z + _1034;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2201].xyz));
    float _4564 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _4575 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2366 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2367 = dot(vec3(_953, _954, _955), vec3(_2359, _2360, _2361));
    float _4586 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2370 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2371 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2359, _2360, _2361));
    float _4597 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2375 = _2351 * _2351;
    float _2379 = ((_2370 * _2370) * (_2375 + (-1.0))) + 1.0;
    float _2387 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2388 = 0.959999978542327880859375 - _1111;
    float _2390 = 0.959999978542327880859375 - _1112;
    float _2391 = 0.959999978542327880859375 - _1113;
    float _2398 = 1.0 - _2351;
    float _2409 = (0.5 / (((_2366 * ((_2365 * _2398) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2398) + _2351) * _2365))) * _2365;
    float _4608 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2411 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2375 / ((_2379 * _2379) * 3.141590118408203125));
    uint _2422 = _2201 + 9u;
    float _2433 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2238].w)) * _956) * 0.949999988079071044921875);
    float _2434 = _2433 * _2433;
    float _2435 = cbLight._m0[_2238].x + _1032;
    float _2436 = cbLight._m0[_2238].y + _1033;
    float _2437 = cbLight._m0[_2238].z + _1034;
    float _2441 = inversesqrt(dot(vec3(_2435, _2436, _2437), vec3(_2435, _2436, _2437)));
    float _2442 = _2441 * _2435;
    float _2443 = _2441 * _2436;
    float _2444 = _2441 * _2437;
    float _2445 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2238].xyz));
    float _4619 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2448 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2449 = dot(vec3(_953, _954, _955), vec3(_2442, _2443, _2444));
    float _4630 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2238].xyz), vec3(_2442, _2443, _2444));
    float _4641 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2434 * _2434;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2468 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
    float _2475 = 1.0 - _2434;
    float _2485 = (0.5 / (((_2366 * ((_2448 * _2475) + _2434)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2475) + _2434) * _2448))) * _2448;
    float _4652 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    float _2497 = (((((_2468 * _2388) + _1114) * cbLight._m0[_2422].x) * _2487) * _2224) + (((((_2387 * _2388) + _1114) * cbLight._m0[_2337].x) * _2411) * _2234);
    float _2498 = (((((_2468 * _2390) + _1116) * cbLight._m0[_2422].y) * _2487) * _2224) + (((((_2387 * _2390) + _1116) * cbLight._m0[_2337].y) * _2411) * _2234);
    float _2499 = (((((_2468 * _2391) + _1117) * cbLight._m0[_2422].z) * _2487) * _2224) + (((((_2387 * _2391) + _1117) * cbLight._m0[_2337].z) * _2411) * _2234);
    float _2561;
    float _2563;
    float _2565;
    if (_2274)
    {
        _2561 = _2497;
        _2563 = _2498;
        _2565 = _2499;
    }
    else
    {
        uint _2567 = _2201 + 2u;
        uint _2571 = _2201 + 10u;
        float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2567].w)) * _956) * 0.949999988079071044921875);
        float _2586 = _2585 * _2585;
        float _2587 = cbLight._m0[_2567].x + _1032;
        float _2588 = cbLight._m0[_2567].y + _1033;
        float _2589 = cbLight._m0[_2567].z + _1034;
        float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
        float _2594 = _2593 * _2587;
        float _2595 = _2593 * _2588;
        float _2596 = _2593 * _2589;
        float _2597 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2567].xyz));
        float _4663 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2600 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2601 = dot(vec3(_953, _954, _955), vec3(_2594, _2595, _2596));
        float _4674 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
        float _2604 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2605 = dot(vec3(cbLight._m0[_2567].xyz), vec3(_2594, _2595, _2596));
        float _4685 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2609 = _2586 * _2586;
        float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
        float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
        float _2627 = 1.0 - _2586;
        float _2637 = (0.5 / (((_2366 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2627) + _2586) * _2600))) * _2600;
        float _4696 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2639 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
        float _2640 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2561 = (((((_2620 * _2388) + _1114) * cbLight._m0[_2571].x) * _2639) * _2640) + _2497;
        _2563 = (((((_2620 * _2390) + _1116) * cbLight._m0[_2571].y) * _2639) * _2640) + _2498;
        _2565 = (((((_2620 * _2391) + _1117) * cbLight._m0[_2571].z) * _2639) * _2640) + _2499;
    }
    float _2675;
    float _2677;
    float _2679;
    if (_2292)
    {
        _2675 = _2561;
        _2677 = _2563;
        _2679 = _2565;
    }
    else
    {
        uint _2686 = _2201 + 3u;
        uint _2690 = _2201 + 11u;
        float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2686].w)) * _956) * 0.949999988079071044921875);
        float _2705 = _2704 * _2704;
        float _2706 = cbLight._m0[_2686].x + _1032;
        float _2707 = cbLight._m0[_2686].y + _1033;
        float _2708 = cbLight._m0[_2686].z + _1034;
        float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
        float _2713 = _2712 * _2706;
        float _2714 = _2712 * _2707;
        float _2715 = _2712 * _2708;
        float _2716 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2686].xyz));
        float _4712 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2719 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2720 = dot(vec3(_953, _954, _955), vec3(_2713, _2714, _2715));
        float _4723 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
        float _2723 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2724 = dot(vec3(cbLight._m0[_2686].xyz), vec3(_2713, _2714, _2715));
        float _4734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2728 = _2705 * _2705;
        float _2732 = ((_2723 * _2723) * (_2728 + (-1.0))) + 1.0;
        float _2739 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2746 = 1.0 - _2705;
        float _2756 = (0.5 / (((_2366 * ((_2719 * _2746) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2366 * _2746) + _2705) * _2719))) * _2719;
        float _4745 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2758 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2728 / ((_2732 * _2732) * 3.141590118408203125));
        float _2759 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2675 = (((((_2739 * _2388) + _1114) * cbLight._m0[_2690].x) * _2758) * _2759) + _2561;
        _2677 = (((((_2739 * _2390) + _1116) * cbLight._m0[_2690].y) * _2758) * _2759) + _2563;
        _2679 = (((((_2739 * _2391) + _1117) * cbLight._m0[_2690].z) * _2758) * _2759) + _2565;
    }
    float _2894;
    float _2896;
    float _2898;
    float _2900;
    float _2902;
    float _2904;
    if (_2199.y == 0u)
    {
        float _2834 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2835 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2834;
        float _2836 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2834;
        float _2837 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2834;
        uvec4 _2849 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2850 = _2849.x;
        uint _2861 = uint((float(_2849.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _2850))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _2850)));
        float _2871 = (log2(_2837 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2872 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        uint _2875 = uint(isnan(14.0) ? _2872 : (isnan(_2872) ? 14.0 : min(_2872, 14.0)));
        uvec4 _2880 = texelFetch(g_lightClusterGridBuffer, int(((_2875 << 2u) + (_2861 << 6u)) >> 2u));
        uint _2881 = _2880.x;
        uint _2882 = _2849.z;
        float _2982;
        float _2984;
        float _2986;
        float _2988;
        float _2990;
        float _2992;
        if (((((1u << ((_2882 >> 4u) & 15u)) + 4294967295u) & _2881) == 0u) || ((_2882 & 240u) == 0u))
        {
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
        }
        else
        {
            float _2983;
            float _2985;
            float _2987;
            float _2989;
            float _2991;
            float _2993;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            uint _3140 = 0u;
            uint _3149;
            bool _3150;
            for (;;)
            {
                _3149 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3140 << 2u)) >> 2u)).x;
                _3150 = _3149 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3150)
                {
                    frontier_phi_66_pred = _3134;
                    frontier_phi_66_pred_1 = _3139;
                    frontier_phi_66_pred_2 = _3138;
                    frontier_phi_66_pred_3 = _3137;
                    frontier_phi_66_pred_4 = _3136;
                    frontier_phi_66_pred_5 = _3135;
                }
                else
                {
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    uint _3285;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3149;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    for (;;)
                    {
                        uint _3289 = uint(findLSB(_3285)) + (_3140 << 5u);
                        uint _3286 = (_3285 + 4294967295u) & _3285;
                        uint _3291 = _3289 * 48u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3291)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3291 + 3u)).x));
                        uint _3311 = (_3289 * 48u) + 4u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 3u)).x));
                        uint _3330 = (_3289 * 48u) + 8u;
                        vec3 _3341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x));
                        float _3345 = _3305.x - _2835;
                        float _3346 = _3305.y - _2836;
                        float _3347 = _3305.z - _2837;
                        float _3348 = dot(vec3(_3345, _3346, _3347), vec3(_3345, _3346, _3347));
                        float _3351 = inversesqrt(_3348);
                        float _3352 = _3351 * _3345;
                        float _3353 = _3351 * _3346;
                        float _3354 = _3351 * _3347;
                        float _3355 = dot(vec3(_1071, _1074, _1077), vec3(_3352, _3353, _3354));
                        float _3360 = 1.0 - (_3348 * _3305.w);
                        float _4771 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                        float _3361 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3362 = sqrt(_3348) * _3324.w;
                        float _3365 = 1.39999997615814208984375 / (_3362 + 1.39999997615814208984375);
                        float _3366 = _3365 * _3365;
                        float _3369 = ((1.0 - _3366) * _3355) + _3366;
                        float _3372 = _3362 * _3362;
                        float _3376 = ((isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0))) * _3361) / ((_3372 * 0.699999988079071044921875) + 1.0);
                        float _3380 = (-0.0) - _2835;
                        float _3381 = (-0.0) - _2836;
                        float _3382 = (-0.0) - _2837;
                        float _3386 = inversesqrt(dot(vec3(_3380, _3381, _3382), vec3(_3380, _3381, _3382)));
                        float _3387 = _3386 * _3380;
                        float _3388 = _3386 * _3381;
                        float _3389 = _3386 * _3382;
                        float _3397 = exp2(log2(1.0 / ((_3372 * 3.5) + 5.0)) * 0.25);
                        float _3398 = 1.0 - _1146;
                        float _3405 = sqrt(1.0 - ((1.0 - (_3398 * _3398)) * (1.0 - (_3397 * _3397))));
                        float _3406 = _3405 * _3405;
                        float _3407 = _3406 * _3406;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3414 = inversesqrt(dot(vec3(_3408, _3409, _3410), vec3(_3408, _3409, _3410)));
                        float _3418 = dot(vec3(_1071, _1074, _1077), vec3(_3387, _3388, _3389));
                        float _4787 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                        float _3421 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3422 = dot(vec3(_1071, _1074, _1077), vec3(_3414 * _3408, _3414 * _3409, _3414 * _3410));
                        float _4798 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3425 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3429 = ((_3425 * _3425) * (_3407 + (-1.0))) + 1.0;
                        float _3430 = _3365 * _3406;
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3355) + _3431;
                        float _4809 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3435 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3436 = 1.0 - _3406;
                        float _3446 = (0.5 / (((_3435 * ((_3421 * _3436) + _3406)) + 9.9999999392252902907785028219223e-09) + (((_3435 * _3436) + _3406) * _3421))) * _3435;
                        float _4820 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3457 = (((_3407 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3429 * _3429) * ((_3372 * 2.1991131305694580078125) + 3.141590118408203125))) * _3361;
                        _3209 = (_3376 * _3324.x) + _3282;
                        _3210 = (_3376 * _3324.y) + _3283;
                        _3211 = (_3376 * _3324.z) + _3284;
                        _3206 = (_3457 * _3341.x) + _3279;
                        _3207 = (_3457 * _3341.y) + _3280;
                        _3208 = (_3457 * _3341.z) + _3281;
                        if (_3286 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3286;
                        }
                    }
                    frontier_phi_66_pred = _3206;
                    frontier_phi_66_pred_1 = _3211;
                    frontier_phi_66_pred_2 = _3210;
                    frontier_phi_66_pred_3 = _3209;
                    frontier_phi_66_pred_4 = _3208;
                    frontier_phi_66_pred_5 = _3207;
                }
                _2983 = frontier_phi_66_pred;
                _2993 = frontier_phi_66_pred_1;
                _2991 = frontier_phi_66_pred_2;
                _2989 = frontier_phi_66_pred_3;
                _2987 = frontier_phi_66_pred_4;
                _2985 = frontier_phi_66_pred_5;
                uint _3141 = _3140 + 1u;
                if (_3141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3134 = _2983;
                    _3135 = _2985;
                    _3136 = _2987;
                    _3137 = _2989;
                    _3138 = _2991;
                    _3139 = _2993;
                    _3140 = _3141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
        }
        uvec4 _2996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2997 = _2996.z;
        uint _2999 = (_2997 >> 8u) & 15u;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((4294967295u << _2999) & _2881) == 0u)
        {
            _3102 = _2982;
            _3104 = _2984;
            _3106 = _2986;
            _3108 = _2988;
            _3110 = _2990;
            _3112 = _2992;
        }
        else
        {
            float _3127 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
            float _3128 = _3127 * _2835;
            float _3129 = _3127 * _2836;
            float _3130 = _3127 * _2837;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2999 < ((_2997 >> 12u) & 15u))
            {
                float _3103;
                float _3105;
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3262 = _2982;
                float _3263 = _2984;
                float _3264 = _2986;
                float _3265 = _2988;
                float _3266 = _2990;
                float _3267 = _2992;
                uint _3268 = _2999;
                uint _3277;
                bool _3278;
                for (;;)
                {
                    _3277 = texelFetch(g_lightClassification, int((((_2875 << 5u) + (_2861 << 9u)) + (_3268 << 2u)) >> 2u)).x;
                    _3278 = _3277 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3278)
                    {
                        frontier_phi_77_pred = _3267;
                        frontier_phi_77_pred_1 = _3266;
                        frontier_phi_77_pred_2 = _3265;
                        frontier_phi_77_pred_3 = _3264;
                        frontier_phi_77_pred_4 = _3263;
                        frontier_phi_77_pred_5 = _3262;
                    }
                    else
                    {
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        uint _3490 = _3277;
                        uint _3491;
                        vec4 _3516;
                        float _3517;
                        vec4 _3532;
                        vec3 _3544;
                        vec4 _3559;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3501 = ((_3268 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3490));
                            _3491 = (_3490 + 4294967295u) & _3490;
                            uint _3503 = _3501 * 40u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3517 = _3516.w;
                            uint _3519 = (_3501 * 40u) + 4u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3501 * 40u) + 8u;
                            _3544 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x));
                            uint _3546 = (_3501 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3501 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3501 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3501 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2837, _3608.z, fma(_2836, _3608.y, _3608.x * _2835)) + _3608.w;
                            _3621 = !((fma(_2837, _3589.z, fma(_2836, _3589.y, _3589.x * _2835)) + _3589.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3516.x - _2835;
                                float _3649 = _3516.y - _2836;
                                float _3650 = _3516.z - _2837;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3517 * _3517));
                                float _4831 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3666 = sqrt(_3651) * _3532.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_1071, _1074, _1077))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2837, _3559.z, fma(_2836, _3559.y, _3559.x * _2835)) + _3559.w) / _3620;
                                float _3680 = (fma(_2837, _3574.z, fma(_2836, _3574.y, _3574.x * _2835)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4847 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _1146;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3128;
                                float _3710 = _3656 - _3129;
                                float _3711 = _3657 - _3130;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3128, (-0.0) - _3129, (-0.0) - _3130));
                                float _4858 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3723 = dot(vec3(_1071, _1074, _1077), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4869 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_1071, _1074, _1077), vec3(_3655, _3656, _3657))) + _3732;
                                float _4880 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4891 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3686 * _3532.y;
                                frontier_phi_83_pred_1 = _3686 * _3532.x;
                                frontier_phi_83_pred_2 = _3760 * _3544.z;
                                frontier_phi_83_pred_3 = _3760 * _3544.y;
                                frontier_phi_83_pred_4 = _3760 * _3544.x;
                                frontier_phi_83_pred_5 = _3686 * _3532.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_83_pred;
                            _3767 = frontier_phi_83_pred_1;
                            _3766 = frontier_phi_83_pred_2;
                            _3765 = frontier_phi_83_pred_3;
                            _3764 = frontier_phi_83_pred_4;
                            _3769 = frontier_phi_83_pred_5;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3471 = _3764 + _3484;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            if (_3491 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3491;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3476;
                        frontier_phi_77_pred_1 = _3475;
                        frontier_phi_77_pred_2 = _3474;
                        frontier_phi_77_pred_3 = _3473;
                        frontier_phi_77_pred_4 = _3472;
                        frontier_phi_77_pred_5 = _3471;
                    }
                    _3113 = frontier_phi_77_pred;
                    _3111 = frontier_phi_77_pred_1;
                    _3109 = frontier_phi_77_pred_2;
                    _3107 = frontier_phi_77_pred_3;
                    _3105 = frontier_phi_77_pred_4;
                    _3103 = frontier_phi_77_pred_5;
                    uint _3269 = _3268 + 1u;
                    if (_3269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3262 = _3103;
                        _3263 = _3105;
                        _3264 = _3107;
                        _3265 = _3109;
                        _3266 = _3111;
                        _3267 = _3113;
                        _3268 = _3269;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3107;
                frontier_phi_58_59_ladder_1 = _3113;
                frontier_phi_58_59_ladder_2 = _3111;
                frontier_phi_58_59_ladder_3 = _3109;
                frontier_phi_58_59_ladder_4 = _3105;
                frontier_phi_58_59_ladder_5 = _3103;
            }
            else
            {
                frontier_phi_58_59_ladder = _2986;
                frontier_phi_58_59_ladder_1 = _2992;
                frontier_phi_58_59_ladder_2 = _2990;
                frontier_phi_58_59_ladder_3 = _2988;
                frontier_phi_58_59_ladder_4 = _2984;
                frontier_phi_58_59_ladder_5 = _2982;
            }
            _3102 = frontier_phi_58_59_ladder_5;
            _3104 = frontier_phi_58_59_ladder_4;
            _3106 = frontier_phi_58_59_ladder;
            _3108 = frontier_phi_58_59_ladder_3;
            _3110 = frontier_phi_58_59_ladder_2;
            _3112 = frontier_phi_58_59_ladder_1;
        }
        float _3117 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2894 = (_3117 * _3108) + _2330;
        _2896 = (_3117 * _3110) + _2332;
        _2898 = (_3117 * _3112) + _2334;
        _2900 = ((_3102 * _1114) * _3117) + _2675;
        _2902 = ((_3104 * _1116) * _3117) + _2677;
        _2904 = ((_3106 * _1117) * _3117) + _2679;
    }
    else
    {
        _2894 = _2330;
        _2896 = _2332;
        _2898 = _2334;
        _2900 = _2675;
        _2902 = _2677;
        _2904 = _2679;
    }
    float _4907 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4918 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4929 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2921 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2894 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1130))) + ((_2900 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2922 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2896 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1130))) + ((_2902 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2898 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1130))) + ((_2904 + ((isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    uint _2924 = _263 + 6u;
    float _2932 = _1052 / cbSceneParam._m0[86u].x;
    float _2933 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _2947 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2949 = _2947.x;
    float _2950 = _2947.y;
    float _2951 = _2947.z;
    float _2952 = _2947.w;
    float _3044;
    float _3046;
    float _3048;
    float _3050;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3007 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3008 = _3007 / _975;
        float _3019 = _3008 * _1025;
        float _3020 = _1026 * _3008;
        float _3021 = (-0.0) - _3020;
        float _3022 = _3008 * _1027;
        float _3024 = (cbSceneParam._m0[77u].w * _3021) / _3007;
        float _3025 = _3024 + cbSceneParam._m0[79u].w;
        float _3026 = cbSceneParam._m0[79u].w - _3020;
        float _3032 = sqrt(((_3019 * _3019) + (_3020 * _3020)) + (_3022 * _3022));
        float _3035 = (1.0 - (cbSceneParam._m0[77u].w / _3007)) * _3032;
        float _3040 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3042 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3219;
        if (abs((_3021 - _3024) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3219 = ((((_3025 > 0.0) ? exp2(_3040 * _3025) : (2.0 - exp2(_3042 * _3025))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3035;
        }
        else
        {
            float _3163 = 1.0 / cbSceneParam._m0[80u].x;
            float _3164 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : max(_3025, _3026));
            float _3165 = isnan(_3026) ? _3025 : (isnan(_3025) ? _3026 : min(_3025, _3026));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            _3219 = ((abs(_3032 / _3021) * cbSceneParam._m0[80u].y) * ((((_3174 - _3175) * 2.0) - ((exp2(_3040 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0)))) - exp2(_3040 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))))) * _3163)) - ((exp2(_3042 * _3174) - exp2(_3042 * _3175)) * _3163))) + (_3035 * cbSceneParam._m0[80u].z);
        }
        vec4 _3221 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2932, _2933, 1.0), 0.0);
        float _3230 = exp2((_3219 * (-1.44269502162933349609375)) * (1.0 - _3221.w));
        float _3231 = log2(_3230);
        float _3247 = log2(_2952);
        _3044 = (exp2(_3247 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].x)) * _3221.x) / cbSceneParam._m0[78u].x)) + _2949;
        _3046 = (exp2(_3247 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].y)) * _3221.y) / cbSceneParam._m0[78u].y)) + _2950;
        _3048 = (exp2(_3247 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3231 * cbSceneParam._m0[78u].z)) * _3221.z) / cbSceneParam._m0[78u].z)) + _2951;
        _3050 = _3230 * _2952;
    }
    else
    {
        _3044 = _2949;
        _3046 = _2950;
        _3048 = _2951;
        _3050 = _2952;
    }
    bool _3257;
    vec4 _3060;
    vec4 _3082;
    float _3084;
    float _3088;
    float _3089;
    float _3090;
    float _3091;
    bool _3101;
    for (;;)
    {
        _3060 = cbMatDynParam._m0[0u];
        float _3062 = roundEven(_3060.y);
        bool _3063 = _3062 == 3.0;
        float _3064 = log2(_3050);
        float _3071 = exp2(_3064 * cbSceneParam._m0[78u].x) * _2921;
        float _3072 = exp2(_3064 * cbSceneParam._m0[78u].y) * _2922;
        float _3073 = exp2(_3064 * cbSceneParam._m0[78u].z) * _2923;
        float _3080 = _1041 + (-0.5);
        _3082 = cbMtdParam._m0[1u];
        _3084 = _3082.y * _3080;
        float _3087 = (_3062 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3088 = _3087 * (_3063 ? _3071 : (_3071 + (cbSceneParam._m0[72u].w * _3044)));
        _3089 = _3087 * (_3063 ? _3072 : (_3072 + (cbSceneParam._m0[72u].w * _3046)));
        _3090 = _3087 * (_3063 ? _3073 : (_3073 + (cbSceneParam._m0[72u].w * _3048)));
        _3091 = _3080 * 0.999000012874603271484375;
        _3101 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3101)
        {
            if ((cbInstanceData._m0[_263 + 7u].x + _3091) < 0.5)
            {
                _3257 = true;
                break;
            }
        }
        uint _3198 = _1090 + uint(_3060.w);
        if ((cbInstanceData._m0[_3198].w < 1.0) && ((cbInstanceData._m0[_3198].w + _3091) < 0.5))
        {
            _3257 = true;
            break;
        }
        if ((_3084 + 1.0) < _3082.x)
        {
            _3257 = true;
            break;
        }
        _3257 = false;
        break;
    }
    float _3462;
    if (_3257)
    {
        discard_state = true;
        _3462 = 0.0;
    }
    else
    {
        _3462 = cbInstanceData._m0[_2924].w;
    }
    SV_Target.x = _3088;
    SV_Target.y = _3089;
    SV_Target.z = _3090;
    SV_Target.w = _3462;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2924].w;
    discard_exit();
}


