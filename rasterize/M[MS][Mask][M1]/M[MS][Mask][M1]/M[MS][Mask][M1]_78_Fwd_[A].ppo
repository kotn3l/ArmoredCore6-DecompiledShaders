#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1594;
float _3973;
float _3974;
float _3975;
float _3976;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3985 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3996 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4007 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4018 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4029 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) + _549;
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _617 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = _617.x;
    float _620 = _617.y;
    float _621 = _617.z;
    float _628 = ((_600.x - _619) * _457) + _619;
    float _629 = ((_600.y - _620) * _457) + _620;
    float _630 = ((_600.z - _621) * _457) + _621;
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _655 = ((_642.z - _630) * _530) + _630;
    float _658 = ((((_642.x - _628) * _530) + _628) * 2.0) + (-1.0);
    float _659 = ((((_642.y - _629) * _530) + _629) * 2.0) + (-1.0);
    float _660 = dot(vec2(_658, _659), vec2(_658, _659));
    float _4040 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _665 = sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _695 = (_658 + ((((_575.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_683.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _696 = (_659 + ((((_575.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_683.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _699 = fma(_665, _260, fma(_696, _267, _695 * _253));
    float _702 = fma(_665, _261, fma(_696, _268, _695 * _254));
    float _705 = fma(_665, _262, fma(_696, _269, _695 * _255));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _738 = _736.x;
    float _739 = 1.0 - _738;
    float _748 = (cbMtdParam._m0[19u].x + dot(vec4(_709 * _699, _709 * _702, _709 * _705, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_738 - _739) * cbMtdParam._m0[24u].z) + _739) * cbMtdParam._m0[21u].z);
    float _4051 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _749 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _751 = (-0.0) - cbMtdParam._m0[24u].x;
    float _753 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
    float _761 = _749 - ((_749 * TEXCOORD_8.x) * _754);
    float _762 = _749 - ((_749 * TEXCOORD_8.y) * _754);
    float _763 = _749 - ((_749 * TEXCOORD_8.z) * _754);
    float _770 = (_761 * (cbMtdParam._m0[17u].x - _556)) + _556;
    float _771 = (_762 * (cbMtdParam._m0[17u].y - _557)) + _557;
    float _772 = (_763 * (cbMtdParam._m0[17u].z - _558)) + _558;
    vec4 _784 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _786 = _784.x;
    float _787 = 1.0 - _786;
    float _813 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_786 - _787) * cbMtdParam._m0[24u].w) + _787) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4072 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _814 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _822 = ((((cbMtdParam._m0[10u].x - _770) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _814) + _770;
    float _823 = ((((cbMtdParam._m0[10u].y - _771) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _814) + _771;
    float _824 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _772)) * _814) + _772;
    vec4 _850 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _852 = _850.x;
    float _870 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _852) * _457) + _852;
    float _887 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _870) * _530) + _870;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _887) * cbMtdParam._m0[19u].z) + _887;
    float _893 = _891 - (_891 * _761);
    float _895 = _893 - (_893 * _814);
    float _900 = (((_575.z - _655) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _655;
    float _904 = ((_683.z - _900) * cbMtdParam._m0[19u].w) + _900;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _925 = (_918.x * 2.0) + (-1.0);
    float _926 = (_918.y * 2.0) + (-1.0);
    float _927 = dot(vec2(_925, _926), vec2(_925, _926));
    float _4083 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _935 = ((_918.z - _904) * _761) + _904;
    float _938 = ((cbMtdParam._m0[23u].x - _935) * _814) + _935;
    vec4 _959 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _965 = (_959.x * 2.0) + (-1.0);
    float _966 = (_959.y * 2.0) + (-1.0);
    float _967 = dot(vec2(_965, _966), vec2(_965, _966));
    float _4094 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _982 = ((sqrt(1.0 - (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) - _665) * _763) + _665;
    float _985 = (((_925 - _695) * _761) + _695) + (cbMtdParam._m0[21u].x * _695);
    float _986 = (((_926 - _696) * _762) + _696) + (cbMtdParam._m0[21u].x * _696);
    float _997 = (((_965 - _985) + (_985 * cbMtdParam._m0[22u].z)) * _814) + _985;
    float _998 = (((_966 - _986) + (_986 * cbMtdParam._m0[22u].z)) * _814) + _986;
    float _999 = (_814 * (sqrt(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) - _982)) + _982;
    float _1001 = cbMtdParam._m0[22u].x + _683.w;
    float _1004 = fma(_999, _260, fma(_998, _267, _997 * _253));
    float _1007 = fma(_999, _261, fma(_998, _268, _997 * _254));
    float _1010 = fma(_999, _262, fma(_998, _269, _997 * _255));
    float _1014 = inversesqrt(dot(vec3(_1004, _1007, _1010), vec3(_1004, _1007, _1010)));
    float _1015 = _1014 * _1004;
    float _1016 = _1014 * _1007;
    float _1017 = _1014 * _1010;
    float _4105 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1018 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
    float _4127 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _4138 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _4149 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _4160 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _1023 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _1037 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1077 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1087 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1077);
    float _1088 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1077);
    float _1089 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1077);
    float _1093 = inversesqrt(dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089)));
    float _1094 = _1087 * _1093;
    float _1095 = _1088 * _1093;
    float _1096 = _1089 * _1093;
    vec4 _1101 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1103 = _1101.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1275 = sqrt(((_1087 * _1087) + (_1088 * _1088)) + (_1089 * _1089));
        float _1281 = (cbMatDynParam._m0[5u].x * _1275) + cbMatDynParam._m0[5u].y;
        float _4171 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _1286 = (cbMatDynParam._m0[5u].z * _1275) + cbMatDynParam._m0[5u].w;
        float _4182 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) - _1282)) + _1282) < ((_1103 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1114 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1115 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1133 = fma(_1017, cbSceneParam._m0[5u].z, fma(_1016, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1015));
    float _1136 = fma(_1017, cbSceneParam._m0[6u].z, fma(_1016, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1015));
    float _1139 = fma(_1017, cbSceneParam._m0[7u].z, fma(_1016, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1015));
    uint _1152 = _291 + 9u;
    uint _1153 = _1152 + uint(cbMatDynParam._m0[0u].w);
    float _1159 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0)))) * cbInstanceData._m0[_1153].x;
    float _1160 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * cbInstanceData._m0[_1153].y;
    float _1161 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) * cbInstanceData._m0[_1153].z;
    float _4193 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
    float _1162 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _1163 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _4215 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _1164 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1165 = 1.0 - _1023;
    float _1166 = _1162 * _1165;
    float _1167 = _1163 * _1165;
    float _1168 = _1164 * _1165;
    float _1173 = (_1162 + (-0.039999999105930328369140625)) * _1023;
    float _1174 = (_1163 + (-0.039999999105930328369140625)) * _1023;
    float _1175 = (_1164 + (-0.039999999105930328369140625)) * _1023;
    float _1176 = _1173 + 0.039999999105930328369140625;
    float _1178 = _1174 + 0.039999999105930328369140625;
    float _1179 = _1175 + 0.039999999105930328369140625;
    vec4 _1188 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1114, cbSceneParam._m0[86u].y * _1115));
    float _1192 = ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * TEXCOORD_5.w) * _1188.x;
    float _1193 = dot(vec3(_1015, _1016, _1017), vec3(_1094, _1095, _1096));
    float _1196 = _1193 * 2.0;
    float _1200 = (_1196 * _1015) - _1094;
    float _1201 = (_1196 * _1016) - _1095;
    float _1202 = (_1196 * _1017) - _1096;
    float _1206 = abs(dot(vec3(_1094, _1095, _1096), vec3(_1015, _1016, _1017)));
    float _4226 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _1208 = sqrt(_1018);
    float _1221 = exp2((_1208 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1208 * 3.0));
    float _1227 = (1.0 - _1221) * ((_1208 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1228 = _1221 * _1208;
    float _1256 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1593;
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1318 = fma(_1264, cbModelParam._m0[26u].z, fma(_1260, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1256));
        float _1322 = fma(_1264, cbModelParam._m0[27u].z, fma(_1260, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1256));
        float _1326 = fma(_1264, cbModelParam._m0[28u].z, fma(_1260, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1256));
        float _1351 = _1256 + _1015;
        float _1352 = _1260 + _1016;
        float _1353 = _1264 + _1017;
        float _1363 = fma(_1353, cbModelParam._m0[26u].z, fma(_1352, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1351)) - _1318;
        float _1364 = fma(_1353, cbModelParam._m0[27u].z, fma(_1352, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1351)) - _1322;
        float _1365 = fma(_1353, cbModelParam._m0[28u].z, fma(_1352, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1351)) - _1326;
        float _1369 = inversesqrt(dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365)));
        float _1382 = ((_1369 * _1363) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1318 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1383 = ((_1369 * _1364) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1322 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1384 = ((_1369 * _1365) / cbModelParam._m0[34u].z) + ((((((_1326 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1387 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1394 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1382, _1383, _1384), 0.0);
        float _1421 = exp2((_1387.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1387.x + (-0.5));
        float _1423 = _1421 * (_1387.y + (-0.5));
        float _1424 = _1421 * (_1387.z + (-0.5));
        float _1431 = exp2((_1394.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1394.x + (-0.5));
        float _1433 = _1431 * (_1394.y + (-0.5));
        float _1434 = _1431 * (_1394.z + (-0.5));
        float _1441 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1401.x + (-0.5));
        float _1443 = _1441 * (_1401.y + (-0.5));
        float _1444 = _1441 * (_1401.z + (-0.5));
        float _1451 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1408.x + (-0.5));
        float _1453 = _1451 * (_1408.y + (-0.5));
        float _1454 = _1451 * (_1408.z + (-0.5));
        float _1455 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1456 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1457 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1458 = _1422 * 0.5;
        float _1459 = _1432 * 0.5;
        float _1460 = _1442 * 0.5;
        float _1461 = dot(vec3(_1458, _1459, _1460), vec3(_1458, _1459, _1460));
        float _1466 = (_1461 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1461);
        float _1475 = (dot(vec3(_1015, _1016, _1017), vec3(_1466 * _1458, _1466 * _1459, _1466 * _1460)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1485 = sqrt(((_1459 * _1459) + (_1458 * _1458)) + (_1460 * _1460)) / (_1455 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4274 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1487 + 1.0))) + _1492) * _1455;
        float _1502 = _1423 * 0.5;
        float _1503 = _1433 * 0.5;
        float _1504 = _1443 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1015, _1016, _1017), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1456 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4307 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1529 + 1.0))) + _1534) * _1456;
        float _1544 = _1424 * 0.5;
        float _1545 = _1434 * 0.5;
        float _1546 = _1444 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_1015, _1016, _1017), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1457 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4340 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1571 + 1.0))) + _1576) * _1457;
        _1593 = _1424;
        _1595 = _1423;
        _1596 = _1422;
        _1597 = _1434;
        _1598 = _1433;
        _1599 = _1432;
        _1600 = _1444;
        _1601 = _1443;
        _1602 = _1442;
        _1603 = _1457;
        _1604 = _1456;
        _1605 = _1455;
        _1606 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1607 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
        _1608 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
    }
    else
    {
        _1593 = _1594;
        _1595 = _1594;
        _1596 = _1594;
        _1597 = _1594;
        _1598 = _1594;
        _1599 = _1594;
        _1600 = _1594;
        _1601 = _1594;
        _1602 = _1594;
        _1603 = _1594;
        _1604 = _1594;
        _1605 = _1594;
        _1606 = 0.0;
        _1607 = 0.0;
        _1608 = 0.0;
    }
    float _1904;
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1635 = fma(_1264, cbModelParam._m0[30u].z, fma(_1260, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256));
        float _1639 = fma(_1264, cbModelParam._m0[31u].z, fma(_1260, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256));
        float _1643 = fma(_1264, cbModelParam._m0[32u].z, fma(_1260, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256));
        float _1666 = _1256 + _1015;
        float _1667 = _1260 + _1016;
        float _1668 = _1264 + _1017;
        float _1678 = fma(_1668, cbModelParam._m0[30u].z, fma(_1667, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1666)) - _1635;
        float _1679 = fma(_1668, cbModelParam._m0[31u].z, fma(_1667, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1666)) - _1639;
        float _1680 = fma(_1668, cbModelParam._m0[32u].z, fma(_1667, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1666)) - _1643;
        float _1684 = inversesqrt(dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680)));
        float _1697 = ((_1684 * _1678) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1635 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1698 = ((_1684 * _1679) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1639 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1684 * _1680) / cbModelParam._m0[35u].z) + ((((((_1643 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1701 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1697, _1698, _1699), 0.0);
        float _1734 = exp2((_1701.w + (-0.5)) * 20.0) * 2.0;
        float _1735 = _1734 * (_1701.x + (-0.5));
        float _1736 = _1734 * (_1701.y + (-0.5));
        float _1737 = _1734 * (_1701.z + (-0.5));
        float _1744 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1708.x + (-0.5));
        float _1746 = _1744 * (_1708.y + (-0.5));
        float _1747 = _1744 * (_1708.z + (-0.5));
        float _1754 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1755 = _1754 * (_1715.x + (-0.5));
        float _1756 = _1754 * (_1715.y + (-0.5));
        float _1757 = _1754 * (_1715.z + (-0.5));
        float _1764 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1765 = _1764 * (_1722.x + (-0.5));
        float _1766 = _1764 * (_1722.y + (-0.5));
        float _1767 = _1764 * (_1722.z + (-0.5));
        float _1768 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = _1735 * 0.5;
        float _1772 = _1745 * 0.5;
        float _1773 = _1755 * 0.5;
        float _1774 = dot(vec3(_1771, _1772, _1773), vec3(_1771, _1772, _1773));
        float _1779 = (_1774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1774);
        float _1787 = (dot(vec3(_1015, _1016, _1017), vec3(_1779 * _1771, _1779 * _1772, _1779 * _1773)) + 1.0) * 0.5;
        float _4381 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1796 = sqrt(((_1772 * _1772) + (_1771 * _1771)) + (_1773 * _1773)) / (_1768 + 9.9999997473787516355514526367188e-06);
        float _4392 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _1798 = _1797 * 2.0;
        float _1802 = (1.0 - _1797) / (_1797 + 1.0);
        float _4403 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _1812 = ((((1.0 - _1803) * (_1798 + 2.0)) * exp2(log2(isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_1798 + 1.0))) + _1803) * _1768;
        float _1813 = _1736 * 0.5;
        float _1814 = _1746 * 0.5;
        float _1815 = _1756 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_1015, _1016, _1017), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4414 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4425 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4436 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_1840 + 1.0))) + _1845) * _1769;
        float _1855 = _1737 * 0.5;
        float _1856 = _1747 * 0.5;
        float _1857 = _1757 * 0.5;
        float _1858 = dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857));
        float _1863 = (_1858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1858);
        float _1871 = (dot(vec3(_1015, _1016, _1017), vec3(_1863 * _1855, _1863 * _1856, _1863 * _1857)) + 1.0) * 0.5;
        float _4447 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4458 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1882 = _1881 * 2.0;
        float _1886 = (1.0 - _1881) / (_1881 + 1.0);
        float _4469 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1896 = ((((1.0 - _1887) * (_1882 + 2.0)) * exp2(log2(isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0))) * (_1882 + 1.0))) + _1887) * _1770;
        _1904 = _1737;
        _1905 = _1736;
        _1906 = _1735;
        _1907 = _1747;
        _1908 = _1746;
        _1909 = _1745;
        _1910 = _1757;
        _1911 = _1756;
        _1912 = _1755;
        _1913 = _1770;
        _1914 = _1769;
        _1915 = _1768;
        _1916 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0)));
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)));
    }
    else
    {
        _1904 = _1594;
        _1905 = _1594;
        _1906 = _1594;
        _1907 = _1594;
        _1908 = _1594;
        _1909 = _1594;
        _1910 = _1594;
        _1911 = _1594;
        _1912 = _1594;
        _1913 = _1594;
        _1914 = _1594;
        _1915 = _1594;
        _1916 = 0.0;
        _1917 = 0.0;
        _1918 = 0.0;
    }
    float _1928 = (cbModelParam._m0[1u].x * (_1916 - _1606)) + _1606;
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1607)) + _1607;
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1608)) + _1608;
    float _1951 = fma(_1930, cbSceneParam._m0[89u].z, fma(_1929, cbSceneParam._m0[89u].y, _1928 * cbSceneParam._m0[89u].x));
    float _1954 = fma(_1930, cbSceneParam._m0[90u].z, fma(_1929, cbSceneParam._m0[90u].y, _1928 * cbSceneParam._m0[90u].x));
    float _1957 = fma(_1930, cbSceneParam._m0[91u].z, fma(_1929, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1928));
    float _1972 = _1200 * 0.5;
    float _1973 = _1201 * 0.5;
    float _1974 = _1202 * 0.5;
    float _1975 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _1978 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _1981 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1904, _1907, _1910, _1913));
    float _2015;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1988 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1593, _1597, _1600, _1603));
        float _1992 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1595, _1598, _1601, _1604));
        float _1996 = dot(vec4(_1972, _1973, _1974, 1.0), vec4(_1596, _1599, _1602, _1605));
        float _2003 = dot(vec4(cbModelParam._m0[39u]), vec4(_1972, _1973, _1974, 1.0));
        _2015 = dot(vec3(isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2003) ? 0.0 : (isnan(0.0) ? _2003 : max(0.0, _2003))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2015 = 1.0;
    }
    float _2026;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2017 = dot(vec4(cbModelParam._m0[40u]), vec4(_1972, _1973, _1974, 1.0));
        _2026 = dot(vec3(isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)), isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2017) ? 0.0 : (isnan(0.0) ? _2017 : max(0.0, _2017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2026 = 1.0;
    }
    float _2030 = (_2026 * cbModelParam._m0[1u].x) + (_2015 * (1.0 - cbModelParam._m0[1u].x));
    float _2040 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1018);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2040 : min(cbModelParam._m0[25u].z, _2040));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2089 = fma(_1264, cbModelParam._m0[13u].z, fma(_1260, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1256)) + cbModelParam._m0[13u].w;
        float _2093 = fma(_1264, cbModelParam._m0[14u].z, fma(_1260, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1256)) + cbModelParam._m0[14u].w;
        float _2097 = fma(_1264, cbModelParam._m0[15u].z, fma(_1260, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1256)) + cbModelParam._m0[15u].w;
        float _2100 = fma(_1202, cbModelParam._m0[13u].z, fma(_1201, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1200));
        float _2103 = fma(_1202, cbModelParam._m0[14u].z, fma(_1201, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1200));
        float _2106 = fma(_1202, cbModelParam._m0[15u].z, fma(_1201, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1200));
        float _2134;
        if (_2100 > 0.0)
        {
            _2134 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2134 = frontier_phi_17_15_ladder;
        }
        float _2337;
        if (_2103 > 0.0)
        {
            _2337 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2337 = frontier_phi_26_22_ladder;
        }
        float _2591;
        if (_2106 > 0.0)
        {
            _2591 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2591 = frontier_phi_38_33_ladder;
        }
        float _2593 = isnan(_2337) ? _2134 : (isnan(_2134) ? _2337 : min(_2134, _2337));
        float _2594 = isnan(_2591) ? _2593 : (isnan(_2593) ? _2591 : min(_2593, _2591));
        float _2598 = (_2594 * _2100) + _2089;
        float _2599 = (_2594 * _2103) + _2093;
        float _2600 = (_2594 * _2106) + _2097;
        float _2601 = _2594 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2601;
        float _2605 = _2601 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 > _2605) || ((_2599 < _2603) || ((_2598 < _2603) || (_2598 > _2605))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2600, cbModelParam._m0[9u].z, fma(_2599, cbModelParam._m0[9u].y, _2598 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2600, cbModelParam._m0[10u].z, fma(_2599, cbModelParam._m0[10u].y, _2598 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2600, cbModelParam._m0[11u].z, fma(_2599, cbModelParam._m0[11u].y, _2598 * cbModelParam._m0[11u].x))), _2041);
            frontier_phi_16_38_ladder = _2728.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2728.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2728.x * cbModelParam._m0[1u].y;
        }
        _2122 = frontier_phi_16_38_ladder_2;
        _2124 = frontier_phi_16_38_ladder_1;
        _2126 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1200, _1201, _1202), _2041);
        _2122 = _2110.x * cbModelParam._m0[1u].y;
        _2124 = _2110.y * cbModelParam._m0[1u].y;
        _2126 = _2110.z * cbModelParam._m0[1u].y;
    }
    float _2130 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1018);
    float _2131 = isnan(_2130) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2130 : min(cbModelParam._m0[25u].w, _2130));
    float _2221;
    float _2223;
    float _2225;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2185 = fma(_1264, cbModelParam._m0[21u].z, fma(_1260, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1256)) + cbModelParam._m0[21u].w;
        float _2189 = fma(_1264, cbModelParam._m0[22u].z, fma(_1260, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1256)) + cbModelParam._m0[22u].w;
        float _2193 = fma(_1264, cbModelParam._m0[23u].z, fma(_1260, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1256)) + cbModelParam._m0[23u].w;
        float _2196 = fma(_1202, cbModelParam._m0[21u].z, fma(_1201, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1200));
        float _2199 = fma(_1202, cbModelParam._m0[22u].z, fma(_1201, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1200));
        float _2202 = fma(_1202, cbModelParam._m0[23u].z, fma(_1201, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1200));
        float _2342;
        if (_2196 > 0.0)
        {
            _2342 = abs((1.0 - _2185) / _2196);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2196 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2185 + 1.0) / _2196);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2342 = frontier_phi_28_24_ladder;
        }
        float _2618;
        if (_2199 > 0.0)
        {
            _2618 = abs((1.0 - _2189) / _2199);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2199 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2189 + 1.0) / _2199);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2618 = frontier_phi_40_35_ladder;
        }
        float _2831;
        if (_2202 > 0.0)
        {
            _2831 = abs((1.0 - _2193) / _2202);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2202 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2193 + 1.0) / _2202);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2831 = frontier_phi_49_46_ladder;
        }
        float _2833 = isnan(_2618) ? _2342 : (isnan(_2342) ? _2618 : min(_2342, _2618));
        float _2834 = isnan(_2831) ? _2833 : (isnan(_2833) ? _2831 : min(_2833, _2831));
        float _2838 = (_2834 * _2196) + _2185;
        float _2839 = (_2834 * _2199) + _2189;
        float _2840 = (_2834 * _2202) + _2193;
        float _2841 = _2834 * 9.9999997473787516355514526367188e-05;
        float _2842 = (-1.0) - _2841;
        float _2844 = _2841 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2840 > _2844) || ((_2840 < _2842) || ((_2839 > _2844) || ((_2839 < _2842) || ((_2838 < _2842) || (_2838 > _2844))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2840, cbModelParam._m0[17u].z, fma(_2839, cbModelParam._m0[17u].y, _2838 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2840, cbModelParam._m0[18u].z, fma(_2839, cbModelParam._m0[18u].y, _2838 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2840, cbModelParam._m0[19u].z, fma(_2839, cbModelParam._m0[19u].y, _2838 * cbModelParam._m0[19u].x))), _2131);
            frontier_phi_25_49_ladder = _3039.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3039.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3039.x * cbModelParam._m0[1u].z;
        }
        _2221 = frontier_phi_25_49_ladder_2;
        _2223 = frontier_phi_25_49_ladder_1;
        _2225 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2205 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1200, _1201, _1202), _2131);
        _2221 = _2205.x * cbModelParam._m0[1u].z;
        _2223 = _2205.y * cbModelParam._m0[1u].z;
        _2225 = _2205.z * cbModelParam._m0[1u].z;
    }
    float _2238 = (((_1227 * _1176) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2221 - _2122)) + _2122);
    float _2240 = (((_1227 * _1178) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2223 - _2124)) + _2124);
    float _2242 = (((_1227 * _1179) + _1228) * _1192) * ((cbModelParam._m0[1u].w * (_2225 - _2126)) + _2126);
    float _2245 = fma(_2242, cbSceneParam._m0[89u].z, fma(_2240, cbSceneParam._m0[89u].y, _2238 * cbSceneParam._m0[89u].x));
    float _2248 = fma(_2242, cbSceneParam._m0[90u].z, fma(_2240, cbSceneParam._m0[90u].y, _2238 * cbSceneParam._m0[90u].x));
    float _2251 = fma(_2242, cbSceneParam._m0[91u].z, fma(_2240, cbSceneParam._m0[91u].y, _2238 * cbSceneParam._m0[91u].x));
    uvec4 _2261 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2263 = _2261.x * 14u;
    uint _2264 = _2263 + 13u;
    float _2271 = _1192 + (-1.0);
    float _2276 = (cbLight._m0[_2264].x * _2271) + 1.0;
    float _2277 = (cbLight._m0[_2264].y * _2271) + 1.0;
    float _2278 = (cbLight._m0[_2264].z * _2271) + 1.0;
    float _2279 = (cbLight._m0[_2264].w * _2271) + 1.0;
    uint _2280 = _2263 + 5u;
    float _2286 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
    uint _2290 = _2263 + 4u;
    float _2296 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2300 = _2263 | 1u;
    float _2311 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_1015, _1016, _1017));
    float _2314 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_1015, _1016, _1017));
    float _4605 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
    float _4616 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2319 = (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * 0.3183098733425140380859375;
    float _2321 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * 0.3183098733425140380859375;
    float _2328 = ((cbLight._m0[_2280].x * _2286) * _2321) + ((cbLight._m0[_2290].x * _2296) * _2319);
    float _2329 = ((_2286 * cbLight._m0[_2280].y) * _2321) + ((_2296 * cbLight._m0[_2290].y) * _2319);
    float _2330 = ((_2286 * cbLight._m0[_2280].z) * _2321) + ((_2296 * cbLight._m0[_2290].z) * _2319);
    uvec4 _2334 = floatBitsToUint(cbLight._m0[_2263 + 12u]);
    bool _2336 = _2334.x == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2336)
    {
        _2347 = _2328;
        _2349 = _2329;
        _2351 = _2330;
    }
    else
    {
        uint _2355 = _2263 + 6u;
        float _2371 = (dot(vec3(cbLight._m0[_2263 + 2u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2372 = _2371 * _2371;
        float _4627 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2373 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2374 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2347 = (((cbLight._m0[_2355].x * 0.3183098733425140380859375) * _2373) * _2374) + _2328;
        _2349 = (((cbLight._m0[_2355].y * 0.3183098733425140380859375) * _2373) * _2374) + _2329;
        _2351 = (((cbLight._m0[_2355].z * 0.3183098733425140380859375) * _2373) * _2374) + _2330;
    }
    bool _2354 = _2334.y == 0u;
    float _2392;
    float _2394;
    float _2396;
    if (_2354)
    {
        _2392 = _2347;
        _2394 = _2349;
        _2396 = _2351;
    }
    else
    {
        uint _2562 = _2263 + 7u;
        float _2578 = (dot(vec3(cbLight._m0[_2263 + 3u].xyz), vec3(_1015, _1016, _1017)) * 0.5) + 0.5;
        float _2579 = _2578 * _2578;
        float _4643 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2580 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2581 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2392 = (((cbLight._m0[_2562].x * 0.3183098733425140380859375) * _2580) * _2581) + _2347;
        _2394 = (((cbLight._m0[_2562].y * 0.3183098733425140380859375) * _2580) * _2581) + _2349;
        _2396 = (((cbLight._m0[_2562].z * 0.3183098733425140380859375) * _2580) * _2581) + _2351;
    }
    uint _2399 = _2263 + 8u;
    float _2412 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _1018) * 0.949999988079071044921875);
    float _2413 = _2412 * _2412;
    float _2414 = cbLight._m0[_2263].x + _1094;
    float _2415 = cbLight._m0[_2263].y + _1095;
    float _2416 = cbLight._m0[_2263].z + _1096;
    float _2420 = inversesqrt(dot(vec3(_2414, _2415, _2416), vec3(_2414, _2415, _2416)));
    float _2421 = _2420 * _2414;
    float _2422 = _2420 * _2415;
    float _2423 = _2420 * _2416;
    float _2424 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2263].xyz));
    float _4659 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
    float _4670 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _2428 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
    float _2429 = dot(vec3(_1015, _1016, _1017), vec3(_2421, _2422, _2423));
    float _4681 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
    float _2433 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2421, _2422, _2423));
    float _4692 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2437 = _2413 * _2413;
    float _2441 = ((_2432 * _2432) * (_2437 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
    float _2450 = 0.959999978542327880859375 - _1173;
    float _2452 = 0.959999978542327880859375 - _1174;
    float _2453 = 0.959999978542327880859375 - _1175;
    float _2460 = 1.0 - _2413;
    float _2471 = (0.5 / (((_2428 * ((_2427 * _2460) + _2413)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2460) + _2413) * _2427))) * _2427;
    float _4703 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2473 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2437 / ((_2441 * _2441) * 3.141590118408203125));
    uint _2484 = _2263 + 9u;
    float _2495 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2300].w)) * _1018) * 0.949999988079071044921875);
    float _2496 = _2495 * _2495;
    float _2497 = cbLight._m0[_2300].x + _1094;
    float _2498 = cbLight._m0[_2300].y + _1095;
    float _2499 = cbLight._m0[_2300].z + _1096;
    float _2503 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
    float _2504 = _2503 * _2497;
    float _2505 = _2503 * _2498;
    float _2506 = _2503 * _2499;
    float _2507 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2300].xyz));
    float _4714 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _2511 = dot(vec3(_1015, _1016, _1017), vec3(_2504, _2505, _2506));
    float _4725 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2515 = dot(vec3(cbLight._m0[_2300].xyz), vec3(_2504, _2505, _2506));
    float _4736 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2519 = _2496 * _2496;
    float _2523 = ((_2514 * _2514) * (_2519 + (-1.0))) + 1.0;
    float _2530 = exp2(log2(1.0 - (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) * 5.0);
    float _2537 = 1.0 - _2496;
    float _2547 = (0.5 / (((_2428 * ((_2510 * _2537) + _2496)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2537) + _2496) * _2510))) * _2510;
    float _4747 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
    float _2549 = (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * (_2519 / ((_2523 * _2523) * 3.141590118408203125));
    float _2559 = (((((_2530 * _2450) + _1176) * cbLight._m0[_2484].x) * _2549) * _2286) + (((((_2449 * _2450) + _1176) * cbLight._m0[_2399].x) * _2473) * _2296);
    float _2560 = (((((_2530 * _2452) + _1178) * cbLight._m0[_2484].y) * _2549) * _2286) + (((((_2449 * _2452) + _1178) * cbLight._m0[_2399].y) * _2473) * _2296);
    float _2561 = (((((_2530 * _2453) + _1179) * cbLight._m0[_2484].z) * _2549) * _2286) + (((((_2449 * _2453) + _1179) * cbLight._m0[_2399].z) * _2473) * _2296);
    float _2623;
    float _2625;
    float _2627;
    if (_2336)
    {
        _2623 = _2559;
        _2625 = _2560;
        _2627 = _2561;
    }
    else
    {
        uint _2629 = _2263 + 2u;
        uint _2633 = _2263 + 10u;
        float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2629].w)) * _1018) * 0.949999988079071044921875);
        float _2648 = _2647 * _2647;
        float _2649 = cbLight._m0[_2629].x + _1094;
        float _2650 = cbLight._m0[_2629].y + _1095;
        float _2651 = cbLight._m0[_2629].z + _1096;
        float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
        float _2656 = _2655 * _2649;
        float _2657 = _2655 * _2650;
        float _2658 = _2655 * _2651;
        float _2659 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2629].xyz));
        float _4758 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2663 = dot(vec3(_1015, _1016, _1017), vec3(_2656, _2657, _2658));
        float _4769 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2666 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2667 = dot(vec3(cbLight._m0[_2629].xyz), vec3(_2656, _2657, _2658));
        float _4780 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2671 = _2648 * _2648;
        float _2675 = ((_2666 * _2666) * (_2671 + (-1.0))) + 1.0;
        float _2682 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
        float _2689 = 1.0 - _2648;
        float _2699 = (0.5 / (((_2428 * ((_2662 * _2689) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2689) + _2648) * _2662))) * _2662;
        float _4791 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
        float _2701 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2671 / ((_2675 * _2675) * 3.141590118408203125));
        float _2702 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2623 = (((((_2682 * _2450) + _1176) * cbLight._m0[_2633].x) * _2701) * _2702) + _2559;
        _2625 = (((((_2682 * _2452) + _1178) * cbLight._m0[_2633].y) * _2701) * _2702) + _2560;
        _2627 = (((((_2682 * _2453) + _1179) * cbLight._m0[_2633].z) * _2701) * _2702) + _2561;
    }
    float _2737;
    float _2739;
    float _2741;
    if (_2354)
    {
        _2737 = _2623;
        _2739 = _2625;
        _2741 = _2627;
    }
    else
    {
        uint _2748 = _2263 + 3u;
        uint _2752 = _2263 + 11u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _1018) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _1094;
        float _2769 = cbLight._m0[_2748].y + _1095;
        float _2770 = cbLight._m0[_2748].z + _1096;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_1015, _1016, _1017), vec3(cbLight._m0[_2748].xyz));
        float _4807 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2782 = dot(vec3(_1015, _1016, _1017), vec3(_2775, _2776, _2777));
        float _4818 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4829 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) * 5.0);
        float _2808 = 1.0 - _2767;
        float _2818 = (0.5 / (((_2428 * ((_2781 * _2808) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2428 * _2808) + _2767) * _2781))) * _2781;
        float _4840 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2279 : (isnan(_2279) ? 1.0 : min(_2279, 1.0));
        _2737 = (((((_2801 * _2450) + _1176) * cbLight._m0[_2752].x) * _2820) * _2821) + _2623;
        _2739 = (((((_2801 * _2452) + _1178) * cbLight._m0[_2752].y) * _2820) * _2821) + _2625;
        _2741 = (((((_2801 * _2453) + _1179) * cbLight._m0[_2752].z) * _2820) * _2821) + _2627;
    }
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_2261.y == 0u)
    {
        float _2896 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2897 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2896;
        float _2898 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2896;
        float _2899 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2896;
        uvec4 _2911 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2912 = _2911.x;
        uint _2923 = uint((float(_2911.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1115) / _2912))) + floor(float(uint(cbSceneParam._m0[85u].x * _1114) / _2912)));
        float _2933 = (log2(_2899 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2934 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        uint _2937 = uint(isnan(14.0) ? _2934 : (isnan(_2934) ? 14.0 : min(_2934, 14.0)));
        uvec4 _2942 = texelFetch(g_lightClusterGridBuffer, int(((_2937 << 2u) + (_2923 << 6u)) >> 2u));
        uint _2943 = _2942.x;
        uint _2944 = _2911.z;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        if (((((1u << ((_2944 >> 4u) & 15u)) + 4294967295u) & _2943) == 0u) || ((_2944 & 240u) == 0u))
        {
            _3044 = 0.0;
            _3046 = 0.0;
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
        }
        else
        {
            float _3045;
            float _3047;
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            uint _3202 = 0u;
            uint _3211;
            bool _3212;
            for (;;)
            {
                _3211 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3202 << 2u)) >> 2u)).x;
                _3212 = _3211 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3212)
                {
                    frontier_phi_66_pred = _3196;
                    frontier_phi_66_pred_1 = _3201;
                    frontier_phi_66_pred_2 = _3200;
                    frontier_phi_66_pred_3 = _3199;
                    frontier_phi_66_pred_4 = _3198;
                    frontier_phi_66_pred_5 = _3197;
                }
                else
                {
                    float _3341;
                    float _3342;
                    float _3343;
                    float _3344;
                    float _3345;
                    float _3346;
                    uint _3347;
                    _3341 = _3196;
                    _3342 = _3197;
                    _3343 = _3198;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3211;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    for (;;)
                    {
                        uint _3351 = uint(findLSB(_3347)) + (_3202 << 5u);
                        uint _3348 = (_3347 + 4294967295u) & _3347;
                        uint _3353 = _3351 * 48u;
                        vec4 _3367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 3u)).x));
                        uint _3373 = (_3351 * 48u) + 4u;
                        vec4 _3386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3373)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3373 + 3u)).x));
                        uint _3392 = (_3351 * 48u) + 8u;
                        vec3 _3403 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3392)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3392 + 2u)).x));
                        float _3407 = _3367.x - _2897;
                        float _3408 = _3367.y - _2898;
                        float _3409 = _3367.z - _2899;
                        float _3410 = dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409));
                        float _3413 = inversesqrt(_3410);
                        float _3414 = _3413 * _3407;
                        float _3415 = _3413 * _3408;
                        float _3416 = _3413 * _3409;
                        float _3417 = dot(vec3(_1133, _1136, _1139), vec3(_3414, _3415, _3416));
                        float _3422 = 1.0 - (_3410 * _3367.w);
                        float _4866 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                        float _3423 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3424 = sqrt(_3410) * _3386.w;
                        float _3427 = 1.39999997615814208984375 / (_3424 + 1.39999997615814208984375);
                        float _3428 = _3427 * _3427;
                        float _3431 = ((1.0 - _3428) * _3417) + _3428;
                        float _3434 = _3424 * _3424;
                        float _3438 = ((isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0))) * _3423) / ((_3434 * 0.699999988079071044921875) + 1.0);
                        float _3442 = (-0.0) - _2897;
                        float _3443 = (-0.0) - _2898;
                        float _3444 = (-0.0) - _2899;
                        float _3448 = inversesqrt(dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444)));
                        float _3449 = _3448 * _3442;
                        float _3450 = _3448 * _3443;
                        float _3451 = _3448 * _3444;
                        float _3459 = exp2(log2(1.0 / ((_3434 * 3.5) + 5.0)) * 0.25);
                        float _3460 = 1.0 - _1208;
                        float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                        float _3468 = _3467 * _3467;
                        float _3469 = _3468 * _3468;
                        float _3470 = _3449 + _3414;
                        float _3471 = _3450 + _3415;
                        float _3472 = _3451 + _3416;
                        float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                        float _3480 = dot(vec3(_1133, _1136, _1139), vec3(_3449, _3450, _3451));
                        float _4882 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                        float _3483 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                        float _3484 = dot(vec3(_1133, _1136, _1139), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                        float _4893 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3487 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                        float _3492 = _3427 * _3468;
                        float _3493 = _3492 * _3492;
                        float _3496 = ((1.0 - _3493) * _3417) + _3493;
                        float _4904 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                        float _3497 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                        float _3498 = 1.0 - _3468;
                        float _3508 = (0.5 / (((_3497 * ((_3483 * _3498) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3497 * _3498) + _3468) * _3483))) * _3497;
                        float _4915 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                        float _3519 = (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0)))) / ((_3491 * _3491) * ((_3434 * 2.1991131305694580078125) + 3.141590118408203125))) * _3423;
                        _3271 = (_3438 * _3386.x) + _3344;
                        _3272 = (_3438 * _3386.y) + _3345;
                        _3273 = (_3438 * _3386.z) + _3346;
                        _3268 = (_3519 * _3403.x) + _3341;
                        _3269 = (_3519 * _3403.y) + _3342;
                        _3270 = (_3519 * _3403.z) + _3343;
                        if (_3348 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3341 = _3268;
                            _3342 = _3269;
                            _3343 = _3270;
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3348;
                        }
                    }
                    frontier_phi_66_pred = _3268;
                    frontier_phi_66_pred_1 = _3273;
                    frontier_phi_66_pred_2 = _3272;
                    frontier_phi_66_pred_3 = _3271;
                    frontier_phi_66_pred_4 = _3270;
                    frontier_phi_66_pred_5 = _3269;
                }
                _3045 = frontier_phi_66_pred;
                _3055 = frontier_phi_66_pred_1;
                _3053 = frontier_phi_66_pred_2;
                _3051 = frontier_phi_66_pred_3;
                _3049 = frontier_phi_66_pred_4;
                _3047 = frontier_phi_66_pred_5;
                uint _3203 = _3202 + 1u;
                if (_3203 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3196 = _3045;
                    _3197 = _3047;
                    _3198 = _3049;
                    _3199 = _3051;
                    _3200 = _3053;
                    _3201 = _3055;
                    _3202 = _3203;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3044 = _3045;
            _3046 = _3047;
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
        }
        uvec4 _3058 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3059 = _3058.z;
        uint _3061 = (_3059 >> 8u) & 15u;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        if (((4294967295u << _3061) & _2943) == 0u)
        {
            _3164 = _3044;
            _3166 = _3046;
            _3168 = _3048;
            _3170 = _3050;
            _3172 = _3052;
            _3174 = _3054;
        }
        else
        {
            float _3189 = inversesqrt(dot(vec3(_2897, _2898, _2899), vec3(_2897, _2898, _2899)));
            float _3190 = _3189 * _2897;
            float _3191 = _3189 * _2898;
            float _3192 = _3189 * _2899;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3061 < ((_3059 >> 12u) & 15u))
            {
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3175;
                float _3324 = _3044;
                float _3325 = _3046;
                float _3326 = _3048;
                float _3327 = _3050;
                float _3328 = _3052;
                float _3329 = _3054;
                uint _3330 = _3061;
                uint _3339;
                bool _3340;
                for (;;)
                {
                    _3339 = texelFetch(g_lightClassification, int((((_2937 << 5u) + (_2923 << 9u)) + (_3330 << 2u)) >> 2u)).x;
                    _3340 = _3339 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3340)
                    {
                        frontier_phi_77_pred = _3329;
                        frontier_phi_77_pred_1 = _3328;
                        frontier_phi_77_pred_2 = _3327;
                        frontier_phi_77_pred_3 = _3326;
                        frontier_phi_77_pred_4 = _3325;
                        frontier_phi_77_pred_5 = _3324;
                    }
                    else
                    {
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3546 = _3324;
                        float _3547 = _3325;
                        float _3548 = _3326;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        uint _3552 = _3339;
                        uint _3553;
                        vec4 _3578;
                        float _3579;
                        vec4 _3594;
                        vec3 _3606;
                        vec4 _3621;
                        vec4 _3636;
                        float _3682;
                        bool _3683;
                        for (;;)
                        {
                            uint _3563 = ((_3330 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3552));
                            _3553 = (_3552 + 4294967295u) & _3552;
                            uint _3565 = _3563 * 40u;
                            _3578 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3565)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3565 + 3u)).x));
                            _3579 = _3578.w;
                            uint _3581 = (_3563 * 40u) + 4u;
                            _3594 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3581)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3581 + 3u)).x));
                            uint _3596 = (_3563 * 40u) + 8u;
                            _3606 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x));
                            uint _3608 = (_3563 * 40u) + 16u;
                            _3621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 3u)).x));
                            uint _3623 = (_3563 * 40u) + 20u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3563 * 40u) + 24u;
                            vec4 _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3657 = (_3563 * 40u) + 28u;
                            vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            _3682 = fma(_2899, _3670.z, fma(_2898, _3670.y, _3670.x * _2897)) + _3670.w;
                            _3683 = !((fma(_2899, _3651.z, fma(_2898, _3651.y, _3651.x * _2897)) + _3651.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3683)
                            {
                                float _3710 = _3578.x - _2897;
                                float _3711 = _3578.y - _2898;
                                float _3712 = _3578.z - _2899;
                                float _3713 = dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712));
                                float _3716 = inversesqrt(_3713);
                                float _3717 = _3716 * _3710;
                                float _3718 = _3716 * _3711;
                                float _3719 = _3716 * _3712;
                                float _3723 = 1.0 - (_3713 / (_3579 * _3579));
                                float _4926 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3728 = sqrt(_3713) * _3594.w;
                                float _3730 = 1.39999997615814208984375 / (_3728 + 1.39999997615814208984375);
                                float _3731 = _3730 * _3730;
                                float _3734 = ((1.0 - _3731) * dot(vec3(_3717, _3718, _3719), vec3(_1133, _1136, _1139))) + _3731;
                                float _3737 = _3728 * _3728;
                                float _3741 = (fma(_2899, _3621.z, fma(_2898, _3621.y, _3621.x * _2897)) + _3621.w) / _3682;
                                float _3742 = (fma(_2899, _3636.z, fma(_2898, _3636.y, _3636.x * _2897)) + _3636.w) / _3682;
                                float _3746 = 1.0 - dot(vec2(_3741, _3742), vec2(_3741, _3742));
                                float _4942 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                                float _3748 = _3747 * (((isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0))) * _3724) / ((_3737 * 0.699999988079071044921875) + 1.0));
                                float _3760 = exp2(log2(1.0 / ((_3737 * 3.5) + 5.0)) * 0.25);
                                float _3761 = 1.0 - _1208;
                                float _3768 = sqrt(1.0 - ((1.0 - (_3761 * _3761)) * (1.0 - (_3760 * _3760))));
                                float _3769 = _3768 * _3768;
                                float _3770 = _3769 * _3769;
                                float _3771 = _3717 - _3190;
                                float _3772 = _3718 - _3191;
                                float _3773 = _3719 - _3192;
                                float _3777 = inversesqrt(dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773)));
                                float _3781 = dot(vec3(_1133, _1136, _1139), vec3((-0.0) - _3190, (-0.0) - _3191, (-0.0) - _3192));
                                float _4953 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3785 = dot(vec3(_1133, _1136, _1139), vec3(_3777 * _3771, _3777 * _3772, _3777 * _3773));
                                float _4964 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3788 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                                float _3792 = ((_3788 * _3788) * (_3770 + (-1.0))) + 1.0;
                                float _3793 = _3730 * _3769;
                                float _3794 = _3793 * _3793;
                                float _3800 = ((1.0 - _3794) * dot(vec3(_1133, _1136, _1139), vec3(_3717, _3718, _3719))) + _3794;
                                float _4975 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                                float _3802 = 1.0 - _3769;
                                float _3812 = (0.5 / (((_3801 * ((_3784 * _3802) + _3769)) + 9.9999999392252902907785028219223e-09) + (((_3801 * _3802) + _3769) * _3784))) * _3801;
                                float _4986 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3822 = (_3747 * _3724) * (((_3770 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3792 * _3792) * ((_3737 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3748 * _3594.y;
                                frontier_phi_83_pred_1 = _3748 * _3594.x;
                                frontier_phi_83_pred_2 = _3822 * _3606.z;
                                frontier_phi_83_pred_3 = _3822 * _3606.y;
                                frontier_phi_83_pred_4 = _3822 * _3606.x;
                                frontier_phi_83_pred_5 = _3748 * _3594.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3830 = frontier_phi_83_pred;
                            _3829 = frontier_phi_83_pred_1;
                            _3828 = frontier_phi_83_pred_2;
                            _3827 = frontier_phi_83_pred_3;
                            _3826 = frontier_phi_83_pred_4;
                            _3831 = frontier_phi_83_pred_5;
                            _3536 = _3829 + _3549;
                            _3537 = _3830 + _3550;
                            _3538 = _3831 + _3551;
                            _3533 = _3826 + _3546;
                            _3534 = _3827 + _3547;
                            _3535 = _3828 + _3548;
                            if (_3553 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3553;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3538;
                        frontier_phi_77_pred_1 = _3537;
                        frontier_phi_77_pred_2 = _3536;
                        frontier_phi_77_pred_3 = _3535;
                        frontier_phi_77_pred_4 = _3534;
                        frontier_phi_77_pred_5 = _3533;
                    }
                    _3175 = frontier_phi_77_pred;
                    _3173 = frontier_phi_77_pred_1;
                    _3171 = frontier_phi_77_pred_2;
                    _3169 = frontier_phi_77_pred_3;
                    _3167 = frontier_phi_77_pred_4;
                    _3165 = frontier_phi_77_pred_5;
                    uint _3331 = _3330 + 1u;
                    if (_3331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3324 = _3165;
                        _3325 = _3167;
                        _3326 = _3169;
                        _3327 = _3171;
                        _3328 = _3173;
                        _3329 = _3175;
                        _3330 = _3331;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3169;
                frontier_phi_58_59_ladder_1 = _3175;
                frontier_phi_58_59_ladder_2 = _3173;
                frontier_phi_58_59_ladder_3 = _3171;
                frontier_phi_58_59_ladder_4 = _3167;
                frontier_phi_58_59_ladder_5 = _3165;
            }
            else
            {
                frontier_phi_58_59_ladder = _3048;
                frontier_phi_58_59_ladder_1 = _3054;
                frontier_phi_58_59_ladder_2 = _3052;
                frontier_phi_58_59_ladder_3 = _3050;
                frontier_phi_58_59_ladder_4 = _3046;
                frontier_phi_58_59_ladder_5 = _3044;
            }
            _3164 = frontier_phi_58_59_ladder_5;
            _3166 = frontier_phi_58_59_ladder_4;
            _3168 = frontier_phi_58_59_ladder;
            _3170 = frontier_phi_58_59_ladder_3;
            _3172 = frontier_phi_58_59_ladder_2;
            _3174 = frontier_phi_58_59_ladder_1;
        }
        float _3179 = isnan(1.0) ? _1192 : (isnan(_1192) ? 1.0 : min(_1192, 1.0));
        _2956 = (_3179 * _3170) + _2392;
        _2958 = (_3179 * _3172) + _2394;
        _2960 = (_3179 * _3174) + _2396;
        _2962 = ((_3164 * _1176) * _3179) + _2737;
        _2964 = ((_3166 * _1178) * _3179) + _2739;
        _2966 = ((_3168 * _1179) * _3179) + _2741;
    }
    else
    {
        _2956 = _2392;
        _2958 = _2394;
        _2960 = _2396;
        _2962 = _2737;
        _2964 = _2739;
        _2966 = _2741;
    }
    float _5002 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _5013 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _5024 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _2983 = ((isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2956 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1192))) + ((_2962 + ((isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    float _2984 = ((isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0))) * (_2958 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1192))) + ((_2964 + ((isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    float _2985 = ((isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2960 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1192))) + ((_2966 + ((isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0))) * _2030)) * cbPerFrame._m0[3u].x);
    uint _2986 = _291 + 6u;
    float _2994 = _1114 / cbSceneParam._m0[86u].x;
    float _2995 = _1115 / cbSceneParam._m0[86u].y;
    vec4 _3009 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, (log2((isnan(cbSceneParam._m0[77u].w) ? _1037 : (isnan(_1037) ? cbSceneParam._m0[77u].w : min(_1037, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3011 = _3009.x;
    float _3012 = _3009.y;
    float _3013 = _3009.z;
    float _3014 = _3009.w;
    float _3106;
    float _3108;
    float _3110;
    float _3112;
    if (_1037 > cbSceneParam._m0[78u].w)
    {
        float _3069 = isnan(_1037) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1037 : min(cbSceneParam._m0[80u].w, _1037));
        float _3070 = _3069 / _1037;
        float _3081 = _3070 * _1087;
        float _3082 = _1088 * _3070;
        float _3083 = (-0.0) - _3082;
        float _3084 = _3070 * _1089;
        float _3086 = (cbSceneParam._m0[77u].w * _3083) / _3069;
        float _3087 = _3086 + cbSceneParam._m0[79u].w;
        float _3088 = cbSceneParam._m0[79u].w - _3082;
        float _3094 = sqrt(((_3081 * _3081) + (_3082 * _3082)) + (_3084 * _3084));
        float _3097 = (1.0 - (cbSceneParam._m0[77u].w / _3069)) * _3094;
        float _3102 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3104 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3281;
        if (abs((_3083 - _3086) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3281 = ((((_3087 > 0.0) ? exp2(_3102 * _3087) : (2.0 - exp2(_3104 * _3087))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3097;
        }
        else
        {
            float _3225 = 1.0 / cbSceneParam._m0[80u].x;
            float _3226 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : max(_3087, _3088));
            float _3227 = isnan(_3088) ? _3087 : (isnan(_3087) ? _3088 : min(_3087, _3088));
            float _3236 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : min(_3226, 0.0));
            float _3237 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : min(_3227, 0.0));
            _3281 = ((abs(_3094 / _3083) * cbSceneParam._m0[80u].y) * ((((_3236 - _3237) * 2.0) - ((exp2(_3102 * (isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0)))) - exp2(_3102 * (isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))))) * _3225)) - ((exp2(_3104 * _3236) - exp2(_3104 * _3237)) * _3225))) + (_3097 * cbSceneParam._m0[80u].z);
        }
        vec4 _3283 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2994, _2995, 1.0), 0.0);
        float _3292 = exp2((_3281 * (-1.44269502162933349609375)) * (1.0 - _3283.w));
        float _3293 = log2(_3292);
        float _3309 = log2(_3014);
        _3106 = (exp2(_3309 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].x)) * _3283.x) / cbSceneParam._m0[78u].x)) + _3011;
        _3108 = (exp2(_3309 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].y)) * _3283.y) / cbSceneParam._m0[78u].y)) + _3012;
        _3110 = (exp2(_3309 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].z)) * _3283.z) / cbSceneParam._m0[78u].z)) + _3013;
        _3112 = _3292 * _3014;
    }
    else
    {
        _3106 = _3011;
        _3108 = _3012;
        _3110 = _3013;
        _3112 = _3014;
    }
    bool _3319;
    vec4 _3122;
    vec4 _3144;
    float _3146;
    float _3150;
    float _3151;
    float _3152;
    float _3153;
    bool _3163;
    for (;;)
    {
        _3122 = cbMatDynParam._m0[0u];
        float _3124 = roundEven(_3122.y);
        bool _3125 = _3124 == 3.0;
        float _3126 = log2(_3112);
        float _3133 = exp2(_3126 * cbSceneParam._m0[78u].x) * _2983;
        float _3134 = exp2(_3126 * cbSceneParam._m0[78u].y) * _2984;
        float _3135 = exp2(_3126 * cbSceneParam._m0[78u].z) * _2985;
        float _3142 = _1103 + (-0.5);
        _3144 = cbMtdParam._m0[1u];
        _3146 = _3144.y * _3142;
        float _3149 = (_3124 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3150 = _3149 * (_3125 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3106)));
        _3151 = _3149 * (_3125 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3108)));
        _3152 = _3149 * (_3125 ? _3135 : (_3135 + (cbSceneParam._m0[72u].w * _3110)));
        _3153 = _3142 * 0.999000012874603271484375;
        _3163 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3163)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3153) < 0.5)
            {
                _3319 = true;
                break;
            }
        }
        uint _3260 = _1152 + uint(_3122.w);
        if ((cbInstanceData._m0[_3260].w < 1.0) && ((cbInstanceData._m0[_3260].w + _3153) < 0.5))
        {
            _3319 = true;
            break;
        }
        if ((_3146 + 1.0) < _3144.x)
        {
            _3319 = true;
            break;
        }
        _3319 = false;
        break;
    }
    float _3524;
    if (_3319)
    {
        discard_state = true;
        _3524 = 0.0;
    }
    else
    {
        _3524 = cbInstanceData._m0[_2986].w;
    }
    SV_Target.x = _3150;
    SV_Target.y = _3151;
    SV_Target.z = _3152;
    SV_Target.w = _3524;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2986].w;
    discard_exit();
}


