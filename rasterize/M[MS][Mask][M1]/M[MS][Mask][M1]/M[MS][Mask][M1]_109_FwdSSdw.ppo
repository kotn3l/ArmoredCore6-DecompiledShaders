#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1579;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3928 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3939 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _3950 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _471 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _488 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_459 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3961 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _489 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _496 = (_489 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _497 = (_489 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _498 = (_489 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _515 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _535 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _537 = _535.x;
    float _547 = dot(vec4(_537, _535.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _561 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_537 - _547) * cbMtdParam._m0[23u].w) + _547) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3972 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _569 = (_562 * ((_515.x * cbMtdParam._m0[13u].x) - _496)) + _496;
    float _570 = (_562 * ((_515.y * cbMtdParam._m0[13u].y) - _497)) + _497;
    float _571 = (_562 * ((_515.z * cbMtdParam._m0[13u].z) - _498)) + _498;
    vec4 _590 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _314) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _315) + cbTextureTilingScale._m0[24u].w));
    vec4 _607 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _609 = _607.x;
    float _619 = dot(vec4(_609, _607.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _631 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _422.z) * 2.0) - ((((_609 - _619) * cbMtdParam._m0[23u].w) + _619) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3983 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _632 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _642 = (_351.x * cbMtdParam._m0[9u].x) * ((_632 * ((_590.x * cbMtdParam._m0[14u].x) - _569)) + _569);
    float _643 = (_351.y * cbMtdParam._m0[9u].y) * ((_632 * ((_590.y * cbMtdParam._m0[14u].y) - _570)) + _570);
    float _644 = (_351.z * cbMtdParam._m0[9u].z) * ((_632 * ((_590.z * cbMtdParam._m0[14u].z) - _571)) + _571);
    float _648 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _642;
    float _651 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _643;
    float _654 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _644;
    float _662 = (((_642 - _648) * (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) + _648) * 4.55000019073486328125;
    float _664 = (((_643 - _651) * (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) + _651) * 4.55000019073486328125;
    float _666 = (((_644 - _654) * (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) + _654) * 4.55000019073486328125;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _489) + _720;
    float _730 = ((_701.y - _721) * _489) + _721;
    float _731 = ((_701.z - _722) * _489) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _562) + _729;
    float _755 = ((_743.y - _730) * _562) + _730;
    float _756 = ((_743.z - _731) * _562) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _314) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _315) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _632) + _756;
    float _784 = ((((_768.x - _754) * _632) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _632) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3994 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))));
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _823 = (_784 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_678.x * 2.0) + (-1.0)))) + (((_811.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_785 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_678.y * 2.0) + (-1.0)))) + (((_811.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _838 = _836.x;
    float _839 = 1.0 - _838;
    float _867 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_838 - _839) * cbMtdParam._m0[24u].w) + _839) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4005 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _868 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _876 = ((((cbMtdParam._m0[10u].x - _662) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _868) + _662;
    float _877 = ((((cbMtdParam._m0[10u].y - _664) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _868) + _664;
    float _878 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _868) + _666;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _906 = _904.x;
    float _923 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _906) * _489) + _906;
    float _941 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _923) * _562) + _923;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _314) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _315) + cbTextureTilingScale._m0[10u].w)).x - _941) * _632) + _941;
    float _962 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _958) * cbMtdParam._m0[19u].z) + _958;
    float _964 = _962 - (_962 * _868);
    float _969 = (((_678.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _973 = ((_811.z - _969) * cbMtdParam._m0[19u].w) + _969;
    float _977 = ((cbMtdParam._m0[23u].x - _973) * _868) + _973;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1004 = (_998.x * 2.0) + (-1.0);
    float _1005 = (_998.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _4016 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1022 = (_868 * (((cbMtdParam._m0[22u].z * _823) - _823) + _1004)) + _823;
    float _1023 = (_868 * (((cbMtdParam._m0[22u].z * _824) - _824) + _1005)) + _824;
    float _1024 = (_868 * (sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) - _791)) + _791;
    float _1026 = cbMtdParam._m0[22u].x + _811.w;
    float _1029 = fma(_1024, _263 * NORMAL.x, fma(_1023, _270 * TANGENT.x, (_256 * _248) * _1022));
    float _1032 = fma(_1024, _263 * NORMAL.y, fma(_1023, _270 * TANGENT.y, (_256 * _249) * _1022));
    float _1035 = fma(_1024, _263 * NORMAL.z, fma(_1023, _270 * TANGENT.z, (_256 * _250) * _1022));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4027 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _1043 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4049 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4060 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4071 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4082 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _1048 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _1062 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1112 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1102);
    float _1113 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1102);
    float _1114 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1102);
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1119 = _1112 * _1118;
    float _1120 = _1113 * _1118;
    float _1121 = _1114 * _1118;
    float _1127 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1128 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1146 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1149 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1152 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1166 = (_295 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1172 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1166].x;
    float _1173 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1166].y;
    float _1174 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * cbInstanceData._m0[_1166].z;
    float _4093 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _1178 = 1.0 - _1048;
    float _1179 = _1175 * _1178;
    float _1180 = _1176 * _1178;
    float _1181 = _1177 * _1178;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1048;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1048;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1048;
    float _1189 = _1186 + 0.039999999105930328369140625;
    float _1191 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    vec4 _1201 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1127, cbSceneParam._m0[86u].y * _1128));
    float _1205 = ((isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * TEXCOORD_5.w) * _1201.x;
    float _1206 = dot(vec3(_1040, _1041, _1042), vec3(_1119, _1120, _1121));
    float _1209 = _1206 * 2.0;
    float _1213 = (_1209 * _1040) - _1119;
    float _1214 = (_1209 * _1041) - _1120;
    float _1215 = (_1209 * _1042) - _1121;
    float _1219 = abs(dot(vec3(_1119, _1120, _1121), vec3(_1040, _1041, _1042)));
    float _4126 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _1221 = sqrt(_1043);
    float _1234 = exp2((_1221 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1221 * 3.0));
    float _1240 = (1.0 - _1234) * ((_1221 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1241 = _1234 * _1221;
    float _1269 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1273 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1578;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1303 = fma(_1277, cbModelParam._m0[26u].z, fma(_1273, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1269));
        float _1307 = fma(_1277, cbModelParam._m0[27u].z, fma(_1273, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1269));
        float _1311 = fma(_1277, cbModelParam._m0[28u].z, fma(_1273, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1269));
        float _1336 = _1269 + _1040;
        float _1337 = _1273 + _1041;
        float _1338 = _1277 + _1042;
        float _1348 = fma(_1338, cbModelParam._m0[26u].z, fma(_1337, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1336)) - _1303;
        float _1349 = fma(_1338, cbModelParam._m0[27u].z, fma(_1337, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1336)) - _1307;
        float _1350 = fma(_1338, cbModelParam._m0[28u].z, fma(_1337, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1336)) - _1311;
        float _1354 = inversesqrt(dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350)));
        float _1367 = ((_1354 * _1348) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1303 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1354 * _1349) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1307 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1354 * _1350) / cbModelParam._m0[34u].z) + ((((((_1311 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1367, _1368, _1369), 0.0);
        float _1406 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1372.x + (-0.5));
        float _1408 = _1406 * (_1372.y + (-0.5));
        float _1409 = _1406 * (_1372.z + (-0.5));
        float _1416 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1379.x + (-0.5));
        float _1418 = _1416 * (_1379.y + (-0.5));
        float _1419 = _1416 * (_1379.z + (-0.5));
        float _1426 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1386.x + (-0.5));
        float _1428 = _1426 * (_1386.y + (-0.5));
        float _1429 = _1426 * (_1386.z + (-0.5));
        float _1436 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1393.x + (-0.5));
        float _1438 = _1436 * (_1393.y + (-0.5));
        float _1439 = _1436 * (_1393.z + (-0.5));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = _1407 * 0.5;
        float _1444 = _1417 * 0.5;
        float _1445 = _1427 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1460 = (dot(vec3(_1040, _1041, _1042), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1470 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _4174 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1472 + 1.0))) + _1477) * _1440;
        float _1487 = _1408 * 0.5;
        float _1488 = _1418 * 0.5;
        float _1489 = _1428 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_1040, _1041, _1042), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4207 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1514 + 1.0))) + _1519) * _1441;
        float _1529 = _1409 * 0.5;
        float _1530 = _1419 * 0.5;
        float _1531 = _1429 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_1040, _1041, _1042), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4240 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1556 + 1.0))) + _1561) * _1442;
        _1578 = _1409;
        _1580 = _1408;
        _1581 = _1407;
        _1582 = _1419;
        _1583 = _1418;
        _1584 = _1417;
        _1585 = _1429;
        _1586 = _1428;
        _1587 = _1427;
        _1588 = _1442;
        _1589 = _1441;
        _1590 = _1440;
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1593 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
    }
    else
    {
        _1578 = _1579;
        _1580 = _1579;
        _1581 = _1579;
        _1582 = _1579;
        _1583 = _1579;
        _1584 = _1579;
        _1585 = _1579;
        _1586 = _1579;
        _1587 = _1579;
        _1588 = _1579;
        _1589 = _1579;
        _1590 = _1579;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    float _1899;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1616 = fma(_1277, cbModelParam._m0[30u].z, fma(_1273, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1269));
        float _1620 = fma(_1277, cbModelParam._m0[31u].z, fma(_1273, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1269));
        float _1624 = fma(_1277, cbModelParam._m0[32u].z, fma(_1273, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1269));
        float _1647 = _1269 + _1040;
        float _1648 = _1273 + _1041;
        float _1649 = _1277 + _1042;
        float _1659 = fma(_1649, cbModelParam._m0[30u].z, fma(_1648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1647)) - _1616;
        float _1660 = fma(_1649, cbModelParam._m0[31u].z, fma(_1648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1647)) - _1620;
        float _1661 = fma(_1649, cbModelParam._m0[32u].z, fma(_1648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1647)) - _1624;
        float _1665 = inversesqrt(dot(vec3(_1659, _1660, _1661), vec3(_1659, _1660, _1661)));
        float _1678 = ((_1665 * _1659) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1616 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1665 * _1660) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1620 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1680 = ((_1665 * _1661) / cbModelParam._m0[35u].z) + ((((((_1624 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1696 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        vec4 _1703 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1678, _1679, _1680), 0.0);
        float _1715 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1682.x + (-0.5));
        float _1717 = _1715 * (_1682.y + (-0.5));
        float _1718 = _1715 * (_1682.z + (-0.5));
        float _1725 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1689.x + (-0.5));
        float _1727 = _1725 * (_1689.y + (-0.5));
        float _1728 = _1725 * (_1689.z + (-0.5));
        float _1735 = exp2((_1696.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1696.x + (-0.5));
        float _1737 = _1735 * (_1696.y + (-0.5));
        float _1738 = _1735 * (_1696.z + (-0.5));
        float _1745 = exp2((_1703.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1703.x + (-0.5));
        float _1747 = _1745 * (_1703.y + (-0.5));
        float _1748 = _1745 * (_1703.z + (-0.5));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1752 = _1716 * 0.5;
        float _1753 = _1726 * 0.5;
        float _1754 = _1736 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_1040, _1041, _1042), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4303 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1779 + 1.0))) + _1784) * _1749;
        float _1794 = _1717 * 0.5;
        float _1795 = _1727 * 0.5;
        float _1796 = _1737 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_1040, _1041, _1042), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4336 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1821 + 1.0))) + _1826) * _1750;
        float _1836 = _1718 * 0.5;
        float _1837 = _1728 * 0.5;
        float _1838 = _1738 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_1040, _1041, _1042), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1751 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4369 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1863 + 1.0))) + _1868) * _1751;
        _1885 = _1718;
        _1886 = _1717;
        _1887 = _1716;
        _1888 = _1728;
        _1889 = _1727;
        _1890 = _1726;
        _1891 = _1738;
        _1892 = _1737;
        _1893 = _1736;
        _1894 = _1751;
        _1895 = _1750;
        _1896 = _1749;
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
        _1899 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
    }
    else
    {
        _1885 = _1579;
        _1886 = _1579;
        _1887 = _1579;
        _1888 = _1579;
        _1889 = _1579;
        _1890 = _1579;
        _1891 = _1579;
        _1892 = _1579;
        _1893 = _1579;
        _1894 = _1579;
        _1895 = _1579;
        _1896 = _1579;
        _1897 = 0.0;
        _1898 = 0.0;
        _1899 = 0.0;
    }
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1592)) + _1592;
    float _1911 = (cbModelParam._m0[1u].x * (_1899 - _1593)) + _1593;
    float _1932 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1935 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1938 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1909));
    float _1953 = _1213 * 0.5;
    float _1954 = _1214 * 0.5;
    float _1955 = _1215 * 0.5;
    float _1956 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1887, _1890, _1893, _1896));
    float _1959 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1962 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1996;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1969 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1578, _1582, _1585, _1588));
        float _1973 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1580, _1583, _1586, _1589));
        float _1977 = dot(vec4(_1953, _1954, _1955, 1.0), vec4(_1581, _1584, _1587, _1590));
        float _1984 = dot(vec4(cbModelParam._m0[39u]), vec4(_1953, _1954, _1955, 1.0));
        _1996 = dot(vec3(isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)), isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)), isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1996 = 1.0;
    }
    float _2007;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1998 = dot(vec4(cbModelParam._m0[40u]), vec4(_1953, _1954, _1955, 1.0));
        _2007 = dot(vec3(isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1998) ? 0.0 : (isnan(0.0) ? _1998 : max(0.0, _1998))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2007 = 1.0;
    }
    float _2011 = (_2007 * cbModelParam._m0[1u].x) + (_1996 * (1.0 - cbModelParam._m0[1u].x));
    float _2021 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2022 = isnan(_2021) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2021 : min(cbModelParam._m0[25u].z, _2021));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2070 = fma(_1277, cbModelParam._m0[13u].z, fma(_1273, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1269)) + cbModelParam._m0[13u].w;
        float _2074 = fma(_1277, cbModelParam._m0[14u].z, fma(_1273, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1269)) + cbModelParam._m0[14u].w;
        float _2078 = fma(_1277, cbModelParam._m0[15u].z, fma(_1273, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1269)) + cbModelParam._m0[15u].w;
        float _2081 = fma(_1215, cbModelParam._m0[13u].z, fma(_1214, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213));
        float _2084 = fma(_1215, cbModelParam._m0[14u].z, fma(_1214, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213));
        float _2087 = fma(_1215, cbModelParam._m0[15u].z, fma(_1214, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213));
        float _2115;
        if (_2081 > 0.0)
        {
            _2115 = abs((1.0 - _2070) / _2081);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2070 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2115 = frontier_phi_14_12_ladder;
        }
        float _2339;
        if (_2084 > 0.0)
        {
            _2339 = abs((1.0 - _2074) / _2084);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2074 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2339 = frontier_phi_23_19_ladder;
        }
        float _2596;
        if (_2087 > 0.0)
        {
            _2596 = abs((1.0 - _2078) / _2087);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2087 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2078 + 1.0) / _2087);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2596 = frontier_phi_35_30_ladder;
        }
        float _2598 = isnan(_2339) ? _2115 : (isnan(_2115) ? _2339 : min(_2115, _2339));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _2081) + _2070;
        float _2604 = (_2599 * _2084) + _2074;
        float _2605 = (_2599 * _2087) + _2078;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2606;
        float _2610 = _2606 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 > _2610) || ((_2604 < _2608) || ((_2603 < _2608) || (_2603 > _2610))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2605, cbModelParam._m0[9u].z, fma(_2604, cbModelParam._m0[9u].y, _2603 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2605, cbModelParam._m0[10u].z, fma(_2604, cbModelParam._m0[10u].y, _2603 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2605, cbModelParam._m0[11u].z, fma(_2604, cbModelParam._m0[11u].y, _2603 * cbModelParam._m0[11u].x))), _2022);
            frontier_phi_13_35_ladder = _2733.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2733.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2733.x * cbModelParam._m0[1u].y;
        }
        _2103 = frontier_phi_13_35_ladder_2;
        _2105 = frontier_phi_13_35_ladder_1;
        _2107 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2091 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1213, _1214, _1215), _2022);
        _2103 = _2091.x * cbModelParam._m0[1u].y;
        _2105 = _2091.y * cbModelParam._m0[1u].y;
        _2107 = _2091.z * cbModelParam._m0[1u].y;
    }
    float _2111 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2112 = isnan(_2111) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2111 : min(cbModelParam._m0[25u].w, _2111));
    float _2202;
    float _2204;
    float _2206;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2166 = fma(_1277, cbModelParam._m0[21u].z, fma(_1273, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1269)) + cbModelParam._m0[21u].w;
        float _2170 = fma(_1277, cbModelParam._m0[22u].z, fma(_1273, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1269)) + cbModelParam._m0[22u].w;
        float _2174 = fma(_1277, cbModelParam._m0[23u].z, fma(_1273, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1269)) + cbModelParam._m0[23u].w;
        float _2177 = fma(_1215, cbModelParam._m0[21u].z, fma(_1214, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213));
        float _2180 = fma(_1215, cbModelParam._m0[22u].z, fma(_1214, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213));
        float _2183 = fma(_1215, cbModelParam._m0[23u].z, fma(_1214, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213));
        float _2344;
        if (_2177 > 0.0)
        {
            _2344 = abs((1.0 - _2166) / _2177);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2166 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2344 = frontier_phi_25_21_ladder;
        }
        float _2623;
        if (_2180 > 0.0)
        {
            _2623 = abs((1.0 - _2170) / _2180);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2170 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2623 = frontier_phi_37_32_ladder;
        }
        float _2836;
        if (_2183 > 0.0)
        {
            _2836 = abs((1.0 - _2174) / _2183);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2183 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2174 + 1.0) / _2183);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2836 = frontier_phi_46_43_ladder;
        }
        float _2838 = isnan(_2623) ? _2344 : (isnan(_2344) ? _2623 : min(_2344, _2623));
        float _2839 = isnan(_2836) ? _2838 : (isnan(_2838) ? _2836 : min(_2838, _2836));
        float _2843 = (_2839 * _2177) + _2166;
        float _2844 = (_2839 * _2180) + _2170;
        float _2845 = (_2839 * _2183) + _2174;
        float _2846 = _2839 * 9.9999997473787516355514526367188e-05;
        float _2847 = (-1.0) - _2846;
        float _2849 = _2846 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2845 > _2849) || ((_2845 < _2847) || ((_2844 > _2849) || ((_2844 < _2847) || ((_2843 < _2847) || (_2843 > _2849))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2845, cbModelParam._m0[17u].z, fma(_2844, cbModelParam._m0[17u].y, _2843 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2845, cbModelParam._m0[18u].z, fma(_2844, cbModelParam._m0[18u].y, _2843 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2845, cbModelParam._m0[19u].z, fma(_2844, cbModelParam._m0[19u].y, _2843 * cbModelParam._m0[19u].x))), _2112);
            frontier_phi_22_46_ladder = _3044.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3044.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3044.x * cbModelParam._m0[1u].z;
        }
        _2202 = frontier_phi_22_46_ladder_2;
        _2204 = frontier_phi_22_46_ladder_1;
        _2206 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2186 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1213, _1214, _1215), _2112);
        _2202 = _2186.x * cbModelParam._m0[1u].z;
        _2204 = _2186.y * cbModelParam._m0[1u].z;
        _2206 = _2186.z * cbModelParam._m0[1u].z;
    }
    float _2219 = (((_1240 * _1189) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2202 - _2103)) + _2103);
    float _2221 = (((_1240 * _1191) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2204 - _2105)) + _2105);
    float _2223 = (((_1240 * _1192) + _1241) * _1205) * ((cbModelParam._m0[1u].w * (_2206 - _2107)) + _2107);
    float _2226 = fma(_2223, cbSceneParam._m0[89u].z, fma(_2221, cbSceneParam._m0[89u].y, _2219 * cbSceneParam._m0[89u].x));
    float _2229 = fma(_2223, cbSceneParam._m0[90u].z, fma(_2221, cbSceneParam._m0[90u].y, _2219 * cbSceneParam._m0[90u].x));
    float _2232 = fma(_2223, cbSceneParam._m0[91u].z, fma(_2221, cbSceneParam._m0[91u].y, _2219 * cbSceneParam._m0[91u].x));
    vec4 _2240 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1127, _1128));
    float _2242 = _2240.w;
    float _2254 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2242);
    float _2255 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2242);
    float _2256 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2242);
    uvec4 _2260 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2262 = _2260.x * 14u;
    uint _2263 = _2262 + 13u;
    float _2270 = _1205 + (-1.0);
    float _2275 = (cbLight._m0[_2263].x * _2270) + 1.0;
    float _2276 = (cbLight._m0[_2263].y * _2270) + 1.0;
    float _2277 = (cbLight._m0[_2263].z * _2270) + 1.0;
    float _2278 = (cbLight._m0[_2263].w * _2270) + 1.0;
    uint _2279 = _2262 + 5u;
    float _2285 = isnan(1.0) ? _2276 : (isnan(_2276) ? 1.0 : min(_2276, 1.0));
    uint _2289 = _2262 + 4u;
    float _2298 = isnan(1.0) ? _2275 : (isnan(_2275) ? 1.0 : min(_2275, 1.0));
    uint _2302 = _2262 | 1u;
    float _2313 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_1040, _1041, _1042));
    float _2316 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_1040, _1041, _1042));
    float _4505 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _4516 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2321 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2323 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * 0.3183098733425140380859375;
    float _2330 = ((cbLight._m0[_2279].x * _2285) * _2323) + (((cbLight._m0[_2289].x * _2254) * _2298) * _2321);
    float _2331 = ((_2285 * cbLight._m0[_2279].y) * _2323) + (((cbLight._m0[_2289].y * _2255) * _2298) * _2321);
    float _2332 = ((_2285 * cbLight._m0[_2279].z) * _2323) + (((cbLight._m0[_2289].z * _2256) * _2298) * _2321);
    uvec4 _2336 = floatBitsToUint(cbLight._m0[_2262 + 12u]);
    bool _2338 = _2336.x == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2338)
    {
        _2349 = _2330;
        _2351 = _2331;
        _2353 = _2332;
    }
    else
    {
        uint _2357 = _2262 + 6u;
        float _2373 = (dot(vec3(cbLight._m0[_2262 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2374 = _2373 * _2373;
        float _4527 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2375 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2376 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2349 = (((cbLight._m0[_2357].x * 0.3183098733425140380859375) * _2375) * _2376) + _2330;
        _2351 = (((cbLight._m0[_2357].y * 0.3183098733425140380859375) * _2375) * _2376) + _2331;
        _2353 = (((cbLight._m0[_2357].z * 0.3183098733425140380859375) * _2375) * _2376) + _2332;
    }
    bool _2356 = _2336.y == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2356)
    {
        _2394 = _2349;
        _2396 = _2351;
        _2398 = _2353;
    }
    else
    {
        uint _2567 = _2262 + 7u;
        float _2583 = (dot(vec3(cbLight._m0[_2262 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2584 = _2583 * _2583;
        float _4543 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2585 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2586 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2394 = (((cbLight._m0[_2567].x * 0.3183098733425140380859375) * _2585) * _2586) + _2349;
        _2396 = (((cbLight._m0[_2567].y * 0.3183098733425140380859375) * _2585) * _2586) + _2351;
        _2398 = (((cbLight._m0[_2567].z * 0.3183098733425140380859375) * _2585) * _2586) + _2353;
    }
    uint _2401 = _2262 + 8u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2262].w)) * _1043) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2262].x + _1119;
    float _2417 = cbLight._m0[_2262].y + _1120;
    float _2418 = cbLight._m0[_2262].z + _1121;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2262].xyz));
    float _4559 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _4570 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _2430 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2431 = dot(vec3(_1040, _1041, _1042), vec3(_2423, _2424, _2425));
    float _4581 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2434 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _2435 = dot(vec3(cbLight._m0[_2262].xyz), vec3(_2423, _2424, _2425));
    float _4592 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
    float _2439 = _2415 * _2415;
    float _2443 = ((_2434 * _2434) * (_2439 + (-1.0))) + 1.0;
    float _2451 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
    float _2452 = 0.959999978542327880859375 - _1186;
    float _2454 = 0.959999978542327880859375 - _1187;
    float _2455 = 0.959999978542327880859375 - _1188;
    float _2462 = 1.0 - _2415;
    float _2473 = (0.5 / (((_2430 * ((_2429 * _2462) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2462) + _2415) * _2429))) * _2429;
    float _4603 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2475 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2439 / ((_2443 * _2443) * 3.141590118408203125));
    uint _2489 = _2262 + 9u;
    float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _1043) * 0.949999988079071044921875);
    float _2501 = _2500 * _2500;
    float _2502 = cbLight._m0[_2302].x + _1119;
    float _2503 = cbLight._m0[_2302].y + _1120;
    float _2504 = cbLight._m0[_2302].z + _1121;
    float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
    float _2509 = _2508 * _2502;
    float _2510 = _2508 * _2503;
    float _2511 = _2508 * _2504;
    float _2512 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2302].xyz));
    float _4614 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2516 = dot(vec3(_1040, _1041, _1042), vec3(_2509, _2510, _2511));
    float _4625 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2520 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2509, _2510, _2511));
    float _4636 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = _2501 * _2501;
    float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
    float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2542 = 1.0 - _2501;
    float _2552 = (0.5 / (((_2430 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2542) + _2501) * _2515))) * _2515;
    float _4647 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2554 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
    float _2564 = (((((_2535 * _2452) + _1189) * cbLight._m0[_2489].x) * _2554) * _2285) + ((((cbLight._m0[_2401].x * _2254) * ((_2451 * _2452) + _1189)) * _2475) * _2298);
    float _2565 = (((((_2535 * _2454) + _1191) * cbLight._m0[_2489].y) * _2554) * _2285) + ((((cbLight._m0[_2401].y * _2255) * ((_2451 * _2454) + _1191)) * _2475) * _2298);
    float _2566 = (((((_2535 * _2455) + _1192) * cbLight._m0[_2489].z) * _2554) * _2285) + ((((cbLight._m0[_2401].z * _2256) * ((_2451 * _2455) + _1192)) * _2475) * _2298);
    float _2628;
    float _2630;
    float _2632;
    if (_2338)
    {
        _2628 = _2564;
        _2630 = _2565;
        _2632 = _2566;
    }
    else
    {
        uint _2634 = _2262 + 2u;
        uint _2638 = _2262 + 10u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _1043) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1119;
        float _2655 = cbLight._m0[_2634].y + _1120;
        float _2656 = cbLight._m0[_2634].z + _1121;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2634].xyz));
        float _4658 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2668 = dot(vec3(_1040, _1041, _1042), vec3(_2661, _2662, _2663));
        float _4669 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4680 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2430 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2694) + _2653) * _2667))) * _2667;
        float _4691 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2277 : (isnan(_2277) ? 1.0 : min(_2277, 1.0));
        _2628 = (((((_2687 * _2452) + _1189) * cbLight._m0[_2638].x) * _2706) * _2707) + _2564;
        _2630 = (((((_2687 * _2454) + _1191) * cbLight._m0[_2638].y) * _2706) * _2707) + _2565;
        _2632 = (((((_2687 * _2455) + _1192) * cbLight._m0[_2638].z) * _2706) * _2707) + _2566;
    }
    float _2742;
    float _2744;
    float _2746;
    if (_2356)
    {
        _2742 = _2628;
        _2744 = _2630;
        _2746 = _2632;
    }
    else
    {
        uint _2753 = _2262 + 3u;
        uint _2757 = _2262 + 11u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _1043) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _1119;
        float _2774 = cbLight._m0[_2753].y + _1120;
        float _2775 = cbLight._m0[_2753].z + _1121;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2753].xyz));
        float _4707 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2787 = dot(vec3(_1040, _1041, _1042), vec3(_2780, _2781, _2782));
        float _4718 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4729 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
        float _2813 = 1.0 - _2772;
        float _2823 = (0.5 / (((_2430 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2430 * _2813) + _2772) * _2786))) * _2786;
        float _4740 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2278 : (isnan(_2278) ? 1.0 : min(_2278, 1.0));
        _2742 = (((((_2806 * _2452) + _1189) * cbLight._m0[_2757].x) * _2825) * _2826) + _2628;
        _2744 = (((((_2806 * _2454) + _1191) * cbLight._m0[_2757].y) * _2825) * _2826) + _2630;
        _2746 = (((((_2806 * _2455) + _1192) * cbLight._m0[_2757].z) * _2825) * _2826) + _2632;
    }
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_2260.y == 0u)
    {
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2901;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2901;
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2901;
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.x;
        uint _2928 = uint((float(_2916.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1128) / _2917))) + floor(float(uint(cbSceneParam._m0[85u].x * _1127) / _2917)));
        float _2938 = (log2(_2904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2939 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        uint _2942 = uint(isnan(14.0) ? _2939 : (isnan(_2939) ? 14.0 : min(_2939, 14.0)));
        uvec4 _2947 = texelFetch(g_lightClusterGridBuffer, int(((_2942 << 2u) + (_2928 << 6u)) >> 2u));
        uint _2948 = _2947.x;
        uint _2949 = _2916.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2949 >> 4u) & 15u)) + 4294967295u) & _2948) == 0u) || ((_2949 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            float _3199 = 0.0;
            uint _3200 = 0u;
            uint _3209;
            bool _3210;
            for (;;)
            {
                _3209 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3200 << 2u)) >> 2u)).x;
                _3210 = _3209 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3210)
                {
                    frontier_phi_61_pred = _3194;
                    frontier_phi_61_pred_1 = _3199;
                    frontier_phi_61_pred_2 = _3198;
                    frontier_phi_61_pred_3 = _3197;
                    frontier_phi_61_pred_4 = _3196;
                    frontier_phi_61_pred_5 = _3195;
                }
                else
                {
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    uint _3324;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3199;
                    _3324 = _3209;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    for (;;)
                    {
                        uint _3328 = uint(findLSB(_3324)) + (_3200 << 5u);
                        uint _3325 = (_3324 + 4294967295u) & _3324;
                        uint _3330 = _3328 * 48u;
                        vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3350 = (_3328 * 48u) + 4u;
                        vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3350)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3350 + 3u)).x));
                        uint _3369 = (_3328 * 48u) + 8u;
                        vec3 _3380 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3369)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3369 + 2u)).x));
                        float _3384 = _3344.x - _2902;
                        float _3385 = _3344.y - _2903;
                        float _3386 = _3344.z - _2904;
                        float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                        float _3390 = inversesqrt(_3387);
                        float _3391 = _3390 * _3384;
                        float _3392 = _3390 * _3385;
                        float _3393 = _3390 * _3386;
                        float _3394 = dot(vec3(_1146, _1149, _1152), vec3(_3391, _3392, _3393));
                        float _3399 = 1.0 - (_3387 * _3344.w);
                        float _4766 = isnan(0.0) ? _3399 : (isnan(_3399) ? 0.0 : max(_3399, 0.0));
                        float _3400 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
                        float _3401 = sqrt(_3387) * _3363.w;
                        float _3404 = 1.39999997615814208984375 / (_3401 + 1.39999997615814208984375);
                        float _3405 = _3404 * _3404;
                        float _3408 = ((1.0 - _3405) * _3394) + _3405;
                        float _3411 = _3401 * _3401;
                        float _3415 = ((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3400) / ((_3411 * 0.699999988079071044921875) + 1.0);
                        float _3419 = (-0.0) - _2902;
                        float _3420 = (-0.0) - _2903;
                        float _3421 = (-0.0) - _2904;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3426 = _3425 * _3419;
                        float _3427 = _3425 * _3420;
                        float _3428 = _3425 * _3421;
                        float _3436 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _1221;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3426 + _3391;
                        float _3448 = _3427 + _3392;
                        float _3449 = _3428 + _3393;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_1146, _1149, _1152), vec3(_3426, _3427, _3428));
                        float _4782 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3461 = dot(vec3(_1146, _1149, _1152), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4793 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3404 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3394) + _3470;
                        float _4804 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4815 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) / ((_3468 * _3468) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125))) * _3400;
                        _3253 = (_3415 * _3363.x) + _3321;
                        _3254 = (_3415 * _3363.y) + _3322;
                        _3255 = (_3415 * _3363.z) + _3323;
                        _3250 = (_3496 * _3380.x) + _3318;
                        _3251 = (_3496 * _3380.y) + _3319;
                        _3252 = (_3496 * _3380.z) + _3320;
                        if (_3325 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3255;
                            _3324 = _3325;
                        }
                    }
                    frontier_phi_61_pred = _3250;
                    frontier_phi_61_pred_1 = _3255;
                    frontier_phi_61_pred_2 = _3254;
                    frontier_phi_61_pred_3 = _3253;
                    frontier_phi_61_pred_4 = _3252;
                    frontier_phi_61_pred_5 = _3251;
                }
                _3050 = frontier_phi_61_pred;
                _3060 = frontier_phi_61_pred_1;
                _3058 = frontier_phi_61_pred_2;
                _3056 = frontier_phi_61_pred_3;
                _3054 = frontier_phi_61_pred_4;
                _3052 = frontier_phi_61_pred_5;
                uint _3201 = _3200 + 1u;
                if (_3201 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3194 = _3050;
                    _3195 = _3052;
                    _3196 = _3054;
                    _3197 = _3056;
                    _3198 = _3058;
                    _3199 = _3060;
                    _3200 = _3201;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3162;
        float _3164;
        float _3166;
        float _3168;
        float _3170;
        float _3172;
        if (((4294967295u << _3066) & _2948) == 0u)
        {
            _3162 = _3049;
            _3164 = _3051;
            _3166 = _3053;
            _3168 = _3055;
            _3170 = _3057;
            _3172 = _3059;
        }
        else
        {
            float _3187 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
            float _3188 = _3187 * _2902;
            float _3189 = _3187 * _2903;
            float _3190 = _3187 * _2904;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3163;
                float _3165;
                float _3167;
                float _3169;
                float _3171;
                float _3173;
                float _3301 = _3049;
                float _3302 = _3051;
                float _3303 = _3053;
                float _3304 = _3055;
                float _3305 = _3057;
                float _3306 = _3059;
                uint _3307 = _3066;
                uint _3316;
                bool _3317;
                for (;;)
                {
                    _3316 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3307 << 2u)) >> 2u)).x;
                    _3317 = _3316 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3317)
                    {
                        frontier_phi_67_pred = _3304;
                        frontier_phi_67_pred_1 = _3305;
                        frontier_phi_67_pred_2 = _3306;
                        frontier_phi_67_pred_3 = _3303;
                        frontier_phi_67_pred_4 = _3302;
                        frontier_phi_67_pred_5 = _3301;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3514 = _3301;
                        float _3515 = _3302;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        float _3519 = _3306;
                        uint _3520 = _3316;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3604;
                        float _3650;
                        bool _3651;
                        for (;;)
                        {
                            uint _3531 = ((_3307 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3591 = (_3531 * 40u) + 20u;
                            _3604 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3591)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3591 + 3u)).x));
                            uint _3606 = (_3531 * 40u) + 24u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3625 = (_3531 * 40u) + 28u;
                            vec4 _3638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 3u)).x));
                            _3650 = fma(_2904, _3638.z, fma(_2903, _3638.y, _3638.x * _2902)) + _3638.w;
                            _3651 = !((fma(_2904, _3619.z, fma(_2903, _3619.y, _3619.x * _2902)) + _3619.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3651)
                            {
                                float _3678 = _3546.x - _2902;
                                float _3679 = _3546.y - _2903;
                                float _3680 = _3546.z - _2904;
                                float _3681 = dot(vec3(_3678, _3679, _3680), vec3(_3678, _3679, _3680));
                                float _3684 = inversesqrt(_3681);
                                float _3685 = _3684 * _3678;
                                float _3686 = _3684 * _3679;
                                float _3687 = _3684 * _3680;
                                float _3691 = 1.0 - (_3681 / (_3547 * _3547));
                                float _4826 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                                float _3696 = sqrt(_3681) * _3562.w;
                                float _3698 = 1.39999997615814208984375 / (_3696 + 1.39999997615814208984375);
                                float _3699 = _3698 * _3698;
                                float _3702 = ((1.0 - _3699) * dot(vec3(_3685, _3686, _3687), vec3(_1146, _1149, _1152))) + _3699;
                                float _3705 = _3696 * _3696;
                                float _3709 = (fma(_2904, _3589.z, fma(_2903, _3589.y, _3589.x * _2902)) + _3589.w) / _3650;
                                float _3710 = (fma(_2904, _3604.z, fma(_2903, _3604.y, _3604.x * _2902)) + _3604.w) / _3650;
                                float _3714 = 1.0 - dot(vec2(_3709, _3710), vec2(_3709, _3710));
                                float _4842 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3716 = _3715 * (((isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0))) * _3692) / ((_3705 * 0.699999988079071044921875) + 1.0));
                                float _3728 = exp2(log2(1.0 / ((_3705 * 3.5) + 5.0)) * 0.25);
                                float _3729 = 1.0 - _1221;
                                float _3736 = sqrt(1.0 - ((1.0 - (_3729 * _3729)) * (1.0 - (_3728 * _3728))));
                                float _3737 = _3736 * _3736;
                                float _3738 = _3737 * _3737;
                                float _3739 = _3685 - _3188;
                                float _3740 = _3686 - _3189;
                                float _3741 = _3687 - _3190;
                                float _3745 = inversesqrt(dot(vec3(_3739, _3740, _3741), vec3(_3739, _3740, _3741)));
                                float _3749 = dot(vec3(_1146, _1149, _1152), vec3((-0.0) - _3188, (-0.0) - _3189, (-0.0) - _3190));
                                float _4853 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3752 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3753 = dot(vec3(_1146, _1149, _1152), vec3(_3745 * _3739, _3745 * _3740, _3745 * _3741));
                                float _4864 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3756 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3760 = ((_3756 * _3756) * (_3738 + (-1.0))) + 1.0;
                                float _3761 = _3698 * _3737;
                                float _3762 = _3761 * _3761;
                                float _3768 = ((1.0 - _3762) * dot(vec3(_1146, _1149, _1152), vec3(_3685, _3686, _3687))) + _3762;
                                float _4875 = isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0));
                                float _3769 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
                                float _3770 = 1.0 - _3737;
                                float _3780 = (0.5 / (((_3769 * ((_3752 * _3770) + _3737)) + 9.9999999392252902907785028219223e-09) + (((_3769 * _3770) + _3737) * _3752))) * _3769;
                                float _4886 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3790 = (_3715 * _3692) * (((_3738 * 3.1415927410125732421875) * (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0)))) / ((_3760 * _3760) * ((_3705 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3790 * _3574.x;
                                frontier_phi_73_pred_1 = _3790 * _3574.y;
                                frontier_phi_73_pred_2 = _3716 * _3562.z;
                                frontier_phi_73_pred_3 = _3716 * _3562.y;
                                frontier_phi_73_pred_4 = _3716 * _3562.x;
                                frontier_phi_73_pred_5 = _3790 * _3574.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3794 = frontier_phi_73_pred;
                            _3795 = frontier_phi_73_pred_1;
                            _3799 = frontier_phi_73_pred_2;
                            _3798 = frontier_phi_73_pred_3;
                            _3797 = frontier_phi_73_pred_4;
                            _3796 = frontier_phi_73_pred_5;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3506 = _3799 + _3519;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            _3503 = _3796 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3504;
                        frontier_phi_67_pred_1 = _3505;
                        frontier_phi_67_pred_2 = _3506;
                        frontier_phi_67_pred_3 = _3503;
                        frontier_phi_67_pred_4 = _3502;
                        frontier_phi_67_pred_5 = _3501;
                    }
                    _3169 = frontier_phi_67_pred;
                    _3171 = frontier_phi_67_pred_1;
                    _3173 = frontier_phi_67_pred_2;
                    _3167 = frontier_phi_67_pred_3;
                    _3165 = frontier_phi_67_pred_4;
                    _3163 = frontier_phi_67_pred_5;
                    uint _3308 = _3307 + 1u;
                    if (_3308 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3301 = _3163;
                        _3302 = _3165;
                        _3303 = _3167;
                        _3304 = _3169;
                        _3305 = _3171;
                        _3306 = _3173;
                        _3307 = _3308;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3171;
                frontier_phi_55_56_ladder_1 = _3173;
                frontier_phi_55_56_ladder_2 = _3169;
                frontier_phi_55_56_ladder_3 = _3167;
                frontier_phi_55_56_ladder_4 = _3165;
                frontier_phi_55_56_ladder_5 = _3163;
            }
            else
            {
                frontier_phi_55_56_ladder = _3057;
                frontier_phi_55_56_ladder_1 = _3059;
                frontier_phi_55_56_ladder_2 = _3055;
                frontier_phi_55_56_ladder_3 = _3053;
                frontier_phi_55_56_ladder_4 = _3051;
                frontier_phi_55_56_ladder_5 = _3049;
            }
            _3162 = frontier_phi_55_56_ladder_5;
            _3164 = frontier_phi_55_56_ladder_4;
            _3166 = frontier_phi_55_56_ladder_3;
            _3168 = frontier_phi_55_56_ladder_2;
            _3170 = frontier_phi_55_56_ladder;
            _3172 = frontier_phi_55_56_ladder_1;
        }
        float _3177 = isnan(1.0) ? _1205 : (isnan(_1205) ? 1.0 : min(_1205, 1.0));
        _2961 = (_3177 * _3168) + _2394;
        _2963 = (_3177 * _3170) + _2396;
        _2965 = (_3177 * _3172) + _2398;
        _2967 = ((_3162 * _1189) * _3177) + _2742;
        _2969 = ((_3164 * _1191) * _3177) + _2744;
        _2971 = ((_3166 * _1192) * _3177) + _2746;
    }
    else
    {
        _2961 = _2394;
        _2963 = _2396;
        _2965 = _2398;
        _2967 = _2742;
        _2969 = _2744;
        _2971 = _2746;
    }
    float _4902 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _4913 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _4924 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    uint _2991 = _295 + 6u;
    float _2999 = _1127 / cbSceneParam._m0[86u].x;
    float _3000 = _1128 / cbSceneParam._m0[86u].y;
    vec4 _3014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, (log2((isnan(cbSceneParam._m0[77u].w) ? _1062 : (isnan(_1062) ? cbSceneParam._m0[77u].w : min(_1062, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3016 = _3014.x;
    float _3017 = _3014.y;
    float _3018 = _3014.z;
    float _3019 = _3014.w;
    float _3112;
    float _3114;
    float _3116;
    float _3118;
    if (_1062 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_1062) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1062 : min(cbSceneParam._m0[80u].w, _1062));
        float _3075 = _3074 / _1062;
        float _3086 = _3075 * _1112;
        float _3087 = _1113 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3090 = _3075 * _1114;
        float _3092 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3093 = _3092 + cbSceneParam._m0[79u].w;
        float _3094 = cbSceneParam._m0[79u].w - _3087;
        float _3100 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3090 * _3090));
        float _3103 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3100;
        float _3108 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3110 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3263;
        if (abs((_3088 - _3092) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3263 = ((((_3093 > 0.0) ? exp2(_3108 * _3093) : (2.0 - exp2(_3110 * _3093))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3103;
        }
        else
        {
            float _3223 = 1.0 / cbSceneParam._m0[80u].x;
            float _3224 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : max(_3093, _3094));
            float _3225 = isnan(_3094) ? _3093 : (isnan(_3093) ? _3094 : min(_3093, _3094));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            float _3235 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : min(_3225, 0.0));
            _3263 = ((abs(_3100 / _3088) * cbSceneParam._m0[80u].y) * ((((_3234 - _3235) * 2.0) - ((exp2(_3108 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0)))) - exp2(_3108 * (isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0))))) * _3223)) - ((exp2(_3110 * _3234) - exp2(_3110 * _3235)) * _3223))) + (_3103 * cbSceneParam._m0[80u].z);
        }
        vec4 _3265 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, 1.0), 0.0);
        float _3274 = exp2((_3263 * (-1.44269502162933349609375)) * (1.0 - _3265.w));
        float _3275 = log2(_3274);
        float _3291 = log2(_3019);
        _3112 = (exp2(_3291 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].x)) * _3265.x) / cbSceneParam._m0[78u].x)) + _3016;
        _3114 = (exp2(_3291 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].y)) * _3265.y) / cbSceneParam._m0[78u].y)) + _3017;
        _3116 = (exp2(_3291 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3275 * cbSceneParam._m0[78u].z)) * _3265.z) / cbSceneParam._m0[78u].z)) + _3018;
        _3118 = _3274 * _3019;
    }
    else
    {
        _3112 = _3016;
        _3114 = _3017;
        _3116 = _3018;
        _3118 = _3019;
    }
    float _3130 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3131 = _3130 == 3.0;
    float _3132 = log2(_3118);
    float _3139 = exp2(_3132 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2961 + ((isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) * _1205))) + ((_2967 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3140 = exp2(_3132 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2963 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1205))) + ((_2969 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3141 = exp2(_3132 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0))) * (_2965 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1205))) + ((_2971 + ((isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0))) * _2011)) * cbPerFrame._m0[3u].x));
    float _3150 = (_3130 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3150 * (_3131 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3112)));
    SV_Target.y = _3150 * (_3131 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3114)));
    SV_Target.z = _3150 * (_3131 ? _3141 : (_3141 + (cbSceneParam._m0[72u].w * _3116)));
    SV_Target.w = cbInstanceData._m0[_2991].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2991].w;
}


