#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1509;
float _4171;
float _4172;
float _4173;
float _4174;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4183 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4194 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4205 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4216 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4227 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4238 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _713 = _711.x;
    float _714 = _711.y;
    float _715 = _711.z;
    float _722 = ((_694.x - _713) * _482) + _713;
    float _723 = ((_694.y - _714) * _482) + _714;
    float _724 = ((_694.z - _715) * _482) + _715;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _747 = ((_736.x - _722) * _555) + _722;
    float _748 = ((_736.y - _723) * _555) + _723;
    float _749 = ((_736.z - _724) * _555) + _724;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _774 = ((_761.z - _749) * _625) + _749;
    float _777 = ((((_761.x - _747) * _625) + _747) * 2.0) + (-1.0);
    float _778 = ((((_761.y - _748) * _625) + _748) * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4249 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _784 = sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))));
    vec4 _804 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _816 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_671.x * 2.0) + (-1.0)))) + (((_804.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _817 = (_778 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_671.y * 2.0) + (-1.0)))) + (((_804.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _845 = _843.x;
    float _862 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _845) * _482) + _845;
    float _880 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _862) * _555) + _862;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _880) * _625) + _880;
    float _902 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _898) * cbMtdParam._m0[19u].z) + _898;
    float _907 = (((_671.z - _774) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _774;
    float _911 = ((_804.z - _907) * cbMtdParam._m0[19u].w) + _907;
    float _915 = cbMtdParam._m0[22u].x + _804.w;
    float _918 = fma(_784, _254 * NORMAL.x, fma(_817, _261 * TANGENT.x, (_247 * _239) * _816));
    float _921 = fma(_784, _254 * NORMAL.y, fma(_817, _261 * TANGENT.y, (_247 * _240) * _816));
    float _924 = fma(_784, _254 * NORMAL.z, fma(_817, _261 * TANGENT.z, (_247 * _241) * _816));
    float _928 = inversesqrt(dot(vec3(_918, _921, _924), vec3(_918, _921, _924)));
    float _929 = _928 * _918;
    float _930 = _928 * _921;
    float _931 = _928 * _924;
    float _4260 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _932 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _4282 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4293 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4304 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _4315 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _937 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _951 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _991 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1001 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _991);
    float _1002 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _991);
    float _1003 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _991);
    float _1007 = inversesqrt(dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003)));
    float _1008 = _1001 * _1007;
    float _1009 = _1002 * _1007;
    float _1010 = _1003 * _1007;
    vec4 _1015 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1017 = _1015.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1189 = sqrt(((_1001 * _1001) + (_1002 * _1002)) + (_1003 * _1003));
        float _1195 = (cbMatDynParam._m0[5u].x * _1189) + cbMatDynParam._m0[5u].y;
        float _4326 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1200 = (cbMatDynParam._m0[5u].z * _1189) + cbMatDynParam._m0[5u].w;
        float _4337 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) - _1196)) + _1196) < ((_1017 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1047 = fma(_931, cbSceneParam._m0[5u].z, fma(_930, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _929));
    float _1050 = fma(_931, cbSceneParam._m0[6u].z, fma(_930, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _929));
    float _1053 = fma(_931, cbSceneParam._m0[7u].z, fma(_930, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _929));
    uint _1066 = _288 + 9u;
    uint _1067 = _1066 + uint(cbMatDynParam._m0[0u].w);
    float _1073 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * cbInstanceData._m0[_1067].x;
    float _1074 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * cbInstanceData._m0[_1067].y;
    float _1075 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1067].z;
    float _4348 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1076 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _4359 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1077 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1078 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _1079 = 1.0 - _937;
    float _1080 = _1076 * _1079;
    float _1081 = _1077 * _1079;
    float _1082 = _1078 * _1079;
    float _1087 = (_1076 + (-0.039999999105930328369140625)) * _937;
    float _1088 = (_1077 + (-0.039999999105930328369140625)) * _937;
    float _1089 = (_1078 + (-0.039999999105930328369140625)) * _937;
    float _1090 = _1087 + 0.039999999105930328369140625;
    float _1092 = _1088 + 0.039999999105930328369140625;
    float _1093 = _1089 + 0.039999999105930328369140625;
    vec4 _1102 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1106 = ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * TEXCOORD_5.w) * _1102.x;
    float _1107 = dot(vec3(_929, _930, _931), vec3(_1008, _1009, _1010));
    float _1110 = _1107 * 2.0;
    float _1114 = (_1110 * _929) - _1008;
    float _1115 = (_1110 * _930) - _1009;
    float _1116 = (_1110 * _931) - _1010;
    float _1120 = abs(dot(vec3(_1008, _1009, _1010), vec3(_929, _930, _931)));
    float _4381 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
    float _1122 = sqrt(_932);
    float _1135 = exp2((_1122 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1122 * 3.0));
    float _1141 = (1.0 - _1135) * ((_1122 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1142 = _1135 * _1122;
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1178 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1508;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1233 = fma(_1178, cbModelParam._m0[26u].z, fma(_1174, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1170));
        float _1237 = fma(_1178, cbModelParam._m0[27u].z, fma(_1174, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1170));
        float _1241 = fma(_1178, cbModelParam._m0[28u].z, fma(_1174, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1170));
        float _1266 = _1170 + _929;
        float _1267 = _1174 + _930;
        float _1268 = _1178 + _931;
        float _1278 = fma(_1268, cbModelParam._m0[26u].z, fma(_1267, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1266)) - _1233;
        float _1279 = fma(_1268, cbModelParam._m0[27u].z, fma(_1267, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1266)) - _1237;
        float _1280 = fma(_1268, cbModelParam._m0[28u].z, fma(_1267, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1266)) - _1241;
        float _1284 = inversesqrt(dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280)));
        float _1297 = ((_1284 * _1278) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1233 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1298 = ((_1284 * _1279) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1237 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1299 = ((_1284 * _1280) / cbModelParam._m0[34u].z) + ((((((_1241 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1297, _1298, _1299), 0.0);
        float _1336 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1302.x + (-0.5));
        float _1338 = _1336 * (_1302.y + (-0.5));
        float _1339 = _1336 * (_1302.z + (-0.5));
        float _1346 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1309.x + (-0.5));
        float _1348 = _1346 * (_1309.y + (-0.5));
        float _1349 = _1346 * (_1309.z + (-0.5));
        float _1356 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1316.x + (-0.5));
        float _1358 = _1356 * (_1316.y + (-0.5));
        float _1359 = _1356 * (_1316.z + (-0.5));
        float _1366 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1323.x + (-0.5));
        float _1368 = _1366 * (_1323.y + (-0.5));
        float _1369 = _1366 * (_1323.z + (-0.5));
        float _1370 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1371 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = _1337 * 0.5;
        float _1374 = _1347 * 0.5;
        float _1375 = _1357 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1390 = (dot(vec3(_929, _930, _931), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1400 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1370 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4429 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1402 + 1.0))) + _1407) * _1370;
        float _1417 = _1338 * 0.5;
        float _1418 = _1348 * 0.5;
        float _1419 = _1358 * 0.5;
        float _1420 = dot(vec3(_1417, _1418, _1419), vec3(_1417, _1418, _1419));
        float _1425 = (_1420 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1420);
        float _1433 = (dot(vec3(_929, _930, _931), vec3(_1425 * _1417, _1425 * _1418, _1425 * _1419)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1442 = sqrt(((_1418 * _1418) + (_1417 * _1417)) + (_1419 * _1419)) / (_1371 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1444 = _1443 * 2.0;
        float _1448 = (1.0 - _1443) / (_1443 + 1.0);
        float _4462 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1458 = ((((1.0 - _1449) * (_1444 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1444 + 1.0))) + _1449) * _1371;
        float _1459 = _1339 * 0.5;
        float _1460 = _1349 * 0.5;
        float _1461 = _1359 * 0.5;
        float _1462 = dot(vec3(_1459, _1460, _1461), vec3(_1459, _1460, _1461));
        float _1467 = (_1462 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1462);
        float _1475 = (dot(vec3(_929, _930, _931), vec3(_1467 * _1459, _1467 * _1460, _1467 * _1461)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1484 = sqrt(((_1460 * _1460) + (_1459 * _1459)) + (_1461 * _1461)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1486 = _1485 * 2.0;
        float _1490 = (1.0 - _1485) / (_1485 + 1.0);
        float _4495 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1500 = ((((1.0 - _1491) * (_1486 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1486 + 1.0))) + _1491) * _1372;
        _1508 = _1339;
        _1510 = _1338;
        _1511 = _1337;
        _1512 = _1349;
        _1513 = _1348;
        _1514 = _1347;
        _1515 = _1359;
        _1516 = _1358;
        _1517 = _1357;
        _1518 = _1372;
        _1519 = _1371;
        _1520 = _1370;
        _1521 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
        _1522 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)));
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0)));
    }
    else
    {
        _1508 = _1509;
        _1510 = _1509;
        _1511 = _1509;
        _1512 = _1509;
        _1513 = _1509;
        _1514 = _1509;
        _1515 = _1509;
        _1516 = _1509;
        _1517 = _1509;
        _1518 = _1509;
        _1519 = _1509;
        _1520 = _1509;
        _1521 = 0.0;
        _1522 = 0.0;
        _1523 = 0.0;
    }
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1549 = fma(_1178, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1170));
        float _1553 = fma(_1178, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1170));
        float _1557 = fma(_1178, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1170));
        float _1580 = _1170 + _929;
        float _1581 = _1174 + _930;
        float _1582 = _1178 + _931;
        float _1592 = fma(_1582, cbModelParam._m0[30u].z, fma(_1581, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1580)) - _1549;
        float _1593 = fma(_1582, cbModelParam._m0[31u].z, fma(_1581, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1580)) - _1553;
        float _1594 = fma(_1582, cbModelParam._m0[32u].z, fma(_1581, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1580)) - _1557;
        float _1598 = inversesqrt(dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594)));
        float _1611 = ((_1598 * _1592) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1549 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1612 = ((_1598 * _1593) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1553 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1613 = ((_1598 * _1594) / cbModelParam._m0[35u].z) + ((((((_1557 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        vec4 _1636 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1611, _1612, _1613), 0.0);
        float _1648 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1649 = _1648 * (_1615.x + (-0.5));
        float _1650 = _1648 * (_1615.y + (-0.5));
        float _1651 = _1648 * (_1615.z + (-0.5));
        float _1658 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1622.x + (-0.5));
        float _1660 = _1658 * (_1622.y + (-0.5));
        float _1661 = _1658 * (_1622.z + (-0.5));
        float _1668 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1629.x + (-0.5));
        float _1670 = _1668 * (_1629.y + (-0.5));
        float _1671 = _1668 * (_1629.z + (-0.5));
        float _1678 = exp2((_1636.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1636.x + (-0.5));
        float _1680 = _1678 * (_1636.y + (-0.5));
        float _1681 = _1678 * (_1636.z + (-0.5));
        float _1682 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1683 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1684 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1685 = _1649 * 0.5;
        float _1686 = _1659 * 0.5;
        float _1687 = _1669 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_929, _930, _931), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4536 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1682 + 9.9999997473787516355514526367188e-06);
        float _4547 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4558 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_1712 + 1.0))) + _1717) * _1682;
        float _1727 = _1650 * 0.5;
        float _1728 = _1660 * 0.5;
        float _1729 = _1670 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_929, _930, _931), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4569 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1683 + 9.9999997473787516355514526367188e-06);
        float _4580 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4591 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0))) * (_1754 + 1.0))) + _1759) * _1683;
        float _1769 = _1651 * 0.5;
        float _1770 = _1661 * 0.5;
        float _1771 = _1671 * 0.5;
        float _1772 = dot(vec3(_1769, _1770, _1771), vec3(_1769, _1770, _1771));
        float _1777 = (_1772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1772);
        float _1785 = (dot(vec3(_929, _930, _931), vec3(_1777 * _1769, _1777 * _1770, _1777 * _1771)) + 1.0) * 0.5;
        float _4602 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1794 = sqrt(((_1770 * _1770) + (_1769 * _1769)) + (_1771 * _1771)) / (_1684 + 9.9999997473787516355514526367188e-06);
        float _4613 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1795 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1796 = _1795 * 2.0;
        float _1800 = (1.0 - _1795) / (_1795 + 1.0);
        float _4624 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1810 = ((((1.0 - _1801) * (_1796 + 2.0)) * exp2(log2(isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0))) * (_1796 + 1.0))) + _1801) * _1684;
        _1818 = _1651;
        _1819 = _1650;
        _1820 = _1649;
        _1821 = _1661;
        _1822 = _1660;
        _1823 = _1659;
        _1824 = _1671;
        _1825 = _1670;
        _1826 = _1669;
        _1827 = _1684;
        _1828 = _1683;
        _1829 = _1682;
        _1830 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1831 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
        _1832 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)));
    }
    else
    {
        _1818 = _1509;
        _1819 = _1509;
        _1820 = _1509;
        _1821 = _1509;
        _1822 = _1509;
        _1823 = _1509;
        _1824 = _1509;
        _1825 = _1509;
        _1826 = _1509;
        _1827 = _1509;
        _1828 = _1509;
        _1829 = _1509;
        _1830 = 0.0;
        _1831 = 0.0;
        _1832 = 0.0;
    }
    float _1842 = (cbModelParam._m0[1u].x * (_1830 - _1521)) + _1521;
    float _1843 = (cbModelParam._m0[1u].x * (_1831 - _1522)) + _1522;
    float _1844 = (cbModelParam._m0[1u].x * (_1832 - _1523)) + _1523;
    float _1865 = fma(_1844, cbSceneParam._m0[89u].z, fma(_1843, cbSceneParam._m0[89u].y, _1842 * cbSceneParam._m0[89u].x));
    float _1868 = fma(_1844, cbSceneParam._m0[90u].z, fma(_1843, cbSceneParam._m0[90u].y, _1842 * cbSceneParam._m0[90u].x));
    float _1871 = fma(_1844, cbSceneParam._m0[91u].z, fma(_1843, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1842));
    float _1886 = _1114 * 0.5;
    float _1887 = _1115 * 0.5;
    float _1888 = _1116 * 0.5;
    float _1889 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1820, _1823, _1826, _1829));
    float _1892 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1819, _1822, _1825, _1828));
    float _1895 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1818, _1821, _1824, _1827));
    float _1929;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1902 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1508, _1512, _1515, _1518));
        float _1906 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1510, _1513, _1516, _1519));
        float _1910 = dot(vec4(_1886, _1887, _1888, 1.0), vec4(_1511, _1514, _1517, _1520));
        float _1917 = dot(vec4(cbModelParam._m0[39u]), vec4(_1886, _1887, _1888, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1917) ? 0.0 : (isnan(0.0) ? _1917 : max(0.0, _1917))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1940;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1931 = dot(vec4(cbModelParam._m0[40u]), vec4(_1886, _1887, _1888, 1.0));
        _1940 = dot(vec3(isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)), isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1931) ? 0.0 : (isnan(0.0) ? _1931 : max(0.0, _1931))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1940 = 1.0;
    }
    float _1944 = (_1940 * cbModelParam._m0[1u].x) + (_1929 * (1.0 - cbModelParam._m0[1u].x));
    float _1954 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _932);
    float _1955 = isnan(_1954) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1954 : min(cbModelParam._m0[25u].z, _1954));
    float _2036;
    float _2038;
    float _2040;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2003 = fma(_1178, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1170)) + cbModelParam._m0[13u].w;
        float _2007 = fma(_1178, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1170)) + cbModelParam._m0[14u].w;
        float _2011 = fma(_1178, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1170)) + cbModelParam._m0[15u].w;
        float _2014 = fma(_1116, cbModelParam._m0[13u].z, fma(_1115, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1114));
        float _2017 = fma(_1116, cbModelParam._m0[14u].z, fma(_1115, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1114));
        float _2020 = fma(_1116, cbModelParam._m0[15u].z, fma(_1115, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1114));
        float _2048;
        if (_2014 > 0.0)
        {
            _2048 = abs((1.0 - _2003) / _2014);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2003 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2048 = frontier_phi_17_15_ladder;
        }
        float _2220;
        if (_2017 > 0.0)
        {
            _2220 = abs((1.0 - _2007) / _2017);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2007 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2220 = frontier_phi_26_22_ladder;
        }
        float _2515;
        if (_2020 > 0.0)
        {
            _2515 = abs((1.0 - _2011) / _2020);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2011 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2515 = frontier_phi_38_33_ladder;
        }
        float _2517 = isnan(_2220) ? _2048 : (isnan(_2048) ? _2220 : min(_2048, _2220));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _2014) + _2003;
        float _2523 = (_2518 * _2017) + _2007;
        float _2524 = (_2518 * _2020) + _2011;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2527 = (-1.0) - _2525;
        float _2529 = _2525 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2524 > _2529) || ((_2524 < _2527) || ((_2523 > _2529) || ((_2523 < _2527) || ((_2522 < _2527) || (_2522 > _2529))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2669 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2524, cbModelParam._m0[9u].z, fma(_2523, cbModelParam._m0[9u].y, _2522 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2524, cbModelParam._m0[10u].z, fma(_2523, cbModelParam._m0[10u].y, _2522 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2524, cbModelParam._m0[11u].z, fma(_2523, cbModelParam._m0[11u].y, _2522 * cbModelParam._m0[11u].x))), _1955);
            frontier_phi_16_38_ladder = _2669.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2669.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2669.x * cbModelParam._m0[1u].y;
        }
        _2036 = frontier_phi_16_38_ladder_2;
        _2038 = frontier_phi_16_38_ladder_1;
        _2040 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2024 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1114, _1115, _1116), _1955);
        _2036 = _2024.x * cbModelParam._m0[1u].y;
        _2038 = _2024.y * cbModelParam._m0[1u].y;
        _2040 = _2024.z * cbModelParam._m0[1u].y;
    }
    float _2044 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _932);
    float _2045 = isnan(_2044) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2044 : min(cbModelParam._m0[25u].w, _2044));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2099 = fma(_1178, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1170)) + cbModelParam._m0[21u].w;
        float _2103 = fma(_1178, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1170)) + cbModelParam._m0[22u].w;
        float _2107 = fma(_1178, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1170)) + cbModelParam._m0[23u].w;
        float _2110 = fma(_1116, cbModelParam._m0[21u].z, fma(_1115, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1114));
        float _2113 = fma(_1116, cbModelParam._m0[22u].z, fma(_1115, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1114));
        float _2116 = fma(_1116, cbModelParam._m0[23u].z, fma(_1115, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1114));
        float _2225;
        if (_2110 > 0.0)
        {
            _2225 = abs((1.0 - _2099) / _2110);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2099 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2225 = frontier_phi_28_24_ladder;
        }
        float _2542;
        if (_2113 > 0.0)
        {
            _2542 = abs((1.0 - _2103) / _2113);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2103 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2542 = frontier_phi_40_35_ladder;
        }
        float _2880;
        if (_2116 > 0.0)
        {
            _2880 = abs((1.0 - _2107) / _2116);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2107 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2880 = frontier_phi_50_47_ladder;
        }
        float _2882 = isnan(_2542) ? _2225 : (isnan(_2225) ? _2542 : min(_2225, _2542));
        float _2883 = isnan(_2880) ? _2882 : (isnan(_2882) ? _2880 : min(_2882, _2880));
        float _2887 = (_2883 * _2110) + _2099;
        float _2888 = (_2883 * _2113) + _2103;
        float _2889 = (_2883 * _2116) + _2107;
        float _2890 = _2883 * 9.9999997473787516355514526367188e-05;
        float _2891 = (-1.0) - _2890;
        float _2893 = _2890 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2889 > _2893) || ((_2889 < _2891) || ((_2888 > _2893) || ((_2888 < _2891) || ((_2887 < _2891) || (_2887 > _2893))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3011 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2889, cbModelParam._m0[17u].z, fma(_2888, cbModelParam._m0[17u].y, _2887 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2889, cbModelParam._m0[18u].z, fma(_2888, cbModelParam._m0[18u].y, _2887 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2889, cbModelParam._m0[19u].z, fma(_2888, cbModelParam._m0[19u].y, _2887 * cbModelParam._m0[19u].x))), _2045);
            frontier_phi_25_50_ladder = _3011.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3011.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3011.x * cbModelParam._m0[1u].z;
        }
        _2135 = frontier_phi_25_50_ladder_2;
        _2137 = frontier_phi_25_50_ladder_1;
        _2139 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1114, _1115, _1116), _2045);
        _2135 = _2119.x * cbModelParam._m0[1u].z;
        _2137 = _2119.y * cbModelParam._m0[1u].z;
        _2139 = _2119.z * cbModelParam._m0[1u].z;
    }
    float _2152 = (((_1141 * _1090) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2154 = (((_1141 * _1092) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2137 - _2038)) + _2038);
    float _2156 = (((_1141 * _1093) + _1142) * _1106) * ((cbModelParam._m0[1u].w * (_2139 - _2040)) + _2040);
    float _2159 = fma(_2156, cbSceneParam._m0[89u].z, fma(_2154, cbSceneParam._m0[89u].y, _2152 * cbSceneParam._m0[89u].x));
    float _2162 = fma(_2156, cbSceneParam._m0[90u].z, fma(_2154, cbSceneParam._m0[90u].y, _2152 * cbSceneParam._m0[90u].x));
    float _2165 = fma(_2156, cbSceneParam._m0[91u].z, fma(_2154, cbSceneParam._m0[91u].y, _2152 * cbSceneParam._m0[91u].x));
    float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2203 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2207 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2212 = _2199 / _2211;
    float _2213 = _2203 / _2211;
    float _2214 = _2207 / _2211;
    float _2361;
    float _2362;
    float _2363;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2241 = ((uint(_2214 > cbSceneParam._m0[59u].y) + uint(_2214 > cbSceneParam._m0[59u].x)) + uint(_2214 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2242 = _2241 + 43u;
        uint _2250 = _2241 + 44u;
        uint _2258 = _2241 + 45u;
        uint _2266 = _2241 + 46u;
        float _2277 = fma(_2211, cbSceneParam._m0[_2242].w, fma(_2207, cbSceneParam._m0[_2242].z, fma(_2203, cbSceneParam._m0[_2242].y, _2199 * cbSceneParam._m0[_2242].x)));
        float _2281 = fma(_2211, cbSceneParam._m0[_2250].w, fma(_2207, cbSceneParam._m0[_2250].z, fma(_2203, cbSceneParam._m0[_2250].y, _2199 * cbSceneParam._m0[_2250].x)));
        float _2289 = fma(_2211, cbSceneParam._m0[_2266].w, fma(_2207, cbSceneParam._m0[_2266].z, fma(_2203, cbSceneParam._m0[_2266].y, _2199 * cbSceneParam._m0[_2266].x)));
        float _2294 = cbSceneParam._m0[33u].z * _2289;
        float _2296 = cbSceneParam._m0[33u].w * _2289;
        float _2299 = fma(_2211, cbSceneParam._m0[_2258].w, fma(_2207, cbSceneParam._m0[_2258].z, fma(_2203, cbSceneParam._m0[_2258].y, _2199 * cbSceneParam._m0[_2258].x))) / _2289;
        float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_2213 * _2213) + (_2212 * _2212)) + (_2214 * _2214))) * cbSceneParam._m0[33u].y;
        float _4750 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
        float _2354 = (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2294 + _2277) / _2289, (_2296 + _2281) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2296 + _2277) / _2289, (_2281 - _2294) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 - _2294) / _2289, (_2281 - _2296) / _2289), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2277 - _2296) / _2289, (_2294 + _2281) / _2289), _2299), 0.0)).x), vec4(0.25)));
        _2361 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
        _2362 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
        _2363 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2361 = 1.0;
        _2362 = 1.0;
        _2363 = 1.0;
    }
    float _2427;
    float _2429;
    float _2431;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2415 = fma(_2211, cbSceneParam._m0[63u].w, fma(_2207, cbSceneParam._m0[63u].z, fma(_2203, cbSceneParam._m0[63u].y, _2199 * cbSceneParam._m0[63u].x)));
        float _2416 = fma(_2211, cbSceneParam._m0[60u].w, fma(_2207, cbSceneParam._m0[60u].z, fma(_2203, cbSceneParam._m0[60u].y, _2199 * cbSceneParam._m0[60u].x))) / _2415;
        float _2417 = fma(_2211, cbSceneParam._m0[61u].w, fma(_2207, cbSceneParam._m0[61u].z, fma(_2203, cbSceneParam._m0[61u].y, _2199 * cbSceneParam._m0[61u].x))) / _2415;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2416 >= cbSceneParam._m0[64u].x) && (_2417 >= cbSceneParam._m0[64u].y)) && (_2416 <= cbSceneParam._m0[64u].z)) && (_2417 <= cbSceneParam._m0[64u].w))
        {
            float _2555 = fma(_2211, cbSceneParam._m0[62u].w, fma(_2207, cbSceneParam._m0[62u].z, fma(_2203, cbSceneParam._m0[62u].y, _2199 * cbSceneParam._m0[62u].x))) / _2415;
            float _2559 = isnan(cbSceneParam._m0[41u].w) ? _2555 : (isnan(_2555) ? cbSceneParam._m0[41u].w : max(_2555, cbSceneParam._m0[41u].w));
            float _2602 = (cbSceneParam._m0[33u].x - sqrt(((_2213 * _2213) + (_2212 * _2212)) + (_2214 * _2214))) * cbSceneParam._m0[33u].y;
            float _4766 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
            float _2609 = (isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2416, cbSceneParam._m0[33u].w + _2417), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2416, _2417 - cbSceneParam._m0[33u].z), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2416 - cbSceneParam._m0[33u].z, _2417 - cbSceneParam._m0[33u].w), _2559), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2416 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2417), _2559), 0.0)).x), vec4(0.25)));
            float _2613 = 1.0 - (_2609 * cbSceneParam._m0[34u].x);
            float _2614 = 1.0 - (_2609 * cbSceneParam._m0[34u].y);
            float _2615 = 1.0 - (_2609 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2615) ? _2363 : (isnan(_2363) ? _2615 : min(_2363, _2615));
            frontier_phi_37_36_ladder_1 = isnan(_2614) ? _2362 : (isnan(_2362) ? _2614 : min(_2362, _2614));
            frontier_phi_37_36_ladder_2 = isnan(_2613) ? _2361 : (isnan(_2361) ? _2613 : min(_2361, _2613));
        }
        else
        {
            frontier_phi_37_36_ladder = _2363;
            frontier_phi_37_36_ladder_1 = _2362;
            frontier_phi_37_36_ladder_2 = _2361;
        }
        _2427 = frontier_phi_37_36_ladder_2;
        _2429 = frontier_phi_37_36_ladder_1;
        _2431 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2427 = _2361;
        _2429 = _2362;
        _2431 = _2363;
    }
    uvec4 _2436 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2438 = _2436.x * 14u;
    uint _2439 = _2438 + 13u;
    float _2446 = _1106 + (-1.0);
    float _2451 = (cbLight._m0[_2439].x * _2446) + 1.0;
    float _2452 = (cbLight._m0[_2439].y * _2446) + 1.0;
    float _2453 = (cbLight._m0[_2439].z * _2446) + 1.0;
    float _2454 = (cbLight._m0[_2439].w * _2446) + 1.0;
    uint _2455 = _2438 + 5u;
    float _2461 = isnan(1.0) ? _2452 : (isnan(_2452) ? 1.0 : min(_2452, 1.0));
    uint _2465 = _2438 + 4u;
    float _2474 = isnan(1.0) ? _2451 : (isnan(_2451) ? 1.0 : min(_2451, 1.0));
    uint _2478 = _2438 | 1u;
    float _2489 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_929, _930, _931));
    float _2492 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_929, _930, _931));
    float _4802 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _4813 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2497 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * 0.3183098733425140380859375;
    float _2499 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * 0.3183098733425140380859375;
    float _2506 = ((cbLight._m0[_2455].x * _2461) * _2499) + (((cbLight._m0[_2465].x * _2427) * _2474) * _2497);
    float _2507 = ((_2461 * cbLight._m0[_2455].y) * _2499) + (((cbLight._m0[_2465].y * _2429) * _2474) * _2497);
    float _2508 = ((_2461 * cbLight._m0[_2455].z) * _2499) + (((cbLight._m0[_2465].z * _2431) * _2474) * _2497);
    uvec4 _2512 = floatBitsToUint(cbLight._m0[_2438 + 12u]);
    bool _2514 = _2512.x == 0u;
    float _2616;
    float _2618;
    float _2620;
    if (_2514)
    {
        _2616 = _2506;
        _2618 = _2507;
        _2620 = _2508;
    }
    else
    {
        uint _2624 = _2438 + 6u;
        float _2640 = (dot(vec3(cbLight._m0[_2438 + 2u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2641 = _2640 * _2640;
        float _4824 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2642 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2643 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2616 = (((cbLight._m0[_2624].x * 0.3183098733425140380859375) * _2642) * _2643) + _2506;
        _2618 = (((cbLight._m0[_2624].y * 0.3183098733425140380859375) * _2642) * _2643) + _2507;
        _2620 = (((cbLight._m0[_2624].z * 0.3183098733425140380859375) * _2642) * _2643) + _2508;
    }
    bool _2623 = _2512.y == 0u;
    float _2678;
    float _2680;
    float _2682;
    if (_2623)
    {
        _2678 = _2616;
        _2680 = _2618;
        _2682 = _2620;
    }
    else
    {
        uint _2851 = _2438 + 7u;
        float _2867 = (dot(vec3(cbLight._m0[_2438 + 3u].xyz), vec3(_929, _930, _931)) * 0.5) + 0.5;
        float _2868 = _2867 * _2867;
        float _4840 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2869 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2870 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _2678 = (((cbLight._m0[_2851].x * 0.3183098733425140380859375) * _2869) * _2870) + _2616;
        _2680 = (((cbLight._m0[_2851].y * 0.3183098733425140380859375) * _2869) * _2870) + _2618;
        _2682 = (((cbLight._m0[_2851].z * 0.3183098733425140380859375) * _2869) * _2870) + _2620;
    }
    uint _2685 = _2438 + 8u;
    float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2438].w)) * _932) * 0.949999988079071044921875);
    float _2699 = _2698 * _2698;
    float _2700 = cbLight._m0[_2438].x + _1008;
    float _2701 = cbLight._m0[_2438].y + _1009;
    float _2702 = cbLight._m0[_2438].z + _1010;
    float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
    float _2707 = _2706 * _2700;
    float _2708 = _2706 * _2701;
    float _2709 = _2706 * _2702;
    float _2710 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2438].xyz));
    float _4856 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _4867 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _2714 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _2715 = dot(vec3(_929, _930, _931), vec3(_2707, _2708, _2709));
    float _4878 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
    float _2718 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2719 = dot(vec3(cbLight._m0[_2438].xyz), vec3(_2707, _2708, _2709));
    float _4889 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2723 = _2699 * _2699;
    float _2727 = ((_2718 * _2718) * (_2723 + (-1.0))) + 1.0;
    float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0);
    float _2736 = 0.959999978542327880859375 - _1087;
    float _2738 = 0.959999978542327880859375 - _1088;
    float _2739 = 0.959999978542327880859375 - _1089;
    float _2746 = 1.0 - _2699;
    float _2757 = (0.5 / (((_2714 * ((_2713 * _2746) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2746) + _2699) * _2713))) * _2713;
    float _4900 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2759 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2723 / ((_2727 * _2727) * 3.141590118408203125));
    uint _2773 = _2438 + 9u;
    float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2478].w)) * _932) * 0.949999988079071044921875);
    float _2785 = _2784 * _2784;
    float _2786 = cbLight._m0[_2478].x + _1008;
    float _2787 = cbLight._m0[_2478].y + _1009;
    float _2788 = cbLight._m0[_2478].z + _1010;
    float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
    float _2793 = _2792 * _2786;
    float _2794 = _2792 * _2787;
    float _2795 = _2792 * _2788;
    float _2796 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2478].xyz));
    float _4911 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
    float _2799 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
    float _2800 = dot(vec3(_929, _930, _931), vec3(_2793, _2794, _2795));
    float _4922 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2803 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2804 = dot(vec3(cbLight._m0[_2478].xyz), vec3(_2793, _2794, _2795));
    float _4933 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2808 = _2785 * _2785;
    float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
    float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
    float _2826 = 1.0 - _2785;
    float _2836 = (0.5 / (((_2714 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2826) + _2785) * _2799))) * _2799;
    float _4944 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
    float _2838 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
    float _2848 = (((((_2819 * _2736) + _1090) * cbLight._m0[_2773].x) * _2838) * _2461) + ((((cbLight._m0[_2685].x * _2427) * ((_2735 * _2736) + _1090)) * _2759) * _2474);
    float _2849 = (((((_2819 * _2738) + _1092) * cbLight._m0[_2773].y) * _2838) * _2461) + ((((cbLight._m0[_2685].y * _2429) * ((_2735 * _2738) + _1092)) * _2759) * _2474);
    float _2850 = (((((_2819 * _2739) + _1093) * cbLight._m0[_2773].z) * _2838) * _2461) + ((((cbLight._m0[_2685].z * _2431) * ((_2735 * _2739) + _1093)) * _2759) * _2474);
    float _2906;
    float _2908;
    float _2910;
    if (_2514)
    {
        _2906 = _2848;
        _2908 = _2849;
        _2910 = _2850;
    }
    else
    {
        uint _2912 = _2438 + 2u;
        uint _2916 = _2438 + 10u;
        float _2930 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2912].w)) * _932) * 0.949999988079071044921875);
        float _2931 = _2930 * _2930;
        float _2932 = cbLight._m0[_2912].x + _1008;
        float _2933 = cbLight._m0[_2912].y + _1009;
        float _2934 = cbLight._m0[_2912].z + _1010;
        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
        float _2939 = _2938 * _2932;
        float _2940 = _2938 * _2933;
        float _2941 = _2938 * _2934;
        float _2942 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_2912].xyz));
        float _4955 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
        float _2945 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
        float _2946 = dot(vec3(_929, _930, _931), vec3(_2939, _2940, _2941));
        float _4966 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2949 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
        float _2950 = dot(vec3(cbLight._m0[_2912].xyz), vec3(_2939, _2940, _2941));
        float _4977 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2954 = _2931 * _2931;
        float _2958 = ((_2949 * _2949) * (_2954 + (-1.0))) + 1.0;
        float _2965 = exp2(log2(1.0 - (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) * 5.0);
        float _2972 = 1.0 - _2931;
        float _2982 = (0.5 / (((_2714 * ((_2945 * _2972) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2972) + _2931) * _2945))) * _2945;
        float _4988 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
        float _2984 = (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0))) * (_2954 / ((_2958 * _2958) * 3.141590118408203125));
        float _2985 = isnan(1.0) ? _2453 : (isnan(_2453) ? 1.0 : min(_2453, 1.0));
        _2906 = (((((_2965 * _2736) + _1090) * cbLight._m0[_2916].x) * _2984) * _2985) + _2848;
        _2908 = (((((_2965 * _2738) + _1092) * cbLight._m0[_2916].y) * _2984) * _2985) + _2849;
        _2910 = (((((_2965 * _2739) + _1093) * cbLight._m0[_2916].z) * _2984) * _2985) + _2850;
    }
    float _3016;
    float _3018;
    float _3020;
    if (_2623)
    {
        _3016 = _2906;
        _3018 = _2908;
        _3020 = _2910;
    }
    else
    {
        uint _3027 = _2438 + 3u;
        uint _3031 = _2438 + 11u;
        float _3045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3027].w)) * _932) * 0.949999988079071044921875);
        float _3046 = _3045 * _3045;
        float _3047 = cbLight._m0[_3027].x + _1008;
        float _3048 = cbLight._m0[_3027].y + _1009;
        float _3049 = cbLight._m0[_3027].z + _1010;
        float _3053 = inversesqrt(dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049)));
        float _3054 = _3053 * _3047;
        float _3055 = _3053 * _3048;
        float _3056 = _3053 * _3049;
        float _3057 = dot(vec3(_929, _930, _931), vec3(cbLight._m0[_3027].xyz));
        float _5004 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3060 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
        float _3061 = dot(vec3(_929, _930, _931), vec3(_3054, _3055, _3056));
        float _5015 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3064 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _3065 = dot(vec3(cbLight._m0[_3027].xyz), vec3(_3054, _3055, _3056));
        float _5026 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3069 = _3046 * _3046;
        float _3073 = ((_3064 * _3064) * (_3069 + (-1.0))) + 1.0;
        float _3080 = exp2(log2(1.0 - (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0)))) * 5.0);
        float _3087 = 1.0 - _3046;
        float _3097 = (0.5 / (((_2714 * ((_3060 * _3087) + _3046)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _3087) + _3046) * _3060))) * _3060;
        float _5037 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3099 = (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3069 / ((_3073 * _3073) * 3.141590118408203125));
        float _3100 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
        _3016 = (((((_3080 * _2736) + _1090) * cbLight._m0[_3031].x) * _3099) * _3100) + _2906;
        _3018 = (((((_3080 * _2738) + _1092) * cbLight._m0[_3031].y) * _3099) * _3100) + _2908;
        _3020 = (((((_3080 * _2739) + _1093) * cbLight._m0[_3031].z) * _3099) * _3100) + _2910;
    }
    float _3166;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_2436.y == 0u)
    {
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.x;
        uint _3133 = uint((float(_3121.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _3122))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _3122)));
        float _3143 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3144 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
        uint _3147 = uint(isnan(14.0) ? _3144 : (isnan(_3144) ? 14.0 : min(_3144, 14.0)));
        uvec4 _3152 = texelFetch(g_lightClusterGridBuffer, int(((_3147 << 2u) + (_3133 << 6u)) >> 2u));
        uint _3153 = _3152.x;
        uint _3154 = _3121.z;
        float _3233;
        float _3235;
        float _3237;
        float _3239;
        float _3241;
        float _3243;
        if (((((1u << ((_3154 >> 4u) & 15u)) + 4294967295u) & _3153) == 0u) || ((_3154 & 240u) == 0u))
        {
            _3233 = 0.0;
            _3235 = 0.0;
            _3237 = 0.0;
            _3239 = 0.0;
            _3241 = 0.0;
            _3243 = 0.0;
        }
        else
        {
            float _3234;
            float _3236;
            float _3238;
            float _3240;
            float _3242;
            float _3244;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            uint _3392 = 0u;
            uint _3401;
            bool _3402;
            for (;;)
            {
                _3401 = texelFetch(g_lightClassification, int((((_3147 << 5u) + (_3133 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                _3402 = _3401 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3402)
                {
                    frontier_phi_71_pred = _3391;
                    frontier_phi_71_pred_1 = _3390;
                    frontier_phi_71_pred_2 = _3389;
                    frontier_phi_71_pred_3 = _3388;
                    frontier_phi_71_pred_4 = _3387;
                    frontier_phi_71_pred_5 = _3386;
                }
                else
                {
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    uint _3537;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3401;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    for (;;)
                    {
                        uint _3541 = uint(findLSB(_3537)) + (_3392 << 5u);
                        uint _3538 = (_3537 + 4294967295u) & _3537;
                        uint _3543 = _3541 * 48u;
                        vec4 _3557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3543)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3543 + 3u)).x));
                        uint _3563 = (_3541 * 48u) + 4u;
                        vec4 _3576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3563)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 3u)).x));
                        uint _3582 = (_3541 * 48u) + 8u;
                        vec3 _3593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3582)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3582 + 2u)).x));
                        float _3597 = _3557.x - _2212;
                        float _3598 = _3557.y - _2213;
                        float _3599 = _3557.z - _2214;
                        float _3600 = dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599));
                        float _3603 = inversesqrt(_3600);
                        float _3604 = _3603 * _3597;
                        float _3605 = _3603 * _3598;
                        float _3606 = _3603 * _3599;
                        float _3607 = dot(vec3(_1047, _1050, _1053), vec3(_3604, _3605, _3606));
                        float _3612 = 1.0 - (_3600 * _3557.w);
                        float _5063 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3613 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3614 = sqrt(_3600) * _3576.w;
                        float _3617 = 1.39999997615814208984375 / (_3614 + 1.39999997615814208984375);
                        float _3618 = _3617 * _3617;
                        float _3621 = ((1.0 - _3618) * _3607) + _3618;
                        float _3624 = _3614 * _3614;
                        float _3628 = ((isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0))) * _3613) / ((_3624 * 0.699999988079071044921875) + 1.0);
                        float _3632 = (-0.0) - _2212;
                        float _3633 = (-0.0) - _2213;
                        float _3634 = (-0.0) - _2214;
                        float _3638 = inversesqrt(dot(vec3(_3632, _3633, _3634), vec3(_3632, _3633, _3634)));
                        float _3639 = _3638 * _3632;
                        float _3640 = _3638 * _3633;
                        float _3641 = _3638 * _3634;
                        float _3648 = exp2(log2(1.0 / ((_3624 * 3.5) + 5.0)) * 0.25);
                        float _3649 = 1.0 - _1122;
                        float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                        float _3657 = _3656 * _3656;
                        float _3658 = _3657 * _3657;
                        float _3659 = _3639 + _3604;
                        float _3660 = _3640 + _3605;
                        float _3661 = _3641 + _3606;
                        float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                        float _3669 = dot(vec3(_1047, _1050, _1053), vec3(_3639, _3640, _3641));
                        float _5079 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                        float _3672 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3673 = dot(vec3(_1047, _1050, _1053), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                        float _5090 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                        float _3676 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                        float _3681 = _3617 * _3657;
                        float _3682 = _3681 * _3681;
                        float _3685 = ((1.0 - _3682) * _3607) + _3682;
                        float _5101 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                        float _3686 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3687 = 1.0 - _3657;
                        float _3697 = (0.5 / (((_3686 * ((_3672 * _3687) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3686 * _3687) + _3657) * _3672))) * _3686;
                        float _5112 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                        float _3708 = (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0)))) / ((_3680 * _3680) * ((_3624 * 2.1991131305694580078125) + 3.141590118408203125))) * _3613;
                        _3461 = (_3628 * _3576.x) + _3534;
                        _3462 = (_3628 * _3576.y) + _3535;
                        _3463 = (_3628 * _3576.z) + _3536;
                        _3458 = (_3708 * _3593.x) + _3531;
                        _3459 = (_3708 * _3593.y) + _3532;
                        _3460 = (_3708 * _3593.z) + _3533;
                        if (_3538 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3538;
                        }
                    }
                    frontier_phi_71_pred = _3463;
                    frontier_phi_71_pred_1 = _3462;
                    frontier_phi_71_pred_2 = _3461;
                    frontier_phi_71_pred_3 = _3460;
                    frontier_phi_71_pred_4 = _3459;
                    frontier_phi_71_pred_5 = _3458;
                }
                _3244 = frontier_phi_71_pred;
                _3242 = frontier_phi_71_pred_1;
                _3240 = frontier_phi_71_pred_2;
                _3238 = frontier_phi_71_pred_3;
                _3236 = frontier_phi_71_pred_4;
                _3234 = frontier_phi_71_pred_5;
                uint _3393 = _3392 + 1u;
                if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3386 = _3234;
                    _3387 = _3236;
                    _3388 = _3238;
                    _3389 = _3240;
                    _3390 = _3242;
                    _3391 = _3244;
                    _3392 = _3393;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3233 = _3234;
            _3235 = _3236;
            _3237 = _3238;
            _3239 = _3240;
            _3241 = _3242;
            _3243 = _3244;
        }
        uvec4 _3247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3248 = _3247.z;
        uint _3250 = (_3248 >> 8u) & 15u;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        float _3364;
        if (((4294967295u << _3250) & _3153) == 0u)
        {
            _3354 = _3233;
            _3356 = _3235;
            _3358 = _3237;
            _3360 = _3239;
            _3362 = _3241;
            _3364 = _3243;
        }
        else
        {
            float _3379 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
            float _3380 = _3379 * _2212;
            float _3381 = _3379 * _2213;
            float _3382 = _3379 * _2214;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3250 < ((_3248 >> 12u) & 15u))
            {
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3365;
                float _3514 = _3233;
                float _3515 = _3235;
                float _3516 = _3237;
                float _3517 = _3239;
                float _3518 = _3241;
                float _3519 = _3243;
                uint _3520 = _3250;
                uint _3529;
                bool _3530;
                for (;;)
                {
                    _3529 = texelFetch(g_lightClassification, int((((_3147 << 5u) + (_3133 << 9u)) + (_3520 << 2u)) >> 2u)).x;
                    _3530 = _3529 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3530)
                    {
                        frontier_phi_82_pred = _3519;
                        frontier_phi_82_pred_1 = _3518;
                        frontier_phi_82_pred_2 = _3517;
                        frontier_phi_82_pred_3 = _3516;
                        frontier_phi_82_pred_4 = _3515;
                        frontier_phi_82_pred_5 = _3514;
                    }
                    else
                    {
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        uint _3741 = _3529;
                        uint _3742;
                        vec4 _3767;
                        float _3768;
                        vec4 _3783;
                        vec3 _3795;
                        vec4 _3810;
                        vec4 _3825;
                        float _3871;
                        bool _3872;
                        for (;;)
                        {
                            uint _3752 = ((_3520 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3741));
                            _3742 = (_3741 + 4294967295u) & _3741;
                            uint _3754 = _3752 * 40u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            _3768 = _3767.w;
                            uint _3770 = (_3752 * 40u) + 4u;
                            _3783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3770 + 3u)).x));
                            uint _3785 = (_3752 * 40u) + 8u;
                            _3795 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3785)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3785 + 2u)).x));
                            uint _3797 = (_3752 * 40u) + 16u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3812 = (_3752 * 40u) + 20u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            uint _3827 = (_3752 * 40u) + 24u;
                            vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3846 = (_3752 * 40u) + 28u;
                            vec4 _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            _3871 = fma(_2214, _3859.z, fma(_2213, _3859.y, _3859.x * _2212)) + _3859.w;
                            _3872 = !((fma(_2214, _3840.z, fma(_2213, _3840.y, _3840.x * _2212)) + _3840.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3872)
                            {
                                float _3899 = _3767.x - _2212;
                                float _3900 = _3767.y - _2213;
                                float _3901 = _3767.z - _2214;
                                float _3902 = dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901));
                                float _3905 = inversesqrt(_3902);
                                float _3906 = _3905 * _3899;
                                float _3907 = _3905 * _3900;
                                float _3908 = _3905 * _3901;
                                float _3912 = 1.0 - (_3902 / (_3768 * _3768));
                                float _5123 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3917 = sqrt(_3902) * _3783.w;
                                float _3919 = 1.39999997615814208984375 / (_3917 + 1.39999997615814208984375);
                                float _3920 = _3919 * _3919;
                                float _3923 = ((1.0 - _3920) * dot(vec3(_3906, _3907, _3908), vec3(_1047, _1050, _1053))) + _3920;
                                float _3926 = _3917 * _3917;
                                float _3930 = (fma(_2214, _3810.z, fma(_2213, _3810.y, _3810.x * _2212)) + _3810.w) / _3871;
                                float _3931 = (fma(_2214, _3825.z, fma(_2213, _3825.y, _3825.x * _2212)) + _3825.w) / _3871;
                                float _3935 = 1.0 - dot(vec2(_3930, _3931), vec2(_3930, _3931));
                                float _5139 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3937 = _3936 * (((isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0))) * _3913) / ((_3926 * 0.699999988079071044921875) + 1.0));
                                float _3949 = exp2(log2(1.0 / ((_3926 * 3.5) + 5.0)) * 0.25);
                                float _3950 = 1.0 - _1122;
                                float _3957 = sqrt(1.0 - ((1.0 - (_3950 * _3950)) * (1.0 - (_3949 * _3949))));
                                float _3958 = _3957 * _3957;
                                float _3959 = _3958 * _3958;
                                float _3960 = _3906 - _3380;
                                float _3961 = _3907 - _3381;
                                float _3962 = _3908 - _3382;
                                float _3966 = inversesqrt(dot(vec3(_3960, _3961, _3962), vec3(_3960, _3961, _3962)));
                                float _3970 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3380, (-0.0) - _3381, (-0.0) - _3382));
                                float _5150 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3974 = dot(vec3(_1047, _1050, _1053), vec3(_3966 * _3960, _3966 * _3961, _3966 * _3962));
                                float _5161 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3977 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3981 = ((_3977 * _3977) * (_3959 + (-1.0))) + 1.0;
                                float _3982 = _3919 * _3958;
                                float _3983 = _3982 * _3982;
                                float _3989 = ((1.0 - _3983) * dot(vec3(_1047, _1050, _1053), vec3(_3906, _3907, _3908))) + _3983;
                                float _5172 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3990 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3991 = 1.0 - _3958;
                                float _4001 = (0.5 / (((_3990 * ((_3973 * _3991) + _3958)) + 9.9999999392252902907785028219223e-09) + (((_3990 * _3991) + _3958) * _3973))) * _3990;
                                float _5183 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4011 = (_3936 * _3913) * (((_3959 * 3.1415927410125732421875) * (isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0)))) / ((_3981 * _3981) * ((_3926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3937 * _3783.z;
                                frontier_phi_88_pred_1 = _3937 * _3783.y;
                                frontier_phi_88_pred_2 = _3937 * _3783.x;
                                frontier_phi_88_pred_3 = _4011 * _3795.z;
                                frontier_phi_88_pred_4 = _4011 * _3795.y;
                                frontier_phi_88_pred_5 = _4011 * _3795.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4020 = frontier_phi_88_pred;
                            _4019 = frontier_phi_88_pred_1;
                            _4018 = frontier_phi_88_pred_2;
                            _4017 = frontier_phi_88_pred_3;
                            _4016 = frontier_phi_88_pred_4;
                            _4015 = frontier_phi_88_pred_5;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            _3724 = _4017 + _3737;
                            if (_3742 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3742;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3727;
                        frontier_phi_82_pred_1 = _3726;
                        frontier_phi_82_pred_2 = _3725;
                        frontier_phi_82_pred_3 = _3724;
                        frontier_phi_82_pred_4 = _3723;
                        frontier_phi_82_pred_5 = _3722;
                    }
                    _3365 = frontier_phi_82_pred;
                    _3363 = frontier_phi_82_pred_1;
                    _3361 = frontier_phi_82_pred_2;
                    _3359 = frontier_phi_82_pred_3;
                    _3357 = frontier_phi_82_pred_4;
                    _3355 = frontier_phi_82_pred_5;
                    uint _3521 = _3520 + 1u;
                    if (_3521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3514 = _3355;
                        _3515 = _3357;
                        _3516 = _3359;
                        _3517 = _3361;
                        _3518 = _3363;
                        _3519 = _3365;
                        _3520 = _3521;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3361;
                frontier_phi_63_64_ladder_1 = _3365;
                frontier_phi_63_64_ladder_2 = _3363;
                frontier_phi_63_64_ladder_3 = _3359;
                frontier_phi_63_64_ladder_4 = _3357;
                frontier_phi_63_64_ladder_5 = _3355;
            }
            else
            {
                frontier_phi_63_64_ladder = _3239;
                frontier_phi_63_64_ladder_1 = _3243;
                frontier_phi_63_64_ladder_2 = _3241;
                frontier_phi_63_64_ladder_3 = _3237;
                frontier_phi_63_64_ladder_4 = _3235;
                frontier_phi_63_64_ladder_5 = _3233;
            }
            _3354 = frontier_phi_63_64_ladder_5;
            _3356 = frontier_phi_63_64_ladder_4;
            _3358 = frontier_phi_63_64_ladder_3;
            _3360 = frontier_phi_63_64_ladder;
            _3362 = frontier_phi_63_64_ladder_2;
            _3364 = frontier_phi_63_64_ladder_1;
        }
        float _3369 = isnan(1.0) ? _1106 : (isnan(_1106) ? 1.0 : min(_1106, 1.0));
        _3166 = (_3369 * _3360) + _2678;
        _3168 = (_3369 * _3362) + _2680;
        _3170 = (_3369 * _3364) + _2682;
        _3172 = ((_3354 * _1090) * _3369) + _3016;
        _3174 = ((_3356 * _1092) * _3369) + _3018;
        _3176 = ((_3358 * _1093) * _3369) + _3020;
    }
    else
    {
        _3166 = _2678;
        _3168 = _2680;
        _3170 = _2682;
        _3172 = _3016;
        _3174 = _3018;
        _3176 = _3020;
    }
    float _5199 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _5210 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _5221 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
    float _3193 = ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3166 + ((isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0))) * _1106))) + ((_3172 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3194 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3168 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1106))) + ((_3174 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    float _3195 = ((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3170 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1106))) + ((_3176 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1944)) * cbPerFrame._m0[3u].x);
    uint _3196 = _288 + 6u;
    float _3204 = _1028 / cbSceneParam._m0[86u].x;
    float _3205 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _3219 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3204, _3205, (log2((isnan(cbSceneParam._m0[77u].w) ? _951 : (isnan(_951) ? cbSceneParam._m0[77u].w : min(_951, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3221 = _3219.x;
    float _3222 = _3219.y;
    float _3223 = _3219.z;
    float _3224 = _3219.w;
    float _3296;
    float _3298;
    float _3300;
    float _3302;
    if (_951 > cbSceneParam._m0[78u].w)
    {
        float _3258 = isnan(_951) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _951 : min(cbSceneParam._m0[80u].w, _951));
        float _3259 = _3258 / _951;
        float _3270 = _3259 * _1001;
        float _3271 = _1002 * _3259;
        float _3272 = (-0.0) - _3271;
        float _3274 = _3259 * _1003;
        float _3276 = (cbSceneParam._m0[77u].w * _3272) / _3258;
        float _3277 = _3276 + cbSceneParam._m0[79u].w;
        float _3278 = cbSceneParam._m0[79u].w - _3271;
        float _3284 = sqrt(((_3270 * _3270) + (_3271 * _3271)) + (_3274 * _3274));
        float _3287 = (1.0 - (cbSceneParam._m0[77u].w / _3258)) * _3284;
        float _3292 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3294 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3471;
        if (abs((_3272 - _3276) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3471 = ((((_3277 > 0.0) ? exp2(_3292 * _3277) : (2.0 - exp2(_3294 * _3277))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3287;
        }
        else
        {
            float _3415 = 1.0 / cbSceneParam._m0[80u].x;
            float _3416 = isnan(_3278) ? _3277 : (isnan(_3277) ? _3278 : max(_3277, _3278));
            float _3417 = isnan(_3278) ? _3277 : (isnan(_3277) ? _3278 : min(_3277, _3278));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            float _3427 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : min(_3417, 0.0));
            _3471 = ((abs(_3284 / _3272) * cbSceneParam._m0[80u].y) * ((((_3426 - _3427) * 2.0) - ((exp2(_3292 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0)))) - exp2(_3292 * (isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0))))) * _3415)) - ((exp2(_3294 * _3426) - exp2(_3294 * _3427)) * _3415))) + (_3287 * cbSceneParam._m0[80u].z);
        }
        vec4 _3473 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3204, _3205, 1.0), 0.0);
        float _3482 = exp2((_3471 * (-1.44269502162933349609375)) * (1.0 - _3473.w));
        float _3483 = log2(_3482);
        float _3499 = log2(_3224);
        _3296 = (exp2(_3499 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].x)) * _3473.x) / cbSceneParam._m0[78u].x)) + _3221;
        _3298 = (exp2(_3499 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].y)) * _3473.y) / cbSceneParam._m0[78u].y)) + _3222;
        _3300 = (exp2(_3499 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3483 * cbSceneParam._m0[78u].z)) * _3473.z) / cbSceneParam._m0[78u].z)) + _3223;
        _3302 = _3482 * _3224;
    }
    else
    {
        _3296 = _3221;
        _3298 = _3222;
        _3300 = _3223;
        _3302 = _3224;
    }
    bool _3509;
    vec4 _3312;
    vec4 _3334;
    float _3336;
    float _3340;
    float _3341;
    float _3342;
    float _3343;
    bool _3353;
    for (;;)
    {
        _3312 = cbMatDynParam._m0[0u];
        float _3314 = roundEven(_3312.y);
        bool _3315 = _3314 == 3.0;
        float _3316 = log2(_3302);
        float _3323 = exp2(_3316 * cbSceneParam._m0[78u].x) * _3193;
        float _3324 = exp2(_3316 * cbSceneParam._m0[78u].y) * _3194;
        float _3325 = exp2(_3316 * cbSceneParam._m0[78u].z) * _3195;
        float _3332 = _1017 + (-0.5);
        _3334 = cbMtdParam._m0[1u];
        _3336 = _3334.y * _3332;
        float _3339 = (_3314 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3340 = _3339 * (_3315 ? _3323 : (_3323 + (cbSceneParam._m0[72u].w * _3296)));
        _3341 = _3339 * (_3315 ? _3324 : (_3324 + (cbSceneParam._m0[72u].w * _3298)));
        _3342 = _3339 * (_3315 ? _3325 : (_3325 + (cbSceneParam._m0[72u].w * _3300)));
        _3343 = _3332 * 0.999000012874603271484375;
        _3353 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3353)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3343) < 0.5)
            {
                _3509 = true;
                break;
            }
        }
        uint _3450 = _1066 + uint(_3312.w);
        if ((cbInstanceData._m0[_3450].w < 1.0) && ((cbInstanceData._m0[_3450].w + _3343) < 0.5))
        {
            _3509 = true;
            break;
        }
        if ((_3336 + 1.0) < _3334.x)
        {
            _3509 = true;
            break;
        }
        _3509 = false;
        break;
    }
    float _3713;
    if (_3509)
    {
        discard_state = true;
        _3713 = 0.0;
    }
    else
    {
        _3713 = cbInstanceData._m0[_3196].w;
    }
    SV_Target.x = _3340;
    SV_Target.y = _3341;
    SV_Target.z = _3342;
    SV_Target.w = _3713;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3196].w;
    discard_exit();
}


