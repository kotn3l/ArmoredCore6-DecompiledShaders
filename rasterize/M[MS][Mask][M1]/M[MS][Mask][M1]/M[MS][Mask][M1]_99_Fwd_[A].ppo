#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1651;
float _4028;
float _4029;
float _4030;
float _4031;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _248 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _249 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _250 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _256 = inversesqrt(dot(vec3(_248, _249, _250), vec3(_248, _249, _250)));
    float _257 = _256 * _248;
    float _258 = _256 * _249;
    float _259 = _256 * _250;
    float _263 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = _263 * NORMAL.x;
    float _265 = _263 * NORMAL.y;
    float _266 = _263 * NORMAL.z;
    float _270 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = _270 * TANGENT.x;
    float _272 = _270 * TANGENT.y;
    float _273 = _270 * TANGENT.z;
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _285 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4040 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _4051 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4062 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    uint _295 = uint(roundEven(NORMAL.w)) * 13u;
    uint _300 = _295 + 1u;
    uint _304 = _295 + 2u;
    float _313 = sqrt(((cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x)) + (cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x));
    float _314 = _313 * TEXCOORD.z;
    float _315 = _313 * TEXCOORD.w;
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _314) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _315) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _382 = _377.x * cbMtdParam._m0[11u].x;
    float _383 = _377.y * cbMtdParam._m0[11u].y;
    float _384 = _377.z * cbMtdParam._m0[11u].z;
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _314) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _315) + cbTextureTilingScale._m0[5u].w));
    vec4 _422 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _456 = _454.x;
    float _468 = dot(vec4(_456, _454.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _485 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _422.x) * 2.0) - ((((_456 - _468) * cbMtdParam._m0[23u].w) + _468) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4073 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _493 = (_486 * ((_403.x * cbMtdParam._m0[12u].x) - _382)) + _382;
    float _494 = (_486 * ((_403.y * cbMtdParam._m0[12u].y) - _383)) + _383;
    float _495 = (_486 * ((_403.z * cbMtdParam._m0[12u].z) - _384)) + _384;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _314) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _315) + cbTextureTilingScale._m0[3u].w));
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _534 = _532.x;
    float _544 = dot(vec4(_534, _532.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _558 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _422.y) * 2.0) - ((((_534 - _544) * cbMtdParam._m0[23u].w) + _544) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4084 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _559 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _569 = (_351.x * cbMtdParam._m0[9u].x) * ((_559 * ((_512.x * cbMtdParam._m0[13u].x) - _493)) + _493);
    float _570 = (_351.y * cbMtdParam._m0[9u].y) * ((_559 * ((_512.y * cbMtdParam._m0[13u].y) - _494)) + _494);
    float _571 = (_351.z * cbMtdParam._m0[9u].z) * ((_559 * ((_512.z * cbMtdParam._m0[13u].z) - _495)) + _495);
    float _575 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _328.x) * _569;
    float _578 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _328.y) * _570;
    float _581 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _328.z) * _571;
    float _589 = (((_569 - _575) * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) + _575) * 4.55000019073486328125;
    float _591 = (((_570 - _578) * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) + _578) * 4.55000019073486328125;
    float _593 = (((_571 - _581) * (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0)))) + _581) * 4.55000019073486328125;
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _314) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _315) + cbTextureTilingScale._m0[14u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _314) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _315) + cbTextureTilingScale._m0[20u].w));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _314) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _315) + cbTextureTilingScale._m0[4u].w));
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _675 = _673.x;
    float _676 = _673.y;
    float _677 = _673.z;
    float _684 = ((_656.x - _675) * _486) + _675;
    float _685 = ((_656.y - _676) * _486) + _676;
    float _686 = ((_656.z - _677) * _486) + _677;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _314) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _315) + cbTextureTilingScale._m0[2u].w));
    float _711 = ((_698.z - _686) * _559) + _686;
    float _714 = ((((_698.x - _684) * _559) + _684) * 2.0) + (-1.0);
    float _715 = ((((_698.y - _685) * _559) + _685) * 2.0) + (-1.0);
    float _716 = dot(vec2(_714, _715), vec2(_714, _715));
    float _4095 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    vec4 _739 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _751 = (_714 + ((((_631.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_739.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _752 = (_715 + ((((_631.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_739.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _755 = fma(_721, _264, fma(_752, _271, _751 * _257));
    float _758 = fma(_721, _265, fma(_752, _272, _751 * _258));
    float _761 = fma(_721, _266, fma(_752, _273, _751 * _259));
    float _765 = inversesqrt(dot(vec3(_755, _758, _761), vec3(_755, _758, _761)));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _314) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _315) + cbTextureTilingScale._m0[11u].w));
    float _794 = _792.x;
    float _795 = 1.0 - _794;
    float _804 = (cbMtdParam._m0[19u].x + dot(vec4(_765 * _755, _765 * _758, _765 * _761, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_794 - _795) * cbMtdParam._m0[24u].z) + _795) * cbMtdParam._m0[21u].z);
    float _4106 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _805 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _807 = (-0.0) - cbMtdParam._m0[24u].x;
    float _809 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _810 = isnan(1.0) ? _809 : (isnan(_809) ? 1.0 : min(_809, 1.0));
    float _817 = _805 - ((_805 * TEXCOORD_8.x) * _810);
    float _818 = _805 - ((_805 * TEXCOORD_8.y) * _810);
    float _819 = _805 - ((_805 * TEXCOORD_8.z) * _810);
    float _826 = (_817 * ((_612.x * cbMtdParam._m0[18u].x) - _589)) + _589;
    float _827 = (_818 * ((_612.y * cbMtdParam._m0[18u].y) - _591)) + _591;
    float _828 = (_819 * ((_612.z * cbMtdParam._m0[18u].z) - _593)) + _593;
    vec4 _840 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _314) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _315) + cbTextureTilingScale._m0[19u].w));
    float _842 = _840.x;
    float _843 = 1.0 - _842;
    float _869 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_842 - _843) * cbMtdParam._m0[24u].w) + _843) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4127 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    float _870 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _878 = ((((cbMtdParam._m0[10u].x - _826) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _870) + _826;
    float _879 = ((((cbMtdParam._m0[10u].y - _827) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _870) + _827;
    float _880 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _828)) * _870) + _828;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _908 = _906.x;
    float _925 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _314) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _315) + cbTextureTilingScale._m0[9u].w)).x - _908) * _486) + _908;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _314) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _315) + cbTextureTilingScale._m0[21u].w)).x - _925) * _559) + _925;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _942) * cbMtdParam._m0[19u].z) + _942;
    float _948 = _946 - (_946 * _817);
    float _950 = _948 - (_948 * _870);
    float _955 = (((_631.z - _711) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _711;
    float _959 = ((_739.z - _955) * cbMtdParam._m0[19u].w) + _955;
    vec4 _973 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _314) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _315) + cbTextureTilingScale._m0[15u].w));
    float _980 = (_973.x * 2.0) + (-1.0);
    float _981 = (_973.y * 2.0) + (-1.0);
    float _982 = dot(vec2(_980, _981), vec2(_980, _981));
    float _4138 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _990 = ((_973.z - _959) * _817) + _959;
    float _993 = ((cbMtdParam._m0[23u].x - _990) * _870) + _990;
    vec4 _1016 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _314) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _315) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4149 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1039 = ((sqrt(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) - _721) * _819) + _721;
    float _1042 = (((_980 - _751) * _817) + _751) + (cbMtdParam._m0[21u].x * _751);
    float _1043 = (((_981 - _752) * _818) + _752) + (cbMtdParam._m0[21u].x * _752);
    float _1054 = (((_1022 - _1042) + (_1042 * cbMtdParam._m0[22u].z)) * _870) + _1042;
    float _1055 = (((_1023 - _1043) + (_1043 * cbMtdParam._m0[22u].z)) * _870) + _1043;
    float _1056 = (_870 * (sqrt(1.0 - (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0)))) - _1039)) + _1039;
    float _1058 = cbMtdParam._m0[22u].x + _739.w;
    float _1061 = fma(_1056, _264, fma(_1055, _271, _1054 * _257));
    float _1064 = fma(_1056, _265, fma(_1055, _272, _1054 * _258));
    float _1067 = fma(_1056, _266, fma(_1055, _273, _1054 * _259));
    float _1071 = inversesqrt(dot(vec3(_1061, _1064, _1067), vec3(_1061, _1064, _1067)));
    float _1072 = _1071 * _1061;
    float _1073 = _1071 * _1064;
    float _1074 = _1071 * _1067;
    float _4160 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1075 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _4171 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4182 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4193 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4204 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _4215 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _1080 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1094 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1144 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1134);
    float _1145 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1134);
    float _1146 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1134);
    float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
    float _1151 = _1144 * _1150;
    float _1152 = _1145 * _1150;
    float _1153 = _1146 * _1150;
    vec4 _1158 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1160 = _1158.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1332 = sqrt(((_1144 * _1144) + (_1145 * _1145)) + (_1146 * _1146));
        float _1338 = (cbMatDynParam._m0[5u].x * _1332) + cbMatDynParam._m0[5u].y;
        float _4226 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1343 = (cbMatDynParam._m0[5u].z * _1332) + cbMatDynParam._m0[5u].w;
        float _4237 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) - _1339)) + _1339) < ((_1160 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1171 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1172 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1190 = fma(_1074, cbSceneParam._m0[5u].z, fma(_1073, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1072));
    float _1193 = fma(_1074, cbSceneParam._m0[6u].z, fma(_1073, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1072));
    float _1196 = fma(_1074, cbSceneParam._m0[7u].z, fma(_1073, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1072));
    uint _1209 = _295 + 9u;
    uint _1210 = _1209 + uint(cbMatDynParam._m0[0u].w);
    float _1216 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * cbInstanceData._m0[_1210].x;
    float _1217 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0)))) * cbInstanceData._m0[_1210].y;
    float _1218 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_1210].z;
    float _4248 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1220 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _1222 = 1.0 - _1080;
    float _1223 = _1219 * _1222;
    float _1224 = _1220 * _1222;
    float _1225 = _1221 * _1222;
    float _1230 = (_1219 + (-0.039999999105930328369140625)) * _1080;
    float _1231 = (_1220 + (-0.039999999105930328369140625)) * _1080;
    float _1232 = (_1221 + (-0.039999999105930328369140625)) * _1080;
    float _1233 = _1230 + 0.039999999105930328369140625;
    float _1235 = _1231 + 0.039999999105930328369140625;
    float _1236 = _1232 + 0.039999999105930328369140625;
    vec4 _1245 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1171, cbSceneParam._m0[86u].y * _1172));
    float _1249 = ((isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * TEXCOORD_5.w) * _1245.x;
    float _1250 = dot(vec3(_1072, _1073, _1074), vec3(_1151, _1152, _1153));
    float _1253 = _1250 * 2.0;
    float _1257 = (_1253 * _1072) - _1151;
    float _1258 = (_1253 * _1073) - _1152;
    float _1259 = (_1253 * _1074) - _1153;
    float _1263 = abs(dot(vec3(_1151, _1152, _1153), vec3(_1072, _1073, _1074)));
    float _4281 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1265 = sqrt(_1075);
    float _1278 = exp2((_1265 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1265 * 3.0));
    float _1284 = (1.0 - _1278) * ((_1265 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1285 = _1278 * _1265;
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1650;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1375 = fma(_1321, cbModelParam._m0[26u].z, fma(_1317, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313));
        float _1379 = fma(_1321, cbModelParam._m0[27u].z, fma(_1317, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313));
        float _1383 = fma(_1321, cbModelParam._m0[28u].z, fma(_1317, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313));
        float _1408 = _1313 + _1072;
        float _1409 = _1317 + _1073;
        float _1410 = _1321 + _1074;
        float _1420 = fma(_1410, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408)) - _1375;
        float _1421 = fma(_1410, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408)) - _1379;
        float _1422 = fma(_1410, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408)) - _1383;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1375 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1379 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[34u].z) + ((((((_1383 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1478 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1444.x + (-0.5));
        float _1480 = _1478 * (_1444.y + (-0.5));
        float _1481 = _1478 * (_1444.z + (-0.5));
        float _1488 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1451.x + (-0.5));
        float _1490 = _1488 * (_1451.y + (-0.5));
        float _1491 = _1488 * (_1451.z + (-0.5));
        float _1498 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1458.x + (-0.5));
        float _1500 = _1498 * (_1458.y + (-0.5));
        float _1501 = _1498 * (_1458.z + (-0.5));
        float _1508 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1465.x + (-0.5));
        float _1510 = _1508 * (_1465.y + (-0.5));
        float _1511 = _1508 * (_1465.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1532 = (dot(vec3(_1072, _1073, _1074), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1542 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4329 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1544 + 1.0))) + _1549) * _1512;
        float _1559 = _1480 * 0.5;
        float _1560 = _1490 * 0.5;
        float _1561 = _1500 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1072, _1073, _1074), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4362 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1586 + 1.0))) + _1591) * _1513;
        float _1601 = _1481 * 0.5;
        float _1602 = _1491 * 0.5;
        float _1603 = _1501 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1072, _1073, _1074), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4395 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1628 + 1.0))) + _1633) * _1514;
        _1650 = _1481;
        _1652 = _1480;
        _1653 = _1479;
        _1654 = _1491;
        _1655 = _1490;
        _1656 = _1489;
        _1657 = _1501;
        _1658 = _1500;
        _1659 = _1499;
        _1660 = _1514;
        _1661 = _1513;
        _1662 = _1512;
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1651;
        _1652 = _1651;
        _1653 = _1651;
        _1654 = _1651;
        _1655 = _1651;
        _1656 = _1651;
        _1657 = _1651;
        _1658 = _1651;
        _1659 = _1651;
        _1660 = _1651;
        _1661 = _1651;
        _1662 = _1651;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1692 = fma(_1321, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313));
        float _1696 = fma(_1321, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313));
        float _1700 = fma(_1321, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313));
        float _1723 = _1313 + _1072;
        float _1724 = _1317 + _1073;
        float _1725 = _1321 + _1074;
        float _1735 = fma(_1725, cbModelParam._m0[30u].z, fma(_1724, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1723)) - _1692;
        float _1736 = fma(_1725, cbModelParam._m0[31u].z, fma(_1724, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1723)) - _1696;
        float _1737 = fma(_1725, cbModelParam._m0[32u].z, fma(_1724, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1723)) - _1700;
        float _1741 = inversesqrt(dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737)));
        float _1754 = ((_1741 * _1735) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1692 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1755 = ((_1741 * _1736) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1696 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1756 = ((_1741 * _1737) / cbModelParam._m0[35u].z) + ((((((_1700 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1758 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1754, _1755, _1756), 0.0);
        vec4 _1765 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1754, _1755, _1756), 0.0);
        vec4 _1772 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1754, _1755, _1756), 0.0);
        vec4 _1779 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1754, _1755, _1756), 0.0);
        float _1791 = exp2((_1758.w + (-0.5)) * 20.0) * 2.0;
        float _1792 = _1791 * (_1758.x + (-0.5));
        float _1793 = _1791 * (_1758.y + (-0.5));
        float _1794 = _1791 * (_1758.z + (-0.5));
        float _1801 = exp2((_1765.w + (-0.5)) * 20.0) * 2.0;
        float _1802 = _1801 * (_1765.x + (-0.5));
        float _1803 = _1801 * (_1765.y + (-0.5));
        float _1804 = _1801 * (_1765.z + (-0.5));
        float _1811 = exp2((_1772.w + (-0.5)) * 20.0) * 2.0;
        float _1812 = _1811 * (_1772.x + (-0.5));
        float _1813 = _1811 * (_1772.y + (-0.5));
        float _1814 = _1811 * (_1772.z + (-0.5));
        float _1821 = exp2((_1779.w + (-0.5)) * 20.0) * 2.0;
        float _1822 = _1821 * (_1779.x + (-0.5));
        float _1823 = _1821 * (_1779.y + (-0.5));
        float _1824 = _1821 * (_1779.z + (-0.5));
        float _1825 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1828 = _1792 * 0.5;
        float _1829 = _1802 * 0.5;
        float _1830 = _1812 * 0.5;
        float _1831 = dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830));
        float _1836 = (_1831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1831);
        float _1844 = (dot(vec3(_1072, _1073, _1074), vec3(_1836 * _1828, _1836 * _1829, _1836 * _1830)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830)) / (_1825 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1855 = _1854 * 2.0;
        float _1859 = (1.0 - _1854) / (_1854 + 1.0);
        float _4458 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1869 = ((((1.0 - _1860) * (_1855 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1855 + 1.0))) + _1860) * _1825;
        float _1870 = _1793 * 0.5;
        float _1871 = _1803 * 0.5;
        float _1872 = _1813 * 0.5;
        float _1873 = dot(vec3(_1870, _1871, _1872), vec3(_1870, _1871, _1872));
        float _1878 = (_1873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1873);
        float _1886 = (dot(vec3(_1072, _1073, _1074), vec3(_1878 * _1870, _1878 * _1871, _1878 * _1872)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1895 = sqrt(((_1871 * _1871) + (_1870 * _1870)) + (_1872 * _1872)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1897 = _1896 * 2.0;
        float _1901 = (1.0 - _1896) / (_1896 + 1.0);
        float _4491 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1902 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1911 = ((((1.0 - _1902) * (_1897 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1897 + 1.0))) + _1902) * _1826;
        float _1912 = _1794 * 0.5;
        float _1913 = _1804 * 0.5;
        float _1914 = _1814 * 0.5;
        float _1915 = dot(vec3(_1912, _1913, _1914), vec3(_1912, _1913, _1914));
        float _1920 = (_1915 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1915);
        float _1928 = (dot(vec3(_1072, _1073, _1074), vec3(_1920 * _1912, _1920 * _1913, _1920 * _1914)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1937 = sqrt(((_1913 * _1913) + (_1912 * _1912)) + (_1914 * _1914)) / (_1827 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1938 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1939 = _1938 * 2.0;
        float _1943 = (1.0 - _1938) / (_1938 + 1.0);
        float _4524 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _1953 = ((((1.0 - _1944) * (_1939 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1939 + 1.0))) + _1944) * _1827;
        _1961 = _1794;
        _1962 = _1793;
        _1963 = _1792;
        _1964 = _1804;
        _1965 = _1803;
        _1966 = _1802;
        _1967 = _1814;
        _1968 = _1813;
        _1969 = _1812;
        _1970 = _1827;
        _1971 = _1826;
        _1972 = _1825;
        _1973 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)));
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)));
        _1975 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0)));
    }
    else
    {
        _1961 = _1651;
        _1962 = _1651;
        _1963 = _1651;
        _1964 = _1651;
        _1965 = _1651;
        _1966 = _1651;
        _1967 = _1651;
        _1968 = _1651;
        _1969 = _1651;
        _1970 = _1651;
        _1971 = _1651;
        _1972 = _1651;
        _1973 = 0.0;
        _1974 = 0.0;
        _1975 = 0.0;
    }
    float _1985 = (cbModelParam._m0[1u].x * (_1973 - _1663)) + _1663;
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1664)) + _1664;
    float _1987 = (cbModelParam._m0[1u].x * (_1975 - _1665)) + _1665;
    float _2008 = fma(_1987, cbSceneParam._m0[89u].z, fma(_1986, cbSceneParam._m0[89u].y, _1985 * cbSceneParam._m0[89u].x));
    float _2011 = fma(_1987, cbSceneParam._m0[90u].z, fma(_1986, cbSceneParam._m0[90u].y, _1985 * cbSceneParam._m0[90u].x));
    float _2014 = fma(_1987, cbSceneParam._m0[91u].z, fma(_1986, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1985));
    float _2029 = _1257 * 0.5;
    float _2030 = _1258 * 0.5;
    float _2031 = _1259 * 0.5;
    float _2032 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1963, _1966, _1969, _1972));
    float _2035 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2038 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1961, _1964, _1967, _1970));
    float _2072;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2045 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1650, _1654, _1657, _1660));
        float _2049 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2053 = dot(vec4(_2029, _2030, _2031, 1.0), vec4(_1653, _1656, _1659, _1662));
        float _2060 = dot(vec4(cbModelParam._m0[39u]), vec4(_2029, _2030, _2031, 1.0));
        _2072 = dot(vec3(isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)), isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2060) ? 0.0 : (isnan(0.0) ? _2060 : max(0.0, _2060))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2072 = 1.0;
    }
    float _2083;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2074 = dot(vec4(cbModelParam._m0[40u]), vec4(_2029, _2030, _2031, 1.0));
        _2083 = dot(vec3(isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0)), isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)), isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2074) ? 0.0 : (isnan(0.0) ? _2074 : max(0.0, _2074))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2083 = 1.0;
    }
    float _2087 = (_2083 * cbModelParam._m0[1u].x) + (_2072 * (1.0 - cbModelParam._m0[1u].x));
    float _2097 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1075);
    float _2098 = isnan(_2097) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2097 : min(cbModelParam._m0[25u].z, _2097));
    float _2178;
    float _2180;
    float _2182;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2145 = fma(_1321, cbModelParam._m0[13u].z, fma(_1317, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1313)) + cbModelParam._m0[13u].w;
        float _2149 = fma(_1321, cbModelParam._m0[14u].z, fma(_1317, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1313)) + cbModelParam._m0[14u].w;
        float _2153 = fma(_1321, cbModelParam._m0[15u].z, fma(_1317, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1313)) + cbModelParam._m0[15u].w;
        float _2156 = fma(_1259, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1257));
        float _2159 = fma(_1259, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1257));
        float _2162 = fma(_1259, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1257));
        float _2190;
        if (_2156 > 0.0)
        {
            _2190 = abs((1.0 - _2145) / _2156);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2156 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2145 + 1.0) / _2156);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2190 = frontier_phi_17_15_ladder;
        }
        float _2392;
        if (_2159 > 0.0)
        {
            _2392 = abs((1.0 - _2149) / _2159);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2149 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2392 = frontier_phi_26_22_ladder;
        }
        float _2646;
        if (_2162 > 0.0)
        {
            _2646 = abs((1.0 - _2153) / _2162);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2153 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2646 = frontier_phi_38_33_ladder;
        }
        float _2648 = isnan(_2392) ? _2190 : (isnan(_2190) ? _2392 : min(_2190, _2392));
        float _2649 = isnan(_2646) ? _2648 : (isnan(_2648) ? _2646 : min(_2648, _2646));
        float _2653 = (_2649 * _2156) + _2145;
        float _2654 = (_2649 * _2159) + _2149;
        float _2655 = (_2649 * _2162) + _2153;
        float _2656 = _2649 * 9.9999997473787516355514526367188e-05;
        float _2658 = (-1.0) - _2656;
        float _2660 = _2656 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2655 > _2660) || ((_2655 < _2658) || ((_2654 > _2660) || ((_2654 < _2658) || ((_2653 < _2658) || (_2653 > _2660))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2655, cbModelParam._m0[9u].z, fma(_2654, cbModelParam._m0[9u].y, _2653 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2655, cbModelParam._m0[10u].z, fma(_2654, cbModelParam._m0[10u].y, _2653 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2655, cbModelParam._m0[11u].z, fma(_2654, cbModelParam._m0[11u].y, _2653 * cbModelParam._m0[11u].x))), _2098);
            frontier_phi_16_38_ladder = _2783.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2783.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2783.x * cbModelParam._m0[1u].y;
        }
        _2178 = frontier_phi_16_38_ladder_2;
        _2180 = frontier_phi_16_38_ladder_1;
        _2182 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1257, _1258, _1259), _2098);
        _2178 = _2166.x * cbModelParam._m0[1u].y;
        _2180 = _2166.y * cbModelParam._m0[1u].y;
        _2182 = _2166.z * cbModelParam._m0[1u].y;
    }
    float _2186 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1075);
    float _2187 = isnan(_2186) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2186 : min(cbModelParam._m0[25u].w, _2186));
    float _2276;
    float _2278;
    float _2280;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2240 = fma(_1321, cbModelParam._m0[21u].z, fma(_1317, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1313)) + cbModelParam._m0[21u].w;
        float _2244 = fma(_1321, cbModelParam._m0[22u].z, fma(_1317, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1313)) + cbModelParam._m0[22u].w;
        float _2248 = fma(_1321, cbModelParam._m0[23u].z, fma(_1317, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1313)) + cbModelParam._m0[23u].w;
        float _2251 = fma(_1259, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1257));
        float _2254 = fma(_1259, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1257));
        float _2257 = fma(_1259, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1257));
        float _2397;
        if (_2251 > 0.0)
        {
            _2397 = abs((1.0 - _2240) / _2251);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2240 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2397 = frontier_phi_28_24_ladder;
        }
        float _2673;
        if (_2254 > 0.0)
        {
            _2673 = abs((1.0 - _2244) / _2254);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2244 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2673 = frontier_phi_40_35_ladder;
        }
        float _2886;
        if (_2257 > 0.0)
        {
            _2886 = abs((1.0 - _2248) / _2257);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2248 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2886 = frontier_phi_49_46_ladder;
        }
        float _2888 = isnan(_2673) ? _2397 : (isnan(_2397) ? _2673 : min(_2397, _2673));
        float _2889 = isnan(_2886) ? _2888 : (isnan(_2888) ? _2886 : min(_2888, _2886));
        float _2893 = (_2889 * _2251) + _2240;
        float _2894 = (_2889 * _2254) + _2244;
        float _2895 = (_2889 * _2257) + _2248;
        float _2896 = _2889 * 9.9999997473787516355514526367188e-05;
        float _2897 = (-1.0) - _2896;
        float _2899 = _2896 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2895 > _2899) || ((_2895 < _2897) || ((_2894 > _2899) || ((_2894 < _2897) || ((_2893 < _2897) || (_2893 > _2899))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3094 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2895, cbModelParam._m0[17u].z, fma(_2894, cbModelParam._m0[17u].y, _2893 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2895, cbModelParam._m0[18u].z, fma(_2894, cbModelParam._m0[18u].y, _2893 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2895, cbModelParam._m0[19u].z, fma(_2894, cbModelParam._m0[19u].y, _2893 * cbModelParam._m0[19u].x))), _2187);
            frontier_phi_25_49_ladder = _3094.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3094.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3094.x * cbModelParam._m0[1u].z;
        }
        _2276 = frontier_phi_25_49_ladder_2;
        _2278 = frontier_phi_25_49_ladder_1;
        _2280 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2260 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1257, _1258, _1259), _2187);
        _2276 = _2260.x * cbModelParam._m0[1u].z;
        _2278 = _2260.y * cbModelParam._m0[1u].z;
        _2280 = _2260.z * cbModelParam._m0[1u].z;
    }
    float _2293 = (((_1284 * _1233) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2276 - _2178)) + _2178);
    float _2295 = (((_1284 * _1235) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2278 - _2180)) + _2180);
    float _2297 = (((_1284 * _1236) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2280 - _2182)) + _2182);
    float _2300 = fma(_2297, cbSceneParam._m0[89u].z, fma(_2295, cbSceneParam._m0[89u].y, _2293 * cbSceneParam._m0[89u].x));
    float _2303 = fma(_2297, cbSceneParam._m0[90u].z, fma(_2295, cbSceneParam._m0[90u].y, _2293 * cbSceneParam._m0[90u].x));
    float _2306 = fma(_2297, cbSceneParam._m0[91u].z, fma(_2295, cbSceneParam._m0[91u].y, _2293 * cbSceneParam._m0[91u].x));
    uvec4 _2316 = floatBitsToUint(cbInstanceData._m0[_295 + 5u]);
    uint _2318 = _2316.x * 14u;
    uint _2319 = _2318 + 13u;
    float _2326 = _1249 + (-1.0);
    float _2331 = (cbLight._m0[_2319].x * _2326) + 1.0;
    float _2332 = (cbLight._m0[_2319].y * _2326) + 1.0;
    float _2333 = (cbLight._m0[_2319].z * _2326) + 1.0;
    float _2334 = (cbLight._m0[_2319].w * _2326) + 1.0;
    uint _2335 = _2318 + 5u;
    float _2341 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
    uint _2345 = _2318 + 4u;
    float _2351 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2355 = _2318 | 1u;
    float _2366 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_1072, _1073, _1074));
    float _2369 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_1072, _1073, _1074));
    float _4660 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _4671 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2376 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2383 = ((cbLight._m0[_2335].x * _2341) * _2376) + ((cbLight._m0[_2345].x * _2351) * _2374);
    float _2384 = ((_2341 * cbLight._m0[_2335].y) * _2376) + ((_2351 * cbLight._m0[_2345].y) * _2374);
    float _2385 = ((_2341 * cbLight._m0[_2335].z) * _2376) + ((_2351 * cbLight._m0[_2345].z) * _2374);
    uvec4 _2389 = floatBitsToUint(cbLight._m0[_2318 + 12u]);
    bool _2391 = _2389.x == 0u;
    float _2402;
    float _2404;
    float _2406;
    if (_2391)
    {
        _2402 = _2383;
        _2404 = _2384;
        _2406 = _2385;
    }
    else
    {
        uint _2410 = _2318 + 6u;
        float _2426 = (dot(vec3(cbLight._m0[_2318 + 2u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2427 = _2426 * _2426;
        float _4682 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
        float _2428 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2429 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2402 = (((cbLight._m0[_2410].x * 0.3183098733425140380859375) * _2428) * _2429) + _2383;
        _2404 = (((cbLight._m0[_2410].y * 0.3183098733425140380859375) * _2428) * _2429) + _2384;
        _2406 = (((cbLight._m0[_2410].z * 0.3183098733425140380859375) * _2428) * _2429) + _2385;
    }
    bool _2409 = _2389.y == 0u;
    float _2447;
    float _2449;
    float _2451;
    if (_2409)
    {
        _2447 = _2402;
        _2449 = _2404;
        _2451 = _2406;
    }
    else
    {
        uint _2617 = _2318 + 7u;
        float _2633 = (dot(vec3(cbLight._m0[_2318 + 3u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2634 = _2633 * _2633;
        float _4698 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2635 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2636 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2447 = (((cbLight._m0[_2617].x * 0.3183098733425140380859375) * _2635) * _2636) + _2402;
        _2449 = (((cbLight._m0[_2617].y * 0.3183098733425140380859375) * _2635) * _2636) + _2404;
        _2451 = (((cbLight._m0[_2617].z * 0.3183098733425140380859375) * _2635) * _2636) + _2406;
    }
    uint _2454 = _2318 + 8u;
    float _2467 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2318].w)) * _1075) * 0.949999988079071044921875);
    float _2468 = _2467 * _2467;
    float _2469 = cbLight._m0[_2318].x + _1151;
    float _2470 = cbLight._m0[_2318].y + _1152;
    float _2471 = cbLight._m0[_2318].z + _1153;
    float _2475 = inversesqrt(dot(vec3(_2469, _2470, _2471), vec3(_2469, _2470, _2471)));
    float _2476 = _2475 * _2469;
    float _2477 = _2475 * _2470;
    float _2478 = _2475 * _2471;
    float _2479 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2318].xyz));
    float _4714 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2482 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _4725 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _2483 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2484 = dot(vec3(_1072, _1073, _1074), vec3(_2476, _2477, _2478));
    float _4736 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2318].xyz), vec3(_2476, _2477, _2478));
    float _4747 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2468 * _2468;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2504 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2505 = 0.959999978542327880859375 - _1230;
    float _2507 = 0.959999978542327880859375 - _1231;
    float _2508 = 0.959999978542327880859375 - _1232;
    float _2515 = 1.0 - _2468;
    float _2526 = (0.5 / (((_2483 * ((_2482 * _2515) + _2468)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2515) + _2468) * _2482))) * _2482;
    float _4758 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2528 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    uint _2539 = _2318 + 9u;
    float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2355].w)) * _1075) * 0.949999988079071044921875);
    float _2551 = _2550 * _2550;
    float _2552 = cbLight._m0[_2355].x + _1151;
    float _2553 = cbLight._m0[_2355].y + _1152;
    float _2554 = cbLight._m0[_2355].z + _1153;
    float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
    float _2559 = _2558 * _2552;
    float _2560 = _2558 * _2553;
    float _2561 = _2558 * _2554;
    float _2562 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2355].xyz));
    float _4769 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2566 = dot(vec3(_1072, _1073, _1074), vec3(_2559, _2560, _2561));
    float _4780 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2570 = dot(vec3(cbLight._m0[_2355].xyz), vec3(_2559, _2560, _2561));
    float _4791 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2574 = _2551 * _2551;
    float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
    float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2592 = 1.0 - _2551;
    float _2602 = (0.5 / (((_2483 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2592) + _2551) * _2565))) * _2565;
    float _4802 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2604 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
    float _2614 = (((((_2585 * _2505) + _1233) * cbLight._m0[_2539].x) * _2604) * _2341) + (((((_2504 * _2505) + _1233) * cbLight._m0[_2454].x) * _2528) * _2351);
    float _2615 = (((((_2585 * _2507) + _1235) * cbLight._m0[_2539].y) * _2604) * _2341) + (((((_2504 * _2507) + _1235) * cbLight._m0[_2454].y) * _2528) * _2351);
    float _2616 = (((((_2585 * _2508) + _1236) * cbLight._m0[_2539].z) * _2604) * _2341) + (((((_2504 * _2508) + _1236) * cbLight._m0[_2454].z) * _2528) * _2351);
    float _2678;
    float _2680;
    float _2682;
    if (_2391)
    {
        _2678 = _2614;
        _2680 = _2615;
        _2682 = _2616;
    }
    else
    {
        uint _2684 = _2318 + 2u;
        uint _2688 = _2318 + 10u;
        float _2702 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2684].w)) * _1075) * 0.949999988079071044921875);
        float _2703 = _2702 * _2702;
        float _2704 = cbLight._m0[_2684].x + _1151;
        float _2705 = cbLight._m0[_2684].y + _1152;
        float _2706 = cbLight._m0[_2684].z + _1153;
        float _2710 = inversesqrt(dot(vec3(_2704, _2705, _2706), vec3(_2704, _2705, _2706)));
        float _2711 = _2710 * _2704;
        float _2712 = _2710 * _2705;
        float _2713 = _2710 * _2706;
        float _2714 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2684].xyz));
        float _4813 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2718 = dot(vec3(_1072, _1073, _1074), vec3(_2711, _2712, _2713));
        float _4824 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2721 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2722 = dot(vec3(cbLight._m0[_2684].xyz), vec3(_2711, _2712, _2713));
        float _4835 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2726 = _2703 * _2703;
        float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
        float _2737 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2744 = 1.0 - _2703;
        float _2754 = (0.5 / (((_2483 * ((_2717 * _2744) + _2703)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2744) + _2703) * _2717))) * _2717;
        float _4846 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2756 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
        float _2757 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2678 = (((((_2737 * _2505) + _1233) * cbLight._m0[_2688].x) * _2756) * _2757) + _2614;
        _2680 = (((((_2737 * _2507) + _1235) * cbLight._m0[_2688].y) * _2756) * _2757) + _2615;
        _2682 = (((((_2737 * _2508) + _1236) * cbLight._m0[_2688].z) * _2756) * _2757) + _2616;
    }
    float _2792;
    float _2794;
    float _2796;
    if (_2409)
    {
        _2792 = _2678;
        _2794 = _2680;
        _2796 = _2682;
    }
    else
    {
        uint _2803 = _2318 + 3u;
        uint _2807 = _2318 + 11u;
        float _2821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2803].w)) * _1075) * 0.949999988079071044921875);
        float _2822 = _2821 * _2821;
        float _2823 = cbLight._m0[_2803].x + _1151;
        float _2824 = cbLight._m0[_2803].y + _1152;
        float _2825 = cbLight._m0[_2803].z + _1153;
        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
        float _2830 = _2829 * _2823;
        float _2831 = _2829 * _2824;
        float _2832 = _2829 * _2825;
        float _2833 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2803].xyz));
        float _4862 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2836 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2837 = dot(vec3(_1072, _1073, _1074), vec3(_2830, _2831, _2832));
        float _4873 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2841 = dot(vec3(cbLight._m0[_2803].xyz), vec3(_2830, _2831, _2832));
        float _4884 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2845 = _2822 * _2822;
        float _2849 = ((_2840 * _2840) * (_2845 + (-1.0))) + 1.0;
        float _2856 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2863 = 1.0 - _2822;
        float _2873 = (0.5 / (((_2483 * ((_2836 * _2863) + _2822)) + 9.9999999392252902907785028219223e-09) + (((_2483 * _2863) + _2822) * _2836))) * _2836;
        float _4895 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
        float _2875 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2845 / ((_2849 * _2849) * 3.141590118408203125));
        float _2876 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        _2792 = (((((_2856 * _2505) + _1233) * cbLight._m0[_2807].x) * _2875) * _2876) + _2678;
        _2794 = (((((_2856 * _2507) + _1235) * cbLight._m0[_2807].y) * _2875) * _2876) + _2680;
        _2796 = (((((_2856 * _2508) + _1236) * cbLight._m0[_2807].z) * _2875) * _2876) + _2682;
    }
    float _3011;
    float _3013;
    float _3015;
    float _3017;
    float _3019;
    float _3021;
    if (_2316.y == 0u)
    {
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2952 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2951;
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2951;
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2951;
        uvec4 _2966 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2967 = _2966.x;
        uint _2978 = uint((float(_2966.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1172) / _2967))) + floor(float(uint(cbSceneParam._m0[85u].x * _1171) / _2967)));
        float _2988 = (log2(_2954 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2989 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        uint _2992 = uint(isnan(14.0) ? _2989 : (isnan(_2989) ? 14.0 : min(_2989, 14.0)));
        uvec4 _2997 = texelFetch(g_lightClusterGridBuffer, int(((_2992 << 2u) + (_2978 << 6u)) >> 2u));
        uint _2998 = _2997.x;
        uint _2999 = _2966.z;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        if (((((1u << ((_2999 >> 4u) & 15u)) + 4294967295u) & _2998) == 0u) || ((_2999 & 240u) == 0u))
        {
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
        }
        else
        {
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3108;
            float _3110;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            float _3254 = 0.0;
            float _3255 = 0.0;
            float _3256 = 0.0;
            uint _3257 = 0u;
            uint _3266;
            bool _3267;
            for (;;)
            {
                _3266 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                _3267 = _3266 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3267)
                {
                    frontier_phi_66_pred = _3251;
                    frontier_phi_66_pred_1 = _3256;
                    frontier_phi_66_pred_2 = _3255;
                    frontier_phi_66_pred_3 = _3254;
                    frontier_phi_66_pred_4 = _3253;
                    frontier_phi_66_pred_5 = _3252;
                }
                else
                {
                    float _3396;
                    float _3397;
                    float _3398;
                    float _3399;
                    float _3400;
                    float _3401;
                    uint _3402;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3254;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3266;
                    float _3323;
                    float _3324;
                    float _3325;
                    float _3326;
                    float _3327;
                    float _3328;
                    for (;;)
                    {
                        uint _3406 = uint(findLSB(_3402)) + (_3257 << 5u);
                        uint _3403 = (_3402 + 4294967295u) & _3402;
                        uint _3408 = _3406 * 48u;
                        vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3408)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3408 + 3u)).x));
                        uint _3428 = (_3406 * 48u) + 4u;
                        vec4 _3441 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3447 = (_3406 * 48u) + 8u;
                        vec3 _3458 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3447)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3447 + 2u)).x));
                        float _3462 = _3422.x - _2952;
                        float _3463 = _3422.y - _2953;
                        float _3464 = _3422.z - _2954;
                        float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                        float _3468 = inversesqrt(_3465);
                        float _3469 = _3468 * _3462;
                        float _3470 = _3468 * _3463;
                        float _3471 = _3468 * _3464;
                        float _3472 = dot(vec3(_1190, _1193, _1196), vec3(_3469, _3470, _3471));
                        float _3477 = 1.0 - (_3465 * _3422.w);
                        float _4921 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3478 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3479 = sqrt(_3465) * _3441.w;
                        float _3482 = 1.39999997615814208984375 / (_3479 + 1.39999997615814208984375);
                        float _3483 = _3482 * _3482;
                        float _3486 = ((1.0 - _3483) * _3472) + _3483;
                        float _3489 = _3479 * _3479;
                        float _3493 = ((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3478) / ((_3489 * 0.699999988079071044921875) + 1.0);
                        float _3497 = (-0.0) - _2952;
                        float _3498 = (-0.0) - _2953;
                        float _3499 = (-0.0) - _2954;
                        float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3514 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                        float _3515 = 1.0 - _1265;
                        float _3522 = sqrt(1.0 - ((1.0 - (_3515 * _3515)) * (1.0 - (_3514 * _3514))));
                        float _3523 = _3522 * _3522;
                        float _3524 = _3523 * _3523;
                        float _3525 = _3504 + _3469;
                        float _3526 = _3505 + _3470;
                        float _3527 = _3506 + _3471;
                        float _3531 = inversesqrt(dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527)));
                        float _3535 = dot(vec3(_1190, _1193, _1196), vec3(_3504, _3505, _3506));
                        float _4937 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3539 = dot(vec3(_1190, _1193, _1196), vec3(_3531 * _3525, _3531 * _3526, _3531 * _3527));
                        float _4948 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3542 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3546 = ((_3542 * _3542) * (_3524 + (-1.0))) + 1.0;
                        float _3547 = _3482 * _3523;
                        float _3548 = _3547 * _3547;
                        float _3551 = ((1.0 - _3548) * _3472) + _3548;
                        float _4959 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3552 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3553 = 1.0 - _3523;
                        float _3563 = (0.5 / (((_3552 * ((_3538 * _3553) + _3523)) + 9.9999999392252902907785028219223e-09) + (((_3552 * _3553) + _3523) * _3538))) * _3552;
                        float _4970 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                        float _3574 = (((_3524 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3546 * _3546) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125))) * _3478;
                        _3326 = (_3493 * _3441.x) + _3399;
                        _3327 = (_3493 * _3441.y) + _3400;
                        _3328 = (_3493 * _3441.z) + _3401;
                        _3323 = (_3574 * _3458.x) + _3396;
                        _3324 = (_3574 * _3458.y) + _3397;
                        _3325 = (_3574 * _3458.z) + _3398;
                        if (_3403 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3326;
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3403;
                        }
                    }
                    frontier_phi_66_pred = _3323;
                    frontier_phi_66_pred_1 = _3328;
                    frontier_phi_66_pred_2 = _3327;
                    frontier_phi_66_pred_3 = _3326;
                    frontier_phi_66_pred_4 = _3325;
                    frontier_phi_66_pred_5 = _3324;
                }
                _3100 = frontier_phi_66_pred;
                _3110 = frontier_phi_66_pred_1;
                _3108 = frontier_phi_66_pred_2;
                _3106 = frontier_phi_66_pred_3;
                _3104 = frontier_phi_66_pred_4;
                _3102 = frontier_phi_66_pred_5;
                uint _3258 = _3257 + 1u;
                if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3251 = _3100;
                    _3252 = _3102;
                    _3253 = _3104;
                    _3254 = _3106;
                    _3255 = _3108;
                    _3256 = _3110;
                    _3257 = _3258;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
        }
        uvec4 _3113 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3114 = _3113.z;
        uint _3116 = (_3114 >> 8u) & 15u;
        float _3219;
        float _3221;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        if (((4294967295u << _3116) & _2998) == 0u)
        {
            _3219 = _3099;
            _3221 = _3101;
            _3223 = _3103;
            _3225 = _3105;
            _3227 = _3107;
            _3229 = _3109;
        }
        else
        {
            float _3244 = inversesqrt(dot(vec3(_2952, _2953, _2954), vec3(_2952, _2953, _2954)));
            float _3245 = _3244 * _2952;
            float _3246 = _3244 * _2953;
            float _3247 = _3244 * _2954;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3116 < ((_3114 >> 12u) & 15u))
            {
                float _3220;
                float _3222;
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3379 = _3099;
                float _3380 = _3101;
                float _3381 = _3103;
                float _3382 = _3105;
                float _3383 = _3107;
                float _3384 = _3109;
                uint _3385 = _3116;
                uint _3394;
                bool _3395;
                for (;;)
                {
                    _3394 = texelFetch(g_lightClassification, int((((_2992 << 5u) + (_2978 << 9u)) + (_3385 << 2u)) >> 2u)).x;
                    _3395 = _3394 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3395)
                    {
                        frontier_phi_77_pred = _3384;
                        frontier_phi_77_pred_1 = _3383;
                        frontier_phi_77_pred_2 = _3382;
                        frontier_phi_77_pred_3 = _3381;
                        frontier_phi_77_pred_4 = _3380;
                        frontier_phi_77_pred_5 = _3379;
                    }
                    else
                    {
                        float _3588;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3884;
                        float _3885;
                        float _3886;
                        float _3601 = _3379;
                        float _3602 = _3380;
                        float _3603 = _3381;
                        float _3604 = _3382;
                        float _3605 = _3383;
                        float _3606 = _3384;
                        uint _3607 = _3394;
                        uint _3608;
                        vec4 _3633;
                        float _3634;
                        vec4 _3649;
                        vec3 _3661;
                        vec4 _3676;
                        vec4 _3691;
                        float _3737;
                        bool _3738;
                        for (;;)
                        {
                            uint _3618 = ((_3385 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3607));
                            _3608 = (_3607 + 4294967295u) & _3607;
                            uint _3620 = _3618 * 40u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            _3634 = _3633.w;
                            uint _3636 = (_3618 * 40u) + 4u;
                            _3649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3636 + 3u)).x));
                            uint _3651 = (_3618 * 40u) + 8u;
                            _3661 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x));
                            uint _3663 = (_3618 * 40u) + 16u;
                            _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3678 = (_3618 * 40u) + 20u;
                            _3691 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3678)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3678 + 3u)).x));
                            uint _3693 = (_3618 * 40u) + 24u;
                            vec4 _3706 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3693)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3693 + 3u)).x));
                            uint _3712 = (_3618 * 40u) + 28u;
                            vec4 _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            _3737 = fma(_2954, _3725.z, fma(_2953, _3725.y, _3725.x * _2952)) + _3725.w;
                            _3738 = !((fma(_2954, _3706.z, fma(_2953, _3706.y, _3706.x * _2952)) + _3706.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3738)
                            {
                                float _3765 = _3633.x - _2952;
                                float _3766 = _3633.y - _2953;
                                float _3767 = _3633.z - _2954;
                                float _3768 = dot(vec3(_3765, _3766, _3767), vec3(_3765, _3766, _3767));
                                float _3771 = inversesqrt(_3768);
                                float _3772 = _3771 * _3765;
                                float _3773 = _3771 * _3766;
                                float _3774 = _3771 * _3767;
                                float _3778 = 1.0 - (_3768 / (_3634 * _3634));
                                float _4981 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3783 = sqrt(_3768) * _3649.w;
                                float _3785 = 1.39999997615814208984375 / (_3783 + 1.39999997615814208984375);
                                float _3786 = _3785 * _3785;
                                float _3789 = ((1.0 - _3786) * dot(vec3(_3772, _3773, _3774), vec3(_1190, _1193, _1196))) + _3786;
                                float _3792 = _3783 * _3783;
                                float _3796 = (fma(_2954, _3676.z, fma(_2953, _3676.y, _3676.x * _2952)) + _3676.w) / _3737;
                                float _3797 = (fma(_2954, _3691.z, fma(_2953, _3691.y, _3691.x * _2952)) + _3691.w) / _3737;
                                float _3801 = 1.0 - dot(vec2(_3796, _3797), vec2(_3796, _3797));
                                float _4997 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3803 = _3802 * (((isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0))) * _3779) / ((_3792 * 0.699999988079071044921875) + 1.0));
                                float _3815 = exp2(log2(1.0 / ((_3792 * 3.5) + 5.0)) * 0.25);
                                float _3816 = 1.0 - _1265;
                                float _3823 = sqrt(1.0 - ((1.0 - (_3816 * _3816)) * (1.0 - (_3815 * _3815))));
                                float _3824 = _3823 * _3823;
                                float _3825 = _3824 * _3824;
                                float _3826 = _3772 - _3245;
                                float _3827 = _3773 - _3246;
                                float _3828 = _3774 - _3247;
                                float _3832 = inversesqrt(dot(vec3(_3826, _3827, _3828), vec3(_3826, _3827, _3828)));
                                float _3836 = dot(vec3(_1190, _1193, _1196), vec3((-0.0) - _3245, (-0.0) - _3246, (-0.0) - _3247));
                                float _5008 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3839 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3840 = dot(vec3(_1190, _1193, _1196), vec3(_3832 * _3826, _3832 * _3827, _3832 * _3828));
                                float _5019 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3847 = ((_3843 * _3843) * (_3825 + (-1.0))) + 1.0;
                                float _3848 = _3785 * _3824;
                                float _3849 = _3848 * _3848;
                                float _3855 = ((1.0 - _3849) * dot(vec3(_1190, _1193, _1196), vec3(_3772, _3773, _3774))) + _3849;
                                float _5030 = isnan(0.0) ? _3855 : (isnan(_3855) ? 0.0 : max(_3855, 0.0));
                                float _3856 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3857 = 1.0 - _3824;
                                float _3867 = (0.5 / (((_3856 * ((_3839 * _3857) + _3824)) + 9.9999999392252902907785028219223e-09) + (((_3856 * _3857) + _3824) * _3839))) * _3856;
                                float _5041 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3877 = (_3802 * _3779) * (((_3825 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3847 * _3847) * ((_3792 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3803 * _3649.y;
                                frontier_phi_83_pred_1 = _3803 * _3649.x;
                                frontier_phi_83_pred_2 = _3877 * _3661.z;
                                frontier_phi_83_pred_3 = _3877 * _3661.y;
                                frontier_phi_83_pred_4 = _3877 * _3661.x;
                                frontier_phi_83_pred_5 = _3803 * _3649.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3885 = frontier_phi_83_pred;
                            _3884 = frontier_phi_83_pred_1;
                            _3883 = frontier_phi_83_pred_2;
                            _3882 = frontier_phi_83_pred_3;
                            _3881 = frontier_phi_83_pred_4;
                            _3886 = frontier_phi_83_pred_5;
                            _3591 = _3884 + _3604;
                            _3592 = _3885 + _3605;
                            _3593 = _3886 + _3606;
                            _3588 = _3881 + _3601;
                            _3589 = _3882 + _3602;
                            _3590 = _3883 + _3603;
                            if (_3608 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3590;
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3608;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3593;
                        frontier_phi_77_pred_1 = _3592;
                        frontier_phi_77_pred_2 = _3591;
                        frontier_phi_77_pred_3 = _3590;
                        frontier_phi_77_pred_4 = _3589;
                        frontier_phi_77_pred_5 = _3588;
                    }
                    _3230 = frontier_phi_77_pred;
                    _3228 = frontier_phi_77_pred_1;
                    _3226 = frontier_phi_77_pred_2;
                    _3224 = frontier_phi_77_pred_3;
                    _3222 = frontier_phi_77_pred_4;
                    _3220 = frontier_phi_77_pred_5;
                    uint _3386 = _3385 + 1u;
                    if (_3386 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3379 = _3220;
                        _3380 = _3222;
                        _3381 = _3224;
                        _3382 = _3226;
                        _3383 = _3228;
                        _3384 = _3230;
                        _3385 = _3386;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3224;
                frontier_phi_58_59_ladder_1 = _3230;
                frontier_phi_58_59_ladder_2 = _3228;
                frontier_phi_58_59_ladder_3 = _3226;
                frontier_phi_58_59_ladder_4 = _3222;
                frontier_phi_58_59_ladder_5 = _3220;
            }
            else
            {
                frontier_phi_58_59_ladder = _3103;
                frontier_phi_58_59_ladder_1 = _3109;
                frontier_phi_58_59_ladder_2 = _3107;
                frontier_phi_58_59_ladder_3 = _3105;
                frontier_phi_58_59_ladder_4 = _3101;
                frontier_phi_58_59_ladder_5 = _3099;
            }
            _3219 = frontier_phi_58_59_ladder_5;
            _3221 = frontier_phi_58_59_ladder_4;
            _3223 = frontier_phi_58_59_ladder;
            _3225 = frontier_phi_58_59_ladder_3;
            _3227 = frontier_phi_58_59_ladder_2;
            _3229 = frontier_phi_58_59_ladder_1;
        }
        float _3234 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _3011 = (_3234 * _3225) + _2447;
        _3013 = (_3234 * _3227) + _2449;
        _3015 = (_3234 * _3229) + _2451;
        _3017 = ((_3219 * _1233) * _3234) + _2792;
        _3019 = ((_3221 * _1235) * _3234) + _2794;
        _3021 = ((_3223 * _1236) * _3234) + _2796;
    }
    else
    {
        _3011 = _2447;
        _3013 = _2449;
        _3015 = _2451;
        _3017 = _2792;
        _3019 = _2794;
        _3021 = _2796;
    }
    float _5057 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _5068 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _5079 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _3038 = ((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3011 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1249))) + ((_3017 + ((isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0))) * _2087)) * cbPerFrame._m0[3u].x);
    float _3039 = ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3013 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1249))) + ((_3019 + ((isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * _2087)) * cbPerFrame._m0[3u].x);
    float _3040 = ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3015 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1249))) + ((_3021 + ((isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0))) * _2087)) * cbPerFrame._m0[3u].x);
    uint _3041 = _295 + 6u;
    float _3049 = _1171 / cbSceneParam._m0[86u].x;
    float _3050 = _1172 / cbSceneParam._m0[86u].y;
    vec4 _3064 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, (log2((isnan(cbSceneParam._m0[77u].w) ? _1094 : (isnan(_1094) ? cbSceneParam._m0[77u].w : min(_1094, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3066 = _3064.x;
    float _3067 = _3064.y;
    float _3068 = _3064.z;
    float _3069 = _3064.w;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_1094 > cbSceneParam._m0[78u].w)
    {
        float _3124 = isnan(_1094) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1094 : min(cbSceneParam._m0[80u].w, _1094));
        float _3125 = _3124 / _1094;
        float _3136 = _3125 * _1144;
        float _3137 = _1145 * _3125;
        float _3138 = (-0.0) - _3137;
        float _3139 = _3125 * _1146;
        float _3141 = (cbSceneParam._m0[77u].w * _3138) / _3124;
        float _3142 = _3141 + cbSceneParam._m0[79u].w;
        float _3143 = cbSceneParam._m0[79u].w - _3137;
        float _3149 = sqrt(((_3136 * _3136) + (_3137 * _3137)) + (_3139 * _3139));
        float _3152 = (1.0 - (cbSceneParam._m0[77u].w / _3124)) * _3149;
        float _3157 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3159 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3336;
        if (abs((_3138 - _3141) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3336 = ((((_3142 > 0.0) ? exp2(_3157 * _3142) : (2.0 - exp2(_3159 * _3142))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3152;
        }
        else
        {
            float _3280 = 1.0 / cbSceneParam._m0[80u].x;
            float _3281 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : max(_3142, _3143));
            float _3282 = isnan(_3143) ? _3142 : (isnan(_3142) ? _3143 : min(_3142, _3143));
            float _3291 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : min(_3281, 0.0));
            float _3292 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : min(_3282, 0.0));
            _3336 = ((abs(_3149 / _3138) * cbSceneParam._m0[80u].y) * ((((_3291 - _3292) * 2.0) - ((exp2(_3157 * (isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0)))) - exp2(_3157 * (isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))))) * _3280)) - ((exp2(_3159 * _3291) - exp2(_3159 * _3292)) * _3280))) + (_3152 * cbSceneParam._m0[80u].z);
        }
        vec4 _3338 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3049, _3050, 1.0), 0.0);
        float _3347 = exp2((_3336 * (-1.44269502162933349609375)) * (1.0 - _3338.w));
        float _3348 = log2(_3347);
        float _3364 = log2(_3069);
        _3161 = (exp2(_3364 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].x)) * _3338.x) / cbSceneParam._m0[78u].x)) + _3066;
        _3163 = (exp2(_3364 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].y)) * _3338.y) / cbSceneParam._m0[78u].y)) + _3067;
        _3165 = (exp2(_3364 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3348 * cbSceneParam._m0[78u].z)) * _3338.z) / cbSceneParam._m0[78u].z)) + _3068;
        _3167 = _3347 * _3069;
    }
    else
    {
        _3161 = _3066;
        _3163 = _3067;
        _3165 = _3068;
        _3167 = _3069;
    }
    bool _3374;
    vec4 _3177;
    vec4 _3199;
    float _3201;
    float _3205;
    float _3206;
    float _3207;
    float _3208;
    bool _3218;
    for (;;)
    {
        _3177 = cbMatDynParam._m0[0u];
        float _3179 = roundEven(_3177.y);
        bool _3180 = _3179 == 3.0;
        float _3181 = log2(_3167);
        float _3188 = exp2(_3181 * cbSceneParam._m0[78u].x) * _3038;
        float _3189 = exp2(_3181 * cbSceneParam._m0[78u].y) * _3039;
        float _3190 = exp2(_3181 * cbSceneParam._m0[78u].z) * _3040;
        float _3197 = _1160 + (-0.5);
        _3199 = cbMtdParam._m0[1u];
        _3201 = _3199.y * _3197;
        float _3204 = (_3179 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3205 = _3204 * (_3180 ? _3188 : (_3188 + (cbSceneParam._m0[72u].w * _3161)));
        _3206 = _3204 * (_3180 ? _3189 : (_3189 + (cbSceneParam._m0[72u].w * _3163)));
        _3207 = _3204 * (_3180 ? _3190 : (_3190 + (cbSceneParam._m0[72u].w * _3165)));
        _3208 = _3197 * 0.999000012874603271484375;
        _3218 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3218)
        {
            if ((cbInstanceData._m0[_295 + 7u].x + _3208) < 0.5)
            {
                _3374 = true;
                break;
            }
        }
        uint _3315 = _1209 + uint(_3177.w);
        if ((cbInstanceData._m0[_3315].w < 1.0) && ((cbInstanceData._m0[_3315].w + _3208) < 0.5))
        {
            _3374 = true;
            break;
        }
        if ((_3201 + 1.0) < _3199.x)
        {
            _3374 = true;
            break;
        }
        _3374 = false;
        break;
    }
    float _3579;
    if (_3374)
    {
        discard_state = true;
        _3579 = 0.0;
    }
    else
    {
        _3579 = cbInstanceData._m0[_3041].w;
    }
    SV_Target.x = _3205;
    SV_Target.y = _3206;
    SV_Target.z = _3207;
    SV_Target.w = _3579;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3041].w;
    discard_exit();
}


