#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1620;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4226 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4237 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4248 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    float _658 = ((_630.x - _649) * _450) + _649;
    float _659 = ((_630.y - _650) * _450) + _650;
    float _660 = ((_630.z - _651) * _450) + _651;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _683 = ((_672.x - _658) * _523) + _658;
    float _684 = ((_672.y - _659) * _523) + _659;
    float _685 = ((_672.z - _660) * _523) + _660;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _710 = ((_697.z - _685) * _593) + _685;
    float _713 = ((((_697.x - _683) * _593) + _683) * 2.0) + (-1.0);
    float _715 = ((((_697.y - _684) * _593) + _684) * 2.0) + (-1.0);
    float _716 = dot(vec2(_713, _715), vec2(_713, _715));
    float _4259 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _747 = (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _713;
    float _748 = (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _751 = fma(_721, _259, fma(_748, _266, _747 * _252));
    float _754 = fma(_721, _260, fma(_748, _267, _747 * _253));
    float _757 = fma(_721, _261, fma(_748, _268, _747 * _254));
    float _761 = inversesqrt(dot(vec3(_751, _754, _757), vec3(_751, _754, _757)));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _790 = _788.x;
    float _791 = 1.0 - _790;
    float _799 = (cbMtdParam._m0[19u].x + dot(vec4(_761 * _751, _761 * _754, _761 * _757, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_790 - _791) * cbMtdParam._m0[24u].z) + _791) * cbMtdParam._m0[21u].z);
    float _4270 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _802 = (-0.0) - cbMtdParam._m0[24u].x;
    float _804 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
    float _812 = _800 - ((_800 * TEXCOORD_8.x) * _805);
    float _813 = _800 - ((_800 * TEXCOORD_8.y) * _805);
    float _814 = _800 - ((_800 * TEXCOORD_8.z) * _805);
    float _821 = (_812 * (cbMtdParam._m0[17u].x - _606)) + _606;
    float _822 = (_813 * (cbMtdParam._m0[17u].y - _609)) + _609;
    float _823 = (_814 * (cbMtdParam._m0[17u].z - _612)) + _612;
    vec4 _835 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _837 = _835.x;
    float _838 = 1.0 - _837;
    float _864 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_837 - _838) * cbMtdParam._m0[24u].w) + _838) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4291 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _865 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _873 = ((((cbMtdParam._m0[10u].x - _821) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _865) + _821;
    float _874 = ((((cbMtdParam._m0[10u].y - _822) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _865) + _822;
    float _875 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _823)) * _865) + _823;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _903 = _901.x;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _903) * _450) + _903;
    float _937 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _920) * _523) + _920;
    float _954 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _937) * _593) + _937;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _954) * cbMtdParam._m0[19u].z) + _954;
    float _960 = _958 - (_958 * _812);
    float _962 = _960 - (_960 * _865);
    float _966 = (cbMtdParam._m0[19u].w * (_735.z - _710)) + _710;
    vec4 _982 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _989 = (_982.x * 2.0) + (-1.0);
    float _990 = (_982.y * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4302 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _999 = ((_982.z - _966) * _812) + _966;
    float _1002 = ((cbMtdParam._m0[23u].x - _999) * _865) + _999;
    vec4 _1025 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1031 = (_1025.x * 2.0) + (-1.0);
    float _1032 = (_1025.y * 2.0) + (-1.0);
    float _1033 = dot(vec2(_1031, _1032), vec2(_1031, _1032));
    float _4313 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1048 = ((sqrt(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) - _721) * _814) + _721;
    float _1051 = (((_989 - _747) * _812) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _1052 = (((_990 - _748) * _813) + _748) + (cbMtdParam._m0[21u].x * _748);
    float _1063 = (((_1031 - _1051) + (_1051 * cbMtdParam._m0[22u].z)) * _865) + _1051;
    float _1064 = (((_1032 - _1052) + (_1052 * cbMtdParam._m0[22u].z)) * _865) + _1052;
    float _1065 = (_865 * (sqrt(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) - _1048)) + _1048;
    float _1067 = cbMtdParam._m0[22u].x + _735.w;
    float _1070 = fma(_1065, _259, fma(_1064, _266, _1063 * _252));
    float _1073 = fma(_1065, _260, fma(_1064, _267, _1063 * _253));
    float _1076 = fma(_1065, _261, fma(_1064, _268, _1063 * _254));
    float _1080 = inversesqrt(dot(vec3(_1070, _1073, _1076), vec3(_1070, _1073, _1076)));
    float _1081 = _1080 * _1070;
    float _1082 = _1080 * _1073;
    float _1083 = _1080 * _1076;
    float _4324 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1084 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _4335 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4346 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4357 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4368 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4379 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1089 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _1103 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1153 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1143);
    float _1154 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1143);
    float _1155 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1143);
    float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
    float _1160 = _1153 * _1159;
    float _1161 = _1154 * _1159;
    float _1162 = _1155 * _1159;
    float _1168 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1169 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1187 = fma(_1083, cbSceneParam._m0[5u].z, fma(_1082, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1081));
    float _1190 = fma(_1083, cbSceneParam._m0[6u].z, fma(_1082, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1081));
    float _1193 = fma(_1083, cbSceneParam._m0[7u].z, fma(_1082, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1081));
    uint _1207 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1213 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * cbInstanceData._m0[_1207].x;
    float _1214 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * cbInstanceData._m0[_1207].y;
    float _1215 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0)))) * cbInstanceData._m0[_1207].z;
    float _4390 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
    float _1216 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
    float _1217 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _4412 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
    float _1218 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _1219 = 1.0 - _1089;
    float _1220 = _1216 * _1219;
    float _1221 = _1217 * _1219;
    float _1222 = _1218 * _1219;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1089;
    float _1228 = (_1217 + (-0.039999999105930328369140625)) * _1089;
    float _1229 = (_1218 + (-0.039999999105930328369140625)) * _1089;
    float _1230 = _1227 + 0.039999999105930328369140625;
    float _1232 = _1228 + 0.039999999105930328369140625;
    float _1233 = _1229 + 0.039999999105930328369140625;
    vec4 _1242 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1168, cbSceneParam._m0[86u].y * _1169));
    float _1246 = ((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * TEXCOORD_5.w) * _1242.x;
    float _1247 = dot(vec3(_1081, _1082, _1083), vec3(_1160, _1161, _1162));
    float _1250 = _1247 * 2.0;
    float _1254 = (_1250 * _1081) - _1160;
    float _1255 = (_1250 * _1082) - _1161;
    float _1256 = (_1250 * _1083) - _1162;
    float _1260 = abs(dot(vec3(_1160, _1161, _1162), vec3(_1081, _1082, _1083)));
    float _4423 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1262 = sqrt(_1084);
    float _1275 = exp2((_1262 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1262 * 3.0));
    float _1281 = (1.0 - _1275) * ((_1262 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1282 = _1275 * _1262;
    float _1310 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1314 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1318 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1619;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1344 = fma(_1318, cbModelParam._m0[26u].z, fma(_1314, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1310));
        float _1348 = fma(_1318, cbModelParam._m0[27u].z, fma(_1314, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1310));
        float _1352 = fma(_1318, cbModelParam._m0[28u].z, fma(_1314, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1310));
        float _1377 = _1310 + _1081;
        float _1378 = _1314 + _1082;
        float _1379 = _1318 + _1083;
        float _1389 = fma(_1379, cbModelParam._m0[26u].z, fma(_1378, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1377)) - _1344;
        float _1390 = fma(_1379, cbModelParam._m0[27u].z, fma(_1378, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1377)) - _1348;
        float _1391 = fma(_1379, cbModelParam._m0[28u].z, fma(_1378, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1377)) - _1352;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1344 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1348 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[34u].z) + ((((((_1352 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1447 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1413.x + (-0.5));
        float _1449 = _1447 * (_1413.y + (-0.5));
        float _1450 = _1447 * (_1413.z + (-0.5));
        float _1457 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1420.x + (-0.5));
        float _1459 = _1457 * (_1420.y + (-0.5));
        float _1460 = _1457 * (_1420.z + (-0.5));
        float _1467 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1427.x + (-0.5));
        float _1469 = _1467 * (_1427.y + (-0.5));
        float _1470 = _1467 * (_1427.z + (-0.5));
        float _1477 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1434.x + (-0.5));
        float _1479 = _1477 * (_1434.y + (-0.5));
        float _1480 = _1477 * (_1434.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1501 = (dot(vec3(_1081, _1082, _1083), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1511 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4471 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1513 + 1.0))) + _1518) * _1481;
        float _1528 = _1449 * 0.5;
        float _1529 = _1459 * 0.5;
        float _1530 = _1469 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_1081, _1082, _1083), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4504 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1555 + 1.0))) + _1560) * _1482;
        float _1570 = _1450 * 0.5;
        float _1571 = _1460 * 0.5;
        float _1572 = _1470 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_1081, _1082, _1083), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4537 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1597 + 1.0))) + _1602) * _1483;
        _1619 = _1450;
        _1621 = _1449;
        _1622 = _1448;
        _1623 = _1460;
        _1624 = _1459;
        _1625 = _1458;
        _1626 = _1470;
        _1627 = _1469;
        _1628 = _1468;
        _1629 = _1483;
        _1630 = _1482;
        _1631 = _1481;
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1620;
        _1621 = _1620;
        _1622 = _1620;
        _1623 = _1620;
        _1624 = _1620;
        _1625 = _1620;
        _1626 = _1620;
        _1627 = _1620;
        _1628 = _1620;
        _1629 = _1620;
        _1630 = _1620;
        _1631 = _1620;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1657 = fma(_1318, cbModelParam._m0[30u].z, fma(_1314, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1310));
        float _1661 = fma(_1318, cbModelParam._m0[31u].z, fma(_1314, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1310));
        float _1665 = fma(_1318, cbModelParam._m0[32u].z, fma(_1314, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1310));
        float _1688 = _1310 + _1081;
        float _1689 = _1314 + _1082;
        float _1690 = _1318 + _1083;
        float _1700 = fma(_1690, cbModelParam._m0[30u].z, fma(_1689, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1688)) - _1657;
        float _1701 = fma(_1690, cbModelParam._m0[31u].z, fma(_1689, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1688)) - _1661;
        float _1702 = fma(_1690, cbModelParam._m0[32u].z, fma(_1689, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1688)) - _1665;
        float _1706 = inversesqrt(dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702)));
        float _1719 = ((_1706 * _1700) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1657 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1720 = ((_1706 * _1701) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1661 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1721 = ((_1706 * _1702) / cbModelParam._m0[35u].z) + ((((((_1665 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1719, _1720, _1721), 0.0);
        vec4 _1730 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1719, _1720, _1721), 0.0);
        vec4 _1737 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1719, _1720, _1721), 0.0);
        vec4 _1744 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1719, _1720, _1721), 0.0);
        float _1756 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1723.x + (-0.5));
        float _1758 = _1756 * (_1723.y + (-0.5));
        float _1759 = _1756 * (_1723.z + (-0.5));
        float _1766 = exp2((_1730.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1730.x + (-0.5));
        float _1768 = _1766 * (_1730.y + (-0.5));
        float _1769 = _1766 * (_1730.z + (-0.5));
        float _1776 = exp2((_1737.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1737.x + (-0.5));
        float _1778 = _1776 * (_1737.y + (-0.5));
        float _1779 = _1776 * (_1737.z + (-0.5));
        float _1786 = exp2((_1744.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1744.x + (-0.5));
        float _1788 = _1786 * (_1744.y + (-0.5));
        float _1789 = _1786 * (_1744.z + (-0.5));
        float _1790 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1791 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1792 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1793 = _1757 * 0.5;
        float _1794 = _1767 * 0.5;
        float _1795 = _1777 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_1081, _1082, _1083), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4578 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1790 + 9.9999997473787516355514526367188e-06);
        float _4589 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4600 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_1820 + 1.0))) + _1825) * _1790;
        float _1835 = _1758 * 0.5;
        float _1836 = _1768 * 0.5;
        float _1837 = _1778 * 0.5;
        float _1838 = dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837));
        float _1843 = (_1838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1838);
        float _1851 = (dot(vec3(_1081, _1082, _1083), vec3(_1843 * _1835, _1843 * _1836, _1843 * _1837)) + 1.0) * 0.5;
        float _4611 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837)) / (_1791 + 9.9999997473787516355514526367188e-06);
        float _4622 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _1862 = _1861 * 2.0;
        float _1866 = (1.0 - _1861) / (_1861 + 1.0);
        float _4633 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _1876 = ((((1.0 - _1867) * (_1862 + 2.0)) * exp2(log2(isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_1862 + 1.0))) + _1867) * _1791;
        float _1877 = _1759 * 0.5;
        float _1878 = _1769 * 0.5;
        float _1879 = _1779 * 0.5;
        float _1880 = dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879));
        float _1885 = (_1880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1880);
        float _1893 = (dot(vec3(_1081, _1082, _1083), vec3(_1885 * _1877, _1885 * _1878, _1885 * _1879)) + 1.0) * 0.5;
        float _4644 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1902 = sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879)) / (_1792 + 9.9999997473787516355514526367188e-06);
        float _4655 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
        float _1904 = _1903 * 2.0;
        float _1908 = (1.0 - _1903) / (_1903 + 1.0);
        float _4666 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _1918 = ((((1.0 - _1909) * (_1904 + 2.0)) * exp2(log2(isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_1904 + 1.0))) + _1909) * _1792;
        _1926 = _1759;
        _1927 = _1758;
        _1928 = _1757;
        _1929 = _1769;
        _1930 = _1768;
        _1931 = _1767;
        _1932 = _1779;
        _1933 = _1778;
        _1934 = _1777;
        _1935 = _1792;
        _1936 = _1791;
        _1937 = _1790;
        _1938 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
        _1939 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
        _1940 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)));
    }
    else
    {
        _1926 = _1620;
        _1927 = _1620;
        _1928 = _1620;
        _1929 = _1620;
        _1930 = _1620;
        _1931 = _1620;
        _1932 = _1620;
        _1933 = _1620;
        _1934 = _1620;
        _1935 = _1620;
        _1936 = _1620;
        _1937 = _1620;
        _1938 = 0.0;
        _1939 = 0.0;
        _1940 = 0.0;
    }
    float _1950 = (cbModelParam._m0[1u].x * (_1938 - _1632)) + _1632;
    float _1951 = (cbModelParam._m0[1u].x * (_1939 - _1633)) + _1633;
    float _1952 = (cbModelParam._m0[1u].x * (_1940 - _1634)) + _1634;
    float _1973 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1950));
    float _1994 = _1254 * 0.5;
    float _1995 = _1255 * 0.5;
    float _1996 = _1256 * 0.5;
    float _1997 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1928, _1931, _1934, _1937));
    float _2000 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1927, _1930, _1933, _1936));
    float _2003 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1926, _1929, _1932, _1935));
    float _2037;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2010 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1619, _1623, _1626, _1629));
        float _2014 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1621, _1624, _1627, _1630));
        float _2018 = dot(vec4(_1994, _1995, _1996, 1.0), vec4(_1622, _1625, _1628, _1631));
        float _2025 = dot(vec4(cbModelParam._m0[39u]), vec4(_1994, _1995, _1996, 1.0));
        _2037 = dot(vec3(isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0)), isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0)), isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2025) ? 0.0 : (isnan(0.0) ? _2025 : max(0.0, _2025))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2037 = 1.0;
    }
    float _2048;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2039 = dot(vec4(cbModelParam._m0[40u]), vec4(_1994, _1995, _1996, 1.0));
        _2048 = dot(vec3(isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2039) ? 0.0 : (isnan(0.0) ? _2039 : max(0.0, _2039))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2048 = 1.0;
    }
    float _2052 = (_2048 * cbModelParam._m0[1u].x) + (_2037 * (1.0 - cbModelParam._m0[1u].x));
    float _2062 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1084);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2062 : min(cbModelParam._m0[25u].z, _2062));
    float _2143;
    float _2145;
    float _2147;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2110 = fma(_1318, cbModelParam._m0[13u].z, fma(_1314, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1310)) + cbModelParam._m0[13u].w;
        float _2114 = fma(_1318, cbModelParam._m0[14u].z, fma(_1314, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1310)) + cbModelParam._m0[14u].w;
        float _2118 = fma(_1318, cbModelParam._m0[15u].z, fma(_1314, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1310)) + cbModelParam._m0[15u].w;
        float _2121 = fma(_1256, cbModelParam._m0[13u].z, fma(_1255, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1254));
        float _2124 = fma(_1256, cbModelParam._m0[14u].z, fma(_1255, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1254));
        float _2127 = fma(_1256, cbModelParam._m0[15u].z, fma(_1255, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1254));
        float _2155;
        if (_2121 > 0.0)
        {
            _2155 = abs((1.0 - _2110) / _2121);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2110 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2155 = frontier_phi_14_12_ladder;
        }
        float _2327;
        if (_2124 > 0.0)
        {
            _2327 = abs((1.0 - _2114) / _2124);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2114 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2327 = frontier_phi_23_19_ladder;
        }
        float _2622;
        if (_2127 > 0.0)
        {
            _2622 = abs((1.0 - _2118) / _2127);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2118 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2622 = frontier_phi_35_30_ladder;
        }
        float _2624 = isnan(_2327) ? _2155 : (isnan(_2155) ? _2327 : min(_2155, _2327));
        float _2625 = isnan(_2622) ? _2624 : (isnan(_2624) ? _2622 : min(_2624, _2622));
        float _2629 = (_2625 * _2121) + _2110;
        float _2630 = (_2625 * _2124) + _2114;
        float _2631 = (_2625 * _2127) + _2118;
        float _2632 = _2625 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2632;
        float _2636 = _2632 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 > _2636) || ((_2630 < _2634) || ((_2629 < _2634) || (_2629 > _2636))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2776 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2631, cbModelParam._m0[9u].z, fma(_2630, cbModelParam._m0[9u].y, _2629 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2631, cbModelParam._m0[10u].z, fma(_2630, cbModelParam._m0[10u].y, _2629 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2631, cbModelParam._m0[11u].z, fma(_2630, cbModelParam._m0[11u].y, _2629 * cbModelParam._m0[11u].x))), _2063);
            frontier_phi_13_35_ladder = _2776.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2776.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2776.x * cbModelParam._m0[1u].y;
        }
        _2143 = frontier_phi_13_35_ladder_2;
        _2145 = frontier_phi_13_35_ladder_1;
        _2147 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2131 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1254, _1255, _1256), _2063);
        _2143 = _2131.x * cbModelParam._m0[1u].y;
        _2145 = _2131.y * cbModelParam._m0[1u].y;
        _2147 = _2131.z * cbModelParam._m0[1u].y;
    }
    float _2151 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1084);
    float _2152 = isnan(_2151) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2151 : min(cbModelParam._m0[25u].w, _2151));
    float _2242;
    float _2244;
    float _2246;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2206 = fma(_1318, cbModelParam._m0[21u].z, fma(_1314, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1310)) + cbModelParam._m0[21u].w;
        float _2210 = fma(_1318, cbModelParam._m0[22u].z, fma(_1314, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1310)) + cbModelParam._m0[22u].w;
        float _2214 = fma(_1318, cbModelParam._m0[23u].z, fma(_1314, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1310)) + cbModelParam._m0[23u].w;
        float _2217 = fma(_1256, cbModelParam._m0[21u].z, fma(_1255, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1254));
        float _2220 = fma(_1256, cbModelParam._m0[22u].z, fma(_1255, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1254));
        float _2223 = fma(_1256, cbModelParam._m0[23u].z, fma(_1255, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1254));
        float _2332;
        if (_2217 > 0.0)
        {
            _2332 = abs((1.0 - _2206) / _2217);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2217 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2206 + 1.0) / _2217);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2332 = frontier_phi_25_21_ladder;
        }
        float _2649;
        if (_2220 > 0.0)
        {
            _2649 = abs((1.0 - _2210) / _2220);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2210 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2649 = frontier_phi_37_32_ladder;
        }
        float _2987;
        if (_2223 > 0.0)
        {
            _2987 = abs((1.0 - _2214) / _2223);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2214 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2987 = frontier_phi_47_44_ladder;
        }
        float _2989 = isnan(_2649) ? _2332 : (isnan(_2332) ? _2649 : min(_2332, _2649));
        float _2990 = isnan(_2987) ? _2989 : (isnan(_2989) ? _2987 : min(_2989, _2987));
        float _2994 = (_2990 * _2217) + _2206;
        float _2995 = (_2990 * _2220) + _2210;
        float _2996 = (_2990 * _2223) + _2214;
        float _2997 = _2990 * 9.9999997473787516355514526367188e-05;
        float _2998 = (-1.0) - _2997;
        float _3000 = _2997 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2996 > _3000) || ((_2996 < _2998) || ((_2995 > _3000) || ((_2995 < _2998) || ((_2994 < _2998) || (_2994 > _3000))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2996, cbModelParam._m0[17u].z, fma(_2995, cbModelParam._m0[17u].y, _2994 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2996, cbModelParam._m0[18u].z, fma(_2995, cbModelParam._m0[18u].y, _2994 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2996, cbModelParam._m0[19u].z, fma(_2995, cbModelParam._m0[19u].y, _2994 * cbModelParam._m0[19u].x))), _2152);
            frontier_phi_22_47_ladder = _3118.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3118.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3118.x * cbModelParam._m0[1u].z;
        }
        _2242 = frontier_phi_22_47_ladder_2;
        _2244 = frontier_phi_22_47_ladder_1;
        _2246 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2226 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1254, _1255, _1256), _2152);
        _2242 = _2226.x * cbModelParam._m0[1u].z;
        _2244 = _2226.y * cbModelParam._m0[1u].z;
        _2246 = _2226.z * cbModelParam._m0[1u].z;
    }
    float _2259 = (((_1281 * _1230) + _1282) * _1246) * ((cbModelParam._m0[1u].w * (_2242 - _2143)) + _2143);
    float _2261 = (((_1281 * _1232) + _1282) * _1246) * ((cbModelParam._m0[1u].w * (_2244 - _2145)) + _2145);
    float _2263 = (((_1281 * _1233) + _1282) * _1246) * ((cbModelParam._m0[1u].w * (_2246 - _2147)) + _2147);
    float _2266 = fma(_2263, cbSceneParam._m0[89u].z, fma(_2261, cbSceneParam._m0[89u].y, _2259 * cbSceneParam._m0[89u].x));
    float _2269 = fma(_2263, cbSceneParam._m0[90u].z, fma(_2261, cbSceneParam._m0[90u].y, _2259 * cbSceneParam._m0[90u].x));
    float _2272 = fma(_2263, cbSceneParam._m0[91u].z, fma(_2261, cbSceneParam._m0[91u].y, _2259 * cbSceneParam._m0[91u].x));
    float _2306 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2314 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2318 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2319 = _2306 / _2318;
    float _2320 = _2310 / _2318;
    float _2321 = _2314 / _2318;
    float _2468;
    float _2469;
    float _2470;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2348 = ((uint(_2321 > cbSceneParam._m0[59u].y) + uint(_2321 > cbSceneParam._m0[59u].x)) + uint(_2321 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2349 = _2348 + 43u;
        uint _2357 = _2348 + 44u;
        uint _2365 = _2348 + 45u;
        uint _2373 = _2348 + 46u;
        float _2384 = fma(_2318, cbSceneParam._m0[_2349].w, fma(_2314, cbSceneParam._m0[_2349].z, fma(_2310, cbSceneParam._m0[_2349].y, _2306 * cbSceneParam._m0[_2349].x)));
        float _2388 = fma(_2318, cbSceneParam._m0[_2357].w, fma(_2314, cbSceneParam._m0[_2357].z, fma(_2310, cbSceneParam._m0[_2357].y, _2306 * cbSceneParam._m0[_2357].x)));
        float _2396 = fma(_2318, cbSceneParam._m0[_2373].w, fma(_2314, cbSceneParam._m0[_2373].z, fma(_2310, cbSceneParam._m0[_2373].y, _2306 * cbSceneParam._m0[_2373].x)));
        float _2401 = cbSceneParam._m0[33u].z * _2396;
        float _2403 = cbSceneParam._m0[33u].w * _2396;
        float _2406 = fma(_2318, cbSceneParam._m0[_2365].w, fma(_2314, cbSceneParam._m0[_2365].z, fma(_2310, cbSceneParam._m0[_2365].y, _2306 * cbSceneParam._m0[_2365].x))) / _2396;
        float _2454 = (cbSceneParam._m0[33u].x - sqrt(((_2320 * _2320) + (_2319 * _2319)) + (_2321 * _2321))) * cbSceneParam._m0[33u].y;
        float _4792 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2461 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2401 + _2384) / _2396, (_2403 + _2388) / _2396), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2403 + _2384) / _2396, (_2388 - _2401) / _2396), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2384 - _2401) / _2396, (_2388 - _2403) / _2396), _2406), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2384 - _2403) / _2396, (_2401 + _2388) / _2396), _2406), 0.0)).x), vec4(0.25)));
        _2468 = 1.0 - (_2461 * cbSceneParam._m0[34u].x);
        _2469 = 1.0 - (_2461 * cbSceneParam._m0[34u].y);
        _2470 = 1.0 - (_2461 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2468 = 1.0;
        _2469 = 1.0;
        _2470 = 1.0;
    }
    float _2534;
    float _2536;
    float _2538;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2522 = fma(_2318, cbSceneParam._m0[63u].w, fma(_2314, cbSceneParam._m0[63u].z, fma(_2310, cbSceneParam._m0[63u].y, _2306 * cbSceneParam._m0[63u].x)));
        float _2523 = fma(_2318, cbSceneParam._m0[60u].w, fma(_2314, cbSceneParam._m0[60u].z, fma(_2310, cbSceneParam._m0[60u].y, _2306 * cbSceneParam._m0[60u].x))) / _2522;
        float _2524 = fma(_2318, cbSceneParam._m0[61u].w, fma(_2314, cbSceneParam._m0[61u].z, fma(_2310, cbSceneParam._m0[61u].y, _2306 * cbSceneParam._m0[61u].x))) / _2522;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2523 >= cbSceneParam._m0[64u].x) && (_2524 >= cbSceneParam._m0[64u].y)) && (_2523 <= cbSceneParam._m0[64u].z)) && (_2524 <= cbSceneParam._m0[64u].w))
        {
            float _2662 = fma(_2318, cbSceneParam._m0[62u].w, fma(_2314, cbSceneParam._m0[62u].z, fma(_2310, cbSceneParam._m0[62u].y, _2306 * cbSceneParam._m0[62u].x))) / _2522;
            float _2666 = isnan(cbSceneParam._m0[41u].w) ? _2662 : (isnan(_2662) ? cbSceneParam._m0[41u].w : max(_2662, cbSceneParam._m0[41u].w));
            float _2709 = (cbSceneParam._m0[33u].x - sqrt(((_2320 * _2320) + (_2319 * _2319)) + (_2321 * _2321))) * cbSceneParam._m0[33u].y;
            float _4808 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
            float _2716 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2523, cbSceneParam._m0[33u].w + _2524), _2666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2523, _2524 - cbSceneParam._m0[33u].z), _2666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2523 - cbSceneParam._m0[33u].z, _2524 - cbSceneParam._m0[33u].w), _2666), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2523 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2524), _2666), 0.0)).x), vec4(0.25)));
            float _2720 = 1.0 - (_2716 * cbSceneParam._m0[34u].x);
            float _2721 = 1.0 - (_2716 * cbSceneParam._m0[34u].y);
            float _2722 = 1.0 - (_2716 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2722) ? _2470 : (isnan(_2470) ? _2722 : min(_2470, _2722));
            frontier_phi_34_33_ladder_1 = isnan(_2721) ? _2469 : (isnan(_2469) ? _2721 : min(_2469, _2721));
            frontier_phi_34_33_ladder_2 = isnan(_2720) ? _2468 : (isnan(_2468) ? _2720 : min(_2468, _2720));
        }
        else
        {
            frontier_phi_34_33_ladder = _2470;
            frontier_phi_34_33_ladder_1 = _2469;
            frontier_phi_34_33_ladder_2 = _2468;
        }
        _2534 = frontier_phi_34_33_ladder_2;
        _2536 = frontier_phi_34_33_ladder_1;
        _2538 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2534 = _2468;
        _2536 = _2469;
        _2538 = _2470;
    }
    uvec4 _2543 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2545 = _2543.x * 14u;
    uint _2546 = _2545 + 13u;
    float _2553 = _1246 + (-1.0);
    float _2558 = (cbLight._m0[_2546].x * _2553) + 1.0;
    float _2559 = (cbLight._m0[_2546].y * _2553) + 1.0;
    float _2560 = (cbLight._m0[_2546].z * _2553) + 1.0;
    float _2561 = (cbLight._m0[_2546].w * _2553) + 1.0;
    uint _2562 = _2545 + 5u;
    float _2568 = isnan(1.0) ? _2559 : (isnan(_2559) ? 1.0 : min(_2559, 1.0));
    uint _2572 = _2545 + 4u;
    float _2581 = isnan(1.0) ? _2558 : (isnan(_2558) ? 1.0 : min(_2558, 1.0));
    uint _2585 = _2545 | 1u;
    float _2596 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_1081, _1082, _1083));
    float _2599 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_1081, _1082, _1083));
    float _4844 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _4855 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2604 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * 0.3183098733425140380859375;
    float _2606 = (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0))) * 0.3183098733425140380859375;
    float _2613 = ((cbLight._m0[_2562].x * _2568) * _2606) + (((cbLight._m0[_2572].x * _2534) * _2581) * _2604);
    float _2614 = ((_2568 * cbLight._m0[_2562].y) * _2606) + (((cbLight._m0[_2572].y * _2536) * _2581) * _2604);
    float _2615 = ((_2568 * cbLight._m0[_2562].z) * _2606) + (((cbLight._m0[_2572].z * _2538) * _2581) * _2604);
    uvec4 _2619 = floatBitsToUint(cbLight._m0[_2545 + 12u]);
    bool _2621 = _2619.x == 0u;
    float _2723;
    float _2725;
    float _2727;
    if (_2621)
    {
        _2723 = _2613;
        _2725 = _2614;
        _2727 = _2615;
    }
    else
    {
        uint _2731 = _2545 + 6u;
        float _2747 = (dot(vec3(cbLight._m0[_2545 + 2u].xyz), vec3(_1081, _1082, _1083)) * 0.5) + 0.5;
        float _2748 = _2747 * _2747;
        float _4866 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2749 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
        float _2750 = isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0));
        _2723 = (((cbLight._m0[_2731].x * 0.3183098733425140380859375) * _2749) * _2750) + _2613;
        _2725 = (((cbLight._m0[_2731].y * 0.3183098733425140380859375) * _2749) * _2750) + _2614;
        _2727 = (((cbLight._m0[_2731].z * 0.3183098733425140380859375) * _2749) * _2750) + _2615;
    }
    bool _2730 = _2619.y == 0u;
    float _2785;
    float _2787;
    float _2789;
    if (_2730)
    {
        _2785 = _2723;
        _2787 = _2725;
        _2789 = _2727;
    }
    else
    {
        uint _2958 = _2545 + 7u;
        float _2974 = (dot(vec3(cbLight._m0[_2545 + 3u].xyz), vec3(_1081, _1082, _1083)) * 0.5) + 0.5;
        float _2975 = _2974 * _2974;
        float _4882 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2976 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
        float _2977 = isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0));
        _2785 = (((cbLight._m0[_2958].x * 0.3183098733425140380859375) * _2976) * _2977) + _2723;
        _2787 = (((cbLight._m0[_2958].y * 0.3183098733425140380859375) * _2976) * _2977) + _2725;
        _2789 = (((cbLight._m0[_2958].z * 0.3183098733425140380859375) * _2976) * _2977) + _2727;
    }
    uint _2792 = _2545 + 8u;
    float _2805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2545].w)) * _1084) * 0.949999988079071044921875);
    float _2806 = _2805 * _2805;
    float _2807 = cbLight._m0[_2545].x + _1160;
    float _2808 = cbLight._m0[_2545].y + _1161;
    float _2809 = cbLight._m0[_2545].z + _1162;
    float _2813 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
    float _2814 = _2813 * _2807;
    float _2815 = _2813 * _2808;
    float _2816 = _2813 * _2809;
    float _2817 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2545].xyz));
    float _4898 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2820 = isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0));
    float _4909 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _2821 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    float _2822 = dot(vec3(_1081, _1082, _1083), vec3(_2814, _2815, _2816));
    float _4920 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2825 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
    float _2826 = dot(vec3(cbLight._m0[_2545].xyz), vec3(_2814, _2815, _2816));
    float _4931 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2830 = _2806 * _2806;
    float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
    float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0)))) * 5.0);
    float _2843 = 0.959999978542327880859375 - _1227;
    float _2845 = 0.959999978542327880859375 - _1228;
    float _2846 = 0.959999978542327880859375 - _1229;
    float _2853 = 1.0 - _2806;
    float _2864 = (0.5 / (((_2821 * ((_2820 * _2853) + _2806)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2853) + _2806) * _2820))) * _2820;
    float _4942 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
    float _2866 = (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
    uint _2880 = _2545 + 9u;
    float _2891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _1084) * 0.949999988079071044921875);
    float _2892 = _2891 * _2891;
    float _2893 = cbLight._m0[_2585].x + _1160;
    float _2894 = cbLight._m0[_2585].y + _1161;
    float _2895 = cbLight._m0[_2585].z + _1162;
    float _2899 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
    float _2900 = _2899 * _2893;
    float _2901 = _2899 * _2894;
    float _2902 = _2899 * _2895;
    float _2903 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2585].xyz));
    float _4953 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
    float _2906 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
    float _2907 = dot(vec3(_1081, _1082, _1083), vec3(_2900, _2901, _2902));
    float _4964 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
    float _2910 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
    float _2911 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2900, _2901, _2902));
    float _4975 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
    float _2915 = _2892 * _2892;
    float _2919 = ((_2910 * _2910) * (_2915 + (-1.0))) + 1.0;
    float _2926 = exp2(log2(1.0 - (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)))) * 5.0);
    float _2933 = 1.0 - _2892;
    float _2943 = (0.5 / (((_2821 * ((_2906 * _2933) + _2892)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _2933) + _2892) * _2906))) * _2906;
    float _4986 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2945 = (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2915 / ((_2919 * _2919) * 3.141590118408203125));
    float _2955 = (((((_2926 * _2843) + _1230) * cbLight._m0[_2880].x) * _2945) * _2568) + ((((cbLight._m0[_2792].x * _2534) * ((_2842 * _2843) + _1230)) * _2866) * _2581);
    float _2956 = (((((_2926 * _2845) + _1232) * cbLight._m0[_2880].y) * _2945) * _2568) + ((((cbLight._m0[_2792].y * _2536) * ((_2842 * _2845) + _1232)) * _2866) * _2581);
    float _2957 = (((((_2926 * _2846) + _1233) * cbLight._m0[_2880].z) * _2945) * _2568) + ((((cbLight._m0[_2792].z * _2538) * ((_2842 * _2846) + _1233)) * _2866) * _2581);
    float _3013;
    float _3015;
    float _3017;
    if (_2621)
    {
        _3013 = _2955;
        _3015 = _2956;
        _3017 = _2957;
    }
    else
    {
        uint _3019 = _2545 + 2u;
        uint _3023 = _2545 + 10u;
        float _3037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3019].w)) * _1084) * 0.949999988079071044921875);
        float _3038 = _3037 * _3037;
        float _3039 = cbLight._m0[_3019].x + _1160;
        float _3040 = cbLight._m0[_3019].y + _1161;
        float _3041 = cbLight._m0[_3019].z + _1162;
        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
        float _3046 = _3045 * _3039;
        float _3047 = _3045 * _3040;
        float _3048 = _3045 * _3041;
        float _3049 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_3019].xyz));
        float _4997 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
        float _3052 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
        float _3053 = dot(vec3(_1081, _1082, _1083), vec3(_3046, _3047, _3048));
        float _5008 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
        float _3056 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
        float _3057 = dot(vec3(cbLight._m0[_3019].xyz), vec3(_3046, _3047, _3048));
        float _5019 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        float _3061 = _3038 * _3038;
        float _3065 = ((_3056 * _3056) * (_3061 + (-1.0))) + 1.0;
        float _3072 = exp2(log2(1.0 - (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) * 5.0);
        float _3079 = 1.0 - _3038;
        float _3089 = (0.5 / (((_2821 * ((_3052 * _3079) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _3079) + _3038) * _3052))) * _3052;
        float _5030 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        float _3091 = (isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_3061 / ((_3065 * _3065) * 3.141590118408203125));
        float _3092 = isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0));
        _3013 = (((((_3072 * _2843) + _1230) * cbLight._m0[_3023].x) * _3091) * _3092) + _2955;
        _3015 = (((((_3072 * _2845) + _1232) * cbLight._m0[_3023].y) * _3091) * _3092) + _2956;
        _3017 = (((((_3072 * _2846) + _1233) * cbLight._m0[_3023].z) * _3091) * _3092) + _2957;
    }
    float _3123;
    float _3125;
    float _3127;
    if (_2730)
    {
        _3123 = _3013;
        _3125 = _3015;
        _3127 = _3017;
    }
    else
    {
        uint _3134 = _2545 + 3u;
        uint _3138 = _2545 + 11u;
        float _3152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3134].w)) * _1084) * 0.949999988079071044921875);
        float _3153 = _3152 * _3152;
        float _3154 = cbLight._m0[_3134].x + _1160;
        float _3155 = cbLight._m0[_3134].y + _1161;
        float _3156 = cbLight._m0[_3134].z + _1162;
        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
        float _3161 = _3160 * _3154;
        float _3162 = _3160 * _3155;
        float _3163 = _3160 * _3156;
        float _3164 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_3134].xyz));
        float _5046 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
        float _3167 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
        float _3168 = dot(vec3(_1081, _1082, _1083), vec3(_3161, _3162, _3163));
        float _5057 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
        float _3171 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
        float _3172 = dot(vec3(cbLight._m0[_3134].xyz), vec3(_3161, _3162, _3163));
        float _5068 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
        float _3176 = _3153 * _3153;
        float _3180 = ((_3171 * _3171) * (_3176 + (-1.0))) + 1.0;
        float _3187 = exp2(log2(1.0 - (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0)))) * 5.0);
        float _3194 = 1.0 - _3153;
        float _3204 = (0.5 / (((_2821 * ((_3167 * _3194) + _3153)) + 9.9999999392252902907785028219223e-09) + (((_2821 * _3194) + _3153) * _3167))) * _3167;
        float _5079 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
        float _3206 = (isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3176 / ((_3180 * _3180) * 3.141590118408203125));
        float _3207 = isnan(1.0) ? _2561 : (isnan(_2561) ? 1.0 : min(_2561, 1.0));
        _3123 = (((((_3187 * _2843) + _1230) * cbLight._m0[_3138].x) * _3206) * _3207) + _3013;
        _3125 = (((((_3187 * _2845) + _1232) * cbLight._m0[_3138].y) * _3206) * _3207) + _3015;
        _3127 = (((((_3187 * _2846) + _1233) * cbLight._m0[_3138].z) * _3206) * _3207) + _3017;
    }
    float _3273;
    float _3275;
    float _3277;
    float _3279;
    float _3281;
    float _3283;
    if (_2543.y == 0u)
    {
        uvec4 _3228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3229 = _3228.x;
        uint _3240 = uint((float(_3228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1169) / _3229))) + floor(float(uint(cbSceneParam._m0[85u].x * _1168) / _3229)));
        float _3250 = (log2(_2321 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3251 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
        uint _3254 = uint(isnan(14.0) ? _3251 : (isnan(_3251) ? 14.0 : min(_3251, 14.0)));
        uvec4 _3259 = texelFetch(g_lightClusterGridBuffer, int(((_3254 << 2u) + (_3240 << 6u)) >> 2u));
        uint _3260 = _3259.x;
        uint _3261 = _3228.z;
        float _3340;
        float _3342;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        if (((((1u << ((_3261 >> 4u) & 15u)) + 4294967295u) & _3260) == 0u) || ((_3261 & 240u) == 0u))
        {
            _3340 = 0.0;
            _3342 = 0.0;
            _3344 = 0.0;
            _3346 = 0.0;
            _3348 = 0.0;
            _3350 = 0.0;
        }
        else
        {
            float _3341;
            float _3343;
            float _3345;
            float _3347;
            float _3349;
            float _3351;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            float _3487 = 0.0;
            float _3488 = 0.0;
            float _3489 = 0.0;
            uint _3490 = 0u;
            uint _3499;
            bool _3500;
            for (;;)
            {
                _3499 = texelFetch(g_lightClassification, int((((_3254 << 5u) + (_3240 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                _3500 = _3499 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3500)
                {
                    frontier_phi_66_pred = _3489;
                    frontier_phi_66_pred_1 = _3488;
                    frontier_phi_66_pred_2 = _3487;
                    frontier_phi_66_pred_3 = _3486;
                    frontier_phi_66_pred_4 = _3485;
                    frontier_phi_66_pred_5 = _3484;
                }
                else
                {
                    float _3608;
                    float _3609;
                    float _3610;
                    float _3611;
                    float _3612;
                    float _3613;
                    uint _3614;
                    _3608 = _3484;
                    _3609 = _3485;
                    _3610 = _3486;
                    _3611 = _3487;
                    _3612 = _3488;
                    _3613 = _3489;
                    _3614 = _3499;
                    float _3540;
                    float _3541;
                    float _3542;
                    float _3543;
                    float _3544;
                    float _3545;
                    for (;;)
                    {
                        uint _3618 = uint(findLSB(_3614)) + (_3490 << 5u);
                        uint _3615 = (_3614 + 4294967295u) & _3614;
                        uint _3620 = _3618 * 48u;
                        vec4 _3634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3620)).x, texelFetch(g_PointLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3620 + 3u)).x));
                        uint _3640 = (_3618 * 48u) + 4u;
                        vec4 _3653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3640)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3640 + 3u)).x));
                        uint _3659 = (_3618 * 48u) + 8u;
                        vec3 _3670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3659)).x, texelFetch(g_PointLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3659 + 2u)).x));
                        float _3674 = _3634.x - _2319;
                        float _3675 = _3634.y - _2320;
                        float _3676 = _3634.z - _2321;
                        float _3677 = dot(vec3(_3674, _3675, _3676), vec3(_3674, _3675, _3676));
                        float _3680 = inversesqrt(_3677);
                        float _3681 = _3680 * _3674;
                        float _3682 = _3680 * _3675;
                        float _3683 = _3680 * _3676;
                        float _3684 = dot(vec3(_1187, _1190, _1193), vec3(_3681, _3682, _3683));
                        float _3689 = 1.0 - (_3677 * _3634.w);
                        float _5105 = isnan(0.0) ? _3689 : (isnan(_3689) ? 0.0 : max(_3689, 0.0));
                        float _3690 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
                        float _3691 = sqrt(_3677) * _3653.w;
                        float _3694 = 1.39999997615814208984375 / (_3691 + 1.39999997615814208984375);
                        float _3695 = _3694 * _3694;
                        float _3698 = ((1.0 - _3695) * _3684) + _3695;
                        float _3701 = _3691 * _3691;
                        float _3705 = ((isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0))) * _3690) / ((_3701 * 0.699999988079071044921875) + 1.0);
                        float _3709 = (-0.0) - _2319;
                        float _3710 = (-0.0) - _2320;
                        float _3711 = (-0.0) - _2321;
                        float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                        float _3716 = _3715 * _3709;
                        float _3717 = _3715 * _3710;
                        float _3718 = _3715 * _3711;
                        float _3725 = exp2(log2(1.0 / ((_3701 * 3.5) + 5.0)) * 0.25);
                        float _3726 = 1.0 - _1262;
                        float _3733 = sqrt(1.0 - ((1.0 - (_3726 * _3726)) * (1.0 - (_3725 * _3725))));
                        float _3734 = _3733 * _3733;
                        float _3735 = _3734 * _3734;
                        float _3736 = _3716 + _3681;
                        float _3737 = _3717 + _3682;
                        float _3738 = _3718 + _3683;
                        float _3742 = inversesqrt(dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738)));
                        float _3746 = dot(vec3(_1187, _1190, _1193), vec3(_3716, _3717, _3718));
                        float _5121 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                        float _3749 = isnan(1.0) ? _5121 : (isnan(_5121) ? 1.0 : min(_5121, 1.0));
                        float _3750 = dot(vec3(_1187, _1190, _1193), vec3(_3742 * _3736, _3742 * _3737, _3742 * _3738));
                        float _5132 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                        float _3753 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
                        float _3757 = ((_3753 * _3753) * (_3735 + (-1.0))) + 1.0;
                        float _3758 = _3694 * _3734;
                        float _3759 = _3758 * _3758;
                        float _3762 = ((1.0 - _3759) * _3684) + _3759;
                        float _5143 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3763 = isnan(1.0) ? _5143 : (isnan(_5143) ? 1.0 : min(_5143, 1.0));
                        float _3764 = 1.0 - _3734;
                        float _3774 = (0.5 / (((_3763 * ((_3749 * _3764) + _3734)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3734) * _3749))) * _3763;
                        float _5154 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                        float _3785 = (((_3735 * 3.1415927410125732421875) * (isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0)))) / ((_3757 * _3757) * ((_3701 * 2.1991131305694580078125) + 3.141590118408203125))) * _3690;
                        _3543 = (_3705 * _3653.x) + _3611;
                        _3544 = (_3705 * _3653.y) + _3612;
                        _3545 = (_3705 * _3653.z) + _3613;
                        _3540 = (_3785 * _3670.x) + _3608;
                        _3541 = (_3785 * _3670.y) + _3609;
                        _3542 = (_3785 * _3670.z) + _3610;
                        if (_3615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3608 = _3540;
                            _3609 = _3541;
                            _3610 = _3542;
                            _3611 = _3543;
                            _3612 = _3544;
                            _3613 = _3545;
                            _3614 = _3615;
                        }
                    }
                    frontier_phi_66_pred = _3545;
                    frontier_phi_66_pred_1 = _3544;
                    frontier_phi_66_pred_2 = _3543;
                    frontier_phi_66_pred_3 = _3542;
                    frontier_phi_66_pred_4 = _3541;
                    frontier_phi_66_pred_5 = _3540;
                }
                _3351 = frontier_phi_66_pred;
                _3349 = frontier_phi_66_pred_1;
                _3347 = frontier_phi_66_pred_2;
                _3345 = frontier_phi_66_pred_3;
                _3343 = frontier_phi_66_pred_4;
                _3341 = frontier_phi_66_pred_5;
                uint _3491 = _3490 + 1u;
                if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3484 = _3341;
                    _3485 = _3343;
                    _3486 = _3345;
                    _3487 = _3347;
                    _3488 = _3349;
                    _3489 = _3351;
                    _3490 = _3491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3340 = _3341;
            _3342 = _3343;
            _3344 = _3345;
            _3346 = _3347;
            _3348 = _3349;
            _3350 = _3351;
        }
        uvec4 _3354 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3355 = _3354.z;
        uint _3357 = (_3355 >> 8u) & 15u;
        float _3452;
        float _3454;
        float _3456;
        float _3458;
        float _3460;
        float _3462;
        if (((4294967295u << _3357) & _3260) == 0u)
        {
            _3452 = _3340;
            _3454 = _3342;
            _3456 = _3344;
            _3458 = _3346;
            _3460 = _3348;
            _3462 = _3350;
        }
        else
        {
            float _3477 = inversesqrt(dot(vec3(_2319, _2320, _2321), vec3(_2319, _2320, _2321)));
            float _3478 = _3477 * _2319;
            float _3479 = _3477 * _2320;
            float _3480 = _3477 * _2321;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3357 < ((_3355 >> 12u) & 15u))
            {
                float _3453;
                float _3455;
                float _3457;
                float _3459;
                float _3461;
                float _3463;
                float _3591 = _3340;
                float _3592 = _3342;
                float _3593 = _3344;
                float _3594 = _3346;
                float _3595 = _3348;
                float _3596 = _3350;
                uint _3597 = _3357;
                uint _3606;
                bool _3607;
                for (;;)
                {
                    _3606 = texelFetch(g_lightClassification, int((((_3254 << 5u) + (_3240 << 9u)) + (_3597 << 2u)) >> 2u)).x;
                    _3607 = _3606 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3607)
                    {
                        frontier_phi_72_pred = _3596;
                        frontier_phi_72_pred_1 = _3595;
                        frontier_phi_72_pred_2 = _3594;
                        frontier_phi_72_pred_3 = _3593;
                        frontier_phi_72_pred_4 = _3592;
                        frontier_phi_72_pred_5 = _3591;
                    }
                    else
                    {
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _4083;
                        float _4084;
                        float _4085;
                        float _4086;
                        float _4087;
                        float _4088;
                        float _3803 = _3591;
                        float _3804 = _3592;
                        float _3805 = _3593;
                        float _3806 = _3594;
                        float _3807 = _3595;
                        float _3808 = _3596;
                        uint _3809 = _3606;
                        uint _3810;
                        vec4 _3835;
                        float _3836;
                        vec4 _3851;
                        vec3 _3863;
                        vec4 _3878;
                        vec4 _3893;
                        float _3939;
                        bool _3940;
                        for (;;)
                        {
                            uint _3820 = ((_3597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3809));
                            _3810 = (_3809 + 4294967295u) & _3809;
                            uint _3822 = _3820 * 40u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            _3836 = _3835.w;
                            uint _3838 = (_3820 * 40u) + 4u;
                            _3851 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3838)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3838 + 3u)).x));
                            uint _3853 = (_3820 * 40u) + 8u;
                            _3863 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3853 + 2u)).x));
                            uint _3865 = (_3820 * 40u) + 16u;
                            _3878 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3865)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3865 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3865 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3865 + 3u)).x));
                            uint _3880 = (_3820 * 40u) + 20u;
                            _3893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3880 + 3u)).x));
                            uint _3895 = (_3820 * 40u) + 24u;
                            vec4 _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            uint _3914 = (_3820 * 40u) + 28u;
                            vec4 _3927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 3u)).x));
                            _3939 = fma(_2321, _3927.z, fma(_2320, _3927.y, _3927.x * _2319)) + _3927.w;
                            _3940 = !((fma(_2321, _3908.z, fma(_2320, _3908.y, _3908.x * _2319)) + _3908.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3940)
                            {
                                float _3967 = _3835.x - _2319;
                                float _3968 = _3835.y - _2320;
                                float _3969 = _3835.z - _2321;
                                float _3970 = dot(vec3(_3967, _3968, _3969), vec3(_3967, _3968, _3969));
                                float _3973 = inversesqrt(_3970);
                                float _3974 = _3973 * _3967;
                                float _3975 = _3973 * _3968;
                                float _3976 = _3973 * _3969;
                                float _3980 = 1.0 - (_3970 / (_3836 * _3836));
                                float _5165 = isnan(0.0) ? _3980 : (isnan(_3980) ? 0.0 : max(_3980, 0.0));
                                float _3981 = isnan(1.0) ? _5165 : (isnan(_5165) ? 1.0 : min(_5165, 1.0));
                                float _3985 = sqrt(_3970) * _3851.w;
                                float _3987 = 1.39999997615814208984375 / (_3985 + 1.39999997615814208984375);
                                float _3988 = _3987 * _3987;
                                float _3991 = ((1.0 - _3988) * dot(vec3(_3974, _3975, _3976), vec3(_1187, _1190, _1193))) + _3988;
                                float _3994 = _3985 * _3985;
                                float _3998 = (fma(_2321, _3878.z, fma(_2320, _3878.y, _3878.x * _2319)) + _3878.w) / _3939;
                                float _3999 = (fma(_2321, _3893.z, fma(_2320, _3893.y, _3893.x * _2319)) + _3893.w) / _3939;
                                float _4003 = 1.0 - dot(vec2(_3998, _3999), vec2(_3998, _3999));
                                float _5181 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4004 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
                                float _4005 = _4004 * (((isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0))) * _3981) / ((_3994 * 0.699999988079071044921875) + 1.0));
                                float _4017 = exp2(log2(1.0 / ((_3994 * 3.5) + 5.0)) * 0.25);
                                float _4018 = 1.0 - _1262;
                                float _4025 = sqrt(1.0 - ((1.0 - (_4018 * _4018)) * (1.0 - (_4017 * _4017))));
                                float _4026 = _4025 * _4025;
                                float _4027 = _4026 * _4026;
                                float _4028 = _3974 - _3478;
                                float _4029 = _3975 - _3479;
                                float _4030 = _3976 - _3480;
                                float _4034 = inversesqrt(dot(vec3(_4028, _4029, _4030), vec3(_4028, _4029, _4030)));
                                float _4038 = dot(vec3(_1187, _1190, _1193), vec3((-0.0) - _3478, (-0.0) - _3479, (-0.0) - _3480));
                                float _5192 = isnan(0.0) ? _4038 : (isnan(_4038) ? 0.0 : max(_4038, 0.0));
                                float _4041 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
                                float _4042 = dot(vec3(_1187, _1190, _1193), vec3(_4034 * _4028, _4034 * _4029, _4034 * _4030));
                                float _5203 = isnan(0.0) ? _4042 : (isnan(_4042) ? 0.0 : max(_4042, 0.0));
                                float _4045 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                                float _4049 = ((_4045 * _4045) * (_4027 + (-1.0))) + 1.0;
                                float _4050 = _3987 * _4026;
                                float _4051 = _4050 * _4050;
                                float _4057 = ((1.0 - _4051) * dot(vec3(_1187, _1190, _1193), vec3(_3974, _3975, _3976))) + _4051;
                                float _5214 = isnan(0.0) ? _4057 : (isnan(_4057) ? 0.0 : max(_4057, 0.0));
                                float _4058 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                                float _4059 = 1.0 - _4026;
                                float _4069 = (0.5 / (((_4058 * ((_4041 * _4059) + _4026)) + 9.9999999392252902907785028219223e-09) + (((_4058 * _4059) + _4026) * _4041))) * _4058;
                                float _5225 = isnan(0.0) ? _4069 : (isnan(_4069) ? 0.0 : max(_4069, 0.0));
                                float _4079 = (_4004 * _3981) * (((_4027 * 3.1415927410125732421875) * (isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0)))) / ((_4049 * _4049) * ((_3994 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _4005 * _3851.y;
                                frontier_phi_78_pred_1 = _4005 * _3851.x;
                                frontier_phi_78_pred_2 = _4079 * _3863.z;
                                frontier_phi_78_pred_3 = _4079 * _3863.y;
                                frontier_phi_78_pred_4 = _4079 * _3863.x;
                                frontier_phi_78_pred_5 = _4005 * _3851.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4087 = frontier_phi_78_pred;
                            _4086 = frontier_phi_78_pred_1;
                            _4085 = frontier_phi_78_pred_2;
                            _4084 = frontier_phi_78_pred_3;
                            _4083 = frontier_phi_78_pred_4;
                            _4088 = frontier_phi_78_pred_5;
                            _3793 = _4086 + _3806;
                            _3794 = _4087 + _3807;
                            _3795 = _4088 + _3808;
                            _3790 = _4083 + _3803;
                            _3791 = _4084 + _3804;
                            _3792 = _4085 + _3805;
                            if (_3810 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3803 = _3790;
                                _3804 = _3791;
                                _3805 = _3792;
                                _3806 = _3793;
                                _3807 = _3794;
                                _3808 = _3795;
                                _3809 = _3810;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3795;
                        frontier_phi_72_pred_1 = _3794;
                        frontier_phi_72_pred_2 = _3793;
                        frontier_phi_72_pred_3 = _3792;
                        frontier_phi_72_pred_4 = _3791;
                        frontier_phi_72_pred_5 = _3790;
                    }
                    _3463 = frontier_phi_72_pred;
                    _3461 = frontier_phi_72_pred_1;
                    _3459 = frontier_phi_72_pred_2;
                    _3457 = frontier_phi_72_pred_3;
                    _3455 = frontier_phi_72_pred_4;
                    _3453 = frontier_phi_72_pred_5;
                    uint _3598 = _3597 + 1u;
                    if (_3598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3591 = _3453;
                        _3592 = _3455;
                        _3593 = _3457;
                        _3594 = _3459;
                        _3595 = _3461;
                        _3596 = _3463;
                        _3597 = _3598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3463;
                frontier_phi_60_61_ladder_1 = _3461;
                frontier_phi_60_61_ladder_2 = _3457;
                frontier_phi_60_61_ladder_3 = _3455;
                frontier_phi_60_61_ladder_4 = _3453;
                frontier_phi_60_61_ladder_5 = _3459;
            }
            else
            {
                frontier_phi_60_61_ladder = _3350;
                frontier_phi_60_61_ladder_1 = _3348;
                frontier_phi_60_61_ladder_2 = _3344;
                frontier_phi_60_61_ladder_3 = _3342;
                frontier_phi_60_61_ladder_4 = _3340;
                frontier_phi_60_61_ladder_5 = _3346;
            }
            _3452 = frontier_phi_60_61_ladder_4;
            _3454 = frontier_phi_60_61_ladder_3;
            _3456 = frontier_phi_60_61_ladder_2;
            _3458 = frontier_phi_60_61_ladder_5;
            _3460 = frontier_phi_60_61_ladder_1;
            _3462 = frontier_phi_60_61_ladder;
        }
        float _3467 = isnan(1.0) ? _1246 : (isnan(_1246) ? 1.0 : min(_1246, 1.0));
        _3273 = (_3467 * _3458) + _2785;
        _3275 = (_3467 * _3460) + _2787;
        _3277 = (_3467 * _3462) + _2789;
        _3279 = ((_3452 * _1230) * _3467) + _3123;
        _3281 = ((_3454 * _1232) * _3467) + _3125;
        _3283 = ((_3456 * _1233) * _3467) + _3127;
    }
    else
    {
        _3273 = _2785;
        _3275 = _2787;
        _3277 = _2789;
        _3279 = _3123;
        _3281 = _3125;
        _3283 = _3127;
    }
    float _5241 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _5252 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _5263 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    uint _3303 = _271 + 6u;
    float _3311 = _1168 / cbSceneParam._m0[86u].x;
    float _3312 = _1169 / cbSceneParam._m0[86u].y;
    vec4 _3326 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3311, _3312, (log2((isnan(cbSceneParam._m0[77u].w) ? _1103 : (isnan(_1103) ? cbSceneParam._m0[77u].w : min(_1103, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3328 = _3326.x;
    float _3329 = _3326.y;
    float _3330 = _3326.z;
    float _3331 = _3326.w;
    float _3402;
    float _3404;
    float _3406;
    float _3408;
    if (_1103 > cbSceneParam._m0[78u].w)
    {
        float _3365 = isnan(_1103) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1103 : min(cbSceneParam._m0[80u].w, _1103));
        float _3366 = _3365 / _1103;
        float _3377 = _3366 * _1153;
        float _3378 = _1154 * _3366;
        float _3379 = (-0.0) - _3378;
        float _3380 = _3366 * _1155;
        float _3382 = (cbSceneParam._m0[77u].w * _3379) / _3365;
        float _3383 = _3382 + cbSceneParam._m0[79u].w;
        float _3384 = cbSceneParam._m0[79u].w - _3378;
        float _3390 = sqrt(((_3377 * _3377) + (_3378 * _3378)) + (_3380 * _3380));
        float _3393 = (1.0 - (cbSceneParam._m0[77u].w / _3365)) * _3390;
        float _3398 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3400 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3553;
        if (abs((_3379 - _3382) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3553 = ((((_3383 > 0.0) ? exp2(_3398 * _3383) : (2.0 - exp2(_3400 * _3383))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3393;
        }
        else
        {
            float _3513 = 1.0 / cbSceneParam._m0[80u].x;
            float _3514 = isnan(_3384) ? _3383 : (isnan(_3383) ? _3384 : max(_3383, _3384));
            float _3515 = isnan(_3384) ? _3383 : (isnan(_3383) ? _3384 : min(_3383, _3384));
            float _3524 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : min(_3514, 0.0));
            float _3525 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : min(_3515, 0.0));
            _3553 = ((abs(_3390 / _3379) * cbSceneParam._m0[80u].y) * ((((_3524 - _3525) * 2.0) - ((exp2(_3398 * (isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0)))) - exp2(_3398 * (isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))))) * _3513)) - ((exp2(_3400 * _3524) - exp2(_3400 * _3525)) * _3513))) + (_3393 * cbSceneParam._m0[80u].z);
        }
        vec4 _3555 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3311, _3312, 1.0), 0.0);
        float _3564 = exp2((_3553 * (-1.44269502162933349609375)) * (1.0 - _3555.w));
        float _3565 = log2(_3564);
        float _3581 = log2(_3331);
        _3402 = (exp2(_3581 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].x)) * _3555.x) / cbSceneParam._m0[78u].x)) + _3328;
        _3404 = (exp2(_3581 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].y)) * _3555.y) / cbSceneParam._m0[78u].y)) + _3329;
        _3406 = (exp2(_3581 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3565 * cbSceneParam._m0[78u].z)) * _3555.z) / cbSceneParam._m0[78u].z)) + _3330;
        _3408 = _3564 * _3331;
    }
    else
    {
        _3402 = _3328;
        _3404 = _3329;
        _3406 = _3330;
        _3408 = _3331;
    }
    float _3420 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3421 = _3420 == 3.0;
    float _3422 = log2(_3408);
    float _3429 = exp2(_3422 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5241 : (isnan(_5241) ? 1.0 : min(_5241, 1.0))) * (_3273 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1246))) + ((_3279 + ((isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0))) * _2052)) * cbPerFrame._m0[3u].x));
    float _3430 = exp2(_3422 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5252 : (isnan(_5252) ? 1.0 : min(_5252, 1.0))) * (_3275 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1246))) + ((_3281 + ((isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * _2052)) * cbPerFrame._m0[3u].x));
    float _3431 = exp2(_3422 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0))) * (_3277 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1246))) + ((_3283 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2052)) * cbPerFrame._m0[3u].x));
    float _3440 = (_3420 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3440 * (_3421 ? _3429 : (_3429 + (cbSceneParam._m0[72u].w * _3402)));
    SV_Target.y = _3440 * (_3421 ? _3430 : (_3430 + (cbSceneParam._m0[72u].w * _3404)));
    SV_Target.z = _3440 * (_3421 ? _3431 : (_3431 + (cbSceneParam._m0[72u].w * _3406)));
    SV_Target.w = cbInstanceData._m0[_3303].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3303].w;
}


