#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1287;
float _3667;
float _3668;
float _3669;
float _3670;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3679 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _264) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _265) + cbTextureTilingScale._m0[14u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _496 = _494.x;
    float _497 = _494.y;
    float _498 = _494.z;
    float _507 = ((_477.z - _498) * _419) + _498;
    float _510 = ((((_477.x - _496) * _419) + _496) * 2.0) + (-1.0);
    float _512 = ((((_477.y - _497) * _419) + _497) * 2.0) + (-1.0);
    float _513 = dot(vec2(_510, _512), vec2(_510, _512));
    float _3690 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _561 = _559.x;
    float _562 = 1.0 - _561;
    float _578 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_561 - _562) * cbMtdParam._m0[24u].z) + _562) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3701 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
    float _586 = (_579 * ((_457.x * cbMtdParam._m0[18u].x) - _432)) + _432;
    float _587 = (_579 * ((_457.y * cbMtdParam._m0[18u].y) - _435)) + _435;
    float _588 = (_579 * ((_457.z * cbMtdParam._m0[18u].z) - _438)) + _438;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _616 = _614.x;
    float _633 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _616) * _419) + _616;
    float _637 = ((_600.x - _633) * cbMtdParam._m0[19u].z) + _633;
    float _639 = _637 - (_637 * _579);
    float _643 = (cbMtdParam._m0[19u].w * (_534.z - _507)) + _507;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3712 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = (_579 * (_656.z - _643)) + _643;
    float _676 = (((_534.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _510;
    float _677 = (((_534.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _512;
    float _689 = (((_663 - _676) + (cbMtdParam._m0[21u].x * _676)) * _579) + _676;
    float _690 = (((_664 - _677) + (cbMtdParam._m0[21u].x * _677)) * _579) + _677;
    float _691 = (_579 * (sqrt(1.0 - (isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0)))) - _518)) + _518;
    float _693 = cbMtdParam._m0[22u].x + _534.w;
    float _696 = fma(_691, _231 * NORMAL.x, fma(_690, _238 * TANGENT.x, (_224 * _216) * _689));
    float _699 = fma(_691, _231 * NORMAL.y, fma(_690, _238 * TANGENT.y, (_224 * _217) * _689));
    float _702 = fma(_691, _231 * NORMAL.z, fma(_690, _238 * TANGENT.z, (_224 * _218) * _689));
    float _706 = inversesqrt(dot(vec3(_696, _699, _702), vec3(_696, _699, _702)));
    float _707 = _706 * _696;
    float _708 = _706 * _699;
    float _709 = _706 * _702;
    float _3723 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _710 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _3734 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
    float _3745 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _3756 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3767 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _3778 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _715 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _780 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _770);
    float _781 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _770);
    float _782 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _770);
    float _786 = inversesqrt(dot(vec3(_780, _781, _782), vec3(_780, _781, _782)));
    float _787 = _780 * _786;
    float _788 = _781 * _786;
    float _789 = _782 * _786;
    vec4 _794 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _796 = _794.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _968 = sqrt(((_780 * _780) + (_781 * _781)) + (_782 * _782));
        float _974 = (cbMatDynParam._m0[5u].x * _968) + cbMatDynParam._m0[5u].y;
        float _3789 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _979 = (cbMatDynParam._m0[5u].z * _968) + cbMatDynParam._m0[5u].w;
        float _3800 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) - _975)) + _975) < ((_796 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _807 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _808 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _826 = fma(_709, cbSceneParam._m0[5u].z, fma(_708, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _707));
    float _829 = fma(_709, cbSceneParam._m0[6u].z, fma(_708, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _707));
    float _832 = fma(_709, cbSceneParam._m0[7u].z, fma(_708, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _707));
    uint _845 = _244 + 9u;
    uint _846 = _845 + uint(cbMatDynParam._m0[0u].w);
    float _852 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * cbInstanceData._m0[_846].x;
    float _853 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0)))) * cbInstanceData._m0[_846].y;
    float _854 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0)))) * cbInstanceData._m0[_846].z;
    float _3811 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _855 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _856 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _858 = 1.0 - _715;
    float _859 = _855 * _858;
    float _860 = _856 * _858;
    float _861 = _857 * _858;
    float _866 = (_855 + (-0.039999999105930328369140625)) * _715;
    float _867 = (_856 + (-0.039999999105930328369140625)) * _715;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _715;
    float _869 = _866 + 0.039999999105930328369140625;
    float _871 = _867 + 0.039999999105930328369140625;
    float _872 = _868 + 0.039999999105930328369140625;
    vec4 _881 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _807, cbSceneParam._m0[86u].y * _808));
    float _885 = ((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * TEXCOORD_5.w) * _881.x;
    float _886 = dot(vec3(_707, _708, _709), vec3(_787, _788, _789));
    float _889 = _886 * 2.0;
    float _893 = (_889 * _707) - _787;
    float _894 = (_889 * _708) - _788;
    float _895 = (_889 * _709) - _789;
    float _899 = abs(dot(vec3(_787, _788, _789), vec3(_707, _708, _709)));
    float _3844 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _901 = sqrt(_710);
    float _914 = exp2((_901 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_901 * 3.0));
    float _920 = (1.0 - _914) * ((_901 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _921 = _914 * _901;
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1286;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1011 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _1015 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _1019 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1044 = _949 + _707;
        float _1045 = _953 + _708;
        float _1046 = _957 + _709;
        float _1056 = fma(_1046, cbModelParam._m0[26u].z, fma(_1045, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044)) - _1011;
        float _1057 = fma(_1046, cbModelParam._m0[27u].z, fma(_1045, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044)) - _1015;
        float _1058 = fma(_1046, cbModelParam._m0[28u].z, fma(_1045, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044)) - _1019;
        float _1062 = inversesqrt(dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058)));
        float _1075 = ((_1062 * _1056) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1011 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1076 = ((_1062 * _1057) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1015 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1077 = ((_1062 * _1058) / cbModelParam._m0[34u].z) + ((((((_1019 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1075, _1076, _1077), 0.0);
        float _1114 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1115 = _1114 * (_1080.x + (-0.5));
        float _1116 = _1114 * (_1080.y + (-0.5));
        float _1117 = _1114 * (_1080.z + (-0.5));
        float _1124 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1087.x + (-0.5));
        float _1126 = _1124 * (_1087.y + (-0.5));
        float _1127 = _1124 * (_1087.z + (-0.5));
        float _1134 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1094.x + (-0.5));
        float _1136 = _1134 * (_1094.y + (-0.5));
        float _1137 = _1134 * (_1094.z + (-0.5));
        float _1144 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1101.x + (-0.5));
        float _1146 = _1144 * (_1101.y + (-0.5));
        float _1147 = _1144 * (_1101.z + (-0.5));
        float _1148 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = _1115 * 0.5;
        float _1152 = _1125 * 0.5;
        float _1153 = _1135 * 0.5;
        float _1154 = dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153));
        float _1159 = (_1154 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1154);
        float _1168 = (dot(vec3(_707, _708, _709), vec3(_1159 * _1151, _1159 * _1152, _1159 * _1153)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1178 = sqrt(((_1152 * _1152) + (_1151 * _1151)) + (_1153 * _1153)) / (_1148 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1179 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1180 = _1179 * 2.0;
        float _1184 = (1.0 - _1179) / (_1179 + 1.0);
        float _3892 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1194 = ((((1.0 - _1185) * (_1180 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1180 + 1.0))) + _1185) * _1148;
        float _1195 = _1116 * 0.5;
        float _1196 = _1126 * 0.5;
        float _1197 = _1136 * 0.5;
        float _1198 = dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197));
        float _1203 = (_1198 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1198);
        float _1211 = (dot(vec3(_707, _708, _709), vec3(_1203 * _1195, _1203 * _1196, _1203 * _1197)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1220 = sqrt(((_1196 * _1196) + (_1195 * _1195)) + (_1197 * _1197)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1222 = _1221 * 2.0;
        float _1226 = (1.0 - _1221) / (_1221 + 1.0);
        float _3925 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1227 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1236 = ((((1.0 - _1227) * (_1222 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1222 + 1.0))) + _1227) * _1149;
        float _1237 = _1117 * 0.5;
        float _1238 = _1127 * 0.5;
        float _1239 = _1137 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(_707, _708, _709), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3958 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1264 + 1.0))) + _1269) * _1150;
        _1286 = _1117;
        _1288 = _1116;
        _1289 = _1115;
        _1290 = _1127;
        _1291 = _1126;
        _1292 = _1125;
        _1293 = _1137;
        _1294 = _1136;
        _1295 = _1135;
        _1296 = _1150;
        _1297 = _1149;
        _1298 = _1148;
        _1299 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)));
        _1300 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)));
        _1301 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
    }
    else
    {
        _1286 = _1287;
        _1288 = _1287;
        _1289 = _1287;
        _1290 = _1287;
        _1291 = _1287;
        _1292 = _1287;
        _1293 = _1287;
        _1294 = _1287;
        _1295 = _1287;
        _1296 = _1287;
        _1297 = _1287;
        _1298 = _1287;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1329 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1333 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1337 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1360 = _949 + _707;
        float _1361 = _953 + _708;
        float _1362 = _957 + _709;
        float _1372 = fma(_1362, cbModelParam._m0[30u].z, fma(_1361, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1360)) - _1329;
        float _1373 = fma(_1362, cbModelParam._m0[31u].z, fma(_1361, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1360)) - _1333;
        float _1374 = fma(_1362, cbModelParam._m0[32u].z, fma(_1361, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1360)) - _1337;
        float _1378 = inversesqrt(dot(vec3(_1372, _1373, _1374), vec3(_1372, _1373, _1374)));
        float _1391 = ((_1378 * _1372) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1329 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1392 = ((_1378 * _1373) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1333 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1393 = ((_1378 * _1374) / cbModelParam._m0[35u].z) + ((((((_1337 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1402 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1391, _1392, _1393), 0.0);
        float _1428 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1395.x + (-0.5));
        float _1430 = _1428 * (_1395.y + (-0.5));
        float _1431 = _1428 * (_1395.z + (-0.5));
        float _1438 = exp2((_1402.w + (-0.5)) * 20.0) * 2.0;
        float _1439 = _1438 * (_1402.x + (-0.5));
        float _1440 = _1438 * (_1402.y + (-0.5));
        float _1441 = _1438 * (_1402.z + (-0.5));
        float _1448 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1409.x + (-0.5));
        float _1450 = _1448 * (_1409.y + (-0.5));
        float _1451 = _1448 * (_1409.z + (-0.5));
        float _1458 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1416.x + (-0.5));
        float _1460 = _1458 * (_1416.y + (-0.5));
        float _1461 = _1458 * (_1416.z + (-0.5));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1464 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1465 = _1429 * 0.5;
        float _1466 = _1439 * 0.5;
        float _1467 = _1449 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_707, _708, _709), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4021 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1492 + 1.0))) + _1497) * _1462;
        float _1507 = _1430 * 0.5;
        float _1508 = _1440 * 0.5;
        float _1509 = _1450 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_707, _708, _709), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1463 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4054 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1534 + 1.0))) + _1539) * _1463;
        float _1549 = _1431 * 0.5;
        float _1550 = _1441 * 0.5;
        float _1551 = _1451 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_707, _708, _709), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1464 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4087 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1576 + 1.0))) + _1581) * _1464;
        _1598 = _1431;
        _1599 = _1430;
        _1600 = _1429;
        _1601 = _1441;
        _1602 = _1440;
        _1603 = _1439;
        _1604 = _1451;
        _1605 = _1450;
        _1606 = _1449;
        _1607 = _1464;
        _1608 = _1463;
        _1609 = _1462;
        _1610 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1611 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1612 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1287;
        _1599 = _1287;
        _1600 = _1287;
        _1601 = _1287;
        _1602 = _1287;
        _1603 = _1287;
        _1604 = _1287;
        _1605 = _1287;
        _1606 = _1287;
        _1607 = _1287;
        _1608 = _1287;
        _1609 = _1287;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1622 = (cbModelParam._m0[1u].x * (_1610 - _1299)) + _1299;
    float _1623 = (cbModelParam._m0[1u].x * (_1611 - _1300)) + _1300;
    float _1624 = (cbModelParam._m0[1u].x * (_1612 - _1301)) + _1301;
    float _1645 = fma(_1624, cbSceneParam._m0[89u].z, fma(_1623, cbSceneParam._m0[89u].y, _1622 * cbSceneParam._m0[89u].x));
    float _1648 = fma(_1624, cbSceneParam._m0[90u].z, fma(_1623, cbSceneParam._m0[90u].y, _1622 * cbSceneParam._m0[90u].x));
    float _1651 = fma(_1624, cbSceneParam._m0[91u].z, fma(_1623, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1622));
    float _1666 = _893 * 0.5;
    float _1667 = _894 * 0.5;
    float _1668 = _895 * 0.5;
    float _1669 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1600, _1603, _1606, _1609));
    float _1672 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1599, _1602, _1605, _1608));
    float _1675 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1598, _1601, _1604, _1607));
    float _1709;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1682 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1286, _1290, _1293, _1296));
        float _1686 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1288, _1291, _1294, _1297));
        float _1690 = dot(vec4(_1666, _1667, _1668, 1.0), vec4(_1289, _1292, _1295, _1298));
        float _1697 = dot(vec4(cbModelParam._m0[39u]), vec4(_1666, _1667, _1668, 1.0));
        _1709 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)), isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1697) ? 0.0 : (isnan(0.0) ? _1697 : max(0.0, _1697))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1709 = 1.0;
    }
    float _1720;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1711 = dot(vec4(cbModelParam._m0[40u]), vec4(_1666, _1667, _1668, 1.0));
        _1720 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1711) ? 0.0 : (isnan(0.0) ? _1711 : max(0.0, _1711))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1720 = 1.0;
    }
    float _1724 = (_1720 * cbModelParam._m0[1u].x) + (_1709 * (1.0 - cbModelParam._m0[1u].x));
    float _1734 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _710);
    float _1735 = isnan(_1734) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1734 : min(cbModelParam._m0[25u].z, _1734));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1782 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1786 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1790 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1793 = fma(_895, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _893));
        float _1796 = fma(_895, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _893));
        float _1799 = fma(_895, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _893));
        float _1827;
        if (_1793 > 0.0)
        {
            _1827 = abs((1.0 - _1782) / _1793);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1782 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1827 = frontier_phi_17_15_ladder;
        }
        float _2029;
        if (_1796 > 0.0)
        {
            _2029 = abs((1.0 - _1786) / _1796);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1786 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2029 = frontier_phi_26_22_ladder;
        }
        float _2283;
        if (_1799 > 0.0)
        {
            _2283 = abs((1.0 - _1790) / _1799);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1790 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2283 = frontier_phi_38_33_ladder;
        }
        float _2285 = isnan(_2029) ? _1827 : (isnan(_1827) ? _2029 : min(_1827, _2029));
        float _2286 = isnan(_2283) ? _2285 : (isnan(_2285) ? _2283 : min(_2285, _2283));
        float _2290 = (_2286 * _1793) + _1782;
        float _2291 = (_2286 * _1796) + _1786;
        float _2292 = (_2286 * _1799) + _1790;
        float _2293 = _2286 * 9.9999997473787516355514526367188e-05;
        float _2295 = (-1.0) - _2293;
        float _2297 = _2293 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2292 > _2297) || ((_2292 < _2295) || ((_2291 > _2297) || ((_2291 < _2295) || ((_2290 < _2295) || (_2290 > _2297))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2292, cbModelParam._m0[9u].z, fma(_2291, cbModelParam._m0[9u].y, _2290 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2292, cbModelParam._m0[10u].z, fma(_2291, cbModelParam._m0[10u].y, _2290 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2292, cbModelParam._m0[11u].z, fma(_2291, cbModelParam._m0[11u].y, _2290 * cbModelParam._m0[11u].x))), _1735);
            frontier_phi_16_38_ladder = _2420.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2420.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2420.x * cbModelParam._m0[1u].y;
        }
        _1815 = frontier_phi_16_38_ladder_2;
        _1817 = frontier_phi_16_38_ladder_1;
        _1819 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1803 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_893, _894, _895), _1735);
        _1815 = _1803.x * cbModelParam._m0[1u].y;
        _1817 = _1803.y * cbModelParam._m0[1u].y;
        _1819 = _1803.z * cbModelParam._m0[1u].y;
    }
    float _1823 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _710);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1823 : min(cbModelParam._m0[25u].w, _1823));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_895, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _893));
        float _1891 = fma(_895, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _893));
        float _1894 = fma(_895, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _893));
        float _2034;
        if (_1888 > 0.0)
        {
            _2034 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2034 = frontier_phi_28_24_ladder;
        }
        float _2310;
        if (_1891 > 0.0)
        {
            _2310 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2310 = frontier_phi_40_35_ladder;
        }
        float _2523;
        if (_1894 > 0.0)
        {
            _2523 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2523 = frontier_phi_49_46_ladder;
        }
        float _2525 = isnan(_2310) ? _2034 : (isnan(_2034) ? _2310 : min(_2034, _2310));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _1888) + _1877;
        float _2531 = (_2526 * _1891) + _1881;
        float _2532 = (_2526 * _1894) + _1885;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2534 = (-1.0) - _2533;
        float _2536 = _2533 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2532 > _2536) || ((_2532 < _2534) || ((_2531 > _2536) || ((_2531 < _2534) || ((_2530 < _2534) || (_2530 > _2536))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2532, cbModelParam._m0[17u].z, fma(_2531, cbModelParam._m0[17u].y, _2530 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2532, cbModelParam._m0[18u].z, fma(_2531, cbModelParam._m0[18u].y, _2530 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2532, cbModelParam._m0[19u].z, fma(_2531, cbModelParam._m0[19u].y, _2530 * cbModelParam._m0[19u].x))), _1824);
            frontier_phi_25_49_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2731.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2731.x * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_25_49_ladder_2;
        _1915 = frontier_phi_25_49_ladder_1;
        _1917 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_893, _894, _895), _1824);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1930 = (((_920 * _869) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1913 - _1815)) + _1815);
    float _1932 = (((_920 * _871) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1915 - _1817)) + _1817);
    float _1934 = (((_920 * _872) + _921) * _885) * ((cbModelParam._m0[1u].w * (_1917 - _1819)) + _1819);
    float _1937 = fma(_1934, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1940 = fma(_1934, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1943 = fma(_1934, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    uvec4 _1953 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1955 = _1953.x * 14u;
    uint _1956 = _1955 + 13u;
    float _1963 = _885 + (-1.0);
    float _1968 = (cbLight._m0[_1956].x * _1963) + 1.0;
    float _1969 = (cbLight._m0[_1956].y * _1963) + 1.0;
    float _1970 = (cbLight._m0[_1956].z * _1963) + 1.0;
    float _1971 = (cbLight._m0[_1956].w * _1963) + 1.0;
    uint _1972 = _1955 + 5u;
    float _1978 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
    uint _1982 = _1955 + 4u;
    float _1988 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1992 = _1955 | 1u;
    float _2003 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_707, _708, _709));
    float _2006 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_707, _708, _709));
    float _4223 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
    float _4234 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
    float _2011 = (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * 0.3183098733425140380859375;
    float _2013 = (isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * 0.3183098733425140380859375;
    float _2020 = ((cbLight._m0[_1972].x * _1978) * _2013) + ((cbLight._m0[_1982].x * _1988) * _2011);
    float _2021 = ((_1978 * cbLight._m0[_1972].y) * _2013) + ((_1988 * cbLight._m0[_1982].y) * _2011);
    float _2022 = ((_1978 * cbLight._m0[_1972].z) * _2013) + ((_1988 * cbLight._m0[_1982].z) * _2011);
    uvec4 _2026 = floatBitsToUint(cbLight._m0[_1955 + 12u]);
    bool _2028 = _2026.x == 0u;
    float _2039;
    float _2041;
    float _2043;
    if (_2028)
    {
        _2039 = _2020;
        _2041 = _2021;
        _2043 = _2022;
    }
    else
    {
        uint _2047 = _1955 + 6u;
        float _2063 = (dot(vec3(cbLight._m0[_1955 + 2u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2064 = _2063 * _2063;
        float _4245 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2065 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _2066 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2039 = (((cbLight._m0[_2047].x * 0.3183098733425140380859375) * _2065) * _2066) + _2020;
        _2041 = (((cbLight._m0[_2047].y * 0.3183098733425140380859375) * _2065) * _2066) + _2021;
        _2043 = (((cbLight._m0[_2047].z * 0.3183098733425140380859375) * _2065) * _2066) + _2022;
    }
    bool _2046 = _2026.y == 0u;
    float _2084;
    float _2086;
    float _2088;
    if (_2046)
    {
        _2084 = _2039;
        _2086 = _2041;
        _2088 = _2043;
    }
    else
    {
        uint _2254 = _1955 + 7u;
        float _2270 = (dot(vec3(cbLight._m0[_1955 + 3u].xyz), vec3(_707, _708, _709)) * 0.5) + 0.5;
        float _2271 = _2270 * _2270;
        float _4261 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2272 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2273 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2084 = (((cbLight._m0[_2254].x * 0.3183098733425140380859375) * _2272) * _2273) + _2039;
        _2086 = (((cbLight._m0[_2254].y * 0.3183098733425140380859375) * _2272) * _2273) + _2041;
        _2088 = (((cbLight._m0[_2254].z * 0.3183098733425140380859375) * _2272) * _2273) + _2043;
    }
    uint _2091 = _1955 + 8u;
    float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1955].w)) * _710) * 0.949999988079071044921875);
    float _2105 = _2104 * _2104;
    float _2106 = cbLight._m0[_1955].x + _787;
    float _2107 = cbLight._m0[_1955].y + _788;
    float _2108 = cbLight._m0[_1955].z + _789;
    float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
    float _2113 = _2112 * _2106;
    float _2114 = _2112 * _2107;
    float _2115 = _2112 * _2108;
    float _2116 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1955].xyz));
    float _4277 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _2119 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
    float _4288 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _2120 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2121 = dot(vec3(_707, _708, _709), vec3(_2113, _2114, _2115));
    float _4299 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2124 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2125 = dot(vec3(cbLight._m0[_1955].xyz), vec3(_2113, _2114, _2115));
    float _4310 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
    float _2129 = _2105 * _2105;
    float _2133 = ((_2124 * _2124) * (_2129 + (-1.0))) + 1.0;
    float _2141 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
    float _2142 = 0.959999978542327880859375 - _866;
    float _2144 = 0.959999978542327880859375 - _867;
    float _2145 = 0.959999978542327880859375 - _868;
    float _2152 = 1.0 - _2105;
    float _2163 = (0.5 / (((_2120 * ((_2119 * _2152) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2152) + _2105) * _2119))) * _2119;
    float _4321 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2165 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2129 / ((_2133 * _2133) * 3.141590118408203125));
    uint _2176 = _1955 + 9u;
    float _2187 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1992].w)) * _710) * 0.949999988079071044921875);
    float _2188 = _2187 * _2187;
    float _2189 = cbLight._m0[_1992].x + _787;
    float _2190 = cbLight._m0[_1992].y + _788;
    float _2191 = cbLight._m0[_1992].z + _789;
    float _2195 = inversesqrt(dot(vec3(_2189, _2190, _2191), vec3(_2189, _2190, _2191)));
    float _2196 = _2195 * _2189;
    float _2197 = _2195 * _2190;
    float _2198 = _2195 * _2191;
    float _2199 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_1992].xyz));
    float _4332 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2203 = dot(vec3(_707, _708, _709), vec3(_2196, _2197, _2198));
    float _4343 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2207 = dot(vec3(cbLight._m0[_1992].xyz), vec3(_2196, _2197, _2198));
    float _4354 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = _2188 * _2188;
    float _2215 = ((_2206 * _2206) * (_2211 + (-1.0))) + 1.0;
    float _2222 = exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0);
    float _2229 = 1.0 - _2188;
    float _2239 = (0.5 / (((_2120 * ((_2202 * _2229) + _2188)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2229) + _2188) * _2202))) * _2202;
    float _4365 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2241 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2211 / ((_2215 * _2215) * 3.141590118408203125));
    float _2251 = (((((_2222 * _2142) + _869) * cbLight._m0[_2176].x) * _2241) * _1978) + (((((_2141 * _2142) + _869) * cbLight._m0[_2091].x) * _2165) * _1988);
    float _2252 = (((((_2222 * _2144) + _871) * cbLight._m0[_2176].y) * _2241) * _1978) + (((((_2141 * _2144) + _871) * cbLight._m0[_2091].y) * _2165) * _1988);
    float _2253 = (((((_2222 * _2145) + _872) * cbLight._m0[_2176].z) * _2241) * _1978) + (((((_2141 * _2145) + _872) * cbLight._m0[_2091].z) * _2165) * _1988);
    float _2315;
    float _2317;
    float _2319;
    if (_2028)
    {
        _2315 = _2251;
        _2317 = _2252;
        _2319 = _2253;
    }
    else
    {
        uint _2321 = _1955 + 2u;
        uint _2325 = _1955 + 10u;
        float _2339 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _710) * 0.949999988079071044921875);
        float _2340 = _2339 * _2339;
        float _2341 = cbLight._m0[_2321].x + _787;
        float _2342 = cbLight._m0[_2321].y + _788;
        float _2343 = cbLight._m0[_2321].z + _789;
        float _2347 = inversesqrt(dot(vec3(_2341, _2342, _2343), vec3(_2341, _2342, _2343)));
        float _2348 = _2347 * _2341;
        float _2349 = _2347 * _2342;
        float _2350 = _2347 * _2343;
        float _2351 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2321].xyz));
        float _4376 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2354 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _2355 = dot(vec3(_707, _708, _709), vec3(_2348, _2349, _2350));
        float _4387 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2358 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _2359 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2348, _2349, _2350));
        float _4398 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2363 = _2340 * _2340;
        float _2367 = ((_2358 * _2358) * (_2363 + (-1.0))) + 1.0;
        float _2374 = exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0);
        float _2381 = 1.0 - _2340;
        float _2391 = (0.5 / (((_2120 * ((_2354 * _2381) + _2340)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2381) + _2340) * _2354))) * _2354;
        float _4409 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2393 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2363 / ((_2367 * _2367) * 3.141590118408203125));
        float _2394 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2315 = (((((_2374 * _2142) + _869) * cbLight._m0[_2325].x) * _2393) * _2394) + _2251;
        _2317 = (((((_2374 * _2144) + _871) * cbLight._m0[_2325].y) * _2393) * _2394) + _2252;
        _2319 = (((((_2374 * _2145) + _872) * cbLight._m0[_2325].z) * _2393) * _2394) + _2253;
    }
    float _2429;
    float _2431;
    float _2433;
    if (_2046)
    {
        _2429 = _2315;
        _2431 = _2317;
        _2433 = _2319;
    }
    else
    {
        uint _2440 = _1955 + 3u;
        uint _2444 = _1955 + 11u;
        float _2458 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _710) * 0.949999988079071044921875);
        float _2459 = _2458 * _2458;
        float _2460 = cbLight._m0[_2440].x + _787;
        float _2461 = cbLight._m0[_2440].y + _788;
        float _2462 = cbLight._m0[_2440].z + _789;
        float _2466 = inversesqrt(dot(vec3(_2460, _2461, _2462), vec3(_2460, _2461, _2462)));
        float _2467 = _2466 * _2460;
        float _2468 = _2466 * _2461;
        float _2469 = _2466 * _2462;
        float _2470 = dot(vec3(_707, _708, _709), vec3(cbLight._m0[_2440].xyz));
        float _4425 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        float _2473 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
        float _2474 = dot(vec3(_707, _708, _709), vec3(_2467, _2468, _2469));
        float _4436 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2477 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2478 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2467, _2468, _2469));
        float _4447 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2482 = _2459 * _2459;
        float _2486 = ((_2477 * _2477) * (_2482 + (-1.0))) + 1.0;
        float _2493 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
        float _2500 = 1.0 - _2459;
        float _2510 = (0.5 / (((_2120 * ((_2473 * _2500) + _2459)) + 9.9999999392252902907785028219223e-09) + (((_2120 * _2500) + _2459) * _2473))) * _2473;
        float _4458 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2512 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2482 / ((_2486 * _2486) * 3.141590118408203125));
        float _2513 = isnan(1.0) ? _1971 : (isnan(_1971) ? 1.0 : min(_1971, 1.0));
        _2429 = (((((_2493 * _2142) + _869) * cbLight._m0[_2444].x) * _2512) * _2513) + _2315;
        _2431 = (((((_2493 * _2144) + _871) * cbLight._m0[_2444].y) * _2512) * _2513) + _2317;
        _2433 = (((((_2493 * _2145) + _872) * cbLight._m0[_2444].z) * _2512) * _2513) + _2319;
    }
    float _2648;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_1953.y == 0u)
    {
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2588;
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2588;
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2588;
        uvec4 _2603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2604 = _2603.x;
        uint _2615 = uint((float(_2603.y) * floor(float(uint(cbSceneParam._m0[85u].y * _808) / _2604))) + floor(float(uint(cbSceneParam._m0[85u].x * _807) / _2604)));
        float _2625 = (log2(_2591 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2626 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        uint _2629 = uint(isnan(14.0) ? _2626 : (isnan(_2626) ? 14.0 : min(_2626, 14.0)));
        uvec4 _2634 = texelFetch(g_lightClusterGridBuffer, int(((_2629 << 2u) + (_2615 << 6u)) >> 2u));
        uint _2635 = _2634.x;
        uint _2636 = _2603.z;
        float _2736;
        float _2738;
        float _2740;
        float _2742;
        float _2744;
        float _2746;
        if (((((1u << ((_2636 >> 4u) & 15u)) + 4294967295u) & _2635) == 0u) || ((_2636 & 240u) == 0u))
        {
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
        }
        else
        {
            float _2737;
            float _2739;
            float _2741;
            float _2743;
            float _2745;
            float _2747;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            float _2894 = 0.0;
            uint _2895 = 0u;
            uint _2904;
            bool _2905;
            for (;;)
            {
                _2904 = texelFetch(g_lightClassification, int((((_2629 << 5u) + (_2615 << 9u)) + (_2895 << 2u)) >> 2u)).x;
                _2905 = _2904 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2905)
                {
                    frontier_phi_66_pred = _2889;
                    frontier_phi_66_pred_1 = _2894;
                    frontier_phi_66_pred_2 = _2893;
                    frontier_phi_66_pred_3 = _2892;
                    frontier_phi_66_pred_4 = _2891;
                    frontier_phi_66_pred_5 = _2890;
                }
                else
                {
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    uint _3040;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2894;
                    _3040 = _2904;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    float _2966;
                    for (;;)
                    {
                        uint _3044 = uint(findLSB(_3040)) + (_2895 << 5u);
                        uint _3041 = (_3040 + 4294967295u) & _3040;
                        uint _3046 = _3044 * 48u;
                        vec4 _3060 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3046)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3046 + 3u)).x));
                        uint _3066 = (_3044 * 48u) + 4u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3066)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3066 + 3u)).x));
                        uint _3085 = (_3044 * 48u) + 8u;
                        vec3 _3096 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x));
                        float _3100 = _3060.x - _2589;
                        float _3101 = _3060.y - _2590;
                        float _3102 = _3060.z - _2591;
                        float _3103 = dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102));
                        float _3106 = inversesqrt(_3103);
                        float _3107 = _3106 * _3100;
                        float _3108 = _3106 * _3101;
                        float _3109 = _3106 * _3102;
                        float _3110 = dot(vec3(_826, _829, _832), vec3(_3107, _3108, _3109));
                        float _3115 = 1.0 - (_3103 * _3060.w);
                        float _4484 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                        float _3116 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                        float _3117 = sqrt(_3103) * _3079.w;
                        float _3120 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                        float _3121 = _3120 * _3120;
                        float _3124 = ((1.0 - _3121) * _3110) + _3121;
                        float _3127 = _3117 * _3117;
                        float _3131 = ((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3116) / ((_3127 * 0.699999988079071044921875) + 1.0);
                        float _3135 = (-0.0) - _2589;
                        float _3136 = (-0.0) - _2590;
                        float _3137 = (-0.0) - _2591;
                        float _3141 = inversesqrt(dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137)));
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3152 = exp2(log2(1.0 / ((_3127 * 3.5) + 5.0)) * 0.25);
                        float _3153 = 1.0 - _901;
                        float _3160 = sqrt(1.0 - ((1.0 - (_3153 * _3153)) * (1.0 - (_3152 * _3152))));
                        float _3161 = _3160 * _3160;
                        float _3162 = _3161 * _3161;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3165 = _3144 + _3109;
                        float _3169 = inversesqrt(dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165)));
                        float _3173 = dot(vec3(_826, _829, _832), vec3(_3142, _3143, _3144));
                        float _4500 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                        float _3176 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3177 = dot(vec3(_826, _829, _832), vec3(_3169 * _3163, _3169 * _3164, _3169 * _3165));
                        float _4511 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
                        float _3184 = ((_3180 * _3180) * (_3162 + (-1.0))) + 1.0;
                        float _3185 = _3120 * _3161;
                        float _3186 = _3185 * _3185;
                        float _3189 = ((1.0 - _3186) * _3110) + _3186;
                        float _4522 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                        float _3190 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3191 = 1.0 - _3161;
                        float _3201 = (0.5 / (((_3190 * ((_3176 * _3191) + _3161)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3161) * _3176))) * _3190;
                        float _4533 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3212 = (((_3162 * 3.1415927410125732421875) * (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0)))) / ((_3184 * _3184) * ((_3127 * 2.1991131305694580078125) + 3.141590118408203125))) * _3116;
                        _2964 = (_3131 * _3079.x) + _3037;
                        _2965 = (_3131 * _3079.y) + _3038;
                        _2966 = (_3131 * _3079.z) + _3039;
                        _2961 = (_3212 * _3096.x) + _3034;
                        _2962 = (_3212 * _3096.y) + _3035;
                        _2963 = (_3212 * _3096.z) + _3036;
                        if (_3041 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _2966;
                            _3040 = _3041;
                        }
                    }
                    frontier_phi_66_pred = _2961;
                    frontier_phi_66_pred_1 = _2966;
                    frontier_phi_66_pred_2 = _2965;
                    frontier_phi_66_pred_3 = _2964;
                    frontier_phi_66_pred_4 = _2963;
                    frontier_phi_66_pred_5 = _2962;
                }
                _2737 = frontier_phi_66_pred;
                _2747 = frontier_phi_66_pred_1;
                _2745 = frontier_phi_66_pred_2;
                _2743 = frontier_phi_66_pred_3;
                _2741 = frontier_phi_66_pred_4;
                _2739 = frontier_phi_66_pred_5;
                uint _2896 = _2895 + 1u;
                if (_2896 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2889 = _2737;
                    _2890 = _2739;
                    _2891 = _2741;
                    _2892 = _2743;
                    _2893 = _2745;
                    _2894 = _2747;
                    _2895 = _2896;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
        }
        uvec4 _2750 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2751 = _2750.z;
        uint _2753 = (_2751 >> 8u) & 15u;
        float _2857;
        float _2859;
        float _2861;
        float _2863;
        float _2865;
        float _2867;
        if (((4294967295u << _2753) & _2635) == 0u)
        {
            _2857 = _2736;
            _2859 = _2738;
            _2861 = _2740;
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
        }
        else
        {
            float _2882 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
            float _2883 = _2882 * _2589;
            float _2884 = _2882 * _2590;
            float _2885 = _2882 * _2591;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2753 < ((_2751 >> 12u) & 15u))
            {
                float _2858;
                float _2860;
                float _2862;
                float _2864;
                float _2866;
                float _2868;
                float _3017 = _2736;
                float _3018 = _2738;
                float _3019 = _2740;
                float _3020 = _2742;
                float _3021 = _2744;
                float _3022 = _2746;
                uint _3023 = _2753;
                uint _3032;
                bool _3033;
                for (;;)
                {
                    _3032 = texelFetch(g_lightClassification, int((((_2629 << 5u) + (_2615 << 9u)) + (_3023 << 2u)) >> 2u)).x;
                    _3033 = _3032 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3033)
                    {
                        frontier_phi_77_pred = _3022;
                        frontier_phi_77_pred_1 = _3021;
                        frontier_phi_77_pred_2 = _3020;
                        frontier_phi_77_pred_3 = _3019;
                        frontier_phi_77_pred_4 = _3018;
                        frontier_phi_77_pred_5 = _3017;
                    }
                    else
                    {
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3231;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        float _3244 = _3022;
                        uint _3245 = _3032;
                        uint _3246;
                        vec4 _3271;
                        float _3272;
                        vec4 _3287;
                        vec3 _3299;
                        vec4 _3314;
                        vec4 _3330;
                        float _3376;
                        bool _3377;
                        for (;;)
                        {
                            uint _3256 = ((_3023 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3245));
                            _3246 = (_3245 + 4294967295u) & _3245;
                            uint _3258 = _3256 * 40u;
                            _3271 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3258)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3258 + 3u)).x));
                            _3272 = _3271.w;
                            uint _3274 = (_3256 * 40u) + 4u;
                            _3287 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3274)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3274 + 3u)).x));
                            uint _3289 = (_3256 * 40u) + 8u;
                            _3299 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x));
                            uint _3301 = (_3256 * 40u) + 16u;
                            _3314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3301 + 3u)).x));
                            uint _3317 = (_3256 * 40u) + 20u;
                            _3330 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 3u)).x));
                            uint _3332 = (_3256 * 40u) + 24u;
                            vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3351 = (_3256 * 40u) + 28u;
                            vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            _3376 = fma(_2591, _3364.z, fma(_2590, _3364.y, _3364.x * _2589)) + _3364.w;
                            _3377 = !((fma(_2591, _3345.z, fma(_2590, _3345.y, _3345.x * _2589)) + _3345.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3377)
                            {
                                float _3404 = _3271.x - _2589;
                                float _3405 = _3271.y - _2590;
                                float _3406 = _3271.z - _2591;
                                float _3407 = dot(vec3(_3404, _3405, _3406), vec3(_3404, _3405, _3406));
                                float _3410 = inversesqrt(_3407);
                                float _3411 = _3410 * _3404;
                                float _3412 = _3410 * _3405;
                                float _3413 = _3410 * _3406;
                                float _3417 = 1.0 - (_3407 / (_3272 * _3272));
                                float _4544 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                                float _3418 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                                float _3422 = sqrt(_3407) * _3287.w;
                                float _3424 = 1.39999997615814208984375 / (_3422 + 1.39999997615814208984375);
                                float _3425 = _3424 * _3424;
                                float _3428 = ((1.0 - _3425) * dot(vec3(_3411, _3412, _3413), vec3(_826, _829, _832))) + _3425;
                                float _3431 = _3422 * _3422;
                                float _3435 = (fma(_2591, _3314.z, fma(_2590, _3314.y, _3314.x * _2589)) + _3314.w) / _3376;
                                float _3436 = (fma(_2591, _3330.z, fma(_2590, _3330.y, _3330.x * _2589)) + _3330.w) / _3376;
                                float _3440 = 1.0 - dot(vec2(_3435, _3436), vec2(_3435, _3436));
                                float _4560 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3442 = _3441 * (((isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0))) * _3418) / ((_3431 * 0.699999988079071044921875) + 1.0));
                                float _3454 = exp2(log2(1.0 / ((_3431 * 3.5) + 5.0)) * 0.25);
                                float _3455 = 1.0 - _901;
                                float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                                float _3463 = _3462 * _3462;
                                float _3464 = _3463 * _3463;
                                float _3465 = _3411 - _2883;
                                float _3466 = _3412 - _2884;
                                float _3467 = _3413 - _2885;
                                float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                                float _3475 = dot(vec3(_826, _829, _832), vec3((-0.0) - _2883, (-0.0) - _2884, (-0.0) - _2885));
                                float _4571 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3478 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                                float _3479 = dot(vec3(_826, _829, _832), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                                float _4582 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3482 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                                float _3487 = _3424 * _3463;
                                float _3488 = _3487 * _3487;
                                float _3494 = ((1.0 - _3488) * dot(vec3(_826, _829, _832), vec3(_3411, _3412, _3413))) + _3488;
                                float _4593 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3496 = 1.0 - _3463;
                                float _3506 = (0.5 / (((_3495 * ((_3478 * _3496) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3495 * _3496) + _3463) * _3478))) * _3495;
                                float _4604 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3516 = (_3441 * _3418) * (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) / ((_3486 * _3486) * ((_3431 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3442 * _3287.y;
                                frontier_phi_83_pred_1 = _3442 * _3287.x;
                                frontier_phi_83_pred_2 = _3516 * _3299.z;
                                frontier_phi_83_pred_3 = _3516 * _3299.y;
                                frontier_phi_83_pred_4 = _3516 * _3299.x;
                                frontier_phi_83_pred_5 = _3442 * _3287.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3524 = frontier_phi_83_pred;
                            _3523 = frontier_phi_83_pred_1;
                            _3522 = frontier_phi_83_pred_2;
                            _3521 = frontier_phi_83_pred_3;
                            _3520 = frontier_phi_83_pred_4;
                            _3525 = frontier_phi_83_pred_5;
                            _3229 = _3523 + _3242;
                            _3230 = _3524 + _3243;
                            _3231 = _3525 + _3244;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            _3228 = _3522 + _3241;
                            if (_3246 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3231;
                                _3245 = _3246;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3231;
                        frontier_phi_77_pred_1 = _3230;
                        frontier_phi_77_pred_2 = _3229;
                        frontier_phi_77_pred_3 = _3228;
                        frontier_phi_77_pred_4 = _3227;
                        frontier_phi_77_pred_5 = _3226;
                    }
                    _2868 = frontier_phi_77_pred;
                    _2866 = frontier_phi_77_pred_1;
                    _2864 = frontier_phi_77_pred_2;
                    _2862 = frontier_phi_77_pred_3;
                    _2860 = frontier_phi_77_pred_4;
                    _2858 = frontier_phi_77_pred_5;
                    uint _3024 = _3023 + 1u;
                    if (_3024 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3017 = _2858;
                        _3018 = _2860;
                        _3019 = _2862;
                        _3020 = _2864;
                        _3021 = _2866;
                        _3022 = _2868;
                        _3023 = _3024;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2862;
                frontier_phi_58_59_ladder_1 = _2868;
                frontier_phi_58_59_ladder_2 = _2866;
                frontier_phi_58_59_ladder_3 = _2864;
                frontier_phi_58_59_ladder_4 = _2860;
                frontier_phi_58_59_ladder_5 = _2858;
            }
            else
            {
                frontier_phi_58_59_ladder = _2740;
                frontier_phi_58_59_ladder_1 = _2746;
                frontier_phi_58_59_ladder_2 = _2744;
                frontier_phi_58_59_ladder_3 = _2742;
                frontier_phi_58_59_ladder_4 = _2738;
                frontier_phi_58_59_ladder_5 = _2736;
            }
            _2857 = frontier_phi_58_59_ladder_5;
            _2859 = frontier_phi_58_59_ladder_4;
            _2861 = frontier_phi_58_59_ladder;
            _2863 = frontier_phi_58_59_ladder_3;
            _2865 = frontier_phi_58_59_ladder_2;
            _2867 = frontier_phi_58_59_ladder_1;
        }
        float _2872 = isnan(1.0) ? _885 : (isnan(_885) ? 1.0 : min(_885, 1.0));
        _2648 = (_2872 * _2863) + _2084;
        _2650 = (_2872 * _2865) + _2086;
        _2652 = (_2872 * _2867) + _2088;
        _2654 = ((_2857 * _869) * _2872) + _2429;
        _2656 = ((_2859 * _871) * _2872) + _2431;
        _2658 = ((_2861 * _872) * _2872) + _2433;
    }
    else
    {
        _2648 = _2084;
        _2650 = _2086;
        _2652 = _2088;
        _2654 = _2429;
        _2656 = _2431;
        _2658 = _2433;
    }
    float _4620 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4631 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4642 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _2675 = ((isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2648 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _885))) + ((_2654 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2676 = ((isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2650 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _885))) + ((_2656 + ((isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    float _2677 = ((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2652 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _885))) + ((_2658 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1724)) * cbPerFrame._m0[3u].x);
    uint _2678 = _244 + 6u;
    float _2686 = _807 / cbSceneParam._m0[86u].x;
    float _2687 = _808 / cbSceneParam._m0[86u].y;
    vec4 _2701 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2703 = _2701.x;
    float _2704 = _2701.y;
    float _2705 = _2701.z;
    float _2706 = _2701.w;
    float _2799;
    float _2801;
    float _2803;
    float _2805;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2761 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2762 = _2761 / _729;
        float _2773 = _2762 * _780;
        float _2774 = _781 * _2762;
        float _2775 = (-0.0) - _2774;
        float _2777 = _2762 * _782;
        float _2779 = (cbSceneParam._m0[77u].w * _2775) / _2761;
        float _2780 = _2779 + cbSceneParam._m0[79u].w;
        float _2781 = cbSceneParam._m0[79u].w - _2774;
        float _2787 = sqrt(((_2773 * _2773) + (_2774 * _2774)) + (_2777 * _2777));
        float _2790 = (1.0 - (cbSceneParam._m0[77u].w / _2761)) * _2787;
        float _2795 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2797 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2974;
        if (abs((_2775 - _2779) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2974 = ((((_2780 > 0.0) ? exp2(_2795 * _2780) : (2.0 - exp2(_2797 * _2780))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2790;
        }
        else
        {
            float _2918 = 1.0 / cbSceneParam._m0[80u].x;
            float _2919 = isnan(_2781) ? _2780 : (isnan(_2780) ? _2781 : max(_2780, _2781));
            float _2920 = isnan(_2781) ? _2780 : (isnan(_2780) ? _2781 : min(_2780, _2781));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            float _2930 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : min(_2920, 0.0));
            _2974 = ((abs(_2787 / _2775) * cbSceneParam._m0[80u].y) * ((((_2929 - _2930) * 2.0) - ((exp2(_2795 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0)))) - exp2(_2795 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0))))) * _2918)) - ((exp2(_2797 * _2929) - exp2(_2797 * _2930)) * _2918))) + (_2790 * cbSceneParam._m0[80u].z);
        }
        vec4 _2976 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2686, _2687, 1.0), 0.0);
        float _2985 = exp2((_2974 * (-1.44269502162933349609375)) * (1.0 - _2976.w));
        float _2986 = log2(_2985);
        float _3002 = log2(_2706);
        _2799 = (exp2(_3002 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].x)) * _2976.x) / cbSceneParam._m0[78u].x)) + _2703;
        _2801 = (exp2(_3002 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].y)) * _2976.y) / cbSceneParam._m0[78u].y)) + _2704;
        _2803 = (exp2(_3002 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2986 * cbSceneParam._m0[78u].z)) * _2976.z) / cbSceneParam._m0[78u].z)) + _2705;
        _2805 = _2985 * _2706;
    }
    else
    {
        _2799 = _2703;
        _2801 = _2704;
        _2803 = _2705;
        _2805 = _2706;
    }
    bool _3012;
    vec4 _2815;
    vec4 _2837;
    float _2839;
    float _2843;
    float _2844;
    float _2845;
    float _2846;
    bool _2856;
    for (;;)
    {
        _2815 = cbMatDynParam._m0[0u];
        float _2817 = roundEven(_2815.y);
        bool _2818 = _2817 == 3.0;
        float _2819 = log2(_2805);
        float _2826 = exp2(_2819 * cbSceneParam._m0[78u].x) * _2675;
        float _2827 = exp2(_2819 * cbSceneParam._m0[78u].y) * _2676;
        float _2828 = exp2(_2819 * cbSceneParam._m0[78u].z) * _2677;
        float _2835 = _796 + (-0.5);
        _2837 = cbMtdParam._m0[1u];
        _2839 = _2837.y * _2835;
        float _2842 = (_2817 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2843 = _2842 * (_2818 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2799)));
        _2844 = _2842 * (_2818 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2801)));
        _2845 = _2842 * (_2818 ? _2828 : (_2828 + (cbSceneParam._m0[72u].w * _2803)));
        _2846 = _2835 * 0.999000012874603271484375;
        _2856 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2856)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2846) < 0.5)
            {
                _3012 = true;
                break;
            }
        }
        uint _2953 = _845 + uint(_2815.w);
        if ((cbInstanceData._m0[_2953].w < 1.0) && ((cbInstanceData._m0[_2953].w + _2846) < 0.5))
        {
            _3012 = true;
            break;
        }
        if ((_2839 + 1.0) < _2837.x)
        {
            _3012 = true;
            break;
        }
        _3012 = false;
        break;
    }
    float _3217;
    if (_3012)
    {
        discard_state = true;
        _3217 = 0.0;
    }
    else
    {
        _3217 = cbInstanceData._m0[_2678].w;
    }
    SV_Target.x = _2843;
    SV_Target.y = _2844;
    SV_Target.z = _2845;
    SV_Target.w = _3217;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2678].w;
    discard_exit();
}


