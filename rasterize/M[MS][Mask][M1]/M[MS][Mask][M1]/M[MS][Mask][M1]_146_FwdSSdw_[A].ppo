#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1651;
float _4051;
float _4052;
float _4053;
float _4054;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _313.x * cbMtdParam._m0[11u].x;
    float _320 = _313.y * cbMtdParam._m0[11u].y;
    float _321 = _313.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _359 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _398 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _400 = _398.x;
    float _412 = dot(vec4(_400, _398.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _429 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _359.x) * 2.0) - ((((_400 - _412) * cbMtdParam._m0[23u].w) + _412) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4063 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _430 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _437 = (_430 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _438 = (_430 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _439 = (_430 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _478 = _476.x;
    float _488 = dot(vec4(_478, _476.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _502 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _359.y) * 2.0) - ((((_478 - _488) * cbMtdParam._m0[23u].w) + _488) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4074 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _510 = (_503 * ((_456.x * cbMtdParam._m0[13u].x) - _437)) + _437;
    float _511 = (_503 * ((_456.y * cbMtdParam._m0[13u].y) - _438)) + _438;
    float _512 = (_503 * ((_456.z * cbMtdParam._m0[13u].z) - _439)) + _439;
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _550 = _548.x;
    float _560 = dot(vec4(_550, _548.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _572 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _359.z) * 2.0) - ((((_550 - _560) * cbMtdParam._m0[23u].w) + _560) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4085 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _573 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _580 = (_573 * ((_531.x * cbMtdParam._m0[14u].x) - _510)) + _510;
    float _581 = (_573 * ((_531.y * cbMtdParam._m0[14u].y) - _511)) + _511;
    float _582 = (_573 * ((_531.z * cbMtdParam._m0[14u].z) - _512)) + _512;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _292) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _293) + cbTextureTilingScale._m0[14u].w));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _639 = _637.x;
    float _640 = _637.y;
    float _641 = _637.z;
    float _648 = ((_620.x - _639) * _430) + _639;
    float _649 = ((_620.y - _640) * _430) + _640;
    float _650 = ((_620.z - _641) * _430) + _641;
    vec4 _662 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _673 = ((_662.x - _648) * _503) + _648;
    float _674 = ((_662.y - _649) * _503) + _649;
    float _675 = ((_662.z - _650) * _503) + _650;
    vec4 _687 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _700 = ((_687.z - _675) * _573) + _675;
    float _703 = ((((_687.x - _673) * _573) + _673) * 2.0) + (-1.0);
    float _705 = ((((_687.y - _674) * _573) + _674) * 2.0) + (-1.0);
    float _706 = dot(vec2(_703, _705), vec2(_703, _705));
    float _4096 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _711 = sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))));
    vec4 _725 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _737 = (((_725.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _703;
    float _738 = (((_725.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _705;
    float _741 = fma(_711, _261, fma(_738, _268, _737 * _254));
    float _744 = fma(_711, _262, fma(_738, _269, _737 * _255));
    float _747 = fma(_711, _263, fma(_738, _270, _737 * _256));
    float _751 = inversesqrt(dot(vec3(_741, _744, _747), vec3(_741, _744, _747)));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _780 = _778.x;
    float _781 = 1.0 - _780;
    float _789 = (cbMtdParam._m0[19u].x + dot(vec4(_751 * _741, _751 * _744, _751 * _747, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_780 - _781) * cbMtdParam._m0[24u].z) + _781) * cbMtdParam._m0[21u].z);
    float _4107 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _792 = (-0.0) - cbMtdParam._m0[24u].x;
    float _794 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _795 = isnan(1.0) ? _794 : (isnan(_794) ? 1.0 : min(_794, 1.0));
    float _802 = _790 - ((_790 * TEXCOORD_8.x) * _795);
    float _803 = _790 - ((_790 * TEXCOORD_8.y) * _795);
    float _804 = _790 - ((_790 * TEXCOORD_8.z) * _795);
    float _811 = (_802 * ((_600.x * cbMtdParam._m0[18u].x) - _580)) + _580;
    float _812 = (_803 * ((_600.y * cbMtdParam._m0[18u].y) - _581)) + _581;
    float _813 = (_804 * ((_600.z * cbMtdParam._m0[18u].z) - _582)) + _582;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _827 = _825.x;
    float _828 = 1.0 - _827;
    float _854 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_827 - _828) * cbMtdParam._m0[24u].w) + _828) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4128 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _855 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _863 = ((((cbMtdParam._m0[10u].x - _811) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _855) + _811;
    float _864 = ((((cbMtdParam._m0[10u].y - _812) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _855) + _812;
    float _865 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _813)) * _855) + _813;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _893 = _891.x;
    float _911 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _893) * _430) + _893;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _911) * _503) + _911;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _928) * _573) + _928;
    float _949 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _945) * cbMtdParam._m0[19u].z) + _945;
    float _951 = _949 - (_949 * _802);
    float _953 = _951 - (_951 * _855);
    float _957 = (cbMtdParam._m0[19u].w * (_725.z - _700)) + _700;
    vec4 _973 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _980 = (_973.x * 2.0) + (-1.0);
    float _981 = (_973.y * 2.0) + (-1.0);
    float _982 = dot(vec2(_980, _981), vec2(_980, _981));
    float _4139 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _990 = ((_973.z - _957) * _802) + _957;
    float _993 = ((cbMtdParam._m0[23u].x - _990) * _855) + _990;
    vec4 _1016 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1022 = (_1016.x * 2.0) + (-1.0);
    float _1023 = (_1016.y * 2.0) + (-1.0);
    float _1024 = dot(vec2(_1022, _1023), vec2(_1022, _1023));
    float _4150 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1039 = ((sqrt(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) - _711) * _804) + _711;
    float _1042 = (((_980 - _737) * _802) + _737) + (cbMtdParam._m0[21u].x * _737);
    float _1043 = (((_981 - _738) * _803) + _738) + (cbMtdParam._m0[21u].x * _738);
    float _1054 = (((_1022 - _1042) + (_1042 * cbMtdParam._m0[22u].z)) * _855) + _1042;
    float _1055 = (((_1023 - _1043) + (_1043 * cbMtdParam._m0[22u].z)) * _855) + _1043;
    float _1056 = (_855 * (sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) - _1039)) + _1039;
    float _1058 = cbMtdParam._m0[22u].x + _725.w;
    float _1061 = fma(_1056, _261, fma(_1055, _268, _1054 * _254));
    float _1064 = fma(_1056, _262, fma(_1055, _269, _1054 * _255));
    float _1067 = fma(_1056, _263, fma(_1055, _270, _1054 * _256));
    float _1071 = inversesqrt(dot(vec3(_1061, _1064, _1067), vec3(_1061, _1064, _1067)));
    float _1072 = _1071 * _1061;
    float _1073 = _1071 * _1064;
    float _1074 = _1071 * _1067;
    float _4161 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1075 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _4172 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4183 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4194 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4205 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4216 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _1080 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _1094 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1134 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1144 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1134);
    float _1145 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1134);
    float _1146 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1134);
    float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
    float _1151 = _1144 * _1150;
    float _1152 = _1145 * _1150;
    float _1153 = _1146 * _1150;
    vec4 _1158 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1160 = _1158.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1332 = sqrt(((_1144 * _1144) + (_1145 * _1145)) + (_1146 * _1146));
        float _1338 = (cbMatDynParam._m0[5u].x * _1332) + cbMatDynParam._m0[5u].y;
        float _4227 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1343 = (cbMatDynParam._m0[5u].z * _1332) + cbMatDynParam._m0[5u].w;
        float _4238 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) - _1339)) + _1339) < ((_1160 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1171 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1172 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1190 = fma(_1074, cbSceneParam._m0[5u].z, fma(_1073, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1072));
    float _1193 = fma(_1074, cbSceneParam._m0[6u].z, fma(_1073, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1072));
    float _1196 = fma(_1074, cbSceneParam._m0[7u].z, fma(_1073, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1072));
    uint _1209 = _273 + 9u;
    uint _1210 = _1209 + uint(cbMatDynParam._m0[0u].w);
    float _1216 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * cbInstanceData._m0[_1210].x;
    float _1217 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1210].y;
    float _1218 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1210].z;
    float _4249 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1219 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
    float _1220 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _4271 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1221 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _1222 = 1.0 - _1080;
    float _1223 = _1219 * _1222;
    float _1224 = _1220 * _1222;
    float _1225 = _1221 * _1222;
    float _1230 = (_1219 + (-0.039999999105930328369140625)) * _1080;
    float _1231 = (_1220 + (-0.039999999105930328369140625)) * _1080;
    float _1232 = (_1221 + (-0.039999999105930328369140625)) * _1080;
    float _1233 = _1230 + 0.039999999105930328369140625;
    float _1235 = _1231 + 0.039999999105930328369140625;
    float _1236 = _1232 + 0.039999999105930328369140625;
    vec4 _1245 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1171, cbSceneParam._m0[86u].y * _1172));
    float _1249 = ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * TEXCOORD_5.w) * _1245.x;
    float _1250 = dot(vec3(_1072, _1073, _1074), vec3(_1151, _1152, _1153));
    float _1253 = _1250 * 2.0;
    float _1257 = (_1253 * _1072) - _1151;
    float _1258 = (_1253 * _1073) - _1152;
    float _1259 = (_1253 * _1074) - _1153;
    float _1263 = abs(dot(vec3(_1151, _1152, _1153), vec3(_1072, _1073, _1074)));
    float _4282 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1265 = sqrt(_1075);
    float _1278 = exp2((_1265 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1265 * 3.0));
    float _1284 = (1.0 - _1278) * ((_1265 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1285 = _1278 * _1265;
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1650;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1375 = fma(_1321, cbModelParam._m0[26u].z, fma(_1317, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1313));
        float _1379 = fma(_1321, cbModelParam._m0[27u].z, fma(_1317, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1313));
        float _1383 = fma(_1321, cbModelParam._m0[28u].z, fma(_1317, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1313));
        float _1408 = _1313 + _1072;
        float _1409 = _1317 + _1073;
        float _1410 = _1321 + _1074;
        float _1420 = fma(_1410, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1408)) - _1375;
        float _1421 = fma(_1410, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1408)) - _1379;
        float _1422 = fma(_1410, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1408)) - _1383;
        float _1426 = inversesqrt(dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422)));
        float _1439 = ((_1426 * _1420) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1375 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1440 = ((_1426 * _1421) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1379 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1441 = ((_1426 * _1422) / cbModelParam._m0[34u].z) + ((((((_1383 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1458 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        vec4 _1465 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1439, _1440, _1441), 0.0);
        float _1478 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1444.x + (-0.5));
        float _1480 = _1478 * (_1444.y + (-0.5));
        float _1481 = _1478 * (_1444.z + (-0.5));
        float _1488 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1451.x + (-0.5));
        float _1490 = _1488 * (_1451.y + (-0.5));
        float _1491 = _1488 * (_1451.z + (-0.5));
        float _1498 = exp2((_1458.w + (-0.5)) * 20.0) * 2.0;
        float _1499 = _1498 * (_1458.x + (-0.5));
        float _1500 = _1498 * (_1458.y + (-0.5));
        float _1501 = _1498 * (_1458.z + (-0.5));
        float _1508 = exp2((_1465.w + (-0.5)) * 20.0) * 2.0;
        float _1509 = _1508 * (_1465.x + (-0.5));
        float _1510 = _1508 * (_1465.y + (-0.5));
        float _1511 = _1508 * (_1465.z + (-0.5));
        float _1512 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1513 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1514 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1515 = _1479 * 0.5;
        float _1516 = _1489 * 0.5;
        float _1517 = _1499 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1532 = (dot(vec3(_1072, _1073, _1074), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1542 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1512 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1544 = _1543 * 2.0;
        float _1548 = (1.0 - _1543) / (_1543 + 1.0);
        float _4330 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1558 = ((((1.0 - _1549) * (_1544 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1544 + 1.0))) + _1549) * _1512;
        float _1559 = _1480 * 0.5;
        float _1560 = _1490 * 0.5;
        float _1561 = _1500 * 0.5;
        float _1562 = dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561));
        float _1567 = (_1562 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1562);
        float _1575 = (dot(vec3(_1072, _1073, _1074), vec3(_1567 * _1559, _1567 * _1560, _1567 * _1561)) + 1.0) * 0.5;
        float _4341 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1584 = sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561)) / (_1513 + 9.9999997473787516355514526367188e-06);
        float _4352 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1586 = _1585 * 2.0;
        float _1590 = (1.0 - _1585) / (_1585 + 1.0);
        float _4363 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1600 = ((((1.0 - _1591) * (_1586 + 2.0)) * exp2(log2(isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_1586 + 1.0))) + _1591) * _1513;
        float _1601 = _1481 * 0.5;
        float _1602 = _1491 * 0.5;
        float _1603 = _1501 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_1072, _1073, _1074), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1514 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4396 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1628 + 1.0))) + _1633) * _1514;
        _1650 = _1481;
        _1652 = _1480;
        _1653 = _1479;
        _1654 = _1491;
        _1655 = _1490;
        _1656 = _1489;
        _1657 = _1501;
        _1658 = _1500;
        _1659 = _1499;
        _1660 = _1514;
        _1661 = _1513;
        _1662 = _1512;
        _1663 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)));
        _1664 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0)));
        _1665 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    }
    else
    {
        _1650 = _1651;
        _1652 = _1651;
        _1653 = _1651;
        _1654 = _1651;
        _1655 = _1651;
        _1656 = _1651;
        _1657 = _1651;
        _1658 = _1651;
        _1659 = _1651;
        _1660 = _1651;
        _1661 = _1651;
        _1662 = _1651;
        _1663 = 0.0;
        _1664 = 0.0;
        _1665 = 0.0;
    }
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1691 = fma(_1321, cbModelParam._m0[30u].z, fma(_1317, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1313));
        float _1695 = fma(_1321, cbModelParam._m0[31u].z, fma(_1317, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1313));
        float _1699 = fma(_1321, cbModelParam._m0[32u].z, fma(_1317, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1313));
        float _1722 = _1313 + _1072;
        float _1723 = _1317 + _1073;
        float _1724 = _1321 + _1074;
        float _1734 = fma(_1724, cbModelParam._m0[30u].z, fma(_1723, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1722)) - _1691;
        float _1735 = fma(_1724, cbModelParam._m0[31u].z, fma(_1723, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1722)) - _1695;
        float _1736 = fma(_1724, cbModelParam._m0[32u].z, fma(_1723, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1722)) - _1699;
        float _1740 = inversesqrt(dot(vec3(_1734, _1735, _1736), vec3(_1734, _1735, _1736)));
        float _1753 = ((_1740 * _1734) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1691 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1754 = ((_1740 * _1735) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1695 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1755 = ((_1740 * _1736) / cbModelParam._m0[35u].z) + ((((((_1699 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1771 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        vec4 _1778 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1753, _1754, _1755), 0.0);
        float _1790 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1791 = _1790 * (_1757.x + (-0.5));
        float _1792 = _1790 * (_1757.y + (-0.5));
        float _1793 = _1790 * (_1757.z + (-0.5));
        float _1800 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1764.x + (-0.5));
        float _1802 = _1800 * (_1764.y + (-0.5));
        float _1803 = _1800 * (_1764.z + (-0.5));
        float _1810 = exp2((_1771.w + (-0.5)) * 20.0) * 2.0;
        float _1811 = _1810 * (_1771.x + (-0.5));
        float _1812 = _1810 * (_1771.y + (-0.5));
        float _1813 = _1810 * (_1771.z + (-0.5));
        float _1820 = exp2((_1778.w + (-0.5)) * 20.0) * 2.0;
        float _1821 = _1820 * (_1778.x + (-0.5));
        float _1822 = _1820 * (_1778.y + (-0.5));
        float _1823 = _1820 * (_1778.z + (-0.5));
        float _1824 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1825 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = _1791 * 0.5;
        float _1828 = _1801 * 0.5;
        float _1829 = _1811 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_1072, _1073, _1074), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1824 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4459 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1854 + 1.0))) + _1859) * _1824;
        float _1869 = _1792 * 0.5;
        float _1870 = _1802 * 0.5;
        float _1871 = _1812 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1072, _1073, _1074), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1825 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4492 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1896 + 1.0))) + _1901) * _1825;
        float _1911 = _1793 * 0.5;
        float _1912 = _1803 * 0.5;
        float _1913 = _1813 * 0.5;
        float _1914 = dot(vec3(_1911, _1912, _1913), vec3(_1911, _1912, _1913));
        float _1919 = (_1914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1914);
        float _1927 = (dot(vec3(_1072, _1073, _1074), vec3(_1919 * _1911, _1919 * _1912, _1919 * _1913)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1936 = sqrt(((_1912 * _1912) + (_1911 * _1911)) + (_1913 * _1913)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1937 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1938 = _1937 * 2.0;
        float _1942 = (1.0 - _1937) / (_1937 + 1.0);
        float _4525 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1952 = ((((1.0 - _1943) * (_1938 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1938 + 1.0))) + _1943) * _1826;
        _1960 = _1793;
        _1961 = _1792;
        _1962 = _1791;
        _1963 = _1803;
        _1964 = _1802;
        _1965 = _1801;
        _1966 = _1813;
        _1967 = _1812;
        _1968 = _1811;
        _1969 = _1826;
        _1970 = _1825;
        _1971 = _1824;
        _1972 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1973 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0)));
    }
    else
    {
        _1960 = _1651;
        _1961 = _1651;
        _1962 = _1651;
        _1963 = _1651;
        _1964 = _1651;
        _1965 = _1651;
        _1966 = _1651;
        _1967 = _1651;
        _1968 = _1651;
        _1969 = _1651;
        _1970 = _1651;
        _1971 = _1651;
        _1972 = 0.0;
        _1973 = 0.0;
        _1974 = 0.0;
    }
    float _1984 = (cbModelParam._m0[1u].x * (_1972 - _1663)) + _1663;
    float _1985 = (cbModelParam._m0[1u].x * (_1973 - _1664)) + _1664;
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1665)) + _1665;
    float _2007 = fma(_1986, cbSceneParam._m0[89u].z, fma(_1985, cbSceneParam._m0[89u].y, _1984 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_1986, cbSceneParam._m0[90u].z, fma(_1985, cbSceneParam._m0[90u].y, _1984 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_1986, cbSceneParam._m0[91u].z, fma(_1985, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1984));
    float _2028 = _1257 * 0.5;
    float _2029 = _1258 * 0.5;
    float _2030 = _1259 * 0.5;
    float _2031 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2034 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1961, _1964, _1967, _1970));
    float _2037 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1960, _1963, _1966, _1969));
    float _2071;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2044 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1650, _1654, _1657, _1660));
        float _2048 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1652, _1655, _1658, _1661));
        float _2052 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1653, _1656, _1659, _1662));
        float _2059 = dot(vec4(cbModelParam._m0[39u]), vec4(_2028, _2029, _2030, 1.0));
        _2071 = dot(vec3(isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)), isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2059) ? 0.0 : (isnan(0.0) ? _2059 : max(0.0, _2059))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2071 = 1.0;
    }
    float _2082;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2073 = dot(vec4(cbModelParam._m0[40u]), vec4(_2028, _2029, _2030, 1.0));
        _2082 = dot(vec3(isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2073) ? 0.0 : (isnan(0.0) ? _2073 : max(0.0, _2073))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2082 = 1.0;
    }
    float _2086 = (_2082 * cbModelParam._m0[1u].x) + (_2071 * (1.0 - cbModelParam._m0[1u].x));
    float _2096 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1075);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2096 : min(cbModelParam._m0[25u].z, _2096));
    float _2177;
    float _2179;
    float _2181;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2144 = fma(_1321, cbModelParam._m0[13u].z, fma(_1317, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1313)) + cbModelParam._m0[13u].w;
        float _2148 = fma(_1321, cbModelParam._m0[14u].z, fma(_1317, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1313)) + cbModelParam._m0[14u].w;
        float _2152 = fma(_1321, cbModelParam._m0[15u].z, fma(_1317, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1313)) + cbModelParam._m0[15u].w;
        float _2155 = fma(_1259, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1257));
        float _2158 = fma(_1259, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1257));
        float _2161 = fma(_1259, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1257));
        float _2189;
        if (_2155 > 0.0)
        {
            _2189 = abs((1.0 - _2144) / _2155);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2144 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2189 = frontier_phi_17_15_ladder;
        }
        float _2412;
        if (_2158 > 0.0)
        {
            _2412 = abs((1.0 - _2148) / _2158);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2148 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2412 = frontier_phi_26_22_ladder;
        }
        float _2669;
        if (_2161 > 0.0)
        {
            _2669 = abs((1.0 - _2152) / _2161);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2152 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2669 = frontier_phi_38_33_ladder;
        }
        float _2671 = isnan(_2412) ? _2189 : (isnan(_2189) ? _2412 : min(_2189, _2412));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _2155) + _2144;
        float _2677 = (_2672 * _2158) + _2148;
        float _2678 = (_2672 * _2161) + _2152;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2681 = (-1.0) - _2679;
        float _2683 = _2679 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2678 > _2683) || ((_2678 < _2681) || ((_2677 > _2683) || ((_2677 < _2681) || ((_2676 < _2681) || (_2676 > _2683))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2678, cbModelParam._m0[9u].z, fma(_2677, cbModelParam._m0[9u].y, _2676 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2678, cbModelParam._m0[10u].z, fma(_2677, cbModelParam._m0[10u].y, _2676 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2678, cbModelParam._m0[11u].z, fma(_2677, cbModelParam._m0[11u].y, _2676 * cbModelParam._m0[11u].x))), _2097);
            frontier_phi_16_38_ladder = _2806.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2806.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2806.x * cbModelParam._m0[1u].y;
        }
        _2177 = frontier_phi_16_38_ladder_2;
        _2179 = frontier_phi_16_38_ladder_1;
        _2181 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1257, _1258, _1259), _2097);
        _2177 = _2165.x * cbModelParam._m0[1u].y;
        _2179 = _2165.y * cbModelParam._m0[1u].y;
        _2181 = _2165.z * cbModelParam._m0[1u].y;
    }
    float _2185 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1075);
    float _2186 = isnan(_2185) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2185 : min(cbModelParam._m0[25u].w, _2185));
    float _2275;
    float _2277;
    float _2279;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2239 = fma(_1321, cbModelParam._m0[21u].z, fma(_1317, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1313)) + cbModelParam._m0[21u].w;
        float _2243 = fma(_1321, cbModelParam._m0[22u].z, fma(_1317, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1313)) + cbModelParam._m0[22u].w;
        float _2247 = fma(_1321, cbModelParam._m0[23u].z, fma(_1317, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1313)) + cbModelParam._m0[23u].w;
        float _2250 = fma(_1259, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1257));
        float _2253 = fma(_1259, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1257));
        float _2256 = fma(_1259, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1257));
        float _2417;
        if (_2250 > 0.0)
        {
            _2417 = abs((1.0 - _2239) / _2250);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2239 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2417 = frontier_phi_28_24_ladder;
        }
        float _2696;
        if (_2253 > 0.0)
        {
            _2696 = abs((1.0 - _2243) / _2253);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2243 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2696 = frontier_phi_40_35_ladder;
        }
        float _2909;
        if (_2256 > 0.0)
        {
            _2909 = abs((1.0 - _2247) / _2256);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2247 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2909 = frontier_phi_49_46_ladder;
        }
        float _2911 = isnan(_2696) ? _2417 : (isnan(_2417) ? _2696 : min(_2417, _2696));
        float _2912 = isnan(_2909) ? _2911 : (isnan(_2911) ? _2909 : min(_2911, _2909));
        float _2916 = (_2912 * _2250) + _2239;
        float _2917 = (_2912 * _2253) + _2243;
        float _2918 = (_2912 * _2256) + _2247;
        float _2919 = _2912 * 9.9999997473787516355514526367188e-05;
        float _2920 = (-1.0) - _2919;
        float _2922 = _2919 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2918 > _2922) || ((_2918 < _2920) || ((_2917 > _2922) || ((_2917 < _2920) || ((_2916 < _2920) || (_2916 > _2922))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3117 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2918, cbModelParam._m0[17u].z, fma(_2917, cbModelParam._m0[17u].y, _2916 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2918, cbModelParam._m0[18u].z, fma(_2917, cbModelParam._m0[18u].y, _2916 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2918, cbModelParam._m0[19u].z, fma(_2917, cbModelParam._m0[19u].y, _2916 * cbModelParam._m0[19u].x))), _2186);
            frontier_phi_25_49_ladder = _3117.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3117.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3117.x * cbModelParam._m0[1u].z;
        }
        _2275 = frontier_phi_25_49_ladder_2;
        _2277 = frontier_phi_25_49_ladder_1;
        _2279 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2259 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1257, _1258, _1259), _2186);
        _2275 = _2259.x * cbModelParam._m0[1u].z;
        _2277 = _2259.y * cbModelParam._m0[1u].z;
        _2279 = _2259.z * cbModelParam._m0[1u].z;
    }
    float _2292 = (((_1284 * _1233) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2275 - _2177)) + _2177);
    float _2294 = (((_1284 * _1235) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2277 - _2179)) + _2179);
    float _2296 = (((_1284 * _1236) + _1285) * _1249) * ((cbModelParam._m0[1u].w * (_2279 - _2181)) + _2181);
    float _2299 = fma(_2296, cbSceneParam._m0[89u].z, fma(_2294, cbSceneParam._m0[89u].y, _2292 * cbSceneParam._m0[89u].x));
    float _2302 = fma(_2296, cbSceneParam._m0[90u].z, fma(_2294, cbSceneParam._m0[90u].y, _2292 * cbSceneParam._m0[90u].x));
    float _2305 = fma(_2296, cbSceneParam._m0[91u].z, fma(_2294, cbSceneParam._m0[91u].y, _2292 * cbSceneParam._m0[91u].x));
    vec4 _2313 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1171, _1172));
    float _2315 = _2313.w;
    float _2327 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2315);
    float _2328 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2315);
    float _2329 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2315);
    uvec4 _2333 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2335 = _2333.x * 14u;
    uint _2336 = _2335 + 13u;
    float _2343 = _1249 + (-1.0);
    float _2348 = (cbLight._m0[_2336].x * _2343) + 1.0;
    float _2349 = (cbLight._m0[_2336].y * _2343) + 1.0;
    float _2350 = (cbLight._m0[_2336].z * _2343) + 1.0;
    float _2351 = (cbLight._m0[_2336].w * _2343) + 1.0;
    uint _2352 = _2335 + 5u;
    float _2358 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
    uint _2362 = _2335 + 4u;
    float _2371 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    uint _2375 = _2335 | 1u;
    float _2386 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_1072, _1073, _1074));
    float _2389 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_1072, _1073, _1074));
    float _4661 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _4672 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2394 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2396 = (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * 0.3183098733425140380859375;
    float _2403 = ((cbLight._m0[_2352].x * _2358) * _2396) + (((cbLight._m0[_2362].x * _2327) * _2371) * _2394);
    float _2404 = ((_2358 * cbLight._m0[_2352].y) * _2396) + (((cbLight._m0[_2362].y * _2328) * _2371) * _2394);
    float _2405 = ((_2358 * cbLight._m0[_2352].z) * _2396) + (((cbLight._m0[_2362].z * _2329) * _2371) * _2394);
    uvec4 _2409 = floatBitsToUint(cbLight._m0[_2335 + 12u]);
    bool _2411 = _2409.x == 0u;
    float _2422;
    float _2424;
    float _2426;
    if (_2411)
    {
        _2422 = _2403;
        _2424 = _2404;
        _2426 = _2405;
    }
    else
    {
        uint _2430 = _2335 + 6u;
        float _2446 = (dot(vec3(cbLight._m0[_2335 + 2u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2447 = _2446 * _2446;
        float _4683 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2448 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2449 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2422 = (((cbLight._m0[_2430].x * 0.3183098733425140380859375) * _2448) * _2449) + _2403;
        _2424 = (((cbLight._m0[_2430].y * 0.3183098733425140380859375) * _2448) * _2449) + _2404;
        _2426 = (((cbLight._m0[_2430].z * 0.3183098733425140380859375) * _2448) * _2449) + _2405;
    }
    bool _2429 = _2409.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2429)
    {
        _2467 = _2422;
        _2469 = _2424;
        _2471 = _2426;
    }
    else
    {
        uint _2640 = _2335 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2335 + 3u].xyz), vec3(_1072, _1073, _1074)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4699 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2659 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2467 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2422;
        _2469 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2424;
        _2471 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2426;
    }
    uint _2474 = _2335 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _1075) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2335].x + _1151;
    float _2490 = cbLight._m0[_2335].y + _1152;
    float _2491 = cbLight._m0[_2335].z + _1153;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2335].xyz));
    float _4715 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _4726 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _2503 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2504 = dot(vec3(_1072, _1073, _1074), vec3(_2496, _2497, _2498));
    float _4737 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2496, _2497, _2498));
    float _4748 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0)))) * 5.0);
    float _2525 = 0.959999978542327880859375 - _1230;
    float _2527 = 0.959999978542327880859375 - _1231;
    float _2528 = 0.959999978542327880859375 - _1232;
    float _2535 = 1.0 - _2488;
    float _2546 = (0.5 / (((_2503 * ((_2502 * _2535) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2535) + _2488) * _2502))) * _2502;
    float _4759 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2562 = _2335 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _1075) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2375].x + _1151;
    float _2576 = cbLight._m0[_2375].y + _1152;
    float _2577 = cbLight._m0[_2375].z + _1153;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2375].xyz));
    float _4770 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2589 = dot(vec3(_1072, _1073, _1074), vec3(_2582, _2583, _2584));
    float _4781 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2582, _2583, _2584));
    float _4792 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
    float _2615 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2503 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2615) + _2574) * _2588))) * _2588;
    float _4803 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2637 = (((((_2608 * _2525) + _1233) * cbLight._m0[_2562].x) * _2627) * _2358) + ((((cbLight._m0[_2474].x * _2327) * ((_2524 * _2525) + _1233)) * _2548) * _2371);
    float _2638 = (((((_2608 * _2527) + _1235) * cbLight._m0[_2562].y) * _2627) * _2358) + ((((cbLight._m0[_2474].y * _2328) * ((_2524 * _2527) + _1235)) * _2548) * _2371);
    float _2639 = (((((_2608 * _2528) + _1236) * cbLight._m0[_2562].z) * _2627) * _2358) + ((((cbLight._m0[_2474].z * _2329) * ((_2524 * _2528) + _1236)) * _2548) * _2371);
    float _2701;
    float _2703;
    float _2705;
    if (_2411)
    {
        _2701 = _2637;
        _2703 = _2638;
        _2705 = _2639;
    }
    else
    {
        uint _2707 = _2335 + 2u;
        uint _2711 = _2335 + 10u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _1075) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _1151;
        float _2728 = cbLight._m0[_2707].y + _1152;
        float _2729 = cbLight._m0[_2707].z + _1153;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2707].xyz));
        float _4814 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2741 = dot(vec3(_1072, _1073, _1074), vec3(_2734, _2735, _2736));
        float _4825 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4836 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0)))) * 5.0);
        float _2767 = 1.0 - _2726;
        float _2777 = (0.5 / (((_2503 * ((_2740 * _2767) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2767) + _2726) * _2740))) * _2740;
        float _4847 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
        _2701 = (((((_2760 * _2525) + _1233) * cbLight._m0[_2711].x) * _2779) * _2780) + _2637;
        _2703 = (((((_2760 * _2527) + _1235) * cbLight._m0[_2711].y) * _2779) * _2780) + _2638;
        _2705 = (((((_2760 * _2528) + _1236) * cbLight._m0[_2711].z) * _2779) * _2780) + _2639;
    }
    float _2815;
    float _2817;
    float _2819;
    if (_2429)
    {
        _2815 = _2701;
        _2817 = _2703;
        _2819 = _2705;
    }
    else
    {
        uint _2826 = _2335 + 3u;
        uint _2830 = _2335 + 11u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _1075) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _1151;
        float _2847 = cbLight._m0[_2826].y + _1152;
        float _2848 = cbLight._m0[_2826].z + _1153;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_1072, _1073, _1074), vec3(cbLight._m0[_2826].xyz));
        float _4863 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2860 = dot(vec3(_1072, _1073, _1074), vec3(_2853, _2854, _2855));
        float _4874 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4885 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0)))) * 5.0);
        float _2886 = 1.0 - _2845;
        float _2896 = (0.5 / (((_2503 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2886) + _2845) * _2859))) * _2859;
        float _4896 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
        _2815 = (((((_2879 * _2525) + _1233) * cbLight._m0[_2830].x) * _2898) * _2899) + _2701;
        _2817 = (((((_2879 * _2527) + _1235) * cbLight._m0[_2830].y) * _2898) * _2899) + _2703;
        _2819 = (((((_2879 * _2528) + _1236) * cbLight._m0[_2830].z) * _2898) * _2899) + _2705;
    }
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    if (_2333.y == 0u)
    {
        float _2974 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2974;
        float _2976 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2974;
        float _2977 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2974;
        uvec4 _2989 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2990 = _2989.x;
        uint _3001 = uint((float(_2989.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1172) / _2990))) + floor(float(uint(cbSceneParam._m0[85u].x * _1171) / _2990)));
        float _3011 = (log2(_2977 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3012 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        uint _3015 = uint(isnan(14.0) ? _3012 : (isnan(_3012) ? 14.0 : min(_3012, 14.0)));
        uvec4 _3020 = texelFetch(g_lightClusterGridBuffer, int(((_3015 << 2u) + (_3001 << 6u)) >> 2u));
        uint _3021 = _3020.x;
        uint _3022 = _2989.z;
        float _3122;
        float _3124;
        float _3126;
        float _3128;
        float _3130;
        float _3132;
        if (((((1u << ((_3022 >> 4u) & 15u)) + 4294967295u) & _3021) == 0u) || ((_3022 & 240u) == 0u))
        {
            _3122 = 0.0;
            _3124 = 0.0;
            _3126 = 0.0;
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
        }
        else
        {
            float _3123;
            float _3125;
            float _3127;
            float _3129;
            float _3131;
            float _3133;
            float _3274 = 0.0;
            float _3275 = 0.0;
            float _3276 = 0.0;
            float _3277 = 0.0;
            float _3278 = 0.0;
            float _3279 = 0.0;
            uint _3280 = 0u;
            uint _3289;
            bool _3290;
            for (;;)
            {
                _3289 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                _3290 = _3289 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3290)
                {
                    frontier_phi_66_pred = _3274;
                    frontier_phi_66_pred_1 = _3279;
                    frontier_phi_66_pred_2 = _3278;
                    frontier_phi_66_pred_3 = _3277;
                    frontier_phi_66_pred_4 = _3276;
                    frontier_phi_66_pred_5 = _3275;
                }
                else
                {
                    float _3419;
                    float _3420;
                    float _3421;
                    float _3422;
                    float _3423;
                    float _3424;
                    uint _3425;
                    _3419 = _3274;
                    _3420 = _3275;
                    _3421 = _3276;
                    _3422 = _3277;
                    _3423 = _3278;
                    _3424 = _3279;
                    _3425 = _3289;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    for (;;)
                    {
                        uint _3429 = uint(findLSB(_3425)) + (_3280 << 5u);
                        uint _3426 = (_3425 + 4294967295u) & _3425;
                        uint _3431 = _3429 * 48u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3431)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3431 + 3u)).x));
                        uint _3451 = (_3429 * 48u) + 4u;
                        vec4 _3464 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 3u)).x));
                        uint _3470 = (_3429 * 48u) + 8u;
                        vec3 _3481 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3470)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3470 + 2u)).x));
                        float _3485 = _3445.x - _2975;
                        float _3486 = _3445.y - _2976;
                        float _3487 = _3445.z - _2977;
                        float _3488 = dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487));
                        float _3491 = inversesqrt(_3488);
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3495 = dot(vec3(_1190, _1193, _1196), vec3(_3492, _3493, _3494));
                        float _3500 = 1.0 - (_3488 * _3445.w);
                        float _4922 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                        float _3501 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                        float _3502 = sqrt(_3488) * _3464.w;
                        float _3505 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                        float _3506 = _3505 * _3505;
                        float _3509 = ((1.0 - _3506) * _3495) + _3506;
                        float _3512 = _3502 * _3502;
                        float _3516 = ((isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0))) * _3501) / ((_3512 * 0.699999988079071044921875) + 1.0);
                        float _3520 = (-0.0) - _2975;
                        float _3521 = (-0.0) - _2976;
                        float _3522 = (-0.0) - _2977;
                        float _3526 = inversesqrt(dot(vec3(_3520, _3521, _3522), vec3(_3520, _3521, _3522)));
                        float _3527 = _3526 * _3520;
                        float _3528 = _3526 * _3521;
                        float _3529 = _3526 * _3522;
                        float _3537 = exp2(log2(1.0 / ((_3512 * 3.5) + 5.0)) * 0.25);
                        float _3538 = 1.0 - _1265;
                        float _3545 = sqrt(1.0 - ((1.0 - (_3538 * _3538)) * (1.0 - (_3537 * _3537))));
                        float _3546 = _3545 * _3545;
                        float _3547 = _3546 * _3546;
                        float _3548 = _3527 + _3492;
                        float _3549 = _3528 + _3493;
                        float _3550 = _3529 + _3494;
                        float _3554 = inversesqrt(dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550)));
                        float _3558 = dot(vec3(_1190, _1193, _1196), vec3(_3527, _3528, _3529));
                        float _4938 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3561 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3562 = dot(vec3(_1190, _1193, _1196), vec3(_3554 * _3548, _3554 * _3549, _3554 * _3550));
                        float _4949 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3565 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3569 = ((_3565 * _3565) * (_3547 + (-1.0))) + 1.0;
                        float _3570 = _3505 * _3546;
                        float _3571 = _3570 * _3570;
                        float _3574 = ((1.0 - _3571) * _3495) + _3571;
                        float _4960 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3575 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3576 = 1.0 - _3546;
                        float _3586 = (0.5 / (((_3575 * ((_3561 * _3576) + _3546)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3546) * _3561))) * _3575;
                        float _4971 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3597 = (((_3547 * 3.1415927410125732421875) * (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0)))) / ((_3569 * _3569) * ((_3512 * 2.1991131305694580078125) + 3.141590118408203125))) * _3501;
                        _3349 = (_3516 * _3464.x) + _3422;
                        _3350 = (_3516 * _3464.y) + _3423;
                        _3351 = (_3516 * _3464.z) + _3424;
                        _3346 = (_3597 * _3481.x) + _3419;
                        _3347 = (_3597 * _3481.y) + _3420;
                        _3348 = (_3597 * _3481.z) + _3421;
                        if (_3426 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3419 = _3346;
                            _3420 = _3347;
                            _3421 = _3348;
                            _3422 = _3349;
                            _3423 = _3350;
                            _3424 = _3351;
                            _3425 = _3426;
                        }
                    }
                    frontier_phi_66_pred = _3346;
                    frontier_phi_66_pred_1 = _3351;
                    frontier_phi_66_pred_2 = _3350;
                    frontier_phi_66_pred_3 = _3349;
                    frontier_phi_66_pred_4 = _3348;
                    frontier_phi_66_pred_5 = _3347;
                }
                _3123 = frontier_phi_66_pred;
                _3133 = frontier_phi_66_pred_1;
                _3131 = frontier_phi_66_pred_2;
                _3129 = frontier_phi_66_pred_3;
                _3127 = frontier_phi_66_pred_4;
                _3125 = frontier_phi_66_pred_5;
                uint _3281 = _3280 + 1u;
                if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3274 = _3123;
                    _3275 = _3125;
                    _3276 = _3127;
                    _3277 = _3129;
                    _3278 = _3131;
                    _3279 = _3133;
                    _3280 = _3281;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3122 = _3123;
            _3124 = _3125;
            _3126 = _3127;
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
        }
        uvec4 _3136 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3137 = _3136.z;
        uint _3139 = (_3137 >> 8u) & 15u;
        float _3242;
        float _3244;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        if (((4294967295u << _3139) & _3021) == 0u)
        {
            _3242 = _3122;
            _3244 = _3124;
            _3246 = _3126;
            _3248 = _3128;
            _3250 = _3130;
            _3252 = _3132;
        }
        else
        {
            float _3267 = inversesqrt(dot(vec3(_2975, _2976, _2977), vec3(_2975, _2976, _2977)));
            float _3268 = _3267 * _2975;
            float _3269 = _3267 * _2976;
            float _3270 = _3267 * _2977;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3139 < ((_3137 >> 12u) & 15u))
            {
                float _3243;
                float _3245;
                float _3247;
                float _3249;
                float _3251;
                float _3253;
                float _3402 = _3122;
                float _3403 = _3124;
                float _3404 = _3126;
                float _3405 = _3128;
                float _3406 = _3130;
                float _3407 = _3132;
                uint _3408 = _3139;
                uint _3417;
                bool _3418;
                for (;;)
                {
                    _3417 = texelFetch(g_lightClassification, int((((_3015 << 5u) + (_3001 << 9u)) + (_3408 << 2u)) >> 2u)).x;
                    _3418 = _3417 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3418)
                    {
                        frontier_phi_77_pred = _3407;
                        frontier_phi_77_pred_1 = _3406;
                        frontier_phi_77_pred_2 = _3405;
                        frontier_phi_77_pred_3 = _3404;
                        frontier_phi_77_pred_4 = _3403;
                        frontier_phi_77_pred_5 = _3402;
                    }
                    else
                    {
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3904;
                        float _3905;
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3624 = _3402;
                        float _3625 = _3403;
                        float _3626 = _3404;
                        float _3627 = _3405;
                        float _3628 = _3406;
                        float _3629 = _3407;
                        uint _3630 = _3417;
                        uint _3631;
                        vec4 _3656;
                        float _3657;
                        vec4 _3672;
                        vec3 _3684;
                        vec4 _3699;
                        vec4 _3714;
                        float _3760;
                        bool _3761;
                        for (;;)
                        {
                            uint _3641 = ((_3408 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3630));
                            _3631 = (_3630 + 4294967295u) & _3630;
                            uint _3643 = _3641 * 40u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            _3657 = _3656.w;
                            uint _3659 = (_3641 * 40u) + 4u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3641 * 40u) + 8u;
                            _3684 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x));
                            uint _3686 = (_3641 * 40u) + 16u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3641 * 40u) + 20u;
                            _3714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 3u)).x));
                            uint _3716 = (_3641 * 40u) + 24u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3735 = (_3641 * 40u) + 28u;
                            vec4 _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            _3760 = fma(_2977, _3748.z, fma(_2976, _3748.y, _3748.x * _2975)) + _3748.w;
                            _3761 = !((fma(_2977, _3729.z, fma(_2976, _3729.y, _3729.x * _2975)) + _3729.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3761)
                            {
                                float _3788 = _3656.x - _2975;
                                float _3789 = _3656.y - _2976;
                                float _3790 = _3656.z - _2977;
                                float _3791 = dot(vec3(_3788, _3789, _3790), vec3(_3788, _3789, _3790));
                                float _3794 = inversesqrt(_3791);
                                float _3795 = _3794 * _3788;
                                float _3796 = _3794 * _3789;
                                float _3797 = _3794 * _3790;
                                float _3801 = 1.0 - (_3791 / (_3657 * _3657));
                                float _4982 = isnan(0.0) ? _3801 : (isnan(_3801) ? 0.0 : max(_3801, 0.0));
                                float _3802 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                                float _3806 = sqrt(_3791) * _3672.w;
                                float _3808 = 1.39999997615814208984375 / (_3806 + 1.39999997615814208984375);
                                float _3809 = _3808 * _3808;
                                float _3812 = ((1.0 - _3809) * dot(vec3(_3795, _3796, _3797), vec3(_1190, _1193, _1196))) + _3809;
                                float _3815 = _3806 * _3806;
                                float _3819 = (fma(_2977, _3699.z, fma(_2976, _3699.y, _3699.x * _2975)) + _3699.w) / _3760;
                                float _3820 = (fma(_2977, _3714.z, fma(_2976, _3714.y, _3714.x * _2975)) + _3714.w) / _3760;
                                float _3824 = 1.0 - dot(vec2(_3819, _3820), vec2(_3819, _3820));
                                float _4998 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3826 = _3825 * (((isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0))) * _3802) / ((_3815 * 0.699999988079071044921875) + 1.0));
                                float _3838 = exp2(log2(1.0 / ((_3815 * 3.5) + 5.0)) * 0.25);
                                float _3839 = 1.0 - _1265;
                                float _3846 = sqrt(1.0 - ((1.0 - (_3839 * _3839)) * (1.0 - (_3838 * _3838))));
                                float _3847 = _3846 * _3846;
                                float _3848 = _3847 * _3847;
                                float _3849 = _3795 - _3268;
                                float _3850 = _3796 - _3269;
                                float _3851 = _3797 - _3270;
                                float _3855 = inversesqrt(dot(vec3(_3849, _3850, _3851), vec3(_3849, _3850, _3851)));
                                float _3859 = dot(vec3(_1190, _1193, _1196), vec3((-0.0) - _3268, (-0.0) - _3269, (-0.0) - _3270));
                                float _5009 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3862 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3863 = dot(vec3(_1190, _1193, _1196), vec3(_3855 * _3849, _3855 * _3850, _3855 * _3851));
                                float _5020 = isnan(0.0) ? _3863 : (isnan(_3863) ? 0.0 : max(_3863, 0.0));
                                float _3866 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3870 = ((_3866 * _3866) * (_3848 + (-1.0))) + 1.0;
                                float _3871 = _3808 * _3847;
                                float _3872 = _3871 * _3871;
                                float _3878 = ((1.0 - _3872) * dot(vec3(_1190, _1193, _1196), vec3(_3795, _3796, _3797))) + _3872;
                                float _5031 = isnan(0.0) ? _3878 : (isnan(_3878) ? 0.0 : max(_3878, 0.0));
                                float _3879 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3880 = 1.0 - _3847;
                                float _3890 = (0.5 / (((_3879 * ((_3862 * _3880) + _3847)) + 9.9999999392252902907785028219223e-09) + (((_3879 * _3880) + _3847) * _3862))) * _3879;
                                float _5042 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3900 = (_3825 * _3802) * (((_3848 * 3.1415927410125732421875) * (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) / ((_3870 * _3870) * ((_3815 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3826 * _3672.y;
                                frontier_phi_83_pred_1 = _3826 * _3672.x;
                                frontier_phi_83_pred_2 = _3900 * _3684.z;
                                frontier_phi_83_pred_3 = _3900 * _3684.y;
                                frontier_phi_83_pred_4 = _3900 * _3684.x;
                                frontier_phi_83_pred_5 = _3826 * _3672.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3908 = frontier_phi_83_pred;
                            _3907 = frontier_phi_83_pred_1;
                            _3906 = frontier_phi_83_pred_2;
                            _3905 = frontier_phi_83_pred_3;
                            _3904 = frontier_phi_83_pred_4;
                            _3909 = frontier_phi_83_pred_5;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            _3611 = _3904 + _3624;
                            _3612 = _3905 + _3625;
                            _3613 = _3906 + _3626;
                            if (_3631 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3624 = _3611;
                                _3625 = _3612;
                                _3626 = _3613;
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3631;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3616;
                        frontier_phi_77_pred_1 = _3615;
                        frontier_phi_77_pred_2 = _3614;
                        frontier_phi_77_pred_3 = _3613;
                        frontier_phi_77_pred_4 = _3612;
                        frontier_phi_77_pred_5 = _3611;
                    }
                    _3253 = frontier_phi_77_pred;
                    _3251 = frontier_phi_77_pred_1;
                    _3249 = frontier_phi_77_pred_2;
                    _3247 = frontier_phi_77_pred_3;
                    _3245 = frontier_phi_77_pred_4;
                    _3243 = frontier_phi_77_pred_5;
                    uint _3409 = _3408 + 1u;
                    if (_3409 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3402 = _3243;
                        _3403 = _3245;
                        _3404 = _3247;
                        _3405 = _3249;
                        _3406 = _3251;
                        _3407 = _3253;
                        _3408 = _3409;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3247;
                frontier_phi_58_59_ladder_1 = _3253;
                frontier_phi_58_59_ladder_2 = _3251;
                frontier_phi_58_59_ladder_3 = _3249;
                frontier_phi_58_59_ladder_4 = _3245;
                frontier_phi_58_59_ladder_5 = _3243;
            }
            else
            {
                frontier_phi_58_59_ladder = _3126;
                frontier_phi_58_59_ladder_1 = _3132;
                frontier_phi_58_59_ladder_2 = _3130;
                frontier_phi_58_59_ladder_3 = _3128;
                frontier_phi_58_59_ladder_4 = _3124;
                frontier_phi_58_59_ladder_5 = _3122;
            }
            _3242 = frontier_phi_58_59_ladder_5;
            _3244 = frontier_phi_58_59_ladder_4;
            _3246 = frontier_phi_58_59_ladder;
            _3248 = frontier_phi_58_59_ladder_3;
            _3250 = frontier_phi_58_59_ladder_2;
            _3252 = frontier_phi_58_59_ladder_1;
        }
        float _3257 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _3034 = (_3257 * _3248) + _2467;
        _3036 = (_3257 * _3250) + _2469;
        _3038 = (_3257 * _3252) + _2471;
        _3040 = ((_3242 * _1233) * _3257) + _2815;
        _3042 = ((_3244 * _1235) * _3257) + _2817;
        _3044 = ((_3246 * _1236) * _3257) + _2819;
    }
    else
    {
        _3034 = _2467;
        _3036 = _2469;
        _3038 = _2471;
        _3040 = _2815;
        _3042 = _2817;
        _3044 = _2819;
    }
    float _5058 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _5069 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _5080 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _3061 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3034 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1249))) + ((_3040 + ((isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    float _3062 = ((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3036 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1249))) + ((_3042 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3038 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1249))) + ((_3044 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2086)) * cbPerFrame._m0[3u].x);
    uint _3064 = _273 + 6u;
    float _3072 = _1171 / cbSceneParam._m0[86u].x;
    float _3073 = _1172 / cbSceneParam._m0[86u].y;
    vec4 _3087 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, (log2((isnan(cbSceneParam._m0[77u].w) ? _1094 : (isnan(_1094) ? cbSceneParam._m0[77u].w : min(_1094, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3089 = _3087.x;
    float _3090 = _3087.y;
    float _3091 = _3087.z;
    float _3092 = _3087.w;
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    if (_1094 > cbSceneParam._m0[78u].w)
    {
        float _3147 = isnan(_1094) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1094 : min(cbSceneParam._m0[80u].w, _1094));
        float _3148 = _3147 / _1094;
        float _3159 = _3148 * _1144;
        float _3160 = _1145 * _3148;
        float _3161 = (-0.0) - _3160;
        float _3162 = _3148 * _1146;
        float _3164 = (cbSceneParam._m0[77u].w * _3161) / _3147;
        float _3165 = _3164 + cbSceneParam._m0[79u].w;
        float _3166 = cbSceneParam._m0[79u].w - _3160;
        float _3172 = sqrt(((_3159 * _3159) + (_3160 * _3160)) + (_3162 * _3162));
        float _3175 = (1.0 - (cbSceneParam._m0[77u].w / _3147)) * _3172;
        float _3180 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3182 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3359;
        if (abs((_3161 - _3164) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3359 = ((((_3165 > 0.0) ? exp2(_3180 * _3165) : (2.0 - exp2(_3182 * _3165))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3175;
        }
        else
        {
            float _3303 = 1.0 / cbSceneParam._m0[80u].x;
            float _3304 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : max(_3165, _3166));
            float _3305 = isnan(_3166) ? _3165 : (isnan(_3165) ? _3166 : min(_3165, _3166));
            float _3314 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : min(_3304, 0.0));
            float _3315 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : min(_3305, 0.0));
            _3359 = ((abs(_3172 / _3161) * cbSceneParam._m0[80u].y) * ((((_3314 - _3315) * 2.0) - ((exp2(_3180 * (isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0)))) - exp2(_3180 * (isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))))) * _3303)) - ((exp2(_3182 * _3314) - exp2(_3182 * _3315)) * _3303))) + (_3175 * cbSceneParam._m0[80u].z);
        }
        vec4 _3361 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3072, _3073, 1.0), 0.0);
        float _3370 = exp2((_3359 * (-1.44269502162933349609375)) * (1.0 - _3361.w));
        float _3371 = log2(_3370);
        float _3387 = log2(_3092);
        _3184 = (exp2(_3387 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].x)) * _3361.x) / cbSceneParam._m0[78u].x)) + _3089;
        _3186 = (exp2(_3387 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].y)) * _3361.y) / cbSceneParam._m0[78u].y)) + _3090;
        _3188 = (exp2(_3387 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3371 * cbSceneParam._m0[78u].z)) * _3361.z) / cbSceneParam._m0[78u].z)) + _3091;
        _3190 = _3370 * _3092;
    }
    else
    {
        _3184 = _3089;
        _3186 = _3090;
        _3188 = _3091;
        _3190 = _3092;
    }
    bool _3397;
    vec4 _3200;
    vec4 _3222;
    float _3224;
    float _3228;
    float _3229;
    float _3230;
    float _3231;
    bool _3241;
    for (;;)
    {
        _3200 = cbMatDynParam._m0[0u];
        float _3202 = roundEven(_3200.y);
        bool _3203 = _3202 == 3.0;
        float _3204 = log2(_3190);
        float _3211 = exp2(_3204 * cbSceneParam._m0[78u].x) * _3061;
        float _3212 = exp2(_3204 * cbSceneParam._m0[78u].y) * _3062;
        float _3213 = exp2(_3204 * cbSceneParam._m0[78u].z) * _3063;
        float _3220 = _1160 + (-0.5);
        _3222 = cbMtdParam._m0[1u];
        _3224 = _3222.y * _3220;
        float _3227 = (_3202 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3228 = _3227 * (_3203 ? _3211 : (_3211 + (cbSceneParam._m0[72u].w * _3184)));
        _3229 = _3227 * (_3203 ? _3212 : (_3212 + (cbSceneParam._m0[72u].w * _3186)));
        _3230 = _3227 * (_3203 ? _3213 : (_3213 + (cbSceneParam._m0[72u].w * _3188)));
        _3231 = _3220 * 0.999000012874603271484375;
        _3241 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3241)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3231) < 0.5)
            {
                _3397 = true;
                break;
            }
        }
        uint _3338 = _1209 + uint(_3200.w);
        if ((cbInstanceData._m0[_3338].w < 1.0) && ((cbInstanceData._m0[_3338].w + _3231) < 0.5))
        {
            _3397 = true;
            break;
        }
        if ((_3224 + 1.0) < _3222.x)
        {
            _3397 = true;
            break;
        }
        _3397 = false;
        break;
    }
    float _3602;
    if (_3397)
    {
        discard_state = true;
        _3602 = 0.0;
    }
    else
    {
        _3602 = cbInstanceData._m0[_3064].w;
    }
    SV_Target.x = _3228;
    SV_Target.y = _3229;
    SV_Target.z = _3230;
    SV_Target.w = _3602;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3064].w;
    discard_exit();
}


