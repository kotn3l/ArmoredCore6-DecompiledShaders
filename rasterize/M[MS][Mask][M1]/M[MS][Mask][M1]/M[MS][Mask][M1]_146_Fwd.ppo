#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1605;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _394 = _392.x;
    float _406 = dot(vec4(_394, _392.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _423 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_394 - _406) * cbMtdParam._m0[23u].w) + _406) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3927 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _424 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    float _431 = (_424 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _432 = (_424 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _433 = (_424 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _472 = _470.x;
    float _482 = dot(vec4(_472, _470.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _496 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_472 - _482) * cbMtdParam._m0[23u].w) + _482) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3938 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _497 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
    float _504 = (_497 * ((_450.x * cbMtdParam._m0[13u].x) - _431)) + _431;
    float _505 = (_497 * ((_450.y * cbMtdParam._m0[13u].y) - _432)) + _432;
    float _506 = (_497 * ((_450.z * cbMtdParam._m0[13u].z) - _433)) + _433;
    vec4 _525 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _544 = _542.x;
    float _554 = dot(vec4(_544, _542.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _566 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _353.z) * 2.0) - ((((_544 - _554) * cbMtdParam._m0[23u].w) + _554) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3949 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _574 = (_567 * ((_525.x * cbMtdParam._m0[14u].x) - _504)) + _504;
    float _575 = (_567 * ((_525.y * cbMtdParam._m0[14u].y) - _505)) + _505;
    float _576 = (_567 * ((_525.z * cbMtdParam._m0[14u].z) - _506)) + _506;
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _424) + _633;
    float _643 = ((_614.y - _634) * _424) + _634;
    float _644 = ((_614.z - _635) * _424) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _667 = ((_656.x - _642) * _497) + _642;
    float _668 = ((_656.y - _643) * _497) + _643;
    float _669 = ((_656.z - _644) * _497) + _644;
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _694 = ((_681.z - _669) * _567) + _669;
    float _697 = ((((_681.x - _667) * _567) + _667) * 2.0) + (-1.0);
    float _699 = ((((_681.y - _668) * _567) + _668) * 2.0) + (-1.0);
    float _700 = dot(vec2(_697, _699), vec2(_697, _699));
    float _3960 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _705 = sqrt(1.0 - (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))));
    vec4 _719 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _731 = (((_719.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _697;
    float _732 = (((_719.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _699;
    float _735 = fma(_705, _255, fma(_732, _262, _731 * _248));
    float _738 = fma(_705, _256, fma(_732, _263, _731 * _249));
    float _741 = fma(_705, _257, fma(_732, _264, _731 * _250));
    float _745 = inversesqrt(dot(vec3(_735, _738, _741), vec3(_735, _738, _741)));
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _774 = _772.x;
    float _775 = 1.0 - _774;
    float _783 = (cbMtdParam._m0[19u].x + dot(vec4(_745 * _735, _745 * _738, _745 * _741, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_774 - _775) * cbMtdParam._m0[24u].z) + _775) * cbMtdParam._m0[21u].z);
    float _3971 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _784 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _786 = (-0.0) - cbMtdParam._m0[24u].x;
    float _788 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _788 : (isnan(_788) ? 1.0 : min(_788, 1.0));
    float _796 = _784 - ((_784 * TEXCOORD_8.x) * _789);
    float _797 = _784 - ((_784 * TEXCOORD_8.y) * _789);
    float _798 = _784 - ((_784 * TEXCOORD_8.z) * _789);
    float _805 = (_796 * ((_594.x * cbMtdParam._m0[18u].x) - _574)) + _574;
    float _806 = (_797 * ((_594.y * cbMtdParam._m0[18u].y) - _575)) + _575;
    float _807 = (_798 * ((_594.z * cbMtdParam._m0[18u].z) - _576)) + _576;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _821 = _819.x;
    float _822 = 1.0 - _821;
    float _848 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_821 - _822) * cbMtdParam._m0[24u].w) + _822) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3992 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _849 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _857 = ((((cbMtdParam._m0[10u].x - _805) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _849) + _805;
    float _858 = ((((cbMtdParam._m0[10u].y - _806) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _849) + _806;
    float _859 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _807)) * _849) + _807;
    vec4 _885 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _887 = _885.x;
    float _905 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _887) * _424) + _887;
    float _922 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _905) * _497) + _905;
    float _939 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _922) * _567) + _922;
    float _943 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _939) * cbMtdParam._m0[19u].z) + _939;
    float _945 = _943 - (_943 * _796);
    float _947 = _945 - (_945 * _849);
    float _951 = (cbMtdParam._m0[19u].w * (_719.z - _694)) + _694;
    vec4 _967 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _974 = (_967.x * 2.0) + (-1.0);
    float _975 = (_967.y * 2.0) + (-1.0);
    float _976 = dot(vec2(_974, _975), vec2(_974, _975));
    float _4003 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _984 = ((_967.z - _951) * _796) + _951;
    float _987 = ((cbMtdParam._m0[23u].x - _984) * _849) + _984;
    vec4 _1010 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1016 = (_1010.x * 2.0) + (-1.0);
    float _1017 = (_1010.y * 2.0) + (-1.0);
    float _1018 = dot(vec2(_1016, _1017), vec2(_1016, _1017));
    float _4014 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1033 = ((sqrt(1.0 - (isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0)))) - _705) * _798) + _705;
    float _1036 = (((_974 - _731) * _796) + _731) + (cbMtdParam._m0[21u].x * _731);
    float _1037 = (((_975 - _732) * _797) + _732) + (cbMtdParam._m0[21u].x * _732);
    float _1048 = (((_1016 - _1036) + (_1036 * cbMtdParam._m0[22u].z)) * _849) + _1036;
    float _1049 = (((_1017 - _1037) + (_1037 * cbMtdParam._m0[22u].z)) * _849) + _1037;
    float _1050 = (_849 * (sqrt(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) - _1033)) + _1033;
    float _1052 = cbMtdParam._m0[22u].x + _719.w;
    float _1055 = fma(_1050, _255, fma(_1049, _262, _1048 * _248));
    float _1058 = fma(_1050, _256, fma(_1049, _263, _1048 * _249));
    float _1061 = fma(_1050, _257, fma(_1049, _264, _1048 * _250));
    float _1065 = inversesqrt(dot(vec3(_1055, _1058, _1061), vec3(_1055, _1058, _1061)));
    float _1066 = _1065 * _1055;
    float _1067 = _1065 * _1058;
    float _1068 = _1065 * _1061;
    float _4025 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _1069 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _4047 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4058 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _4069 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _4080 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _1074 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1088 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1138 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1128);
    float _1139 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1128);
    float _1140 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1128);
    float _1144 = inversesqrt(dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140)));
    float _1145 = _1138 * _1144;
    float _1146 = _1139 * _1144;
    float _1147 = _1140 * _1144;
    float _1153 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1154 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1172 = fma(_1068, cbSceneParam._m0[5u].z, fma(_1067, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1066));
    float _1175 = fma(_1068, cbSceneParam._m0[6u].z, fma(_1067, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1066));
    float _1178 = fma(_1068, cbSceneParam._m0[7u].z, fma(_1067, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1066));
    uint _1192 = (_267 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1198 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0)))) * cbInstanceData._m0[_1192].x;
    float _1199 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) * cbInstanceData._m0[_1192].y;
    float _1200 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * cbInstanceData._m0[_1192].z;
    float _4091 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1201 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
    float _4102 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1202 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _4113 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1203 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _1204 = 1.0 - _1074;
    float _1205 = _1201 * _1204;
    float _1206 = _1202 * _1204;
    float _1207 = _1203 * _1204;
    float _1212 = (_1201 + (-0.039999999105930328369140625)) * _1074;
    float _1213 = (_1202 + (-0.039999999105930328369140625)) * _1074;
    float _1214 = (_1203 + (-0.039999999105930328369140625)) * _1074;
    float _1215 = _1212 + 0.039999999105930328369140625;
    float _1217 = _1213 + 0.039999999105930328369140625;
    float _1218 = _1214 + 0.039999999105930328369140625;
    vec4 _1227 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1153, cbSceneParam._m0[86u].y * _1154));
    float _1231 = ((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * TEXCOORD_5.w) * _1227.x;
    float _1232 = dot(vec3(_1066, _1067, _1068), vec3(_1145, _1146, _1147));
    float _1235 = _1232 * 2.0;
    float _1239 = (_1235 * _1066) - _1145;
    float _1240 = (_1235 * _1067) - _1146;
    float _1241 = (_1235 * _1068) - _1147;
    float _1245 = abs(dot(vec3(_1145, _1146, _1147), vec3(_1066, _1067, _1068)));
    float _4124 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1247 = sqrt(_1069);
    float _1260 = exp2((_1247 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1247 * 3.0));
    float _1266 = (1.0 - _1260) * ((_1247 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1267 = _1260 * _1247;
    float _1295 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1604;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1329 = fma(_1303, cbModelParam._m0[26u].z, fma(_1299, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1295));
        float _1333 = fma(_1303, cbModelParam._m0[27u].z, fma(_1299, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1295));
        float _1337 = fma(_1303, cbModelParam._m0[28u].z, fma(_1299, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1295));
        float _1362 = _1295 + _1066;
        float _1363 = _1299 + _1067;
        float _1364 = _1303 + _1068;
        float _1374 = fma(_1364, cbModelParam._m0[26u].z, fma(_1363, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1362)) - _1329;
        float _1375 = fma(_1364, cbModelParam._m0[27u].z, fma(_1363, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1362)) - _1333;
        float _1376 = fma(_1364, cbModelParam._m0[28u].z, fma(_1363, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1362)) - _1337;
        float _1380 = inversesqrt(dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376)));
        float _1393 = ((_1380 * _1374) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1329 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1394 = ((_1380 * _1375) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1333 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1395 = ((_1380 * _1376) / cbModelParam._m0[34u].z) + ((((((_1337 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1393, _1394, _1395), 0.0);
        float _1432 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1398.x + (-0.5));
        float _1434 = _1432 * (_1398.y + (-0.5));
        float _1435 = _1432 * (_1398.z + (-0.5));
        float _1442 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1405.x + (-0.5));
        float _1444 = _1442 * (_1405.y + (-0.5));
        float _1445 = _1442 * (_1405.z + (-0.5));
        float _1452 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1412.x + (-0.5));
        float _1454 = _1452 * (_1412.y + (-0.5));
        float _1455 = _1452 * (_1412.z + (-0.5));
        float _1462 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1419.x + (-0.5));
        float _1464 = _1462 * (_1419.y + (-0.5));
        float _1465 = _1462 * (_1419.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1486 = (dot(vec3(_1066, _1067, _1068), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1496 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4172 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1498 + 1.0))) + _1503) * _1466;
        float _1513 = _1434 * 0.5;
        float _1514 = _1444 * 0.5;
        float _1515 = _1454 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_1066, _1067, _1068), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4205 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1540 + 1.0))) + _1545) * _1467;
        float _1555 = _1435 * 0.5;
        float _1556 = _1445 * 0.5;
        float _1557 = _1455 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_1066, _1067, _1068), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4238 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1582 + 1.0))) + _1587) * _1468;
        _1604 = _1435;
        _1606 = _1434;
        _1607 = _1433;
        _1608 = _1445;
        _1609 = _1444;
        _1610 = _1443;
        _1611 = _1455;
        _1612 = _1454;
        _1613 = _1453;
        _1614 = _1468;
        _1615 = _1467;
        _1616 = _1466;
        _1617 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1618 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1619 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1605;
        _1606 = _1605;
        _1607 = _1605;
        _1608 = _1605;
        _1609 = _1605;
        _1610 = _1605;
        _1611 = _1605;
        _1612 = _1605;
        _1613 = _1605;
        _1614 = _1605;
        _1615 = _1605;
        _1616 = _1605;
        _1617 = 0.0;
        _1618 = 0.0;
        _1619 = 0.0;
    }
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1642 = fma(_1303, cbModelParam._m0[30u].z, fma(_1299, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1295));
        float _1646 = fma(_1303, cbModelParam._m0[31u].z, fma(_1299, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1295));
        float _1650 = fma(_1303, cbModelParam._m0[32u].z, fma(_1299, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1295));
        float _1673 = _1295 + _1066;
        float _1674 = _1299 + _1067;
        float _1675 = _1303 + _1068;
        float _1685 = fma(_1675, cbModelParam._m0[30u].z, fma(_1674, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1673)) - _1642;
        float _1686 = fma(_1675, cbModelParam._m0[31u].z, fma(_1674, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1673)) - _1646;
        float _1687 = fma(_1675, cbModelParam._m0[32u].z, fma(_1674, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1673)) - _1650;
        float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
        float _1704 = ((_1691 * _1685) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1642 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1705 = ((_1691 * _1686) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1646 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1706 = ((_1691 * _1687) / cbModelParam._m0[35u].z) + ((((((_1650 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1708 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1704, _1705, _1706), 0.0);
        float _1741 = exp2((_1708.w + (-0.5)) * 20.0) * 2.0;
        float _1742 = _1741 * (_1708.x + (-0.5));
        float _1743 = _1741 * (_1708.y + (-0.5));
        float _1744 = _1741 * (_1708.z + (-0.5));
        float _1751 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1752 = _1751 * (_1715.x + (-0.5));
        float _1753 = _1751 * (_1715.y + (-0.5));
        float _1754 = _1751 * (_1715.z + (-0.5));
        float _1761 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1762 = _1761 * (_1722.x + (-0.5));
        float _1763 = _1761 * (_1722.y + (-0.5));
        float _1764 = _1761 * (_1722.z + (-0.5));
        float _1771 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1772 = _1771 * (_1729.x + (-0.5));
        float _1773 = _1771 * (_1729.y + (-0.5));
        float _1774 = _1771 * (_1729.z + (-0.5));
        float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1776 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1777 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1778 = _1742 * 0.5;
        float _1779 = _1752 * 0.5;
        float _1780 = _1762 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_1066, _1067, _1068), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1775 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4301 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1805 + 1.0))) + _1810) * _1775;
        float _1820 = _1743 * 0.5;
        float _1821 = _1753 * 0.5;
        float _1822 = _1763 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1066, _1067, _1068), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1776 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4334 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1847 + 1.0))) + _1852) * _1776;
        float _1862 = _1744 * 0.5;
        float _1863 = _1754 * 0.5;
        float _1864 = _1764 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1066, _1067, _1068), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1777 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4367 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1889 + 1.0))) + _1894) * _1777;
        _1911 = _1744;
        _1912 = _1743;
        _1913 = _1742;
        _1914 = _1754;
        _1915 = _1753;
        _1916 = _1752;
        _1917 = _1764;
        _1918 = _1763;
        _1919 = _1762;
        _1920 = _1777;
        _1921 = _1776;
        _1922 = _1775;
        _1923 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1924 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1925 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
    }
    else
    {
        _1911 = _1605;
        _1912 = _1605;
        _1913 = _1605;
        _1914 = _1605;
        _1915 = _1605;
        _1916 = _1605;
        _1917 = _1605;
        _1918 = _1605;
        _1919 = _1605;
        _1920 = _1605;
        _1921 = _1605;
        _1922 = _1605;
        _1923 = 0.0;
        _1924 = 0.0;
        _1925 = 0.0;
    }
    float _1935 = (cbModelParam._m0[1u].x * (_1923 - _1617)) + _1617;
    float _1936 = (cbModelParam._m0[1u].x * (_1924 - _1618)) + _1618;
    float _1937 = (cbModelParam._m0[1u].x * (_1925 - _1619)) + _1619;
    float _1958 = fma(_1937, cbSceneParam._m0[89u].z, fma(_1936, cbSceneParam._m0[89u].y, _1935 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1937, cbSceneParam._m0[90u].z, fma(_1936, cbSceneParam._m0[90u].y, _1935 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1937, cbSceneParam._m0[91u].z, fma(_1936, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1935));
    float _1979 = _1239 * 0.5;
    float _1980 = _1240 * 0.5;
    float _1981 = _1241 * 0.5;
    float _1982 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1913, _1916, _1919, _1922));
    float _1985 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1912, _1915, _1918, _1921));
    float _1988 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1911, _1914, _1917, _1920));
    float _2022;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1995 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1604, _1608, _1611, _1614));
        float _1999 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1606, _1609, _1612, _1615));
        float _2003 = dot(vec4(_1979, _1980, _1981, 1.0), vec4(_1607, _1610, _1613, _1616));
        float _2010 = dot(vec4(cbModelParam._m0[39u]), vec4(_1979, _1980, _1981, 1.0));
        _2022 = dot(vec3(isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2010) ? 0.0 : (isnan(0.0) ? _2010 : max(0.0, _2010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2022 = 1.0;
    }
    float _2033;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2024 = dot(vec4(cbModelParam._m0[40u]), vec4(_1979, _1980, _1981, 1.0));
        _2033 = dot(vec3(isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)), isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2024) ? 0.0 : (isnan(0.0) ? _2024 : max(0.0, _2024))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2033 = 1.0;
    }
    float _2037 = (_2033 * cbModelParam._m0[1u].x) + (_2022 * (1.0 - cbModelParam._m0[1u].x));
    float _2047 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1069);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2047 : min(cbModelParam._m0[25u].z, _2047));
    float _2128;
    float _2130;
    float _2132;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2095 = fma(_1303, cbModelParam._m0[13u].z, fma(_1299, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1295)) + cbModelParam._m0[13u].w;
        float _2099 = fma(_1303, cbModelParam._m0[14u].z, fma(_1299, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1295)) + cbModelParam._m0[14u].w;
        float _2103 = fma(_1303, cbModelParam._m0[15u].z, fma(_1299, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1295)) + cbModelParam._m0[15u].w;
        float _2106 = fma(_1241, cbModelParam._m0[13u].z, fma(_1240, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1239));
        float _2109 = fma(_1241, cbModelParam._m0[14u].z, fma(_1240, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1239));
        float _2112 = fma(_1241, cbModelParam._m0[15u].z, fma(_1240, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1239));
        float _2140;
        if (_2106 > 0.0)
        {
            _2140 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2140 = frontier_phi_14_12_ladder;
        }
        float _2342;
        if (_2109 > 0.0)
        {
            _2342 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2342 = frontier_phi_23_19_ladder;
        }
        float _2596;
        if (_2112 > 0.0)
        {
            _2596 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2596 = frontier_phi_35_30_ladder;
        }
        float _2598 = isnan(_2342) ? _2140 : (isnan(_2140) ? _2342 : min(_2140, _2342));
        float _2599 = isnan(_2596) ? _2598 : (isnan(_2598) ? _2596 : min(_2598, _2596));
        float _2603 = (_2599 * _2106) + _2095;
        float _2604 = (_2599 * _2109) + _2099;
        float _2605 = (_2599 * _2112) + _2103;
        float _2606 = _2599 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2606;
        float _2610 = _2606 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 > _2610) || ((_2604 < _2608) || ((_2603 < _2608) || (_2603 > _2610))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2605, cbModelParam._m0[9u].z, fma(_2604, cbModelParam._m0[9u].y, _2603 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2605, cbModelParam._m0[10u].z, fma(_2604, cbModelParam._m0[10u].y, _2603 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2605, cbModelParam._m0[11u].z, fma(_2604, cbModelParam._m0[11u].y, _2603 * cbModelParam._m0[11u].x))), _2048);
            frontier_phi_13_35_ladder = _2733.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2733.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2733.x * cbModelParam._m0[1u].y;
        }
        _2128 = frontier_phi_13_35_ladder_2;
        _2130 = frontier_phi_13_35_ladder_1;
        _2132 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2116 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1239, _1240, _1241), _2048);
        _2128 = _2116.x * cbModelParam._m0[1u].y;
        _2130 = _2116.y * cbModelParam._m0[1u].y;
        _2132 = _2116.z * cbModelParam._m0[1u].y;
    }
    float _2136 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1069);
    float _2137 = isnan(_2136) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2136 : min(cbModelParam._m0[25u].w, _2136));
    float _2226;
    float _2228;
    float _2230;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2190 = fma(_1303, cbModelParam._m0[21u].z, fma(_1299, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1295)) + cbModelParam._m0[21u].w;
        float _2194 = fma(_1303, cbModelParam._m0[22u].z, fma(_1299, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1295)) + cbModelParam._m0[22u].w;
        float _2198 = fma(_1303, cbModelParam._m0[23u].z, fma(_1299, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1295)) + cbModelParam._m0[23u].w;
        float _2201 = fma(_1241, cbModelParam._m0[21u].z, fma(_1240, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1239));
        float _2204 = fma(_1241, cbModelParam._m0[22u].z, fma(_1240, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1239));
        float _2207 = fma(_1241, cbModelParam._m0[23u].z, fma(_1240, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1239));
        float _2347;
        if (_2201 > 0.0)
        {
            _2347 = abs((1.0 - _2190) / _2201);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2190 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2347 = frontier_phi_25_21_ladder;
        }
        float _2623;
        if (_2204 > 0.0)
        {
            _2623 = abs((1.0 - _2194) / _2204);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2194 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2623 = frontier_phi_37_32_ladder;
        }
        float _2836;
        if (_2207 > 0.0)
        {
            _2836 = abs((1.0 - _2198) / _2207);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2198 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2836 = frontier_phi_46_43_ladder;
        }
        float _2838 = isnan(_2623) ? _2347 : (isnan(_2347) ? _2623 : min(_2347, _2623));
        float _2839 = isnan(_2836) ? _2838 : (isnan(_2838) ? _2836 : min(_2838, _2836));
        float _2843 = (_2839 * _2201) + _2190;
        float _2844 = (_2839 * _2204) + _2194;
        float _2845 = (_2839 * _2207) + _2198;
        float _2846 = _2839 * 9.9999997473787516355514526367188e-05;
        float _2847 = (-1.0) - _2846;
        float _2849 = _2846 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2845 > _2849) || ((_2845 < _2847) || ((_2844 > _2849) || ((_2844 < _2847) || ((_2843 < _2847) || (_2843 > _2849))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3044 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2845, cbModelParam._m0[17u].z, fma(_2844, cbModelParam._m0[17u].y, _2843 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2845, cbModelParam._m0[18u].z, fma(_2844, cbModelParam._m0[18u].y, _2843 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2845, cbModelParam._m0[19u].z, fma(_2844, cbModelParam._m0[19u].y, _2843 * cbModelParam._m0[19u].x))), _2137);
            frontier_phi_22_46_ladder = _3044.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3044.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3044.x * cbModelParam._m0[1u].z;
        }
        _2226 = frontier_phi_22_46_ladder_2;
        _2228 = frontier_phi_22_46_ladder_1;
        _2230 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2210 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1239, _1240, _1241), _2137);
        _2226 = _2210.x * cbModelParam._m0[1u].z;
        _2228 = _2210.y * cbModelParam._m0[1u].z;
        _2230 = _2210.z * cbModelParam._m0[1u].z;
    }
    float _2243 = (((_1266 * _1215) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2226 - _2128)) + _2128);
    float _2245 = (((_1266 * _1217) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2228 - _2130)) + _2130);
    float _2247 = (((_1266 * _1218) + _1267) * _1231) * ((cbModelParam._m0[1u].w * (_2230 - _2132)) + _2132);
    float _2250 = fma(_2247, cbSceneParam._m0[89u].z, fma(_2245, cbSceneParam._m0[89u].y, _2243 * cbSceneParam._m0[89u].x));
    float _2253 = fma(_2247, cbSceneParam._m0[90u].z, fma(_2245, cbSceneParam._m0[90u].y, _2243 * cbSceneParam._m0[90u].x));
    float _2256 = fma(_2247, cbSceneParam._m0[91u].z, fma(_2245, cbSceneParam._m0[91u].y, _2243 * cbSceneParam._m0[91u].x));
    uvec4 _2266 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2268 = _2266.x * 14u;
    uint _2269 = _2268 + 13u;
    float _2276 = _1231 + (-1.0);
    float _2281 = (cbLight._m0[_2269].x * _2276) + 1.0;
    float _2282 = (cbLight._m0[_2269].y * _2276) + 1.0;
    float _2283 = (cbLight._m0[_2269].z * _2276) + 1.0;
    float _2284 = (cbLight._m0[_2269].w * _2276) + 1.0;
    uint _2285 = _2268 + 5u;
    float _2291 = isnan(1.0) ? _2282 : (isnan(_2282) ? 1.0 : min(_2282, 1.0));
    uint _2295 = _2268 + 4u;
    float _2301 = isnan(1.0) ? _2281 : (isnan(_2281) ? 1.0 : min(_2281, 1.0));
    uint _2305 = _2268 | 1u;
    float _2316 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_1066, _1067, _1068));
    float _2319 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_1066, _1067, _1068));
    float _4503 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _4514 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2324 = (isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * 0.3183098733425140380859375;
    float _2326 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2333 = ((cbLight._m0[_2285].x * _2291) * _2326) + ((cbLight._m0[_2295].x * _2301) * _2324);
    float _2334 = ((_2291 * cbLight._m0[_2285].y) * _2326) + ((_2301 * cbLight._m0[_2295].y) * _2324);
    float _2335 = ((_2291 * cbLight._m0[_2285].z) * _2326) + ((_2301 * cbLight._m0[_2295].z) * _2324);
    uvec4 _2339 = floatBitsToUint(cbLight._m0[_2268 + 12u]);
    bool _2341 = _2339.x == 0u;
    float _2352;
    float _2354;
    float _2356;
    if (_2341)
    {
        _2352 = _2333;
        _2354 = _2334;
        _2356 = _2335;
    }
    else
    {
        uint _2360 = _2268 + 6u;
        float _2376 = (dot(vec3(cbLight._m0[_2268 + 2u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4525 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _2379 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2352 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2333;
        _2354 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2334;
        _2356 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2335;
    }
    bool _2359 = _2339.y == 0u;
    float _2397;
    float _2399;
    float _2401;
    if (_2359)
    {
        _2397 = _2352;
        _2399 = _2354;
        _2401 = _2356;
    }
    else
    {
        uint _2567 = _2268 + 7u;
        float _2583 = (dot(vec3(cbLight._m0[_2268 + 3u].xyz), vec3(_1066, _1067, _1068)) * 0.5) + 0.5;
        float _2584 = _2583 * _2583;
        float _4541 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2585 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2586 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2397 = (((cbLight._m0[_2567].x * 0.3183098733425140380859375) * _2585) * _2586) + _2352;
        _2399 = (((cbLight._m0[_2567].y * 0.3183098733425140380859375) * _2585) * _2586) + _2354;
        _2401 = (((cbLight._m0[_2567].z * 0.3183098733425140380859375) * _2585) * _2586) + _2356;
    }
    uint _2404 = _2268 + 8u;
    float _2417 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _1069) * 0.949999988079071044921875);
    float _2418 = _2417 * _2417;
    float _2419 = cbLight._m0[_2268].x + _1145;
    float _2420 = cbLight._m0[_2268].y + _1146;
    float _2421 = cbLight._m0[_2268].z + _1147;
    float _2425 = inversesqrt(dot(vec3(_2419, _2420, _2421), vec3(_2419, _2420, _2421)));
    float _2426 = _2425 * _2419;
    float _2427 = _2425 * _2420;
    float _2428 = _2425 * _2421;
    float _2429 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2268].xyz));
    float _4557 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
    float _2432 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
    float _4568 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _2433 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _2434 = dot(vec3(_1066, _1067, _1068), vec3(_2426, _2427, _2428));
    float _4579 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2426, _2427, _2428));
    float _4590 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2418 * _2418;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0)))) * 5.0);
    float _2455 = 0.959999978542327880859375 - _1212;
    float _2457 = 0.959999978542327880859375 - _1213;
    float _2458 = 0.959999978542327880859375 - _1214;
    float _2465 = 1.0 - _2418;
    float _2476 = (0.5 / (((_2433 * ((_2432 * _2465) + _2418)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2465) + _2418) * _2432))) * _2432;
    float _4601 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2478 = (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    uint _2489 = _2268 + 9u;
    float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _1069) * 0.949999988079071044921875);
    float _2501 = _2500 * _2500;
    float _2502 = cbLight._m0[_2305].x + _1145;
    float _2503 = cbLight._m0[_2305].y + _1146;
    float _2504 = cbLight._m0[_2305].z + _1147;
    float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
    float _2509 = _2508 * _2502;
    float _2510 = _2508 * _2503;
    float _2511 = _2508 * _2504;
    float _2512 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2305].xyz));
    float _4612 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2515 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2516 = dot(vec3(_1066, _1067, _1068), vec3(_2509, _2510, _2511));
    float _4623 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2520 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2509, _2510, _2511));
    float _4634 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = _2501 * _2501;
    float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
    float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2542 = 1.0 - _2501;
    float _2552 = (0.5 / (((_2433 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2542) + _2501) * _2515))) * _2515;
    float _4645 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2554 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
    float _2564 = (((((_2535 * _2455) + _1215) * cbLight._m0[_2489].x) * _2554) * _2291) + (((((_2454 * _2455) + _1215) * cbLight._m0[_2404].x) * _2478) * _2301);
    float _2565 = (((((_2535 * _2457) + _1217) * cbLight._m0[_2489].y) * _2554) * _2291) + (((((_2454 * _2457) + _1217) * cbLight._m0[_2404].y) * _2478) * _2301);
    float _2566 = (((((_2535 * _2458) + _1218) * cbLight._m0[_2489].z) * _2554) * _2291) + (((((_2454 * _2458) + _1218) * cbLight._m0[_2404].z) * _2478) * _2301);
    float _2628;
    float _2630;
    float _2632;
    if (_2341)
    {
        _2628 = _2564;
        _2630 = _2565;
        _2632 = _2566;
    }
    else
    {
        uint _2634 = _2268 + 2u;
        uint _2638 = _2268 + 10u;
        float _2652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2634].w)) * _1069) * 0.949999988079071044921875);
        float _2653 = _2652 * _2652;
        float _2654 = cbLight._m0[_2634].x + _1145;
        float _2655 = cbLight._m0[_2634].y + _1146;
        float _2656 = cbLight._m0[_2634].z + _1147;
        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
        float _2661 = _2660 * _2654;
        float _2662 = _2660 * _2655;
        float _2663 = _2660 * _2656;
        float _2664 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2634].xyz));
        float _4656 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2667 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _2668 = dot(vec3(_1066, _1067, _1068), vec3(_2661, _2662, _2663));
        float _4667 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
        float _2671 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2672 = dot(vec3(cbLight._m0[_2634].xyz), vec3(_2661, _2662, _2663));
        float _4678 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2676 = _2653 * _2653;
        float _2680 = ((_2671 * _2671) * (_2676 + (-1.0))) + 1.0;
        float _2687 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
        float _2694 = 1.0 - _2653;
        float _2704 = (0.5 / (((_2433 * ((_2667 * _2694) + _2653)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2694) + _2653) * _2667))) * _2667;
        float _4689 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2706 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2676 / ((_2680 * _2680) * 3.141590118408203125));
        float _2707 = isnan(1.0) ? _2283 : (isnan(_2283) ? 1.0 : min(_2283, 1.0));
        _2628 = (((((_2687 * _2455) + _1215) * cbLight._m0[_2638].x) * _2706) * _2707) + _2564;
        _2630 = (((((_2687 * _2457) + _1217) * cbLight._m0[_2638].y) * _2706) * _2707) + _2565;
        _2632 = (((((_2687 * _2458) + _1218) * cbLight._m0[_2638].z) * _2706) * _2707) + _2566;
    }
    float _2742;
    float _2744;
    float _2746;
    if (_2359)
    {
        _2742 = _2628;
        _2744 = _2630;
        _2746 = _2632;
    }
    else
    {
        uint _2753 = _2268 + 3u;
        uint _2757 = _2268 + 11u;
        float _2771 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2753].w)) * _1069) * 0.949999988079071044921875);
        float _2772 = _2771 * _2771;
        float _2773 = cbLight._m0[_2753].x + _1145;
        float _2774 = cbLight._m0[_2753].y + _1146;
        float _2775 = cbLight._m0[_2753].z + _1147;
        float _2779 = inversesqrt(dot(vec3(_2773, _2774, _2775), vec3(_2773, _2774, _2775)));
        float _2780 = _2779 * _2773;
        float _2781 = _2779 * _2774;
        float _2782 = _2779 * _2775;
        float _2783 = dot(vec3(_1066, _1067, _1068), vec3(cbLight._m0[_2753].xyz));
        float _4705 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
        float _2786 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2787 = dot(vec3(_1066, _1067, _1068), vec3(_2780, _2781, _2782));
        float _4716 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2791 = dot(vec3(cbLight._m0[_2753].xyz), vec3(_2780, _2781, _2782));
        float _4727 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2795 = _2772 * _2772;
        float _2799 = ((_2790 * _2790) * (_2795 + (-1.0))) + 1.0;
        float _2806 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2813 = 1.0 - _2772;
        float _2823 = (0.5 / (((_2433 * ((_2786 * _2813) + _2772)) + 9.9999999392252902907785028219223e-09) + (((_2433 * _2813) + _2772) * _2786))) * _2786;
        float _4738 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2825 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2795 / ((_2799 * _2799) * 3.141590118408203125));
        float _2826 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
        _2742 = (((((_2806 * _2455) + _1215) * cbLight._m0[_2757].x) * _2825) * _2826) + _2628;
        _2744 = (((((_2806 * _2457) + _1217) * cbLight._m0[_2757].y) * _2825) * _2826) + _2630;
        _2746 = (((((_2806 * _2458) + _1218) * cbLight._m0[_2757].z) * _2825) * _2826) + _2632;
    }
    float _2961;
    float _2963;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_2266.y == 0u)
    {
        float _2901 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2902 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2901;
        float _2903 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2901;
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2901;
        uvec4 _2916 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2917 = _2916.x;
        uint _2928 = uint((float(_2916.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1154) / _2917))) + floor(float(uint(cbSceneParam._m0[85u].x * _1153) / _2917)));
        float _2938 = (log2(_2904 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2939 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        uint _2942 = uint(isnan(14.0) ? _2939 : (isnan(_2939) ? 14.0 : min(_2939, 14.0)));
        uvec4 _2947 = texelFetch(g_lightClusterGridBuffer, int(((_2942 << 2u) + (_2928 << 6u)) >> 2u));
        uint _2948 = _2947.x;
        uint _2949 = _2916.z;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        if (((((1u << ((_2949 >> 4u) & 15u)) + 4294967295u) & _2948) == 0u) || ((_2949 & 240u) == 0u))
        {
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
            _3055 = 0.0;
            _3057 = 0.0;
            _3059 = 0.0;
        }
        else
        {
            float _3050;
            float _3052;
            float _3054;
            float _3056;
            float _3058;
            float _3060;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3209)
                {
                    frontier_phi_61_pred = _3193;
                    frontier_phi_61_pred_1 = _3198;
                    frontier_phi_61_pred_2 = _3197;
                    frontier_phi_61_pred_3 = _3196;
                    frontier_phi_61_pred_4 = _3195;
                    frontier_phi_61_pred_5 = _3194;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3208;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3199 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _2902;
                        float _3384 = _3343.y - _2903;
                        float _3385 = _3343.z - _2904;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_1172, _1175, _1178), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4764 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _2902;
                        float _3419 = (-0.0) - _2903;
                        float _3420 = (-0.0) - _2904;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3435 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3436 = 1.0 - _1247;
                        float _3443 = sqrt(1.0 - ((1.0 - (_3436 * _3436)) * (1.0 - (_3435 * _3435))));
                        float _3444 = _3443 * _3443;
                        float _3445 = _3444 * _3444;
                        float _3446 = _3425 + _3390;
                        float _3447 = _3426 + _3391;
                        float _3448 = _3427 + _3392;
                        float _3452 = inversesqrt(dot(vec3(_3446, _3447, _3448), vec3(_3446, _3447, _3448)));
                        float _3456 = dot(vec3(_1172, _1175, _1178), vec3(_3425, _3426, _3427));
                        float _4780 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3459 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3460 = dot(vec3(_1172, _1175, _1178), vec3(_3452 * _3446, _3452 * _3447, _3452 * _3448));
                        float _4791 = isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0));
                        float _3463 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3467 = ((_3463 * _3463) * (_3445 + (-1.0))) + 1.0;
                        float _3468 = _3403 * _3444;
                        float _3469 = _3468 * _3468;
                        float _3472 = ((1.0 - _3469) * _3393) + _3469;
                        float _4802 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                        float _3473 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3474 = 1.0 - _3444;
                        float _3484 = (0.5 / (((_3473 * ((_3459 * _3474) + _3444)) + 9.9999999392252902907785028219223e-09) + (((_3473 * _3474) + _3444) * _3459))) * _3473;
                        float _4813 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3495 = (((_3445 * 3.1415927410125732421875) * (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) / ((_3467 * _3467) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3252 = (_3414 * _3362.x) + _3320;
                        _3253 = (_3414 * _3362.y) + _3321;
                        _3254 = (_3414 * _3362.z) + _3322;
                        _3249 = (_3495 * _3379.x) + _3317;
                        _3250 = (_3495 * _3379.y) + _3318;
                        _3251 = (_3495 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_61_pred = _3249;
                    frontier_phi_61_pred_1 = _3254;
                    frontier_phi_61_pred_2 = _3253;
                    frontier_phi_61_pred_3 = _3252;
                    frontier_phi_61_pred_4 = _3251;
                    frontier_phi_61_pred_5 = _3250;
                }
                _3050 = frontier_phi_61_pred;
                _3060 = frontier_phi_61_pred_1;
                _3058 = frontier_phi_61_pred_2;
                _3056 = frontier_phi_61_pred_3;
                _3054 = frontier_phi_61_pred_4;
                _3052 = frontier_phi_61_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3050;
                    _3194 = _3052;
                    _3195 = _3054;
                    _3196 = _3056;
                    _3197 = _3058;
                    _3198 = _3060;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
            _3055 = _3056;
            _3057 = _3058;
            _3059 = _3060;
        }
        uvec4 _3063 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3064 = _3063.z;
        uint _3066 = (_3064 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3066) & _2948) == 0u)
        {
            _3161 = _3049;
            _3163 = _3051;
            _3165 = _3053;
            _3167 = _3055;
            _3169 = _3057;
            _3171 = _3059;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2902, _2903, _2904), vec3(_2902, _2903, _2904)));
            float _3187 = _3186 * _2902;
            float _3188 = _3186 * _2903;
            float _3189 = _3186 * _2904;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3066 < ((_3064 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3300 = _3049;
                float _3301 = _3051;
                float _3302 = _3053;
                float _3303 = _3055;
                float _3304 = _3057;
                float _3305 = _3059;
                uint _3306 = _3066;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2942 << 5u) + (_2928 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3316)
                    {
                        frontier_phi_67_pred = _3303;
                        frontier_phi_67_pred_1 = _3304;
                        frontier_phi_67_pred_2 = _3305;
                        frontier_phi_67_pred_3 = _3302;
                        frontier_phi_67_pred_4 = _3301;
                        frontier_phi_67_pred_5 = _3300;
                    }
                    else
                    {
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3513 = _3300;
                        float _3514 = _3301;
                        float _3515 = _3302;
                        float _3516 = _3303;
                        float _3517 = _3304;
                        float _3518 = _3305;
                        uint _3519 = _3315;
                        uint _3520;
                        vec4 _3545;
                        float _3546;
                        vec4 _3561;
                        vec3 _3573;
                        vec4 _3588;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3530 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3519));
                            _3520 = (_3519 + 4294967295u) & _3519;
                            uint _3532 = _3530 * 40u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            _3546 = _3545.w;
                            uint _3548 = (_3530 * 40u) + 4u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3530 * 40u) + 8u;
                            _3573 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x));
                            uint _3575 = (_3530 * 40u) + 16u;
                            _3588 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3575)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3575 + 3u)).x));
                            uint _3590 = (_3530 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3530 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3530 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2904, _3637.z, fma(_2903, _3637.y, _3637.x * _2902)) + _3637.w;
                            _3650 = !((fma(_2904, _3618.z, fma(_2903, _3618.y, _3618.x * _2902)) + _3618.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3545.x - _2902;
                                float _3678 = _3545.y - _2903;
                                float _3679 = _3545.z - _2904;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3546 * _3546));
                                float _4824 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3695 = sqrt(_3680) * _3561.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_1172, _1175, _1178))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2904, _3588.z, fma(_2903, _3588.y, _3588.x * _2902)) + _3588.w) / _3649;
                                float _3709 = (fma(_2904, _3603.z, fma(_2903, _3603.y, _3603.x * _2902)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4840 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _1247;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3187;
                                float _3739 = _3685 - _3188;
                                float _3740 = _3686 - _3189;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_1172, _1175, _1178), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4851 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3752 = dot(vec3(_1172, _1175, _1178), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4862 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_1172, _1175, _1178), vec3(_3684, _3685, _3686))) + _3761;
                                float _4873 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4884 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3789 * _3573.x;
                                frontier_phi_73_pred_1 = _3789 * _3573.y;
                                frontier_phi_73_pred_2 = _3715 * _3561.z;
                                frontier_phi_73_pred_3 = _3715 * _3561.y;
                                frontier_phi_73_pred_4 = _3715 * _3561.x;
                                frontier_phi_73_pred_5 = _3789 * _3573.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3793 = frontier_phi_73_pred;
                            _3794 = frontier_phi_73_pred_1;
                            _3798 = frontier_phi_73_pred_2;
                            _3797 = frontier_phi_73_pred_3;
                            _3796 = frontier_phi_73_pred_4;
                            _3795 = frontier_phi_73_pred_5;
                            _3503 = _3796 + _3516;
                            _3504 = _3797 + _3517;
                            _3505 = _3798 + _3518;
                            _3500 = _3793 + _3513;
                            _3501 = _3794 + _3514;
                            _3502 = _3795 + _3515;
                            if (_3520 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3520;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3503;
                        frontier_phi_67_pred_1 = _3504;
                        frontier_phi_67_pred_2 = _3505;
                        frontier_phi_67_pred_3 = _3502;
                        frontier_phi_67_pred_4 = _3501;
                        frontier_phi_67_pred_5 = _3500;
                    }
                    _3168 = frontier_phi_67_pred;
                    _3170 = frontier_phi_67_pred_1;
                    _3172 = frontier_phi_67_pred_2;
                    _3166 = frontier_phi_67_pred_3;
                    _3164 = frontier_phi_67_pred_4;
                    _3162 = frontier_phi_67_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3162;
                        _3301 = _3164;
                        _3302 = _3166;
                        _3303 = _3168;
                        _3304 = _3170;
                        _3305 = _3172;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3170;
                frontier_phi_55_56_ladder_1 = _3172;
                frontier_phi_55_56_ladder_2 = _3168;
                frontier_phi_55_56_ladder_3 = _3166;
                frontier_phi_55_56_ladder_4 = _3164;
                frontier_phi_55_56_ladder_5 = _3162;
            }
            else
            {
                frontier_phi_55_56_ladder = _3057;
                frontier_phi_55_56_ladder_1 = _3059;
                frontier_phi_55_56_ladder_2 = _3055;
                frontier_phi_55_56_ladder_3 = _3053;
                frontier_phi_55_56_ladder_4 = _3051;
                frontier_phi_55_56_ladder_5 = _3049;
            }
            _3161 = frontier_phi_55_56_ladder_5;
            _3163 = frontier_phi_55_56_ladder_4;
            _3165 = frontier_phi_55_56_ladder_3;
            _3167 = frontier_phi_55_56_ladder_2;
            _3169 = frontier_phi_55_56_ladder;
            _3171 = frontier_phi_55_56_ladder_1;
        }
        float _3176 = isnan(1.0) ? _1231 : (isnan(_1231) ? 1.0 : min(_1231, 1.0));
        _2961 = (_3176 * _3167) + _2397;
        _2963 = (_3176 * _3169) + _2399;
        _2965 = (_3176 * _3171) + _2401;
        _2967 = ((_3161 * _1215) * _3176) + _2742;
        _2969 = ((_3163 * _1217) * _3176) + _2744;
        _2971 = ((_3165 * _1218) * _3176) + _2746;
    }
    else
    {
        _2961 = _2397;
        _2963 = _2399;
        _2965 = _2401;
        _2967 = _2742;
        _2969 = _2744;
        _2971 = _2746;
    }
    float _4900 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _4911 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
    float _4922 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    uint _2991 = _267 + 6u;
    float _2999 = _1153 / cbSceneParam._m0[86u].x;
    float _3000 = _1154 / cbSceneParam._m0[86u].y;
    vec4 _3014 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, (log2((isnan(cbSceneParam._m0[77u].w) ? _1088 : (isnan(_1088) ? cbSceneParam._m0[77u].w : min(_1088, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3016 = _3014.x;
    float _3017 = _3014.y;
    float _3018 = _3014.z;
    float _3019 = _3014.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_1088 > cbSceneParam._m0[78u].w)
    {
        float _3074 = isnan(_1088) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1088 : min(cbSceneParam._m0[80u].w, _1088));
        float _3075 = _3074 / _1088;
        float _3086 = _3075 * _1138;
        float _3087 = _1139 * _3075;
        float _3088 = (-0.0) - _3087;
        float _3089 = _3075 * _1140;
        float _3091 = (cbSceneParam._m0[77u].w * _3088) / _3074;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3087;
        float _3099 = sqrt(((_3086 * _3086) + (_3087 * _3087)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3074)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3262;
        if (abs((_3088 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3262 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3224 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3262 = ((abs(_3099 / _3088) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3109 * _3233) - exp2(_3109 * _3234)) * _3222))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2999, _3000, 1.0), 0.0);
        float _3273 = exp2((_3262 * (-1.44269502162933349609375)) * (1.0 - _3264.w));
        float _3274 = log2(_3273);
        float _3290 = log2(_3019);
        _3111 = (exp2(_3290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].x)) * _3264.x) / cbSceneParam._m0[78u].x)) + _3016;
        _3113 = (exp2(_3290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].y)) * _3264.y) / cbSceneParam._m0[78u].y)) + _3017;
        _3115 = (exp2(_3290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].z)) * _3264.z) / cbSceneParam._m0[78u].z)) + _3018;
        _3117 = _3273 * _3019;
    }
    else
    {
        _3111 = _3016;
        _3113 = _3017;
        _3115 = _3018;
        _3117 = _3019;
    }
    float _3129 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3130 = _3129 == 3.0;
    float _3131 = log2(_3117);
    float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2961 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1231))) + ((_2967 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2037)) * cbPerFrame._m0[3u].x));
    float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2963 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1231))) + ((_2969 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2037)) * cbPerFrame._m0[3u].x));
    float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2965 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1231))) + ((_2971 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2037)) * cbPerFrame._m0[3u].x));
    float _3149 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3149 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.y = _3149 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.z = _3149 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.w = cbInstanceData._m0[_2991].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2991].w;
}


