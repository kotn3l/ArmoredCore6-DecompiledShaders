#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3949;
float _3950;
float _3951;
float _3952;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3961 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = ((_456.z - _477) * _419) + _477;
    float _489 = ((((_456.x - _475) * _419) + _475) * 2.0) + (-1.0);
    float _491 = ((((_456.y - _476) * _419) + _476) * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3972 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _525 = (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _526 = (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _529 = fma(_497, _232, fma(_526, _239, _525 * _225));
    float _532 = fma(_497, _233, fma(_526, _240, _525 * _226));
    float _535 = fma(_497, _234, fma(_526, _241, _525 * _227));
    float _539 = inversesqrt(dot(vec3(_529, _532, _535), vec3(_529, _532, _535)));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _568 = _566.x;
    float _569 = 1.0 - _568;
    float _578 = (cbMtdParam._m0[19u].x + dot(vec4(_539 * _529, _539 * _532, _539 * _535, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_568 - _569) * cbMtdParam._m0[24u].z) + _569) * cbMtdParam._m0[21u].z);
    float _3983 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _579 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _586 = (_579 * (cbMtdParam._m0[17u].x - _432)) + _432;
    float _587 = (_579 * (cbMtdParam._m0[17u].y - _435)) + _435;
    float _588 = (_579 * (cbMtdParam._m0[17u].z - _438)) + _438;
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _616 = _614.x;
    float _633 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _616) * _419) + _616;
    float _637 = ((_600.x - _633) * cbMtdParam._m0[19u].z) + _633;
    float _639 = _637 - (_637 * _579);
    float _643 = (cbMtdParam._m0[19u].w * (_513.z - _486)) + _486;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _663 = (_656.x * 2.0) + (-1.0);
    float _664 = (_656.y * 2.0) + (-1.0);
    float _665 = dot(vec2(_663, _664), vec2(_663, _664));
    float _3994 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _673 = ((_656.z - _643) * _579) + _643;
    float _683 = ((sqrt(1.0 - (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) - _497) * _579) + _497;
    float _686 = (((_663 - _525) * _579) + _525) + (cbMtdParam._m0[21u].x * _525);
    float _687 = (((_664 - _526) * _579) + _526) + (cbMtdParam._m0[21u].x * _526);
    float _689 = cbMtdParam._m0[22u].x + _513.w;
    float _692 = fma(_683, _232, fma(_687, _239, _686 * _225));
    float _695 = fma(_683, _233, fma(_687, _240, _686 * _226));
    float _698 = fma(_683, _234, fma(_687, _241, _686 * _227));
    float _702 = inversesqrt(dot(vec3(_692, _695, _698), vec3(_692, _695, _698)));
    float _703 = _702 * _692;
    float _704 = _702 * _695;
    float _705 = _702 * _698;
    float _4005 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _706 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _4016 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4027 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _4038 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _4049 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _4060 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _711 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _725 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _776 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _766);
    float _777 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _766);
    float _778 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _766);
    float _782 = inversesqrt(dot(vec3(_776, _777, _778), vec3(_776, _777, _778)));
    float _783 = _776 * _782;
    float _784 = _777 * _782;
    float _785 = _778 * _782;
    vec4 _790 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _792 = _790.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _964 = sqrt(((_776 * _776) + (_777 * _777)) + (_778 * _778));
        float _970 = (cbMatDynParam._m0[5u].x * _964) + cbMatDynParam._m0[5u].y;
        float _4071 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _975 = (cbMatDynParam._m0[5u].z * _964) + cbMatDynParam._m0[5u].w;
        float _4082 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) - _971)) + _971) < ((_792 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _803 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _804 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _822 = fma(_705, cbSceneParam._m0[5u].z, fma(_704, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _703));
    float _825 = fma(_705, cbSceneParam._m0[6u].z, fma(_704, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _703));
    float _828 = fma(_705, cbSceneParam._m0[7u].z, fma(_704, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _703));
    uint _841 = _244 + 9u;
    uint _842 = _841 + uint(cbMatDynParam._m0[0u].w);
    float _848 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_842].x;
    float _849 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_842].y;
    float _850 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_842].z;
    float _4093 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _851 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _854 = 1.0 - _711;
    float _855 = _851 * _854;
    float _856 = _852 * _854;
    float _857 = _853 * _854;
    float _862 = (_851 + (-0.039999999105930328369140625)) * _711;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _711;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _711;
    float _865 = _862 + 0.039999999105930328369140625;
    float _867 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    vec4 _877 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _803, cbSceneParam._m0[86u].y * _804));
    float _881 = ((isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * TEXCOORD_5.w) * _877.x;
    float _882 = dot(vec3(_703, _704, _705), vec3(_783, _784, _785));
    float _885 = _882 * 2.0;
    float _889 = (_885 * _703) - _783;
    float _890 = (_885 * _704) - _784;
    float _891 = (_885 * _705) - _785;
    float _895 = abs(dot(vec3(_783, _784, _785), vec3(_703, _704, _705)));
    float _4126 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _897 = sqrt(_706);
    float _910 = exp2((_897 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_897 * 3.0));
    float _916 = (1.0 - _910) * ((_897 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _917 = _910 * _897;
    float _945 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_953, cbModelParam._m0[26u].z, fma(_949, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _945));
        float _1012 = fma(_953, cbModelParam._m0[27u].z, fma(_949, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _945));
        float _1016 = fma(_953, cbModelParam._m0[28u].z, fma(_949, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _945));
        float _1041 = _945 + _703;
        float _1042 = _949 + _704;
        float _1043 = _953 + _705;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_703, _704, _705), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4174 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_703, _704, _705), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4207 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_703, _704, _705), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4240 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_953, cbModelParam._m0[30u].z, fma(_949, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _945));
        float _1330 = fma(_953, cbModelParam._m0[31u].z, fma(_949, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _945));
        float _1334 = fma(_953, cbModelParam._m0[32u].z, fma(_949, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _945));
        float _1357 = _945 + _703;
        float _1358 = _949 + _704;
        float _1359 = _953 + _705;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_703, _704, _705), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4303 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_703, _704, _705), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4336 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_703, _704, _705), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4369 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = _1284;
        _1606 = _1284;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1297)) + _1297;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1298)) + _1298;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _889 * 0.5;
    float _1664 = _890 * 0.5;
    float _1665 = _891 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _706);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1813;
    float _1815;
    float _1817;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1780 = fma(_953, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _945)) + cbModelParam._m0[13u].w;
        float _1784 = fma(_953, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _945)) + cbModelParam._m0[14u].w;
        float _1788 = fma(_953, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _945)) + cbModelParam._m0[15u].w;
        float _1791 = fma(_891, cbModelParam._m0[13u].z, fma(_890, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _889));
        float _1794 = fma(_891, cbModelParam._m0[14u].z, fma(_890, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _889));
        float _1797 = fma(_891, cbModelParam._m0[15u].z, fma(_890, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _889));
        float _1825;
        if (_1791 > 0.0)
        {
            _1825 = abs((1.0 - _1780) / _1791);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1780 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1825 = frontier_phi_17_15_ladder;
        }
        float _1997;
        if (_1794 > 0.0)
        {
            _1997 = abs((1.0 - _1784) / _1794);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1794 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1784 + 1.0) / _1794);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1997 = frontier_phi_26_22_ladder;
        }
        float _2292;
        if (_1797 > 0.0)
        {
            _2292 = abs((1.0 - _1788) / _1797);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1788 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2292 = frontier_phi_38_33_ladder;
        }
        float _2294 = isnan(_1997) ? _1825 : (isnan(_1825) ? _1997 : min(_1825, _1997));
        float _2295 = isnan(_2292) ? _2294 : (isnan(_2294) ? _2292 : min(_2294, _2292));
        float _2299 = (_2295 * _1791) + _1780;
        float _2300 = (_2295 * _1794) + _1784;
        float _2301 = (_2295 * _1797) + _1788;
        float _2302 = _2295 * 9.9999997473787516355514526367188e-05;
        float _2304 = (-1.0) - _2302;
        float _2306 = _2302 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2301 > _2306) || ((_2301 < _2304) || ((_2300 > _2306) || ((_2300 < _2304) || ((_2299 < _2304) || (_2299 > _2306))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2301, cbModelParam._m0[9u].z, fma(_2300, cbModelParam._m0[9u].y, _2299 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2301, cbModelParam._m0[10u].z, fma(_2300, cbModelParam._m0[10u].y, _2299 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2301, cbModelParam._m0[11u].z, fma(_2300, cbModelParam._m0[11u].y, _2299 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_16_38_ladder = _2446.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2446.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2446.x * cbModelParam._m0[1u].y;
        }
        _1813 = frontier_phi_16_38_ladder_2;
        _1815 = frontier_phi_16_38_ladder_1;
        _1817 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1801 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_889, _890, _891), _1732);
        _1813 = _1801.x * cbModelParam._m0[1u].y;
        _1815 = _1801.y * cbModelParam._m0[1u].y;
        _1817 = _1801.z * cbModelParam._m0[1u].y;
    }
    float _1821 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _706);
    float _1822 = isnan(_1821) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1821 : min(cbModelParam._m0[25u].w, _1821));
    float _1912;
    float _1914;
    float _1916;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1876 = fma(_953, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _945)) + cbModelParam._m0[21u].w;
        float _1880 = fma(_953, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _945)) + cbModelParam._m0[22u].w;
        float _1884 = fma(_953, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _945)) + cbModelParam._m0[23u].w;
        float _1887 = fma(_891, cbModelParam._m0[21u].z, fma(_890, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _889));
        float _1890 = fma(_891, cbModelParam._m0[22u].z, fma(_890, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _889));
        float _1893 = fma(_891, cbModelParam._m0[23u].z, fma(_890, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _889));
        float _2002;
        if (_1887 > 0.0)
        {
            _2002 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2002 = frontier_phi_28_24_ladder;
        }
        float _2319;
        if (_1890 > 0.0)
        {
            _2319 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2319 = frontier_phi_40_35_ladder;
        }
        float _2657;
        if (_1893 > 0.0)
        {
            _2657 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2657 = frontier_phi_50_47_ladder;
        }
        float _2659 = isnan(_2319) ? _2002 : (isnan(_2002) ? _2319 : min(_2002, _2319));
        float _2660 = isnan(_2657) ? _2659 : (isnan(_2659) ? _2657 : min(_2659, _2657));
        float _2664 = (_2660 * _1887) + _1876;
        float _2665 = (_2660 * _1890) + _1880;
        float _2666 = (_2660 * _1893) + _1884;
        float _2667 = _2660 * 9.9999997473787516355514526367188e-05;
        float _2668 = (-1.0) - _2667;
        float _2670 = _2667 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2666 > _2670) || ((_2666 < _2668) || ((_2665 > _2670) || ((_2665 < _2668) || ((_2664 < _2668) || (_2664 > _2670))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2666, cbModelParam._m0[17u].z, fma(_2665, cbModelParam._m0[17u].y, _2664 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2666, cbModelParam._m0[18u].z, fma(_2665, cbModelParam._m0[18u].y, _2664 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2666, cbModelParam._m0[19u].z, fma(_2665, cbModelParam._m0[19u].y, _2664 * cbModelParam._m0[19u].x))), _1822);
            frontier_phi_25_50_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1912 = frontier_phi_25_50_ladder_2;
        _1914 = frontier_phi_25_50_ladder_1;
        _1916 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_889, _890, _891), _1822);
        _1912 = _1896.x * cbModelParam._m0[1u].z;
        _1914 = _1896.y * cbModelParam._m0[1u].z;
        _1916 = _1896.z * cbModelParam._m0[1u].z;
    }
    float _1929 = (((_916 * _865) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1912 - _1813)) + _1813);
    float _1931 = (((_916 * _867) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1914 - _1815)) + _1815);
    float _1933 = (((_916 * _868) + _917) * _881) * ((cbModelParam._m0[1u].w * (_1916 - _1817)) + _1817);
    float _1936 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1939 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1942 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1929 * cbSceneParam._m0[91u].x));
    float _1976 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1980 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1984 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1988 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1989 = _1976 / _1988;
    float _1990 = _1980 / _1988;
    float _1991 = _1984 / _1988;
    float _2138;
    float _2139;
    float _2140;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2018 = ((uint(_1991 > cbSceneParam._m0[59u].y) + uint(_1991 > cbSceneParam._m0[59u].x)) + uint(_1991 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2019 = _2018 + 43u;
        uint _2027 = _2018 + 44u;
        uint _2035 = _2018 + 45u;
        uint _2043 = _2018 + 46u;
        float _2054 = fma(_1988, cbSceneParam._m0[_2019].w, fma(_1984, cbSceneParam._m0[_2019].z, fma(_1980, cbSceneParam._m0[_2019].y, _1976 * cbSceneParam._m0[_2019].x)));
        float _2058 = fma(_1988, cbSceneParam._m0[_2027].w, fma(_1984, cbSceneParam._m0[_2027].z, fma(_1980, cbSceneParam._m0[_2027].y, _1976 * cbSceneParam._m0[_2027].x)));
        float _2066 = fma(_1988, cbSceneParam._m0[_2043].w, fma(_1984, cbSceneParam._m0[_2043].z, fma(_1980, cbSceneParam._m0[_2043].y, _1976 * cbSceneParam._m0[_2043].x)));
        float _2071 = cbSceneParam._m0[33u].z * _2066;
        float _2073 = cbSceneParam._m0[33u].w * _2066;
        float _2076 = fma(_1988, cbSceneParam._m0[_2035].w, fma(_1984, cbSceneParam._m0[_2035].z, fma(_1980, cbSceneParam._m0[_2035].y, _1976 * cbSceneParam._m0[_2035].x))) / _2066;
        float _2124 = (cbSceneParam._m0[33u].x - sqrt(((_1990 * _1990) + (_1989 * _1989)) + (_1991 * _1991))) * cbSceneParam._m0[33u].y;
        float _4495 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2131 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2071 + _2054) / _2066, (_2073 + _2058) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2054) / _2066, (_2058 - _2071) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 - _2071) / _2066, (_2058 - _2073) / _2066), _2076), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2054 - _2073) / _2066, (_2071 + _2058) / _2066), _2076), 0.0)).x), vec4(0.25)));
        _2138 = 1.0 - (_2131 * cbSceneParam._m0[34u].x);
        _2139 = 1.0 - (_2131 * cbSceneParam._m0[34u].y);
        _2140 = 1.0 - (_2131 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2138 = 1.0;
        _2139 = 1.0;
        _2140 = 1.0;
    }
    float _2204;
    float _2206;
    float _2208;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2192 = fma(_1988, cbSceneParam._m0[63u].w, fma(_1984, cbSceneParam._m0[63u].z, fma(_1980, cbSceneParam._m0[63u].y, _1976 * cbSceneParam._m0[63u].x)));
        float _2193 = fma(_1988, cbSceneParam._m0[60u].w, fma(_1984, cbSceneParam._m0[60u].z, fma(_1980, cbSceneParam._m0[60u].y, _1976 * cbSceneParam._m0[60u].x))) / _2192;
        float _2194 = fma(_1988, cbSceneParam._m0[61u].w, fma(_1984, cbSceneParam._m0[61u].z, fma(_1980, cbSceneParam._m0[61u].y, _1976 * cbSceneParam._m0[61u].x))) / _2192;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2193 >= cbSceneParam._m0[64u].x) && (_2194 >= cbSceneParam._m0[64u].y)) && (_2193 <= cbSceneParam._m0[64u].z)) && (_2194 <= cbSceneParam._m0[64u].w))
        {
            float _2332 = fma(_1988, cbSceneParam._m0[62u].w, fma(_1984, cbSceneParam._m0[62u].z, fma(_1980, cbSceneParam._m0[62u].y, _1976 * cbSceneParam._m0[62u].x))) / _2192;
            float _2336 = isnan(cbSceneParam._m0[41u].w) ? _2332 : (isnan(_2332) ? cbSceneParam._m0[41u].w : max(_2332, cbSceneParam._m0[41u].w));
            float _2379 = (cbSceneParam._m0[33u].x - sqrt(((_1990 * _1990) + (_1989 * _1989)) + (_1991 * _1991))) * cbSceneParam._m0[33u].y;
            float _4511 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
            float _2386 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2193, cbSceneParam._m0[33u].w + _2194), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2193, _2194 - cbSceneParam._m0[33u].z), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2193 - cbSceneParam._m0[33u].z, _2194 - cbSceneParam._m0[33u].w), _2336), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2193 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2194), _2336), 0.0)).x), vec4(0.25)));
            float _2390 = 1.0 - (_2386 * cbSceneParam._m0[34u].x);
            float _2391 = 1.0 - (_2386 * cbSceneParam._m0[34u].y);
            float _2392 = 1.0 - (_2386 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
            frontier_phi_37_36_ladder_1 = isnan(_2391) ? _2139 : (isnan(_2139) ? _2391 : min(_2139, _2391));
            frontier_phi_37_36_ladder_2 = isnan(_2390) ? _2138 : (isnan(_2138) ? _2390 : min(_2138, _2390));
        }
        else
        {
            frontier_phi_37_36_ladder = _2140;
            frontier_phi_37_36_ladder_1 = _2139;
            frontier_phi_37_36_ladder_2 = _2138;
        }
        _2204 = frontier_phi_37_36_ladder_2;
        _2206 = frontier_phi_37_36_ladder_1;
        _2208 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2204 = _2138;
        _2206 = _2139;
        _2208 = _2140;
    }
    uvec4 _2213 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2215 = _2213.x * 14u;
    uint _2216 = _2215 + 13u;
    float _2223 = _881 + (-1.0);
    float _2228 = (cbLight._m0[_2216].x * _2223) + 1.0;
    float _2229 = (cbLight._m0[_2216].y * _2223) + 1.0;
    float _2230 = (cbLight._m0[_2216].z * _2223) + 1.0;
    float _2231 = (cbLight._m0[_2216].w * _2223) + 1.0;
    uint _2232 = _2215 + 5u;
    float _2238 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2242 = _2215 + 4u;
    float _2251 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2255 = _2215 | 1u;
    float _2266 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_703, _704, _705));
    float _2269 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_703, _704, _705));
    float _4547 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _4558 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2274 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2276 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2283 = ((cbLight._m0[_2232].x * _2238) * _2276) + (((cbLight._m0[_2242].x * _2204) * _2251) * _2274);
    float _2284 = ((_2238 * cbLight._m0[_2232].y) * _2276) + (((cbLight._m0[_2242].y * _2206) * _2251) * _2274);
    float _2285 = ((_2238 * cbLight._m0[_2232].z) * _2276) + (((cbLight._m0[_2242].z * _2208) * _2251) * _2274);
    uvec4 _2289 = floatBitsToUint(cbLight._m0[_2215 + 12u]);
    bool _2291 = _2289.x == 0u;
    float _2393;
    float _2395;
    float _2397;
    if (_2291)
    {
        _2393 = _2283;
        _2395 = _2284;
        _2397 = _2285;
    }
    else
    {
        uint _2401 = _2215 + 6u;
        float _2417 = (dot(vec3(cbLight._m0[_2215 + 2u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2418 = _2417 * _2417;
        float _4569 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2419 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2420 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2393 = (((cbLight._m0[_2401].x * 0.3183098733425140380859375) * _2419) * _2420) + _2283;
        _2395 = (((cbLight._m0[_2401].y * 0.3183098733425140380859375) * _2419) * _2420) + _2284;
        _2397 = (((cbLight._m0[_2401].z * 0.3183098733425140380859375) * _2419) * _2420) + _2285;
    }
    bool _2400 = _2289.y == 0u;
    float _2455;
    float _2457;
    float _2459;
    if (_2400)
    {
        _2455 = _2393;
        _2457 = _2395;
        _2459 = _2397;
    }
    else
    {
        uint _2628 = _2215 + 7u;
        float _2644 = (dot(vec3(cbLight._m0[_2215 + 3u].xyz), vec3(_703, _704, _705)) * 0.5) + 0.5;
        float _2645 = _2644 * _2644;
        float _4585 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2646 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2647 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2455 = (((cbLight._m0[_2628].x * 0.3183098733425140380859375) * _2646) * _2647) + _2393;
        _2457 = (((cbLight._m0[_2628].y * 0.3183098733425140380859375) * _2646) * _2647) + _2395;
        _2459 = (((cbLight._m0[_2628].z * 0.3183098733425140380859375) * _2646) * _2647) + _2397;
    }
    uint _2462 = _2215 + 8u;
    float _2475 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _706) * 0.949999988079071044921875);
    float _2476 = _2475 * _2475;
    float _2477 = cbLight._m0[_2215].x + _783;
    float _2478 = cbLight._m0[_2215].y + _784;
    float _2479 = cbLight._m0[_2215].z + _785;
    float _2483 = inversesqrt(dot(vec3(_2477, _2478, _2479), vec3(_2477, _2478, _2479)));
    float _2484 = _2483 * _2477;
    float _2485 = _2483 * _2478;
    float _2486 = _2483 * _2479;
    float _2487 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2215].xyz));
    float _4601 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _2491 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2492 = dot(vec3(_703, _704, _705), vec3(_2484, _2485, _2486));
    float _4623 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2495 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2496 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2484, _2485, _2486));
    float _4634 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2500 = _2476 * _2476;
    float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
    float _2512 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2513 = 0.959999978542327880859375 - _862;
    float _2515 = 0.959999978542327880859375 - _863;
    float _2516 = 0.959999978542327880859375 - _864;
    float _2523 = 1.0 - _2476;
    float _2534 = (0.5 / (((_2491 * ((_2490 * _2523) + _2476)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2523) + _2476) * _2490))) * _2490;
    float _4645 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
    uint _2550 = _2215 + 9u;
    float _2561 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _706) * 0.949999988079071044921875);
    float _2562 = _2561 * _2561;
    float _2563 = cbLight._m0[_2255].x + _783;
    float _2564 = cbLight._m0[_2255].y + _784;
    float _2565 = cbLight._m0[_2255].z + _785;
    float _2569 = inversesqrt(dot(vec3(_2563, _2564, _2565), vec3(_2563, _2564, _2565)));
    float _2570 = _2569 * _2563;
    float _2571 = _2569 * _2564;
    float _2572 = _2569 * _2565;
    float _2573 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2255].xyz));
    float _4656 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2577 = dot(vec3(_703, _704, _705), vec3(_2570, _2571, _2572));
    float _4667 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2581 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2570, _2571, _2572));
    float _4678 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2585 = _2562 * _2562;
    float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2603 = 1.0 - _2562;
    float _2613 = (0.5 / (((_2491 * ((_2576 * _2603) + _2562)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2603) + _2562) * _2576))) * _2576;
    float _4689 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2615 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
    float _2625 = (((((_2596 * _2513) + _865) * cbLight._m0[_2550].x) * _2615) * _2238) + ((((cbLight._m0[_2462].x * _2204) * ((_2512 * _2513) + _865)) * _2536) * _2251);
    float _2626 = (((((_2596 * _2515) + _867) * cbLight._m0[_2550].y) * _2615) * _2238) + ((((cbLight._m0[_2462].y * _2206) * ((_2512 * _2515) + _867)) * _2536) * _2251);
    float _2627 = (((((_2596 * _2516) + _868) * cbLight._m0[_2550].z) * _2615) * _2238) + ((((cbLight._m0[_2462].z * _2208) * ((_2512 * _2516) + _868)) * _2536) * _2251);
    float _2683;
    float _2685;
    float _2687;
    if (_2291)
    {
        _2683 = _2625;
        _2685 = _2626;
        _2687 = _2627;
    }
    else
    {
        uint _2689 = _2215 + 2u;
        uint _2693 = _2215 + 10u;
        float _2707 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2689].w)) * _706) * 0.949999988079071044921875);
        float _2708 = _2707 * _2707;
        float _2709 = cbLight._m0[_2689].x + _783;
        float _2710 = cbLight._m0[_2689].y + _784;
        float _2711 = cbLight._m0[_2689].z + _785;
        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
        float _2716 = _2715 * _2709;
        float _2717 = _2715 * _2710;
        float _2718 = _2715 * _2711;
        float _2719 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2689].xyz));
        float _4700 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2722 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2723 = dot(vec3(_703, _704, _705), vec3(_2716, _2717, _2718));
        float _4711 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2727 = dot(vec3(cbLight._m0[_2689].xyz), vec3(_2716, _2717, _2718));
        float _4722 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2731 = _2708 * _2708;
        float _2735 = ((_2726 * _2726) * (_2731 + (-1.0))) + 1.0;
        float _2742 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2749 = 1.0 - _2708;
        float _2759 = (0.5 / (((_2491 * ((_2722 * _2749) + _2708)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2749) + _2708) * _2722))) * _2722;
        float _4733 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2761 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2731 / ((_2735 * _2735) * 3.141590118408203125));
        float _2762 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2683 = (((((_2742 * _2513) + _865) * cbLight._m0[_2693].x) * _2761) * _2762) + _2625;
        _2685 = (((((_2742 * _2515) + _867) * cbLight._m0[_2693].y) * _2761) * _2762) + _2626;
        _2687 = (((((_2742 * _2516) + _868) * cbLight._m0[_2693].z) * _2761) * _2762) + _2627;
    }
    float _2793;
    float _2795;
    float _2797;
    if (_2400)
    {
        _2793 = _2683;
        _2795 = _2685;
        _2797 = _2687;
    }
    else
    {
        uint _2804 = _2215 + 3u;
        uint _2808 = _2215 + 11u;
        float _2822 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2804].w)) * _706) * 0.949999988079071044921875);
        float _2823 = _2822 * _2822;
        float _2824 = cbLight._m0[_2804].x + _783;
        float _2825 = cbLight._m0[_2804].y + _784;
        float _2826 = cbLight._m0[_2804].z + _785;
        float _2830 = inversesqrt(dot(vec3(_2824, _2825, _2826), vec3(_2824, _2825, _2826)));
        float _2831 = _2830 * _2824;
        float _2832 = _2830 * _2825;
        float _2833 = _2830 * _2826;
        float _2834 = dot(vec3(_703, _704, _705), vec3(cbLight._m0[_2804].xyz));
        float _4749 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        float _2837 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2838 = dot(vec3(_703, _704, _705), vec3(_2831, _2832, _2833));
        float _4760 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
        float _2841 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2842 = dot(vec3(cbLight._m0[_2804].xyz), vec3(_2831, _2832, _2833));
        float _4771 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2846 = _2823 * _2823;
        float _2850 = ((_2841 * _2841) * (_2846 + (-1.0))) + 1.0;
        float _2857 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2864 = 1.0 - _2823;
        float _2874 = (0.5 / (((_2491 * ((_2837 * _2864) + _2823)) + 9.9999999392252902907785028219223e-09) + (((_2491 * _2864) + _2823) * _2837))) * _2837;
        float _4782 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2876 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2846 / ((_2850 * _2850) * 3.141590118408203125));
        float _2877 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2793 = (((((_2857 * _2513) + _865) * cbLight._m0[_2808].x) * _2876) * _2877) + _2683;
        _2795 = (((((_2857 * _2515) + _867) * cbLight._m0[_2808].y) * _2876) * _2877) + _2685;
        _2797 = (((((_2857 * _2516) + _868) * cbLight._m0[_2808].z) * _2876) * _2877) + _2687;
    }
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    if (_2213.y == 0u)
    {
        uvec4 _2898 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2899 = _2898.x;
        uint _2910 = uint((float(_2898.y) * floor(float(uint(cbSceneParam._m0[85u].y * _804) / _2899))) + floor(float(uint(cbSceneParam._m0[85u].x * _803) / _2899)));
        float _2920 = (log2(_1991 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2921 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        uint _2924 = uint(isnan(14.0) ? _2921 : (isnan(_2921) ? 14.0 : min(_2921, 14.0)));
        uvec4 _2929 = texelFetch(g_lightClusterGridBuffer, int(((_2924 << 2u) + (_2910 << 6u)) >> 2u));
        uint _2930 = _2929.x;
        uint _2931 = _2898.z;
        float _3010;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        if (((((1u << ((_2931 >> 4u) & 15u)) + 4294967295u) & _2930) == 0u) || ((_2931 & 240u) == 0u))
        {
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
        }
        else
        {
            float _3011;
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            uint _3169 = 0u;
            uint _3178;
            bool _3179;
            for (;;)
            {
                _3178 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3169 << 2u)) >> 2u)).x;
                _3179 = _3178 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3179)
                {
                    frontier_phi_71_pred = _3168;
                    frontier_phi_71_pred_1 = _3167;
                    frontier_phi_71_pred_2 = _3166;
                    frontier_phi_71_pred_3 = _3165;
                    frontier_phi_71_pred_4 = _3164;
                    frontier_phi_71_pred_5 = _3163;
                }
                else
                {
                    float _3308;
                    float _3309;
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    uint _3314;
                    _3308 = _3163;
                    _3309 = _3164;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3178;
                    float _3235;
                    float _3236;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    for (;;)
                    {
                        uint _3318 = uint(findLSB(_3314)) + (_3169 << 5u);
                        uint _3315 = (_3314 + 4294967295u) & _3314;
                        uint _3320 = _3318 * 48u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3320)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3320 + 3u)).x));
                        uint _3340 = (_3318 * 48u) + 4u;
                        vec4 _3353 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 3u)).x));
                        uint _3359 = (_3318 * 48u) + 8u;
                        vec3 _3370 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3359)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3359 + 2u)).x));
                        float _3374 = _3334.x - _1989;
                        float _3375 = _3334.y - _1990;
                        float _3376 = _3334.z - _1991;
                        float _3377 = dot(vec3(_3374, _3375, _3376), vec3(_3374, _3375, _3376));
                        float _3380 = inversesqrt(_3377);
                        float _3381 = _3380 * _3374;
                        float _3382 = _3380 * _3375;
                        float _3383 = _3380 * _3376;
                        float _3384 = dot(vec3(_822, _825, _828), vec3(_3381, _3382, _3383));
                        float _3389 = 1.0 - (_3377 * _3334.w);
                        float _4808 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                        float _3390 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3391 = sqrt(_3377) * _3353.w;
                        float _3394 = 1.39999997615814208984375 / (_3391 + 1.39999997615814208984375);
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3384) + _3395;
                        float _3401 = _3391 * _3391;
                        float _3405 = ((isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0))) * _3390) / ((_3401 * 0.699999988079071044921875) + 1.0);
                        float _3409 = (-0.0) - _1989;
                        float _3410 = (-0.0) - _1990;
                        float _3411 = (-0.0) - _1991;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3416 = _3415 * _3409;
                        float _3417 = _3415 * _3410;
                        float _3418 = _3415 * _3411;
                        float _3425 = exp2(log2(1.0 / ((_3401 * 3.5) + 5.0)) * 0.25);
                        float _3426 = 1.0 - _897;
                        float _3433 = sqrt(1.0 - ((1.0 - (_3426 * _3426)) * (1.0 - (_3425 * _3425))));
                        float _3434 = _3433 * _3433;
                        float _3435 = _3434 * _3434;
                        float _3436 = _3416 + _3381;
                        float _3437 = _3417 + _3382;
                        float _3438 = _3418 + _3383;
                        float _3442 = inversesqrt(dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438)));
                        float _3446 = dot(vec3(_822, _825, _828), vec3(_3416, _3417, _3418));
                        float _4824 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3449 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3450 = dot(vec3(_822, _825, _828), vec3(_3442 * _3436, _3442 * _3437, _3442 * _3438));
                        float _4835 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                        float _3453 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3457 = ((_3453 * _3453) * (_3435 + (-1.0))) + 1.0;
                        float _3458 = _3394 * _3434;
                        float _3459 = _3458 * _3458;
                        float _3462 = ((1.0 - _3459) * _3384) + _3459;
                        float _4846 = isnan(0.0) ? _3462 : (isnan(_3462) ? 0.0 : max(_3462, 0.0));
                        float _3463 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3464 = 1.0 - _3434;
                        float _3474 = (0.5 / (((_3463 * ((_3449 * _3464) + _3434)) + 9.9999999392252902907785028219223e-09) + (((_3463 * _3464) + _3434) * _3449))) * _3463;
                        float _4857 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3485 = (((_3435 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3457 * _3457) * ((_3401 * 2.1991131305694580078125) + 3.141590118408203125))) * _3390;
                        _3238 = (_3405 * _3353.x) + _3311;
                        _3239 = (_3405 * _3353.y) + _3312;
                        _3240 = (_3405 * _3353.z) + _3313;
                        _3235 = (_3485 * _3370.x) + _3308;
                        _3236 = (_3485 * _3370.y) + _3309;
                        _3237 = (_3485 * _3370.z) + _3310;
                        if (_3315 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3308 = _3235;
                            _3309 = _3236;
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3315;
                        }
                    }
                    frontier_phi_71_pred = _3240;
                    frontier_phi_71_pred_1 = _3239;
                    frontier_phi_71_pred_2 = _3238;
                    frontier_phi_71_pred_3 = _3237;
                    frontier_phi_71_pred_4 = _3236;
                    frontier_phi_71_pred_5 = _3235;
                }
                _3021 = frontier_phi_71_pred;
                _3019 = frontier_phi_71_pred_1;
                _3017 = frontier_phi_71_pred_2;
                _3015 = frontier_phi_71_pred_3;
                _3013 = frontier_phi_71_pred_4;
                _3011 = frontier_phi_71_pred_5;
                uint _3170 = _3169 + 1u;
                if (_3170 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3163 = _3011;
                    _3164 = _3013;
                    _3165 = _3015;
                    _3166 = _3017;
                    _3167 = _3019;
                    _3168 = _3021;
                    _3169 = _3170;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
        }
        uvec4 _3024 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3025 = _3024.z;
        uint _3027 = (_3025 >> 8u) & 15u;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((4294967295u << _3027) & _2930) == 0u)
        {
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
        }
        else
        {
            float _3156 = inversesqrt(dot(vec3(_1989, _1990, _1991), vec3(_1989, _1990, _1991)));
            float _3157 = _3156 * _1989;
            float _3158 = _3156 * _1990;
            float _3159 = _3156 * _1991;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3027 < ((_3025 >> 12u) & 15u))
            {
                float _3132;
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3291 = _3010;
                float _3292 = _3012;
                float _3293 = _3014;
                float _3294 = _3016;
                float _3295 = _3018;
                float _3296 = _3020;
                uint _3297 = _3027;
                uint _3306;
                bool _3307;
                for (;;)
                {
                    _3306 = texelFetch(g_lightClassification, int((((_2924 << 5u) + (_2910 << 9u)) + (_3297 << 2u)) >> 2u)).x;
                    _3307 = _3306 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3307)
                    {
                        frontier_phi_82_pred = _3296;
                        frontier_phi_82_pred_1 = _3295;
                        frontier_phi_82_pred_2 = _3294;
                        frontier_phi_82_pred_3 = _3293;
                        frontier_phi_82_pred_4 = _3292;
                        frontier_phi_82_pred_5 = _3291;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3512 = _3291;
                        float _3513 = _3292;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        uint _3518 = _3306;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3587;
                        vec4 _3603;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3529 = ((_3297 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3574 = (_3529 * 40u) + 16u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3590 = (_3529 * 40u) + 20u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3529 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3529 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_1991, _3637.z, fma(_1990, _3637.y, _3637.x * _1989)) + _3637.w;
                            _3650 = !((fma(_1991, _3618.z, fma(_1990, _3618.y, _3618.x * _1989)) + _3618.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3544.x - _1989;
                                float _3678 = _3544.y - _1990;
                                float _3679 = _3544.z - _1991;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3545 * _3545));
                                float _4868 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3695 = sqrt(_3680) * _3560.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_822, _825, _828))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_1991, _3587.z, fma(_1990, _3587.y, _3587.x * _1989)) + _3587.w) / _3649;
                                float _3709 = (fma(_1991, _3603.z, fma(_1990, _3603.y, _3603.x * _1989)) + _3603.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4884 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _897;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3157;
                                float _3739 = _3685 - _3158;
                                float _3740 = _3686 - _3159;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_822, _825, _828), vec3((-0.0) - _3157, (-0.0) - _3158, (-0.0) - _3159));
                                float _4895 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3752 = dot(vec3(_822, _825, _828), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4906 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_822, _825, _828), vec3(_3684, _3685, _3686))) + _3761;
                                float _4917 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4928 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3715 * _3560.z;
                                frontier_phi_88_pred_1 = _3715 * _3560.y;
                                frontier_phi_88_pred_2 = _3715 * _3560.x;
                                frontier_phi_88_pred_3 = _3789 * _3572.z;
                                frontier_phi_88_pred_4 = _3789 * _3572.y;
                                frontier_phi_88_pred_5 = _3789 * _3572.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3798 = frontier_phi_88_pred;
                            _3797 = frontier_phi_88_pred_1;
                            _3796 = frontier_phi_88_pred_2;
                            _3795 = frontier_phi_88_pred_3;
                            _3794 = frontier_phi_88_pred_4;
                            _3793 = frontier_phi_88_pred_5;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            _3504 = _3798 + _3517;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3504;
                        frontier_phi_82_pred_1 = _3503;
                        frontier_phi_82_pred_2 = _3502;
                        frontier_phi_82_pred_3 = _3501;
                        frontier_phi_82_pred_4 = _3500;
                        frontier_phi_82_pred_5 = _3499;
                    }
                    _3142 = frontier_phi_82_pred;
                    _3140 = frontier_phi_82_pred_1;
                    _3138 = frontier_phi_82_pred_2;
                    _3136 = frontier_phi_82_pred_3;
                    _3134 = frontier_phi_82_pred_4;
                    _3132 = frontier_phi_82_pred_5;
                    uint _3298 = _3297 + 1u;
                    if (_3298 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3291 = _3132;
                        _3292 = _3134;
                        _3293 = _3136;
                        _3294 = _3138;
                        _3295 = _3140;
                        _3296 = _3142;
                        _3297 = _3298;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3138;
                frontier_phi_63_64_ladder_1 = _3142;
                frontier_phi_63_64_ladder_2 = _3140;
                frontier_phi_63_64_ladder_3 = _3136;
                frontier_phi_63_64_ladder_4 = _3134;
                frontier_phi_63_64_ladder_5 = _3132;
            }
            else
            {
                frontier_phi_63_64_ladder = _3016;
                frontier_phi_63_64_ladder_1 = _3020;
                frontier_phi_63_64_ladder_2 = _3018;
                frontier_phi_63_64_ladder_3 = _3014;
                frontier_phi_63_64_ladder_4 = _3012;
                frontier_phi_63_64_ladder_5 = _3010;
            }
            _3131 = frontier_phi_63_64_ladder_5;
            _3133 = frontier_phi_63_64_ladder_4;
            _3135 = frontier_phi_63_64_ladder_3;
            _3137 = frontier_phi_63_64_ladder;
            _3139 = frontier_phi_63_64_ladder_2;
            _3141 = frontier_phi_63_64_ladder_1;
        }
        float _3146 = isnan(1.0) ? _881 : (isnan(_881) ? 1.0 : min(_881, 1.0));
        _2943 = (_3146 * _3137) + _2455;
        _2945 = (_3146 * _3139) + _2457;
        _2947 = (_3146 * _3141) + _2459;
        _2949 = ((_3131 * _865) * _3146) + _2793;
        _2951 = ((_3133 * _867) * _3146) + _2795;
        _2953 = ((_3135 * _868) * _3146) + _2797;
    }
    else
    {
        _2943 = _2455;
        _2945 = _2457;
        _2947 = _2459;
        _2949 = _2793;
        _2951 = _2795;
        _2953 = _2797;
    }
    float _4944 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _4955 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4966 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2970 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2943 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _881))) + ((_2949 + ((isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2971 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2945 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _881))) + ((_2951 + ((isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2972 = ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2947 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _881))) + ((_2953 + ((isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2973 = _244 + 6u;
    float _2981 = _803 / cbSceneParam._m0[86u].x;
    float _2982 = _804 / cbSceneParam._m0[86u].y;
    vec4 _2996 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, (log2((isnan(cbSceneParam._m0[77u].w) ? _725 : (isnan(_725) ? cbSceneParam._m0[77u].w : min(_725, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2998 = _2996.x;
    float _2999 = _2996.y;
    float _3000 = _2996.z;
    float _3001 = _2996.w;
    float _3073;
    float _3075;
    float _3077;
    float _3079;
    if (_725 > cbSceneParam._m0[78u].w)
    {
        float _3035 = isnan(_725) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _725 : min(cbSceneParam._m0[80u].w, _725));
        float _3036 = _3035 / _725;
        float _3047 = _3036 * _776;
        float _3048 = _777 * _3036;
        float _3049 = (-0.0) - _3048;
        float _3051 = _3036 * _778;
        float _3053 = (cbSceneParam._m0[77u].w * _3049) / _3035;
        float _3054 = _3053 + cbSceneParam._m0[79u].w;
        float _3055 = cbSceneParam._m0[79u].w - _3048;
        float _3061 = sqrt(((_3047 * _3047) + (_3048 * _3048)) + (_3051 * _3051));
        float _3064 = (1.0 - (cbSceneParam._m0[77u].w / _3035)) * _3061;
        float _3069 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3071 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3248;
        if (abs((_3049 - _3053) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3248 = ((((_3054 > 0.0) ? exp2(_3069 * _3054) : (2.0 - exp2(_3071 * _3054))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3064;
        }
        else
        {
            float _3192 = 1.0 / cbSceneParam._m0[80u].x;
            float _3193 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : max(_3054, _3055));
            float _3194 = isnan(_3055) ? _3054 : (isnan(_3054) ? _3055 : min(_3054, _3055));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            float _3204 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : min(_3194, 0.0));
            _3248 = ((abs(_3061 / _3049) * cbSceneParam._m0[80u].y) * ((((_3203 - _3204) * 2.0) - ((exp2(_3069 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0)))) - exp2(_3069 * (isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0))))) * _3192)) - ((exp2(_3071 * _3203) - exp2(_3071 * _3204)) * _3192))) + (_3064 * cbSceneParam._m0[80u].z);
        }
        vec4 _3250 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2981, _2982, 1.0), 0.0);
        float _3259 = exp2((_3248 * (-1.44269502162933349609375)) * (1.0 - _3250.w));
        float _3260 = log2(_3259);
        float _3276 = log2(_3001);
        _3073 = (exp2(_3276 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].x)) * _3250.x) / cbSceneParam._m0[78u].x)) + _2998;
        _3075 = (exp2(_3276 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].y)) * _3250.y) / cbSceneParam._m0[78u].y)) + _2999;
        _3077 = (exp2(_3276 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3260 * cbSceneParam._m0[78u].z)) * _3250.z) / cbSceneParam._m0[78u].z)) + _3000;
        _3079 = _3259 * _3001;
    }
    else
    {
        _3073 = _2998;
        _3075 = _2999;
        _3077 = _3000;
        _3079 = _3001;
    }
    bool _3286;
    vec4 _3089;
    vec4 _3111;
    float _3113;
    float _3117;
    float _3118;
    float _3119;
    float _3120;
    bool _3130;
    for (;;)
    {
        _3089 = cbMatDynParam._m0[0u];
        float _3091 = roundEven(_3089.y);
        bool _3092 = _3091 == 3.0;
        float _3093 = log2(_3079);
        float _3100 = exp2(_3093 * cbSceneParam._m0[78u].x) * _2970;
        float _3101 = exp2(_3093 * cbSceneParam._m0[78u].y) * _2971;
        float _3102 = exp2(_3093 * cbSceneParam._m0[78u].z) * _2972;
        float _3109 = _792 + (-0.5);
        _3111 = cbMtdParam._m0[1u];
        _3113 = _3111.y * _3109;
        float _3116 = (_3091 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3117 = _3116 * (_3092 ? _3100 : (_3100 + (cbSceneParam._m0[72u].w * _3073)));
        _3118 = _3116 * (_3092 ? _3101 : (_3101 + (cbSceneParam._m0[72u].w * _3075)));
        _3119 = _3116 * (_3092 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3077)));
        _3120 = _3109 * 0.999000012874603271484375;
        _3130 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3130)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _3120) < 0.5)
            {
                _3286 = true;
                break;
            }
        }
        uint _3227 = _841 + uint(_3089.w);
        if ((cbInstanceData._m0[_3227].w < 1.0) && ((cbInstanceData._m0[_3227].w + _3120) < 0.5))
        {
            _3286 = true;
            break;
        }
        if ((_3113 + 1.0) < _3111.x)
        {
            _3286 = true;
            break;
        }
        _3286 = false;
        break;
    }
    float _3490;
    if (_3286)
    {
        discard_state = true;
        _3490 = 0.0;
    }
    else
    {
        _3490 = cbInstanceData._m0[_2973].w;
    }
    SV_Target.x = _3117;
    SV_Target.y = _3118;
    SV_Target.z = _3119;
    SV_Target.w = _3490;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2973].w;
    discard_exit();
}


