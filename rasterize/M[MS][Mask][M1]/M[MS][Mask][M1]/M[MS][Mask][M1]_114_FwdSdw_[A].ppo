#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1608;
float _4269;
float _4270;
float _4271;
float _4272;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4281 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4292 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _4303 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    uint _294 = uint(roundEven(NORMAL.w)) * 13u;
    uint _299 = _294 + 1u;
    uint _303 = _294 + 2u;
    float _312 = sqrt(((cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x)) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x));
    float _313 = _312 * TEXCOORD.z;
    float _314 = _312 * TEXCOORD.w;
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _313) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _314) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _381 = _376.x * cbMtdParam._m0[11u].x;
    float _382 = _376.y * cbMtdParam._m0[11u].y;
    float _383 = _376.z * cbMtdParam._m0[11u].z;
    vec4 _402 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _313) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _314) + cbTextureTilingScale._m0[5u].w));
    vec4 _421 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _458 = _456.x;
    float _470 = dot(vec4(_458, _456.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _487 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _421.x) * 2.0) - ((((_458 - _470) * cbMtdParam._m0[23u].w) + _470) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4314 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _488 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _495 = (_488 * ((_402.x * cbMtdParam._m0[12u].x) - _381)) + _381;
    float _496 = (_488 * ((_402.y * cbMtdParam._m0[12u].y) - _382)) + _382;
    float _497 = (_488 * ((_402.z * cbMtdParam._m0[12u].z) - _383)) + _383;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _313) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _314) + cbTextureTilingScale._m0[3u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _536 = _534.x;
    float _546 = dot(vec4(_536, _534.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _560 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _421.y) * 2.0) - ((((_536 - _546) * cbMtdParam._m0[23u].w) + _546) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4325 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _561 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _568 = (_561 * ((_514.x * cbMtdParam._m0[13u].x) - _495)) + _495;
    float _569 = (_561 * ((_514.y * cbMtdParam._m0[13u].y) - _496)) + _496;
    float _570 = (_561 * ((_514.z * cbMtdParam._m0[13u].z) - _497)) + _497;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _313) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _314) + cbTextureTilingScale._m0[24u].w));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _608 = _606.x;
    float _618 = dot(vec4(_608, _606.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _630 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _421.z) * 2.0) - ((((_608 - _618) * cbMtdParam._m0[23u].w) + _618) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4336 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _631 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _641 = (_350.x * cbMtdParam._m0[9u].x) * ((_631 * ((_589.x * cbMtdParam._m0[14u].x) - _568)) + _568);
    float _642 = (_350.y * cbMtdParam._m0[9u].y) * ((_631 * ((_589.y * cbMtdParam._m0[14u].y) - _569)) + _569);
    float _643 = (_350.z * cbMtdParam._m0[9u].z) * ((_631 * ((_589.z * cbMtdParam._m0[14u].z) - _570)) + _570);
    float _647 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _327.x) * _641;
    float _650 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _327.y) * _642;
    float _653 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _327.z) * _643;
    float _661 = (((_641 - _647) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) + _647) * 4.55000019073486328125;
    float _663 = (((_642 - _650) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) + _650) * 4.55000019073486328125;
    float _665 = (((_643 - _653) * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) + _653) * 4.55000019073486328125;
    vec4 _682 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _313) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _314) + cbTextureTilingScale._m0[20u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _313) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _314) + cbTextureTilingScale._m0[4u].w));
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _726 = _722.z;
    float _733 = ((_705.x - _724) * _488) + _724;
    float _734 = ((_705.y - _725) * _488) + _725;
    float _735 = ((_705.z - _726) * _488) + _726;
    vec4 _747 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _313) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _314) + cbTextureTilingScale._m0[2u].w));
    float _758 = ((_747.x - _733) * _561) + _733;
    float _759 = ((_747.y - _734) * _561) + _734;
    float _760 = ((_747.z - _735) * _561) + _735;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _313) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _314) + cbTextureTilingScale._m0[23u].w));
    float _785 = ((_772.z - _760) * _631) + _760;
    float _788 = ((((_772.x - _758) * _631) + _758) * 2.0) + (-1.0);
    float _789 = ((((_772.y - _759) * _631) + _759) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4347 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _313) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _314) + cbTextureTilingScale._m0[11u].w));
    float _836 = _834.x;
    float _837 = 1.0 - _836;
    float _852 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_836 - _837) * cbMtdParam._m0[24u].z) + _837) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4358 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _853 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    float _860 = (_853 * (cbMtdParam._m0[17u].x - _661)) + _661;
    float _861 = (_853 * (cbMtdParam._m0[17u].y - _663)) + _663;
    float _862 = (_853 * (cbMtdParam._m0[17u].z - _665)) + _665;
    vec4 _888 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _890 = _888.x;
    float _907 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _313) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _314) + cbTextureTilingScale._m0[9u].w)).x - _890) * _488) + _890;
    float _924 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _313) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _314) + cbTextureTilingScale._m0[21u].w)).x - _907) * _561) + _907;
    float _942 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _313) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _314) + cbTextureTilingScale._m0[10u].w)).x - _924) * _631) + _924;
    float _946 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _942) * cbMtdParam._m0[19u].z) + _942;
    float _948 = _946 - (_946 * _853);
    float _953 = (((_682.z - _785) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _785;
    float _957 = ((_809.z - _953) * cbMtdParam._m0[19u].w) + _953;
    vec4 _970 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _313) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _314) + cbTextureTilingScale._m0[15u].w));
    float _977 = (_970.x * 2.0) + (-1.0);
    float _978 = (_970.y * 2.0) + (-1.0);
    float _979 = dot(vec2(_977, _978), vec2(_977, _978));
    float _4369 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _987 = (_853 * (_970.z - _957)) + _957;
    float _996 = (_788 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_682.x * 2.0) + (-1.0)))) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _997 = (_789 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_682.y * 2.0) + (-1.0)))) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1009 = (((_977 - _996) + (cbMtdParam._m0[21u].x * _996)) * _853) + _996;
    float _1010 = (((_978 - _997) + (cbMtdParam._m0[21u].x * _997)) * _853) + _997;
    float _1011 = (_853 * (sqrt(1.0 - (isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0)))) - _795)) + _795;
    float _1015 = cbMtdParam._m0[22u].x + _809.w;
    float _1018 = fma(_1011, _260 * NORMAL.x, fma(_1010, _267 * TANGENT.x, (_253 * _245) * _1009));
    float _1021 = fma(_1011, _260 * NORMAL.y, fma(_1010, _267 * TANGENT.y, (_253 * _246) * _1009));
    float _1024 = fma(_1011, _260 * NORMAL.z, fma(_1010, _267 * TANGENT.z, (_253 * _247) * _1009));
    float _1028 = inversesqrt(dot(vec3(_1018, _1021, _1024), vec3(_1018, _1021, _1024)));
    float _1029 = _1028 * _1018;
    float _1030 = _1028 * _1021;
    float _1031 = _1028 * _1024;
    float _4380 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _1032 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _4402 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _4413 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4424 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4435 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _1037 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _1051 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1101 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1091);
    float _1102 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1091);
    float _1103 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1091);
    float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
    float _1108 = _1101 * _1107;
    float _1109 = _1102 * _1107;
    float _1110 = _1103 * _1107;
    vec4 _1115 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1117 = _1115.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1289 = sqrt(((_1101 * _1101) + (_1102 * _1102)) + (_1103 * _1103));
        float _1295 = (cbMatDynParam._m0[5u].x * _1289) + cbMatDynParam._m0[5u].y;
        float _4446 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1300 = (cbMatDynParam._m0[5u].z * _1289) + cbMatDynParam._m0[5u].w;
        float _4457 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) - _1296)) + _1296) < ((_1117 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1128 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1129 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1147 = fma(_1031, cbSceneParam._m0[5u].z, fma(_1030, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1029));
    float _1150 = fma(_1031, cbSceneParam._m0[6u].z, fma(_1030, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1029));
    float _1153 = fma(_1031, cbSceneParam._m0[7u].z, fma(_1030, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1029));
    uint _1166 = _294 + 9u;
    uint _1167 = _1166 + uint(cbMatDynParam._m0[0u].w);
    float _1173 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * cbInstanceData._m0[_1167].x;
    float _1174 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * cbInstanceData._m0[_1167].y;
    float _1175 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * cbInstanceData._m0[_1167].z;
    float _4468 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _4490 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _1178 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _1179 = 1.0 - _1037;
    float _1180 = _1176 * _1179;
    float _1181 = _1177 * _1179;
    float _1182 = _1178 * _1179;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1037;
    float _1188 = (_1177 + (-0.039999999105930328369140625)) * _1037;
    float _1189 = (_1178 + (-0.039999999105930328369140625)) * _1037;
    float _1190 = _1187 + 0.039999999105930328369140625;
    float _1192 = _1188 + 0.039999999105930328369140625;
    float _1193 = _1189 + 0.039999999105930328369140625;
    vec4 _1202 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1128, cbSceneParam._m0[86u].y * _1129));
    float _1206 = ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * TEXCOORD_5.w) * _1202.x;
    float _1207 = dot(vec3(_1029, _1030, _1031), vec3(_1108, _1109, _1110));
    float _1210 = _1207 * 2.0;
    float _1214 = (_1210 * _1029) - _1108;
    float _1215 = (_1210 * _1030) - _1109;
    float _1216 = (_1210 * _1031) - _1110;
    float _1220 = abs(dot(vec3(_1108, _1109, _1110), vec3(_1029, _1030, _1031)));
    float _4501 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _1222 = sqrt(_1032);
    float _1235 = exp2((_1222 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1222 * 3.0));
    float _1241 = (1.0 - _1235) * ((_1222 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1242 = _1235 * _1222;
    float _1270 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1274 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1278 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1607;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1332 = fma(_1278, cbModelParam._m0[26u].z, fma(_1274, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1270));
        float _1336 = fma(_1278, cbModelParam._m0[27u].z, fma(_1274, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1270));
        float _1340 = fma(_1278, cbModelParam._m0[28u].z, fma(_1274, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1270));
        float _1365 = _1270 + _1029;
        float _1366 = _1274 + _1030;
        float _1367 = _1278 + _1031;
        float _1377 = fma(_1367, cbModelParam._m0[26u].z, fma(_1366, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1365)) - _1332;
        float _1378 = fma(_1367, cbModelParam._m0[27u].z, fma(_1366, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1365)) - _1336;
        float _1379 = fma(_1367, cbModelParam._m0[28u].z, fma(_1366, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1365)) - _1340;
        float _1383 = inversesqrt(dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379)));
        float _1396 = ((_1383 * _1377) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1332 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1383 * _1378) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1336 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1383 * _1379) / cbModelParam._m0[34u].z) + ((((((_1340 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1396, _1397, _1398), 0.0);
        float _1435 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1401.x + (-0.5));
        float _1437 = _1435 * (_1401.y + (-0.5));
        float _1438 = _1435 * (_1401.z + (-0.5));
        float _1445 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1408.x + (-0.5));
        float _1447 = _1445 * (_1408.y + (-0.5));
        float _1448 = _1445 * (_1408.z + (-0.5));
        float _1455 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1415.x + (-0.5));
        float _1457 = _1455 * (_1415.y + (-0.5));
        float _1458 = _1455 * (_1415.z + (-0.5));
        float _1465 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1422.x + (-0.5));
        float _1467 = _1465 * (_1422.y + (-0.5));
        float _1468 = _1465 * (_1422.z + (-0.5));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = _1436 * 0.5;
        float _1473 = _1446 * 0.5;
        float _1474 = _1456 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1489 = (dot(vec3(_1029, _1030, _1031), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1499 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4549 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1501 + 1.0))) + _1506) * _1469;
        float _1516 = _1437 * 0.5;
        float _1517 = _1447 * 0.5;
        float _1518 = _1457 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_1029, _1030, _1031), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4582 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1543 + 1.0))) + _1548) * _1470;
        float _1558 = _1438 * 0.5;
        float _1559 = _1448 * 0.5;
        float _1560 = _1458 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_1029, _1030, _1031), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4615 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1585 + 1.0))) + _1590) * _1471;
        _1607 = _1438;
        _1609 = _1437;
        _1610 = _1436;
        _1611 = _1448;
        _1612 = _1447;
        _1613 = _1446;
        _1614 = _1458;
        _1615 = _1457;
        _1616 = _1456;
        _1617 = _1471;
        _1618 = _1470;
        _1619 = _1469;
        _1620 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1621 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
        _1622 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
    }
    else
    {
        _1607 = _1608;
        _1609 = _1608;
        _1610 = _1608;
        _1611 = _1608;
        _1612 = _1608;
        _1613 = _1608;
        _1614 = _1608;
        _1615 = _1608;
        _1616 = _1608;
        _1617 = _1608;
        _1618 = _1608;
        _1619 = _1608;
        _1620 = 0.0;
        _1621 = 0.0;
        _1622 = 0.0;
    }
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1648 = fma(_1278, cbModelParam._m0[30u].z, fma(_1274, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1270));
        float _1652 = fma(_1278, cbModelParam._m0[31u].z, fma(_1274, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1270));
        float _1656 = fma(_1278, cbModelParam._m0[32u].z, fma(_1274, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1270));
        float _1679 = _1270 + _1029;
        float _1680 = _1274 + _1030;
        float _1681 = _1278 + _1031;
        float _1691 = fma(_1681, cbModelParam._m0[30u].z, fma(_1680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1679)) - _1648;
        float _1692 = fma(_1681, cbModelParam._m0[31u].z, fma(_1680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1679)) - _1652;
        float _1693 = fma(_1681, cbModelParam._m0[32u].z, fma(_1680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1679)) - _1656;
        float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
        float _1710 = ((_1697 * _1691) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1648 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1711 = ((_1697 * _1692) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1652 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1712 = ((_1697 * _1693) / cbModelParam._m0[35u].z) + ((((((_1656 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1714 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1710, _1711, _1712), 0.0);
        vec4 _1721 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1710, _1711, _1712), 0.0);
        vec4 _1728 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1710, _1711, _1712), 0.0);
        vec4 _1735 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1710, _1711, _1712), 0.0);
        float _1747 = exp2((_1714.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1714.x + (-0.5));
        float _1749 = _1747 * (_1714.y + (-0.5));
        float _1750 = _1747 * (_1714.z + (-0.5));
        float _1757 = exp2((_1721.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1721.x + (-0.5));
        float _1759 = _1757 * (_1721.y + (-0.5));
        float _1760 = _1757 * (_1721.z + (-0.5));
        float _1767 = exp2((_1728.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1728.x + (-0.5));
        float _1769 = _1767 * (_1728.y + (-0.5));
        float _1770 = _1767 * (_1728.z + (-0.5));
        float _1777 = exp2((_1735.w + (-0.5)) * 20.0) * 2.0;
        float _1778 = _1777 * (_1735.x + (-0.5));
        float _1779 = _1777 * (_1735.y + (-0.5));
        float _1780 = _1777 * (_1735.z + (-0.5));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = _1748 * 0.5;
        float _1785 = _1758 * 0.5;
        float _1786 = _1768 * 0.5;
        float _1787 = dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786));
        float _1792 = (_1787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1787);
        float _1800 = (dot(vec3(_1029, _1030, _1031), vec3(_1792 * _1784, _1792 * _1785, _1792 * _1786)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1811 = _1810 * 2.0;
        float _1815 = (1.0 - _1810) / (_1810 + 1.0);
        float _4678 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _1825 = ((((1.0 - _1816) * (_1811 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_1811 + 1.0))) + _1816) * _1781;
        float _1826 = _1749 * 0.5;
        float _1827 = _1759 * 0.5;
        float _1828 = _1769 * 0.5;
        float _1829 = dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828));
        float _1834 = (_1829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1829);
        float _1842 = (dot(vec3(_1029, _1030, _1031), vec3(_1834 * _1826, _1834 * _1827, _1834 * _1828)) + 1.0) * 0.5;
        float _4689 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4700 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _1853 = _1852 * 2.0;
        float _1857 = (1.0 - _1852) / (_1852 + 1.0);
        float _4711 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _1867 = ((((1.0 - _1858) * (_1853 + 2.0)) * exp2(log2(isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_1853 + 1.0))) + _1858) * _1782;
        float _1868 = _1750 * 0.5;
        float _1869 = _1760 * 0.5;
        float _1870 = _1770 * 0.5;
        float _1871 = dot(vec3(_1868, _1869, _1870), vec3(_1868, _1869, _1870));
        float _1876 = (_1871 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1871);
        float _1884 = (dot(vec3(_1029, _1030, _1031), vec3(_1876 * _1868, _1876 * _1869, _1876 * _1870)) + 1.0) * 0.5;
        float _4722 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
        float _1893 = sqrt(((_1869 * _1869) + (_1868 * _1868)) + (_1870 * _1870)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4733 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1895 = _1894 * 2.0;
        float _1899 = (1.0 - _1894) / (_1894 + 1.0);
        float _4744 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1900 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1909 = ((((1.0 - _1900) * (_1895 + 2.0)) * exp2(log2(isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_1895 + 1.0))) + _1900) * _1783;
        _1917 = _1750;
        _1918 = _1749;
        _1919 = _1748;
        _1920 = _1760;
        _1921 = _1759;
        _1922 = _1758;
        _1923 = _1770;
        _1924 = _1769;
        _1925 = _1768;
        _1926 = _1783;
        _1927 = _1782;
        _1928 = _1781;
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)));
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)));
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)));
    }
    else
    {
        _1917 = _1608;
        _1918 = _1608;
        _1919 = _1608;
        _1920 = _1608;
        _1921 = _1608;
        _1922 = _1608;
        _1923 = _1608;
        _1924 = _1608;
        _1925 = _1608;
        _1926 = _1608;
        _1927 = _1608;
        _1928 = _1608;
        _1929 = 0.0;
        _1930 = 0.0;
        _1931 = 0.0;
    }
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1620)) + _1620;
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1621)) + _1621;
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1622)) + _1622;
    float _1964 = fma(_1943, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1941 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1943, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1941 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1943, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1941));
    float _1985 = _1214 * 0.5;
    float _1986 = _1215 * 0.5;
    float _1987 = _1216 * 0.5;
    float _1988 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _1991 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _1994 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _2028;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2001 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1607, _1611, _1614, _1617));
        float _2005 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1609, _1612, _1615, _1618));
        float _2009 = dot(vec4(_1985, _1986, _1987, 1.0), vec4(_1610, _1613, _1616, _1619));
        float _2016 = dot(vec4(cbModelParam._m0[39u]), vec4(_1985, _1986, _1987, 1.0));
        _2028 = dot(vec3(isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)), isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)), isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2016) ? 0.0 : (isnan(0.0) ? _2016 : max(0.0, _2016))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2028 = 1.0;
    }
    float _2039;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2030 = dot(vec4(cbModelParam._m0[40u]), vec4(_1985, _1986, _1987, 1.0));
        _2039 = dot(vec3(isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2030) ? 0.0 : (isnan(0.0) ? _2030 : max(0.0, _2030))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2039 = 1.0;
    }
    float _2043 = (_2039 * cbModelParam._m0[1u].x) + (_2028 * (1.0 - cbModelParam._m0[1u].x));
    float _2053 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1032);
    float _2054 = isnan(_2053) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2053 : min(cbModelParam._m0[25u].z, _2053));
    float _2134;
    float _2136;
    float _2138;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2101 = fma(_1278, cbModelParam._m0[13u].z, fma(_1274, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1270)) + cbModelParam._m0[13u].w;
        float _2105 = fma(_1278, cbModelParam._m0[14u].z, fma(_1274, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1270)) + cbModelParam._m0[14u].w;
        float _2109 = fma(_1278, cbModelParam._m0[15u].z, fma(_1274, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1270)) + cbModelParam._m0[15u].w;
        float _2112 = fma(_1216, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1214));
        float _2115 = fma(_1216, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1214));
        float _2118 = fma(_1216, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1214));
        float _2146;
        if (_2112 > 0.0)
        {
            _2146 = abs((1.0 - _2101) / _2112);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2101 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2146 = frontier_phi_17_15_ladder;
        }
        float _2318;
        if (_2115 > 0.0)
        {
            _2318 = abs((1.0 - _2105) / _2115);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2105 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2318 = frontier_phi_26_22_ladder;
        }
        float _2613;
        if (_2118 > 0.0)
        {
            _2613 = abs((1.0 - _2109) / _2118);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2109 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2613 = frontier_phi_38_33_ladder;
        }
        float _2615 = isnan(_2318) ? _2146 : (isnan(_2146) ? _2318 : min(_2146, _2318));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _2112) + _2101;
        float _2621 = (_2616 * _2115) + _2105;
        float _2622 = (_2616 * _2118) + _2109;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2625 = (-1.0) - _2623;
        float _2627 = _2623 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2622 > _2627) || ((_2622 < _2625) || ((_2621 > _2627) || ((_2621 < _2625) || ((_2620 < _2625) || (_2620 > _2627))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2622, cbModelParam._m0[9u].z, fma(_2621, cbModelParam._m0[9u].y, _2620 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2622, cbModelParam._m0[10u].z, fma(_2621, cbModelParam._m0[10u].y, _2620 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2622, cbModelParam._m0[11u].z, fma(_2621, cbModelParam._m0[11u].y, _2620 * cbModelParam._m0[11u].x))), _2054);
            frontier_phi_16_38_ladder = _2767.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2767.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2767.x * cbModelParam._m0[1u].y;
        }
        _2134 = frontier_phi_16_38_ladder_2;
        _2136 = frontier_phi_16_38_ladder_1;
        _2138 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2122 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1214, _1215, _1216), _2054);
        _2134 = _2122.x * cbModelParam._m0[1u].y;
        _2136 = _2122.y * cbModelParam._m0[1u].y;
        _2138 = _2122.z * cbModelParam._m0[1u].y;
    }
    float _2142 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1032);
    float _2143 = isnan(_2142) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2142 : min(cbModelParam._m0[25u].w, _2142));
    float _2233;
    float _2235;
    float _2237;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2197 = fma(_1278, cbModelParam._m0[21u].z, fma(_1274, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1270)) + cbModelParam._m0[21u].w;
        float _2201 = fma(_1278, cbModelParam._m0[22u].z, fma(_1274, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1270)) + cbModelParam._m0[22u].w;
        float _2205 = fma(_1278, cbModelParam._m0[23u].z, fma(_1274, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1270)) + cbModelParam._m0[23u].w;
        float _2208 = fma(_1216, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1214));
        float _2211 = fma(_1216, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1214));
        float _2214 = fma(_1216, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1214));
        float _2323;
        if (_2208 > 0.0)
        {
            _2323 = abs((1.0 - _2197) / _2208);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2197 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2323 = frontier_phi_28_24_ladder;
        }
        float _2640;
        if (_2211 > 0.0)
        {
            _2640 = abs((1.0 - _2201) / _2211);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2201 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2640 = frontier_phi_40_35_ladder;
        }
        float _2978;
        if (_2214 > 0.0)
        {
            _2978 = abs((1.0 - _2205) / _2214);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2205 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2978 = frontier_phi_50_47_ladder;
        }
        float _2980 = isnan(_2640) ? _2323 : (isnan(_2323) ? _2640 : min(_2323, _2640));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2208) + _2197;
        float _2986 = (_2981 * _2211) + _2201;
        float _2987 = (_2981 * _2214) + _2205;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3109 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _2143);
            frontier_phi_25_50_ladder = _3109.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3109.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3109.x * cbModelParam._m0[1u].z;
        }
        _2233 = frontier_phi_25_50_ladder_2;
        _2235 = frontier_phi_25_50_ladder_1;
        _2237 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1214, _1215, _1216), _2143);
        _2233 = _2217.x * cbModelParam._m0[1u].z;
        _2235 = _2217.y * cbModelParam._m0[1u].z;
        _2237 = _2217.z * cbModelParam._m0[1u].z;
    }
    float _2250 = (((_1241 * _1190) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2233 - _2134)) + _2134);
    float _2252 = (((_1241 * _1192) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2235 - _2136)) + _2136);
    float _2254 = (((_1241 * _1193) + _1242) * _1206) * ((cbModelParam._m0[1u].w * (_2237 - _2138)) + _2138);
    float _2257 = fma(_2254, cbSceneParam._m0[89u].z, fma(_2252, cbSceneParam._m0[89u].y, _2250 * cbSceneParam._m0[89u].x));
    float _2260 = fma(_2254, cbSceneParam._m0[90u].z, fma(_2252, cbSceneParam._m0[90u].y, _2250 * cbSceneParam._m0[90u].x));
    float _2263 = fma(_2254, cbSceneParam._m0[91u].z, fma(_2252, cbSceneParam._m0[91u].y, _2250 * cbSceneParam._m0[91u].x));
    float _2297 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2305 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2309 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2310 = _2297 / _2309;
    float _2311 = _2301 / _2309;
    float _2312 = _2305 / _2309;
    float _2459;
    float _2460;
    float _2461;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2339 = ((uint(_2312 > cbSceneParam._m0[59u].y) + uint(_2312 > cbSceneParam._m0[59u].x)) + uint(_2312 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2340 = _2339 + 43u;
        uint _2348 = _2339 + 44u;
        uint _2356 = _2339 + 45u;
        uint _2364 = _2339 + 46u;
        float _2375 = fma(_2309, cbSceneParam._m0[_2340].w, fma(_2305, cbSceneParam._m0[_2340].z, fma(_2301, cbSceneParam._m0[_2340].y, _2297 * cbSceneParam._m0[_2340].x)));
        float _2379 = fma(_2309, cbSceneParam._m0[_2348].w, fma(_2305, cbSceneParam._m0[_2348].z, fma(_2301, cbSceneParam._m0[_2348].y, _2297 * cbSceneParam._m0[_2348].x)));
        float _2387 = fma(_2309, cbSceneParam._m0[_2364].w, fma(_2305, cbSceneParam._m0[_2364].z, fma(_2301, cbSceneParam._m0[_2364].y, _2297 * cbSceneParam._m0[_2364].x)));
        float _2392 = cbSceneParam._m0[33u].z * _2387;
        float _2394 = cbSceneParam._m0[33u].w * _2387;
        float _2397 = fma(_2309, cbSceneParam._m0[_2356].w, fma(_2305, cbSceneParam._m0[_2356].z, fma(_2301, cbSceneParam._m0[_2356].y, _2297 * cbSceneParam._m0[_2356].x))) / _2387;
        float _2445 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
        float _4870 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2452 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2392 + _2375) / _2387, (_2394 + _2379) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2394 + _2375) / _2387, (_2379 - _2392) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2392) / _2387, (_2379 - _2394) / _2387), _2397), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2375 - _2394) / _2387, (_2392 + _2379) / _2387), _2397), 0.0)).x), vec4(0.25)));
        _2459 = 1.0 - (_2452 * cbSceneParam._m0[34u].x);
        _2460 = 1.0 - (_2452 * cbSceneParam._m0[34u].y);
        _2461 = 1.0 - (_2452 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2459 = 1.0;
        _2460 = 1.0;
        _2461 = 1.0;
    }
    float _2525;
    float _2527;
    float _2529;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2513 = fma(_2309, cbSceneParam._m0[63u].w, fma(_2305, cbSceneParam._m0[63u].z, fma(_2301, cbSceneParam._m0[63u].y, _2297 * cbSceneParam._m0[63u].x)));
        float _2514 = fma(_2309, cbSceneParam._m0[60u].w, fma(_2305, cbSceneParam._m0[60u].z, fma(_2301, cbSceneParam._m0[60u].y, _2297 * cbSceneParam._m0[60u].x))) / _2513;
        float _2515 = fma(_2309, cbSceneParam._m0[61u].w, fma(_2305, cbSceneParam._m0[61u].z, fma(_2301, cbSceneParam._m0[61u].y, _2297 * cbSceneParam._m0[61u].x))) / _2513;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2514 >= cbSceneParam._m0[64u].x) && (_2515 >= cbSceneParam._m0[64u].y)) && (_2514 <= cbSceneParam._m0[64u].z)) && (_2515 <= cbSceneParam._m0[64u].w))
        {
            float _2653 = fma(_2309, cbSceneParam._m0[62u].w, fma(_2305, cbSceneParam._m0[62u].z, fma(_2301, cbSceneParam._m0[62u].y, _2297 * cbSceneParam._m0[62u].x))) / _2513;
            float _2657 = isnan(cbSceneParam._m0[41u].w) ? _2653 : (isnan(_2653) ? cbSceneParam._m0[41u].w : max(_2653, cbSceneParam._m0[41u].w));
            float _2700 = (cbSceneParam._m0[33u].x - sqrt(((_2311 * _2311) + (_2310 * _2310)) + (_2312 * _2312))) * cbSceneParam._m0[33u].y;
            float _4886 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
            float _2707 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2514, cbSceneParam._m0[33u].w + _2515), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2514, _2515 - cbSceneParam._m0[33u].z), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].z, _2515 - cbSceneParam._m0[33u].w), _2657), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2514 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2515), _2657), 0.0)).x), vec4(0.25)));
            float _2711 = 1.0 - (_2707 * cbSceneParam._m0[34u].x);
            float _2712 = 1.0 - (_2707 * cbSceneParam._m0[34u].y);
            float _2713 = 1.0 - (_2707 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2713) ? _2461 : (isnan(_2461) ? _2713 : min(_2461, _2713));
            frontier_phi_37_36_ladder_1 = isnan(_2712) ? _2460 : (isnan(_2460) ? _2712 : min(_2460, _2712));
            frontier_phi_37_36_ladder_2 = isnan(_2711) ? _2459 : (isnan(_2459) ? _2711 : min(_2459, _2711));
        }
        else
        {
            frontier_phi_37_36_ladder = _2461;
            frontier_phi_37_36_ladder_1 = _2460;
            frontier_phi_37_36_ladder_2 = _2459;
        }
        _2525 = frontier_phi_37_36_ladder_2;
        _2527 = frontier_phi_37_36_ladder_1;
        _2529 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2525 = _2459;
        _2527 = _2460;
        _2529 = _2461;
    }
    uvec4 _2534 = floatBitsToUint(cbInstanceData._m0[_294 + 5u]);
    uint _2536 = _2534.x * 14u;
    uint _2537 = _2536 + 13u;
    float _2544 = _1206 + (-1.0);
    float _2549 = (cbLight._m0[_2537].x * _2544) + 1.0;
    float _2550 = (cbLight._m0[_2537].y * _2544) + 1.0;
    float _2551 = (cbLight._m0[_2537].z * _2544) + 1.0;
    float _2552 = (cbLight._m0[_2537].w * _2544) + 1.0;
    uint _2553 = _2536 + 5u;
    float _2559 = isnan(1.0) ? _2550 : (isnan(_2550) ? 1.0 : min(_2550, 1.0));
    uint _2563 = _2536 + 4u;
    float _2572 = isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0));
    uint _2576 = _2536 | 1u;
    float _2587 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_1029, _1030, _1031));
    float _2590 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_1029, _1030, _1031));
    float _4922 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _4933 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2595 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * 0.3183098733425140380859375;
    float _2597 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * 0.3183098733425140380859375;
    float _2604 = ((cbLight._m0[_2553].x * _2559) * _2597) + (((cbLight._m0[_2563].x * _2525) * _2572) * _2595);
    float _2605 = ((_2559 * cbLight._m0[_2553].y) * _2597) + (((cbLight._m0[_2563].y * _2527) * _2572) * _2595);
    float _2606 = ((_2559 * cbLight._m0[_2553].z) * _2597) + (((cbLight._m0[_2563].z * _2529) * _2572) * _2595);
    uvec4 _2610 = floatBitsToUint(cbLight._m0[_2536 + 12u]);
    bool _2612 = _2610.x == 0u;
    float _2714;
    float _2716;
    float _2718;
    if (_2612)
    {
        _2714 = _2604;
        _2716 = _2605;
        _2718 = _2606;
    }
    else
    {
        uint _2722 = _2536 + 6u;
        float _2738 = (dot(vec3(cbLight._m0[_2536 + 2u].xyz), vec3(_1029, _1030, _1031)) * 0.5) + 0.5;
        float _2739 = _2738 * _2738;
        float _4944 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2740 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2741 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _2714 = (((cbLight._m0[_2722].x * 0.3183098733425140380859375) * _2740) * _2741) + _2604;
        _2716 = (((cbLight._m0[_2722].y * 0.3183098733425140380859375) * _2740) * _2741) + _2605;
        _2718 = (((cbLight._m0[_2722].z * 0.3183098733425140380859375) * _2740) * _2741) + _2606;
    }
    bool _2721 = _2610.y == 0u;
    float _2776;
    float _2778;
    float _2780;
    if (_2721)
    {
        _2776 = _2714;
        _2778 = _2716;
        _2780 = _2718;
    }
    else
    {
        uint _2949 = _2536 + 7u;
        float _2965 = (dot(vec3(cbLight._m0[_2536 + 3u].xyz), vec3(_1029, _1030, _1031)) * 0.5) + 0.5;
        float _2966 = _2965 * _2965;
        float _4960 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2967 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2968 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _2776 = (((cbLight._m0[_2949].x * 0.3183098733425140380859375) * _2967) * _2968) + _2714;
        _2778 = (((cbLight._m0[_2949].y * 0.3183098733425140380859375) * _2967) * _2968) + _2716;
        _2780 = (((cbLight._m0[_2949].z * 0.3183098733425140380859375) * _2967) * _2968) + _2718;
    }
    uint _2783 = _2536 + 8u;
    float _2796 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2536].w)) * _1032) * 0.949999988079071044921875);
    float _2797 = _2796 * _2796;
    float _2798 = cbLight._m0[_2536].x + _1108;
    float _2799 = cbLight._m0[_2536].y + _1109;
    float _2800 = cbLight._m0[_2536].z + _1110;
    float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
    float _2805 = _2804 * _2798;
    float _2806 = _2804 * _2799;
    float _2807 = _2804 * _2800;
    float _2808 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2536].xyz));
    float _4976 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
    float _2811 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
    float _4987 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _2812 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
    float _2813 = dot(vec3(_1029, _1030, _1031), vec3(_2805, _2806, _2807));
    float _4998 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2816 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
    float _2817 = dot(vec3(cbLight._m0[_2536].xyz), vec3(_2805, _2806, _2807));
    float _5009 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
    float _2821 = _2797 * _2797;
    float _2825 = ((_2816 * _2816) * (_2821 + (-1.0))) + 1.0;
    float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
    float _2834 = 0.959999978542327880859375 - _1187;
    float _2836 = 0.959999978542327880859375 - _1188;
    float _2837 = 0.959999978542327880859375 - _1189;
    float _2844 = 1.0 - _2797;
    float _2855 = (0.5 / (((_2812 * ((_2811 * _2844) + _2797)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2844) + _2797) * _2811))) * _2811;
    float _5020 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
    float _2857 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2821 / ((_2825 * _2825) * 3.141590118408203125));
    uint _2871 = _2536 + 9u;
    float _2882 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2576].w)) * _1032) * 0.949999988079071044921875);
    float _2883 = _2882 * _2882;
    float _2884 = cbLight._m0[_2576].x + _1108;
    float _2885 = cbLight._m0[_2576].y + _1109;
    float _2886 = cbLight._m0[_2576].z + _1110;
    float _2890 = inversesqrt(dot(vec3(_2884, _2885, _2886), vec3(_2884, _2885, _2886)));
    float _2891 = _2890 * _2884;
    float _2892 = _2890 * _2885;
    float _2893 = _2890 * _2886;
    float _2894 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_2576].xyz));
    float _5031 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0));
    float _2897 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    float _2898 = dot(vec3(_1029, _1030, _1031), vec3(_2891, _2892, _2893));
    float _5042 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2901 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    float _2902 = dot(vec3(cbLight._m0[_2576].xyz), vec3(_2891, _2892, _2893));
    float _5053 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2906 = _2883 * _2883;
    float _2910 = ((_2901 * _2901) * (_2906 + (-1.0))) + 1.0;
    float _2917 = exp2(log2(1.0 - (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) * 5.0);
    float _2924 = 1.0 - _2883;
    float _2934 = (0.5 / (((_2812 * ((_2897 * _2924) + _2883)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2924) + _2883) * _2897))) * _2897;
    float _5064 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
    float _2936 = (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_2906 / ((_2910 * _2910) * 3.141590118408203125));
    float _2946 = (((((_2917 * _2834) + _1190) * cbLight._m0[_2871].x) * _2936) * _2559) + ((((cbLight._m0[_2783].x * _2525) * ((_2833 * _2834) + _1190)) * _2857) * _2572);
    float _2947 = (((((_2917 * _2836) + _1192) * cbLight._m0[_2871].y) * _2936) * _2559) + ((((cbLight._m0[_2783].y * _2527) * ((_2833 * _2836) + _1192)) * _2857) * _2572);
    float _2948 = (((((_2917 * _2837) + _1193) * cbLight._m0[_2871].z) * _2936) * _2559) + ((((cbLight._m0[_2783].z * _2529) * ((_2833 * _2837) + _1193)) * _2857) * _2572);
    float _3004;
    float _3006;
    float _3008;
    if (_2612)
    {
        _3004 = _2946;
        _3006 = _2947;
        _3008 = _2948;
    }
    else
    {
        uint _3010 = _2536 + 2u;
        uint _3014 = _2536 + 10u;
        float _3028 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3010].w)) * _1032) * 0.949999988079071044921875);
        float _3029 = _3028 * _3028;
        float _3030 = cbLight._m0[_3010].x + _1108;
        float _3031 = cbLight._m0[_3010].y + _1109;
        float _3032 = cbLight._m0[_3010].z + _1110;
        float _3036 = inversesqrt(dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032)));
        float _3037 = _3036 * _3030;
        float _3038 = _3036 * _3031;
        float _3039 = _3036 * _3032;
        float _3040 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_3010].xyz));
        float _5075 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
        float _3043 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
        float _3044 = dot(vec3(_1029, _1030, _1031), vec3(_3037, _3038, _3039));
        float _5086 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
        float _3047 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
        float _3048 = dot(vec3(cbLight._m0[_3010].xyz), vec3(_3037, _3038, _3039));
        float _5097 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3052 = _3029 * _3029;
        float _3056 = ((_3047 * _3047) * (_3052 + (-1.0))) + 1.0;
        float _3063 = exp2(log2(1.0 - (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)))) * 5.0);
        float _3070 = 1.0 - _3029;
        float _3080 = (0.5 / (((_2812 * ((_3043 * _3070) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3070) + _3029) * _3043))) * _3043;
        float _5108 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3082 = (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3052 / ((_3056 * _3056) * 3.141590118408203125));
        float _3083 = isnan(1.0) ? _2551 : (isnan(_2551) ? 1.0 : min(_2551, 1.0));
        _3004 = (((((_3063 * _2834) + _1190) * cbLight._m0[_3014].x) * _3082) * _3083) + _2946;
        _3006 = (((((_3063 * _2836) + _1192) * cbLight._m0[_3014].y) * _3082) * _3083) + _2947;
        _3008 = (((((_3063 * _2837) + _1193) * cbLight._m0[_3014].z) * _3082) * _3083) + _2948;
    }
    float _3114;
    float _3116;
    float _3118;
    if (_2721)
    {
        _3114 = _3004;
        _3116 = _3006;
        _3118 = _3008;
    }
    else
    {
        uint _3125 = _2536 + 3u;
        uint _3129 = _2536 + 11u;
        float _3143 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3125].w)) * _1032) * 0.949999988079071044921875);
        float _3144 = _3143 * _3143;
        float _3145 = cbLight._m0[_3125].x + _1108;
        float _3146 = cbLight._m0[_3125].y + _1109;
        float _3147 = cbLight._m0[_3125].z + _1110;
        float _3151 = inversesqrt(dot(vec3(_3145, _3146, _3147), vec3(_3145, _3146, _3147)));
        float _3152 = _3151 * _3145;
        float _3153 = _3151 * _3146;
        float _3154 = _3151 * _3147;
        float _3155 = dot(vec3(_1029, _1030, _1031), vec3(cbLight._m0[_3125].xyz));
        float _5124 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
        float _3158 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
        float _3159 = dot(vec3(_1029, _1030, _1031), vec3(_3152, _3153, _3154));
        float _5135 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
        float _3162 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
        float _3163 = dot(vec3(cbLight._m0[_3125].xyz), vec3(_3152, _3153, _3154));
        float _5146 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
        float _3167 = _3144 * _3144;
        float _3171 = ((_3162 * _3162) * (_3167 + (-1.0))) + 1.0;
        float _3178 = exp2(log2(1.0 - (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) * 5.0);
        float _3185 = 1.0 - _3144;
        float _3195 = (0.5 / (((_2812 * ((_3158 * _3185) + _3144)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _3185) + _3144) * _3158))) * _3158;
        float _5157 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
        float _3197 = (isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3167 / ((_3171 * _3171) * 3.141590118408203125));
        float _3198 = isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0));
        _3114 = (((((_3178 * _2834) + _1190) * cbLight._m0[_3129].x) * _3197) * _3198) + _3004;
        _3116 = (((((_3178 * _2836) + _1192) * cbLight._m0[_3129].y) * _3197) * _3198) + _3006;
        _3118 = (((((_3178 * _2837) + _1193) * cbLight._m0[_3129].z) * _3197) * _3198) + _3008;
    }
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    float _3272;
    float _3274;
    if (_2534.y == 0u)
    {
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.x;
        uint _3231 = uint((float(_3219.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1129) / _3220))) + floor(float(uint(cbSceneParam._m0[85u].x * _1128) / _3220)));
        float _3241 = (log2(_2312 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3242 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0));
        uint _3245 = uint(isnan(14.0) ? _3242 : (isnan(_3242) ? 14.0 : min(_3242, 14.0)));
        uvec4 _3250 = texelFetch(g_lightClusterGridBuffer, int(((_3245 << 2u) + (_3231 << 6u)) >> 2u));
        uint _3251 = _3250.x;
        uint _3252 = _3219.z;
        float _3331;
        float _3333;
        float _3335;
        float _3337;
        float _3339;
        float _3341;
        if (((((1u << ((_3252 >> 4u) & 15u)) + 4294967295u) & _3251) == 0u) || ((_3252 & 240u) == 0u))
        {
            _3331 = 0.0;
            _3333 = 0.0;
            _3335 = 0.0;
            _3337 = 0.0;
            _3339 = 0.0;
            _3341 = 0.0;
        }
        else
        {
            float _3332;
            float _3334;
            float _3336;
            float _3338;
            float _3340;
            float _3342;
            float _3484 = 0.0;
            float _3485 = 0.0;
            float _3486 = 0.0;
            float _3487 = 0.0;
            float _3488 = 0.0;
            float _3489 = 0.0;
            uint _3490 = 0u;
            uint _3499;
            bool _3500;
            for (;;)
            {
                _3499 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3490 << 2u)) >> 2u)).x;
                _3500 = _3499 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3500)
                {
                    frontier_phi_71_pred = _3489;
                    frontier_phi_71_pred_1 = _3488;
                    frontier_phi_71_pred_2 = _3487;
                    frontier_phi_71_pred_3 = _3486;
                    frontier_phi_71_pred_4 = _3485;
                    frontier_phi_71_pred_5 = _3484;
                }
                else
                {
                    float _3629;
                    float _3630;
                    float _3631;
                    float _3632;
                    float _3633;
                    float _3634;
                    uint _3635;
                    _3629 = _3484;
                    _3630 = _3485;
                    _3631 = _3486;
                    _3632 = _3487;
                    _3633 = _3488;
                    _3634 = _3489;
                    _3635 = _3499;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    float _3561;
                    for (;;)
                    {
                        uint _3639 = uint(findLSB(_3635)) + (_3490 << 5u);
                        uint _3636 = (_3635 + 4294967295u) & _3635;
                        uint _3641 = _3639 * 48u;
                        vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3641)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3641 + 3u)).x));
                        uint _3661 = (_3639 * 48u) + 4u;
                        vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3661)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3661 + 3u)).x));
                        uint _3680 = (_3639 * 48u) + 8u;
                        vec3 _3691 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3680)).x, texelFetch(g_PointLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3680 + 2u)).x));
                        float _3695 = _3655.x - _2310;
                        float _3696 = _3655.y - _2311;
                        float _3697 = _3655.z - _2312;
                        float _3698 = dot(vec3(_3695, _3696, _3697), vec3(_3695, _3696, _3697));
                        float _3701 = inversesqrt(_3698);
                        float _3702 = _3701 * _3695;
                        float _3703 = _3701 * _3696;
                        float _3704 = _3701 * _3697;
                        float _3705 = dot(vec3(_1147, _1150, _1153), vec3(_3702, _3703, _3704));
                        float _3710 = 1.0 - (_3698 * _3655.w);
                        float _5183 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3711 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                        float _3712 = sqrt(_3698) * _3674.w;
                        float _3715 = 1.39999997615814208984375 / (_3712 + 1.39999997615814208984375);
                        float _3716 = _3715 * _3715;
                        float _3719 = ((1.0 - _3716) * _3705) + _3716;
                        float _3722 = _3712 * _3712;
                        float _3726 = ((isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0))) * _3711) / ((_3722 * 0.699999988079071044921875) + 1.0);
                        float _3730 = (-0.0) - _2310;
                        float _3731 = (-0.0) - _2311;
                        float _3732 = (-0.0) - _2312;
                        float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                        float _3737 = _3736 * _3730;
                        float _3738 = _3736 * _3731;
                        float _3739 = _3736 * _3732;
                        float _3746 = exp2(log2(1.0 / ((_3722 * 3.5) + 5.0)) * 0.25);
                        float _3747 = 1.0 - _1222;
                        float _3754 = sqrt(1.0 - ((1.0 - (_3747 * _3747)) * (1.0 - (_3746 * _3746))));
                        float _3755 = _3754 * _3754;
                        float _3756 = _3755 * _3755;
                        float _3757 = _3737 + _3702;
                        float _3758 = _3738 + _3703;
                        float _3759 = _3739 + _3704;
                        float _3763 = inversesqrt(dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759)));
                        float _3767 = dot(vec3(_1147, _1150, _1153), vec3(_3737, _3738, _3739));
                        float _5199 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                        float _3770 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                        float _3771 = dot(vec3(_1147, _1150, _1153), vec3(_3763 * _3757, _3763 * _3758, _3763 * _3759));
                        float _5210 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                        float _3774 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                        float _3778 = ((_3774 * _3774) * (_3756 + (-1.0))) + 1.0;
                        float _3779 = _3715 * _3755;
                        float _3780 = _3779 * _3779;
                        float _3783 = ((1.0 - _3780) * _3705) + _3780;
                        float _5221 = isnan(0.0) ? _3783 : (isnan(_3783) ? 0.0 : max(_3783, 0.0));
                        float _3784 = isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0));
                        float _3785 = 1.0 - _3755;
                        float _3795 = (0.5 / (((_3784 * ((_3770 * _3785) + _3755)) + 9.9999999392252902907785028219223e-09) + (((_3784 * _3785) + _3755) * _3770))) * _3784;
                        float _5232 = isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0));
                        float _3806 = (((_3756 * 3.1415927410125732421875) * (isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0)))) / ((_3778 * _3778) * ((_3722 * 2.1991131305694580078125) + 3.141590118408203125))) * _3711;
                        _3559 = (_3726 * _3674.x) + _3632;
                        _3560 = (_3726 * _3674.y) + _3633;
                        _3561 = (_3726 * _3674.z) + _3634;
                        _3556 = (_3806 * _3691.x) + _3629;
                        _3557 = (_3806 * _3691.y) + _3630;
                        _3558 = (_3806 * _3691.z) + _3631;
                        if (_3636 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3629 = _3556;
                            _3630 = _3557;
                            _3631 = _3558;
                            _3632 = _3559;
                            _3633 = _3560;
                            _3634 = _3561;
                            _3635 = _3636;
                        }
                    }
                    frontier_phi_71_pred = _3561;
                    frontier_phi_71_pred_1 = _3560;
                    frontier_phi_71_pred_2 = _3559;
                    frontier_phi_71_pred_3 = _3558;
                    frontier_phi_71_pred_4 = _3557;
                    frontier_phi_71_pred_5 = _3556;
                }
                _3342 = frontier_phi_71_pred;
                _3340 = frontier_phi_71_pred_1;
                _3338 = frontier_phi_71_pred_2;
                _3336 = frontier_phi_71_pred_3;
                _3334 = frontier_phi_71_pred_4;
                _3332 = frontier_phi_71_pred_5;
                uint _3491 = _3490 + 1u;
                if (_3491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3484 = _3332;
                    _3485 = _3334;
                    _3486 = _3336;
                    _3487 = _3338;
                    _3488 = _3340;
                    _3489 = _3342;
                    _3490 = _3491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3331 = _3332;
            _3333 = _3334;
            _3335 = _3336;
            _3337 = _3338;
            _3339 = _3340;
            _3341 = _3342;
        }
        uvec4 _3345 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3346 = _3345.z;
        uint _3348 = (_3346 >> 8u) & 15u;
        float _3452;
        float _3454;
        float _3456;
        float _3458;
        float _3460;
        float _3462;
        if (((4294967295u << _3348) & _3251) == 0u)
        {
            _3452 = _3331;
            _3454 = _3333;
            _3456 = _3335;
            _3458 = _3337;
            _3460 = _3339;
            _3462 = _3341;
        }
        else
        {
            float _3477 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
            float _3478 = _3477 * _2310;
            float _3479 = _3477 * _2311;
            float _3480 = _3477 * _2312;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3348 < ((_3346 >> 12u) & 15u))
            {
                float _3453;
                float _3455;
                float _3457;
                float _3459;
                float _3461;
                float _3463;
                float _3612 = _3331;
                float _3613 = _3333;
                float _3614 = _3335;
                float _3615 = _3337;
                float _3616 = _3339;
                float _3617 = _3341;
                uint _3618 = _3348;
                uint _3627;
                bool _3628;
                for (;;)
                {
                    _3627 = texelFetch(g_lightClassification, int((((_3245 << 5u) + (_3231 << 9u)) + (_3618 << 2u)) >> 2u)).x;
                    _3628 = _3627 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3628)
                    {
                        frontier_phi_82_pred = _3617;
                        frontier_phi_82_pred_1 = _3616;
                        frontier_phi_82_pred_2 = _3615;
                        frontier_phi_82_pred_3 = _3614;
                        frontier_phi_82_pred_4 = _3613;
                        frontier_phi_82_pred_5 = _3612;
                    }
                    else
                    {
                        float _3820;
                        float _3821;
                        float _3822;
                        float _3823;
                        float _3824;
                        float _3825;
                        float _4113;
                        float _4114;
                        float _4115;
                        float _4116;
                        float _4117;
                        float _4118;
                        float _3833 = _3612;
                        float _3834 = _3613;
                        float _3835 = _3614;
                        float _3836 = _3615;
                        float _3837 = _3616;
                        float _3838 = _3617;
                        uint _3839 = _3627;
                        uint _3840;
                        vec4 _3865;
                        float _3866;
                        vec4 _3881;
                        vec3 _3893;
                        vec4 _3908;
                        vec4 _3923;
                        float _3969;
                        bool _3970;
                        for (;;)
                        {
                            uint _3850 = ((_3618 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3839));
                            _3840 = (_3839 + 4294967295u) & _3839;
                            uint _3852 = _3850 * 40u;
                            _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            _3866 = _3865.w;
                            uint _3868 = (_3850 * 40u) + 4u;
                            _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            uint _3883 = (_3850 * 40u) + 8u;
                            _3893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3883 + 2u)).x));
                            uint _3895 = (_3850 * 40u) + 16u;
                            _3908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3895 + 3u)).x));
                            uint _3910 = (_3850 * 40u) + 20u;
                            _3923 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3910 + 3u)).x));
                            uint _3925 = (_3850 * 40u) + 24u;
                            vec4 _3938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3925 + 3u)).x));
                            uint _3944 = (_3850 * 40u) + 28u;
                            vec4 _3957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3944 + 3u)).x));
                            _3969 = fma(_2312, _3957.z, fma(_2311, _3957.y, _3957.x * _2310)) + _3957.w;
                            _3970 = !((fma(_2312, _3938.z, fma(_2311, _3938.y, _3938.x * _2310)) + _3938.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3970)
                            {
                                float _3997 = _3865.x - _2310;
                                float _3998 = _3865.y - _2311;
                                float _3999 = _3865.z - _2312;
                                float _4000 = dot(vec3(_3997, _3998, _3999), vec3(_3997, _3998, _3999));
                                float _4003 = inversesqrt(_4000);
                                float _4004 = _4003 * _3997;
                                float _4005 = _4003 * _3998;
                                float _4006 = _4003 * _3999;
                                float _4010 = 1.0 - (_4000 / (_3866 * _3866));
                                float _5243 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4011 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
                                float _4015 = sqrt(_4000) * _3881.w;
                                float _4017 = 1.39999997615814208984375 / (_4015 + 1.39999997615814208984375);
                                float _4018 = _4017 * _4017;
                                float _4021 = ((1.0 - _4018) * dot(vec3(_4004, _4005, _4006), vec3(_1147, _1150, _1153))) + _4018;
                                float _4024 = _4015 * _4015;
                                float _4028 = (fma(_2312, _3908.z, fma(_2311, _3908.y, _3908.x * _2310)) + _3908.w) / _3969;
                                float _4029 = (fma(_2312, _3923.z, fma(_2311, _3923.y, _3923.x * _2310)) + _3923.w) / _3969;
                                float _4033 = 1.0 - dot(vec2(_4028, _4029), vec2(_4028, _4029));
                                float _5259 = isnan(0.0) ? _4033 : (isnan(_4033) ? 0.0 : max(_4033, 0.0));
                                float _4034 = isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0));
                                float _4035 = _4034 * (((isnan(0.0) ? _4021 : (isnan(_4021) ? 0.0 : max(_4021, 0.0))) * _4011) / ((_4024 * 0.699999988079071044921875) + 1.0));
                                float _4047 = exp2(log2(1.0 / ((_4024 * 3.5) + 5.0)) * 0.25);
                                float _4048 = 1.0 - _1222;
                                float _4055 = sqrt(1.0 - ((1.0 - (_4048 * _4048)) * (1.0 - (_4047 * _4047))));
                                float _4056 = _4055 * _4055;
                                float _4057 = _4056 * _4056;
                                float _4058 = _4004 - _3478;
                                float _4059 = _4005 - _3479;
                                float _4060 = _4006 - _3480;
                                float _4064 = inversesqrt(dot(vec3(_4058, _4059, _4060), vec3(_4058, _4059, _4060)));
                                float _4068 = dot(vec3(_1147, _1150, _1153), vec3((-0.0) - _3478, (-0.0) - _3479, (-0.0) - _3480));
                                float _5270 = isnan(0.0) ? _4068 : (isnan(_4068) ? 0.0 : max(_4068, 0.0));
                                float _4071 = isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0));
                                float _4072 = dot(vec3(_1147, _1150, _1153), vec3(_4064 * _4058, _4064 * _4059, _4064 * _4060));
                                float _5281 = isnan(0.0) ? _4072 : (isnan(_4072) ? 0.0 : max(_4072, 0.0));
                                float _4075 = isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0));
                                float _4079 = ((_4075 * _4075) * (_4057 + (-1.0))) + 1.0;
                                float _4080 = _4017 * _4056;
                                float _4081 = _4080 * _4080;
                                float _4087 = ((1.0 - _4081) * dot(vec3(_1147, _1150, _1153), vec3(_4004, _4005, _4006))) + _4081;
                                float _5292 = isnan(0.0) ? _4087 : (isnan(_4087) ? 0.0 : max(_4087, 0.0));
                                float _4088 = isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0));
                                float _4089 = 1.0 - _4056;
                                float _4099 = (0.5 / (((_4088 * ((_4071 * _4089) + _4056)) + 9.9999999392252902907785028219223e-09) + (((_4088 * _4089) + _4056) * _4071))) * _4088;
                                float _5303 = isnan(0.0) ? _4099 : (isnan(_4099) ? 0.0 : max(_4099, 0.0));
                                float _4109 = (_4034 * _4011) * (((_4057 * 3.1415927410125732421875) * (isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0)))) / ((_4079 * _4079) * ((_4024 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4035 * _3881.z;
                                frontier_phi_88_pred_1 = _4035 * _3881.y;
                                frontier_phi_88_pred_2 = _4035 * _3881.x;
                                frontier_phi_88_pred_3 = _4109 * _3893.z;
                                frontier_phi_88_pred_4 = _4109 * _3893.y;
                                frontier_phi_88_pred_5 = _4109 * _3893.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4118 = frontier_phi_88_pred;
                            _4117 = frontier_phi_88_pred_1;
                            _4116 = frontier_phi_88_pred_2;
                            _4115 = frontier_phi_88_pred_3;
                            _4114 = frontier_phi_88_pred_4;
                            _4113 = frontier_phi_88_pred_5;
                            _3823 = _4116 + _3836;
                            _3824 = _4117 + _3837;
                            _3825 = _4118 + _3838;
                            _3820 = _4113 + _3833;
                            _3821 = _4114 + _3834;
                            _3822 = _4115 + _3835;
                            if (_3840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3833 = _3820;
                                _3834 = _3821;
                                _3835 = _3822;
                                _3836 = _3823;
                                _3837 = _3824;
                                _3838 = _3825;
                                _3839 = _3840;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3825;
                        frontier_phi_82_pred_1 = _3824;
                        frontier_phi_82_pred_2 = _3823;
                        frontier_phi_82_pred_3 = _3822;
                        frontier_phi_82_pred_4 = _3821;
                        frontier_phi_82_pred_5 = _3820;
                    }
                    _3463 = frontier_phi_82_pred;
                    _3461 = frontier_phi_82_pred_1;
                    _3459 = frontier_phi_82_pred_2;
                    _3457 = frontier_phi_82_pred_3;
                    _3455 = frontier_phi_82_pred_4;
                    _3453 = frontier_phi_82_pred_5;
                    uint _3619 = _3618 + 1u;
                    if (_3619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3612 = _3453;
                        _3613 = _3455;
                        _3614 = _3457;
                        _3615 = _3459;
                        _3616 = _3461;
                        _3617 = _3463;
                        _3618 = _3619;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3459;
                frontier_phi_63_64_ladder_1 = _3463;
                frontier_phi_63_64_ladder_2 = _3461;
                frontier_phi_63_64_ladder_3 = _3457;
                frontier_phi_63_64_ladder_4 = _3455;
                frontier_phi_63_64_ladder_5 = _3453;
            }
            else
            {
                frontier_phi_63_64_ladder = _3337;
                frontier_phi_63_64_ladder_1 = _3341;
                frontier_phi_63_64_ladder_2 = _3339;
                frontier_phi_63_64_ladder_3 = _3335;
                frontier_phi_63_64_ladder_4 = _3333;
                frontier_phi_63_64_ladder_5 = _3331;
            }
            _3452 = frontier_phi_63_64_ladder_5;
            _3454 = frontier_phi_63_64_ladder_4;
            _3456 = frontier_phi_63_64_ladder_3;
            _3458 = frontier_phi_63_64_ladder;
            _3460 = frontier_phi_63_64_ladder_2;
            _3462 = frontier_phi_63_64_ladder_1;
        }
        float _3467 = isnan(1.0) ? _1206 : (isnan(_1206) ? 1.0 : min(_1206, 1.0));
        _3264 = (_3467 * _3458) + _2776;
        _3266 = (_3467 * _3460) + _2778;
        _3268 = (_3467 * _3462) + _2780;
        _3270 = ((_3452 * _1190) * _3467) + _3114;
        _3272 = ((_3454 * _1192) * _3467) + _3116;
        _3274 = ((_3456 * _1193) * _3467) + _3118;
    }
    else
    {
        _3264 = _2776;
        _3266 = _2778;
        _3268 = _2780;
        _3270 = _3114;
        _3272 = _3116;
        _3274 = _3118;
    }
    float _5319 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _5330 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _5341 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _3291 = ((isnan(1.0) ? _5319 : (isnan(_5319) ? 1.0 : min(_5319, 1.0))) * (_3264 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1206))) + ((_3270 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2043)) * cbPerFrame._m0[3u].x);
    float _3292 = ((isnan(1.0) ? _5330 : (isnan(_5330) ? 1.0 : min(_5330, 1.0))) * (_3266 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1206))) + ((_3272 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2043)) * cbPerFrame._m0[3u].x);
    float _3293 = ((isnan(1.0) ? _5341 : (isnan(_5341) ? 1.0 : min(_5341, 1.0))) * (_3268 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1206))) + ((_3274 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2043)) * cbPerFrame._m0[3u].x);
    uint _3294 = _294 + 6u;
    float _3302 = _1128 / cbSceneParam._m0[86u].x;
    float _3303 = _1129 / cbSceneParam._m0[86u].y;
    vec4 _3317 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, (log2((isnan(cbSceneParam._m0[77u].w) ? _1051 : (isnan(_1051) ? cbSceneParam._m0[77u].w : min(_1051, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3319 = _3317.x;
    float _3320 = _3317.y;
    float _3321 = _3317.z;
    float _3322 = _3317.w;
    float _3394;
    float _3396;
    float _3398;
    float _3400;
    if (_1051 > cbSceneParam._m0[78u].w)
    {
        float _3356 = isnan(_1051) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1051 : min(cbSceneParam._m0[80u].w, _1051));
        float _3357 = _3356 / _1051;
        float _3368 = _3357 * _1101;
        float _3369 = _1102 * _3357;
        float _3370 = (-0.0) - _3369;
        float _3372 = _3357 * _1103;
        float _3374 = (cbSceneParam._m0[77u].w * _3370) / _3356;
        float _3375 = _3374 + cbSceneParam._m0[79u].w;
        float _3376 = cbSceneParam._m0[79u].w - _3369;
        float _3382 = sqrt(((_3368 * _3368) + (_3369 * _3369)) + (_3372 * _3372));
        float _3385 = (1.0 - (cbSceneParam._m0[77u].w / _3356)) * _3382;
        float _3390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3569;
        if (abs((_3370 - _3374) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3569 = ((((_3375 > 0.0) ? exp2(_3390 * _3375) : (2.0 - exp2(_3392 * _3375))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3385;
        }
        else
        {
            float _3513 = 1.0 / cbSceneParam._m0[80u].x;
            float _3514 = isnan(_3376) ? _3375 : (isnan(_3375) ? _3376 : max(_3375, _3376));
            float _3515 = isnan(_3376) ? _3375 : (isnan(_3375) ? _3376 : min(_3375, _3376));
            float _3524 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : min(_3514, 0.0));
            float _3525 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : min(_3515, 0.0));
            _3569 = ((abs(_3382 / _3370) * cbSceneParam._m0[80u].y) * ((((_3524 - _3525) * 2.0) - ((exp2(_3390 * (isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0)))) - exp2(_3390 * (isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))))) * _3513)) - ((exp2(_3392 * _3524) - exp2(_3392 * _3525)) * _3513))) + (_3385 * cbSceneParam._m0[80u].z);
        }
        vec4 _3571 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3302, _3303, 1.0), 0.0);
        float _3580 = exp2((_3569 * (-1.44269502162933349609375)) * (1.0 - _3571.w));
        float _3581 = log2(_3580);
        float _3597 = log2(_3322);
        _3394 = (exp2(_3597 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].x)) * _3571.x) / cbSceneParam._m0[78u].x)) + _3319;
        _3396 = (exp2(_3597 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].y)) * _3571.y) / cbSceneParam._m0[78u].y)) + _3320;
        _3398 = (exp2(_3597 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3581 * cbSceneParam._m0[78u].z)) * _3571.z) / cbSceneParam._m0[78u].z)) + _3321;
        _3400 = _3580 * _3322;
    }
    else
    {
        _3394 = _3319;
        _3396 = _3320;
        _3398 = _3321;
        _3400 = _3322;
    }
    bool _3607;
    vec4 _3410;
    vec4 _3432;
    float _3434;
    float _3438;
    float _3439;
    float _3440;
    float _3441;
    bool _3451;
    for (;;)
    {
        _3410 = cbMatDynParam._m0[0u];
        float _3412 = roundEven(_3410.y);
        bool _3413 = _3412 == 3.0;
        float _3414 = log2(_3400);
        float _3421 = exp2(_3414 * cbSceneParam._m0[78u].x) * _3291;
        float _3422 = exp2(_3414 * cbSceneParam._m0[78u].y) * _3292;
        float _3423 = exp2(_3414 * cbSceneParam._m0[78u].z) * _3293;
        float _3430 = _1117 + (-0.5);
        _3432 = cbMtdParam._m0[1u];
        _3434 = _3432.y * _3430;
        float _3437 = (_3412 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3438 = _3437 * (_3413 ? _3421 : (_3421 + (cbSceneParam._m0[72u].w * _3394)));
        _3439 = _3437 * (_3413 ? _3422 : (_3422 + (cbSceneParam._m0[72u].w * _3396)));
        _3440 = _3437 * (_3413 ? _3423 : (_3423 + (cbSceneParam._m0[72u].w * _3398)));
        _3441 = _3430 * 0.999000012874603271484375;
        _3451 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3451)
        {
            if ((cbInstanceData._m0[_294 + 7u].x + _3441) < 0.5)
            {
                _3607 = true;
                break;
            }
        }
        uint _3548 = _1166 + uint(_3410.w);
        if ((cbInstanceData._m0[_3548].w < 1.0) && ((cbInstanceData._m0[_3548].w + _3441) < 0.5))
        {
            _3607 = true;
            break;
        }
        if ((_3434 + 1.0) < _3432.x)
        {
            _3607 = true;
            break;
        }
        _3607 = false;
        break;
    }
    float _3811;
    if (_3607)
    {
        discard_state = true;
        _3811 = 0.0;
    }
    else
    {
        _3811 = cbInstanceData._m0[_3294].w;
    }
    SV_Target.x = _3438;
    SV_Target.y = _3439;
    SV_Target.z = _3440;
    SV_Target.w = _3811;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3294].w;
    discard_exit();
}


