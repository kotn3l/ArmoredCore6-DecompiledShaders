#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1457;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _299 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _305 = _299.x * cbMtdParam._m0[11u].x;
    float _306 = _299.y * cbMtdParam._m0[11u].y;
    float _307 = _299.z * cbMtdParam._m0[11u].z;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _345.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3806 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _420 = (_413 * ((_326.x * cbMtdParam._m0[12u].x) - _305)) + _305;
    float _421 = (_413 * ((_326.y * cbMtdParam._m0[12u].y) - _306)) + _306;
    float _422 = (_413 * ((_326.z * cbMtdParam._m0[12u].z) - _307)) + _307;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _345.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3817 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _532 = _530.x;
    float _533 = _530.y;
    float _534 = _530.z;
    float _541 = ((_513.x - _532) * _413) + _532;
    float _542 = ((_513.y - _533) * _413) + _533;
    float _543 = ((_513.z - _534) * _413) + _534;
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _568 = ((_555.z - _543) * _486) + _543;
    float _571 = ((((_555.x - _541) * _486) + _541) * 2.0) + (-1.0);
    float _573 = ((((_555.y - _542) * _486) + _542) * 2.0) + (-1.0);
    float _574 = dot(vec2(_571, _573), vec2(_571, _573));
    float _3828 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _579 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _605 = (((_593.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _571;
    float _606 = (((_593.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _573;
    float _609 = fma(_579, _247, fma(_606, _254, _605 * _240));
    float _612 = fma(_579, _248, fma(_606, _255, _605 * _241));
    float _615 = fma(_579, _249, fma(_606, _256, _605 * _242));
    float _619 = inversesqrt(dot(vec3(_609, _612, _615), vec3(_609, _612, _615)));
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _658 = (cbMtdParam._m0[19u].x + dot(vec4(_619 * _609, _619 * _612, _619 * _615, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_648 - _649) * cbMtdParam._m0[24u].z) + _649) * cbMtdParam._m0[21u].z);
    float _3839 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
    float _659 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _661 = (-0.0) - cbMtdParam._m0[24u].x;
    float _663 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _664 = isnan(1.0) ? _663 : (isnan(_663) ? 1.0 : min(_663, 1.0));
    float _671 = _659 - ((_659 * TEXCOORD_8.x) * _664);
    float _672 = _659 - ((_659 * TEXCOORD_8.y) * _664);
    float _673 = _659 - ((_659 * TEXCOORD_8.z) * _664);
    float _680 = (_671 * (cbMtdParam._m0[17u].x - _493)) + _493;
    float _681 = (_672 * (cbMtdParam._m0[17u].y - _494)) + _494;
    float _682 = (_673 * (cbMtdParam._m0[17u].z - _495)) + _495;
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _696 = _694.x;
    float _697 = 1.0 - _696;
    float _723 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_696 - _697) * cbMtdParam._m0[24u].w) + _697) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3860 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _724 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _732 = ((((cbMtdParam._m0[10u].x - _680) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _724) + _680;
    float _733 = ((((cbMtdParam._m0[10u].y - _681) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _724) + _681;
    float _734 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _682)) * _724) + _682;
    vec4 _760 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _762 = _760.x;
    float _780 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _762) * _413) + _762;
    float _797 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _780) * _486) + _780;
    float _801 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _797) * cbMtdParam._m0[19u].z) + _797;
    float _803 = _801 - (_801 * _671);
    float _805 = _803 - (_803 * _724);
    float _809 = (cbMtdParam._m0[19u].w * (_593.z - _568)) + _568;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _830 = (_823.x * 2.0) + (-1.0);
    float _831 = (_823.y * 2.0) + (-1.0);
    float _832 = dot(vec2(_830, _831), vec2(_830, _831));
    float _3871 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _840 = ((_823.z - _809) * _671) + _809;
    float _843 = ((cbMtdParam._m0[23u].x - _840) * _724) + _840;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _868 = (_862.x * 2.0) + (-1.0);
    float _869 = (_862.y * 2.0) + (-1.0);
    float _870 = dot(vec2(_868, _869), vec2(_868, _869));
    float _3882 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _885 = ((sqrt(1.0 - (isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0)))) - _579) * _673) + _579;
    float _888 = (((_830 - _605) * _671) + _605) + (cbMtdParam._m0[21u].x * _605);
    float _889 = (((_831 - _606) * _672) + _606) + (cbMtdParam._m0[21u].x * _606);
    float _900 = (((_868 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _724) + _888;
    float _901 = (((_869 - _889) + (_889 * cbMtdParam._m0[22u].z)) * _724) + _889;
    float _902 = (_724 * (sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) - _885)) + _885;
    float _904 = cbMtdParam._m0[22u].x + _593.w;
    float _907 = fma(_902, _247, fma(_901, _254, _900 * _240));
    float _910 = fma(_902, _248, fma(_901, _255, _900 * _241));
    float _913 = fma(_902, _249, fma(_901, _256, _900 * _242));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _3893 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _921 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _3915 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3926 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _3937 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _3948 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _926 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    float _1005 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1006 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1024 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1027 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1030 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1044 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1050 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_1044].x;
    float _1051 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_1044].y;
    float _1052 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0)))) * cbInstanceData._m0[_1044].z;
    float _3959 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _1053 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _1054 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _1056 = 1.0 - _926;
    float _1057 = _1053 * _1056;
    float _1058 = _1054 * _1056;
    float _1059 = _1055 * _1056;
    float _1064 = (_1053 + (-0.039999999105930328369140625)) * _926;
    float _1065 = (_1054 + (-0.039999999105930328369140625)) * _926;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _926;
    float _1067 = _1064 + 0.039999999105930328369140625;
    float _1069 = _1065 + 0.039999999105930328369140625;
    float _1070 = _1066 + 0.039999999105930328369140625;
    vec4 _1079 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1005, cbSceneParam._m0[86u].y * _1006));
    float _1083 = ((isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * TEXCOORD_5.w) * _1079.x;
    float _1084 = dot(vec3(_918, _919, _920), vec3(_997, _998, _999));
    float _1087 = _1084 * 2.0;
    float _1091 = (_1087 * _918) - _997;
    float _1092 = (_1087 * _919) - _998;
    float _1093 = (_1087 * _920) - _999;
    float _1097 = abs(dot(vec3(_997, _998, _999), vec3(_918, _919, _920)));
    float _3992 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1099 = sqrt(_921);
    float _1112 = exp2((_1099 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1099 * 3.0));
    float _1118 = (1.0 - _1112) * ((_1099 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1119 = _1112 * _1099;
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1456;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1181 = fma(_1155, cbModelParam._m0[26u].z, fma(_1151, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1147));
        float _1185 = fma(_1155, cbModelParam._m0[27u].z, fma(_1151, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1147));
        float _1189 = fma(_1155, cbModelParam._m0[28u].z, fma(_1151, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1147));
        float _1214 = _1147 + _918;
        float _1215 = _1151 + _919;
        float _1216 = _1155 + _920;
        float _1226 = fma(_1216, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1214)) - _1181;
        float _1227 = fma(_1216, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1214)) - _1185;
        float _1228 = fma(_1216, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1214)) - _1189;
        float _1232 = inversesqrt(dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228)));
        float _1245 = ((_1232 * _1226) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1181 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1232 * _1227) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1185 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1232 * _1228) / cbModelParam._m0[34u].z) + ((((((_1189 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1245, _1246, _1247), 0.0);
        float _1284 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1250.x + (-0.5));
        float _1286 = _1284 * (_1250.y + (-0.5));
        float _1287 = _1284 * (_1250.z + (-0.5));
        float _1294 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1257.x + (-0.5));
        float _1296 = _1294 * (_1257.y + (-0.5));
        float _1297 = _1294 * (_1257.z + (-0.5));
        float _1304 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1264.x + (-0.5));
        float _1306 = _1304 * (_1264.y + (-0.5));
        float _1307 = _1304 * (_1264.z + (-0.5));
        float _1314 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1271.x + (-0.5));
        float _1316 = _1314 * (_1271.y + (-0.5));
        float _1317 = _1314 * (_1271.z + (-0.5));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = _1285 * 0.5;
        float _1322 = _1295 * 0.5;
        float _1323 = _1305 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1338 = (dot(vec3(_918, _919, _920), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1348 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _4040 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1350 + 1.0))) + _1355) * _1318;
        float _1365 = _1286 * 0.5;
        float _1366 = _1296 * 0.5;
        float _1367 = _1306 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_918, _919, _920), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4073 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1392 + 1.0))) + _1397) * _1319;
        float _1407 = _1287 * 0.5;
        float _1408 = _1297 * 0.5;
        float _1409 = _1307 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_918, _919, _920), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4106 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1434 + 1.0))) + _1439) * _1320;
        _1456 = _1287;
        _1458 = _1286;
        _1459 = _1285;
        _1460 = _1297;
        _1461 = _1296;
        _1462 = _1295;
        _1463 = _1307;
        _1464 = _1306;
        _1465 = _1305;
        _1466 = _1320;
        _1467 = _1319;
        _1468 = _1318;
        _1469 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
        _1470 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
    }
    else
    {
        _1456 = _1457;
        _1458 = _1457;
        _1459 = _1457;
        _1460 = _1457;
        _1461 = _1457;
        _1462 = _1457;
        _1463 = _1457;
        _1464 = _1457;
        _1465 = _1457;
        _1466 = _1457;
        _1467 = _1457;
        _1468 = _1457;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1495 = fma(_1155, cbModelParam._m0[30u].z, fma(_1151, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1147));
        float _1499 = fma(_1155, cbModelParam._m0[31u].z, fma(_1151, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1147));
        float _1503 = fma(_1155, cbModelParam._m0[32u].z, fma(_1151, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1147));
        float _1526 = _1147 + _918;
        float _1527 = _1151 + _919;
        float _1528 = _1155 + _920;
        float _1538 = fma(_1528, cbModelParam._m0[30u].z, fma(_1527, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1526)) - _1495;
        float _1539 = fma(_1528, cbModelParam._m0[31u].z, fma(_1527, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1526)) - _1499;
        float _1540 = fma(_1528, cbModelParam._m0[32u].z, fma(_1527, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1526)) - _1503;
        float _1544 = inversesqrt(dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540)));
        float _1557 = ((_1544 * _1538) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1495 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1558 = ((_1544 * _1539) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1499 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1559 = ((_1544 * _1540) / cbModelParam._m0[35u].z) + ((((((_1503 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1557, _1558, _1559), 0.0);
        float _1594 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1561.x + (-0.5));
        float _1596 = _1594 * (_1561.y + (-0.5));
        float _1597 = _1594 * (_1561.z + (-0.5));
        float _1604 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1605 = _1604 * (_1568.x + (-0.5));
        float _1606 = _1604 * (_1568.y + (-0.5));
        float _1607 = _1604 * (_1568.z + (-0.5));
        float _1614 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1615 = _1614 * (_1575.x + (-0.5));
        float _1616 = _1614 * (_1575.y + (-0.5));
        float _1617 = _1614 * (_1575.z + (-0.5));
        float _1624 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1625 = _1624 * (_1582.x + (-0.5));
        float _1626 = _1624 * (_1582.y + (-0.5));
        float _1627 = _1624 * (_1582.z + (-0.5));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = _1595 * 0.5;
        float _1632 = _1605 * 0.5;
        float _1633 = _1615 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_918, _919, _920), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4169 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1658 + 1.0))) + _1663) * _1628;
        float _1673 = _1596 * 0.5;
        float _1674 = _1606 * 0.5;
        float _1675 = _1616 * 0.5;
        float _1676 = dot(vec3(_1673, _1674, _1675), vec3(_1673, _1674, _1675));
        float _1681 = (_1676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1676);
        float _1689 = (dot(vec3(_918, _919, _920), vec3(_1681 * _1673, _1681 * _1674, _1681 * _1675)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1698 = sqrt(((_1674 * _1674) + (_1673 * _1673)) + (_1675 * _1675)) / (_1629 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1699 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1700 = _1699 * 2.0;
        float _1704 = (1.0 - _1699) / (_1699 + 1.0);
        float _4202 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1714 = ((((1.0 - _1705) * (_1700 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1700 + 1.0))) + _1705) * _1629;
        float _1715 = _1597 * 0.5;
        float _1716 = _1607 * 0.5;
        float _1717 = _1617 * 0.5;
        float _1718 = dot(vec3(_1715, _1716, _1717), vec3(_1715, _1716, _1717));
        float _1723 = (_1718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1718);
        float _1731 = (dot(vec3(_918, _919, _920), vec3(_1723 * _1715, _1723 * _1716, _1723 * _1717)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1740 = sqrt(((_1716 * _1716) + (_1715 * _1715)) + (_1717 * _1717)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1742 = _1741 * 2.0;
        float _1746 = (1.0 - _1741) / (_1741 + 1.0);
        float _4235 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1747 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1756 = ((((1.0 - _1747) * (_1742 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1742 + 1.0))) + _1747) * _1630;
        _1764 = _1597;
        _1765 = _1596;
        _1766 = _1595;
        _1767 = _1607;
        _1768 = _1606;
        _1769 = _1605;
        _1770 = _1617;
        _1771 = _1616;
        _1772 = _1615;
        _1773 = _1630;
        _1774 = _1629;
        _1775 = _1628;
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
        _1777 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0)));
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)));
    }
    else
    {
        _1764 = _1457;
        _1765 = _1457;
        _1766 = _1457;
        _1767 = _1457;
        _1768 = _1457;
        _1769 = _1457;
        _1770 = _1457;
        _1771 = _1457;
        _1772 = _1457;
        _1773 = _1457;
        _1774 = _1457;
        _1775 = _1457;
        _1776 = 0.0;
        _1777 = 0.0;
        _1778 = 0.0;
    }
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1469)) + _1469;
    float _1789 = (cbModelParam._m0[1u].x * (_1777 - _1470)) + _1470;
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1471)) + _1471;
    float _1811 = fma(_1790, cbSceneParam._m0[89u].z, fma(_1789, cbSceneParam._m0[89u].y, _1788 * cbSceneParam._m0[89u].x));
    float _1814 = fma(_1790, cbSceneParam._m0[90u].z, fma(_1789, cbSceneParam._m0[90u].y, _1788 * cbSceneParam._m0[90u].x));
    float _1817 = fma(_1790, cbSceneParam._m0[91u].z, fma(_1789, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1788));
    float _1832 = _1091 * 0.5;
    float _1833 = _1092 * 0.5;
    float _1834 = _1093 * 0.5;
    float _1835 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1838 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1765, _1768, _1771, _1774));
    float _1841 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1875;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1848 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1456, _1460, _1463, _1466));
        float _1852 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1458, _1461, _1464, _1467));
        float _1856 = dot(vec4(_1832, _1833, _1834, 1.0), vec4(_1459, _1462, _1465, _1468));
        float _1863 = dot(vec4(cbModelParam._m0[39u]), vec4(_1832, _1833, _1834, 1.0));
        _1875 = dot(vec3(isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1863) ? 0.0 : (isnan(0.0) ? _1863 : max(0.0, _1863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1875 = 1.0;
    }
    float _1886;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1877 = dot(vec4(cbModelParam._m0[40u]), vec4(_1832, _1833, _1834, 1.0));
        _1886 = dot(vec3(isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)), isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0)), isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1886 = 1.0;
    }
    float _1890 = (_1886 * cbModelParam._m0[1u].x) + (_1875 * (1.0 - cbModelParam._m0[1u].x));
    float _1900 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1900 : min(cbModelParam._m0[25u].z, _1900));
    float _1982;
    float _1984;
    float _1986;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1949 = fma(_1155, cbModelParam._m0[13u].z, fma(_1151, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1147)) + cbModelParam._m0[13u].w;
        float _1953 = fma(_1155, cbModelParam._m0[14u].z, fma(_1151, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1147)) + cbModelParam._m0[14u].w;
        float _1957 = fma(_1155, cbModelParam._m0[15u].z, fma(_1151, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1147)) + cbModelParam._m0[15u].w;
        float _1960 = fma(_1093, cbModelParam._m0[13u].z, fma(_1092, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1091));
        float _1963 = fma(_1093, cbModelParam._m0[14u].z, fma(_1092, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1091));
        float _1966 = fma(_1093, cbModelParam._m0[15u].z, fma(_1092, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1091));
        float _1994;
        if (_1960 > 0.0)
        {
            _1994 = abs((1.0 - _1949) / _1960);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1949 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1994 = frontier_phi_14_12_ladder;
        }
        float _2218;
        if (_1963 > 0.0)
        {
            _2218 = abs((1.0 - _1953) / _1963);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1953 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2218 = frontier_phi_23_19_ladder;
        }
        float _2475;
        if (_1966 > 0.0)
        {
            _2475 = abs((1.0 - _1957) / _1966);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1957 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2475 = frontier_phi_35_30_ladder;
        }
        float _2477 = isnan(_2218) ? _1994 : (isnan(_1994) ? _2218 : min(_1994, _2218));
        float _2478 = isnan(_2475) ? _2477 : (isnan(_2477) ? _2475 : min(_2477, _2475));
        float _2482 = (_2478 * _1960) + _1949;
        float _2483 = (_2478 * _1963) + _1953;
        float _2484 = (_2478 * _1966) + _1957;
        float _2485 = _2478 * 9.9999997473787516355514526367188e-05;
        float _2487 = (-1.0) - _2485;
        float _2489 = _2485 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2484 > _2489) || ((_2484 < _2487) || ((_2483 > _2489) || ((_2483 < _2487) || ((_2482 < _2487) || (_2482 > _2489))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2612 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2484, cbModelParam._m0[9u].z, fma(_2483, cbModelParam._m0[9u].y, _2482 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2484, cbModelParam._m0[10u].z, fma(_2483, cbModelParam._m0[10u].y, _2482 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2484, cbModelParam._m0[11u].z, fma(_2483, cbModelParam._m0[11u].y, _2482 * cbModelParam._m0[11u].x))), _1901);
            frontier_phi_13_35_ladder = _2612.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2612.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2612.x * cbModelParam._m0[1u].y;
        }
        _1982 = frontier_phi_13_35_ladder_2;
        _1984 = frontier_phi_13_35_ladder_1;
        _1986 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1091, _1092, _1093), _1901);
        _1982 = _1970.x * cbModelParam._m0[1u].y;
        _1984 = _1970.y * cbModelParam._m0[1u].y;
        _1986 = _1970.z * cbModelParam._m0[1u].y;
    }
    float _1990 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _1991 = isnan(_1990) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1990 : min(cbModelParam._m0[25u].w, _1990));
    float _2081;
    float _2083;
    float _2085;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2045 = fma(_1155, cbModelParam._m0[21u].z, fma(_1151, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1147)) + cbModelParam._m0[21u].w;
        float _2049 = fma(_1155, cbModelParam._m0[22u].z, fma(_1151, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1147)) + cbModelParam._m0[22u].w;
        float _2053 = fma(_1155, cbModelParam._m0[23u].z, fma(_1151, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1147)) + cbModelParam._m0[23u].w;
        float _2056 = fma(_1093, cbModelParam._m0[21u].z, fma(_1092, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1091));
        float _2059 = fma(_1093, cbModelParam._m0[22u].z, fma(_1092, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1091));
        float _2062 = fma(_1093, cbModelParam._m0[23u].z, fma(_1092, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1091));
        float _2223;
        if (_2056 > 0.0)
        {
            _2223 = abs((1.0 - _2045) / _2056);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2045 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2223 = frontier_phi_25_21_ladder;
        }
        float _2502;
        if (_2059 > 0.0)
        {
            _2502 = abs((1.0 - _2049) / _2059);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2049 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2502 = frontier_phi_37_32_ladder;
        }
        float _2715;
        if (_2062 > 0.0)
        {
            _2715 = abs((1.0 - _2053) / _2062);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2053 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2715 = frontier_phi_46_43_ladder;
        }
        float _2717 = isnan(_2502) ? _2223 : (isnan(_2223) ? _2502 : min(_2223, _2502));
        float _2718 = isnan(_2715) ? _2717 : (isnan(_2717) ? _2715 : min(_2717, _2715));
        float _2722 = (_2718 * _2056) + _2045;
        float _2723 = (_2718 * _2059) + _2049;
        float _2724 = (_2718 * _2062) + _2053;
        float _2725 = _2718 * 9.9999997473787516355514526367188e-05;
        float _2726 = (-1.0) - _2725;
        float _2728 = _2725 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2724 > _2728) || ((_2724 < _2726) || ((_2723 > _2728) || ((_2723 < _2726) || ((_2722 < _2726) || (_2722 > _2728))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2923 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2724, cbModelParam._m0[17u].z, fma(_2723, cbModelParam._m0[17u].y, _2722 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2724, cbModelParam._m0[18u].z, fma(_2723, cbModelParam._m0[18u].y, _2722 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2724, cbModelParam._m0[19u].z, fma(_2723, cbModelParam._m0[19u].y, _2722 * cbModelParam._m0[19u].x))), _1991);
            frontier_phi_22_46_ladder = _2923.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2923.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2923.x * cbModelParam._m0[1u].z;
        }
        _2081 = frontier_phi_22_46_ladder_2;
        _2083 = frontier_phi_22_46_ladder_1;
        _2085 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2065 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1091, _1092, _1093), _1991);
        _2081 = _2065.x * cbModelParam._m0[1u].z;
        _2083 = _2065.y * cbModelParam._m0[1u].z;
        _2085 = _2065.z * cbModelParam._m0[1u].z;
    }
    float _2098 = (((_1118 * _1067) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2081 - _1982)) + _1982);
    float _2100 = (((_1118 * _1069) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2083 - _1984)) + _1984);
    float _2102 = (((_1118 * _1070) + _1119) * _1083) * ((cbModelParam._m0[1u].w * (_2085 - _1986)) + _1986);
    float _2105 = fma(_2102, cbSceneParam._m0[89u].z, fma(_2100, cbSceneParam._m0[89u].y, _2098 * cbSceneParam._m0[89u].x));
    float _2108 = fma(_2102, cbSceneParam._m0[90u].z, fma(_2100, cbSceneParam._m0[90u].y, _2098 * cbSceneParam._m0[90u].x));
    float _2111 = fma(_2102, cbSceneParam._m0[91u].z, fma(_2100, cbSceneParam._m0[91u].y, _2098 * cbSceneParam._m0[91u].x));
    vec4 _2119 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1005, _1006));
    float _2121 = _2119.w;
    float _2133 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2121);
    float _2134 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2121);
    float _2135 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2121);
    uvec4 _2139 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2141 = _2139.x * 14u;
    uint _2142 = _2141 + 13u;
    float _2149 = _1083 + (-1.0);
    float _2154 = (cbLight._m0[_2142].x * _2149) + 1.0;
    float _2155 = (cbLight._m0[_2142].y * _2149) + 1.0;
    float _2156 = (cbLight._m0[_2142].z * _2149) + 1.0;
    float _2157 = (cbLight._m0[_2142].w * _2149) + 1.0;
    uint _2158 = _2141 + 5u;
    float _2164 = isnan(1.0) ? _2155 : (isnan(_2155) ? 1.0 : min(_2155, 1.0));
    uint _2168 = _2141 + 4u;
    float _2177 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
    uint _2181 = _2141 | 1u;
    float _2192 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_918, _919, _920));
    float _2195 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_918, _919, _920));
    float _4371 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _4382 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2200 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2202 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2209 = ((cbLight._m0[_2158].x * _2164) * _2202) + (((cbLight._m0[_2168].x * _2133) * _2177) * _2200);
    float _2210 = ((_2164 * cbLight._m0[_2158].y) * _2202) + (((cbLight._m0[_2168].y * _2134) * _2177) * _2200);
    float _2211 = ((_2164 * cbLight._m0[_2158].z) * _2202) + (((cbLight._m0[_2168].z * _2135) * _2177) * _2200);
    uvec4 _2215 = floatBitsToUint(cbLight._m0[_2141 + 12u]);
    bool _2217 = _2215.x == 0u;
    float _2228;
    float _2230;
    float _2232;
    if (_2217)
    {
        _2228 = _2209;
        _2230 = _2210;
        _2232 = _2211;
    }
    else
    {
        uint _2236 = _2141 + 6u;
        float _2252 = (dot(vec3(cbLight._m0[_2141 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2253 = _2252 * _2252;
        float _4393 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2254 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2255 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2228 = (((cbLight._m0[_2236].x * 0.3183098733425140380859375) * _2254) * _2255) + _2209;
        _2230 = (((cbLight._m0[_2236].y * 0.3183098733425140380859375) * _2254) * _2255) + _2210;
        _2232 = (((cbLight._m0[_2236].z * 0.3183098733425140380859375) * _2254) * _2255) + _2211;
    }
    bool _2235 = _2215.y == 0u;
    float _2273;
    float _2275;
    float _2277;
    if (_2235)
    {
        _2273 = _2228;
        _2275 = _2230;
        _2277 = _2232;
    }
    else
    {
        uint _2446 = _2141 + 7u;
        float _2462 = (dot(vec3(cbLight._m0[_2141 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2463 = _2462 * _2462;
        float _4409 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0));
        float _2464 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2465 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2273 = (((cbLight._m0[_2446].x * 0.3183098733425140380859375) * _2464) * _2465) + _2228;
        _2275 = (((cbLight._m0[_2446].y * 0.3183098733425140380859375) * _2464) * _2465) + _2230;
        _2277 = (((cbLight._m0[_2446].z * 0.3183098733425140380859375) * _2464) * _2465) + _2232;
    }
    uint _2280 = _2141 + 8u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2141].w)) * _921) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2141].x + _997;
    float _2296 = cbLight._m0[_2141].y + _998;
    float _2297 = cbLight._m0[_2141].z + _999;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2141].xyz));
    float _4425 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _2309 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2310 = dot(vec3(_918, _919, _920), vec3(_2302, _2303, _2304));
    float _4447 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2313 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2314 = dot(vec3(cbLight._m0[_2141].xyz), vec3(_2302, _2303, _2304));
    float _4458 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
    float _2318 = _2294 * _2294;
    float _2322 = ((_2313 * _2313) * (_2318 + (-1.0))) + 1.0;
    float _2330 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2331 = 0.959999978542327880859375 - _1064;
    float _2333 = 0.959999978542327880859375 - _1065;
    float _2334 = 0.959999978542327880859375 - _1066;
    float _2341 = 1.0 - _2294;
    float _2352 = (0.5 / (((_2309 * ((_2308 * _2341) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2341) + _2294) * _2308))) * _2308;
    float _4469 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2318 / ((_2322 * _2322) * 3.141590118408203125));
    uint _2368 = _2141 + 9u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2181].w)) * _921) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2181].x + _997;
    float _2382 = cbLight._m0[_2181].y + _998;
    float _2383 = cbLight._m0[_2181].z + _999;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2181].xyz));
    float _4480 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2395 = dot(vec3(_918, _919, _920), vec3(_2388, _2389, _2390));
    float _4491 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2181].xyz), vec3(_2388, _2389, _2390));
    float _4502 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2380 * _2380;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2414 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2421 = 1.0 - _2380;
    float _2431 = (0.5 / (((_2309 * ((_2394 * _2421) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2421) + _2380) * _2394))) * _2394;
    float _4513 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
    float _2433 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    float _2443 = (((((_2414 * _2331) + _1067) * cbLight._m0[_2368].x) * _2433) * _2164) + ((((cbLight._m0[_2280].x * _2133) * ((_2330 * _2331) + _1067)) * _2354) * _2177);
    float _2444 = (((((_2414 * _2333) + _1069) * cbLight._m0[_2368].y) * _2433) * _2164) + ((((cbLight._m0[_2280].y * _2134) * ((_2330 * _2333) + _1069)) * _2354) * _2177);
    float _2445 = (((((_2414 * _2334) + _1070) * cbLight._m0[_2368].z) * _2433) * _2164) + ((((cbLight._m0[_2280].z * _2135) * ((_2330 * _2334) + _1070)) * _2354) * _2177);
    float _2507;
    float _2509;
    float _2511;
    if (_2217)
    {
        _2507 = _2443;
        _2509 = _2444;
        _2511 = _2445;
    }
    else
    {
        uint _2513 = _2141 + 2u;
        uint _2517 = _2141 + 10u;
        float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2513].w)) * _921) * 0.949999988079071044921875);
        float _2532 = _2531 * _2531;
        float _2533 = cbLight._m0[_2513].x + _997;
        float _2534 = cbLight._m0[_2513].y + _998;
        float _2535 = cbLight._m0[_2513].z + _999;
        float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
        float _2540 = _2539 * _2533;
        float _2541 = _2539 * _2534;
        float _2542 = _2539 * _2535;
        float _2543 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2513].xyz));
        float _4524 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2547 = dot(vec3(_918, _919, _920), vec3(_2540, _2541, _2542));
        float _4535 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2550 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2551 = dot(vec3(cbLight._m0[_2513].xyz), vec3(_2540, _2541, _2542));
        float _4546 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _2532 * _2532;
        float _2559 = ((_2550 * _2550) * (_2555 + (-1.0))) + 1.0;
        float _2566 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2573 = 1.0 - _2532;
        float _2583 = (0.5 / (((_2309 * ((_2546 * _2573) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2573) + _2532) * _2546))) * _2546;
        float _4557 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2585 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2555 / ((_2559 * _2559) * 3.141590118408203125));
        float _2586 = isnan(1.0) ? _2156 : (isnan(_2156) ? 1.0 : min(_2156, 1.0));
        _2507 = (((((_2566 * _2331) + _1067) * cbLight._m0[_2517].x) * _2585) * _2586) + _2443;
        _2509 = (((((_2566 * _2333) + _1069) * cbLight._m0[_2517].y) * _2585) * _2586) + _2444;
        _2511 = (((((_2566 * _2334) + _1070) * cbLight._m0[_2517].z) * _2585) * _2586) + _2445;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2235)
    {
        _2621 = _2507;
        _2623 = _2509;
        _2625 = _2511;
    }
    else
    {
        uint _2632 = _2141 + 3u;
        uint _2636 = _2141 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _921) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _997;
        float _2653 = cbLight._m0[_2632].y + _998;
        float _2654 = cbLight._m0[_2632].z + _999;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2632].xyz));
        float _4573 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2666 = dot(vec3(_918, _919, _920), vec3(_2659, _2660, _2661));
        float _4584 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4595 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2685 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2692 = 1.0 - _2651;
        float _2702 = (0.5 / (((_2309 * ((_2665 * _2692) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2309 * _2692) + _2651) * _2665))) * _2665;
        float _4606 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
        float _2704 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2705 = isnan(1.0) ? _2157 : (isnan(_2157) ? 1.0 : min(_2157, 1.0));
        _2621 = (((((_2685 * _2331) + _1067) * cbLight._m0[_2636].x) * _2704) * _2705) + _2507;
        _2623 = (((((_2685 * _2333) + _1069) * cbLight._m0[_2636].y) * _2704) * _2705) + _2509;
        _2625 = (((((_2685 * _2334) + _1070) * cbLight._m0[_2636].z) * _2704) * _2705) + _2511;
    }
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    float _2848;
    float _2850;
    if (_2139.y == 0u)
    {
        float _2780 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2781 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2780;
        float _2782 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2780;
        float _2783 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2780;
        uvec4 _2795 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2796 = _2795.x;
        uint _2807 = uint((float(_2795.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1006) / _2796))) + floor(float(uint(cbSceneParam._m0[85u].x * _1005) / _2796)));
        float _2817 = (log2(_2783 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2818 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        uint _2821 = uint(isnan(14.0) ? _2818 : (isnan(_2818) ? 14.0 : min(_2818, 14.0)));
        uvec4 _2826 = texelFetch(g_lightClusterGridBuffer, int(((_2821 << 2u) + (_2807 << 6u)) >> 2u));
        uint _2827 = _2826.x;
        uint _2828 = _2795.z;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        float _2938;
        if (((((1u << ((_2828 >> 4u) & 15u)) + 4294967295u) & _2827) == 0u) || ((_2828 & 240u) == 0u))
        {
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
            _2938 = 0.0;
        }
        else
        {
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _2939;
            float _3072 = 0.0;
            float _3073 = 0.0;
            float _3074 = 0.0;
            float _3075 = 0.0;
            float _3076 = 0.0;
            float _3077 = 0.0;
            uint _3078 = 0u;
            uint _3087;
            bool _3088;
            for (;;)
            {
                _3087 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3078 << 2u)) >> 2u)).x;
                _3088 = _3087 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3088)
                {
                    frontier_phi_61_pred = _3072;
                    frontier_phi_61_pred_1 = _3077;
                    frontier_phi_61_pred_2 = _3076;
                    frontier_phi_61_pred_3 = _3075;
                    frontier_phi_61_pred_4 = _3074;
                    frontier_phi_61_pred_5 = _3073;
                }
                else
                {
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    uint _3202;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3074;
                    _3199 = _3075;
                    _3200 = _3076;
                    _3201 = _3077;
                    _3202 = _3087;
                    float _3128;
                    float _3129;
                    float _3130;
                    float _3131;
                    float _3132;
                    float _3133;
                    for (;;)
                    {
                        uint _3206 = uint(findLSB(_3202)) + (_3078 << 5u);
                        uint _3203 = (_3202 + 4294967295u) & _3202;
                        uint _3208 = _3206 * 48u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3208)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3208 + 3u)).x));
                        uint _3228 = (_3206 * 48u) + 4u;
                        vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 3u)).x));
                        uint _3247 = (_3206 * 48u) + 8u;
                        vec3 _3258 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3247)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3247 + 2u)).x));
                        float _3262 = _3222.x - _2781;
                        float _3263 = _3222.y - _2782;
                        float _3264 = _3222.z - _2783;
                        float _3265 = dot(vec3(_3262, _3263, _3264), vec3(_3262, _3263, _3264));
                        float _3268 = inversesqrt(_3265);
                        float _3269 = _3268 * _3262;
                        float _3270 = _3268 * _3263;
                        float _3271 = _3268 * _3264;
                        float _3272 = dot(vec3(_1024, _1027, _1030), vec3(_3269, _3270, _3271));
                        float _3277 = 1.0 - (_3265 * _3222.w);
                        float _4632 = isnan(0.0) ? _3277 : (isnan(_3277) ? 0.0 : max(_3277, 0.0));
                        float _3278 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3279 = sqrt(_3265) * _3241.w;
                        float _3282 = 1.39999997615814208984375 / (_3279 + 1.39999997615814208984375);
                        float _3283 = _3282 * _3282;
                        float _3286 = ((1.0 - _3283) * _3272) + _3283;
                        float _3289 = _3279 * _3279;
                        float _3293 = ((isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))) * _3278) / ((_3289 * 0.699999988079071044921875) + 1.0);
                        float _3297 = (-0.0) - _2781;
                        float _3298 = (-0.0) - _2782;
                        float _3299 = (-0.0) - _2783;
                        float _3303 = inversesqrt(dot(vec3(_3297, _3298, _3299), vec3(_3297, _3298, _3299)));
                        float _3304 = _3303 * _3297;
                        float _3305 = _3303 * _3298;
                        float _3306 = _3303 * _3299;
                        float _3314 = exp2(log2(1.0 / ((_3289 * 3.5) + 5.0)) * 0.25);
                        float _3315 = 1.0 - _1099;
                        float _3322 = sqrt(1.0 - ((1.0 - (_3315 * _3315)) * (1.0 - (_3314 * _3314))));
                        float _3323 = _3322 * _3322;
                        float _3324 = _3323 * _3323;
                        float _3325 = _3304 + _3269;
                        float _3326 = _3305 + _3270;
                        float _3327 = _3306 + _3271;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3335 = dot(vec3(_1024, _1027, _1030), vec3(_3304, _3305, _3306));
                        float _4648 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3339 = dot(vec3(_1024, _1027, _1030), vec3(_3331 * _3325, _3331 * _3326, _3331 * _3327));
                        float _4659 = isnan(0.0) ? _3339 : (isnan(_3339) ? 0.0 : max(_3339, 0.0));
                        float _3342 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3346 = ((_3342 * _3342) * (_3324 + (-1.0))) + 1.0;
                        float _3347 = _3282 * _3323;
                        float _3348 = _3347 * _3347;
                        float _3351 = ((1.0 - _3348) * _3272) + _3348;
                        float _4670 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                        float _3352 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3353 = 1.0 - _3323;
                        float _3363 = (0.5 / (((_3352 * ((_3338 * _3353) + _3323)) + 9.9999999392252902907785028219223e-09) + (((_3352 * _3353) + _3323) * _3338))) * _3352;
                        float _4681 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3374 = (((_3324 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3346 * _3346) * ((_3289 * 2.1991131305694580078125) + 3.141590118408203125))) * _3278;
                        _3131 = (_3293 * _3241.x) + _3199;
                        _3132 = (_3293 * _3241.y) + _3200;
                        _3133 = (_3293 * _3241.z) + _3201;
                        _3128 = (_3374 * _3258.x) + _3196;
                        _3129 = (_3374 * _3258.y) + _3197;
                        _3130 = (_3374 * _3258.z) + _3198;
                        if (_3203 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3130;
                            _3199 = _3131;
                            _3200 = _3132;
                            _3201 = _3133;
                            _3202 = _3203;
                        }
                    }
                    frontier_phi_61_pred = _3128;
                    frontier_phi_61_pred_1 = _3133;
                    frontier_phi_61_pred_2 = _3132;
                    frontier_phi_61_pred_3 = _3131;
                    frontier_phi_61_pred_4 = _3130;
                    frontier_phi_61_pred_5 = _3129;
                }
                _2929 = frontier_phi_61_pred;
                _2939 = frontier_phi_61_pred_1;
                _2937 = frontier_phi_61_pred_2;
                _2935 = frontier_phi_61_pred_3;
                _2933 = frontier_phi_61_pred_4;
                _2931 = frontier_phi_61_pred_5;
                uint _3079 = _3078 + 1u;
                if (_3079 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3072 = _2929;
                    _3073 = _2931;
                    _3074 = _2933;
                    _3075 = _2935;
                    _3076 = _2937;
                    _3077 = _2939;
                    _3078 = _3079;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
            _2938 = _2939;
        }
        uvec4 _2942 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2943 = _2942.z;
        uint _2945 = (_2943 >> 8u) & 15u;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        float _3048;
        float _3050;
        if (((4294967295u << _2945) & _2827) == 0u)
        {
            _3040 = _2928;
            _3042 = _2930;
            _3044 = _2932;
            _3046 = _2934;
            _3048 = _2936;
            _3050 = _2938;
        }
        else
        {
            float _3065 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
            float _3066 = _3065 * _2781;
            float _3067 = _3065 * _2782;
            float _3068 = _3065 * _2783;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2945 < ((_2943 >> 12u) & 15u))
            {
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3049;
                float _3051;
                float _3179 = _2928;
                float _3180 = _2930;
                float _3181 = _2932;
                float _3182 = _2934;
                float _3183 = _2936;
                float _3184 = _2938;
                uint _3185 = _2945;
                uint _3194;
                bool _3195;
                for (;;)
                {
                    _3194 = texelFetch(g_lightClassification, int((((_2821 << 5u) + (_2807 << 9u)) + (_3185 << 2u)) >> 2u)).x;
                    _3195 = _3194 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3195)
                    {
                        frontier_phi_67_pred = _3182;
                        frontier_phi_67_pred_1 = _3183;
                        frontier_phi_67_pred_2 = _3184;
                        frontier_phi_67_pred_3 = _3181;
                        frontier_phi_67_pred_4 = _3180;
                        frontier_phi_67_pred_5 = _3179;
                    }
                    else
                    {
                        float _3379;
                        float _3380;
                        float _3381;
                        float _3382;
                        float _3383;
                        float _3384;
                        float _3672;
                        float _3673;
                        float _3674;
                        float _3675;
                        float _3676;
                        float _3677;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        float _3394 = _3181;
                        float _3395 = _3182;
                        float _3396 = _3183;
                        float _3397 = _3184;
                        uint _3398 = _3194;
                        uint _3399;
                        vec4 _3424;
                        float _3425;
                        vec4 _3440;
                        vec3 _3452;
                        vec4 _3467;
                        vec4 _3482;
                        float _3528;
                        bool _3529;
                        for (;;)
                        {
                            uint _3409 = ((_3185 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3398));
                            _3399 = (_3398 + 4294967295u) & _3398;
                            uint _3411 = _3409 * 40u;
                            _3424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3411 + 3u)).x));
                            _3425 = _3424.w;
                            uint _3427 = (_3409 * 40u) + 4u;
                            _3440 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3427)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3427 + 3u)).x));
                            uint _3442 = (_3409 * 40u) + 8u;
                            _3452 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3442)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3442 + 2u)).x));
                            uint _3454 = (_3409 * 40u) + 16u;
                            _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            uint _3469 = (_3409 * 40u) + 20u;
                            _3482 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3469 + 3u)).x));
                            uint _3484 = (_3409 * 40u) + 24u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            uint _3503 = (_3409 * 40u) + 28u;
                            vec4 _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            _3528 = fma(_2783, _3516.z, fma(_2782, _3516.y, _3516.x * _2781)) + _3516.w;
                            _3529 = !((fma(_2783, _3497.z, fma(_2782, _3497.y, _3497.x * _2781)) + _3497.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3529)
                            {
                                float _3556 = _3424.x - _2781;
                                float _3557 = _3424.y - _2782;
                                float _3558 = _3424.z - _2783;
                                float _3559 = dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558));
                                float _3562 = inversesqrt(_3559);
                                float _3563 = _3562 * _3556;
                                float _3564 = _3562 * _3557;
                                float _3565 = _3562 * _3558;
                                float _3569 = 1.0 - (_3559 / (_3425 * _3425));
                                float _4692 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3570 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3574 = sqrt(_3559) * _3440.w;
                                float _3576 = 1.39999997615814208984375 / (_3574 + 1.39999997615814208984375);
                                float _3577 = _3576 * _3576;
                                float _3580 = ((1.0 - _3577) * dot(vec3(_3563, _3564, _3565), vec3(_1024, _1027, _1030))) + _3577;
                                float _3583 = _3574 * _3574;
                                float _3587 = (fma(_2783, _3467.z, fma(_2782, _3467.y, _3467.x * _2781)) + _3467.w) / _3528;
                                float _3588 = (fma(_2783, _3482.z, fma(_2782, _3482.y, _3482.x * _2781)) + _3482.w) / _3528;
                                float _3592 = 1.0 - dot(vec2(_3587, _3588), vec2(_3587, _3588));
                                float _4708 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3593 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3594 = _3593 * (((isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0))) * _3570) / ((_3583 * 0.699999988079071044921875) + 1.0));
                                float _3606 = exp2(log2(1.0 / ((_3583 * 3.5) + 5.0)) * 0.25);
                                float _3607 = 1.0 - _1099;
                                float _3614 = sqrt(1.0 - ((1.0 - (_3607 * _3607)) * (1.0 - (_3606 * _3606))));
                                float _3615 = _3614 * _3614;
                                float _3616 = _3615 * _3615;
                                float _3617 = _3563 - _3066;
                                float _3618 = _3564 - _3067;
                                float _3619 = _3565 - _3068;
                                float _3623 = inversesqrt(dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619)));
                                float _3627 = dot(vec3(_1024, _1027, _1030), vec3((-0.0) - _3066, (-0.0) - _3067, (-0.0) - _3068));
                                float _4719 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3631 = dot(vec3(_1024, _1027, _1030), vec3(_3623 * _3617, _3623 * _3618, _3623 * _3619));
                                float _4730 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3634 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3638 = ((_3634 * _3634) * (_3616 + (-1.0))) + 1.0;
                                float _3639 = _3576 * _3615;
                                float _3640 = _3639 * _3639;
                                float _3646 = ((1.0 - _3640) * dot(vec3(_1024, _1027, _1030), vec3(_3563, _3564, _3565))) + _3640;
                                float _4741 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3648 = 1.0 - _3615;
                                float _3658 = (0.5 / (((_3647 * ((_3630 * _3648) + _3615)) + 9.9999999392252902907785028219223e-09) + (((_3647 * _3648) + _3615) * _3630))) * _3647;
                                float _4752 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3668 = (_3593 * _3570) * (((_3616 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3638 * _3638) * ((_3583 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3668 * _3452.x;
                                frontier_phi_73_pred_1 = _3668 * _3452.y;
                                frontier_phi_73_pred_2 = _3594 * _3440.z;
                                frontier_phi_73_pred_3 = _3594 * _3440.y;
                                frontier_phi_73_pred_4 = _3594 * _3440.x;
                                frontier_phi_73_pred_5 = _3668 * _3452.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3672 = frontier_phi_73_pred;
                            _3673 = frontier_phi_73_pred_1;
                            _3677 = frontier_phi_73_pred_2;
                            _3676 = frontier_phi_73_pred_3;
                            _3675 = frontier_phi_73_pred_4;
                            _3674 = frontier_phi_73_pred_5;
                            _3382 = _3675 + _3395;
                            _3383 = _3676 + _3396;
                            _3384 = _3677 + _3397;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3381 = _3674 + _3394;
                            if (_3399 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3381;
                                _3395 = _3382;
                                _3396 = _3383;
                                _3397 = _3384;
                                _3398 = _3399;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3382;
                        frontier_phi_67_pred_1 = _3383;
                        frontier_phi_67_pred_2 = _3384;
                        frontier_phi_67_pred_3 = _3381;
                        frontier_phi_67_pred_4 = _3380;
                        frontier_phi_67_pred_5 = _3379;
                    }
                    _3047 = frontier_phi_67_pred;
                    _3049 = frontier_phi_67_pred_1;
                    _3051 = frontier_phi_67_pred_2;
                    _3045 = frontier_phi_67_pred_3;
                    _3043 = frontier_phi_67_pred_4;
                    _3041 = frontier_phi_67_pred_5;
                    uint _3186 = _3185 + 1u;
                    if (_3186 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3179 = _3041;
                        _3180 = _3043;
                        _3181 = _3045;
                        _3182 = _3047;
                        _3183 = _3049;
                        _3184 = _3051;
                        _3185 = _3186;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3049;
                frontier_phi_55_56_ladder_1 = _3051;
                frontier_phi_55_56_ladder_2 = _3047;
                frontier_phi_55_56_ladder_3 = _3045;
                frontier_phi_55_56_ladder_4 = _3043;
                frontier_phi_55_56_ladder_5 = _3041;
            }
            else
            {
                frontier_phi_55_56_ladder = _2936;
                frontier_phi_55_56_ladder_1 = _2938;
                frontier_phi_55_56_ladder_2 = _2934;
                frontier_phi_55_56_ladder_3 = _2932;
                frontier_phi_55_56_ladder_4 = _2930;
                frontier_phi_55_56_ladder_5 = _2928;
            }
            _3040 = frontier_phi_55_56_ladder_5;
            _3042 = frontier_phi_55_56_ladder_4;
            _3044 = frontier_phi_55_56_ladder_3;
            _3046 = frontier_phi_55_56_ladder_2;
            _3048 = frontier_phi_55_56_ladder;
            _3050 = frontier_phi_55_56_ladder_1;
        }
        float _3055 = isnan(1.0) ? _1083 : (isnan(_1083) ? 1.0 : min(_1083, 1.0));
        _2840 = (_3055 * _3046) + _2273;
        _2842 = (_3055 * _3048) + _2275;
        _2844 = (_3055 * _3050) + _2277;
        _2846 = ((_3040 * _1067) * _3055) + _2621;
        _2848 = ((_3042 * _1069) * _3055) + _2623;
        _2850 = ((_3044 * _1070) * _3055) + _2625;
    }
    else
    {
        _2840 = _2273;
        _2842 = _2275;
        _2844 = _2277;
        _2846 = _2621;
        _2848 = _2623;
        _2850 = _2625;
    }
    float _4768 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
    float _4779 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _4790 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    uint _2870 = _259 + 6u;
    float _2878 = _1005 / cbSceneParam._m0[86u].x;
    float _2879 = _1006 / cbSceneParam._m0[86u].y;
    vec4 _2893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2895 = _2893.x;
    float _2896 = _2893.y;
    float _2897 = _2893.z;
    float _2898 = _2893.w;
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _2953 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _2954 = _2953 / _940;
        float _2965 = _2954 * _990;
        float _2966 = _991 * _2954;
        float _2967 = (-0.0) - _2966;
        float _2968 = _2954 * _992;
        float _2970 = (cbSceneParam._m0[77u].w * _2967) / _2953;
        float _2971 = _2970 + cbSceneParam._m0[79u].w;
        float _2972 = cbSceneParam._m0[79u].w - _2966;
        float _2978 = sqrt(((_2965 * _2965) + (_2966 * _2966)) + (_2968 * _2968));
        float _2981 = (1.0 - (cbSceneParam._m0[77u].w / _2953)) * _2978;
        float _2986 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2988 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3141;
        if (abs((_2967 - _2970) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3141 = ((((_2971 > 0.0) ? exp2(_2986 * _2971) : (2.0 - exp2(_2988 * _2971))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2981;
        }
        else
        {
            float _3101 = 1.0 / cbSceneParam._m0[80u].x;
            float _3102 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : max(_2971, _2972));
            float _3103 = isnan(_2972) ? _2971 : (isnan(_2971) ? _2972 : min(_2971, _2972));
            float _3112 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : min(_3102, 0.0));
            float _3113 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : min(_3103, 0.0));
            _3141 = ((abs(_2978 / _2967) * cbSceneParam._m0[80u].y) * ((((_3112 - _3113) * 2.0) - ((exp2(_2986 * (isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0)))) - exp2(_2986 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0))))) * _3101)) - ((exp2(_2988 * _3112) - exp2(_2988 * _3113)) * _3101))) + (_2981 * cbSceneParam._m0[80u].z);
        }
        vec4 _3143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2878, _2879, 1.0), 0.0);
        float _3152 = exp2((_3141 * (-1.44269502162933349609375)) * (1.0 - _3143.w));
        float _3153 = log2(_3152);
        float _3169 = log2(_2898);
        _2990 = (exp2(_3169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].x)) * _3143.x) / cbSceneParam._m0[78u].x)) + _2895;
        _2992 = (exp2(_3169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].y)) * _3143.y) / cbSceneParam._m0[78u].y)) + _2896;
        _2994 = (exp2(_3169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3153 * cbSceneParam._m0[78u].z)) * _3143.z) / cbSceneParam._m0[78u].z)) + _2897;
        _2996 = _3152 * _2898;
    }
    else
    {
        _2990 = _2895;
        _2992 = _2896;
        _2994 = _2897;
        _2996 = _2898;
    }
    float _3008 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3009 = _3008 == 3.0;
    float _3010 = log2(_2996);
    float _3017 = exp2(_3010 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2840 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1083))) + ((_2846 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3018 = exp2(_3010 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2842 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1083))) + ((_2848 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3019 = exp2(_3010 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2844 + ((isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0))) * _1083))) + ((_2850 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1890)) * cbPerFrame._m0[3u].x));
    float _3028 = (_3008 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3028 * (_3009 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.y = _3028 * (_3009 ? _3018 : (_3018 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.z = _3028 * (_3009 ? _3019 : (_3019 + (cbSceneParam._m0[72u].w * _2994)));
    SV_Target.w = cbInstanceData._m0[_2870].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2870].w;
}


