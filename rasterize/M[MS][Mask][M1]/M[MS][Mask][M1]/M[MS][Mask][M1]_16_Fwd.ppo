#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1306;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _251 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _251 + 1u;
    uint _260 = _251 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_251].x * cbInstanceData._m0[_251].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _291 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _297 = _291.x * cbMtdParam._m0[11u].x;
    float _298 = _291.y * cbMtdParam._m0[11u].y;
    float _299 = _291.z * cbMtdParam._m0[11u].z;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _372 = _370.x;
    float _384 = dot(vec4(_372, _370.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _401 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_372 - _384) * cbMtdParam._m0[23u].w) + _384) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3634 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _409 = (_402 * ((_318.x * cbMtdParam._m0[12u].x) - _297)) + _297;
    float _410 = (_402 * ((_318.y * cbMtdParam._m0[12u].y) - _298)) + _298;
    float _411 = (_402 * ((_318.z * cbMtdParam._m0[12u].z) - _299)) + _299;
    vec4 _429 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _448 = _446.x;
    float _449 = _446.y;
    float _450 = _446.z;
    float _459 = ((_429.z - _450) * _402) + _450;
    float _462 = ((((_429.x - _448) * _402) + _448) * 2.0) + (-1.0);
    float _464 = ((((_429.y - _449) * _402) + _449) * 2.0) + (-1.0);
    float _465 = dot(vec2(_462, _464), vec2(_462, _464));
    float _3645 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _470 = sqrt(1.0 - (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))));
    vec4 _486 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _511 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _513 = _511.x;
    float _514 = 1.0 - _513;
    float _523 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _526 = ((isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : min(_523, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _535 = (_526 - ((((((_513 - _514) * cbMtdParam._m0[24u].z) + _514) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _526))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3666 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    float _543 = (_536 * (cbMtdParam._m0[17u].x - _409)) + _409;
    float _544 = (_536 * (cbMtdParam._m0[17u].y - _410)) + _410;
    float _545 = (_536 * (cbMtdParam._m0[17u].z - _411)) + _411;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _270) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _271) + cbTextureTilingScale._m0[19u].w));
    float _559 = _557.x;
    float _560 = 1.0 - _559;
    float _585 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_559 - _560) * cbMtdParam._m0[24u].w) + _560) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3677 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _586 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _594 = ((((cbMtdParam._m0[10u].x - _543) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _586) + _543;
    float _595 = ((((cbMtdParam._m0[10u].y - _544) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _586) + _544;
    float _596 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _545)) * _586) + _545;
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _624 = _622.x;
    float _642 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _624) * _402) + _624;
    float _646 = ((_608.x - _642) * cbMtdParam._m0[19u].z) + _642;
    float _648 = _646 - (_646 * _536);
    float _650 = _648 - (_648 * _586);
    float _654 = (cbMtdParam._m0[19u].w * (_486.z - _459)) + _459;
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _675 = (_668.x * 2.0) + (-1.0);
    float _676 = (_668.y * 2.0) + (-1.0);
    float _677 = dot(vec2(_675, _676), vec2(_675, _676));
    float _3688 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _685 = (_536 * (_668.z - _654)) + _654;
    float _688 = ((cbMtdParam._m0[23u].x - _685) * _586) + _685;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _270) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _271) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _713 = (_707.x * 2.0) + (-1.0);
    float _714 = (_707.y * 2.0) + (-1.0);
    float _715 = dot(vec2(_713, _714), vec2(_713, _714));
    float _3699 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _723 = (((_486.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _462;
    float _724 = (((_486.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _464;
    float _736 = (((_675 - _723) + (cbMtdParam._m0[21u].x * _723)) * _536) + _723;
    float _737 = (((_676 - _724) + (cbMtdParam._m0[21u].x * _724)) * _536) + _724;
    float _738 = (_536 * (sqrt(1.0 - (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) - _470)) + _470;
    float _749 = (((_713 - _736) + (_736 * cbMtdParam._m0[22u].z)) * _586) + _736;
    float _750 = (((_714 - _737) + (_737 * cbMtdParam._m0[22u].z)) * _586) + _737;
    float _751 = ((sqrt(1.0 - (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) - _738) * _586) + _738;
    float _753 = cbMtdParam._m0[22u].x + _486.w;
    float _756 = fma(_751, _238 * NORMAL.x, fma(_750, _245 * TANGENT.x, (_231 * _223) * _749));
    float _759 = fma(_751, _238 * NORMAL.y, fma(_750, _245 * TANGENT.y, (_231 * _224) * _749));
    float _762 = fma(_751, _238 * NORMAL.z, fma(_750, _245 * TANGENT.z, (_231 * _225) * _749));
    float _766 = inversesqrt(dot(vec3(_756, _759, _762), vec3(_756, _759, _762)));
    float _767 = _766 * _756;
    float _768 = _766 * _759;
    float _769 = _766 * _762;
    float _3710 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _770 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _3732 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3743 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3754 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3765 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _775 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _789 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _839 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _829);
    float _840 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _829);
    float _841 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _829);
    float _845 = inversesqrt(dot(vec3(_839, _840, _841), vec3(_839, _840, _841)));
    float _846 = _839 * _845;
    float _847 = _840 * _845;
    float _848 = _841 * _845;
    float _854 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _855 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_769, cbSceneParam._m0[5u].z, fma(_768, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _767));
    float _876 = fma(_769, cbSceneParam._m0[6u].z, fma(_768, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _767));
    float _879 = fma(_769, cbSceneParam._m0[7u].z, fma(_768, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _767));
    uint _893 = (_251 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3776 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
    float _905 = 1.0 - _775;
    float _906 = _902 * _905;
    float _907 = _903 * _905;
    float _908 = _904 * _905;
    float _913 = (_902 + (-0.039999999105930328369140625)) * _775;
    float _914 = (_903 + (-0.039999999105930328369140625)) * _775;
    float _915 = (_904 + (-0.039999999105930328369140625)) * _775;
    float _916 = _913 + 0.039999999105930328369140625;
    float _918 = _914 + 0.039999999105930328369140625;
    float _919 = _915 + 0.039999999105930328369140625;
    vec4 _928 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _854, cbSceneParam._m0[86u].y * _855));
    float _932 = ((isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0))) * TEXCOORD_5.w) * _928.x;
    float _933 = dot(vec3(_767, _768, _769), vec3(_846, _847, _848));
    float _936 = _933 * 2.0;
    float _940 = (_936 * _767) - _846;
    float _941 = (_936 * _768) - _847;
    float _942 = (_936 * _769) - _848;
    float _946 = abs(dot(vec3(_846, _847, _848), vec3(_767, _768, _769)));
    float _3809 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _948 = sqrt(_770);
    float _961 = exp2((_948 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_948 * 3.0));
    float _967 = (1.0 - _961) * ((_948 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _968 = _961 * _948;
    float _996 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1000 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1004 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1030 = fma(_1004, cbModelParam._m0[26u].z, fma(_1000, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _996));
        float _1034 = fma(_1004, cbModelParam._m0[27u].z, fma(_1000, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _996));
        float _1038 = fma(_1004, cbModelParam._m0[28u].z, fma(_1000, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _996));
        float _1063 = _996 + _767;
        float _1064 = _1000 + _768;
        float _1065 = _1004 + _769;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1030;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1034;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1038;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1030 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1034 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1038 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_767, _768, _769), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3857 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_767, _768, _769), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3868 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3879 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3890 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_767, _768, _769), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3901 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3912 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3923 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1345 = fma(_1004, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _996));
        float _1349 = fma(_1004, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _996));
        float _1353 = fma(_1004, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _996));
        float _1376 = _996 + _767;
        float _1377 = _1000 + _768;
        float _1378 = _1004 + _769;
        float _1388 = fma(_1378, cbModelParam._m0[30u].z, fma(_1377, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1376)) - _1345;
        float _1389 = fma(_1378, cbModelParam._m0[31u].z, fma(_1377, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1376)) - _1349;
        float _1390 = fma(_1378, cbModelParam._m0[32u].z, fma(_1377, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1376)) - _1353;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1407 = ((_1394 * _1388) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1345 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1389) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1349 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1394 * _1390) / cbModelParam._m0[35u].z) + ((((((_1353 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1407, _1408, _1409), 0.0);
        float _1444 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1411.x + (-0.5));
        float _1446 = _1444 * (_1411.y + (-0.5));
        float _1447 = _1444 * (_1411.z + (-0.5));
        float _1454 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1418.x + (-0.5));
        float _1456 = _1454 * (_1418.y + (-0.5));
        float _1457 = _1454 * (_1418.z + (-0.5));
        float _1464 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1425.x + (-0.5));
        float _1466 = _1464 * (_1425.y + (-0.5));
        float _1467 = _1464 * (_1425.z + (-0.5));
        float _1474 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1432.x + (-0.5));
        float _1476 = _1474 * (_1432.y + (-0.5));
        float _1477 = _1474 * (_1432.z + (-0.5));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = _1445 * 0.5;
        float _1482 = _1455 * 0.5;
        float _1483 = _1465 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_767, _768, _769), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3986 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1508 + 1.0))) + _1513) * _1478;
        float _1523 = _1446 * 0.5;
        float _1524 = _1456 * 0.5;
        float _1525 = _1466 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_767, _768, _769), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4019 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1550 + 1.0))) + _1555) * _1479;
        float _1565 = _1447 * 0.5;
        float _1566 = _1457 * 0.5;
        float _1567 = _1467 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_767, _768, _769), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4052 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1592 + 1.0))) + _1597) * _1480;
        _1614 = _1447;
        _1615 = _1446;
        _1616 = _1445;
        _1617 = _1457;
        _1618 = _1456;
        _1619 = _1455;
        _1620 = _1467;
        _1621 = _1466;
        _1622 = _1465;
        _1623 = _1480;
        _1624 = _1479;
        _1625 = _1478;
        _1626 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1627 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1628 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
    }
    else
    {
        _1614 = _1306;
        _1615 = _1306;
        _1616 = _1306;
        _1617 = _1306;
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1638 = (cbModelParam._m0[1u].x * (_1626 - _1318)) + _1318;
    float _1639 = (cbModelParam._m0[1u].x * (_1627 - _1319)) + _1319;
    float _1640 = (cbModelParam._m0[1u].x * (_1628 - _1320)) + _1320;
    float _1661 = fma(_1640, cbSceneParam._m0[89u].z, fma(_1639, cbSceneParam._m0[89u].y, _1638 * cbSceneParam._m0[89u].x));
    float _1664 = fma(_1640, cbSceneParam._m0[90u].z, fma(_1639, cbSceneParam._m0[90u].y, _1638 * cbSceneParam._m0[90u].x));
    float _1667 = fma(_1640, cbSceneParam._m0[91u].z, fma(_1639, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1638));
    float _1682 = _940 * 0.5;
    float _1683 = _941 * 0.5;
    float _1684 = _942 * 0.5;
    float _1685 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1616, _1619, _1622, _1625));
    float _1688 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1615, _1618, _1621, _1624));
    float _1691 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1614, _1617, _1620, _1623));
    float _1725;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1698 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1702 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1682, _1683, _1684, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1713 = dot(vec4(cbModelParam._m0[39u]), vec4(_1682, _1683, _1684, 1.0));
        _1725 = dot(vec3(isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1713) ? 0.0 : (isnan(0.0) ? _1713 : max(0.0, _1713))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1725 = 1.0;
    }
    float _1736;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1727 = dot(vec4(cbModelParam._m0[40u]), vec4(_1682, _1683, _1684, 1.0));
        _1736 = dot(vec3(isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)), isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1736 = 1.0;
    }
    float _1740 = (_1736 * cbModelParam._m0[1u].x) + (_1725 * (1.0 - cbModelParam._m0[1u].x));
    float _1750 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _770);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1750 : min(cbModelParam._m0[25u].z, _1750));
    float _1832;
    float _1834;
    float _1836;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1799 = fma(_1004, cbModelParam._m0[13u].z, fma(_1000, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _996)) + cbModelParam._m0[13u].w;
        float _1803 = fma(_1004, cbModelParam._m0[14u].z, fma(_1000, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _996)) + cbModelParam._m0[14u].w;
        float _1807 = fma(_1004, cbModelParam._m0[15u].z, fma(_1000, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _996)) + cbModelParam._m0[15u].w;
        float _1810 = fma(_942, cbModelParam._m0[13u].z, fma(_941, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _940));
        float _1813 = fma(_942, cbModelParam._m0[14u].z, fma(_941, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _940));
        float _1816 = fma(_942, cbModelParam._m0[15u].z, fma(_941, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _940));
        float _1844;
        if (_1810 > 0.0)
        {
            _1844 = abs((1.0 - _1799) / _1810);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1810 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1799 + 1.0) / _1810);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1844 = frontier_phi_14_12_ladder;
        }
        float _2047;
        if (_1813 > 0.0)
        {
            _2047 = abs((1.0 - _1803) / _1813);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1803 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2047 = frontier_phi_23_19_ladder;
        }
        float _2301;
        if (_1816 > 0.0)
        {
            _2301 = abs((1.0 - _1807) / _1816);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1807 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2301 = frontier_phi_35_30_ladder;
        }
        float _2303 = isnan(_2047) ? _1844 : (isnan(_1844) ? _2047 : min(_1844, _2047));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1810) + _1799;
        float _2309 = (_2304 * _1813) + _1803;
        float _2310 = (_2304 * _1816) + _1807;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2313 = (-1.0) - _2311;
        float _2315 = _2311 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2310 > _2315) || ((_2310 < _2313) || ((_2309 > _2315) || ((_2309 < _2313) || ((_2308 < _2313) || (_2308 > _2315))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2438 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1751);
            frontier_phi_13_35_ladder = _2438.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2438.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2438.x * cbModelParam._m0[1u].y;
        }
        _1832 = frontier_phi_13_35_ladder_2;
        _1834 = frontier_phi_13_35_ladder_1;
        _1836 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1820 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_940, _941, _942), _1751);
        _1832 = _1820.x * cbModelParam._m0[1u].y;
        _1834 = _1820.y * cbModelParam._m0[1u].y;
        _1836 = _1820.z * cbModelParam._m0[1u].y;
    }
    float _1840 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _770);
    float _1841 = isnan(_1840) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1840 : min(cbModelParam._m0[25u].w, _1840));
    float _1931;
    float _1933;
    float _1935;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1895 = fma(_1004, cbModelParam._m0[21u].z, fma(_1000, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _996)) + cbModelParam._m0[21u].w;
        float _1899 = fma(_1004, cbModelParam._m0[22u].z, fma(_1000, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _996)) + cbModelParam._m0[22u].w;
        float _1903 = fma(_1004, cbModelParam._m0[23u].z, fma(_1000, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _996)) + cbModelParam._m0[23u].w;
        float _1906 = fma(_942, cbModelParam._m0[21u].z, fma(_941, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _940));
        float _1909 = fma(_942, cbModelParam._m0[22u].z, fma(_941, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _940));
        float _1912 = fma(_942, cbModelParam._m0[23u].z, fma(_941, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _940));
        float _2052;
        if (_1906 > 0.0)
        {
            _2052 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2052 = frontier_phi_25_21_ladder;
        }
        float _2328;
        if (_1909 > 0.0)
        {
            _2328 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2328 = frontier_phi_37_32_ladder;
        }
        float _2541;
        if (_1912 > 0.0)
        {
            _2541 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2541 = frontier_phi_46_43_ladder;
        }
        float _2543 = isnan(_2328) ? _2052 : (isnan(_2052) ? _2328 : min(_2052, _2328));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1906) + _1895;
        float _2549 = (_2544 * _1909) + _1899;
        float _2550 = (_2544 * _1912) + _1903;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2749 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1841);
            frontier_phi_22_46_ladder = _2749.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2749.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2749.x * cbModelParam._m0[1u].z;
        }
        _1931 = frontier_phi_22_46_ladder_2;
        _1933 = frontier_phi_22_46_ladder_1;
        _1935 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1915 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_940, _941, _942), _1841);
        _1931 = _1915.x * cbModelParam._m0[1u].z;
        _1933 = _1915.y * cbModelParam._m0[1u].z;
        _1935 = _1915.z * cbModelParam._m0[1u].z;
    }
    float _1948 = (((_967 * _916) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1931 - _1832)) + _1832);
    float _1950 = (((_967 * _918) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1933 - _1834)) + _1834);
    float _1952 = (((_967 * _919) + _968) * _932) * ((cbModelParam._m0[1u].w * (_1935 - _1836)) + _1836);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1950, cbSceneParam._m0[89u].y, _1948 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1950, cbSceneParam._m0[90u].y, _1948 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1950, cbSceneParam._m0[91u].y, _1948 * cbSceneParam._m0[91u].x));
    uvec4 _1971 = floatBitsToUint(cbInstanceData._m0[_251 + 5u]);
    uint _1973 = _1971.x * 14u;
    uint _1974 = _1973 + 13u;
    float _1981 = _932 + (-1.0);
    float _1986 = (cbLight._m0[_1974].x * _1981) + 1.0;
    float _1987 = (cbLight._m0[_1974].y * _1981) + 1.0;
    float _1988 = (cbLight._m0[_1974].z * _1981) + 1.0;
    float _1989 = (cbLight._m0[_1974].w * _1981) + 1.0;
    uint _1990 = _1973 + 5u;
    float _1996 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _2000 = _1973 + 4u;
    float _2006 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2010 = _1973 | 1u;
    float _2021 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_767, _768, _769));
    float _2024 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_767, _768, _769));
    float _4188 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
    float _4199 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2029 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * 0.3183098733425140380859375;
    float _2031 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.3183098733425140380859375;
    float _2038 = ((cbLight._m0[_1990].x * _1996) * _2031) + ((cbLight._m0[_2000].x * _2006) * _2029);
    float _2039 = ((_1996 * cbLight._m0[_1990].y) * _2031) + ((_2006 * cbLight._m0[_2000].y) * _2029);
    float _2040 = ((_1996 * cbLight._m0[_1990].z) * _2031) + ((_2006 * cbLight._m0[_2000].z) * _2029);
    uvec4 _2044 = floatBitsToUint(cbLight._m0[_1973 + 12u]);
    bool _2046 = _2044.x == 0u;
    float _2057;
    float _2059;
    float _2061;
    if (_2046)
    {
        _2057 = _2038;
        _2059 = _2039;
        _2061 = _2040;
    }
    else
    {
        uint _2065 = _1973 + 6u;
        float _2081 = (dot(vec3(cbLight._m0[_1973 + 2u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2082 = _2081 * _2081;
        float _4210 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        float _2083 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _2084 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2057 = (((cbLight._m0[_2065].x * 0.3183098733425140380859375) * _2083) * _2084) + _2038;
        _2059 = (((cbLight._m0[_2065].y * 0.3183098733425140380859375) * _2083) * _2084) + _2039;
        _2061 = (((cbLight._m0[_2065].z * 0.3183098733425140380859375) * _2083) * _2084) + _2040;
    }
    bool _2064 = _2044.y == 0u;
    float _2102;
    float _2104;
    float _2106;
    if (_2064)
    {
        _2102 = _2057;
        _2104 = _2059;
        _2106 = _2061;
    }
    else
    {
        uint _2272 = _1973 + 7u;
        float _2288 = (dot(vec3(cbLight._m0[_1973 + 3u].xyz), vec3(_767, _768, _769)) * 0.5) + 0.5;
        float _2289 = _2288 * _2288;
        float _4226 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2290 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2291 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2102 = (((cbLight._m0[_2272].x * 0.3183098733425140380859375) * _2290) * _2291) + _2057;
        _2104 = (((cbLight._m0[_2272].y * 0.3183098733425140380859375) * _2290) * _2291) + _2059;
        _2106 = (((cbLight._m0[_2272].z * 0.3183098733425140380859375) * _2290) * _2291) + _2061;
    }
    uint _2109 = _1973 + 8u;
    float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _770) * 0.949999988079071044921875);
    float _2123 = _2122 * _2122;
    float _2124 = cbLight._m0[_1973].x + _846;
    float _2125 = cbLight._m0[_1973].y + _847;
    float _2126 = cbLight._m0[_1973].z + _848;
    float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
    float _2131 = _2130 * _2124;
    float _2132 = _2130 * _2125;
    float _2133 = _2130 * _2126;
    float _2134 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_1973].xyz));
    float _4242 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2137 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _4253 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _2138 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _2139 = dot(vec3(_767, _768, _769), vec3(_2131, _2132, _2133));
    float _4264 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2142 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _2143 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2131, _2132, _2133));
    float _4275 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2147 = _2123 * _2123;
    float _2151 = ((_2142 * _2142) * (_2147 + (-1.0))) + 1.0;
    float _2159 = exp2(log2(1.0 - (isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0)))) * 5.0);
    float _2160 = 0.959999978542327880859375 - _913;
    float _2162 = 0.959999978542327880859375 - _914;
    float _2163 = 0.959999978542327880859375 - _915;
    float _2170 = 1.0 - _2123;
    float _2181 = (0.5 / (((_2138 * ((_2137 * _2170) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2170) + _2123) * _2137))) * _2137;
    float _4286 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2147 / ((_2151 * _2151) * 3.141590118408203125));
    uint _2194 = _1973 + 9u;
    float _2205 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2010].w)) * _770) * 0.949999988079071044921875);
    float _2206 = _2205 * _2205;
    float _2207 = cbLight._m0[_2010].x + _846;
    float _2208 = cbLight._m0[_2010].y + _847;
    float _2209 = cbLight._m0[_2010].z + _848;
    float _2213 = inversesqrt(dot(vec3(_2207, _2208, _2209), vec3(_2207, _2208, _2209)));
    float _2214 = _2213 * _2207;
    float _2215 = _2213 * _2208;
    float _2216 = _2213 * _2209;
    float _2217 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2010].xyz));
    float _4297 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _2221 = dot(vec3(_767, _768, _769), vec3(_2214, _2215, _2216));
    float _4308 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2224 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2225 = dot(vec3(cbLight._m0[_2010].xyz), vec3(_2214, _2215, _2216));
    float _4319 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
    float _2229 = _2206 * _2206;
    float _2233 = ((_2224 * _2224) * (_2229 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0);
    float _2247 = 1.0 - _2206;
    float _2257 = (0.5 / (((_2138 * ((_2220 * _2247) + _2206)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2247) + _2206) * _2220))) * _2220;
    float _4330 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2259 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2229 / ((_2233 * _2233) * 3.141590118408203125));
    float _2269 = (((((_2240 * _2160) + _916) * cbLight._m0[_2194].x) * _2259) * _1996) + (((((_2159 * _2160) + _916) * cbLight._m0[_2109].x) * _2183) * _2006);
    float _2270 = (((((_2240 * _2162) + _918) * cbLight._m0[_2194].y) * _2259) * _1996) + (((((_2159 * _2162) + _918) * cbLight._m0[_2109].y) * _2183) * _2006);
    float _2271 = (((((_2240 * _2163) + _919) * cbLight._m0[_2194].z) * _2259) * _1996) + (((((_2159 * _2163) + _919) * cbLight._m0[_2109].z) * _2183) * _2006);
    float _2333;
    float _2335;
    float _2337;
    if (_2046)
    {
        _2333 = _2269;
        _2335 = _2270;
        _2337 = _2271;
    }
    else
    {
        uint _2339 = _1973 + 2u;
        uint _2343 = _1973 + 10u;
        float _2357 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2339].w)) * _770) * 0.949999988079071044921875);
        float _2358 = _2357 * _2357;
        float _2359 = cbLight._m0[_2339].x + _846;
        float _2360 = cbLight._m0[_2339].y + _847;
        float _2361 = cbLight._m0[_2339].z + _848;
        float _2365 = inversesqrt(dot(vec3(_2359, _2360, _2361), vec3(_2359, _2360, _2361)));
        float _2366 = _2365 * _2359;
        float _2367 = _2365 * _2360;
        float _2368 = _2365 * _2361;
        float _2369 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2339].xyz));
        float _4341 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2372 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2373 = dot(vec3(_767, _768, _769), vec3(_2366, _2367, _2368));
        float _4352 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2376 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2377 = dot(vec3(cbLight._m0[_2339].xyz), vec3(_2366, _2367, _2368));
        float _4363 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2381 = _2358 * _2358;
        float _2385 = ((_2376 * _2376) * (_2381 + (-1.0))) + 1.0;
        float _2392 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2399 = 1.0 - _2358;
        float _2409 = (0.5 / (((_2138 * ((_2372 * _2399) + _2358)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2399) + _2358) * _2372))) * _2372;
        float _4374 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2411 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2381 / ((_2385 * _2385) * 3.141590118408203125));
        float _2412 = isnan(1.0) ? _1988 : (isnan(_1988) ? 1.0 : min(_1988, 1.0));
        _2333 = (((((_2392 * _2160) + _916) * cbLight._m0[_2343].x) * _2411) * _2412) + _2269;
        _2335 = (((((_2392 * _2162) + _918) * cbLight._m0[_2343].y) * _2411) * _2412) + _2270;
        _2337 = (((((_2392 * _2163) + _919) * cbLight._m0[_2343].z) * _2411) * _2412) + _2271;
    }
    float _2447;
    float _2449;
    float _2451;
    if (_2064)
    {
        _2447 = _2333;
        _2449 = _2335;
        _2451 = _2337;
    }
    else
    {
        uint _2458 = _1973 + 3u;
        uint _2462 = _1973 + 11u;
        float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2458].w)) * _770) * 0.949999988079071044921875);
        float _2477 = _2476 * _2476;
        float _2478 = cbLight._m0[_2458].x + _846;
        float _2479 = cbLight._m0[_2458].y + _847;
        float _2480 = cbLight._m0[_2458].z + _848;
        float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
        float _2485 = _2484 * _2478;
        float _2486 = _2484 * _2479;
        float _2487 = _2484 * _2480;
        float _2488 = dot(vec3(_767, _768, _769), vec3(cbLight._m0[_2458].xyz));
        float _4390 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2492 = dot(vec3(_767, _768, _769), vec3(_2485, _2486, _2487));
        float _4401 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2495 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _2496 = dot(vec3(cbLight._m0[_2458].xyz), vec3(_2485, _2486, _2487));
        float _4412 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
        float _2500 = _2477 * _2477;
        float _2504 = ((_2495 * _2495) * (_2500 + (-1.0))) + 1.0;
        float _2511 = exp2(log2(1.0 - (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0)))) * 5.0);
        float _2518 = 1.0 - _2477;
        float _2528 = (0.5 / (((_2138 * ((_2491 * _2518) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2138 * _2518) + _2477) * _2491))) * _2491;
        float _4423 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2530 = (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_2500 / ((_2504 * _2504) * 3.141590118408203125));
        float _2531 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
        _2447 = (((((_2511 * _2160) + _916) * cbLight._m0[_2462].x) * _2530) * _2531) + _2333;
        _2449 = (((((_2511 * _2162) + _918) * cbLight._m0[_2462].y) * _2530) * _2531) + _2335;
        _2451 = (((((_2511 * _2163) + _919) * cbLight._m0[_2462].z) * _2530) * _2531) + _2337;
    }
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    float _2676;
    if (_1971.y == 0u)
    {
        float _2606 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2607 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2606;
        float _2608 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2606;
        float _2609 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2606;
        uvec4 _2621 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2622 = _2621.x;
        uint _2633 = uint((float(_2621.y) * floor(float(uint(cbSceneParam._m0[85u].y * _855) / _2622))) + floor(float(uint(cbSceneParam._m0[85u].x * _854) / _2622)));
        float _2643 = (log2(_2609 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2644 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        uint _2647 = uint(isnan(14.0) ? _2644 : (isnan(_2644) ? 14.0 : min(_2644, 14.0)));
        uvec4 _2652 = texelFetch(g_lightClusterGridBuffer, int(((_2647 << 2u) + (_2633 << 6u)) >> 2u));
        uint _2653 = _2652.x;
        uint _2654 = _2621.z;
        float _2754;
        float _2756;
        float _2758;
        float _2760;
        float _2762;
        float _2764;
        if (((((1u << ((_2654 >> 4u) & 15u)) + 4294967295u) & _2653) == 0u) || ((_2654 & 240u) == 0u))
        {
            _2754 = 0.0;
            _2756 = 0.0;
            _2758 = 0.0;
            _2760 = 0.0;
            _2762 = 0.0;
            _2764 = 0.0;
        }
        else
        {
            float _2755;
            float _2757;
            float _2759;
            float _2761;
            float _2763;
            float _2765;
            float _2899 = 0.0;
            float _2900 = 0.0;
            float _2901 = 0.0;
            float _2902 = 0.0;
            float _2903 = 0.0;
            float _2904 = 0.0;
            uint _2905 = 0u;
            uint _2914;
            bool _2915;
            for (;;)
            {
                _2914 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_2905 << 2u)) >> 2u)).x;
                _2915 = _2914 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2915)
                {
                    frontier_phi_61_pred = _2899;
                    frontier_phi_61_pred_1 = _2904;
                    frontier_phi_61_pred_2 = _2903;
                    frontier_phi_61_pred_3 = _2902;
                    frontier_phi_61_pred_4 = _2901;
                    frontier_phi_61_pred_5 = _2900;
                }
                else
                {
                    float _3023;
                    float _3024;
                    float _3025;
                    float _3026;
                    float _3027;
                    float _3028;
                    uint _3029;
                    _3023 = _2899;
                    _3024 = _2900;
                    _3025 = _2901;
                    _3026 = _2902;
                    _3027 = _2903;
                    _3028 = _2904;
                    _3029 = _2914;
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    for (;;)
                    {
                        uint _3033 = uint(findLSB(_3029)) + (_2905 << 5u);
                        uint _3030 = (_3029 + 4294967295u) & _3029;
                        uint _3035 = _3033 * 48u;
                        vec4 _3049 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3035)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3035 + 3u)).x));
                        uint _3055 = (_3033 * 48u) + 4u;
                        vec4 _3068 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3055)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3055 + 3u)).x));
                        uint _3074 = (_3033 * 48u) + 8u;
                        vec3 _3085 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3074)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3074 + 2u)).x));
                        float _3089 = _3049.x - _2607;
                        float _3090 = _3049.y - _2608;
                        float _3091 = _3049.z - _2609;
                        float _3092 = dot(vec3(_3089, _3090, _3091), vec3(_3089, _3090, _3091));
                        float _3095 = inversesqrt(_3092);
                        float _3096 = _3095 * _3089;
                        float _3097 = _3095 * _3090;
                        float _3098 = _3095 * _3091;
                        float _3099 = dot(vec3(_873, _876, _879), vec3(_3096, _3097, _3098));
                        float _3104 = 1.0 - (_3092 * _3049.w);
                        float _4449 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
                        float _3106 = sqrt(_3092) * _3068.w;
                        float _3109 = 1.39999997615814208984375 / (_3106 + 1.39999997615814208984375);
                        float _3110 = _3109 * _3109;
                        float _3113 = ((1.0 - _3110) * _3099) + _3110;
                        float _3116 = _3106 * _3106;
                        float _3120 = ((isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0))) * _3105) / ((_3116 * 0.699999988079071044921875) + 1.0);
                        float _3124 = (-0.0) - _2607;
                        float _3125 = (-0.0) - _2608;
                        float _3126 = (-0.0) - _2609;
                        float _3130 = inversesqrt(dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126)));
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3141 = exp2(log2(1.0 / ((_3116 * 3.5) + 5.0)) * 0.25);
                        float _3142 = 1.0 - _948;
                        float _3149 = sqrt(1.0 - ((1.0 - (_3142 * _3142)) * (1.0 - (_3141 * _3141))));
                        float _3150 = _3149 * _3149;
                        float _3151 = _3150 * _3150;
                        float _3152 = _3131 + _3096;
                        float _3153 = _3132 + _3097;
                        float _3154 = _3133 + _3098;
                        float _3158 = inversesqrt(dot(vec3(_3152, _3153, _3154), vec3(_3152, _3153, _3154)));
                        float _3162 = dot(vec3(_873, _876, _879), vec3(_3131, _3132, _3133));
                        float _4465 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                        float _3165 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3166 = dot(vec3(_873, _876, _879), vec3(_3158 * _3152, _3158 * _3153, _3158 * _3154));
                        float _4476 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                        float _3169 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                        float _3173 = ((_3169 * _3169) * (_3151 + (-1.0))) + 1.0;
                        float _3174 = _3109 * _3150;
                        float _3175 = _3174 * _3174;
                        float _3178 = ((1.0 - _3175) * _3099) + _3175;
                        float _4487 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3180 = 1.0 - _3150;
                        float _3190 = (0.5 / (((_3179 * ((_3165 * _3180) + _3150)) + 9.9999999392252902907785028219223e-09) + (((_3179 * _3180) + _3150) * _3165))) * _3179;
                        float _4498 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                        float _3201 = (((_3151 * 3.1415927410125732421875) * (isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0)))) / ((_3173 * _3173) * ((_3116 * 2.1991131305694580078125) + 3.141590118408203125))) * _3105;
                        _2958 = (_3120 * _3068.x) + _3026;
                        _2959 = (_3120 * _3068.y) + _3027;
                        _2960 = (_3120 * _3068.z) + _3028;
                        _2955 = (_3201 * _3085.x) + _3023;
                        _2956 = (_3201 * _3085.y) + _3024;
                        _2957 = (_3201 * _3085.z) + _3025;
                        if (_3030 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3023 = _2955;
                            _3024 = _2956;
                            _3025 = _2957;
                            _3026 = _2958;
                            _3027 = _2959;
                            _3028 = _2960;
                            _3029 = _3030;
                        }
                    }
                    frontier_phi_61_pred = _2955;
                    frontier_phi_61_pred_1 = _2960;
                    frontier_phi_61_pred_2 = _2959;
                    frontier_phi_61_pred_3 = _2958;
                    frontier_phi_61_pred_4 = _2957;
                    frontier_phi_61_pred_5 = _2956;
                }
                _2755 = frontier_phi_61_pred;
                _2765 = frontier_phi_61_pred_1;
                _2763 = frontier_phi_61_pred_2;
                _2761 = frontier_phi_61_pred_3;
                _2759 = frontier_phi_61_pred_4;
                _2757 = frontier_phi_61_pred_5;
                uint _2906 = _2905 + 1u;
                if (_2906 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2899 = _2755;
                    _2900 = _2757;
                    _2901 = _2759;
                    _2902 = _2761;
                    _2903 = _2763;
                    _2904 = _2765;
                    _2905 = _2906;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2754 = _2755;
            _2756 = _2757;
            _2758 = _2759;
            _2760 = _2761;
            _2762 = _2763;
            _2764 = _2765;
        }
        uvec4 _2768 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2769 = _2768.z;
        uint _2771 = (_2769 >> 8u) & 15u;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        if (((4294967295u << _2771) & _2653) == 0u)
        {
            _2867 = _2754;
            _2869 = _2756;
            _2871 = _2758;
            _2873 = _2760;
            _2875 = _2762;
            _2877 = _2764;
        }
        else
        {
            float _2892 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
            float _2893 = _2892 * _2607;
            float _2894 = _2892 * _2608;
            float _2895 = _2892 * _2609;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2771 < ((_2769 >> 12u) & 15u))
            {
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _3006 = _2754;
                float _3007 = _2756;
                float _3008 = _2758;
                float _3009 = _2760;
                float _3010 = _2762;
                float _3011 = _2764;
                uint _3012 = _2771;
                uint _3021;
                bool _3022;
                for (;;)
                {
                    _3021 = texelFetch(g_lightClassification, int((((_2647 << 5u) + (_2633 << 9u)) + (_3012 << 2u)) >> 2u)).x;
                    _3022 = _3021 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3022)
                    {
                        frontier_phi_67_pred = _3009;
                        frontier_phi_67_pred_1 = _3010;
                        frontier_phi_67_pred_2 = _3011;
                        frontier_phi_67_pred_3 = _3008;
                        frontier_phi_67_pred_4 = _3007;
                        frontier_phi_67_pred_5 = _3006;
                    }
                    else
                    {
                        float _3206;
                        float _3207;
                        float _3208;
                        float _3209;
                        float _3210;
                        float _3211;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3219 = _3006;
                        float _3220 = _3007;
                        float _3221 = _3008;
                        float _3222 = _3009;
                        float _3223 = _3010;
                        float _3224 = _3011;
                        uint _3225 = _3021;
                        uint _3226;
                        vec4 _3251;
                        float _3252;
                        vec4 _3267;
                        vec3 _3279;
                        vec4 _3294;
                        vec4 _3310;
                        float _3356;
                        bool _3357;
                        for (;;)
                        {
                            uint _3236 = ((_3012 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3225));
                            _3226 = (_3225 + 4294967295u) & _3225;
                            uint _3238 = _3236 * 40u;
                            _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3252 = _3251.w;
                            uint _3254 = (_3236 * 40u) + 4u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3236 * 40u) + 8u;
                            _3279 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x));
                            uint _3281 = (_3236 * 40u) + 16u;
                            _3294 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3281)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3281 + 3u)).x));
                            uint _3297 = (_3236 * 40u) + 20u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            uint _3312 = (_3236 * 40u) + 24u;
                            vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3331 = (_3236 * 40u) + 28u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            _3356 = fma(_2609, _3344.z, fma(_2608, _3344.y, _3344.x * _2607)) + _3344.w;
                            _3357 = !((fma(_2609, _3325.z, fma(_2608, _3325.y, _3325.x * _2607)) + _3325.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3357)
                            {
                                float _3384 = _3251.x - _2607;
                                float _3385 = _3251.y - _2608;
                                float _3386 = _3251.z - _2609;
                                float _3387 = dot(vec3(_3384, _3385, _3386), vec3(_3384, _3385, _3386));
                                float _3390 = inversesqrt(_3387);
                                float _3391 = _3390 * _3384;
                                float _3392 = _3390 * _3385;
                                float _3393 = _3390 * _3386;
                                float _3397 = 1.0 - (_3387 / (_3252 * _3252));
                                float _4509 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3398 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3402 = sqrt(_3387) * _3267.w;
                                float _3404 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                                float _3405 = _3404 * _3404;
                                float _3408 = ((1.0 - _3405) * dot(vec3(_3391, _3392, _3393), vec3(_873, _876, _879))) + _3405;
                                float _3411 = _3402 * _3402;
                                float _3415 = (fma(_2609, _3294.z, fma(_2608, _3294.y, _3294.x * _2607)) + _3294.w) / _3356;
                                float _3416 = (fma(_2609, _3310.z, fma(_2608, _3310.y, _3310.x * _2607)) + _3310.w) / _3356;
                                float _3420 = 1.0 - dot(vec2(_3415, _3416), vec2(_3415, _3416));
                                float _4525 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0));
                                float _3421 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3422 = _3421 * (((isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0))) * _3398) / ((_3411 * 0.699999988079071044921875) + 1.0));
                                float _3434 = exp2(log2(1.0 / ((_3411 * 3.5) + 5.0)) * 0.25);
                                float _3435 = 1.0 - _948;
                                float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                                float _3443 = _3442 * _3442;
                                float _3444 = _3443 * _3443;
                                float _3445 = _3391 - _2893;
                                float _3446 = _3392 - _2894;
                                float _3447 = _3393 - _2895;
                                float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                                float _3455 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2893, (-0.0) - _2894, (-0.0) - _2895));
                                float _4536 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3458 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
                                float _3459 = dot(vec3(_873, _876, _879), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                                float _4547 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                                float _3462 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                                float _3467 = _3404 * _3443;
                                float _3468 = _3467 * _3467;
                                float _3474 = ((1.0 - _3468) * dot(vec3(_873, _876, _879), vec3(_3391, _3392, _3393))) + _3468;
                                float _4558 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3475 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
                                float _3476 = 1.0 - _3443;
                                float _3486 = (0.5 / (((_3475 * ((_3458 * _3476) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3475 * _3476) + _3443) * _3458))) * _3475;
                                float _4569 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                                float _3496 = (_3421 * _3398) * (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0)))) / ((_3466 * _3466) * ((_3411 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3496 * _3279.x;
                                frontier_phi_73_pred_1 = _3496 * _3279.y;
                                frontier_phi_73_pred_2 = _3422 * _3267.z;
                                frontier_phi_73_pred_3 = _3422 * _3267.y;
                                frontier_phi_73_pred_4 = _3422 * _3267.x;
                                frontier_phi_73_pred_5 = _3496 * _3279.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3500 = frontier_phi_73_pred;
                            _3501 = frontier_phi_73_pred_1;
                            _3505 = frontier_phi_73_pred_2;
                            _3504 = frontier_phi_73_pred_3;
                            _3503 = frontier_phi_73_pred_4;
                            _3502 = frontier_phi_73_pred_5;
                            _3209 = _3503 + _3222;
                            _3210 = _3504 + _3223;
                            _3211 = _3505 + _3224;
                            _3206 = _3500 + _3219;
                            _3207 = _3501 + _3220;
                            _3208 = _3502 + _3221;
                            if (_3226 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3219 = _3206;
                                _3220 = _3207;
                                _3221 = _3208;
                                _3222 = _3209;
                                _3223 = _3210;
                                _3224 = _3211;
                                _3225 = _3226;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3209;
                        frontier_phi_67_pred_1 = _3210;
                        frontier_phi_67_pred_2 = _3211;
                        frontier_phi_67_pred_3 = _3208;
                        frontier_phi_67_pred_4 = _3207;
                        frontier_phi_67_pred_5 = _3206;
                    }
                    _2874 = frontier_phi_67_pred;
                    _2876 = frontier_phi_67_pred_1;
                    _2878 = frontier_phi_67_pred_2;
                    _2872 = frontier_phi_67_pred_3;
                    _2870 = frontier_phi_67_pred_4;
                    _2868 = frontier_phi_67_pred_5;
                    uint _3013 = _3012 + 1u;
                    if (_3013 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3006 = _2868;
                        _3007 = _2870;
                        _3008 = _2872;
                        _3009 = _2874;
                        _3010 = _2876;
                        _3011 = _2878;
                        _3012 = _3013;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2876;
                frontier_phi_55_56_ladder_1 = _2878;
                frontier_phi_55_56_ladder_2 = _2874;
                frontier_phi_55_56_ladder_3 = _2872;
                frontier_phi_55_56_ladder_4 = _2870;
                frontier_phi_55_56_ladder_5 = _2868;
            }
            else
            {
                frontier_phi_55_56_ladder = _2762;
                frontier_phi_55_56_ladder_1 = _2764;
                frontier_phi_55_56_ladder_2 = _2760;
                frontier_phi_55_56_ladder_3 = _2758;
                frontier_phi_55_56_ladder_4 = _2756;
                frontier_phi_55_56_ladder_5 = _2754;
            }
            _2867 = frontier_phi_55_56_ladder_5;
            _2869 = frontier_phi_55_56_ladder_4;
            _2871 = frontier_phi_55_56_ladder_3;
            _2873 = frontier_phi_55_56_ladder_2;
            _2875 = frontier_phi_55_56_ladder;
            _2877 = frontier_phi_55_56_ladder_1;
        }
        float _2882 = isnan(1.0) ? _932 : (isnan(_932) ? 1.0 : min(_932, 1.0));
        _2666 = (_2882 * _2873) + _2102;
        _2668 = (_2882 * _2875) + _2104;
        _2670 = (_2882 * _2877) + _2106;
        _2672 = ((_2867 * _916) * _2882) + _2447;
        _2674 = ((_2869 * _918) * _2882) + _2449;
        _2676 = ((_2871 * _919) * _2882) + _2451;
    }
    else
    {
        _2666 = _2102;
        _2668 = _2104;
        _2670 = _2106;
        _2672 = _2447;
        _2674 = _2449;
        _2676 = _2451;
    }
    float _4585 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4596 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4607 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    uint _2696 = _251 + 6u;
    float _2704 = _854 / cbSceneParam._m0[86u].x;
    float _2705 = _855 / cbSceneParam._m0[86u].y;
    vec4 _2719 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, (log2((isnan(cbSceneParam._m0[77u].w) ? _789 : (isnan(_789) ? cbSceneParam._m0[77u].w : min(_789, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2721 = _2719.x;
    float _2722 = _2719.y;
    float _2723 = _2719.z;
    float _2724 = _2719.w;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    if (_789 > cbSceneParam._m0[78u].w)
    {
        float _2779 = isnan(_789) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _789 : min(cbSceneParam._m0[80u].w, _789));
        float _2780 = _2779 / _789;
        float _2791 = _2780 * _839;
        float _2792 = _840 * _2780;
        float _2793 = (-0.0) - _2792;
        float _2795 = _2780 * _841;
        float _2797 = (cbSceneParam._m0[77u].w * _2793) / _2779;
        float _2798 = _2797 + cbSceneParam._m0[79u].w;
        float _2799 = cbSceneParam._m0[79u].w - _2792;
        float _2805 = sqrt(((_2791 * _2791) + (_2792 * _2792)) + (_2795 * _2795));
        float _2808 = (1.0 - (cbSceneParam._m0[77u].w / _2779)) * _2805;
        float _2813 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2815 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2968;
        if (abs((_2793 - _2797) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2968 = ((((_2798 > 0.0) ? exp2(_2813 * _2798) : (2.0 - exp2(_2815 * _2798))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2808;
        }
        else
        {
            float _2928 = 1.0 / cbSceneParam._m0[80u].x;
            float _2929 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : max(_2798, _2799));
            float _2930 = isnan(_2799) ? _2798 : (isnan(_2798) ? _2799 : min(_2798, _2799));
            float _2939 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : min(_2929, 0.0));
            float _2940 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : min(_2930, 0.0));
            _2968 = ((abs(_2805 / _2793) * cbSceneParam._m0[80u].y) * ((((_2939 - _2940) * 2.0) - ((exp2(_2813 * (isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0)))) - exp2(_2813 * (isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))))) * _2928)) - ((exp2(_2815 * _2939) - exp2(_2815 * _2940)) * _2928))) + (_2808 * cbSceneParam._m0[80u].z);
        }
        vec4 _2970 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2704, _2705, 1.0), 0.0);
        float _2979 = exp2((_2968 * (-1.44269502162933349609375)) * (1.0 - _2970.w));
        float _2980 = log2(_2979);
        float _2996 = log2(_2724);
        _2817 = (exp2(_2996 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].x)) * _2970.x) / cbSceneParam._m0[78u].x)) + _2721;
        _2819 = (exp2(_2996 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].y)) * _2970.y) / cbSceneParam._m0[78u].y)) + _2722;
        _2821 = (exp2(_2996 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2980 * cbSceneParam._m0[78u].z)) * _2970.z) / cbSceneParam._m0[78u].z)) + _2723;
        _2823 = _2979 * _2724;
    }
    else
    {
        _2817 = _2721;
        _2819 = _2722;
        _2821 = _2723;
        _2823 = _2724;
    }
    float _2835 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2836 = _2835 == 3.0;
    float _2837 = log2(_2823);
    float _2844 = exp2(_2837 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2666 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _932))) + ((_2672 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2845 = exp2(_2837 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_2668 + ((isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))) * _932))) + ((_2674 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2846 = exp2(_2837 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * (_2670 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _932))) + ((_2676 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1740)) * cbPerFrame._m0[3u].x));
    float _2855 = (_2835 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2855 * (_2836 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2817)));
    SV_Target.y = _2855 * (_2836 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2819)));
    SV_Target.z = _2855 * (_2836 ? _2846 : (_2846 + (cbSceneParam._m0[72u].w * _2821)));
    SV_Target.w = cbInstanceData._m0[_2696].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2696].w;
}


