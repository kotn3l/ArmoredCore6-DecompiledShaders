#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1528;
float _4188;
float _4189;
float _4190;
float _4191;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _307.x * cbMtdParam._m0[11u].x;
    float _314 = _307.y * cbMtdParam._m0[11u].y;
    float _315 = _307.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _353 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _353.x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[23u].w) + _403) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4200 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _428 = (_421 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _429 = (_421 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _430 = (_421 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _467 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _469 = _467.x;
    float _479 = dot(vec4(_469, _467.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _493 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _353.y) * 2.0) - ((((_469 - _479) * cbMtdParam._m0[23u].w) + _479) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4211 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _494 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _501 = (_494 * ((_447.x * cbMtdParam._m0[13u].x) - _428)) + _428;
    float _502 = (_494 * ((_447.y * cbMtdParam._m0[13u].y) - _429)) + _429;
    float _503 = (_494 * ((_447.z * cbMtdParam._m0[13u].z) - _430)) + _430;
    vec4 _522 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _286) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _287) + cbTextureTilingScale._m0[14u].w));
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _559 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _561 = _559.x;
    float _562 = _559.y;
    float _563 = _559.z;
    float _570 = ((_542.x - _561) * _421) + _561;
    float _571 = ((_542.y - _562) * _421) + _562;
    float _572 = ((_542.z - _563) * _421) + _563;
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _597 = ((_584.z - _572) * _494) + _572;
    float _600 = ((((_584.x - _570) * _494) + _570) * 2.0) + (-1.0);
    float _602 = ((((_584.y - _571) * _494) + _571) * 2.0) + (-1.0);
    float _603 = dot(vec2(_600, _602), vec2(_600, _602));
    float _4222 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _608 = sqrt(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _634 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _635 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _602;
    float _638 = fma(_608, _255, fma(_635, _262, _634 * _248));
    float _641 = fma(_608, _256, fma(_635, _263, _634 * _249));
    float _644 = fma(_608, _257, fma(_635, _264, _634 * _250));
    float _648 = inversesqrt(dot(vec3(_638, _641, _644), vec3(_638, _641, _644)));
    vec4 _675 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _286) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _287) + cbTextureTilingScale._m0[11u].w));
    float _677 = _675.x;
    float _678 = 1.0 - _677;
    float _687 = (cbMtdParam._m0[19u].x + dot(vec4(_648 * _638, _648 * _641, _648 * _644, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_677 - _678) * cbMtdParam._m0[24u].z) + _678) * cbMtdParam._m0[21u].z);
    float _4233 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _688 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _690 = (-0.0) - cbMtdParam._m0[24u].x;
    float _692 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _693 = isnan(1.0) ? _692 : (isnan(_692) ? 1.0 : min(_692, 1.0));
    float _700 = _688 - ((_688 * TEXCOORD_8.x) * _693);
    float _701 = _688 - ((_688 * TEXCOORD_8.y) * _693);
    float _702 = _688 - ((_688 * TEXCOORD_8.z) * _693);
    float _709 = (_700 * ((_522.x * cbMtdParam._m0[18u].x) - _501)) + _501;
    float _710 = (_701 * ((_522.y * cbMtdParam._m0[18u].y) - _502)) + _502;
    float _711 = (_702 * ((_522.z * cbMtdParam._m0[18u].z) - _503)) + _503;
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _752 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_725 - _726) * cbMtdParam._m0[24u].w) + _726) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4254 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _753 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
    float _761 = ((((cbMtdParam._m0[10u].x - _709) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _753) + _709;
    float _762 = ((((cbMtdParam._m0[10u].y - _710) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _753) + _710;
    float _763 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _711)) * _753) + _711;
    vec4 _789 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _791 = _789.x;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _791) * _421) + _791;
    float _826 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _809) * _494) + _809;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _826) * cbMtdParam._m0[19u].z) + _826;
    float _832 = _830 - (_830 * _700);
    float _834 = _832 - (_832 * _753);
    float _838 = (cbMtdParam._m0[19u].w * (_622.z - _597)) + _597;
    vec4 _852 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _286) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _287) + cbTextureTilingScale._m0[15u].w));
    float _859 = (_852.x * 2.0) + (-1.0);
    float _860 = (_852.y * 2.0) + (-1.0);
    float _861 = dot(vec2(_859, _860), vec2(_859, _860));
    float _4265 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _869 = ((_852.z - _838) * _700) + _838;
    float _872 = ((cbMtdParam._m0[23u].x - _869) * _753) + _869;
    vec4 _891 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _897 = (_891.x * 2.0) + (-1.0);
    float _898 = (_891.y * 2.0) + (-1.0);
    float _899 = dot(vec2(_897, _898), vec2(_897, _898));
    float _4276 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _914 = ((sqrt(1.0 - (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) - _608) * _702) + _608;
    float _917 = (((_859 - _634) * _700) + _634) + (cbMtdParam._m0[21u].x * _634);
    float _918 = (((_860 - _635) * _701) + _635) + (cbMtdParam._m0[21u].x * _635);
    float _929 = (((_897 - _917) + (_917 * cbMtdParam._m0[22u].z)) * _753) + _917;
    float _930 = (((_898 - _918) + (_918 * cbMtdParam._m0[22u].z)) * _753) + _918;
    float _931 = (_753 * (sqrt(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) - _914)) + _914;
    float _935 = cbMtdParam._m0[22u].x + _622.w;
    float _938 = fma(_931, _255, fma(_930, _262, _929 * _248));
    float _941 = fma(_931, _256, fma(_930, _263, _929 * _249));
    float _944 = fma(_931, _257, fma(_930, _264, _929 * _250));
    float _948 = inversesqrt(dot(vec3(_938, _941, _944), vec3(_938, _941, _944)));
    float _949 = _948 * _938;
    float _950 = _948 * _941;
    float _951 = _948 * _944;
    float _4287 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _952 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _4298 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4309 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4320 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4331 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _4342 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _957 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _971 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1021 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1011);
    float _1022 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1011);
    float _1023 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1011);
    float _1027 = inversesqrt(dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023)));
    float _1028 = _1021 * _1027;
    float _1029 = _1022 * _1027;
    float _1030 = _1023 * _1027;
    vec4 _1035 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1037 = _1035.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1209 = sqrt(((_1021 * _1021) + (_1022 * _1022)) + (_1023 * _1023));
        float _1215 = (cbMatDynParam._m0[5u].x * _1209) + cbMatDynParam._m0[5u].y;
        float _4353 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1220 = (cbMatDynParam._m0[5u].z * _1209) + cbMatDynParam._m0[5u].w;
        float _4364 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) - _1216)) + _1216) < ((_1037 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1048 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1049 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1067 = fma(_951, cbSceneParam._m0[5u].z, fma(_950, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _949));
    float _1070 = fma(_951, cbSceneParam._m0[6u].z, fma(_950, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _949));
    float _1073 = fma(_951, cbSceneParam._m0[7u].z, fma(_950, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _949));
    uint _1086 = _267 + 9u;
    uint _1087 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _1093 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * cbInstanceData._m0[_1087].x;
    float _1094 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0)))) * cbInstanceData._m0[_1087].y;
    float _1095 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * cbInstanceData._m0[_1087].z;
    float _4375 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _4386 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _4397 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
    float _1099 = 1.0 - _957;
    float _1100 = _1096 * _1099;
    float _1101 = _1097 * _1099;
    float _1102 = _1098 * _1099;
    float _1107 = (_1096 + (-0.039999999105930328369140625)) * _957;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _957;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _957;
    float _1110 = _1107 + 0.039999999105930328369140625;
    float _1112 = _1108 + 0.039999999105930328369140625;
    float _1113 = _1109 + 0.039999999105930328369140625;
    vec4 _1122 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1048, cbSceneParam._m0[86u].y * _1049));
    float _1126 = ((isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * TEXCOORD_5.w) * _1122.x;
    float _1127 = dot(vec3(_949, _950, _951), vec3(_1028, _1029, _1030));
    float _1130 = _1127 * 2.0;
    float _1134 = (_1130 * _949) - _1028;
    float _1135 = (_1130 * _950) - _1029;
    float _1136 = (_1130 * _951) - _1030;
    float _1140 = abs(dot(vec3(_1028, _1029, _1030), vec3(_949, _950, _951)));
    float _4408 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1142 = sqrt(_952);
    float _1155 = exp2((_1142 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1142 * 3.0));
    float _1161 = (1.0 - _1155) * ((_1142 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1162 = _1155 * _1142;
    float _1190 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1527;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1198, cbModelParam._m0[26u].z, fma(_1194, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190));
        float _1256 = fma(_1198, cbModelParam._m0[27u].z, fma(_1194, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190));
        float _1260 = fma(_1198, cbModelParam._m0[28u].z, fma(_1194, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190));
        float _1285 = _1190 + _949;
        float _1286 = _1194 + _950;
        float _1287 = _1198 + _951;
        float _1297 = fma(_1287, cbModelParam._m0[26u].z, fma(_1286, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1285)) - _1252;
        float _1298 = fma(_1287, cbModelParam._m0[27u].z, fma(_1286, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1285)) - _1256;
        float _1299 = fma(_1287, cbModelParam._m0[28u].z, fma(_1286, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1285)) - _1260;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1321 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1328 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1335 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1342 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1355 = exp2((_1321.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1321.x + (-0.5));
        float _1357 = _1355 * (_1321.y + (-0.5));
        float _1358 = _1355 * (_1321.z + (-0.5));
        float _1365 = exp2((_1328.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1328.x + (-0.5));
        float _1367 = _1365 * (_1328.y + (-0.5));
        float _1368 = _1365 * (_1328.z + (-0.5));
        float _1375 = exp2((_1335.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1335.x + (-0.5));
        float _1377 = _1375 * (_1335.y + (-0.5));
        float _1378 = _1375 * (_1335.z + (-0.5));
        float _1385 = exp2((_1342.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1342.x + (-0.5));
        float _1387 = _1385 * (_1342.y + (-0.5));
        float _1388 = _1385 * (_1342.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1409 = (dot(vec3(_949, _950, _951), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _4434 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1419 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4445 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4456 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_1421 + 1.0))) + _1426) * _1389;
        float _1436 = _1357 * 0.5;
        float _1437 = _1367 * 0.5;
        float _1438 = _1377 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_949, _950, _951), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4467 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4478 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4489 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0))) * (_1463 + 1.0))) + _1468) * _1390;
        float _1478 = _1358 * 0.5;
        float _1479 = _1368 * 0.5;
        float _1480 = _1378 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_949, _950, _951), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4500 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4511 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4522 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_1505 + 1.0))) + _1510) * _1391;
        _1527 = _1358;
        _1529 = _1357;
        _1530 = _1356;
        _1531 = _1368;
        _1532 = _1367;
        _1533 = _1366;
        _1534 = _1378;
        _1535 = _1377;
        _1536 = _1376;
        _1537 = _1391;
        _1538 = _1390;
        _1539 = _1389;
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1528;
        _1529 = _1528;
        _1530 = _1528;
        _1531 = _1528;
        _1532 = _1528;
        _1533 = _1528;
        _1534 = _1528;
        _1535 = _1528;
        _1536 = _1528;
        _1537 = _1528;
        _1538 = _1528;
        _1539 = _1528;
        _1540 = 0.0;
        _1541 = 0.0;
        _1542 = 0.0;
    }
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1569 = fma(_1198, cbModelParam._m0[30u].z, fma(_1194, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1190));
        float _1573 = fma(_1198, cbModelParam._m0[31u].z, fma(_1194, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1190));
        float _1577 = fma(_1198, cbModelParam._m0[32u].z, fma(_1194, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1190));
        float _1600 = _1190 + _949;
        float _1601 = _1194 + _950;
        float _1602 = _1198 + _951;
        float _1612 = fma(_1602, cbModelParam._m0[30u].z, fma(_1601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1600)) - _1569;
        float _1613 = fma(_1602, cbModelParam._m0[31u].z, fma(_1601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1600)) - _1573;
        float _1614 = fma(_1602, cbModelParam._m0[32u].z, fma(_1601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1600)) - _1577;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1569 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1573 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[35u].z) + ((((((_1577 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1668 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1635.x + (-0.5));
        float _1670 = _1668 * (_1635.y + (-0.5));
        float _1671 = _1668 * (_1635.z + (-0.5));
        float _1678 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1642.x + (-0.5));
        float _1680 = _1678 * (_1642.y + (-0.5));
        float _1681 = _1678 * (_1642.z + (-0.5));
        float _1688 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1649.x + (-0.5));
        float _1690 = _1688 * (_1649.y + (-0.5));
        float _1691 = _1688 * (_1649.z + (-0.5));
        float _1698 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1656.x + (-0.5));
        float _1700 = _1698 * (_1656.y + (-0.5));
        float _1701 = _1698 * (_1656.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_949, _950, _951), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4563 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4574 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4585 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * (_1732 + 1.0))) + _1737) * _1702;
        float _1747 = _1670 * 0.5;
        float _1748 = _1680 * 0.5;
        float _1749 = _1690 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_949, _950, _951), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4596 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4607 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4618 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (_1774 + 1.0))) + _1779) * _1703;
        float _1789 = _1671 * 0.5;
        float _1790 = _1681 * 0.5;
        float _1791 = _1691 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_949, _950, _951), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4629 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4640 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4651 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (_1816 + 1.0))) + _1821) * _1704;
        _1838 = _1671;
        _1839 = _1670;
        _1840 = _1669;
        _1841 = _1681;
        _1842 = _1680;
        _1843 = _1679;
        _1844 = _1691;
        _1845 = _1690;
        _1846 = _1689;
        _1847 = _1704;
        _1848 = _1703;
        _1849 = _1702;
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
    }
    else
    {
        _1838 = _1528;
        _1839 = _1528;
        _1840 = _1528;
        _1841 = _1528;
        _1842 = _1528;
        _1843 = _1528;
        _1844 = _1528;
        _1845 = _1528;
        _1846 = _1528;
        _1847 = _1528;
        _1848 = _1528;
        _1849 = _1528;
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
    }
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1540)) + _1540;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1541)) + _1541;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1542)) + _1542;
    float _1885 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1862));
    float _1906 = _1134 * 0.5;
    float _1907 = _1135 * 0.5;
    float _1908 = _1136 * 0.5;
    float _1909 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1912 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1915 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1922 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1527, _1531, _1534, _1537));
        float _1926 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1930 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1937 = dot(vec4(cbModelParam._m0[39u]), vec4(_1906, _1907, _1908, 1.0));
        _1949 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1949 = 1.0;
    }
    float _1960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1951 = dot(vec4(cbModelParam._m0[40u]), vec4(_1906, _1907, _1908, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1951) ? 0.0 : (isnan(0.0) ? _1951 : max(0.0, _1951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1964 = (_1960 * cbModelParam._m0[1u].x) + (_1949 * (1.0 - cbModelParam._m0[1u].x));
    float _1974 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _952);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1974 : min(cbModelParam._m0[25u].z, _1974));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2022 = fma(_1198, cbModelParam._m0[13u].z, fma(_1194, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1190)) + cbModelParam._m0[13u].w;
        float _2026 = fma(_1198, cbModelParam._m0[14u].z, fma(_1194, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1190)) + cbModelParam._m0[14u].w;
        float _2030 = fma(_1198, cbModelParam._m0[15u].z, fma(_1194, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1190)) + cbModelParam._m0[15u].w;
        float _2033 = fma(_1136, cbModelParam._m0[13u].z, fma(_1135, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1134));
        float _2036 = fma(_1136, cbModelParam._m0[14u].z, fma(_1135, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1134));
        float _2039 = fma(_1136, cbModelParam._m0[15u].z, fma(_1135, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1134));
        float _2067;
        if (_2033 > 0.0)
        {
            _2067 = abs((1.0 - _2022) / _2033);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2022 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2067 = frontier_phi_17_15_ladder;
        }
        float _2238;
        if (_2036 > 0.0)
        {
            _2238 = abs((1.0 - _2026) / _2036);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2026 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2238 = frontier_phi_26_22_ladder;
        }
        float _2533;
        if (_2039 > 0.0)
        {
            _2533 = abs((1.0 - _2030) / _2039);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2030 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2533 = frontier_phi_38_33_ladder;
        }
        float _2535 = isnan(_2238) ? _2067 : (isnan(_2067) ? _2238 : min(_2067, _2238));
        float _2536 = isnan(_2533) ? _2535 : (isnan(_2535) ? _2533 : min(_2535, _2533));
        float _2540 = (_2536 * _2033) + _2022;
        float _2541 = (_2536 * _2036) + _2026;
        float _2542 = (_2536 * _2039) + _2030;
        float _2543 = _2536 * 9.9999997473787516355514526367188e-05;
        float _2545 = (-1.0) - _2543;
        float _2547 = _2543 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2542 > _2547) || ((_2542 < _2545) || ((_2541 > _2547) || ((_2541 < _2545) || ((_2540 < _2545) || (_2540 > _2547))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2542, cbModelParam._m0[9u].z, fma(_2541, cbModelParam._m0[9u].y, _2540 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2542, cbModelParam._m0[10u].z, fma(_2541, cbModelParam._m0[10u].y, _2540 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2542, cbModelParam._m0[11u].z, fma(_2541, cbModelParam._m0[11u].y, _2540 * cbModelParam._m0[11u].x))), _1975);
            frontier_phi_16_38_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2055 = frontier_phi_16_38_ladder_2;
        _2057 = frontier_phi_16_38_ladder_1;
        _2059 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2043 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1134, _1135, _1136), _1975);
        _2055 = _2043.x * cbModelParam._m0[1u].y;
        _2057 = _2043.y * cbModelParam._m0[1u].y;
        _2059 = _2043.z * cbModelParam._m0[1u].y;
    }
    float _2063 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _952);
    float _2064 = isnan(_2063) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2063 : min(cbModelParam._m0[25u].w, _2063));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1198, cbModelParam._m0[21u].z, fma(_1194, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1190)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1198, cbModelParam._m0[22u].z, fma(_1194, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1190)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1198, cbModelParam._m0[23u].z, fma(_1194, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1190)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1136, cbModelParam._m0[21u].z, fma(_1135, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1134));
        float _2131 = fma(_1136, cbModelParam._m0[22u].z, fma(_1135, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1134));
        float _2134 = fma(_1136, cbModelParam._m0[23u].z, fma(_1135, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1134));
        float _2243;
        if (_2128 > 0.0)
        {
            _2243 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2243 = frontier_phi_28_24_ladder;
        }
        float _2560;
        if (_2131 > 0.0)
        {
            _2560 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2560 = frontier_phi_40_35_ladder;
        }
        float _2898;
        if (_2134 > 0.0)
        {
            _2898 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2898 = frontier_phi_50_47_ladder;
        }
        float _2900 = isnan(_2560) ? _2243 : (isnan(_2243) ? _2560 : min(_2243, _2560));
        float _2901 = isnan(_2898) ? _2900 : (isnan(_2900) ? _2898 : min(_2900, _2898));
        float _2905 = (_2901 * _2128) + _2117;
        float _2906 = (_2901 * _2131) + _2121;
        float _2907 = (_2901 * _2134) + _2125;
        float _2908 = _2901 * 9.9999997473787516355514526367188e-05;
        float _2909 = (-1.0) - _2908;
        float _2911 = _2908 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2907 > _2911) || ((_2907 < _2909) || ((_2906 > _2911) || ((_2906 < _2909) || ((_2905 < _2909) || (_2905 > _2911))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3029 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2907, cbModelParam._m0[17u].z, fma(_2906, cbModelParam._m0[17u].y, _2905 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2907, cbModelParam._m0[18u].z, fma(_2906, cbModelParam._m0[18u].y, _2905 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2907, cbModelParam._m0[19u].z, fma(_2906, cbModelParam._m0[19u].y, _2905 * cbModelParam._m0[19u].x))), _2064);
            frontier_phi_25_50_ladder = _3029.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3029.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3029.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_25_50_ladder_2;
        _2155 = frontier_phi_25_50_ladder_1;
        _2157 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1134, _1135, _1136), _2064);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2170 = (((_1161 * _1110) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2153 - _2055)) + _2055);
    float _2172 = (((_1161 * _1112) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2155 - _2057)) + _2057);
    float _2174 = (((_1161 * _1113) + _1162) * _1126) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    float _2217 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2221 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2230 = _2217 / _2229;
    float _2231 = _2221 / _2229;
    float _2232 = _2225 / _2229;
    float _2379;
    float _2380;
    float _2381;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2259 = ((uint(_2232 > cbSceneParam._m0[59u].y) + uint(_2232 > cbSceneParam._m0[59u].x)) + uint(_2232 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2260 = _2259 + 43u;
        uint _2268 = _2259 + 44u;
        uint _2276 = _2259 + 45u;
        uint _2284 = _2259 + 46u;
        float _2295 = fma(_2229, cbSceneParam._m0[_2260].w, fma(_2225, cbSceneParam._m0[_2260].z, fma(_2221, cbSceneParam._m0[_2260].y, _2217 * cbSceneParam._m0[_2260].x)));
        float _2299 = fma(_2229, cbSceneParam._m0[_2268].w, fma(_2225, cbSceneParam._m0[_2268].z, fma(_2221, cbSceneParam._m0[_2268].y, _2217 * cbSceneParam._m0[_2268].x)));
        float _2307 = fma(_2229, cbSceneParam._m0[_2284].w, fma(_2225, cbSceneParam._m0[_2284].z, fma(_2221, cbSceneParam._m0[_2284].y, _2217 * cbSceneParam._m0[_2284].x)));
        float _2312 = cbSceneParam._m0[33u].z * _2307;
        float _2314 = cbSceneParam._m0[33u].w * _2307;
        float _2317 = fma(_2229, cbSceneParam._m0[_2276].w, fma(_2225, cbSceneParam._m0[_2276].z, fma(_2221, cbSceneParam._m0[_2276].y, _2217 * cbSceneParam._m0[_2276].x))) / _2307;
        float _2365 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
        float _4777 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2372 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2312 + _2295) / _2307, (_2314 + _2299) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2314 + _2295) / _2307, (_2299 - _2312) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2312) / _2307, (_2299 - _2314) / _2307), _2317), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2295 - _2314) / _2307, (_2312 + _2299) / _2307), _2317), 0.0)).x), vec4(0.25)));
        _2379 = 1.0 - (_2372 * cbSceneParam._m0[34u].x);
        _2380 = 1.0 - (_2372 * cbSceneParam._m0[34u].y);
        _2381 = 1.0 - (_2372 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2379 = 1.0;
        _2380 = 1.0;
        _2381 = 1.0;
    }
    float _2445;
    float _2447;
    float _2449;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2433 = fma(_2229, cbSceneParam._m0[63u].w, fma(_2225, cbSceneParam._m0[63u].z, fma(_2221, cbSceneParam._m0[63u].y, _2217 * cbSceneParam._m0[63u].x)));
        float _2434 = fma(_2229, cbSceneParam._m0[60u].w, fma(_2225, cbSceneParam._m0[60u].z, fma(_2221, cbSceneParam._m0[60u].y, _2217 * cbSceneParam._m0[60u].x))) / _2433;
        float _2435 = fma(_2229, cbSceneParam._m0[61u].w, fma(_2225, cbSceneParam._m0[61u].z, fma(_2221, cbSceneParam._m0[61u].y, _2217 * cbSceneParam._m0[61u].x))) / _2433;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2434 >= cbSceneParam._m0[64u].x) && (_2435 >= cbSceneParam._m0[64u].y)) && (_2434 <= cbSceneParam._m0[64u].z)) && (_2435 <= cbSceneParam._m0[64u].w))
        {
            float _2573 = fma(_2229, cbSceneParam._m0[62u].w, fma(_2225, cbSceneParam._m0[62u].z, fma(_2221, cbSceneParam._m0[62u].y, _2217 * cbSceneParam._m0[62u].x))) / _2433;
            float _2577 = isnan(cbSceneParam._m0[41u].w) ? _2573 : (isnan(_2573) ? cbSceneParam._m0[41u].w : max(_2573, cbSceneParam._m0[41u].w));
            float _2620 = (cbSceneParam._m0[33u].x - sqrt(((_2231 * _2231) + (_2230 * _2230)) + (_2232 * _2232))) * cbSceneParam._m0[33u].y;
            float _4793 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
            float _2627 = (isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2434, cbSceneParam._m0[33u].w + _2435), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2434, _2435 - cbSceneParam._m0[33u].z), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].z, _2435 - cbSceneParam._m0[33u].w), _2577), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2434 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2435), _2577), 0.0)).x), vec4(0.25)));
            float _2631 = 1.0 - (_2627 * cbSceneParam._m0[34u].x);
            float _2632 = 1.0 - (_2627 * cbSceneParam._m0[34u].y);
            float _2633 = 1.0 - (_2627 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2633) ? _2381 : (isnan(_2381) ? _2633 : min(_2381, _2633));
            frontier_phi_37_36_ladder_1 = isnan(_2632) ? _2380 : (isnan(_2380) ? _2632 : min(_2380, _2632));
            frontier_phi_37_36_ladder_2 = isnan(_2631) ? _2379 : (isnan(_2379) ? _2631 : min(_2379, _2631));
        }
        else
        {
            frontier_phi_37_36_ladder = _2381;
            frontier_phi_37_36_ladder_1 = _2380;
            frontier_phi_37_36_ladder_2 = _2379;
        }
        _2445 = frontier_phi_37_36_ladder_2;
        _2447 = frontier_phi_37_36_ladder_1;
        _2449 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2445 = _2379;
        _2447 = _2380;
        _2449 = _2381;
    }
    uvec4 _2454 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2456 = _2454.x * 14u;
    uint _2457 = _2456 + 13u;
    float _2464 = _1126 + (-1.0);
    float _2469 = (cbLight._m0[_2457].x * _2464) + 1.0;
    float _2470 = (cbLight._m0[_2457].y * _2464) + 1.0;
    float _2471 = (cbLight._m0[_2457].z * _2464) + 1.0;
    float _2472 = (cbLight._m0[_2457].w * _2464) + 1.0;
    uint _2473 = _2456 + 5u;
    float _2479 = isnan(1.0) ? _2470 : (isnan(_2470) ? 1.0 : min(_2470, 1.0));
    uint _2483 = _2456 + 4u;
    float _2492 = isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0));
    uint _2496 = _2456 | 1u;
    float _2507 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_949, _950, _951));
    float _2510 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_949, _950, _951));
    float _4829 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _4840 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2515 = (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * 0.3183098733425140380859375;
    float _2517 = (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0))) * 0.3183098733425140380859375;
    float _2524 = ((cbLight._m0[_2473].x * _2479) * _2517) + (((cbLight._m0[_2483].x * _2445) * _2492) * _2515);
    float _2525 = ((_2479 * cbLight._m0[_2473].y) * _2517) + (((cbLight._m0[_2483].y * _2447) * _2492) * _2515);
    float _2526 = ((_2479 * cbLight._m0[_2473].z) * _2517) + (((cbLight._m0[_2483].z * _2449) * _2492) * _2515);
    uvec4 _2530 = floatBitsToUint(cbLight._m0[_2456 + 12u]);
    bool _2532 = _2530.x == 0u;
    float _2634;
    float _2636;
    float _2638;
    if (_2532)
    {
        _2634 = _2524;
        _2636 = _2525;
        _2638 = _2526;
    }
    else
    {
        uint _2642 = _2456 + 6u;
        float _2658 = (dot(vec3(cbLight._m0[_2456 + 2u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2659 = _2658 * _2658;
        float _4851 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2660 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2661 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2634 = (((cbLight._m0[_2642].x * 0.3183098733425140380859375) * _2660) * _2661) + _2524;
        _2636 = (((cbLight._m0[_2642].y * 0.3183098733425140380859375) * _2660) * _2661) + _2525;
        _2638 = (((cbLight._m0[_2642].z * 0.3183098733425140380859375) * _2660) * _2661) + _2526;
    }
    bool _2641 = _2530.y == 0u;
    float _2696;
    float _2698;
    float _2700;
    if (_2641)
    {
        _2696 = _2634;
        _2698 = _2636;
        _2700 = _2638;
    }
    else
    {
        uint _2869 = _2456 + 7u;
        float _2885 = (dot(vec3(cbLight._m0[_2456 + 3u].xyz), vec3(_949, _950, _951)) * 0.5) + 0.5;
        float _2886 = _2885 * _2885;
        float _4867 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2887 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2888 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _2696 = (((cbLight._m0[_2869].x * 0.3183098733425140380859375) * _2887) * _2888) + _2634;
        _2698 = (((cbLight._m0[_2869].y * 0.3183098733425140380859375) * _2887) * _2888) + _2636;
        _2700 = (((cbLight._m0[_2869].z * 0.3183098733425140380859375) * _2887) * _2888) + _2638;
    }
    uint _2703 = _2456 + 8u;
    float _2716 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2456].w)) * _952) * 0.949999988079071044921875);
    float _2717 = _2716 * _2716;
    float _2718 = cbLight._m0[_2456].x + _1028;
    float _2719 = cbLight._m0[_2456].y + _1029;
    float _2720 = cbLight._m0[_2456].z + _1030;
    float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
    float _2725 = _2724 * _2718;
    float _2726 = _2724 * _2719;
    float _2727 = _2724 * _2720;
    float _2728 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2456].xyz));
    float _4883 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
    float _2731 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
    float _4894 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _2732 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2733 = dot(vec3(_949, _950, _951), vec3(_2725, _2726, _2727));
    float _4905 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2737 = dot(vec3(cbLight._m0[_2456].xyz), vec3(_2725, _2726, _2727));
    float _4916 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2741 = _2717 * _2717;
    float _2745 = ((_2736 * _2736) * (_2741 + (-1.0))) + 1.0;
    float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
    float _2754 = 0.959999978542327880859375 - _1107;
    float _2756 = 0.959999978542327880859375 - _1108;
    float _2757 = 0.959999978542327880859375 - _1109;
    float _2764 = 1.0 - _2717;
    float _2775 = (0.5 / (((_2732 * ((_2731 * _2764) + _2717)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2764) + _2717) * _2731))) * _2731;
    float _4927 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
    float _2777 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2741 / ((_2745 * _2745) * 3.141590118408203125));
    uint _2791 = _2456 + 9u;
    float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2496].w)) * _952) * 0.949999988079071044921875);
    float _2803 = _2802 * _2802;
    float _2804 = cbLight._m0[_2496].x + _1028;
    float _2805 = cbLight._m0[_2496].y + _1029;
    float _2806 = cbLight._m0[_2496].z + _1030;
    float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
    float _2811 = _2810 * _2804;
    float _2812 = _2810 * _2805;
    float _2813 = _2810 * _2806;
    float _2814 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2496].xyz));
    float _4938 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2817 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
    float _2818 = dot(vec3(_949, _950, _951), vec3(_2811, _2812, _2813));
    float _4949 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2821 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
    float _2822 = dot(vec3(cbLight._m0[_2496].xyz), vec3(_2811, _2812, _2813));
    float _4960 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2826 = _2803 * _2803;
    float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
    float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) * 5.0);
    float _2844 = 1.0 - _2803;
    float _2854 = (0.5 / (((_2732 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2844) + _2803) * _2817))) * _2817;
    float _4971 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
    float _2856 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
    float _2866 = (((((_2837 * _2754) + _1110) * cbLight._m0[_2791].x) * _2856) * _2479) + ((((cbLight._m0[_2703].x * _2445) * ((_2753 * _2754) + _1110)) * _2777) * _2492);
    float _2867 = (((((_2837 * _2756) + _1112) * cbLight._m0[_2791].y) * _2856) * _2479) + ((((cbLight._m0[_2703].y * _2447) * ((_2753 * _2756) + _1112)) * _2777) * _2492);
    float _2868 = (((((_2837 * _2757) + _1113) * cbLight._m0[_2791].z) * _2856) * _2479) + ((((cbLight._m0[_2703].z * _2449) * ((_2753 * _2757) + _1113)) * _2777) * _2492);
    float _2924;
    float _2926;
    float _2928;
    if (_2532)
    {
        _2924 = _2866;
        _2926 = _2867;
        _2928 = _2868;
    }
    else
    {
        uint _2930 = _2456 + 2u;
        uint _2934 = _2456 + 10u;
        float _2948 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2930].w)) * _952) * 0.949999988079071044921875);
        float _2949 = _2948 * _2948;
        float _2950 = cbLight._m0[_2930].x + _1028;
        float _2951 = cbLight._m0[_2930].y + _1029;
        float _2952 = cbLight._m0[_2930].z + _1030;
        float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
        float _2957 = _2956 * _2950;
        float _2958 = _2956 * _2951;
        float _2959 = _2956 * _2952;
        float _2960 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_2930].xyz));
        float _4982 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2963 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
        float _2964 = dot(vec3(_949, _950, _951), vec3(_2957, _2958, _2959));
        float _4993 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _2968 = dot(vec3(cbLight._m0[_2930].xyz), vec3(_2957, _2958, _2959));
        float _5004 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2972 = _2949 * _2949;
        float _2976 = ((_2967 * _2967) * (_2972 + (-1.0))) + 1.0;
        float _2983 = exp2(log2(1.0 - (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) * 5.0);
        float _2990 = 1.0 - _2949;
        float _3000 = (0.5 / (((_2732 * ((_2963 * _2990) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _2990) + _2949) * _2963))) * _2963;
        float _5015 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3002 = (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2972 / ((_2976 * _2976) * 3.141590118408203125));
        float _3003 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
        _2924 = (((((_2983 * _2754) + _1110) * cbLight._m0[_2934].x) * _3002) * _3003) + _2866;
        _2926 = (((((_2983 * _2756) + _1112) * cbLight._m0[_2934].y) * _3002) * _3003) + _2867;
        _2928 = (((((_2983 * _2757) + _1113) * cbLight._m0[_2934].z) * _3002) * _3003) + _2868;
    }
    float _3034;
    float _3036;
    float _3038;
    if (_2641)
    {
        _3034 = _2924;
        _3036 = _2926;
        _3038 = _2928;
    }
    else
    {
        uint _3045 = _2456 + 3u;
        uint _3049 = _2456 + 11u;
        float _3063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3045].w)) * _952) * 0.949999988079071044921875);
        float _3064 = _3063 * _3063;
        float _3065 = cbLight._m0[_3045].x + _1028;
        float _3066 = cbLight._m0[_3045].y + _1029;
        float _3067 = cbLight._m0[_3045].z + _1030;
        float _3071 = inversesqrt(dot(vec3(_3065, _3066, _3067), vec3(_3065, _3066, _3067)));
        float _3072 = _3071 * _3065;
        float _3073 = _3071 * _3066;
        float _3074 = _3071 * _3067;
        float _3075 = dot(vec3(_949, _950, _951), vec3(cbLight._m0[_3045].xyz));
        float _5031 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3078 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
        float _3079 = dot(vec3(_949, _950, _951), vec3(_3072, _3073, _3074));
        float _5042 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3082 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
        float _3083 = dot(vec3(cbLight._m0[_3045].xyz), vec3(_3072, _3073, _3074));
        float _5053 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3087 = _3064 * _3064;
        float _3091 = ((_3082 * _3082) * (_3087 + (-1.0))) + 1.0;
        float _3098 = exp2(log2(1.0 - (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) * 5.0);
        float _3105 = 1.0 - _3064;
        float _3115 = (0.5 / (((_2732 * ((_3078 * _3105) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_2732 * _3105) + _3064) * _3078))) * _3078;
        float _5064 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
        float _3117 = (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3087 / ((_3091 * _3091) * 3.141590118408203125));
        float _3118 = isnan(1.0) ? _2472 : (isnan(_2472) ? 1.0 : min(_2472, 1.0));
        _3034 = (((((_3098 * _2754) + _1110) * cbLight._m0[_3049].x) * _3117) * _3118) + _2924;
        _3036 = (((((_3098 * _2756) + _1112) * cbLight._m0[_3049].y) * _3117) * _3118) + _2926;
        _3038 = (((((_3098 * _2757) + _1113) * cbLight._m0[_3049].z) * _3117) * _3118) + _2928;
    }
    float _3184;
    float _3186;
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    if (_2454.y == 0u)
    {
        uvec4 _3139 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3140 = _3139.x;
        uint _3151 = uint((float(_3139.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1049) / _3140))) + floor(float(uint(cbSceneParam._m0[85u].x * _1048) / _3140)));
        float _3161 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3162 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
        uint _3165 = uint(isnan(14.0) ? _3162 : (isnan(_3162) ? 14.0 : min(_3162, 14.0)));
        uvec4 _3170 = texelFetch(g_lightClusterGridBuffer, int(((_3165 << 2u) + (_3151 << 6u)) >> 2u));
        uint _3171 = _3170.x;
        uint _3172 = _3139.z;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        if (((((1u << ((_3172 >> 4u) & 15u)) + 4294967295u) & _3171) == 0u) || ((_3172 & 240u) == 0u))
        {
            _3251 = 0.0;
            _3253 = 0.0;
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
        }
        else
        {
            float _3252;
            float _3254;
            float _3256;
            float _3258;
            float _3260;
            float _3262;
            float _3403 = 0.0;
            float _3404 = 0.0;
            float _3405 = 0.0;
            float _3406 = 0.0;
            float _3407 = 0.0;
            float _3408 = 0.0;
            uint _3409 = 0u;
            uint _3418;
            bool _3419;
            for (;;)
            {
                _3418 = texelFetch(g_lightClassification, int((((_3165 << 5u) + (_3151 << 9u)) + (_3409 << 2u)) >> 2u)).x;
                _3419 = _3418 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3419)
                {
                    frontier_phi_71_pred = _3408;
                    frontier_phi_71_pred_1 = _3407;
                    frontier_phi_71_pred_2 = _3406;
                    frontier_phi_71_pred_3 = _3405;
                    frontier_phi_71_pred_4 = _3404;
                    frontier_phi_71_pred_5 = _3403;
                }
                else
                {
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    float _3553;
                    uint _3554;
                    _3548 = _3403;
                    _3549 = _3404;
                    _3550 = _3405;
                    _3551 = _3406;
                    _3552 = _3407;
                    _3553 = _3408;
                    _3554 = _3418;
                    float _3475;
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    for (;;)
                    {
                        uint _3558 = uint(findLSB(_3554)) + (_3409 << 5u);
                        uint _3555 = (_3554 + 4294967295u) & _3554;
                        uint _3560 = _3558 * 48u;
                        vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 3u)).x));
                        uint _3580 = (_3558 * 48u) + 4u;
                        vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 3u)).x));
                        uint _3599 = (_3558 * 48u) + 8u;
                        vec3 _3610 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3599)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 2u)).x));
                        float _3614 = _3574.x - _2230;
                        float _3615 = _3574.y - _2231;
                        float _3616 = _3574.z - _2232;
                        float _3617 = dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616));
                        float _3620 = inversesqrt(_3617);
                        float _3621 = _3620 * _3614;
                        float _3622 = _3620 * _3615;
                        float _3623 = _3620 * _3616;
                        float _3624 = dot(vec3(_1067, _1070, _1073), vec3(_3621, _3622, _3623));
                        float _3629 = 1.0 - (_3617 * _3574.w);
                        float _5090 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3630 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3631 = sqrt(_3617) * _3593.w;
                        float _3634 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                        float _3635 = _3634 * _3634;
                        float _3638 = ((1.0 - _3635) * _3624) + _3635;
                        float _3641 = _3631 * _3631;
                        float _3645 = ((isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0))) * _3630) / ((_3641 * 0.699999988079071044921875) + 1.0);
                        float _3649 = (-0.0) - _2230;
                        float _3650 = (-0.0) - _2231;
                        float _3651 = (-0.0) - _2232;
                        float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                        float _3656 = _3655 * _3649;
                        float _3657 = _3655 * _3650;
                        float _3658 = _3655 * _3651;
                        float _3665 = exp2(log2(1.0 / ((_3641 * 3.5) + 5.0)) * 0.25);
                        float _3666 = 1.0 - _1142;
                        float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                        float _3674 = _3673 * _3673;
                        float _3675 = _3674 * _3674;
                        float _3676 = _3656 + _3621;
                        float _3677 = _3657 + _3622;
                        float _3678 = _3658 + _3623;
                        float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                        float _3686 = dot(vec3(_1067, _1070, _1073), vec3(_3656, _3657, _3658));
                        float _5106 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3689 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                        float _3690 = dot(vec3(_1067, _1070, _1073), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                        float _5117 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3693 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                        float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                        float _3698 = _3634 * _3674;
                        float _3699 = _3698 * _3698;
                        float _3702 = ((1.0 - _3699) * _3624) + _3699;
                        float _5128 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                        float _3703 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                        float _3704 = 1.0 - _3674;
                        float _3714 = (0.5 / (((_3703 * ((_3689 * _3704) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3674) * _3689))) * _3703;
                        float _5139 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                        float _3725 = (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0)))) / ((_3697 * _3697) * ((_3641 * 2.1991131305694580078125) + 3.141590118408203125))) * _3630;
                        _3478 = (_3645 * _3593.x) + _3551;
                        _3479 = (_3645 * _3593.y) + _3552;
                        _3480 = (_3645 * _3593.z) + _3553;
                        _3475 = (_3725 * _3610.x) + _3548;
                        _3476 = (_3725 * _3610.y) + _3549;
                        _3477 = (_3725 * _3610.z) + _3550;
                        if (_3555 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3548 = _3475;
                            _3549 = _3476;
                            _3550 = _3477;
                            _3551 = _3478;
                            _3552 = _3479;
                            _3553 = _3480;
                            _3554 = _3555;
                        }
                    }
                    frontier_phi_71_pred = _3480;
                    frontier_phi_71_pred_1 = _3479;
                    frontier_phi_71_pred_2 = _3478;
                    frontier_phi_71_pred_3 = _3477;
                    frontier_phi_71_pred_4 = _3476;
                    frontier_phi_71_pred_5 = _3475;
                }
                _3262 = frontier_phi_71_pred;
                _3260 = frontier_phi_71_pred_1;
                _3258 = frontier_phi_71_pred_2;
                _3256 = frontier_phi_71_pred_3;
                _3254 = frontier_phi_71_pred_4;
                _3252 = frontier_phi_71_pred_5;
                uint _3410 = _3409 + 1u;
                if (_3410 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3403 = _3252;
                    _3404 = _3254;
                    _3405 = _3256;
                    _3406 = _3258;
                    _3407 = _3260;
                    _3408 = _3262;
                    _3409 = _3410;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3251 = _3252;
            _3253 = _3254;
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
        }
        uvec4 _3265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3266 = _3265.z;
        uint _3268 = (_3266 >> 8u) & 15u;
        float _3371;
        float _3373;
        float _3375;
        float _3377;
        float _3379;
        float _3381;
        if (((4294967295u << _3268) & _3171) == 0u)
        {
            _3371 = _3251;
            _3373 = _3253;
            _3375 = _3255;
            _3377 = _3257;
            _3379 = _3259;
            _3381 = _3261;
        }
        else
        {
            float _3396 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _3397 = _3396 * _2230;
            float _3398 = _3396 * _2231;
            float _3399 = _3396 * _2232;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3268 < ((_3266 >> 12u) & 15u))
            {
                float _3372;
                float _3374;
                float _3376;
                float _3378;
                float _3380;
                float _3382;
                float _3531 = _3251;
                float _3532 = _3253;
                float _3533 = _3255;
                float _3534 = _3257;
                float _3535 = _3259;
                float _3536 = _3261;
                uint _3537 = _3268;
                uint _3546;
                bool _3547;
                for (;;)
                {
                    _3546 = texelFetch(g_lightClassification, int((((_3165 << 5u) + (_3151 << 9u)) + (_3537 << 2u)) >> 2u)).x;
                    _3547 = _3546 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3547)
                    {
                        frontier_phi_82_pred = _3536;
                        frontier_phi_82_pred_1 = _3535;
                        frontier_phi_82_pred_2 = _3534;
                        frontier_phi_82_pred_3 = _3533;
                        frontier_phi_82_pred_4 = _3532;
                        frontier_phi_82_pred_5 = _3531;
                    }
                    else
                    {
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _4032;
                        float _4033;
                        float _4034;
                        float _4035;
                        float _4036;
                        float _4037;
                        float _3752 = _3531;
                        float _3753 = _3532;
                        float _3754 = _3533;
                        float _3755 = _3534;
                        float _3756 = _3535;
                        float _3757 = _3536;
                        uint _3758 = _3546;
                        uint _3759;
                        vec4 _3784;
                        float _3785;
                        vec4 _3800;
                        vec3 _3812;
                        vec4 _3827;
                        vec4 _3842;
                        float _3888;
                        bool _3889;
                        for (;;)
                        {
                            uint _3769 = ((_3537 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3758));
                            _3759 = (_3758 + 4294967295u) & _3758;
                            uint _3771 = _3769 * 40u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            _3785 = _3784.w;
                            uint _3787 = (_3769 * 40u) + 4u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            uint _3802 = (_3769 * 40u) + 8u;
                            _3812 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 2u)).x));
                            uint _3814 = (_3769 * 40u) + 16u;
                            _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            uint _3829 = (_3769 * 40u) + 20u;
                            _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3844 = (_3769 * 40u) + 24u;
                            vec4 _3857 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3844)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3844 + 3u)).x));
                            uint _3863 = (_3769 * 40u) + 28u;
                            vec4 _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            _3888 = fma(_2232, _3876.z, fma(_2231, _3876.y, _3876.x * _2230)) + _3876.w;
                            _3889 = !((fma(_2232, _3857.z, fma(_2231, _3857.y, _3857.x * _2230)) + _3857.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3889)
                            {
                                float _3916 = _3784.x - _2230;
                                float _3917 = _3784.y - _2231;
                                float _3918 = _3784.z - _2232;
                                float _3919 = dot(vec3(_3916, _3917, _3918), vec3(_3916, _3917, _3918));
                                float _3922 = inversesqrt(_3919);
                                float _3923 = _3922 * _3916;
                                float _3924 = _3922 * _3917;
                                float _3925 = _3922 * _3918;
                                float _3929 = 1.0 - (_3919 / (_3785 * _3785));
                                float _5150 = isnan(0.0) ? _3929 : (isnan(_3929) ? 0.0 : max(_3929, 0.0));
                                float _3930 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3934 = sqrt(_3919) * _3800.w;
                                float _3936 = 1.39999997615814208984375 / (_3934 + 1.39999997615814208984375);
                                float _3937 = _3936 * _3936;
                                float _3940 = ((1.0 - _3937) * dot(vec3(_3923, _3924, _3925), vec3(_1067, _1070, _1073))) + _3937;
                                float _3943 = _3934 * _3934;
                                float _3947 = (fma(_2232, _3827.z, fma(_2231, _3827.y, _3827.x * _2230)) + _3827.w) / _3888;
                                float _3948 = (fma(_2232, _3842.z, fma(_2231, _3842.y, _3842.x * _2230)) + _3842.w) / _3888;
                                float _3952 = 1.0 - dot(vec2(_3947, _3948), vec2(_3947, _3948));
                                float _5166 = isnan(0.0) ? _3952 : (isnan(_3952) ? 0.0 : max(_3952, 0.0));
                                float _3953 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
                                float _3954 = _3953 * (((isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0))) * _3930) / ((_3943 * 0.699999988079071044921875) + 1.0));
                                float _3966 = exp2(log2(1.0 / ((_3943 * 3.5) + 5.0)) * 0.25);
                                float _3967 = 1.0 - _1142;
                                float _3974 = sqrt(1.0 - ((1.0 - (_3967 * _3967)) * (1.0 - (_3966 * _3966))));
                                float _3975 = _3974 * _3974;
                                float _3976 = _3975 * _3975;
                                float _3977 = _3923 - _3397;
                                float _3978 = _3924 - _3398;
                                float _3979 = _3925 - _3399;
                                float _3983 = inversesqrt(dot(vec3(_3977, _3978, _3979), vec3(_3977, _3978, _3979)));
                                float _3987 = dot(vec3(_1067, _1070, _1073), vec3((-0.0) - _3397, (-0.0) - _3398, (-0.0) - _3399));
                                float _5177 = isnan(0.0) ? _3987 : (isnan(_3987) ? 0.0 : max(_3987, 0.0));
                                float _3990 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _3991 = dot(vec3(_1067, _1070, _1073), vec3(_3983 * _3977, _3983 * _3978, _3983 * _3979));
                                float _5188 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3994 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                                float _3998 = ((_3994 * _3994) * (_3976 + (-1.0))) + 1.0;
                                float _3999 = _3936 * _3975;
                                float _4000 = _3999 * _3999;
                                float _4006 = ((1.0 - _4000) * dot(vec3(_1067, _1070, _1073), vec3(_3923, _3924, _3925))) + _4000;
                                float _5199 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4007 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                                float _4008 = 1.0 - _3975;
                                float _4018 = (0.5 / (((_4007 * ((_3990 * _4008) + _3975)) + 9.9999999392252902907785028219223e-09) + (((_4007 * _4008) + _3975) * _3990))) * _4007;
                                float _5210 = isnan(0.0) ? _4018 : (isnan(_4018) ? 0.0 : max(_4018, 0.0));
                                float _4028 = (_3953 * _3930) * (((_3976 * 3.1415927410125732421875) * (isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0)))) / ((_3998 * _3998) * ((_3943 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3954 * _3800.z;
                                frontier_phi_88_pred_1 = _3954 * _3800.y;
                                frontier_phi_88_pred_2 = _3954 * _3800.x;
                                frontier_phi_88_pred_3 = _4028 * _3812.z;
                                frontier_phi_88_pred_4 = _4028 * _3812.y;
                                frontier_phi_88_pred_5 = _4028 * _3812.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4037 = frontier_phi_88_pred;
                            _4036 = frontier_phi_88_pred_1;
                            _4035 = frontier_phi_88_pred_2;
                            _4034 = frontier_phi_88_pred_3;
                            _4033 = frontier_phi_88_pred_4;
                            _4032 = frontier_phi_88_pred_5;
                            _3742 = _4035 + _3755;
                            _3743 = _4036 + _3756;
                            _3744 = _4037 + _3757;
                            _3739 = _4032 + _3752;
                            _3740 = _4033 + _3753;
                            _3741 = _4034 + _3754;
                            if (_3759 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3752 = _3739;
                                _3753 = _3740;
                                _3754 = _3741;
                                _3755 = _3742;
                                _3756 = _3743;
                                _3757 = _3744;
                                _3758 = _3759;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3744;
                        frontier_phi_82_pred_1 = _3743;
                        frontier_phi_82_pred_2 = _3742;
                        frontier_phi_82_pred_3 = _3741;
                        frontier_phi_82_pred_4 = _3740;
                        frontier_phi_82_pred_5 = _3739;
                    }
                    _3382 = frontier_phi_82_pred;
                    _3380 = frontier_phi_82_pred_1;
                    _3378 = frontier_phi_82_pred_2;
                    _3376 = frontier_phi_82_pred_3;
                    _3374 = frontier_phi_82_pred_4;
                    _3372 = frontier_phi_82_pred_5;
                    uint _3538 = _3537 + 1u;
                    if (_3538 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3531 = _3372;
                        _3532 = _3374;
                        _3533 = _3376;
                        _3534 = _3378;
                        _3535 = _3380;
                        _3536 = _3382;
                        _3537 = _3538;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3378;
                frontier_phi_63_64_ladder_1 = _3382;
                frontier_phi_63_64_ladder_2 = _3380;
                frontier_phi_63_64_ladder_3 = _3376;
                frontier_phi_63_64_ladder_4 = _3374;
                frontier_phi_63_64_ladder_5 = _3372;
            }
            else
            {
                frontier_phi_63_64_ladder = _3257;
                frontier_phi_63_64_ladder_1 = _3261;
                frontier_phi_63_64_ladder_2 = _3259;
                frontier_phi_63_64_ladder_3 = _3255;
                frontier_phi_63_64_ladder_4 = _3253;
                frontier_phi_63_64_ladder_5 = _3251;
            }
            _3371 = frontier_phi_63_64_ladder_5;
            _3373 = frontier_phi_63_64_ladder_4;
            _3375 = frontier_phi_63_64_ladder_3;
            _3377 = frontier_phi_63_64_ladder;
            _3379 = frontier_phi_63_64_ladder_2;
            _3381 = frontier_phi_63_64_ladder_1;
        }
        float _3386 = isnan(1.0) ? _1126 : (isnan(_1126) ? 1.0 : min(_1126, 1.0));
        _3184 = (_3386 * _3377) + _2696;
        _3186 = (_3386 * _3379) + _2698;
        _3188 = (_3386 * _3381) + _2700;
        _3190 = ((_3371 * _1110) * _3386) + _3034;
        _3192 = ((_3373 * _1112) * _3386) + _3036;
        _3194 = ((_3375 * _1113) * _3386) + _3038;
    }
    else
    {
        _3184 = _2696;
        _3186 = _2698;
        _3188 = _2700;
        _3190 = _3034;
        _3192 = _3036;
        _3194 = _3038;
    }
    float _5226 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _5237 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _5248 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _3211 = ((isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0))) * (_3184 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1126))) + ((_3190 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _3212 = ((isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0))) * (_3186 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1126))) + ((_3192 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _3213 = ((isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0))) * (_3188 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1126))) + ((_3194 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    uint _3214 = _267 + 6u;
    float _3222 = _1048 / cbSceneParam._m0[86u].x;
    float _3223 = _1049 / cbSceneParam._m0[86u].y;
    vec4 _3237 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3222, _3223, (log2((isnan(cbSceneParam._m0[77u].w) ? _971 : (isnan(_971) ? cbSceneParam._m0[77u].w : min(_971, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3239 = _3237.x;
    float _3240 = _3237.y;
    float _3241 = _3237.z;
    float _3242 = _3237.w;
    float _3313;
    float _3315;
    float _3317;
    float _3319;
    if (_971 > cbSceneParam._m0[78u].w)
    {
        float _3276 = isnan(_971) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _971 : min(cbSceneParam._m0[80u].w, _971));
        float _3277 = _3276 / _971;
        float _3288 = _3277 * _1021;
        float _3289 = _1022 * _3277;
        float _3290 = (-0.0) - _3289;
        float _3291 = _3277 * _1023;
        float _3293 = (cbSceneParam._m0[77u].w * _3290) / _3276;
        float _3294 = _3293 + cbSceneParam._m0[79u].w;
        float _3295 = cbSceneParam._m0[79u].w - _3289;
        float _3301 = sqrt(((_3288 * _3288) + (_3289 * _3289)) + (_3291 * _3291));
        float _3304 = (1.0 - (cbSceneParam._m0[77u].w / _3276)) * _3301;
        float _3309 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3311 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3488;
        if (abs((_3290 - _3293) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3488 = ((((_3294 > 0.0) ? exp2(_3309 * _3294) : (2.0 - exp2(_3311 * _3294))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3304;
        }
        else
        {
            float _3432 = 1.0 / cbSceneParam._m0[80u].x;
            float _3433 = isnan(_3295) ? _3294 : (isnan(_3294) ? _3295 : max(_3294, _3295));
            float _3434 = isnan(_3295) ? _3294 : (isnan(_3294) ? _3295 : min(_3294, _3295));
            float _3443 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : min(_3433, 0.0));
            float _3444 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : min(_3434, 0.0));
            _3488 = ((abs(_3301 / _3290) * cbSceneParam._m0[80u].y) * ((((_3443 - _3444) * 2.0) - ((exp2(_3309 * (isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0)))) - exp2(_3309 * (isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))))) * _3432)) - ((exp2(_3311 * _3443) - exp2(_3311 * _3444)) * _3432))) + (_3304 * cbSceneParam._m0[80u].z);
        }
        vec4 _3490 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3222, _3223, 1.0), 0.0);
        float _3499 = exp2((_3488 * (-1.44269502162933349609375)) * (1.0 - _3490.w));
        float _3500 = log2(_3499);
        float _3516 = log2(_3242);
        _3313 = (exp2(_3516 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3500 * cbSceneParam._m0[78u].x)) * _3490.x) / cbSceneParam._m0[78u].x)) + _3239;
        _3315 = (exp2(_3516 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3500 * cbSceneParam._m0[78u].y)) * _3490.y) / cbSceneParam._m0[78u].y)) + _3240;
        _3317 = (exp2(_3516 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3500 * cbSceneParam._m0[78u].z)) * _3490.z) / cbSceneParam._m0[78u].z)) + _3241;
        _3319 = _3499 * _3242;
    }
    else
    {
        _3313 = _3239;
        _3315 = _3240;
        _3317 = _3241;
        _3319 = _3242;
    }
    bool _3526;
    vec4 _3329;
    vec4 _3351;
    float _3353;
    float _3357;
    float _3358;
    float _3359;
    float _3360;
    bool _3370;
    for (;;)
    {
        _3329 = cbMatDynParam._m0[0u];
        float _3331 = roundEven(_3329.y);
        bool _3332 = _3331 == 3.0;
        float _3333 = log2(_3319);
        float _3340 = exp2(_3333 * cbSceneParam._m0[78u].x) * _3211;
        float _3341 = exp2(_3333 * cbSceneParam._m0[78u].y) * _3212;
        float _3342 = exp2(_3333 * cbSceneParam._m0[78u].z) * _3213;
        float _3349 = _1037 + (-0.5);
        _3351 = cbMtdParam._m0[1u];
        _3353 = _3351.y * _3349;
        float _3356 = (_3331 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3357 = _3356 * (_3332 ? _3340 : (_3340 + (cbSceneParam._m0[72u].w * _3313)));
        _3358 = _3356 * (_3332 ? _3341 : (_3341 + (cbSceneParam._m0[72u].w * _3315)));
        _3359 = _3356 * (_3332 ? _3342 : (_3342 + (cbSceneParam._m0[72u].w * _3317)));
        _3360 = _3349 * 0.999000012874603271484375;
        _3370 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3370)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3360) < 0.5)
            {
                _3526 = true;
                break;
            }
        }
        uint _3467 = _1086 + uint(_3329.w);
        if ((cbInstanceData._m0[_3467].w < 1.0) && ((cbInstanceData._m0[_3467].w + _3360) < 0.5))
        {
            _3526 = true;
            break;
        }
        if ((_3353 + 1.0) < _3351.x)
        {
            _3526 = true;
            break;
        }
        _3526 = false;
        break;
    }
    float _3730;
    if (_3526)
    {
        discard_state = true;
        _3730 = 0.0;
    }
    else
    {
        _3730 = cbInstanceData._m0[_3214].w;
    }
    SV_Target.x = _3357;
    SV_Target.y = _3358;
    SV_Target.z = _3359;
    SV_Target.w = _3730;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3214].w;
    discard_exit();
}


