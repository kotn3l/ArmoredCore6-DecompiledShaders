#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1560;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _317 = _311.x * cbMtdParam._m0[11u].x;
    float _318 = _311.y * cbMtdParam._m0[11u].y;
    float _319 = _311.z * cbMtdParam._m0[11u].z;
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _357 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _357.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4167 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _435 = (_428 * ((_338.x * cbMtdParam._m0[12u].x) - _317)) + _317;
    float _436 = (_428 * ((_338.y * cbMtdParam._m0[12u].y) - _318)) + _318;
    float _437 = (_428 * ((_338.z * cbMtdParam._m0[12u].z) - _319)) + _319;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _357.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4178 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _508 = (_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435;
    float _509 = (_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436;
    float _510 = (_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437;
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _548 = _546.x;
    float _558 = dot(vec4(_548, _546.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _570 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _357.z) * 2.0) - ((((_548 - _558) * cbMtdParam._m0[23u].w) + _558) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4189 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _571 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _578 = (_571 * ((_529.x * cbMtdParam._m0[14u].x) - _508)) + _508;
    float _579 = (_571 * ((_529.y * cbMtdParam._m0[14u].y) - _509)) + _509;
    float _580 = (_571 * ((_529.z * cbMtdParam._m0[14u].z) - _510)) + _510;
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _615 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = _615.x;
    float _618 = _615.y;
    float _619 = _615.z;
    float _626 = ((_598.x - _617) * _428) + _617;
    float _627 = ((_598.y - _618) * _428) + _618;
    float _628 = ((_598.z - _619) * _428) + _619;
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _651 = ((_640.x - _626) * _501) + _626;
    float _652 = ((_640.y - _627) * _501) + _627;
    float _653 = ((_640.z - _628) * _501) + _628;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _678 = ((_665.z - _653) * _571) + _653;
    float _681 = ((((_665.x - _651) * _571) + _651) * 2.0) + (-1.0);
    float _683 = ((((_665.y - _652) * _571) + _652) * 2.0) + (-1.0);
    float _684 = dot(vec2(_681, _683), vec2(_681, _683));
    float _4200 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))));
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _730 = _728.x;
    float _731 = 1.0 - _730;
    float _739 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _742 = ((isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : min(_739, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _751 = (_742 - ((((((_730 - _731) * cbMtdParam._m0[24u].z) + _731) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _742))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4221 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _752 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _759 = (_752 * (cbMtdParam._m0[17u].x - _578)) + _578;
    float _760 = (_752 * (cbMtdParam._m0[17u].y - _579)) + _579;
    float _761 = (_752 * (cbMtdParam._m0[17u].z - _580)) + _580;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _775 = _773.x;
    float _776 = 1.0 - _775;
    float _801 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_775 - _776) * cbMtdParam._m0[24u].w) + _776) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4232 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    float _810 = ((((cbMtdParam._m0[10u].x - _759) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _802) + _759;
    float _811 = ((((cbMtdParam._m0[10u].y - _760) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _802) + _760;
    float _812 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _761)) * _802) + _761;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _840 = _838.x;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _840) * _428) + _840;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _858) * _501) + _858;
    float _892 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _875) * _571) + _875;
    float _896 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _892) * cbMtdParam._m0[19u].z) + _892;
    float _898 = _896 - (_896 * _752);
    float _900 = _898 - (_898 * _802);
    float _904 = (cbMtdParam._m0[19u].w * (_703.z - _678)) + _678;
    vec4 _918 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _925 = (_918.x * 2.0) + (-1.0);
    float _926 = (_918.y * 2.0) + (-1.0);
    float _927 = dot(vec2(_925, _926), vec2(_925, _926));
    float _4243 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _935 = (_752 * (_918.z - _904)) + _904;
    float _938 = ((cbMtdParam._m0[23u].x - _935) * _802) + _935;
    vec4 _961 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _967 = (_961.x * 2.0) + (-1.0);
    float _968 = (_961.y * 2.0) + (-1.0);
    float _969 = dot(vec2(_967, _968), vec2(_967, _968));
    float _4254 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _977 = (((_703.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _681;
    float _978 = (((_703.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _683;
    float _990 = (((_925 - _977) + (cbMtdParam._m0[21u].x * _977)) * _752) + _977;
    float _991 = (((_926 - _978) + (cbMtdParam._m0[21u].x * _978)) * _752) + _978;
    float _992 = (_752 * (sqrt(1.0 - (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0)))) - _689)) + _689;
    float _1003 = (((_967 - _990) + (_990 * cbMtdParam._m0[22u].z)) * _802) + _990;
    float _1004 = (((_968 - _991) + (_991 * cbMtdParam._m0[22u].z)) * _802) + _991;
    float _1005 = ((sqrt(1.0 - (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0)))) - _992) * _802) + _992;
    float _1007 = cbMtdParam._m0[22u].x + _703.w;
    float _1010 = fma(_1005, _258 * NORMAL.x, fma(_1004, _265 * TANGENT.x, (_251 * _243) * _1003));
    float _1013 = fma(_1005, _258 * NORMAL.y, fma(_1004, _265 * TANGENT.y, (_251 * _244) * _1003));
    float _1016 = fma(_1005, _258 * NORMAL.z, fma(_1004, _265 * TANGENT.z, (_251 * _245) * _1003));
    float _1020 = inversesqrt(dot(vec3(_1010, _1013, _1016), vec3(_1010, _1013, _1016)));
    float _1021 = _1020 * _1010;
    float _1022 = _1020 * _1013;
    float _1023 = _1020 * _1016;
    float _4265 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1024 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _4287 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _4298 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4309 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4320 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _1029 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _1043 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1083 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1093 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1083);
    float _1094 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1083);
    float _1095 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1083);
    float _1099 = inversesqrt(dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095)));
    float _1100 = _1093 * _1099;
    float _1101 = _1094 * _1099;
    float _1102 = _1095 * _1099;
    float _1108 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1109 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1127 = fma(_1023, cbSceneParam._m0[5u].z, fma(_1022, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1021));
    float _1130 = fma(_1023, cbSceneParam._m0[6u].z, fma(_1022, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1021));
    float _1133 = fma(_1023, cbSceneParam._m0[7u].z, fma(_1022, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1021));
    uint _1147 = (_271 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1153 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0)))) * cbInstanceData._m0[_1147].x;
    float _1154 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * cbInstanceData._m0[_1147].y;
    float _1155 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0)))) * cbInstanceData._m0[_1147].z;
    float _4331 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _1156 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _4342 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _1157 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
    float _4353 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
    float _1158 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _1159 = 1.0 - _1029;
    float _1160 = _1156 * _1159;
    float _1161 = _1157 * _1159;
    float _1162 = _1158 * _1159;
    float _1167 = (_1156 + (-0.039999999105930328369140625)) * _1029;
    float _1168 = (_1157 + (-0.039999999105930328369140625)) * _1029;
    float _1169 = (_1158 + (-0.039999999105930328369140625)) * _1029;
    float _1170 = _1167 + 0.039999999105930328369140625;
    float _1172 = _1168 + 0.039999999105930328369140625;
    float _1173 = _1169 + 0.039999999105930328369140625;
    vec4 _1182 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1108, cbSceneParam._m0[86u].y * _1109));
    float _1186 = ((isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * TEXCOORD_5.w) * _1182.x;
    float _1187 = dot(vec3(_1021, _1022, _1023), vec3(_1100, _1101, _1102));
    float _1190 = _1187 * 2.0;
    float _1194 = (_1190 * _1021) - _1100;
    float _1195 = (_1190 * _1022) - _1101;
    float _1196 = (_1190 * _1023) - _1102;
    float _1200 = abs(dot(vec3(_1100, _1101, _1102), vec3(_1021, _1022, _1023)));
    float _4364 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1202 = sqrt(_1024);
    float _1215 = exp2((_1202 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1202 * 3.0));
    float _1221 = (1.0 - _1215) * ((_1202 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1222 = _1215 * _1202;
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1559;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1284 = fma(_1258, cbModelParam._m0[26u].z, fma(_1254, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1250));
        float _1288 = fma(_1258, cbModelParam._m0[27u].z, fma(_1254, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1250));
        float _1292 = fma(_1258, cbModelParam._m0[28u].z, fma(_1254, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1250));
        float _1317 = _1250 + _1021;
        float _1318 = _1254 + _1022;
        float _1319 = _1258 + _1023;
        float _1329 = fma(_1319, cbModelParam._m0[26u].z, fma(_1318, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1317)) - _1284;
        float _1330 = fma(_1319, cbModelParam._m0[27u].z, fma(_1318, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1317)) - _1288;
        float _1331 = fma(_1319, cbModelParam._m0[28u].z, fma(_1318, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1317)) - _1292;
        float _1335 = inversesqrt(dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331)));
        float _1348 = ((_1335 * _1329) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1284 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1349 = ((_1335 * _1330) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1288 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1335 * _1331) / cbModelParam._m0[34u].z) + ((((((_1292 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1348, _1349, _1350), 0.0);
        float _1387 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1353.x + (-0.5));
        float _1389 = _1387 * (_1353.y + (-0.5));
        float _1390 = _1387 * (_1353.z + (-0.5));
        float _1397 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1360.x + (-0.5));
        float _1399 = _1397 * (_1360.y + (-0.5));
        float _1400 = _1397 * (_1360.z + (-0.5));
        float _1407 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1367.x + (-0.5));
        float _1409 = _1407 * (_1367.y + (-0.5));
        float _1410 = _1407 * (_1367.z + (-0.5));
        float _1417 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1374.x + (-0.5));
        float _1419 = _1417 * (_1374.y + (-0.5));
        float _1420 = _1417 * (_1374.z + (-0.5));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = _1388 * 0.5;
        float _1425 = _1398 * 0.5;
        float _1426 = _1408 * 0.5;
        float _1427 = dot(vec3(_1424, _1425, _1426), vec3(_1424, _1425, _1426));
        float _1432 = (_1427 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1427);
        float _1441 = (dot(vec3(_1021, _1022, _1023), vec3(_1432 * _1424, _1432 * _1425, _1432 * _1426)) + 1.0) * 0.5;
        float _4390 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1451 = sqrt(((_1425 * _1425) + (_1424 * _1424)) + (_1426 * _1426)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _4401 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4412 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_1453 + 1.0))) + _1458) * _1421;
        float _1468 = _1389 * 0.5;
        float _1469 = _1399 * 0.5;
        float _1470 = _1409 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_1021, _1022, _1023), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4445 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1495 + 1.0))) + _1500) * _1422;
        float _1510 = _1390 * 0.5;
        float _1511 = _1400 * 0.5;
        float _1512 = _1410 * 0.5;
        float _1513 = dot(vec3(_1510, _1511, _1512), vec3(_1510, _1511, _1512));
        float _1518 = (_1513 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1513);
        float _1526 = (dot(vec3(_1021, _1022, _1023), vec3(_1518 * _1510, _1518 * _1511, _1518 * _1512)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1535 = sqrt(((_1511 * _1511) + (_1510 * _1510)) + (_1512 * _1512)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1537 = _1536 * 2.0;
        float _1541 = (1.0 - _1536) / (_1536 + 1.0);
        float _4478 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1551 = ((((1.0 - _1542) * (_1537 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1537 + 1.0))) + _1542) * _1423;
        _1559 = _1390;
        _1561 = _1389;
        _1562 = _1388;
        _1563 = _1400;
        _1564 = _1399;
        _1565 = _1398;
        _1566 = _1410;
        _1567 = _1409;
        _1568 = _1408;
        _1569 = _1423;
        _1570 = _1422;
        _1571 = _1421;
        _1572 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1573 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0)));
    }
    else
    {
        _1559 = _1560;
        _1561 = _1560;
        _1562 = _1560;
        _1563 = _1560;
        _1564 = _1560;
        _1565 = _1560;
        _1566 = _1560;
        _1567 = _1560;
        _1568 = _1560;
        _1569 = _1560;
        _1570 = _1560;
        _1571 = _1560;
        _1572 = 0.0;
        _1573 = 0.0;
        _1574 = 0.0;
    }
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1597 = fma(_1258, cbModelParam._m0[30u].z, fma(_1254, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1250));
        float _1601 = fma(_1258, cbModelParam._m0[31u].z, fma(_1254, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1250));
        float _1605 = fma(_1258, cbModelParam._m0[32u].z, fma(_1254, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1250));
        float _1628 = _1250 + _1021;
        float _1629 = _1254 + _1022;
        float _1630 = _1258 + _1023;
        float _1640 = fma(_1630, cbModelParam._m0[30u].z, fma(_1629, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1628)) - _1597;
        float _1641 = fma(_1630, cbModelParam._m0[31u].z, fma(_1629, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1628)) - _1601;
        float _1642 = fma(_1630, cbModelParam._m0[32u].z, fma(_1629, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1628)) - _1605;
        float _1646 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
        float _1659 = ((_1646 * _1640) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1597 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1660 = ((_1646 * _1641) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1601 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1661 = ((_1646 * _1642) / cbModelParam._m0[35u].z) + ((((((_1605 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1663 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1659, _1660, _1661), 0.0);
        float _1696 = exp2((_1663.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1663.x + (-0.5));
        float _1698 = _1696 * (_1663.y + (-0.5));
        float _1699 = _1696 * (_1663.z + (-0.5));
        float _1706 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1707 = _1706 * (_1670.x + (-0.5));
        float _1708 = _1706 * (_1670.y + (-0.5));
        float _1709 = _1706 * (_1670.z + (-0.5));
        float _1716 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1717 = _1716 * (_1677.x + (-0.5));
        float _1718 = _1716 * (_1677.y + (-0.5));
        float _1719 = _1716 * (_1677.z + (-0.5));
        float _1726 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1727 = _1726 * (_1684.x + (-0.5));
        float _1728 = _1726 * (_1684.y + (-0.5));
        float _1729 = _1726 * (_1684.z + (-0.5));
        float _1730 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1731 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1732 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1733 = _1697 * 0.5;
        float _1734 = _1707 * 0.5;
        float _1735 = _1717 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_1021, _1022, _1023), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4519 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1730 + 9.9999997473787516355514526367188e-06);
        float _4530 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4541 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_1760 + 1.0))) + _1765) * _1730;
        float _1775 = _1698 * 0.5;
        float _1776 = _1708 * 0.5;
        float _1777 = _1718 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_1021, _1022, _1023), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4552 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1731 + 9.9999997473787516355514526367188e-06);
        float _4563 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4574 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * (_1802 + 1.0))) + _1807) * _1731;
        float _1817 = _1699 * 0.5;
        float _1818 = _1709 * 0.5;
        float _1819 = _1719 * 0.5;
        float _1820 = dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819));
        float _1825 = (_1820 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1820);
        float _1833 = (dot(vec3(_1021, _1022, _1023), vec3(_1825 * _1817, _1825 * _1818, _1825 * _1819)) + 1.0) * 0.5;
        float _4585 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1842 = sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819)) / (_1732 + 9.9999997473787516355514526367188e-06);
        float _4596 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1843 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
        float _1844 = _1843 * 2.0;
        float _1848 = (1.0 - _1843) / (_1843 + 1.0);
        float _4607 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1849 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
        float _1858 = ((((1.0 - _1849) * (_1844 + 2.0)) * exp2(log2(isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_1844 + 1.0))) + _1849) * _1732;
        _1866 = _1699;
        _1867 = _1698;
        _1868 = _1697;
        _1869 = _1709;
        _1870 = _1708;
        _1871 = _1707;
        _1872 = _1719;
        _1873 = _1718;
        _1874 = _1717;
        _1875 = _1732;
        _1876 = _1731;
        _1877 = _1730;
        _1878 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1879 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
        _1880 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)));
    }
    else
    {
        _1866 = _1560;
        _1867 = _1560;
        _1868 = _1560;
        _1869 = _1560;
        _1870 = _1560;
        _1871 = _1560;
        _1872 = _1560;
        _1873 = _1560;
        _1874 = _1560;
        _1875 = _1560;
        _1876 = _1560;
        _1877 = _1560;
        _1878 = 0.0;
        _1879 = 0.0;
        _1880 = 0.0;
    }
    float _1890 = (cbModelParam._m0[1u].x * (_1878 - _1572)) + _1572;
    float _1891 = (cbModelParam._m0[1u].x * (_1879 - _1573)) + _1573;
    float _1892 = (cbModelParam._m0[1u].x * (_1880 - _1574)) + _1574;
    float _1913 = fma(_1892, cbSceneParam._m0[89u].z, fma(_1891, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1892, cbSceneParam._m0[90u].z, fma(_1891, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1892, cbSceneParam._m0[91u].z, fma(_1891, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1890));
    float _1934 = _1194 * 0.5;
    float _1935 = _1195 * 0.5;
    float _1936 = _1196 * 0.5;
    float _1937 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1868, _1871, _1874, _1877));
    float _1940 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1867, _1870, _1873, _1876));
    float _1943 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1866, _1869, _1872, _1875));
    float _1977;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1950 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1559, _1563, _1566, _1569));
        float _1954 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1561, _1564, _1567, _1570));
        float _1958 = dot(vec4(_1934, _1935, _1936, 1.0), vec4(_1562, _1565, _1568, _1571));
        float _1965 = dot(vec4(cbModelParam._m0[39u]), vec4(_1934, _1935, _1936, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1965) ? 0.0 : (isnan(0.0) ? _1965 : max(0.0, _1965))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1988;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1979 = dot(vec4(cbModelParam._m0[40u]), vec4(_1934, _1935, _1936, 1.0));
        _1988 = dot(vec3(isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0)), isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1979) ? 0.0 : (isnan(0.0) ? _1979 : max(0.0, _1979))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1988 = 1.0;
    }
    float _1992 = (_1988 * cbModelParam._m0[1u].x) + (_1977 * (1.0 - cbModelParam._m0[1u].x));
    float _2002 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1024);
    float _2003 = isnan(_2002) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2002 : min(cbModelParam._m0[25u].z, _2002));
    float _2083;
    float _2085;
    float _2087;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2050 = fma(_1258, cbModelParam._m0[13u].z, fma(_1254, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1250)) + cbModelParam._m0[13u].w;
        float _2054 = fma(_1258, cbModelParam._m0[14u].z, fma(_1254, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1250)) + cbModelParam._m0[14u].w;
        float _2058 = fma(_1258, cbModelParam._m0[15u].z, fma(_1254, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1250)) + cbModelParam._m0[15u].w;
        float _2061 = fma(_1196, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194));
        float _2064 = fma(_1196, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194));
        float _2067 = fma(_1196, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194));
        float _2095;
        if (_2061 > 0.0)
        {
            _2095 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2095 = frontier_phi_14_12_ladder;
        }
        float _2267;
        if (_2064 > 0.0)
        {
            _2267 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2267 = frontier_phi_23_19_ladder;
        }
        float _2562;
        if (_2067 > 0.0)
        {
            _2562 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2562 = frontier_phi_35_30_ladder;
        }
        float _2564 = isnan(_2267) ? _2095 : (isnan(_2095) ? _2267 : min(_2095, _2267));
        float _2565 = isnan(_2562) ? _2564 : (isnan(_2564) ? _2562 : min(_2564, _2562));
        float _2569 = (_2565 * _2061) + _2050;
        float _2570 = (_2565 * _2064) + _2054;
        float _2571 = (_2565 * _2067) + _2058;
        float _2572 = _2565 * 9.9999997473787516355514526367188e-05;
        float _2574 = (-1.0) - _2572;
        float _2576 = _2572 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2571 > _2576) || ((_2571 < _2574) || ((_2570 > _2576) || ((_2570 < _2574) || ((_2569 < _2574) || (_2569 > _2576))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2571, cbModelParam._m0[9u].z, fma(_2570, cbModelParam._m0[9u].y, _2569 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2571, cbModelParam._m0[10u].z, fma(_2570, cbModelParam._m0[10u].y, _2569 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2571, cbModelParam._m0[11u].z, fma(_2570, cbModelParam._m0[11u].y, _2569 * cbModelParam._m0[11u].x))), _2003);
            frontier_phi_13_35_ladder = _2716.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2716.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2716.x * cbModelParam._m0[1u].y;
        }
        _2083 = frontier_phi_13_35_ladder_2;
        _2085 = frontier_phi_13_35_ladder_1;
        _2087 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2071 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1194, _1195, _1196), _2003);
        _2083 = _2071.x * cbModelParam._m0[1u].y;
        _2085 = _2071.y * cbModelParam._m0[1u].y;
        _2087 = _2071.z * cbModelParam._m0[1u].y;
    }
    float _2091 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1024);
    float _2092 = isnan(_2091) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2091 : min(cbModelParam._m0[25u].w, _2091));
    float _2182;
    float _2184;
    float _2186;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2146 = fma(_1258, cbModelParam._m0[21u].z, fma(_1254, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1250)) + cbModelParam._m0[21u].w;
        float _2150 = fma(_1258, cbModelParam._m0[22u].z, fma(_1254, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1250)) + cbModelParam._m0[22u].w;
        float _2154 = fma(_1258, cbModelParam._m0[23u].z, fma(_1254, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1250)) + cbModelParam._m0[23u].w;
        float _2157 = fma(_1196, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194));
        float _2160 = fma(_1196, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194));
        float _2163 = fma(_1196, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194));
        float _2272;
        if (_2157 > 0.0)
        {
            _2272 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2272 = frontier_phi_25_21_ladder;
        }
        float _2589;
        if (_2160 > 0.0)
        {
            _2589 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2589 = frontier_phi_37_32_ladder;
        }
        float _2927;
        if (_2163 > 0.0)
        {
            _2927 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2927 = frontier_phi_47_44_ladder;
        }
        float _2929 = isnan(_2589) ? _2272 : (isnan(_2272) ? _2589 : min(_2272, _2589));
        float _2930 = isnan(_2927) ? _2929 : (isnan(_2929) ? _2927 : min(_2929, _2927));
        float _2934 = (_2930 * _2157) + _2146;
        float _2935 = (_2930 * _2160) + _2150;
        float _2936 = (_2930 * _2163) + _2154;
        float _2937 = _2930 * 9.9999997473787516355514526367188e-05;
        float _2938 = (-1.0) - _2937;
        float _2940 = _2937 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2936 > _2940) || ((_2936 < _2938) || ((_2935 > _2940) || ((_2935 < _2938) || ((_2934 < _2938) || (_2934 > _2940))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3058 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2936, cbModelParam._m0[17u].z, fma(_2935, cbModelParam._m0[17u].y, _2934 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2936, cbModelParam._m0[18u].z, fma(_2935, cbModelParam._m0[18u].y, _2934 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2936, cbModelParam._m0[19u].z, fma(_2935, cbModelParam._m0[19u].y, _2934 * cbModelParam._m0[19u].x))), _2092);
            frontier_phi_22_47_ladder = _3058.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3058.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3058.x * cbModelParam._m0[1u].z;
        }
        _2182 = frontier_phi_22_47_ladder_2;
        _2184 = frontier_phi_22_47_ladder_1;
        _2186 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2166 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1194, _1195, _1196), _2092);
        _2182 = _2166.x * cbModelParam._m0[1u].z;
        _2184 = _2166.y * cbModelParam._m0[1u].z;
        _2186 = _2166.z * cbModelParam._m0[1u].z;
    }
    float _2199 = (((_1221 * _1170) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2182 - _2083)) + _2083);
    float _2201 = (((_1221 * _1172) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2184 - _2085)) + _2085);
    float _2203 = (((_1221 * _1173) + _1222) * _1186) * ((cbModelParam._m0[1u].w * (_2186 - _2087)) + _2087);
    float _2206 = fma(_2203, cbSceneParam._m0[89u].z, fma(_2201, cbSceneParam._m0[89u].y, _2199 * cbSceneParam._m0[89u].x));
    float _2209 = fma(_2203, cbSceneParam._m0[90u].z, fma(_2201, cbSceneParam._m0[90u].y, _2199 * cbSceneParam._m0[90u].x));
    float _2212 = fma(_2203, cbSceneParam._m0[91u].z, fma(_2201, cbSceneParam._m0[91u].y, _2199 * cbSceneParam._m0[91u].x));
    float _2246 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2259 = _2246 / _2258;
    float _2260 = _2250 / _2258;
    float _2261 = _2254 / _2258;
    float _2408;
    float _2409;
    float _2410;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2288 = ((uint(_2261 > cbSceneParam._m0[59u].y) + uint(_2261 > cbSceneParam._m0[59u].x)) + uint(_2261 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2289 = _2288 + 43u;
        uint _2297 = _2288 + 44u;
        uint _2305 = _2288 + 45u;
        uint _2313 = _2288 + 46u;
        float _2324 = fma(_2258, cbSceneParam._m0[_2289].w, fma(_2254, cbSceneParam._m0[_2289].z, fma(_2250, cbSceneParam._m0[_2289].y, _2246 * cbSceneParam._m0[_2289].x)));
        float _2328 = fma(_2258, cbSceneParam._m0[_2297].w, fma(_2254, cbSceneParam._m0[_2297].z, fma(_2250, cbSceneParam._m0[_2297].y, _2246 * cbSceneParam._m0[_2297].x)));
        float _2336 = fma(_2258, cbSceneParam._m0[_2313].w, fma(_2254, cbSceneParam._m0[_2313].z, fma(_2250, cbSceneParam._m0[_2313].y, _2246 * cbSceneParam._m0[_2313].x)));
        float _2341 = cbSceneParam._m0[33u].z * _2336;
        float _2343 = cbSceneParam._m0[33u].w * _2336;
        float _2346 = fma(_2258, cbSceneParam._m0[_2305].w, fma(_2254, cbSceneParam._m0[_2305].z, fma(_2250, cbSceneParam._m0[_2305].y, _2246 * cbSceneParam._m0[_2305].x))) / _2336;
        float _2394 = (cbSceneParam._m0[33u].x - sqrt(((_2260 * _2260) + (_2259 * _2259)) + (_2261 * _2261))) * cbSceneParam._m0[33u].y;
        float _4733 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
        float _2401 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2341 + _2324) / _2336, (_2343 + _2328) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2343 + _2324) / _2336, (_2328 - _2341) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 - _2341) / _2336, (_2328 - _2343) / _2336), _2346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2324 - _2343) / _2336, (_2341 + _2328) / _2336), _2346), 0.0)).x), vec4(0.25)));
        _2408 = 1.0 - (_2401 * cbSceneParam._m0[34u].x);
        _2409 = 1.0 - (_2401 * cbSceneParam._m0[34u].y);
        _2410 = 1.0 - (_2401 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2408 = 1.0;
        _2409 = 1.0;
        _2410 = 1.0;
    }
    float _2474;
    float _2476;
    float _2478;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2462 = fma(_2258, cbSceneParam._m0[63u].w, fma(_2254, cbSceneParam._m0[63u].z, fma(_2250, cbSceneParam._m0[63u].y, _2246 * cbSceneParam._m0[63u].x)));
        float _2463 = fma(_2258, cbSceneParam._m0[60u].w, fma(_2254, cbSceneParam._m0[60u].z, fma(_2250, cbSceneParam._m0[60u].y, _2246 * cbSceneParam._m0[60u].x))) / _2462;
        float _2464 = fma(_2258, cbSceneParam._m0[61u].w, fma(_2254, cbSceneParam._m0[61u].z, fma(_2250, cbSceneParam._m0[61u].y, _2246 * cbSceneParam._m0[61u].x))) / _2462;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2463 >= cbSceneParam._m0[64u].x) && (_2464 >= cbSceneParam._m0[64u].y)) && (_2463 <= cbSceneParam._m0[64u].z)) && (_2464 <= cbSceneParam._m0[64u].w))
        {
            float _2602 = fma(_2258, cbSceneParam._m0[62u].w, fma(_2254, cbSceneParam._m0[62u].z, fma(_2250, cbSceneParam._m0[62u].y, _2246 * cbSceneParam._m0[62u].x))) / _2462;
            float _2606 = isnan(cbSceneParam._m0[41u].w) ? _2602 : (isnan(_2602) ? cbSceneParam._m0[41u].w : max(_2602, cbSceneParam._m0[41u].w));
            float _2649 = (cbSceneParam._m0[33u].x - sqrt(((_2260 * _2260) + (_2259 * _2259)) + (_2261 * _2261))) * cbSceneParam._m0[33u].y;
            float _4749 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
            float _2656 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2463, cbSceneParam._m0[33u].w + _2464), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2463, _2464 - cbSceneParam._m0[33u].z), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2463 - cbSceneParam._m0[33u].z, _2464 - cbSceneParam._m0[33u].w), _2606), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2463 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2464), _2606), 0.0)).x), vec4(0.25)));
            float _2660 = 1.0 - (_2656 * cbSceneParam._m0[34u].x);
            float _2661 = 1.0 - (_2656 * cbSceneParam._m0[34u].y);
            float _2662 = 1.0 - (_2656 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2662) ? _2410 : (isnan(_2410) ? _2662 : min(_2410, _2662));
            frontier_phi_34_33_ladder_1 = isnan(_2661) ? _2409 : (isnan(_2409) ? _2661 : min(_2409, _2661));
            frontier_phi_34_33_ladder_2 = isnan(_2660) ? _2408 : (isnan(_2408) ? _2660 : min(_2408, _2660));
        }
        else
        {
            frontier_phi_34_33_ladder = _2410;
            frontier_phi_34_33_ladder_1 = _2409;
            frontier_phi_34_33_ladder_2 = _2408;
        }
        _2474 = frontier_phi_34_33_ladder_2;
        _2476 = frontier_phi_34_33_ladder_1;
        _2478 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2474 = _2408;
        _2476 = _2409;
        _2478 = _2410;
    }
    uvec4 _2483 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2485 = _2483.x * 14u;
    uint _2486 = _2485 + 13u;
    float _2493 = _1186 + (-1.0);
    float _2498 = (cbLight._m0[_2486].x * _2493) + 1.0;
    float _2499 = (cbLight._m0[_2486].y * _2493) + 1.0;
    float _2500 = (cbLight._m0[_2486].z * _2493) + 1.0;
    float _2501 = (cbLight._m0[_2486].w * _2493) + 1.0;
    uint _2502 = _2485 + 5u;
    float _2508 = isnan(1.0) ? _2499 : (isnan(_2499) ? 1.0 : min(_2499, 1.0));
    uint _2512 = _2485 + 4u;
    float _2521 = isnan(1.0) ? _2498 : (isnan(_2498) ? 1.0 : min(_2498, 1.0));
    uint _2525 = _2485 | 1u;
    float _2536 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_1021, _1022, _1023));
    float _2539 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_1021, _1022, _1023));
    float _4785 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _4796 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2544 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * 0.3183098733425140380859375;
    float _2546 = (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * 0.3183098733425140380859375;
    float _2553 = ((cbLight._m0[_2502].x * _2508) * _2546) + (((cbLight._m0[_2512].x * _2474) * _2521) * _2544);
    float _2554 = ((_2508 * cbLight._m0[_2502].y) * _2546) + (((cbLight._m0[_2512].y * _2476) * _2521) * _2544);
    float _2555 = ((_2508 * cbLight._m0[_2502].z) * _2546) + (((cbLight._m0[_2512].z * _2478) * _2521) * _2544);
    uvec4 _2559 = floatBitsToUint(cbLight._m0[_2485 + 12u]);
    bool _2561 = _2559.x == 0u;
    float _2663;
    float _2665;
    float _2667;
    if (_2561)
    {
        _2663 = _2553;
        _2665 = _2554;
        _2667 = _2555;
    }
    else
    {
        uint _2671 = _2485 + 6u;
        float _2687 = (dot(vec3(cbLight._m0[_2485 + 2u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2688 = _2687 * _2687;
        float _4807 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2689 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
        float _2690 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _2663 = (((cbLight._m0[_2671].x * 0.3183098733425140380859375) * _2689) * _2690) + _2553;
        _2665 = (((cbLight._m0[_2671].y * 0.3183098733425140380859375) * _2689) * _2690) + _2554;
        _2667 = (((cbLight._m0[_2671].z * 0.3183098733425140380859375) * _2689) * _2690) + _2555;
    }
    bool _2670 = _2559.y == 0u;
    float _2725;
    float _2727;
    float _2729;
    if (_2670)
    {
        _2725 = _2663;
        _2727 = _2665;
        _2729 = _2667;
    }
    else
    {
        uint _2898 = _2485 + 7u;
        float _2914 = (dot(vec3(cbLight._m0[_2485 + 3u].xyz), vec3(_1021, _1022, _1023)) * 0.5) + 0.5;
        float _2915 = _2914 * _2914;
        float _4823 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2916 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
        float _2917 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
        _2725 = (((cbLight._m0[_2898].x * 0.3183098733425140380859375) * _2916) * _2917) + _2663;
        _2727 = (((cbLight._m0[_2898].y * 0.3183098733425140380859375) * _2916) * _2917) + _2665;
        _2729 = (((cbLight._m0[_2898].z * 0.3183098733425140380859375) * _2916) * _2917) + _2667;
    }
    uint _2732 = _2485 + 8u;
    float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2485].w)) * _1024) * 0.949999988079071044921875);
    float _2746 = _2745 * _2745;
    float _2747 = cbLight._m0[_2485].x + _1100;
    float _2748 = cbLight._m0[_2485].y + _1101;
    float _2749 = cbLight._m0[_2485].z + _1102;
    float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
    float _2754 = _2753 * _2747;
    float _2755 = _2753 * _2748;
    float _2756 = _2753 * _2749;
    float _2757 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2485].xyz));
    float _4839 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2760 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
    float _4850 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _2761 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
    float _2762 = dot(vec3(_1021, _1022, _1023), vec3(_2754, _2755, _2756));
    float _4861 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
    float _2766 = dot(vec3(cbLight._m0[_2485].xyz), vec3(_2754, _2755, _2756));
    float _4872 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2770 = _2746 * _2746;
    float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
    float _2782 = exp2(log2(1.0 - (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0)))) * 5.0);
    float _2783 = 0.959999978542327880859375 - _1167;
    float _2785 = 0.959999978542327880859375 - _1168;
    float _2786 = 0.959999978542327880859375 - _1169;
    float _2793 = 1.0 - _2746;
    float _2804 = (0.5 / (((_2761 * ((_2760 * _2793) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2793) + _2746) * _2760))) * _2760;
    float _4883 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2806 = (isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
    uint _2820 = _2485 + 9u;
    float _2831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _1024) * 0.949999988079071044921875);
    float _2832 = _2831 * _2831;
    float _2833 = cbLight._m0[_2525].x + _1100;
    float _2834 = cbLight._m0[_2525].y + _1101;
    float _2835 = cbLight._m0[_2525].z + _1102;
    float _2839 = inversesqrt(dot(vec3(_2833, _2834, _2835), vec3(_2833, _2834, _2835)));
    float _2840 = _2839 * _2833;
    float _2841 = _2839 * _2834;
    float _2842 = _2839 * _2835;
    float _2843 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2525].xyz));
    float _4894 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
    float _2846 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
    float _2847 = dot(vec3(_1021, _1022, _1023), vec3(_2840, _2841, _2842));
    float _4905 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
    float _2850 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
    float _2851 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2840, _2841, _2842));
    float _4916 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
    float _2855 = _2832 * _2832;
    float _2859 = ((_2850 * _2850) * (_2855 + (-1.0))) + 1.0;
    float _2866 = exp2(log2(1.0 - (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) * 5.0);
    float _2873 = 1.0 - _2832;
    float _2883 = (0.5 / (((_2761 * ((_2846 * _2873) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _2873) + _2832) * _2846))) * _2846;
    float _4927 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2885 = (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2855 / ((_2859 * _2859) * 3.141590118408203125));
    float _2895 = (((((_2866 * _2783) + _1170) * cbLight._m0[_2820].x) * _2885) * _2508) + ((((cbLight._m0[_2732].x * _2474) * ((_2782 * _2783) + _1170)) * _2806) * _2521);
    float _2896 = (((((_2866 * _2785) + _1172) * cbLight._m0[_2820].y) * _2885) * _2508) + ((((cbLight._m0[_2732].y * _2476) * ((_2782 * _2785) + _1172)) * _2806) * _2521);
    float _2897 = (((((_2866 * _2786) + _1173) * cbLight._m0[_2820].z) * _2885) * _2508) + ((((cbLight._m0[_2732].z * _2478) * ((_2782 * _2786) + _1173)) * _2806) * _2521);
    float _2953;
    float _2955;
    float _2957;
    if (_2561)
    {
        _2953 = _2895;
        _2955 = _2896;
        _2957 = _2897;
    }
    else
    {
        uint _2959 = _2485 + 2u;
        uint _2963 = _2485 + 10u;
        float _2977 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2959].w)) * _1024) * 0.949999988079071044921875);
        float _2978 = _2977 * _2977;
        float _2979 = cbLight._m0[_2959].x + _1100;
        float _2980 = cbLight._m0[_2959].y + _1101;
        float _2981 = cbLight._m0[_2959].z + _1102;
        float _2985 = inversesqrt(dot(vec3(_2979, _2980, _2981), vec3(_2979, _2980, _2981)));
        float _2986 = _2985 * _2979;
        float _2987 = _2985 * _2980;
        float _2988 = _2985 * _2981;
        float _2989 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_2959].xyz));
        float _4938 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
        float _2992 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2993 = dot(vec3(_1021, _1022, _1023), vec3(_2986, _2987, _2988));
        float _4949 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
        float _2996 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2997 = dot(vec3(cbLight._m0[_2959].xyz), vec3(_2986, _2987, _2988));
        float _4960 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        float _3001 = _2978 * _2978;
        float _3005 = ((_2996 * _2996) * (_3001 + (-1.0))) + 1.0;
        float _3012 = exp2(log2(1.0 - (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) * 5.0);
        float _3019 = 1.0 - _2978;
        float _3029 = (0.5 / (((_2761 * ((_2992 * _3019) + _2978)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _3019) + _2978) * _2992))) * _2992;
        float _4971 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3031 = (isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_3001 / ((_3005 * _3005) * 3.141590118408203125));
        float _3032 = isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0));
        _2953 = (((((_3012 * _2783) + _1170) * cbLight._m0[_2963].x) * _3031) * _3032) + _2895;
        _2955 = (((((_3012 * _2785) + _1172) * cbLight._m0[_2963].y) * _3031) * _3032) + _2896;
        _2957 = (((((_3012 * _2786) + _1173) * cbLight._m0[_2963].z) * _3031) * _3032) + _2897;
    }
    float _3063;
    float _3065;
    float _3067;
    if (_2670)
    {
        _3063 = _2953;
        _3065 = _2955;
        _3067 = _2957;
    }
    else
    {
        uint _3074 = _2485 + 3u;
        uint _3078 = _2485 + 11u;
        float _3092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3074].w)) * _1024) * 0.949999988079071044921875);
        float _3093 = _3092 * _3092;
        float _3094 = cbLight._m0[_3074].x + _1100;
        float _3095 = cbLight._m0[_3074].y + _1101;
        float _3096 = cbLight._m0[_3074].z + _1102;
        float _3100 = inversesqrt(dot(vec3(_3094, _3095, _3096), vec3(_3094, _3095, _3096)));
        float _3101 = _3100 * _3094;
        float _3102 = _3100 * _3095;
        float _3103 = _3100 * _3096;
        float _3104 = dot(vec3(_1021, _1022, _1023), vec3(cbLight._m0[_3074].xyz));
        float _4987 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
        float _3107 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _3108 = dot(vec3(_1021, _1022, _1023), vec3(_3101, _3102, _3103));
        float _4998 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
        float _3111 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
        float _3112 = dot(vec3(cbLight._m0[_3074].xyz), vec3(_3101, _3102, _3103));
        float _5009 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
        float _3116 = _3093 * _3093;
        float _3120 = ((_3111 * _3111) * (_3116 + (-1.0))) + 1.0;
        float _3127 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
        float _3134 = 1.0 - _3093;
        float _3144 = (0.5 / (((_2761 * ((_3107 * _3134) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_2761 * _3134) + _3093) * _3107))) * _3107;
        float _5020 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        float _3146 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_3116 / ((_3120 * _3120) * 3.141590118408203125));
        float _3147 = isnan(1.0) ? _2501 : (isnan(_2501) ? 1.0 : min(_2501, 1.0));
        _3063 = (((((_3127 * _2783) + _1170) * cbLight._m0[_3078].x) * _3146) * _3147) + _2953;
        _3065 = (((((_3127 * _2785) + _1172) * cbLight._m0[_3078].y) * _3146) * _3147) + _2955;
        _3067 = (((((_3127 * _2786) + _1173) * cbLight._m0[_3078].z) * _3146) * _3147) + _2957;
    }
    float _3213;
    float _3215;
    float _3217;
    float _3219;
    float _3221;
    float _3223;
    if (_2483.y == 0u)
    {
        uvec4 _3168 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3169 = _3168.x;
        uint _3180 = uint((float(_3168.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1109) / _3169))) + floor(float(uint(cbSceneParam._m0[85u].x * _1108) / _3169)));
        float _3190 = (log2(_2261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3191 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
        uint _3194 = uint(isnan(14.0) ? _3191 : (isnan(_3191) ? 14.0 : min(_3191, 14.0)));
        uvec4 _3199 = texelFetch(g_lightClusterGridBuffer, int(((_3194 << 2u) + (_3180 << 6u)) >> 2u));
        uint _3200 = _3199.x;
        uint _3201 = _3168.z;
        float _3280;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        if (((((1u << ((_3201 >> 4u) & 15u)) + 4294967295u) & _3200) == 0u) || ((_3201 & 240u) == 0u))
        {
            _3280 = 0.0;
            _3282 = 0.0;
            _3284 = 0.0;
            _3286 = 0.0;
            _3288 = 0.0;
            _3290 = 0.0;
        }
        else
        {
            float _3281;
            float _3283;
            float _3285;
            float _3287;
            float _3289;
            float _3291;
            float _3425 = 0.0;
            float _3426 = 0.0;
            float _3427 = 0.0;
            float _3428 = 0.0;
            float _3429 = 0.0;
            float _3430 = 0.0;
            uint _3431 = 0u;
            uint _3440;
            bool _3441;
            for (;;)
            {
                _3440 = texelFetch(g_lightClassification, int((((_3194 << 5u) + (_3180 << 9u)) + (_3431 << 2u)) >> 2u)).x;
                _3441 = _3440 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3441)
                {
                    frontier_phi_66_pred = _3430;
                    frontier_phi_66_pred_1 = _3429;
                    frontier_phi_66_pred_2 = _3428;
                    frontier_phi_66_pred_3 = _3427;
                    frontier_phi_66_pred_4 = _3426;
                    frontier_phi_66_pred_5 = _3425;
                }
                else
                {
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    float _3553;
                    float _3554;
                    uint _3555;
                    _3549 = _3425;
                    _3550 = _3426;
                    _3551 = _3427;
                    _3552 = _3428;
                    _3553 = _3429;
                    _3554 = _3430;
                    _3555 = _3440;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    for (;;)
                    {
                        uint _3559 = uint(findLSB(_3555)) + (_3431 << 5u);
                        uint _3556 = (_3555 + 4294967295u) & _3555;
                        uint _3561 = _3559 * 48u;
                        vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 3u)).x));
                        uint _3581 = (_3559 * 48u) + 4u;
                        vec4 _3594 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3581)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 3u)).x));
                        uint _3600 = (_3559 * 48u) + 8u;
                        vec3 _3611 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3600)).x, texelFetch(g_PointLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3600 + 2u)).x));
                        float _3615 = _3575.x - _2259;
                        float _3616 = _3575.y - _2260;
                        float _3617 = _3575.z - _2261;
                        float _3618 = dot(vec3(_3615, _3616, _3617), vec3(_3615, _3616, _3617));
                        float _3621 = inversesqrt(_3618);
                        float _3622 = _3621 * _3615;
                        float _3623 = _3621 * _3616;
                        float _3624 = _3621 * _3617;
                        float _3625 = dot(vec3(_1127, _1130, _1133), vec3(_3622, _3623, _3624));
                        float _3630 = 1.0 - (_3618 * _3575.w);
                        float _5046 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                        float _3631 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                        float _3632 = sqrt(_3618) * _3594.w;
                        float _3635 = 1.39999997615814208984375 / (_3632 + 1.39999997615814208984375);
                        float _3636 = _3635 * _3635;
                        float _3639 = ((1.0 - _3636) * _3625) + _3636;
                        float _3642 = _3632 * _3632;
                        float _3646 = ((isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0))) * _3631) / ((_3642 * 0.699999988079071044921875) + 1.0);
                        float _3650 = (-0.0) - _2259;
                        float _3651 = (-0.0) - _2260;
                        float _3652 = (-0.0) - _2261;
                        float _3656 = inversesqrt(dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652)));
                        float _3657 = _3656 * _3650;
                        float _3658 = _3656 * _3651;
                        float _3659 = _3656 * _3652;
                        float _3666 = exp2(log2(1.0 / ((_3642 * 3.5) + 5.0)) * 0.25);
                        float _3667 = 1.0 - _1202;
                        float _3674 = sqrt(1.0 - ((1.0 - (_3667 * _3667)) * (1.0 - (_3666 * _3666))));
                        float _3675 = _3674 * _3674;
                        float _3676 = _3675 * _3675;
                        float _3677 = _3657 + _3622;
                        float _3678 = _3658 + _3623;
                        float _3679 = _3659 + _3624;
                        float _3683 = inversesqrt(dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679)));
                        float _3687 = dot(vec3(_1127, _1130, _1133), vec3(_3657, _3658, _3659));
                        float _5062 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                        float _3690 = isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0));
                        float _3691 = dot(vec3(_1127, _1130, _1133), vec3(_3683 * _3677, _3683 * _3678, _3683 * _3679));
                        float _5073 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3698 = ((_3694 * _3694) * (_3676 + (-1.0))) + 1.0;
                        float _3699 = _3635 * _3675;
                        float _3700 = _3699 * _3699;
                        float _3703 = ((1.0 - _3700) * _3625) + _3700;
                        float _5084 = isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0));
                        float _3704 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3705 = 1.0 - _3675;
                        float _3715 = (0.5 / (((_3704 * ((_3690 * _3705) + _3675)) + 9.9999999392252902907785028219223e-09) + (((_3704 * _3705) + _3675) * _3690))) * _3704;
                        float _5095 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                        float _3726 = (((_3676 * 3.1415927410125732421875) * (isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0)))) / ((_3698 * _3698) * ((_3642 * 2.1991131305694580078125) + 3.141590118408203125))) * _3631;
                        _3484 = (_3646 * _3594.x) + _3552;
                        _3485 = (_3646 * _3594.y) + _3553;
                        _3486 = (_3646 * _3594.z) + _3554;
                        _3481 = (_3726 * _3611.x) + _3549;
                        _3482 = (_3726 * _3611.y) + _3550;
                        _3483 = (_3726 * _3611.z) + _3551;
                        if (_3556 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3549 = _3481;
                            _3550 = _3482;
                            _3551 = _3483;
                            _3552 = _3484;
                            _3553 = _3485;
                            _3554 = _3486;
                            _3555 = _3556;
                        }
                    }
                    frontier_phi_66_pred = _3486;
                    frontier_phi_66_pred_1 = _3485;
                    frontier_phi_66_pred_2 = _3484;
                    frontier_phi_66_pred_3 = _3483;
                    frontier_phi_66_pred_4 = _3482;
                    frontier_phi_66_pred_5 = _3481;
                }
                _3291 = frontier_phi_66_pred;
                _3289 = frontier_phi_66_pred_1;
                _3287 = frontier_phi_66_pred_2;
                _3285 = frontier_phi_66_pred_3;
                _3283 = frontier_phi_66_pred_4;
                _3281 = frontier_phi_66_pred_5;
                uint _3432 = _3431 + 1u;
                if (_3432 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3425 = _3281;
                    _3426 = _3283;
                    _3427 = _3285;
                    _3428 = _3287;
                    _3429 = _3289;
                    _3430 = _3291;
                    _3431 = _3432;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3280 = _3281;
            _3282 = _3283;
            _3284 = _3285;
            _3286 = _3287;
            _3288 = _3289;
            _3290 = _3291;
        }
        uvec4 _3294 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3295 = _3294.z;
        uint _3297 = (_3295 >> 8u) & 15u;
        float _3393;
        float _3395;
        float _3397;
        float _3399;
        float _3401;
        float _3403;
        if (((4294967295u << _3297) & _3200) == 0u)
        {
            _3393 = _3280;
            _3395 = _3282;
            _3397 = _3284;
            _3399 = _3286;
            _3401 = _3288;
            _3403 = _3290;
        }
        else
        {
            float _3418 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
            float _3419 = _3418 * _2259;
            float _3420 = _3418 * _2260;
            float _3421 = _3418 * _2261;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3297 < ((_3295 >> 12u) & 15u))
            {
                float _3394;
                float _3396;
                float _3398;
                float _3400;
                float _3402;
                float _3404;
                float _3532 = _3280;
                float _3533 = _3282;
                float _3534 = _3284;
                float _3535 = _3286;
                float _3536 = _3288;
                float _3537 = _3290;
                uint _3538 = _3297;
                uint _3547;
                bool _3548;
                for (;;)
                {
                    _3547 = texelFetch(g_lightClassification, int((((_3194 << 5u) + (_3180 << 9u)) + (_3538 << 2u)) >> 2u)).x;
                    _3548 = _3547 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3548)
                    {
                        frontier_phi_72_pred = _3537;
                        frontier_phi_72_pred_1 = _3536;
                        frontier_phi_72_pred_2 = _3535;
                        frontier_phi_72_pred_3 = _3534;
                        frontier_phi_72_pred_4 = _3533;
                        frontier_phi_72_pred_5 = _3532;
                    }
                    else
                    {
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _3736;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _3744 = _3532;
                        float _3745 = _3533;
                        float _3746 = _3534;
                        float _3747 = _3535;
                        float _3748 = _3536;
                        float _3749 = _3537;
                        uint _3750 = _3547;
                        uint _3751;
                        vec4 _3776;
                        float _3777;
                        vec4 _3792;
                        vec3 _3804;
                        vec4 _3819;
                        vec4 _3834;
                        float _3880;
                        bool _3881;
                        for (;;)
                        {
                            uint _3761 = ((_3538 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3750));
                            _3751 = (_3750 + 4294967295u) & _3750;
                            uint _3763 = _3761 * 40u;
                            _3776 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3763)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3763 + 3u)).x));
                            _3777 = _3776.w;
                            uint _3779 = (_3761 * 40u) + 4u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3794 = (_3761 * 40u) + 8u;
                            _3804 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x));
                            uint _3806 = (_3761 * 40u) + 16u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3761 * 40u) + 20u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3761 * 40u) + 24u;
                            vec4 _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3855 = (_3761 * 40u) + 28u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            _3880 = fma(_2261, _3868.z, fma(_2260, _3868.y, _3868.x * _2259)) + _3868.w;
                            _3881 = !((fma(_2261, _3849.z, fma(_2260, _3849.y, _3849.x * _2259)) + _3849.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3881)
                            {
                                float _3908 = _3776.x - _2259;
                                float _3909 = _3776.y - _2260;
                                float _3910 = _3776.z - _2261;
                                float _3911 = dot(vec3(_3908, _3909, _3910), vec3(_3908, _3909, _3910));
                                float _3914 = inversesqrt(_3911);
                                float _3915 = _3914 * _3908;
                                float _3916 = _3914 * _3909;
                                float _3917 = _3914 * _3910;
                                float _3921 = 1.0 - (_3911 / (_3777 * _3777));
                                float _5106 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0));
                                float _3926 = sqrt(_3911) * _3792.w;
                                float _3928 = 1.39999997615814208984375 / (_3926 + 1.39999997615814208984375);
                                float _3929 = _3928 * _3928;
                                float _3932 = ((1.0 - _3929) * dot(vec3(_3915, _3916, _3917), vec3(_1127, _1130, _1133))) + _3929;
                                float _3935 = _3926 * _3926;
                                float _3939 = (fma(_2261, _3819.z, fma(_2260, _3819.y, _3819.x * _2259)) + _3819.w) / _3880;
                                float _3940 = (fma(_2261, _3834.z, fma(_2260, _3834.y, _3834.x * _2259)) + _3834.w) / _3880;
                                float _3944 = 1.0 - dot(vec2(_3939, _3940), vec2(_3939, _3940));
                                float _5122 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                                float _3946 = _3945 * (((isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0))) * _3922) / ((_3935 * 0.699999988079071044921875) + 1.0));
                                float _3958 = exp2(log2(1.0 / ((_3935 * 3.5) + 5.0)) * 0.25);
                                float _3959 = 1.0 - _1202;
                                float _3966 = sqrt(1.0 - ((1.0 - (_3959 * _3959)) * (1.0 - (_3958 * _3958))));
                                float _3967 = _3966 * _3966;
                                float _3968 = _3967 * _3967;
                                float _3969 = _3915 - _3419;
                                float _3970 = _3916 - _3420;
                                float _3971 = _3917 - _3421;
                                float _3975 = inversesqrt(dot(vec3(_3969, _3970, _3971), vec3(_3969, _3970, _3971)));
                                float _3979 = dot(vec3(_1127, _1130, _1133), vec3((-0.0) - _3419, (-0.0) - _3420, (-0.0) - _3421));
                                float _5133 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3982 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3983 = dot(vec3(_1127, _1130, _1133), vec3(_3975 * _3969, _3975 * _3970, _3975 * _3971));
                                float _5144 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3990 = ((_3986 * _3986) * (_3968 + (-1.0))) + 1.0;
                                float _3991 = _3928 * _3967;
                                float _3992 = _3991 * _3991;
                                float _3998 = ((1.0 - _3992) * dot(vec3(_1127, _1130, _1133), vec3(_3915, _3916, _3917))) + _3992;
                                float _5155 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                                float _4000 = 1.0 - _3967;
                                float _4010 = (0.5 / (((_3999 * ((_3982 * _4000) + _3967)) + 9.9999999392252902907785028219223e-09) + (((_3999 * _4000) + _3967) * _3982))) * _3999;
                                float _5166 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4020 = (_3945 * _3922) * (((_3968 * 3.1415927410125732421875) * (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) / ((_3990 * _3990) * ((_3935 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3946 * _3792.y;
                                frontier_phi_78_pred_1 = _3946 * _3792.x;
                                frontier_phi_78_pred_2 = _4020 * _3804.z;
                                frontier_phi_78_pred_3 = _4020 * _3804.y;
                                frontier_phi_78_pred_4 = _4020 * _3804.x;
                                frontier_phi_78_pred_5 = _3946 * _3792.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4028 = frontier_phi_78_pred;
                            _4027 = frontier_phi_78_pred_1;
                            _4026 = frontier_phi_78_pred_2;
                            _4025 = frontier_phi_78_pred_3;
                            _4024 = frontier_phi_78_pred_4;
                            _4029 = frontier_phi_78_pred_5;
                            _3734 = _4027 + _3747;
                            _3735 = _4028 + _3748;
                            _3736 = _4029 + _3749;
                            _3731 = _4024 + _3744;
                            _3732 = _4025 + _3745;
                            _3733 = _4026 + _3746;
                            if (_3751 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3736;
                                _3750 = _3751;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3736;
                        frontier_phi_72_pred_1 = _3735;
                        frontier_phi_72_pred_2 = _3734;
                        frontier_phi_72_pred_3 = _3733;
                        frontier_phi_72_pred_4 = _3732;
                        frontier_phi_72_pred_5 = _3731;
                    }
                    _3404 = frontier_phi_72_pred;
                    _3402 = frontier_phi_72_pred_1;
                    _3400 = frontier_phi_72_pred_2;
                    _3398 = frontier_phi_72_pred_3;
                    _3396 = frontier_phi_72_pred_4;
                    _3394 = frontier_phi_72_pred_5;
                    uint _3539 = _3538 + 1u;
                    if (_3539 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3532 = _3394;
                        _3533 = _3396;
                        _3534 = _3398;
                        _3535 = _3400;
                        _3536 = _3402;
                        _3537 = _3404;
                        _3538 = _3539;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3404;
                frontier_phi_60_61_ladder_1 = _3402;
                frontier_phi_60_61_ladder_2 = _3398;
                frontier_phi_60_61_ladder_3 = _3396;
                frontier_phi_60_61_ladder_4 = _3394;
                frontier_phi_60_61_ladder_5 = _3400;
            }
            else
            {
                frontier_phi_60_61_ladder = _3290;
                frontier_phi_60_61_ladder_1 = _3288;
                frontier_phi_60_61_ladder_2 = _3284;
                frontier_phi_60_61_ladder_3 = _3282;
                frontier_phi_60_61_ladder_4 = _3280;
                frontier_phi_60_61_ladder_5 = _3286;
            }
            _3393 = frontier_phi_60_61_ladder_4;
            _3395 = frontier_phi_60_61_ladder_3;
            _3397 = frontier_phi_60_61_ladder_2;
            _3399 = frontier_phi_60_61_ladder_5;
            _3401 = frontier_phi_60_61_ladder_1;
            _3403 = frontier_phi_60_61_ladder;
        }
        float _3408 = isnan(1.0) ? _1186 : (isnan(_1186) ? 1.0 : min(_1186, 1.0));
        _3213 = (_3408 * _3399) + _2725;
        _3215 = (_3408 * _3401) + _2727;
        _3217 = (_3408 * _3403) + _2729;
        _3219 = ((_3393 * _1170) * _3408) + _3063;
        _3221 = ((_3395 * _1172) * _3408) + _3065;
        _3223 = ((_3397 * _1173) * _3408) + _3067;
    }
    else
    {
        _3213 = _2725;
        _3215 = _2727;
        _3217 = _2729;
        _3219 = _3063;
        _3221 = _3065;
        _3223 = _3067;
    }
    float _5182 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
    float _5193 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
    float _5204 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
    uint _3243 = _271 + 6u;
    float _3251 = _1108 / cbSceneParam._m0[86u].x;
    float _3252 = _1109 / cbSceneParam._m0[86u].y;
    vec4 _3266 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3251, _3252, (log2((isnan(cbSceneParam._m0[77u].w) ? _1043 : (isnan(_1043) ? cbSceneParam._m0[77u].w : min(_1043, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3268 = _3266.x;
    float _3269 = _3266.y;
    float _3270 = _3266.z;
    float _3271 = _3266.w;
    float _3343;
    float _3345;
    float _3347;
    float _3349;
    if (_1043 > cbSceneParam._m0[78u].w)
    {
        float _3305 = isnan(_1043) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1043 : min(cbSceneParam._m0[80u].w, _1043));
        float _3306 = _3305 / _1043;
        float _3317 = _3306 * _1093;
        float _3318 = _1094 * _3306;
        float _3319 = (-0.0) - _3318;
        float _3321 = _3306 * _1095;
        float _3323 = (cbSceneParam._m0[77u].w * _3319) / _3305;
        float _3324 = _3323 + cbSceneParam._m0[79u].w;
        float _3325 = cbSceneParam._m0[79u].w - _3318;
        float _3331 = sqrt(((_3317 * _3317) + (_3318 * _3318)) + (_3321 * _3321));
        float _3334 = (1.0 - (cbSceneParam._m0[77u].w / _3305)) * _3331;
        float _3339 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3341 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3494;
        if (abs((_3319 - _3323) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3494 = ((((_3324 > 0.0) ? exp2(_3339 * _3324) : (2.0 - exp2(_3341 * _3324))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3334;
        }
        else
        {
            float _3454 = 1.0 / cbSceneParam._m0[80u].x;
            float _3455 = isnan(_3325) ? _3324 : (isnan(_3324) ? _3325 : max(_3324, _3325));
            float _3456 = isnan(_3325) ? _3324 : (isnan(_3324) ? _3325 : min(_3324, _3325));
            float _3465 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : min(_3455, 0.0));
            float _3466 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : min(_3456, 0.0));
            _3494 = ((abs(_3331 / _3319) * cbSceneParam._m0[80u].y) * ((((_3465 - _3466) * 2.0) - ((exp2(_3339 * (isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0)))) - exp2(_3339 * (isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0))))) * _3454)) - ((exp2(_3341 * _3465) - exp2(_3341 * _3466)) * _3454))) + (_3334 * cbSceneParam._m0[80u].z);
        }
        vec4 _3496 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3251, _3252, 1.0), 0.0);
        float _3505 = exp2((_3494 * (-1.44269502162933349609375)) * (1.0 - _3496.w));
        float _3506 = log2(_3505);
        float _3522 = log2(_3271);
        _3343 = (exp2(_3522 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].x)) * _3496.x) / cbSceneParam._m0[78u].x)) + _3268;
        _3345 = (exp2(_3522 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].y)) * _3496.y) / cbSceneParam._m0[78u].y)) + _3269;
        _3347 = (exp2(_3522 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3506 * cbSceneParam._m0[78u].z)) * _3496.z) / cbSceneParam._m0[78u].z)) + _3270;
        _3349 = _3505 * _3271;
    }
    else
    {
        _3343 = _3268;
        _3345 = _3269;
        _3347 = _3270;
        _3349 = _3271;
    }
    float _3361 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3362 = _3361 == 3.0;
    float _3363 = log2(_3349);
    float _3370 = exp2(_3363 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0))) * (_3213 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1186))) + ((_3219 + ((isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3371 = exp2(_3363 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0))) * (_3215 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1186))) + ((_3221 + ((isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3372 = exp2(_3363 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0))) * (_3217 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1186))) + ((_3223 + ((isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0))) * _1992)) * cbPerFrame._m0[3u].x));
    float _3381 = (_3361 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3381 * (_3362 ? _3370 : (_3370 + (cbSceneParam._m0[72u].w * _3343)));
    SV_Target.y = _3381 * (_3362 ? _3371 : (_3371 + (cbSceneParam._m0[72u].w * _3345)));
    SV_Target.z = _3381 * (_3362 ? _3372 : (_3372 + (cbSceneParam._m0[72u].w * _3347)));
    SV_Target.w = cbInstanceData._m0[_3243].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3243].w;
}


