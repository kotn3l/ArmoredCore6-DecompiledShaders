#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1266;
float _3672;
float _3673;
float _3674;
float _3675;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3684 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _432 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_419 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313);
    float _435 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_419 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314);
    float _438 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_419 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315);
    vec4 _456 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _473 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    float _486 = ((_456.z - _477) * _419) + _477;
    float _489 = ((((_456.x - _475) * _419) + _475) * 2.0) + (-1.0);
    float _491 = ((((_456.y - _476) * _419) + _476) * 2.0) + (-1.0);
    float _492 = dot(vec2(_489, _491), vec2(_489, _491));
    float _3695 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _497 = sqrt(1.0 - (isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0))));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _540 = _538.x;
    float _541 = 1.0 - _540;
    float _557 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_540 - _541) * cbMtdParam._m0[24u].z) + _541) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3706 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _558 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _565 = (_558 * (cbMtdParam._m0[17u].x - _432)) + _432;
    float _566 = (_558 * (cbMtdParam._m0[17u].y - _435)) + _435;
    float _567 = (_558 * (cbMtdParam._m0[17u].z - _438)) + _438;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _595 = _593.x;
    float _612 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _595) * _419) + _595;
    float _616 = ((_579.x - _612) * cbMtdParam._m0[19u].z) + _612;
    float _618 = _616 - (_616 * _558);
    float _622 = (cbMtdParam._m0[19u].w * (_513.z - _486)) + _486;
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _642 = (_635.x * 2.0) + (-1.0);
    float _643 = (_635.y * 2.0) + (-1.0);
    float _644 = dot(vec2(_642, _643), vec2(_642, _643));
    float _3717 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _652 = (_558 * (_635.z - _622)) + _622;
    float _655 = (((_513.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _489;
    float _656 = (((_513.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _491;
    float _668 = (((_642 - _655) + (cbMtdParam._m0[21u].x * _655)) * _558) + _655;
    float _669 = (((_643 - _656) + (cbMtdParam._m0[21u].x * _656)) * _558) + _656;
    float _670 = (_558 * (sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) - _497)) + _497;
    float _672 = cbMtdParam._m0[22u].x + _513.w;
    float _675 = fma(_670, _231 * NORMAL.x, fma(_669, _238 * TANGENT.x, (_224 * _216) * _668));
    float _678 = fma(_670, _231 * NORMAL.y, fma(_669, _238 * TANGENT.y, (_224 * _217) * _668));
    float _681 = fma(_670, _231 * NORMAL.z, fma(_669, _238 * TANGENT.z, (_224 * _218) * _668));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3728 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
    float _689 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3750 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3761 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3772 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3783 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _694 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _708 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    vec4 _773 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _775 = _773.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _947 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
        float _953 = (cbMatDynParam._m0[5u].x * _947) + cbMatDynParam._m0[5u].y;
        float _3794 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _958 = (cbMatDynParam._m0[5u].z * _947) + cbMatDynParam._m0[5u].w;
        float _3805 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) - _954)) + _954) < ((_775 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _808 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _811 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _824 = _244 + 9u;
    uint _825 = _824 + uint(cbMatDynParam._m0[0u].w);
    float _831 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_825].x;
    float _832 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_825].y;
    float _833 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_825].z;
    float _3816 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _837 = 1.0 - _694;
    float _838 = _834 * _837;
    float _839 = _835 * _837;
    float _840 = _836 * _837;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _694;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _694;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _694;
    float _848 = _845 + 0.039999999105930328369140625;
    float _850 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    vec4 _860 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _864 = ((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * TEXCOORD_5.w) * _860.x;
    float _865 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _686) - _766;
    float _873 = (_868 * _687) - _767;
    float _874 = (_868 * _688) - _768;
    float _878 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _3849 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_689);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _899 = (1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _900 = _893 * _880;
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1265;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _990 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _994 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _998 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _1023 = _928 + _686;
        float _1024 = _932 + _687;
        float _1025 = _936 + _688;
        float _1035 = fma(_1025, cbModelParam._m0[26u].z, fma(_1024, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1023)) - _990;
        float _1036 = fma(_1025, cbModelParam._m0[27u].z, fma(_1024, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1023)) - _994;
        float _1037 = fma(_1025, cbModelParam._m0[28u].z, fma(_1024, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1023)) - _998;
        float _1041 = inversesqrt(dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037)));
        float _1054 = ((_1041 * _1035) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_990 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1055 = ((_1041 * _1036) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_994 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1056 = ((_1041 * _1037) / cbModelParam._m0[34u].z) + ((((((_998 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        vec4 _1080 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1054, _1055, _1056), 0.0);
        float _1093 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1059.x + (-0.5));
        float _1095 = _1093 * (_1059.y + (-0.5));
        float _1096 = _1093 * (_1059.z + (-0.5));
        float _1103 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1104 = _1103 * (_1066.x + (-0.5));
        float _1105 = _1103 * (_1066.y + (-0.5));
        float _1106 = _1103 * (_1066.z + (-0.5));
        float _1113 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1114 = _1113 * (_1073.x + (-0.5));
        float _1115 = _1113 * (_1073.y + (-0.5));
        float _1116 = _1113 * (_1073.z + (-0.5));
        float _1123 = exp2((_1080.w + (-0.5)) * 20.0) * 2.0;
        float _1124 = _1123 * (_1080.x + (-0.5));
        float _1125 = _1123 * (_1080.y + (-0.5));
        float _1126 = _1123 * (_1080.z + (-0.5));
        float _1127 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1128 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = _1094 * 0.5;
        float _1131 = _1104 * 0.5;
        float _1132 = _1114 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1147 = (dot(vec3(_686, _687, _688), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3875 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1157 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1127 + 9.9999997473787516355514526367188e-06);
        float _3886 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3897 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * (_1159 + 1.0))) + _1164) * _1127;
        float _1174 = _1095 * 0.5;
        float _1175 = _1105 * 0.5;
        float _1176 = _1115 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1190 = (dot(vec3(_686, _687, _688), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3908 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
        float _1199 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1128 + 9.9999997473787516355514526367188e-06);
        float _3919 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3930 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * (_1201 + 1.0))) + _1206) * _1128;
        float _1216 = _1096 * 0.5;
        float _1217 = _1106 * 0.5;
        float _1218 = _1116 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_686, _687, _688), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _3963 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_1243 + 1.0))) + _1248) * _1129;
        _1265 = _1096;
        _1267 = _1095;
        _1268 = _1094;
        _1269 = _1106;
        _1270 = _1105;
        _1271 = _1104;
        _1272 = _1116;
        _1273 = _1115;
        _1274 = _1114;
        _1275 = _1129;
        _1276 = _1128;
        _1277 = _1127;
        _1278 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
        _1279 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
    }
    else
    {
        _1265 = _1266;
        _1267 = _1266;
        _1268 = _1266;
        _1269 = _1266;
        _1270 = _1266;
        _1271 = _1266;
        _1272 = _1266;
        _1273 = _1266;
        _1274 = _1266;
        _1275 = _1266;
        _1276 = _1266;
        _1277 = _1266;
        _1278 = 0.0;
        _1279 = 0.0;
        _1280 = 0.0;
    }
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1308 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1312 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1316 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1339 = _928 + _686;
        float _1340 = _932 + _687;
        float _1341 = _936 + _688;
        float _1351 = fma(_1341, cbModelParam._m0[30u].z, fma(_1340, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1339)) - _1308;
        float _1352 = fma(_1341, cbModelParam._m0[31u].z, fma(_1340, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1339)) - _1312;
        float _1353 = fma(_1341, cbModelParam._m0[32u].z, fma(_1340, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1339)) - _1316;
        float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
        float _1370 = ((_1357 * _1351) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1308 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1371 = ((_1357 * _1352) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1312 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1372 = ((_1357 * _1353) / cbModelParam._m0[35u].z) + ((((((_1316 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        vec4 _1395 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1370, _1371, _1372), 0.0);
        float _1407 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1374.x + (-0.5));
        float _1409 = _1407 * (_1374.y + (-0.5));
        float _1410 = _1407 * (_1374.z + (-0.5));
        float _1417 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1381.x + (-0.5));
        float _1419 = _1417 * (_1381.y + (-0.5));
        float _1420 = _1417 * (_1381.z + (-0.5));
        float _1427 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1388.x + (-0.5));
        float _1429 = _1427 * (_1388.y + (-0.5));
        float _1430 = _1427 * (_1388.z + (-0.5));
        float _1437 = exp2((_1395.w + (-0.5)) * 20.0) * 2.0;
        float _1438 = _1437 * (_1395.x + (-0.5));
        float _1439 = _1437 * (_1395.y + (-0.5));
        float _1440 = _1437 * (_1395.z + (-0.5));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = _1408 * 0.5;
        float _1445 = _1418 * 0.5;
        float _1446 = _1428 * 0.5;
        float _1447 = dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446));
        float _1452 = (_1447 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1447);
        float _1460 = (dot(vec3(_686, _687, _688), vec3(_1452 * _1444, _1452 * _1445, _1452 * _1446)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1469 = sqrt(((_1445 * _1445) + (_1444 * _1444)) + (_1446 * _1446)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4026 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1471 + 1.0))) + _1476) * _1441;
        float _1486 = _1409 * 0.5;
        float _1487 = _1419 * 0.5;
        float _1488 = _1429 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_686, _687, _688), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1442 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4059 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1513 + 1.0))) + _1518) * _1442;
        float _1528 = _1410 * 0.5;
        float _1529 = _1420 * 0.5;
        float _1530 = _1430 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_686, _687, _688), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4092 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1555 + 1.0))) + _1560) * _1443;
        _1577 = _1410;
        _1578 = _1409;
        _1579 = _1408;
        _1580 = _1420;
        _1581 = _1419;
        _1582 = _1418;
        _1583 = _1430;
        _1584 = _1429;
        _1585 = _1428;
        _1586 = _1443;
        _1587 = _1442;
        _1588 = _1441;
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1590 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1266;
        _1578 = _1266;
        _1579 = _1266;
        _1580 = _1266;
        _1581 = _1266;
        _1582 = _1266;
        _1583 = _1266;
        _1584 = _1266;
        _1585 = _1266;
        _1586 = _1266;
        _1587 = _1266;
        _1588 = _1266;
        _1589 = 0.0;
        _1590 = 0.0;
        _1591 = 0.0;
    }
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1278)) + _1278;
    float _1602 = (cbModelParam._m0[1u].x * (_1590 - _1279)) + _1279;
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1280)) + _1280;
    float _1624 = fma(_1603, cbSceneParam._m0[89u].z, fma(_1602, cbSceneParam._m0[89u].y, _1601 * cbSceneParam._m0[89u].x));
    float _1627 = fma(_1603, cbSceneParam._m0[90u].z, fma(_1602, cbSceneParam._m0[90u].y, _1601 * cbSceneParam._m0[90u].x));
    float _1630 = fma(_1603, cbSceneParam._m0[91u].z, fma(_1602, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1601));
    float _1645 = _872 * 0.5;
    float _1646 = _873 * 0.5;
    float _1647 = _874 * 0.5;
    float _1648 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1651 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1578, _1581, _1584, _1587));
    float _1654 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1688;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1661 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1265, _1269, _1272, _1275));
        float _1665 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1267, _1270, _1273, _1276));
        float _1669 = dot(vec4(_1645, _1646, _1647, 1.0), vec4(_1268, _1271, _1274, _1277));
        float _1676 = dot(vec4(cbModelParam._m0[39u]), vec4(_1645, _1646, _1647, 1.0));
        _1688 = dot(vec3(isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0)), isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1676) ? 0.0 : (isnan(0.0) ? _1676 : max(0.0, _1676))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1688 = 1.0;
    }
    float _1699;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1690 = dot(vec4(cbModelParam._m0[40u]), vec4(_1645, _1646, _1647, 1.0));
        _1699 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1690) ? 0.0 : (isnan(0.0) ? _1690 : max(0.0, _1690))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1699 = 1.0;
    }
    float _1703 = (_1699 * cbModelParam._m0[1u].x) + (_1688 * (1.0 - cbModelParam._m0[1u].x));
    float _1713 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1714 = isnan(_1713) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1713 : min(cbModelParam._m0[25u].z, _1713));
    float _1795;
    float _1797;
    float _1799;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1762 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1766 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1770 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1773 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1776 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1779 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1807;
        if (_1773 > 0.0)
        {
            _1807 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1807 = frontier_phi_17_15_ladder;
        }
        float _2031;
        if (_1776 > 0.0)
        {
            _2031 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2031 = frontier_phi_26_22_ladder;
        }
        float _2288;
        if (_1779 > 0.0)
        {
            _2288 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2288 = frontier_phi_38_33_ladder;
        }
        float _2290 = isnan(_2031) ? _1807 : (isnan(_1807) ? _2031 : min(_1807, _2031));
        float _2291 = isnan(_2288) ? _2290 : (isnan(_2290) ? _2288 : min(_2290, _2288));
        float _2295 = (_2291 * _1773) + _1762;
        float _2296 = (_2291 * _1776) + _1766;
        float _2297 = (_2291 * _1779) + _1770;
        float _2298 = _2291 * 9.9999997473787516355514526367188e-05;
        float _2300 = (-1.0) - _2298;
        float _2302 = _2298 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2297 > _2302) || ((_2297 < _2300) || ((_2296 > _2302) || ((_2296 < _2300) || ((_2295 < _2300) || (_2295 > _2302))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2297, cbModelParam._m0[9u].z, fma(_2296, cbModelParam._m0[9u].y, _2295 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2297, cbModelParam._m0[10u].z, fma(_2296, cbModelParam._m0[10u].y, _2295 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2297, cbModelParam._m0[11u].z, fma(_2296, cbModelParam._m0[11u].y, _2295 * cbModelParam._m0[11u].x))), _1714);
            frontier_phi_16_38_ladder = _2425.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2425.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2425.x * cbModelParam._m0[1u].y;
        }
        _1795 = frontier_phi_16_38_ladder_2;
        _1797 = frontier_phi_16_38_ladder_1;
        _1799 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1714);
        _1795 = _1783.x * cbModelParam._m0[1u].y;
        _1797 = _1783.y * cbModelParam._m0[1u].y;
        _1799 = _1783.z * cbModelParam._m0[1u].y;
    }
    float _1803 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1804 = isnan(_1803) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1803 : min(cbModelParam._m0[25u].w, _1803));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1872 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1875 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _2036;
        if (_1869 > 0.0)
        {
            _2036 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2036 = frontier_phi_28_24_ladder;
        }
        float _2315;
        if (_1872 > 0.0)
        {
            _2315 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2315 = frontier_phi_40_35_ladder;
        }
        float _2528;
        if (_1875 > 0.0)
        {
            _2528 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2528 = frontier_phi_49_46_ladder;
        }
        float _2530 = isnan(_2315) ? _2036 : (isnan(_2036) ? _2315 : min(_2036, _2315));
        float _2531 = isnan(_2528) ? _2530 : (isnan(_2530) ? _2528 : min(_2530, _2528));
        float _2535 = (_2531 * _1869) + _1858;
        float _2536 = (_2531 * _1872) + _1862;
        float _2537 = (_2531 * _1875) + _1866;
        float _2538 = _2531 * 9.9999997473787516355514526367188e-05;
        float _2539 = (-1.0) - _2538;
        float _2541 = _2538 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2537 > _2541) || ((_2537 < _2539) || ((_2536 > _2541) || ((_2536 < _2539) || ((_2535 < _2539) || (_2535 > _2541))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2537, cbModelParam._m0[17u].z, fma(_2536, cbModelParam._m0[17u].y, _2535 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2537, cbModelParam._m0[18u].z, fma(_2536, cbModelParam._m0[18u].y, _2535 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2537, cbModelParam._m0[19u].z, fma(_2536, cbModelParam._m0[19u].y, _2535 * cbModelParam._m0[19u].x))), _1804);
            frontier_phi_25_49_ladder = _2736.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2736.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2736.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_25_49_ladder_2;
        _1896 = frontier_phi_25_49_ladder_1;
        _1898 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1804);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1911 = (((_899 * _848) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1894 - _1795)) + _1795);
    float _1913 = (((_899 * _850) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1896 - _1797)) + _1797);
    float _1915 = (((_899 * _851) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1898 - _1799)) + _1799);
    float _1918 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1913, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1913, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1913, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    vec4 _1932 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_786, _787));
    float _1934 = _1932.w;
    float _1946 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1934);
    float _1947 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1934);
    float _1948 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1934);
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1962 = _864 + (-1.0);
    float _1967 = (cbLight._m0[_1955].x * _1962) + 1.0;
    float _1968 = (cbLight._m0[_1955].y * _1962) + 1.0;
    float _1969 = (cbLight._m0[_1955].z * _1962) + 1.0;
    float _1970 = (cbLight._m0[_1955].w * _1962) + 1.0;
    uint _1971 = _1954 + 5u;
    float _1977 = isnan(1.0) ? _1968 : (isnan(_1968) ? 1.0 : min(_1968, 1.0));
    uint _1981 = _1954 + 4u;
    float _1990 = isnan(1.0) ? _1967 : (isnan(_1967) ? 1.0 : min(_1967, 1.0));
    uint _1994 = _1954 | 1u;
    float _2005 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_686, _687, _688));
    float _2008 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_686, _687, _688));
    float _4228 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _4239 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
    float _2013 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2015 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2022 = ((cbLight._m0[_1971].x * _1977) * _2015) + (((cbLight._m0[_1981].x * _1946) * _1990) * _2013);
    float _2023 = ((_1977 * cbLight._m0[_1971].y) * _2015) + (((cbLight._m0[_1981].y * _1947) * _1990) * _2013);
    float _2024 = ((_1977 * cbLight._m0[_1971].z) * _2015) + (((cbLight._m0[_1981].z * _1948) * _1990) * _2013);
    uvec4 _2028 = floatBitsToUint(cbLight._m0[_1954 + 12u]);
    bool _2030 = _2028.x == 0u;
    float _2041;
    float _2043;
    float _2045;
    if (_2030)
    {
        _2041 = _2022;
        _2043 = _2023;
        _2045 = _2024;
    }
    else
    {
        uint _2049 = _1954 + 6u;
        float _2065 = (dot(vec3(cbLight._m0[_1954 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2066 = _2065 * _2065;
        float _4250 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2067 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2068 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2041 = (((cbLight._m0[_2049].x * 0.3183098733425140380859375) * _2067) * _2068) + _2022;
        _2043 = (((cbLight._m0[_2049].y * 0.3183098733425140380859375) * _2067) * _2068) + _2023;
        _2045 = (((cbLight._m0[_2049].z * 0.3183098733425140380859375) * _2067) * _2068) + _2024;
    }
    bool _2048 = _2028.y == 0u;
    float _2086;
    float _2088;
    float _2090;
    if (_2048)
    {
        _2086 = _2041;
        _2088 = _2043;
        _2090 = _2045;
    }
    else
    {
        uint _2259 = _1954 + 7u;
        float _2275 = (dot(vec3(cbLight._m0[_1954 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2276 = _2275 * _2275;
        float _4266 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2277 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2278 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2086 = (((cbLight._m0[_2259].x * 0.3183098733425140380859375) * _2277) * _2278) + _2041;
        _2088 = (((cbLight._m0[_2259].y * 0.3183098733425140380859375) * _2277) * _2278) + _2043;
        _2090 = (((cbLight._m0[_2259].z * 0.3183098733425140380859375) * _2277) * _2278) + _2045;
    }
    uint _2093 = _1954 + 8u;
    float _2106 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _689) * 0.949999988079071044921875);
    float _2107 = _2106 * _2106;
    float _2108 = cbLight._m0[_1954].x + _766;
    float _2109 = cbLight._m0[_1954].y + _767;
    float _2110 = cbLight._m0[_1954].z + _768;
    float _2114 = inversesqrt(dot(vec3(_2108, _2109, _2110), vec3(_2108, _2109, _2110)));
    float _2115 = _2114 * _2108;
    float _2116 = _2114 * _2109;
    float _2117 = _2114 * _2110;
    float _2118 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1954].xyz));
    float _4282 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2122 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2123 = dot(vec3(_686, _687, _688), vec3(_2115, _2116, _2117));
    float _4304 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2115, _2116, _2117));
    float _4315 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2107 * _2107;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2143 = exp2(log2(1.0 - (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * 5.0);
    float _2144 = 0.959999978542327880859375 - _845;
    float _2146 = 0.959999978542327880859375 - _846;
    float _2147 = 0.959999978542327880859375 - _847;
    float _2154 = 1.0 - _2107;
    float _2165 = (0.5 / (((_2122 * ((_2121 * _2154) + _2107)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2154) + _2107) * _2121))) * _2121;
    float _4326 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2167 = (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    uint _2181 = _1954 + 9u;
    float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _689) * 0.949999988079071044921875);
    float _2193 = _2192 * _2192;
    float _2194 = cbLight._m0[_1994].x + _766;
    float _2195 = cbLight._m0[_1994].y + _767;
    float _2196 = cbLight._m0[_1994].z + _768;
    float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
    float _2201 = _2200 * _2194;
    float _2202 = _2200 * _2195;
    float _2203 = _2200 * _2196;
    float _2204 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_1994].xyz));
    float _4337 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2207 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2208 = dot(vec3(_686, _687, _688), vec3(_2201, _2202, _2203));
    float _4348 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2201, _2202, _2203));
    float _4359 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2193 * _2193;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2227 = exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0);
    float _2234 = 1.0 - _2193;
    float _2244 = (0.5 / (((_2122 * ((_2207 * _2234) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2234) + _2193) * _2207))) * _2207;
    float _4370 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2246 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    float _2256 = (((((_2227 * _2144) + _848) * cbLight._m0[_2181].x) * _2246) * _1977) + ((((cbLight._m0[_2093].x * _1946) * ((_2143 * _2144) + _848)) * _2167) * _1990);
    float _2257 = (((((_2227 * _2146) + _850) * cbLight._m0[_2181].y) * _2246) * _1977) + ((((cbLight._m0[_2093].y * _1947) * ((_2143 * _2146) + _850)) * _2167) * _1990);
    float _2258 = (((((_2227 * _2147) + _851) * cbLight._m0[_2181].z) * _2246) * _1977) + ((((cbLight._m0[_2093].z * _1948) * ((_2143 * _2147) + _851)) * _2167) * _1990);
    float _2320;
    float _2322;
    float _2324;
    if (_2030)
    {
        _2320 = _2256;
        _2322 = _2257;
        _2324 = _2258;
    }
    else
    {
        uint _2326 = _1954 + 2u;
        uint _2330 = _1954 + 10u;
        float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _689) * 0.949999988079071044921875);
        float _2345 = _2344 * _2344;
        float _2346 = cbLight._m0[_2326].x + _766;
        float _2347 = cbLight._m0[_2326].y + _767;
        float _2348 = cbLight._m0[_2326].z + _768;
        float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
        float _2353 = _2352 * _2346;
        float _2354 = _2352 * _2347;
        float _2355 = _2352 * _2348;
        float _2356 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2326].xyz));
        float _4381 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
        float _2359 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2360 = dot(vec3(_686, _687, _688), vec3(_2353, _2354, _2355));
        float _4392 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2364 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2353, _2354, _2355));
        float _4403 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2368 = _2345 * _2345;
        float _2372 = ((_2363 * _2363) * (_2368 + (-1.0))) + 1.0;
        float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) * 5.0);
        float _2386 = 1.0 - _2345;
        float _2396 = (0.5 / (((_2122 * ((_2359 * _2386) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2386) + _2345) * _2359))) * _2359;
        float _4414 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2398 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * (_2368 / ((_2372 * _2372) * 3.141590118408203125));
        float _2399 = isnan(1.0) ? _1969 : (isnan(_1969) ? 1.0 : min(_1969, 1.0));
        _2320 = (((((_2379 * _2144) + _848) * cbLight._m0[_2330].x) * _2398) * _2399) + _2256;
        _2322 = (((((_2379 * _2146) + _850) * cbLight._m0[_2330].y) * _2398) * _2399) + _2257;
        _2324 = (((((_2379 * _2147) + _851) * cbLight._m0[_2330].z) * _2398) * _2399) + _2258;
    }
    float _2434;
    float _2436;
    float _2438;
    if (_2048)
    {
        _2434 = _2320;
        _2436 = _2322;
        _2438 = _2324;
    }
    else
    {
        uint _2445 = _1954 + 3u;
        uint _2449 = _1954 + 11u;
        float _2463 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _689) * 0.949999988079071044921875);
        float _2464 = _2463 * _2463;
        float _2465 = cbLight._m0[_2445].x + _766;
        float _2466 = cbLight._m0[_2445].y + _767;
        float _2467 = cbLight._m0[_2445].z + _768;
        float _2471 = inversesqrt(dot(vec3(_2465, _2466, _2467), vec3(_2465, _2466, _2467)));
        float _2472 = _2471 * _2465;
        float _2473 = _2471 * _2466;
        float _2474 = _2471 * _2467;
        float _2475 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2445].xyz));
        float _4430 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2478 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2479 = dot(vec3(_686, _687, _688), vec3(_2472, _2473, _2474));
        float _4441 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2482 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2483 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2472, _2473, _2474));
        float _4452 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2487 = _2464 * _2464;
        float _2491 = ((_2482 * _2482) * (_2487 + (-1.0))) + 1.0;
        float _2498 = exp2(log2(1.0 - (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * 5.0);
        float _2505 = 1.0 - _2464;
        float _2515 = (0.5 / (((_2122 * ((_2478 * _2505) + _2464)) + 9.9999999392252902907785028219223e-09) + (((_2122 * _2505) + _2464) * _2478))) * _2478;
        float _4463 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
        float _2517 = (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2487 / ((_2491 * _2491) * 3.141590118408203125));
        float _2518 = isnan(1.0) ? _1970 : (isnan(_1970) ? 1.0 : min(_1970, 1.0));
        _2434 = (((((_2498 * _2144) + _848) * cbLight._m0[_2449].x) * _2517) * _2518) + _2320;
        _2436 = (((((_2498 * _2146) + _850) * cbLight._m0[_2449].y) * _2517) * _2518) + _2322;
        _2438 = (((((_2498 * _2147) + _851) * cbLight._m0[_2449].z) * _2517) * _2518) + _2324;
    }
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    if (_1952.y == 0u)
    {
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2593;
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2593;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2593;
        uvec4 _2608 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2609 = _2608.x;
        uint _2620 = uint((float(_2608.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2609))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2609)));
        float _2630 = (log2(_2596 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2631 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        uint _2634 = uint(isnan(14.0) ? _2631 : (isnan(_2631) ? 14.0 : min(_2631, 14.0)));
        uvec4 _2639 = texelFetch(g_lightClusterGridBuffer, int(((_2634 << 2u) + (_2620 << 6u)) >> 2u));
        uint _2640 = _2639.x;
        uint _2641 = _2608.z;
        float _2741;
        float _2743;
        float _2745;
        float _2747;
        float _2749;
        float _2751;
        if (((((1u << ((_2641 >> 4u) & 15u)) + 4294967295u) & _2640) == 0u) || ((_2641 & 240u) == 0u))
        {
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
            _2747 = 0.0;
            _2749 = 0.0;
            _2751 = 0.0;
        }
        else
        {
            float _2742;
            float _2744;
            float _2746;
            float _2748;
            float _2750;
            float _2752;
            float _2894 = 0.0;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            uint _2900 = 0u;
            uint _2909;
            bool _2910;
            for (;;)
            {
                _2909 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                _2910 = _2909 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2910)
                {
                    frontier_phi_66_pred = _2894;
                    frontier_phi_66_pred_1 = _2899;
                    frontier_phi_66_pred_2 = _2898;
                    frontier_phi_66_pred_3 = _2897;
                    frontier_phi_66_pred_4 = _2896;
                    frontier_phi_66_pred_5 = _2895;
                }
                else
                {
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    uint _3045;
                    _3039 = _2894;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2909;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    for (;;)
                    {
                        uint _3049 = uint(findLSB(_3045)) + (_2900 << 5u);
                        uint _3046 = (_3045 + 4294967295u) & _3045;
                        uint _3051 = _3049 * 48u;
                        vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3051)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3051 + 3u)).x));
                        uint _3071 = (_3049 * 48u) + 4u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3071)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3071 + 3u)).x));
                        uint _3090 = (_3049 * 48u) + 8u;
                        vec3 _3101 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x));
                        float _3105 = _3065.x - _2594;
                        float _3106 = _3065.y - _2595;
                        float _3107 = _3065.z - _2596;
                        float _3108 = dot(vec3(_3105, _3106, _3107), vec3(_3105, _3106, _3107));
                        float _3111 = inversesqrt(_3108);
                        float _3112 = _3111 * _3105;
                        float _3113 = _3111 * _3106;
                        float _3114 = _3111 * _3107;
                        float _3115 = dot(vec3(_805, _808, _811), vec3(_3112, _3113, _3114));
                        float _3120 = 1.0 - (_3108 * _3065.w);
                        float _4489 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3121 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
                        float _3122 = sqrt(_3108) * _3084.w;
                        float _3125 = 1.39999997615814208984375 / (_3122 + 1.39999997615814208984375);
                        float _3126 = _3125 * _3125;
                        float _3129 = ((1.0 - _3126) * _3115) + _3126;
                        float _3132 = _3122 * _3122;
                        float _3136 = ((isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))) * _3121) / ((_3132 * 0.699999988079071044921875) + 1.0);
                        float _3140 = (-0.0) - _2594;
                        float _3141 = (-0.0) - _2595;
                        float _3142 = (-0.0) - _2596;
                        float _3146 = inversesqrt(dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142)));
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3157 = exp2(log2(1.0 / ((_3132 * 3.5) + 5.0)) * 0.25);
                        float _3158 = 1.0 - _880;
                        float _3165 = sqrt(1.0 - ((1.0 - (_3158 * _3158)) * (1.0 - (_3157 * _3157))));
                        float _3166 = _3165 * _3165;
                        float _3167 = _3166 * _3166;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3178 = dot(vec3(_805, _808, _811), vec3(_3147, _3148, _3149));
                        float _4505 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3181 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3182 = dot(vec3(_805, _808, _811), vec3(_3174 * _3168, _3174 * _3169, _3174 * _3170));
                        float _4516 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3185 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3189 = ((_3185 * _3185) * (_3167 + (-1.0))) + 1.0;
                        float _3190 = _3125 * _3166;
                        float _3191 = _3190 * _3190;
                        float _3194 = ((1.0 - _3191) * _3115) + _3191;
                        float _4527 = isnan(0.0) ? _3194 : (isnan(_3194) ? 0.0 : max(_3194, 0.0));
                        float _3195 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3196 = 1.0 - _3166;
                        float _3206 = (0.5 / (((_3195 * ((_3181 * _3196) + _3166)) + 9.9999999392252902907785028219223e-09) + (((_3195 * _3196) + _3166) * _3181))) * _3195;
                        float _4538 = isnan(0.0) ? _3206 : (isnan(_3206) ? 0.0 : max(_3206, 0.0));
                        float _3217 = (((_3167 * 3.1415927410125732421875) * (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0)))) / ((_3189 * _3189) * ((_3132 * 2.1991131305694580078125) + 3.141590118408203125))) * _3121;
                        _2969 = (_3136 * _3084.x) + _3042;
                        _2970 = (_3136 * _3084.y) + _3043;
                        _2971 = (_3136 * _3084.z) + _3044;
                        _2966 = (_3217 * _3101.x) + _3039;
                        _2967 = (_3217 * _3101.y) + _3040;
                        _2968 = (_3217 * _3101.z) + _3041;
                        if (_3046 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3039 = _2966;
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _3046;
                        }
                    }
                    frontier_phi_66_pred = _2966;
                    frontier_phi_66_pred_1 = _2971;
                    frontier_phi_66_pred_2 = _2970;
                    frontier_phi_66_pred_3 = _2969;
                    frontier_phi_66_pred_4 = _2968;
                    frontier_phi_66_pred_5 = _2967;
                }
                _2742 = frontier_phi_66_pred;
                _2752 = frontier_phi_66_pred_1;
                _2750 = frontier_phi_66_pred_2;
                _2748 = frontier_phi_66_pred_3;
                _2746 = frontier_phi_66_pred_4;
                _2744 = frontier_phi_66_pred_5;
                uint _2901 = _2900 + 1u;
                if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2894 = _2742;
                    _2895 = _2744;
                    _2896 = _2746;
                    _2897 = _2748;
                    _2898 = _2750;
                    _2899 = _2752;
                    _2900 = _2901;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
            _2747 = _2748;
            _2749 = _2750;
            _2751 = _2752;
        }
        uvec4 _2755 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2756 = _2755.z;
        uint _2758 = (_2756 >> 8u) & 15u;
        float _2862;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        if (((4294967295u << _2758) & _2640) == 0u)
        {
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
            _2868 = _2747;
            _2870 = _2749;
            _2872 = _2751;
        }
        else
        {
            float _2887 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
            float _2888 = _2887 * _2594;
            float _2889 = _2887 * _2595;
            float _2890 = _2887 * _2596;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2758 < ((_2756 >> 12u) & 15u))
            {
                float _2863;
                float _2865;
                float _2867;
                float _2869;
                float _2871;
                float _2873;
                float _3022 = _2741;
                float _3023 = _2743;
                float _3024 = _2745;
                float _3025 = _2747;
                float _3026 = _2749;
                float _3027 = _2751;
                uint _3028 = _2758;
                uint _3037;
                bool _3038;
                for (;;)
                {
                    _3037 = texelFetch(g_lightClassification, int((((_2634 << 5u) + (_2620 << 9u)) + (_3028 << 2u)) >> 2u)).x;
                    _3038 = _3037 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3038)
                    {
                        frontier_phi_77_pred = _3027;
                        frontier_phi_77_pred_1 = _3026;
                        frontier_phi_77_pred_2 = _3025;
                        frontier_phi_77_pred_3 = _3024;
                        frontier_phi_77_pred_4 = _3023;
                        frontier_phi_77_pred_5 = _3022;
                    }
                    else
                    {
                        float _3231;
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3525;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3244 = _3022;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        uint _3250 = _3037;
                        uint _3251;
                        vec4 _3276;
                        float _3277;
                        vec4 _3292;
                        vec3 _3304;
                        vec4 _3319;
                        vec4 _3335;
                        float _3381;
                        bool _3382;
                        for (;;)
                        {
                            uint _3261 = ((_3028 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3250));
                            _3251 = (_3250 + 4294967295u) & _3250;
                            uint _3263 = _3261 * 40u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3277 = _3276.w;
                            uint _3279 = (_3261 * 40u) + 4u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3294 = (_3261 * 40u) + 8u;
                            _3304 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3294)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3294 + 2u)).x));
                            uint _3306 = (_3261 * 40u) + 16u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3261 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3261 * 40u) + 24u;
                            vec4 _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3356 = (_3261 * 40u) + 28u;
                            vec4 _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            _3381 = fma(_2596, _3369.z, fma(_2595, _3369.y, _3369.x * _2594)) + _3369.w;
                            _3382 = !((fma(_2596, _3350.z, fma(_2595, _3350.y, _3350.x * _2594)) + _3350.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3382)
                            {
                                float _3409 = _3276.x - _2594;
                                float _3410 = _3276.y - _2595;
                                float _3411 = _3276.z - _2596;
                                float _3412 = dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411));
                                float _3415 = inversesqrt(_3412);
                                float _3416 = _3415 * _3409;
                                float _3417 = _3415 * _3410;
                                float _3418 = _3415 * _3411;
                                float _3422 = 1.0 - (_3412 / (_3277 * _3277));
                                float _4549 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3423 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
                                float _3427 = sqrt(_3412) * _3292.w;
                                float _3429 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                                float _3430 = _3429 * _3429;
                                float _3433 = ((1.0 - _3430) * dot(vec3(_3416, _3417, _3418), vec3(_805, _808, _811))) + _3430;
                                float _3436 = _3427 * _3427;
                                float _3440 = (fma(_2596, _3319.z, fma(_2595, _3319.y, _3319.x * _2594)) + _3319.w) / _3381;
                                float _3441 = (fma(_2596, _3335.z, fma(_2595, _3335.y, _3335.x * _2594)) + _3335.w) / _3381;
                                float _3445 = 1.0 - dot(vec2(_3440, _3441), vec2(_3440, _3441));
                                float _4565 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3447 = _3446 * (((isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0))) * _3423) / ((_3436 * 0.699999988079071044921875) + 1.0));
                                float _3459 = exp2(log2(1.0 / ((_3436 * 3.5) + 5.0)) * 0.25);
                                float _3460 = 1.0 - _880;
                                float _3467 = sqrt(1.0 - ((1.0 - (_3460 * _3460)) * (1.0 - (_3459 * _3459))));
                                float _3468 = _3467 * _3467;
                                float _3469 = _3468 * _3468;
                                float _3470 = _3416 - _2888;
                                float _3471 = _3417 - _2889;
                                float _3472 = _3418 - _2890;
                                float _3476 = inversesqrt(dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472)));
                                float _3480 = dot(vec3(_805, _808, _811), vec3((-0.0) - _2888, (-0.0) - _2889, (-0.0) - _2890));
                                float _4576 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3483 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3484 = dot(vec3(_805, _808, _811), vec3(_3476 * _3470, _3476 * _3471, _3476 * _3472));
                                float _4587 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3487 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3491 = ((_3487 * _3487) * (_3469 + (-1.0))) + 1.0;
                                float _3492 = _3429 * _3468;
                                float _3493 = _3492 * _3492;
                                float _3499 = ((1.0 - _3493) * dot(vec3(_805, _808, _811), vec3(_3416, _3417, _3418))) + _3493;
                                float _4598 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                                float _3500 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3501 = 1.0 - _3468;
                                float _3511 = (0.5 / (((_3500 * ((_3483 * _3501) + _3468)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3468) * _3483))) * _3500;
                                float _4609 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3521 = (_3446 * _3423) * (((_3469 * 3.1415927410125732421875) * (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) / ((_3491 * _3491) * ((_3436 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3447 * _3292.y;
                                frontier_phi_83_pred_1 = _3447 * _3292.x;
                                frontier_phi_83_pred_2 = _3521 * _3304.z;
                                frontier_phi_83_pred_3 = _3521 * _3304.y;
                                frontier_phi_83_pred_4 = _3521 * _3304.x;
                                frontier_phi_83_pred_5 = _3447 * _3292.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3529 = frontier_phi_83_pred;
                            _3528 = frontier_phi_83_pred_1;
                            _3527 = frontier_phi_83_pred_2;
                            _3526 = frontier_phi_83_pred_3;
                            _3525 = frontier_phi_83_pred_4;
                            _3530 = frontier_phi_83_pred_5;
                            _3234 = _3528 + _3247;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3231 = _3525 + _3244;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            if (_3251 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3244 = _3231;
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3251;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3236;
                        frontier_phi_77_pred_1 = _3235;
                        frontier_phi_77_pred_2 = _3234;
                        frontier_phi_77_pred_3 = _3233;
                        frontier_phi_77_pred_4 = _3232;
                        frontier_phi_77_pred_5 = _3231;
                    }
                    _2873 = frontier_phi_77_pred;
                    _2871 = frontier_phi_77_pred_1;
                    _2869 = frontier_phi_77_pred_2;
                    _2867 = frontier_phi_77_pred_3;
                    _2865 = frontier_phi_77_pred_4;
                    _2863 = frontier_phi_77_pred_5;
                    uint _3029 = _3028 + 1u;
                    if (_3029 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3022 = _2863;
                        _3023 = _2865;
                        _3024 = _2867;
                        _3025 = _2869;
                        _3026 = _2871;
                        _3027 = _2873;
                        _3028 = _3029;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2867;
                frontier_phi_58_59_ladder_1 = _2873;
                frontier_phi_58_59_ladder_2 = _2871;
                frontier_phi_58_59_ladder_3 = _2869;
                frontier_phi_58_59_ladder_4 = _2865;
                frontier_phi_58_59_ladder_5 = _2863;
            }
            else
            {
                frontier_phi_58_59_ladder = _2745;
                frontier_phi_58_59_ladder_1 = _2751;
                frontier_phi_58_59_ladder_2 = _2749;
                frontier_phi_58_59_ladder_3 = _2747;
                frontier_phi_58_59_ladder_4 = _2743;
                frontier_phi_58_59_ladder_5 = _2741;
            }
            _2862 = frontier_phi_58_59_ladder_5;
            _2864 = frontier_phi_58_59_ladder_4;
            _2866 = frontier_phi_58_59_ladder;
            _2868 = frontier_phi_58_59_ladder_3;
            _2870 = frontier_phi_58_59_ladder_2;
            _2872 = frontier_phi_58_59_ladder_1;
        }
        float _2877 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2653 = (_2877 * _2868) + _2086;
        _2655 = (_2877 * _2870) + _2088;
        _2657 = (_2877 * _2872) + _2090;
        _2659 = ((_2862 * _848) * _2877) + _2434;
        _2661 = ((_2864 * _850) * _2877) + _2436;
        _2663 = ((_2866 * _851) * _2877) + _2438;
    }
    else
    {
        _2653 = _2086;
        _2655 = _2088;
        _2657 = _2090;
        _2659 = _2434;
        _2661 = _2436;
        _2663 = _2438;
    }
    float _4625 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _4636 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4647 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _2680 = ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2653 + ((isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0))) * _864))) + ((_2659 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2655 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _864))) + ((_2661 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    float _2682 = ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2657 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _864))) + ((_2663 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1703)) * cbPerFrame._m0[3u].x);
    uint _2683 = _244 + 6u;
    float _2691 = _786 / cbSceneParam._m0[86u].x;
    float _2692 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2706 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, (log2((isnan(cbSceneParam._m0[77u].w) ? _708 : (isnan(_708) ? cbSceneParam._m0[77u].w : min(_708, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2708 = _2706.x;
    float _2709 = _2706.y;
    float _2710 = _2706.z;
    float _2711 = _2706.w;
    float _2804;
    float _2806;
    float _2808;
    float _2810;
    if (_708 > cbSceneParam._m0[78u].w)
    {
        float _2766 = isnan(_708) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _708 : min(cbSceneParam._m0[80u].w, _708));
        float _2767 = _2766 / _708;
        float _2778 = _2767 * _759;
        float _2779 = _760 * _2767;
        float _2780 = (-0.0) - _2779;
        float _2782 = _2767 * _761;
        float _2784 = (cbSceneParam._m0[77u].w * _2780) / _2766;
        float _2785 = _2784 + cbSceneParam._m0[79u].w;
        float _2786 = cbSceneParam._m0[79u].w - _2779;
        float _2792 = sqrt(((_2778 * _2778) + (_2779 * _2779)) + (_2782 * _2782));
        float _2795 = (1.0 - (cbSceneParam._m0[77u].w / _2766)) * _2792;
        float _2800 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2802 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2979;
        if (abs((_2780 - _2784) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2979 = ((((_2785 > 0.0) ? exp2(_2800 * _2785) : (2.0 - exp2(_2802 * _2785))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2795;
        }
        else
        {
            float _2923 = 1.0 / cbSceneParam._m0[80u].x;
            float _2924 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : max(_2785, _2786));
            float _2925 = isnan(_2786) ? _2785 : (isnan(_2785) ? _2786 : min(_2785, _2786));
            float _2934 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : min(_2924, 0.0));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            _2979 = ((abs(_2792 / _2780) * cbSceneParam._m0[80u].y) * ((((_2934 - _2935) * 2.0) - ((exp2(_2800 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)))) - exp2(_2800 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0))))) * _2923)) - ((exp2(_2802 * _2934) - exp2(_2802 * _2935)) * _2923))) + (_2795 * cbSceneParam._m0[80u].z);
        }
        vec4 _2981 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2691, _2692, 1.0), 0.0);
        float _2990 = exp2((_2979 * (-1.44269502162933349609375)) * (1.0 - _2981.w));
        float _2991 = log2(_2990);
        float _3007 = log2(_2711);
        _2804 = (exp2(_3007 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].x)) * _2981.x) / cbSceneParam._m0[78u].x)) + _2708;
        _2806 = (exp2(_3007 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].y)) * _2981.y) / cbSceneParam._m0[78u].y)) + _2709;
        _2808 = (exp2(_3007 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2991 * cbSceneParam._m0[78u].z)) * _2981.z) / cbSceneParam._m0[78u].z)) + _2710;
        _2810 = _2990 * _2711;
    }
    else
    {
        _2804 = _2708;
        _2806 = _2709;
        _2808 = _2710;
        _2810 = _2711;
    }
    bool _3017;
    vec4 _2820;
    vec4 _2842;
    float _2844;
    float _2848;
    float _2849;
    float _2850;
    float _2851;
    bool _2861;
    for (;;)
    {
        _2820 = cbMatDynParam._m0[0u];
        float _2822 = roundEven(_2820.y);
        bool _2823 = _2822 == 3.0;
        float _2824 = log2(_2810);
        float _2831 = exp2(_2824 * cbSceneParam._m0[78u].x) * _2680;
        float _2832 = exp2(_2824 * cbSceneParam._m0[78u].y) * _2681;
        float _2833 = exp2(_2824 * cbSceneParam._m0[78u].z) * _2682;
        float _2840 = _775 + (-0.5);
        _2842 = cbMtdParam._m0[1u];
        _2844 = _2842.y * _2840;
        float _2847 = (_2822 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2848 = _2847 * (_2823 ? _2831 : (_2831 + (cbSceneParam._m0[72u].w * _2804)));
        _2849 = _2847 * (_2823 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2806)));
        _2850 = _2847 * (_2823 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2808)));
        _2851 = _2840 * 0.999000012874603271484375;
        _2861 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2861)
        {
            if ((cbInstanceData._m0[_244 + 7u].x + _2851) < 0.5)
            {
                _3017 = true;
                break;
            }
        }
        uint _2958 = _824 + uint(_2820.w);
        if ((cbInstanceData._m0[_2958].w < 1.0) && ((cbInstanceData._m0[_2958].w + _2851) < 0.5))
        {
            _3017 = true;
            break;
        }
        if ((_2844 + 1.0) < _2842.x)
        {
            _3017 = true;
            break;
        }
        _3017 = false;
        break;
    }
    float _3222;
    if (_3017)
    {
        discard_state = true;
        _3222 = 0.0;
    }
    else
    {
        _3222 = cbInstanceData._m0[_2683].w;
    }
    SV_Target.x = _2848;
    SV_Target.y = _2849;
    SV_Target.z = _2850;
    SV_Target.w = _3222;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2683].w;
    discard_exit();
}


