#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1477;
float _4138;
float _4139;
float _4140;
float _4141;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4150 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4161 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4172 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4183 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _459 = (_452 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _460 = (_452 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _461 = (_452 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4194 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    float _538 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _532;
    float _541 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _533;
    float _544 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _534;
    float _551 = ((_532 - _538) * (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) + _538;
    float _552 = ((_533 - _541) * (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) + _541;
    float _553 = ((_534 - _544) * (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) + _544;
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _305) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _306) + cbTextureTilingScale._m0[14u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _614 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _631 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _633 = _631.x;
    float _634 = _631.y;
    float _635 = _631.z;
    float _642 = ((_614.x - _633) * _452) + _633;
    float _643 = ((_614.y - _634) * _452) + _634;
    float _644 = ((_614.z - _635) * _452) + _635;
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_656.z - _644) * _525) + _644;
    float _672 = ((((_656.x - _642) * _525) + _642) * 2.0) + (-1.0);
    float _673 = ((((_656.y - _643) * _525) + _643) * 2.0) + (-1.0);
    float _674 = dot(vec2(_672, _673), vec2(_672, _673));
    float _4205 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _679 = sqrt(1.0 - (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _305) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _306) + cbTextureTilingScale._m0[11u].w));
    float _720 = _718.x;
    float _721 = 1.0 - _720;
    float _737 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_720 - _721) * cbMtdParam._m0[24u].z) + _721) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4216 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _738 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _745 = (_738 * ((_572.x * cbMtdParam._m0[18u].x) - _551)) + _551;
    float _746 = (_738 * ((_572.y * cbMtdParam._m0[18u].y) - _552)) + _552;
    float _747 = (_738 * ((_572.z * cbMtdParam._m0[18u].z) - _553)) + _553;
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _775 = _773.x;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _775) * _452) + _775;
    float _810 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _793) * _525) + _793;
    float _814 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _810) * cbMtdParam._m0[19u].z) + _810;
    float _816 = _814 - (_814 * _738);
    float _821 = (((_591.z - _669) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _669;
    float _825 = ((_693.z - _821) * cbMtdParam._m0[19u].w) + _821;
    vec4 _838 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _305) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _306) + cbTextureTilingScale._m0[15u].w));
    float _845 = (_838.x * 2.0) + (-1.0);
    float _846 = (_838.y * 2.0) + (-1.0);
    float _847 = dot(vec2(_845, _846), vec2(_845, _846));
    float _4227 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _855 = (_738 * (_838.z - _825)) + _825;
    float _864 = (_672 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_591.x * 2.0) + (-1.0)))) + (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _865 = (_673 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_591.y * 2.0) + (-1.0)))) + (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _877 = (((_845 - _864) + (cbMtdParam._m0[21u].x * _864)) * _738) + _864;
    float _878 = (((_846 - _865) + (cbMtdParam._m0[21u].x * _865)) * _738) + _865;
    float _879 = (_738 * (sqrt(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) - _679)) + _679;
    float _883 = cbMtdParam._m0[22u].x + _693.w;
    float _886 = fma(_879, _252 * NORMAL.x, fma(_878, _259 * TANGENT.x, (_245 * _237) * _877));
    float _889 = fma(_879, _252 * NORMAL.y, fma(_878, _259 * TANGENT.y, (_245 * _238) * _877));
    float _892 = fma(_879, _252 * NORMAL.z, fma(_878, _259 * TANGENT.z, (_245 * _239) * _877));
    float _896 = inversesqrt(dot(vec3(_886, _889, _892), vec3(_886, _889, _892)));
    float _897 = _896 * _886;
    float _898 = _896 * _889;
    float _899 = _896 * _892;
    float _4238 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _900 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4260 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4271 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4282 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4293 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _905 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _970 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _960);
    float _971 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _960);
    float _972 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _960);
    float _976 = inversesqrt(dot(vec3(_970, _971, _972), vec3(_970, _971, _972)));
    float _977 = _970 * _976;
    float _978 = _971 * _976;
    float _979 = _972 * _976;
    vec4 _984 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _986 = _984.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1158 = sqrt(((_970 * _970) + (_971 * _971)) + (_972 * _972));
        float _1164 = (cbMatDynParam._m0[5u].x * _1158) + cbMatDynParam._m0[5u].y;
        float _4304 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1169 = (cbMatDynParam._m0[5u].z * _1158) + cbMatDynParam._m0[5u].w;
        float _4315 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) - _1165)) + _1165) < ((_986 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _997 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _998 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1016 = fma(_899, cbSceneParam._m0[5u].z, fma(_898, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _897));
    float _1019 = fma(_899, cbSceneParam._m0[6u].z, fma(_898, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _897));
    float _1022 = fma(_899, cbSceneParam._m0[7u].z, fma(_898, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _897));
    uint _1035 = _286 + 9u;
    uint _1036 = _1035 + uint(cbMatDynParam._m0[0u].w);
    float _1042 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) * cbInstanceData._m0[_1036].x;
    float _1043 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * cbInstanceData._m0[_1036].y;
    float _1044 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0)))) * cbInstanceData._m0[_1036].z;
    float _4326 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _4337 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _4348 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _1047 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _1048 = 1.0 - _905;
    float _1049 = _1045 * _1048;
    float _1050 = _1046 * _1048;
    float _1051 = _1047 * _1048;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _905;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _905;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _905;
    float _1059 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    vec4 _1071 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _997, cbSceneParam._m0[86u].y * _998));
    float _1075 = ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * TEXCOORD_5.w) * _1071.x;
    float _1076 = dot(vec3(_897, _898, _899), vec3(_977, _978, _979));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _897) - _977;
    float _1084 = (_1079 * _898) - _978;
    float _1085 = (_1079 * _899) - _979;
    float _1089 = abs(dot(vec3(_977, _978, _979), vec3(_897, _898, _899)));
    float _4359 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_900);
    float _1104 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1091;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1476;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1201 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1205 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1209 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1234 = _1139 + _897;
        float _1235 = _1143 + _898;
        float _1236 = _1147 + _899;
        float _1246 = fma(_1236, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234)) - _1201;
        float _1247 = fma(_1236, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234)) - _1205;
        float _1248 = fma(_1236, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234)) - _1209;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1201 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1205 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[34u].z) + ((((((_1209 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1304 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1270.x + (-0.5));
        float _1306 = _1304 * (_1270.y + (-0.5));
        float _1307 = _1304 * (_1270.z + (-0.5));
        float _1314 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1277.x + (-0.5));
        float _1316 = _1314 * (_1277.y + (-0.5));
        float _1317 = _1314 * (_1277.z + (-0.5));
        float _1324 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1284.x + (-0.5));
        float _1326 = _1324 * (_1284.y + (-0.5));
        float _1327 = _1324 * (_1284.z + (-0.5));
        float _1334 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1291.x + (-0.5));
        float _1336 = _1334 * (_1291.y + (-0.5));
        float _1337 = _1334 * (_1291.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1358 = (dot(vec3(_897, _898, _899), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1368 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4407 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1370 + 1.0))) + _1375) * _1338;
        float _1385 = _1306 * 0.5;
        float _1386 = _1316 * 0.5;
        float _1387 = _1326 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_897, _898, _899), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4440 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1412 + 1.0))) + _1417) * _1339;
        float _1427 = _1307 * 0.5;
        float _1428 = _1317 * 0.5;
        float _1429 = _1327 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_897, _898, _899), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4473 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1454 + 1.0))) + _1459) * _1340;
        _1476 = _1307;
        _1478 = _1306;
        _1479 = _1305;
        _1480 = _1317;
        _1481 = _1316;
        _1482 = _1315;
        _1483 = _1327;
        _1484 = _1326;
        _1485 = _1325;
        _1486 = _1340;
        _1487 = _1339;
        _1488 = _1338;
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1477;
        _1478 = _1477;
        _1479 = _1477;
        _1480 = _1477;
        _1481 = _1477;
        _1482 = _1477;
        _1483 = _1477;
        _1484 = _1477;
        _1485 = _1477;
        _1486 = _1477;
        _1487 = _1477;
        _1488 = _1477;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1518 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1522 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1526 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1549 = _1139 + _897;
        float _1550 = _1143 + _898;
        float _1551 = _1147 + _899;
        float _1561 = fma(_1551, cbModelParam._m0[30u].z, fma(_1550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1549)) - _1518;
        float _1562 = fma(_1551, cbModelParam._m0[31u].z, fma(_1550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1549)) - _1522;
        float _1563 = fma(_1551, cbModelParam._m0[32u].z, fma(_1550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1549)) - _1526;
        float _1567 = inversesqrt(dot(vec3(_1561, _1562, _1563), vec3(_1561, _1562, _1563)));
        float _1580 = ((_1567 * _1561) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1518 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1567 * _1562) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1522 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1582 = ((_1567 * _1563) / cbModelParam._m0[35u].z) + ((((((_1526 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        vec4 _1605 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1580, _1581, _1582), 0.0);
        float _1617 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1618 = _1617 * (_1584.x + (-0.5));
        float _1619 = _1617 * (_1584.y + (-0.5));
        float _1620 = _1617 * (_1584.z + (-0.5));
        float _1627 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1628 = _1627 * (_1591.x + (-0.5));
        float _1629 = _1627 * (_1591.y + (-0.5));
        float _1630 = _1627 * (_1591.z + (-0.5));
        float _1637 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1598.x + (-0.5));
        float _1639 = _1637 * (_1598.y + (-0.5));
        float _1640 = _1637 * (_1598.z + (-0.5));
        float _1647 = exp2((_1605.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1605.x + (-0.5));
        float _1649 = _1647 * (_1605.y + (-0.5));
        float _1650 = _1647 * (_1605.z + (-0.5));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1654 = _1618 * 0.5;
        float _1655 = _1628 * 0.5;
        float _1656 = _1638 * 0.5;
        float _1657 = dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656));
        float _1662 = (_1657 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1657);
        float _1670 = (dot(vec3(_897, _898, _899), vec3(_1662 * _1654, _1662 * _1655, _1662 * _1656)) + 1.0) * 0.5;
        float _4514 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1679 = sqrt(((_1655 * _1655) + (_1654 * _1654)) + (_1656 * _1656)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4525 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1681 = _1680 * 2.0;
        float _1685 = (1.0 - _1680) / (_1680 + 1.0);
        float _4536 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1695 = ((((1.0 - _1686) * (_1681 + 2.0)) * exp2(log2(isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_1681 + 1.0))) + _1686) * _1651;
        float _1696 = _1619 * 0.5;
        float _1697 = _1629 * 0.5;
        float _1698 = _1639 * 0.5;
        float _1699 = dot(vec3(_1696, _1697, _1698), vec3(_1696, _1697, _1698));
        float _1704 = (_1699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1699);
        float _1712 = (dot(vec3(_897, _898, _899), vec3(_1704 * _1696, _1704 * _1697, _1704 * _1698)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1721 = sqrt(((_1697 * _1697) + (_1696 * _1696)) + (_1698 * _1698)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1723 = _1722 * 2.0;
        float _1727 = (1.0 - _1722) / (_1722 + 1.0);
        float _4569 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1737 = ((((1.0 - _1728) * (_1723 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1723 + 1.0))) + _1728) * _1652;
        float _1738 = _1620 * 0.5;
        float _1739 = _1630 * 0.5;
        float _1740 = _1640 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_897, _898, _899), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4580 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1653 + 9.9999997473787516355514526367188e-06);
        float _4591 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4602 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_1765 + 1.0))) + _1770) * _1653;
        _1787 = _1620;
        _1788 = _1619;
        _1789 = _1618;
        _1790 = _1630;
        _1791 = _1629;
        _1792 = _1628;
        _1793 = _1640;
        _1794 = _1639;
        _1795 = _1638;
        _1796 = _1653;
        _1797 = _1652;
        _1798 = _1651;
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)));
        _1801 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
    }
    else
    {
        _1787 = _1477;
        _1788 = _1477;
        _1789 = _1477;
        _1790 = _1477;
        _1791 = _1477;
        _1792 = _1477;
        _1793 = _1477;
        _1794 = _1477;
        _1795 = _1477;
        _1796 = _1477;
        _1797 = _1477;
        _1798 = _1477;
        _1799 = 0.0;
        _1800 = 0.0;
        _1801 = 0.0;
    }
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1489)) + _1489;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1490)) + _1490;
    float _1813 = (cbModelParam._m0[1u].x * (_1801 - _1491)) + _1491;
    float _1834 = fma(_1813, cbSceneParam._m0[89u].z, fma(_1812, cbSceneParam._m0[89u].y, _1811 * cbSceneParam._m0[89u].x));
    float _1837 = fma(_1813, cbSceneParam._m0[90u].z, fma(_1812, cbSceneParam._m0[90u].y, _1811 * cbSceneParam._m0[90u].x));
    float _1840 = fma(_1813, cbSceneParam._m0[91u].z, fma(_1812, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1811));
    float _1855 = _1083 * 0.5;
    float _1856 = _1084 * 0.5;
    float _1857 = _1085 * 0.5;
    float _1858 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1789, _1792, _1795, _1798));
    float _1861 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1864 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1898;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1871 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1476, _1480, _1483, _1486));
        float _1875 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1879 = dot(vec4(_1855, _1856, _1857, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1886 = dot(vec4(cbModelParam._m0[39u]), vec4(_1855, _1856, _1857, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0)), isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1886) ? 0.0 : (isnan(0.0) ? _1886 : max(0.0, _1886))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1909;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1900 = dot(vec4(cbModelParam._m0[40u]), vec4(_1855, _1856, _1857, 1.0));
        _1909 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1900) ? 0.0 : (isnan(0.0) ? _1900 : max(0.0, _1900))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1909 = 1.0;
    }
    float _1913 = (_1909 * cbModelParam._m0[1u].x) + (_1898 * (1.0 - cbModelParam._m0[1u].x));
    float _1923 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _900);
    float _1924 = isnan(_1923) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1923 : min(cbModelParam._m0[25u].z, _1923));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1985 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1988 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2187;
        if (_1985 > 0.0)
        {
            _2187 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2187 = frontier_phi_26_22_ladder;
        }
        float _2482;
        if (_1988 > 0.0)
        {
            _2482 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2482 = frontier_phi_38_33_ladder;
        }
        float _2484 = isnan(_2187) ? _2016 : (isnan(_2016) ? _2187 : min(_2016, _2187));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1982) + _1971;
        float _2490 = (_2485 * _1985) + _1975;
        float _2491 = (_2485 * _1988) + _1979;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2494 = (-1.0) - _2492;
        float _2496 = _2492 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2491 > _2496) || ((_2491 < _2494) || ((_2490 > _2496) || ((_2490 < _2494) || ((_2489 < _2494) || (_2489 > _2496))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2636 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2491, cbModelParam._m0[9u].z, fma(_2490, cbModelParam._m0[9u].y, _2489 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2491, cbModelParam._m0[10u].z, fma(_2490, cbModelParam._m0[10u].y, _2489 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2491, cbModelParam._m0[11u].z, fma(_2490, cbModelParam._m0[11u].y, _2489 * cbModelParam._m0[11u].x))), _1924);
            frontier_phi_16_38_ladder = _2636.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2636.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2636.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1924);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _900);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2102;
    float _2104;
    float _2106;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2066 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2070 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2074 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2077 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2080 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2083 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2192;
        if (_2077 > 0.0)
        {
            _2192 = abs((1.0 - _2066) / _2077);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2066 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2192 = frontier_phi_28_24_ladder;
        }
        float _2509;
        if (_2080 > 0.0)
        {
            _2509 = abs((1.0 - _2070) / _2080);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2080 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2070 + 1.0) / _2080);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2509 = frontier_phi_40_35_ladder;
        }
        float _2847;
        if (_2083 > 0.0)
        {
            _2847 = abs((1.0 - _2074) / _2083);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2074 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2847 = frontier_phi_50_47_ladder;
        }
        float _2849 = isnan(_2509) ? _2192 : (isnan(_2192) ? _2509 : min(_2192, _2509));
        float _2850 = isnan(_2847) ? _2849 : (isnan(_2849) ? _2847 : min(_2849, _2847));
        float _2854 = (_2850 * _2077) + _2066;
        float _2855 = (_2850 * _2080) + _2070;
        float _2856 = (_2850 * _2083) + _2074;
        float _2857 = _2850 * 9.9999997473787516355514526367188e-05;
        float _2858 = (-1.0) - _2857;
        float _2860 = _2857 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2856 > _2860) || ((_2856 < _2858) || ((_2855 > _2860) || ((_2855 < _2858) || ((_2854 < _2858) || (_2854 > _2860))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2856, cbModelParam._m0[17u].z, fma(_2855, cbModelParam._m0[17u].y, _2854 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2856, cbModelParam._m0[18u].z, fma(_2855, cbModelParam._m0[18u].y, _2854 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2856, cbModelParam._m0[19u].z, fma(_2855, cbModelParam._m0[19u].y, _2854 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_50_ladder = _2978.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2978.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2978.x * cbModelParam._m0[1u].z;
        }
        _2102 = frontier_phi_25_50_ladder_2;
        _2104 = frontier_phi_25_50_ladder_1;
        _2106 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2013);
        _2102 = _2086.x * cbModelParam._m0[1u].z;
        _2104 = _2086.y * cbModelParam._m0[1u].z;
        _2106 = _2086.z * cbModelParam._m0[1u].z;
    }
    float _2119 = (((_1110 * _1059) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2102 - _2004)) + _2004);
    float _2121 = (((_1110 * _1061) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2104 - _2006)) + _2006);
    float _2123 = (((_1110 * _1062) + _1111) * _1075) * ((cbModelParam._m0[1u].w * (_2106 - _2008)) + _2008);
    float _2126 = fma(_2123, cbSceneParam._m0[89u].z, fma(_2121, cbSceneParam._m0[89u].y, _2119 * cbSceneParam._m0[89u].x));
    float _2129 = fma(_2123, cbSceneParam._m0[90u].z, fma(_2121, cbSceneParam._m0[90u].y, _2119 * cbSceneParam._m0[90u].x));
    float _2132 = fma(_2123, cbSceneParam._m0[91u].z, fma(_2121, cbSceneParam._m0[91u].y, _2119 * cbSceneParam._m0[91u].x));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2179 = _2166 / _2178;
    float _2180 = _2170 / _2178;
    float _2181 = _2174 / _2178;
    float _2328;
    float _2329;
    float _2330;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2208 = ((uint(_2181 > cbSceneParam._m0[59u].y) + uint(_2181 > cbSceneParam._m0[59u].x)) + uint(_2181 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2209 = _2208 + 43u;
        uint _2217 = _2208 + 44u;
        uint _2225 = _2208 + 45u;
        uint _2233 = _2208 + 46u;
        float _2244 = fma(_2178, cbSceneParam._m0[_2209].w, fma(_2174, cbSceneParam._m0[_2209].z, fma(_2170, cbSceneParam._m0[_2209].y, _2166 * cbSceneParam._m0[_2209].x)));
        float _2248 = fma(_2178, cbSceneParam._m0[_2217].w, fma(_2174, cbSceneParam._m0[_2217].z, fma(_2170, cbSceneParam._m0[_2217].y, _2166 * cbSceneParam._m0[_2217].x)));
        float _2256 = fma(_2178, cbSceneParam._m0[_2233].w, fma(_2174, cbSceneParam._m0[_2233].z, fma(_2170, cbSceneParam._m0[_2233].y, _2166 * cbSceneParam._m0[_2233].x)));
        float _2261 = cbSceneParam._m0[33u].z * _2256;
        float _2263 = cbSceneParam._m0[33u].w * _2256;
        float _2266 = fma(_2178, cbSceneParam._m0[_2225].w, fma(_2174, cbSceneParam._m0[_2225].z, fma(_2170, cbSceneParam._m0[_2225].y, _2166 * cbSceneParam._m0[_2225].x))) / _2256;
        float _2314 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
        float _4728 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2321 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2261 + _2244) / _2256, (_2263 + _2248) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2263 + _2244) / _2256, (_2248 - _2261) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2261) / _2256, (_2248 - _2263) / _2256), _2266), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2244 - _2263) / _2256, (_2261 + _2248) / _2256), _2266), 0.0)).x), vec4(0.25)));
        _2328 = 1.0 - (_2321 * cbSceneParam._m0[34u].x);
        _2329 = 1.0 - (_2321 * cbSceneParam._m0[34u].y);
        _2330 = 1.0 - (_2321 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2328 = 1.0;
        _2329 = 1.0;
        _2330 = 1.0;
    }
    float _2394;
    float _2396;
    float _2398;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2382 = fma(_2178, cbSceneParam._m0[63u].w, fma(_2174, cbSceneParam._m0[63u].z, fma(_2170, cbSceneParam._m0[63u].y, _2166 * cbSceneParam._m0[63u].x)));
        float _2383 = fma(_2178, cbSceneParam._m0[60u].w, fma(_2174, cbSceneParam._m0[60u].z, fma(_2170, cbSceneParam._m0[60u].y, _2166 * cbSceneParam._m0[60u].x))) / _2382;
        float _2384 = fma(_2178, cbSceneParam._m0[61u].w, fma(_2174, cbSceneParam._m0[61u].z, fma(_2170, cbSceneParam._m0[61u].y, _2166 * cbSceneParam._m0[61u].x))) / _2382;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2383 >= cbSceneParam._m0[64u].x) && (_2384 >= cbSceneParam._m0[64u].y)) && (_2383 <= cbSceneParam._m0[64u].z)) && (_2384 <= cbSceneParam._m0[64u].w))
        {
            float _2522 = fma(_2178, cbSceneParam._m0[62u].w, fma(_2174, cbSceneParam._m0[62u].z, fma(_2170, cbSceneParam._m0[62u].y, _2166 * cbSceneParam._m0[62u].x))) / _2382;
            float _2526 = isnan(cbSceneParam._m0[41u].w) ? _2522 : (isnan(_2522) ? cbSceneParam._m0[41u].w : max(_2522, cbSceneParam._m0[41u].w));
            float _2569 = (cbSceneParam._m0[33u].x - sqrt(((_2180 * _2180) + (_2179 * _2179)) + (_2181 * _2181))) * cbSceneParam._m0[33u].y;
            float _4744 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
            float _2576 = (isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2383, cbSceneParam._m0[33u].w + _2384), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2383, _2384 - cbSceneParam._m0[33u].z), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].z, _2384 - cbSceneParam._m0[33u].w), _2526), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2383 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2384), _2526), 0.0)).x), vec4(0.25)));
            float _2580 = 1.0 - (_2576 * cbSceneParam._m0[34u].x);
            float _2581 = 1.0 - (_2576 * cbSceneParam._m0[34u].y);
            float _2582 = 1.0 - (_2576 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2582) ? _2330 : (isnan(_2330) ? _2582 : min(_2330, _2582));
            frontier_phi_37_36_ladder_1 = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
            frontier_phi_37_36_ladder_2 = isnan(_2580) ? _2328 : (isnan(_2328) ? _2580 : min(_2328, _2580));
        }
        else
        {
            frontier_phi_37_36_ladder = _2330;
            frontier_phi_37_36_ladder_1 = _2329;
            frontier_phi_37_36_ladder_2 = _2328;
        }
        _2394 = frontier_phi_37_36_ladder_2;
        _2396 = frontier_phi_37_36_ladder_1;
        _2398 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2394 = _2328;
        _2396 = _2329;
        _2398 = _2330;
    }
    uvec4 _2403 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2405 = _2403.x * 14u;
    uint _2406 = _2405 + 13u;
    float _2413 = _1075 + (-1.0);
    float _2418 = (cbLight._m0[_2406].x * _2413) + 1.0;
    float _2419 = (cbLight._m0[_2406].y * _2413) + 1.0;
    float _2420 = (cbLight._m0[_2406].z * _2413) + 1.0;
    float _2421 = (cbLight._m0[_2406].w * _2413) + 1.0;
    uint _2422 = _2405 + 5u;
    float _2428 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2432 = _2405 + 4u;
    float _2441 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
    uint _2445 = _2405 | 1u;
    float _2456 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_897, _898, _899));
    float _2459 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_897, _898, _899));
    float _4780 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _4791 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2464 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * 0.3183098733425140380859375;
    float _2466 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * 0.3183098733425140380859375;
    float _2473 = ((cbLight._m0[_2422].x * _2428) * _2466) + (((cbLight._m0[_2432].x * _2394) * _2441) * _2464);
    float _2474 = ((_2428 * cbLight._m0[_2422].y) * _2466) + (((cbLight._m0[_2432].y * _2396) * _2441) * _2464);
    float _2475 = ((_2428 * cbLight._m0[_2422].z) * _2466) + (((cbLight._m0[_2432].z * _2398) * _2441) * _2464);
    uvec4 _2479 = floatBitsToUint(cbLight._m0[_2405 + 12u]);
    bool _2481 = _2479.x == 0u;
    float _2583;
    float _2585;
    float _2587;
    if (_2481)
    {
        _2583 = _2473;
        _2585 = _2474;
        _2587 = _2475;
    }
    else
    {
        uint _2591 = _2405 + 6u;
        float _2607 = (dot(vec3(cbLight._m0[_2405 + 2u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4802 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2610 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2583 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2473;
        _2585 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2474;
        _2587 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2475;
    }
    bool _2590 = _2479.y == 0u;
    float _2645;
    float _2647;
    float _2649;
    if (_2590)
    {
        _2645 = _2583;
        _2647 = _2585;
        _2649 = _2587;
    }
    else
    {
        uint _2818 = _2405 + 7u;
        float _2834 = (dot(vec3(cbLight._m0[_2405 + 3u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2835 = _2834 * _2834;
        float _4818 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
        float _2836 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2837 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2645 = (((cbLight._m0[_2818].x * 0.3183098733425140380859375) * _2836) * _2837) + _2583;
        _2647 = (((cbLight._m0[_2818].y * 0.3183098733425140380859375) * _2836) * _2837) + _2585;
        _2649 = (((cbLight._m0[_2818].z * 0.3183098733425140380859375) * _2836) * _2837) + _2587;
    }
    uint _2652 = _2405 + 8u;
    float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2405].w)) * _900) * 0.949999988079071044921875);
    float _2666 = _2665 * _2665;
    float _2667 = cbLight._m0[_2405].x + _977;
    float _2668 = cbLight._m0[_2405].y + _978;
    float _2669 = cbLight._m0[_2405].z + _979;
    float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
    float _2674 = _2673 * _2667;
    float _2675 = _2673 * _2668;
    float _2676 = _2673 * _2669;
    float _2677 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2405].xyz));
    float _4834 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
    float _4845 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2681 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
    float _2682 = dot(vec3(_897, _898, _899), vec3(_2674, _2675, _2676));
    float _4856 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
    float _2685 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
    float _2686 = dot(vec3(cbLight._m0[_2405].xyz), vec3(_2674, _2675, _2676));
    float _4867 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
    float _2690 = _2666 * _2666;
    float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
    float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0)))) * 5.0);
    float _2703 = 0.959999978542327880859375 - _1056;
    float _2705 = 0.959999978542327880859375 - _1057;
    float _2706 = 0.959999978542327880859375 - _1058;
    float _2713 = 1.0 - _2666;
    float _2724 = (0.5 / (((_2681 * ((_2680 * _2713) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2713) + _2666) * _2680))) * _2680;
    float _4878 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
    uint _2740 = _2405 + 9u;
    float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2445].w)) * _900) * 0.949999988079071044921875);
    float _2752 = _2751 * _2751;
    float _2753 = cbLight._m0[_2445].x + _977;
    float _2754 = cbLight._m0[_2445].y + _978;
    float _2755 = cbLight._m0[_2445].z + _979;
    float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
    float _2760 = _2759 * _2753;
    float _2761 = _2759 * _2754;
    float _2762 = _2759 * _2755;
    float _2763 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2445].xyz));
    float _4889 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2766 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2767 = dot(vec3(_897, _898, _899), vec3(_2760, _2761, _2762));
    float _4900 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2770 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2771 = dot(vec3(cbLight._m0[_2445].xyz), vec3(_2760, _2761, _2762));
    float _4911 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2775 = _2752 * _2752;
    float _2779 = ((_2770 * _2770) * (_2775 + (-1.0))) + 1.0;
    float _2786 = exp2(log2(1.0 - (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) * 5.0);
    float _2793 = 1.0 - _2752;
    float _2803 = (0.5 / (((_2681 * ((_2766 * _2793) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2793) + _2752) * _2766))) * _2766;
    float _4922 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2805 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2775 / ((_2779 * _2779) * 3.141590118408203125));
    float _2815 = (((((_2786 * _2703) + _1059) * cbLight._m0[_2740].x) * _2805) * _2428) + ((((cbLight._m0[_2652].x * _2394) * ((_2702 * _2703) + _1059)) * _2726) * _2441);
    float _2816 = (((((_2786 * _2705) + _1061) * cbLight._m0[_2740].y) * _2805) * _2428) + ((((cbLight._m0[_2652].y * _2396) * ((_2702 * _2705) + _1061)) * _2726) * _2441);
    float _2817 = (((((_2786 * _2706) + _1062) * cbLight._m0[_2740].z) * _2805) * _2428) + ((((cbLight._m0[_2652].z * _2398) * ((_2702 * _2706) + _1062)) * _2726) * _2441);
    float _2873;
    float _2875;
    float _2877;
    if (_2481)
    {
        _2873 = _2815;
        _2875 = _2816;
        _2877 = _2817;
    }
    else
    {
        uint _2879 = _2405 + 2u;
        uint _2883 = _2405 + 10u;
        float _2897 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2879].w)) * _900) * 0.949999988079071044921875);
        float _2898 = _2897 * _2897;
        float _2899 = cbLight._m0[_2879].x + _977;
        float _2900 = cbLight._m0[_2879].y + _978;
        float _2901 = cbLight._m0[_2879].z + _979;
        float _2905 = inversesqrt(dot(vec3(_2899, _2900, _2901), vec3(_2899, _2900, _2901)));
        float _2906 = _2905 * _2899;
        float _2907 = _2905 * _2900;
        float _2908 = _2905 * _2901;
        float _2909 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2879].xyz));
        float _4933 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2913 = dot(vec3(_897, _898, _899), vec3(_2906, _2907, _2908));
        float _4944 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2916 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2917 = dot(vec3(cbLight._m0[_2879].xyz), vec3(_2906, _2907, _2908));
        float _4955 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2921 = _2898 * _2898;
        float _2925 = ((_2916 * _2916) * (_2921 + (-1.0))) + 1.0;
        float _2932 = exp2(log2(1.0 - (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) * 5.0);
        float _2939 = 1.0 - _2898;
        float _2949 = (0.5 / (((_2681 * ((_2912 * _2939) + _2898)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2939) + _2898) * _2912))) * _2912;
        float _4966 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2951 = (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2921 / ((_2925 * _2925) * 3.141590118408203125));
        float _2952 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
        _2873 = (((((_2932 * _2703) + _1059) * cbLight._m0[_2883].x) * _2951) * _2952) + _2815;
        _2875 = (((((_2932 * _2705) + _1061) * cbLight._m0[_2883].y) * _2951) * _2952) + _2816;
        _2877 = (((((_2932 * _2706) + _1062) * cbLight._m0[_2883].z) * _2951) * _2952) + _2817;
    }
    float _2983;
    float _2985;
    float _2987;
    if (_2590)
    {
        _2983 = _2873;
        _2985 = _2875;
        _2987 = _2877;
    }
    else
    {
        uint _2994 = _2405 + 3u;
        uint _2998 = _2405 + 11u;
        float _3012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2994].w)) * _900) * 0.949999988079071044921875);
        float _3013 = _3012 * _3012;
        float _3014 = cbLight._m0[_2994].x + _977;
        float _3015 = cbLight._m0[_2994].y + _978;
        float _3016 = cbLight._m0[_2994].z + _979;
        float _3020 = inversesqrt(dot(vec3(_3014, _3015, _3016), vec3(_3014, _3015, _3016)));
        float _3021 = _3020 * _3014;
        float _3022 = _3020 * _3015;
        float _3023 = _3020 * _3016;
        float _3024 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2994].xyz));
        float _4982 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
        float _3027 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
        float _3028 = dot(vec3(_897, _898, _899), vec3(_3021, _3022, _3023));
        float _4993 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
        float _3031 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
        float _3032 = dot(vec3(cbLight._m0[_2994].xyz), vec3(_3021, _3022, _3023));
        float _5004 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3036 = _3013 * _3013;
        float _3040 = ((_3031 * _3031) * (_3036 + (-1.0))) + 1.0;
        float _3047 = exp2(log2(1.0 - (isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0)))) * 5.0);
        float _3054 = 1.0 - _3013;
        float _3064 = (0.5 / (((_2681 * ((_3027 * _3054) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _3054) + _3013) * _3027))) * _3027;
        float _5015 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3066 = (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_3036 / ((_3040 * _3040) * 3.141590118408203125));
        float _3067 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2983 = (((((_3047 * _2703) + _1059) * cbLight._m0[_2998].x) * _3066) * _3067) + _2873;
        _2985 = (((((_3047 * _2705) + _1061) * cbLight._m0[_2998].y) * _3066) * _3067) + _2875;
        _2987 = (((((_3047 * _2706) + _1062) * cbLight._m0[_2998].z) * _3066) * _3067) + _2877;
    }
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_2403.y == 0u)
    {
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.x;
        uint _3100 = uint((float(_3088.y) * floor(float(uint(cbSceneParam._m0[85u].y * _998) / _3089))) + floor(float(uint(cbSceneParam._m0[85u].x * _997) / _3089)));
        float _3110 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3111 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        uint _3114 = uint(isnan(14.0) ? _3111 : (isnan(_3111) ? 14.0 : min(_3111, 14.0)));
        uvec4 _3119 = texelFetch(g_lightClusterGridBuffer, int(((_3114 << 2u) + (_3100 << 6u)) >> 2u));
        uint _3120 = _3119.x;
        uint _3121 = _3088.z;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((((1u << ((_3121 >> 4u) & 15u)) + 4294967295u) & _3120) == 0u) || ((_3121 & 240u) == 0u))
        {
            _3200 = 0.0;
            _3202 = 0.0;
            _3204 = 0.0;
            _3206 = 0.0;
            _3208 = 0.0;
            _3210 = 0.0;
        }
        else
        {
            float _3201;
            float _3203;
            float _3205;
            float _3207;
            float _3209;
            float _3211;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            uint _3359 = 0u;
            uint _3368;
            bool _3369;
            for (;;)
            {
                _3368 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                _3369 = _3368 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3369)
                {
                    frontier_phi_71_pred = _3358;
                    frontier_phi_71_pred_1 = _3357;
                    frontier_phi_71_pred_2 = _3356;
                    frontier_phi_71_pred_3 = _3355;
                    frontier_phi_71_pred_4 = _3354;
                    frontier_phi_71_pred_5 = _3353;
                }
                else
                {
                    float _3498;
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    uint _3504;
                    _3498 = _3353;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3368;
                    float _3425;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    for (;;)
                    {
                        uint _3508 = uint(findLSB(_3504)) + (_3359 << 5u);
                        uint _3505 = (_3504 + 4294967295u) & _3504;
                        uint _3510 = _3508 * 48u;
                        vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 3u)).x));
                        uint _3530 = (_3508 * 48u) + 4u;
                        vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3530)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3530 + 3u)).x));
                        uint _3549 = (_3508 * 48u) + 8u;
                        vec3 _3560 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3549)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3549 + 2u)).x));
                        float _3564 = _3524.x - _2179;
                        float _3565 = _3524.y - _2180;
                        float _3566 = _3524.z - _2181;
                        float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                        float _3570 = inversesqrt(_3567);
                        float _3571 = _3570 * _3564;
                        float _3572 = _3570 * _3565;
                        float _3573 = _3570 * _3566;
                        float _3574 = dot(vec3(_1016, _1019, _1022), vec3(_3571, _3572, _3573));
                        float _3579 = 1.0 - (_3567 * _3524.w);
                        float _5041 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3580 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                        float _3581 = sqrt(_3567) * _3543.w;
                        float _3584 = 1.39999997615814208984375 / (_3581 + 1.39999997615814208984375);
                        float _3585 = _3584 * _3584;
                        float _3588 = ((1.0 - _3585) * _3574) + _3585;
                        float _3591 = _3581 * _3581;
                        float _3595 = ((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3580) / ((_3591 * 0.699999988079071044921875) + 1.0);
                        float _3599 = (-0.0) - _2179;
                        float _3600 = (-0.0) - _2180;
                        float _3601 = (-0.0) - _2181;
                        float _3605 = inversesqrt(dot(vec3(_3599, _3600, _3601), vec3(_3599, _3600, _3601)));
                        float _3606 = _3605 * _3599;
                        float _3607 = _3605 * _3600;
                        float _3608 = _3605 * _3601;
                        float _3615 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                        float _3616 = 1.0 - _1091;
                        float _3623 = sqrt(1.0 - ((1.0 - (_3616 * _3616)) * (1.0 - (_3615 * _3615))));
                        float _3624 = _3623 * _3623;
                        float _3625 = _3624 * _3624;
                        float _3626 = _3606 + _3571;
                        float _3627 = _3607 + _3572;
                        float _3628 = _3608 + _3573;
                        float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                        float _3636 = dot(vec3(_1016, _1019, _1022), vec3(_3606, _3607, _3608));
                        float _5057 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3639 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                        float _3640 = dot(vec3(_1016, _1019, _1022), vec3(_3632 * _3626, _3632 * _3627, _3632 * _3628));
                        float _5068 = isnan(0.0) ? _3640 : (isnan(_3640) ? 0.0 : max(_3640, 0.0));
                        float _3643 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                        float _3647 = ((_3643 * _3643) * (_3625 + (-1.0))) + 1.0;
                        float _3648 = _3584 * _3624;
                        float _3649 = _3648 * _3648;
                        float _3652 = ((1.0 - _3649) * _3574) + _3649;
                        float _5079 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                        float _3653 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                        float _3654 = 1.0 - _3624;
                        float _3664 = (0.5 / (((_3653 * ((_3639 * _3654) + _3624)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3624) * _3639))) * _3653;
                        float _5090 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                        float _3675 = (((_3625 * 3.1415927410125732421875) * (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0)))) / ((_3647 * _3647) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125))) * _3580;
                        _3428 = (_3595 * _3543.x) + _3501;
                        _3429 = (_3595 * _3543.y) + _3502;
                        _3430 = (_3595 * _3543.z) + _3503;
                        _3425 = (_3675 * _3560.x) + _3498;
                        _3426 = (_3675 * _3560.y) + _3499;
                        _3427 = (_3675 * _3560.z) + _3500;
                        if (_3505 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3498 = _3425;
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3505;
                        }
                    }
                    frontier_phi_71_pred = _3430;
                    frontier_phi_71_pred_1 = _3429;
                    frontier_phi_71_pred_2 = _3428;
                    frontier_phi_71_pred_3 = _3427;
                    frontier_phi_71_pred_4 = _3426;
                    frontier_phi_71_pred_5 = _3425;
                }
                _3211 = frontier_phi_71_pred;
                _3209 = frontier_phi_71_pred_1;
                _3207 = frontier_phi_71_pred_2;
                _3205 = frontier_phi_71_pred_3;
                _3203 = frontier_phi_71_pred_4;
                _3201 = frontier_phi_71_pred_5;
                uint _3360 = _3359 + 1u;
                if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3353 = _3201;
                    _3354 = _3203;
                    _3355 = _3205;
                    _3356 = _3207;
                    _3357 = _3209;
                    _3358 = _3211;
                    _3359 = _3360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3200 = _3201;
            _3202 = _3203;
            _3204 = _3205;
            _3206 = _3207;
            _3208 = _3209;
            _3210 = _3211;
        }
        uvec4 _3214 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3215 = _3214.z;
        uint _3217 = (_3215 >> 8u) & 15u;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        if (((4294967295u << _3217) & _3120) == 0u)
        {
            _3321 = _3200;
            _3323 = _3202;
            _3325 = _3204;
            _3327 = _3206;
            _3329 = _3208;
            _3331 = _3210;
        }
        else
        {
            float _3346 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _3347 = _3346 * _2179;
            float _3348 = _3346 * _2180;
            float _3349 = _3346 * _2181;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3217 < ((_3215 >> 12u) & 15u))
            {
                float _3322;
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3481 = _3200;
                float _3482 = _3202;
                float _3483 = _3204;
                float _3484 = _3206;
                float _3485 = _3208;
                float _3486 = _3210;
                uint _3487 = _3217;
                uint _3496;
                bool _3497;
                for (;;)
                {
                    _3496 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3487 << 2u)) >> 2u)).x;
                    _3497 = _3496 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3497)
                    {
                        frontier_phi_82_pred = _3486;
                        frontier_phi_82_pred_1 = _3485;
                        frontier_phi_82_pred_2 = _3484;
                        frontier_phi_82_pred_3 = _3483;
                        frontier_phi_82_pred_4 = _3482;
                        frontier_phi_82_pred_5 = _3481;
                    }
                    else
                    {
                        float _3689;
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3982;
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3702 = _3481;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        uint _3708 = _3496;
                        uint _3709;
                        vec4 _3734;
                        float _3735;
                        vec4 _3750;
                        vec3 _3762;
                        vec4 _3777;
                        vec4 _3792;
                        float _3838;
                        bool _3839;
                        for (;;)
                        {
                            uint _3719 = ((_3487 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3708));
                            _3709 = (_3708 + 4294967295u) & _3708;
                            uint _3721 = _3719 * 40u;
                            _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            _3735 = _3734.w;
                            uint _3737 = (_3719 * 40u) + 4u;
                            _3750 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3737)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3737 + 3u)).x));
                            uint _3752 = (_3719 * 40u) + 8u;
                            _3762 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3752)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3752 + 2u)).x));
                            uint _3764 = (_3719 * 40u) + 16u;
                            _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            uint _3779 = (_3719 * 40u) + 20u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            uint _3794 = (_3719 * 40u) + 24u;
                            vec4 _3807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3794 + 3u)).x));
                            uint _3813 = (_3719 * 40u) + 28u;
                            vec4 _3826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3813 + 3u)).x));
                            _3838 = fma(_2181, _3826.z, fma(_2180, _3826.y, _3826.x * _2179)) + _3826.w;
                            _3839 = !((fma(_2181, _3807.z, fma(_2180, _3807.y, _3807.x * _2179)) + _3807.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3839)
                            {
                                float _3866 = _3734.x - _2179;
                                float _3867 = _3734.y - _2180;
                                float _3868 = _3734.z - _2181;
                                float _3869 = dot(vec3(_3866, _3867, _3868), vec3(_3866, _3867, _3868));
                                float _3872 = inversesqrt(_3869);
                                float _3873 = _3872 * _3866;
                                float _3874 = _3872 * _3867;
                                float _3875 = _3872 * _3868;
                                float _3879 = 1.0 - (_3869 / (_3735 * _3735));
                                float _5101 = isnan(0.0) ? _3879 : (isnan(_3879) ? 0.0 : max(_3879, 0.0));
                                float _3880 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                                float _3884 = sqrt(_3869) * _3750.w;
                                float _3886 = 1.39999997615814208984375 / (_3884 + 1.39999997615814208984375);
                                float _3887 = _3886 * _3886;
                                float _3890 = ((1.0 - _3887) * dot(vec3(_3873, _3874, _3875), vec3(_1016, _1019, _1022))) + _3887;
                                float _3893 = _3884 * _3884;
                                float _3897 = (fma(_2181, _3777.z, fma(_2180, _3777.y, _3777.x * _2179)) + _3777.w) / _3838;
                                float _3898 = (fma(_2181, _3792.z, fma(_2180, _3792.y, _3792.x * _2179)) + _3792.w) / _3838;
                                float _3902 = 1.0 - dot(vec2(_3897, _3898), vec2(_3897, _3898));
                                float _5117 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                                float _3904 = _3903 * (((isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0))) * _3880) / ((_3893 * 0.699999988079071044921875) + 1.0));
                                float _3916 = exp2(log2(1.0 / ((_3893 * 3.5) + 5.0)) * 0.25);
                                float _3917 = 1.0 - _1091;
                                float _3924 = sqrt(1.0 - ((1.0 - (_3917 * _3917)) * (1.0 - (_3916 * _3916))));
                                float _3925 = _3924 * _3924;
                                float _3926 = _3925 * _3925;
                                float _3927 = _3873 - _3347;
                                float _3928 = _3874 - _3348;
                                float _3929 = _3875 - _3349;
                                float _3933 = inversesqrt(dot(vec3(_3927, _3928, _3929), vec3(_3927, _3928, _3929)));
                                float _3937 = dot(vec3(_1016, _1019, _1022), vec3((-0.0) - _3347, (-0.0) - _3348, (-0.0) - _3349));
                                float _5128 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3940 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
                                float _3941 = dot(vec3(_1016, _1019, _1022), vec3(_3933 * _3927, _3933 * _3928, _3933 * _3929));
                                float _5139 = isnan(0.0) ? _3941 : (isnan(_3941) ? 0.0 : max(_3941, 0.0));
                                float _3944 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
                                float _3948 = ((_3944 * _3944) * (_3926 + (-1.0))) + 1.0;
                                float _3949 = _3886 * _3925;
                                float _3950 = _3949 * _3949;
                                float _3956 = ((1.0 - _3950) * dot(vec3(_1016, _1019, _1022), vec3(_3873, _3874, _3875))) + _3950;
                                float _5150 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3957 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3958 = 1.0 - _3925;
                                float _3968 = (0.5 / (((_3957 * ((_3940 * _3958) + _3925)) + 9.9999999392252902907785028219223e-09) + (((_3957 * _3958) + _3925) * _3940))) * _3957;
                                float _5161 = isnan(0.0) ? _3968 : (isnan(_3968) ? 0.0 : max(_3968, 0.0));
                                float _3978 = (_3903 * _3880) * (((_3926 * 3.1415927410125732421875) * (isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0)))) / ((_3948 * _3948) * ((_3893 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3904 * _3750.z;
                                frontier_phi_88_pred_1 = _3904 * _3750.y;
                                frontier_phi_88_pred_2 = _3904 * _3750.x;
                                frontier_phi_88_pred_3 = _3978 * _3762.z;
                                frontier_phi_88_pred_4 = _3978 * _3762.y;
                                frontier_phi_88_pred_5 = _3978 * _3762.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3987 = frontier_phi_88_pred;
                            _3986 = frontier_phi_88_pred_1;
                            _3985 = frontier_phi_88_pred_2;
                            _3984 = frontier_phi_88_pred_3;
                            _3983 = frontier_phi_88_pred_4;
                            _3982 = frontier_phi_88_pred_5;
                            _3692 = _3985 + _3705;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            _3689 = _3982 + _3702;
                            _3690 = _3983 + _3703;
                            _3691 = _3984 + _3704;
                            if (_3709 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3702 = _3689;
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3709;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3694;
                        frontier_phi_82_pred_1 = _3693;
                        frontier_phi_82_pred_2 = _3692;
                        frontier_phi_82_pred_3 = _3691;
                        frontier_phi_82_pred_4 = _3690;
                        frontier_phi_82_pred_5 = _3689;
                    }
                    _3332 = frontier_phi_82_pred;
                    _3330 = frontier_phi_82_pred_1;
                    _3328 = frontier_phi_82_pred_2;
                    _3326 = frontier_phi_82_pred_3;
                    _3324 = frontier_phi_82_pred_4;
                    _3322 = frontier_phi_82_pred_5;
                    uint _3488 = _3487 + 1u;
                    if (_3488 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3481 = _3322;
                        _3482 = _3324;
                        _3483 = _3326;
                        _3484 = _3328;
                        _3485 = _3330;
                        _3486 = _3332;
                        _3487 = _3488;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3328;
                frontier_phi_63_64_ladder_1 = _3332;
                frontier_phi_63_64_ladder_2 = _3330;
                frontier_phi_63_64_ladder_3 = _3326;
                frontier_phi_63_64_ladder_4 = _3324;
                frontier_phi_63_64_ladder_5 = _3322;
            }
            else
            {
                frontier_phi_63_64_ladder = _3206;
                frontier_phi_63_64_ladder_1 = _3210;
                frontier_phi_63_64_ladder_2 = _3208;
                frontier_phi_63_64_ladder_3 = _3204;
                frontier_phi_63_64_ladder_4 = _3202;
                frontier_phi_63_64_ladder_5 = _3200;
            }
            _3321 = frontier_phi_63_64_ladder_5;
            _3323 = frontier_phi_63_64_ladder_4;
            _3325 = frontier_phi_63_64_ladder_3;
            _3327 = frontier_phi_63_64_ladder;
            _3329 = frontier_phi_63_64_ladder_2;
            _3331 = frontier_phi_63_64_ladder_1;
        }
        float _3336 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _3133 = (_3336 * _3327) + _2645;
        _3135 = (_3336 * _3329) + _2647;
        _3137 = (_3336 * _3331) + _2649;
        _3139 = ((_3321 * _1059) * _3336) + _2983;
        _3141 = ((_3323 * _1061) * _3336) + _2985;
        _3143 = ((_3325 * _1062) * _3336) + _2987;
    }
    else
    {
        _3133 = _2645;
        _3135 = _2647;
        _3137 = _2649;
        _3139 = _2983;
        _3141 = _2985;
        _3143 = _2987;
    }
    float _5177 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5188 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _5199 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _3160 = ((isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0))) * (_3133 + ((isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0))) * _1075))) + ((_3139 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3161 = ((isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0))) * (_3135 + ((isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0))) * _1075))) + ((_3141 + ((isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    float _3162 = ((isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0))) * (_3137 + ((isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0))) * _1075))) + ((_3143 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1913)) * cbPerFrame._m0[3u].x);
    uint _3163 = _286 + 6u;
    float _3171 = _997 / cbSceneParam._m0[86u].x;
    float _3172 = _998 / cbSceneParam._m0[86u].y;
    vec4 _3186 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3188 = _3186.x;
    float _3189 = _3186.y;
    float _3190 = _3186.z;
    float _3191 = _3186.w;
    float _3263;
    float _3265;
    float _3267;
    float _3269;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _3225 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _3226 = _3225 / _919;
        float _3237 = _3226 * _970;
        float _3238 = _971 * _3226;
        float _3239 = (-0.0) - _3238;
        float _3241 = _3226 * _972;
        float _3243 = (cbSceneParam._m0[77u].w * _3239) / _3225;
        float _3244 = _3243 + cbSceneParam._m0[79u].w;
        float _3245 = cbSceneParam._m0[79u].w - _3238;
        float _3251 = sqrt(((_3237 * _3237) + (_3238 * _3238)) + (_3241 * _3241));
        float _3254 = (1.0 - (cbSceneParam._m0[77u].w / _3225)) * _3251;
        float _3259 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3261 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3438;
        if (abs((_3239 - _3243) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3438 = ((((_3244 > 0.0) ? exp2(_3259 * _3244) : (2.0 - exp2(_3261 * _3244))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3254;
        }
        else
        {
            float _3382 = 1.0 / cbSceneParam._m0[80u].x;
            float _3383 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : max(_3244, _3245));
            float _3384 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : min(_3244, _3245));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            _3438 = ((abs(_3251 / _3239) * cbSceneParam._m0[80u].y) * ((((_3393 - _3394) * 2.0) - ((exp2(_3259 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0)))) - exp2(_3259 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))))) * _3382)) - ((exp2(_3261 * _3393) - exp2(_3261 * _3394)) * _3382))) + (_3254 * cbSceneParam._m0[80u].z);
        }
        vec4 _3440 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3171, _3172, 1.0), 0.0);
        float _3449 = exp2((_3438 * (-1.44269502162933349609375)) * (1.0 - _3440.w));
        float _3450 = log2(_3449);
        float _3466 = log2(_3191);
        _3263 = (exp2(_3466 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3450 * cbSceneParam._m0[78u].x)) * _3440.x) / cbSceneParam._m0[78u].x)) + _3188;
        _3265 = (exp2(_3466 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3450 * cbSceneParam._m0[78u].y)) * _3440.y) / cbSceneParam._m0[78u].y)) + _3189;
        _3267 = (exp2(_3466 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3450 * cbSceneParam._m0[78u].z)) * _3440.z) / cbSceneParam._m0[78u].z)) + _3190;
        _3269 = _3449 * _3191;
    }
    else
    {
        _3263 = _3188;
        _3265 = _3189;
        _3267 = _3190;
        _3269 = _3191;
    }
    bool _3476;
    vec4 _3279;
    vec4 _3301;
    float _3303;
    float _3307;
    float _3308;
    float _3309;
    float _3310;
    bool _3320;
    for (;;)
    {
        _3279 = cbMatDynParam._m0[0u];
        float _3281 = roundEven(_3279.y);
        bool _3282 = _3281 == 3.0;
        float _3283 = log2(_3269);
        float _3290 = exp2(_3283 * cbSceneParam._m0[78u].x) * _3160;
        float _3291 = exp2(_3283 * cbSceneParam._m0[78u].y) * _3161;
        float _3292 = exp2(_3283 * cbSceneParam._m0[78u].z) * _3162;
        float _3299 = _986 + (-0.5);
        _3301 = cbMtdParam._m0[1u];
        _3303 = _3301.y * _3299;
        float _3306 = (_3281 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3307 = _3306 * (_3282 ? _3290 : (_3290 + (cbSceneParam._m0[72u].w * _3263)));
        _3308 = _3306 * (_3282 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3265)));
        _3309 = _3306 * (_3282 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3267)));
        _3310 = _3299 * 0.999000012874603271484375;
        _3320 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3320)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3310) < 0.5)
            {
                _3476 = true;
                break;
            }
        }
        uint _3417 = _1035 + uint(_3279.w);
        if ((cbInstanceData._m0[_3417].w < 1.0) && ((cbInstanceData._m0[_3417].w + _3310) < 0.5))
        {
            _3476 = true;
            break;
        }
        if ((_3303 + 1.0) < _3301.x)
        {
            _3476 = true;
            break;
        }
        _3476 = false;
        break;
    }
    float _3680;
    if (_3476)
    {
        discard_state = true;
        _3680 = 0.0;
    }
    else
    {
        _3680 = cbInstanceData._m0[_3163].w;
    }
    SV_Target.x = _3307;
    SV_Target.y = _3308;
    SV_Target.z = _3309;
    SV_Target.w = _3680;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3163].w;
    discard_exit();
}


