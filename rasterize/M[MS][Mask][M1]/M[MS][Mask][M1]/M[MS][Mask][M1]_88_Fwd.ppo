#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1548;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3872 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3883 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3894 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = _348.x * cbMtdParam._m0[11u].x;
    float _354 = _348.y * cbMtdParam._m0[11u].y;
    float _355 = _348.z * cbMtdParam._m0[11u].z;
    vec4 _374 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _393 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _393.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3905 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _464 = (_457 * ((_374.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _465 = (_457 * ((_374.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _466 = (_457 * ((_374.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _393.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3916 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    float _543 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _537;
    float _546 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _538;
    float _549 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _539;
    float _556 = ((_537 - _543) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) + _543;
    float _557 = ((_538 - _546) * (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0)))) + _546;
    float _558 = ((_539 - _549) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) + _549;
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _457) + _638;
    float _648 = ((_619.y - _639) * _457) + _639;
    float _649 = ((_619.z - _640) * _457) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_661.z - _649) * _530) + _649;
    float _677 = ((((_661.x - _647) * _530) + _647) * 2.0) + (-1.0);
    float _678 = ((((_661.y - _648) * _530) + _648) * 2.0) + (-1.0);
    float _679 = dot(vec2(_677, _678), vec2(_677, _678));
    float _3927 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _684 = sqrt(1.0 - (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0))));
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _735 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _738 = ((isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : min(_735, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _747 = (_738 - ((((((_725 - _726) * cbMtdParam._m0[24u].z) + _726) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _738))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3948 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _748 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _755 = (_748 * ((_577.x * cbMtdParam._m0[18u].x) - _556)) + _556;
    float _756 = (_748 * ((_577.y * cbMtdParam._m0[18u].y) - _557)) + _557;
    float _757 = (_748 * ((_577.z * cbMtdParam._m0[18u].z) - _558)) + _558;
    vec4 _769 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _771 = _769.x;
    float _772 = 1.0 - _771;
    float _797 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_771 - _772) * cbMtdParam._m0[24u].w) + _772) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3959 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _798 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _806 = ((((cbMtdParam._m0[10u].x - _755) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _798) + _755;
    float _807 = ((((cbMtdParam._m0[10u].y - _756) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _798) + _756;
    float _808 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _757)) * _798) + _757;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _836 = _834.x;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _836) * _457) + _836;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _854) * _530) + _854;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _871) * cbMtdParam._m0[19u].z) + _871;
    float _877 = _875 - (_875 * _748);
    float _879 = _877 - (_877 * _798);
    float _884 = (((_596.z - _674) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _674;
    float _888 = ((_698.z - _884) * cbMtdParam._m0[19u].w) + _884;
    vec4 _902 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _909 = (_902.x * 2.0) + (-1.0);
    float _910 = (_902.y * 2.0) + (-1.0);
    float _911 = dot(vec2(_909, _910), vec2(_909, _910));
    float _3970 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _919 = (_748 * (_902.z - _888)) + _888;
    float _922 = ((cbMtdParam._m0[23u].x - _919) * _798) + _919;
    vec4 _943 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _949 = (_943.x * 2.0) + (-1.0);
    float _950 = (_943.y * 2.0) + (-1.0);
    float _951 = dot(vec2(_949, _950), vec2(_949, _950));
    float _3981 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _965 = (_677 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_596.x * 2.0) + (-1.0)))) + (((_698.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _966 = (_678 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_596.y * 2.0) + (-1.0)))) + (((_698.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _978 = (((_909 - _965) + (cbMtdParam._m0[21u].x * _965)) * _748) + _965;
    float _979 = (((_910 - _966) + (cbMtdParam._m0[21u].x * _966)) * _748) + _966;
    float _980 = (_748 * (sqrt(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) - _684)) + _684;
    float _991 = (((_949 - _978) + (_978 * cbMtdParam._m0[22u].z)) * _798) + _978;
    float _992 = (((_950 - _979) + (_979 * cbMtdParam._m0[22u].z)) * _798) + _979;
    float _993 = ((sqrt(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) - _980) * _798) + _980;
    float _995 = cbMtdParam._m0[22u].x + _698.w;
    float _998 = fma(_993, _259 * NORMAL.x, fma(_992, _266 * TANGENT.x, (_252 * _244) * _991));
    float _1001 = fma(_993, _259 * NORMAL.y, fma(_992, _266 * TANGENT.y, (_252 * _245) * _991));
    float _1004 = fma(_993, _259 * NORMAL.z, fma(_992, _266 * TANGENT.z, (_252 * _246) * _991));
    float _1008 = inversesqrt(dot(vec3(_998, _1001, _1004), vec3(_998, _1001, _1004)));
    float _1009 = _1008 * _998;
    float _1010 = _1008 * _1001;
    float _1011 = _1008 * _1004;
    float _3992 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _1012 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _4014 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4025 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _4036 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _4047 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _1017 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1031 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1071 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1081 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1071);
    float _1082 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1071);
    float _1083 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1071);
    float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
    float _1088 = _1081 * _1087;
    float _1089 = _1082 * _1087;
    float _1090 = _1083 * _1087;
    float _1096 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1097 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1115 = fma(_1011, cbSceneParam._m0[5u].z, fma(_1010, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1009));
    float _1118 = fma(_1011, cbSceneParam._m0[6u].z, fma(_1010, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1009));
    float _1121 = fma(_1011, cbSceneParam._m0[7u].z, fma(_1010, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1009));
    uint _1135 = (_291 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1141 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * cbInstanceData._m0[_1135].x;
    float _1142 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * cbInstanceData._m0[_1135].y;
    float _1143 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) * cbInstanceData._m0[_1135].z;
    float _4058 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _4069 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _4080 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
    float _1147 = 1.0 - _1017;
    float _1148 = _1144 * _1147;
    float _1149 = _1145 * _1147;
    float _1150 = _1146 * _1147;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1017;
    float _1156 = (_1145 + (-0.039999999105930328369140625)) * _1017;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1017;
    float _1158 = _1155 + 0.039999999105930328369140625;
    float _1160 = _1156 + 0.039999999105930328369140625;
    float _1161 = _1157 + 0.039999999105930328369140625;
    vec4 _1170 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1096, cbSceneParam._m0[86u].y * _1097));
    float _1174 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * TEXCOORD_5.w) * _1170.x;
    float _1175 = dot(vec3(_1009, _1010, _1011), vec3(_1088, _1089, _1090));
    float _1178 = _1175 * 2.0;
    float _1182 = (_1178 * _1009) - _1088;
    float _1183 = (_1178 * _1010) - _1089;
    float _1184 = (_1178 * _1011) - _1090;
    float _1188 = abs(dot(vec3(_1088, _1089, _1090), vec3(_1009, _1010, _1011)));
    float _4091 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
    float _1190 = sqrt(_1012);
    float _1203 = exp2((_1190 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1190 * 3.0));
    float _1209 = (1.0 - _1203) * ((_1190 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1210 = _1203 * _1190;
    float _1238 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1547;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1272 = fma(_1246, cbModelParam._m0[26u].z, fma(_1242, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1238));
        float _1276 = fma(_1246, cbModelParam._m0[27u].z, fma(_1242, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1238));
        float _1280 = fma(_1246, cbModelParam._m0[28u].z, fma(_1242, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1238));
        float _1305 = _1238 + _1009;
        float _1306 = _1242 + _1010;
        float _1307 = _1246 + _1011;
        float _1317 = fma(_1307, cbModelParam._m0[26u].z, fma(_1306, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1305)) - _1272;
        float _1318 = fma(_1307, cbModelParam._m0[27u].z, fma(_1306, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1305)) - _1276;
        float _1319 = fma(_1307, cbModelParam._m0[28u].z, fma(_1306, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1305)) - _1280;
        float _1323 = inversesqrt(dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319)));
        float _1336 = ((_1323 * _1317) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1272 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1323 * _1318) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1276 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1323 * _1319) / cbModelParam._m0[34u].z) + ((((((_1280 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1336, _1337, _1338), 0.0);
        float _1375 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1341.x + (-0.5));
        float _1377 = _1375 * (_1341.y + (-0.5));
        float _1378 = _1375 * (_1341.z + (-0.5));
        float _1385 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1348.x + (-0.5));
        float _1387 = _1385 * (_1348.y + (-0.5));
        float _1388 = _1385 * (_1348.z + (-0.5));
        float _1395 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1355.x + (-0.5));
        float _1397 = _1395 * (_1355.y + (-0.5));
        float _1398 = _1395 * (_1355.z + (-0.5));
        float _1405 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1362.x + (-0.5));
        float _1407 = _1405 * (_1362.y + (-0.5));
        float _1408 = _1405 * (_1362.z + (-0.5));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = _1376 * 0.5;
        float _1413 = _1386 * 0.5;
        float _1414 = _1396 * 0.5;
        float _1415 = dot(vec3(_1412, _1413, _1414), vec3(_1412, _1413, _1414));
        float _1420 = (_1415 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1415);
        float _1429 = (dot(vec3(_1009, _1010, _1011), vec3(_1420 * _1412, _1420 * _1413, _1420 * _1414)) + 1.0) * 0.5;
        float _4117 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1439 = sqrt(((_1413 * _1413) + (_1412 * _1412)) + (_1414 * _1414)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4128 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1441 = _1440 * 2.0;
        float _1445 = (1.0 - _1440) / (_1440 + 1.0);
        float _4139 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _1455 = ((((1.0 - _1446) * (_1441 + 2.0)) * exp2(log2(isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_1441 + 1.0))) + _1446) * _1409;
        float _1456 = _1377 * 0.5;
        float _1457 = _1387 * 0.5;
        float _1458 = _1397 * 0.5;
        float _1459 = dot(vec3(_1456, _1457, _1458), vec3(_1456, _1457, _1458));
        float _1464 = (_1459 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1459);
        float _1472 = (dot(vec3(_1009, _1010, _1011), vec3(_1464 * _1456, _1464 * _1457, _1464 * _1458)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1481 = sqrt(((_1457 * _1457) + (_1456 * _1456)) + (_1458 * _1458)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1483 = _1482 * 2.0;
        float _1487 = (1.0 - _1482) / (_1482 + 1.0);
        float _4172 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1497 = ((((1.0 - _1488) * (_1483 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1483 + 1.0))) + _1488) * _1410;
        float _1498 = _1378 * 0.5;
        float _1499 = _1388 * 0.5;
        float _1500 = _1398 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_1009, _1010, _1011), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4205 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1525 + 1.0))) + _1530) * _1411;
        _1547 = _1378;
        _1549 = _1377;
        _1550 = _1376;
        _1551 = _1388;
        _1552 = _1387;
        _1553 = _1386;
        _1554 = _1398;
        _1555 = _1397;
        _1556 = _1396;
        _1557 = _1411;
        _1558 = _1410;
        _1559 = _1409;
        _1560 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0)));
        _1561 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
        _1562 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
    }
    else
    {
        _1547 = _1548;
        _1549 = _1548;
        _1550 = _1548;
        _1551 = _1548;
        _1552 = _1548;
        _1553 = _1548;
        _1554 = _1548;
        _1555 = _1548;
        _1556 = _1548;
        _1557 = _1548;
        _1558 = _1548;
        _1559 = _1548;
        _1560 = 0.0;
        _1561 = 0.0;
        _1562 = 0.0;
    }
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1586 = fma(_1246, cbModelParam._m0[30u].z, fma(_1242, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1238));
        float _1590 = fma(_1246, cbModelParam._m0[31u].z, fma(_1242, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1238));
        float _1594 = fma(_1246, cbModelParam._m0[32u].z, fma(_1242, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1238));
        float _1617 = _1238 + _1009;
        float _1618 = _1242 + _1010;
        float _1619 = _1246 + _1011;
        float _1629 = fma(_1619, cbModelParam._m0[30u].z, fma(_1618, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1617)) - _1586;
        float _1630 = fma(_1619, cbModelParam._m0[31u].z, fma(_1618, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1617)) - _1590;
        float _1631 = fma(_1619, cbModelParam._m0[32u].z, fma(_1618, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1617)) - _1594;
        float _1635 = inversesqrt(dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631)));
        float _1648 = ((_1635 * _1629) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1586 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1649 = ((_1635 * _1630) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1590 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1650 = ((_1635 * _1631) / cbModelParam._m0[35u].z) + ((((((_1594 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1648, _1649, _1650), 0.0);
        float _1685 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1686 = _1685 * (_1652.x + (-0.5));
        float _1687 = _1685 * (_1652.y + (-0.5));
        float _1688 = _1685 * (_1652.z + (-0.5));
        float _1695 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1696 = _1695 * (_1659.x + (-0.5));
        float _1697 = _1695 * (_1659.y + (-0.5));
        float _1698 = _1695 * (_1659.z + (-0.5));
        float _1705 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1666.x + (-0.5));
        float _1707 = _1705 * (_1666.y + (-0.5));
        float _1708 = _1705 * (_1666.z + (-0.5));
        float _1715 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1673.x + (-0.5));
        float _1717 = _1715 * (_1673.y + (-0.5));
        float _1718 = _1715 * (_1673.z + (-0.5));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
        float _1721 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1722 = _1686 * 0.5;
        float _1723 = _1696 * 0.5;
        float _1724 = _1706 * 0.5;
        float _1725 = dot(vec3(_1722, _1723, _1724), vec3(_1722, _1723, _1724));
        float _1730 = (_1725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1725);
        float _1738 = (dot(vec3(_1009, _1010, _1011), vec3(_1730 * _1722, _1730 * _1723, _1730 * _1724)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1747 = sqrt(((_1723 * _1723) + (_1722 * _1722)) + (_1724 * _1724)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1749 = _1748 * 2.0;
        float _1753 = (1.0 - _1748) / (_1748 + 1.0);
        float _4268 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1754 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1763 = ((((1.0 - _1754) * (_1749 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1749 + 1.0))) + _1754) * _1719;
        float _1764 = _1687 * 0.5;
        float _1765 = _1697 * 0.5;
        float _1766 = _1707 * 0.5;
        float _1767 = dot(vec3(_1764, _1765, _1766), vec3(_1764, _1765, _1766));
        float _1772 = (_1767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1767);
        float _1780 = (dot(vec3(_1009, _1010, _1011), vec3(_1772 * _1764, _1772 * _1765, _1772 * _1766)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1789 = sqrt(((_1765 * _1765) + (_1764 * _1764)) + (_1766 * _1766)) / (_1720 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1791 = _1790 * 2.0;
        float _1795 = (1.0 - _1790) / (_1790 + 1.0);
        float _4301 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1796 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1805 = ((((1.0 - _1796) * (_1791 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1791 + 1.0))) + _1796) * _1720;
        float _1806 = _1688 * 0.5;
        float _1807 = _1698 * 0.5;
        float _1808 = _1708 * 0.5;
        float _1809 = dot(vec3(_1806, _1807, _1808), vec3(_1806, _1807, _1808));
        float _1814 = (_1809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1809);
        float _1822 = (dot(vec3(_1009, _1010, _1011), vec3(_1814 * _1806, _1814 * _1807, _1814 * _1808)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1831 = sqrt(((_1807 * _1807) + (_1806 * _1806)) + (_1808 * _1808)) / (_1721 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1832 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1833 = _1832 * 2.0;
        float _1837 = (1.0 - _1832) / (_1832 + 1.0);
        float _4334 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
        float _1838 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1847 = ((((1.0 - _1838) * (_1833 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1833 + 1.0))) + _1838) * _1721;
        _1855 = _1688;
        _1856 = _1687;
        _1857 = _1686;
        _1858 = _1698;
        _1859 = _1697;
        _1860 = _1696;
        _1861 = _1708;
        _1862 = _1707;
        _1863 = _1706;
        _1864 = _1721;
        _1865 = _1720;
        _1866 = _1719;
        _1867 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)));
        _1868 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
        _1869 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)));
    }
    else
    {
        _1855 = _1548;
        _1856 = _1548;
        _1857 = _1548;
        _1858 = _1548;
        _1859 = _1548;
        _1860 = _1548;
        _1861 = _1548;
        _1862 = _1548;
        _1863 = _1548;
        _1864 = _1548;
        _1865 = _1548;
        _1866 = _1548;
        _1867 = 0.0;
        _1868 = 0.0;
        _1869 = 0.0;
    }
    float _1879 = (cbModelParam._m0[1u].x * (_1867 - _1560)) + _1560;
    float _1880 = (cbModelParam._m0[1u].x * (_1868 - _1561)) + _1561;
    float _1881 = (cbModelParam._m0[1u].x * (_1869 - _1562)) + _1562;
    float _1902 = fma(_1881, cbSceneParam._m0[89u].z, fma(_1880, cbSceneParam._m0[89u].y, _1879 * cbSceneParam._m0[89u].x));
    float _1905 = fma(_1881, cbSceneParam._m0[90u].z, fma(_1880, cbSceneParam._m0[90u].y, _1879 * cbSceneParam._m0[90u].x));
    float _1908 = fma(_1881, cbSceneParam._m0[91u].z, fma(_1880, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1879));
    float _1923 = _1182 * 0.5;
    float _1924 = _1183 * 0.5;
    float _1925 = _1184 * 0.5;
    float _1926 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1857, _1860, _1863, _1866));
    float _1929 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1856, _1859, _1862, _1865));
    float _1932 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1855, _1858, _1861, _1864));
    float _1966;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1939 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1547, _1551, _1554, _1557));
        float _1943 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1549, _1552, _1555, _1558));
        float _1947 = dot(vec4(_1923, _1924, _1925, 1.0), vec4(_1550, _1553, _1556, _1559));
        float _1954 = dot(vec4(cbModelParam._m0[39u]), vec4(_1923, _1924, _1925, 1.0));
        _1966 = dot(vec3(isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1966 = 1.0;
    }
    float _1977;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1968 = dot(vec4(cbModelParam._m0[40u]), vec4(_1923, _1924, _1925, 1.0));
        _1977 = dot(vec3(isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1977 = 1.0;
    }
    float _1981 = (_1977 * cbModelParam._m0[1u].x) + (_1966 * (1.0 - cbModelParam._m0[1u].x));
    float _1991 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1012);
    float _1992 = isnan(_1991) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1991 : min(cbModelParam._m0[25u].z, _1991));
    float _2072;
    float _2074;
    float _2076;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2039 = fma(_1246, cbModelParam._m0[13u].z, fma(_1242, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1238)) + cbModelParam._m0[13u].w;
        float _2043 = fma(_1246, cbModelParam._m0[14u].z, fma(_1242, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1238)) + cbModelParam._m0[14u].w;
        float _2047 = fma(_1246, cbModelParam._m0[15u].z, fma(_1242, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1238)) + cbModelParam._m0[15u].w;
        float _2050 = fma(_1184, cbModelParam._m0[13u].z, fma(_1183, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1182));
        float _2053 = fma(_1184, cbModelParam._m0[14u].z, fma(_1183, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1182));
        float _2056 = fma(_1184, cbModelParam._m0[15u].z, fma(_1183, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1182));
        float _2084;
        if (_2050 > 0.0)
        {
            _2084 = abs((1.0 - _2039) / _2050);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2050 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2039 + 1.0) / _2050);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2084 = frontier_phi_14_12_ladder;
        }
        float _2286;
        if (_2053 > 0.0)
        {
            _2286 = abs((1.0 - _2043) / _2053);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2043 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2286 = frontier_phi_23_19_ladder;
        }
        float _2540;
        if (_2056 > 0.0)
        {
            _2540 = abs((1.0 - _2047) / _2056);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2047 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2540 = frontier_phi_35_30_ladder;
        }
        float _2542 = isnan(_2286) ? _2084 : (isnan(_2084) ? _2286 : min(_2084, _2286));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _2050) + _2039;
        float _2548 = (_2543 * _2053) + _2043;
        float _2549 = (_2543 * _2056) + _2047;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2550;
        float _2554 = _2550 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 > _2554) || ((_2548 < _2552) || ((_2547 < _2552) || (_2547 > _2554))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2549, cbModelParam._m0[9u].z, fma(_2548, cbModelParam._m0[9u].y, _2547 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2549, cbModelParam._m0[10u].z, fma(_2548, cbModelParam._m0[10u].y, _2547 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2549, cbModelParam._m0[11u].z, fma(_2548, cbModelParam._m0[11u].y, _2547 * cbModelParam._m0[11u].x))), _1992);
            frontier_phi_13_35_ladder = _2677.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2677.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2677.x * cbModelParam._m0[1u].y;
        }
        _2072 = frontier_phi_13_35_ladder_2;
        _2074 = frontier_phi_13_35_ladder_1;
        _2076 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1182, _1183, _1184), _1992);
        _2072 = _2060.x * cbModelParam._m0[1u].y;
        _2074 = _2060.y * cbModelParam._m0[1u].y;
        _2076 = _2060.z * cbModelParam._m0[1u].y;
    }
    float _2080 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1012);
    float _2081 = isnan(_2080) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2080 : min(cbModelParam._m0[25u].w, _2080));
    float _2170;
    float _2172;
    float _2174;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2134 = fma(_1246, cbModelParam._m0[21u].z, fma(_1242, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1238)) + cbModelParam._m0[21u].w;
        float _2138 = fma(_1246, cbModelParam._m0[22u].z, fma(_1242, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1238)) + cbModelParam._m0[22u].w;
        float _2142 = fma(_1246, cbModelParam._m0[23u].z, fma(_1242, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1238)) + cbModelParam._m0[23u].w;
        float _2145 = fma(_1184, cbModelParam._m0[21u].z, fma(_1183, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1182));
        float _2148 = fma(_1184, cbModelParam._m0[22u].z, fma(_1183, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1182));
        float _2151 = fma(_1184, cbModelParam._m0[23u].z, fma(_1183, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1182));
        float _2291;
        if (_2145 > 0.0)
        {
            _2291 = abs((1.0 - _2134) / _2145);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2134 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2291 = frontier_phi_25_21_ladder;
        }
        float _2567;
        if (_2148 > 0.0)
        {
            _2567 = abs((1.0 - _2138) / _2148);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2138 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2567 = frontier_phi_37_32_ladder;
        }
        float _2780;
        if (_2151 > 0.0)
        {
            _2780 = abs((1.0 - _2142) / _2151);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2142 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2780 = frontier_phi_46_43_ladder;
        }
        float _2782 = isnan(_2567) ? _2291 : (isnan(_2291) ? _2567 : min(_2291, _2567));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2145) + _2134;
        float _2788 = (_2783 * _2148) + _2138;
        float _2789 = (_2783 * _2151) + _2142;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _2081);
            frontier_phi_22_46_ladder = _2988.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2988.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2988.x * cbModelParam._m0[1u].z;
        }
        _2170 = frontier_phi_22_46_ladder_2;
        _2172 = frontier_phi_22_46_ladder_1;
        _2174 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2154 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1182, _1183, _1184), _2081);
        _2170 = _2154.x * cbModelParam._m0[1u].z;
        _2172 = _2154.y * cbModelParam._m0[1u].z;
        _2174 = _2154.z * cbModelParam._m0[1u].z;
    }
    float _2187 = (((_1209 * _1158) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2170 - _2072)) + _2072);
    float _2189 = (((_1209 * _1160) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2172 - _2074)) + _2074);
    float _2191 = (((_1209 * _1161) + _1210) * _1174) * ((cbModelParam._m0[1u].w * (_2174 - _2076)) + _2076);
    float _2194 = fma(_2191, cbSceneParam._m0[89u].z, fma(_2189, cbSceneParam._m0[89u].y, _2187 * cbSceneParam._m0[89u].x));
    float _2197 = fma(_2191, cbSceneParam._m0[90u].z, fma(_2189, cbSceneParam._m0[90u].y, _2187 * cbSceneParam._m0[90u].x));
    float _2200 = fma(_2191, cbSceneParam._m0[91u].z, fma(_2189, cbSceneParam._m0[91u].y, _2187 * cbSceneParam._m0[91u].x));
    uvec4 _2210 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2212 = _2210.x * 14u;
    uint _2213 = _2212 + 13u;
    float _2220 = _1174 + (-1.0);
    float _2225 = (cbLight._m0[_2213].x * _2220) + 1.0;
    float _2226 = (cbLight._m0[_2213].y * _2220) + 1.0;
    float _2227 = (cbLight._m0[_2213].z * _2220) + 1.0;
    float _2228 = (cbLight._m0[_2213].w * _2220) + 1.0;
    uint _2229 = _2212 + 5u;
    float _2235 = isnan(1.0) ? _2226 : (isnan(_2226) ? 1.0 : min(_2226, 1.0));
    uint _2239 = _2212 + 4u;
    float _2245 = isnan(1.0) ? _2225 : (isnan(_2225) ? 1.0 : min(_2225, 1.0));
    uint _2249 = _2212 | 1u;
    float _2260 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_1009, _1010, _1011));
    float _2263 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_1009, _1010, _1011));
    float _4470 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _4481 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2268 = (isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * 0.3183098733425140380859375;
    float _2270 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * 0.3183098733425140380859375;
    float _2277 = ((cbLight._m0[_2229].x * _2235) * _2270) + ((cbLight._m0[_2239].x * _2245) * _2268);
    float _2278 = ((_2235 * cbLight._m0[_2229].y) * _2270) + ((_2245 * cbLight._m0[_2239].y) * _2268);
    float _2279 = ((_2235 * cbLight._m0[_2229].z) * _2270) + ((_2245 * cbLight._m0[_2239].z) * _2268);
    uvec4 _2283 = floatBitsToUint(cbLight._m0[_2212 + 12u]);
    bool _2285 = _2283.x == 0u;
    float _2296;
    float _2298;
    float _2300;
    if (_2285)
    {
        _2296 = _2277;
        _2298 = _2278;
        _2300 = _2279;
    }
    else
    {
        uint _2304 = _2212 + 6u;
        float _2320 = (dot(vec3(cbLight._m0[_2212 + 2u].xyz), vec3(_1009, _1010, _1011)) * 0.5) + 0.5;
        float _2321 = _2320 * _2320;
        float _4492 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2322 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _2323 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2296 = (((cbLight._m0[_2304].x * 0.3183098733425140380859375) * _2322) * _2323) + _2277;
        _2298 = (((cbLight._m0[_2304].y * 0.3183098733425140380859375) * _2322) * _2323) + _2278;
        _2300 = (((cbLight._m0[_2304].z * 0.3183098733425140380859375) * _2322) * _2323) + _2279;
    }
    bool _2303 = _2283.y == 0u;
    float _2341;
    float _2343;
    float _2345;
    if (_2303)
    {
        _2341 = _2296;
        _2343 = _2298;
        _2345 = _2300;
    }
    else
    {
        uint _2511 = _2212 + 7u;
        float _2527 = (dot(vec3(cbLight._m0[_2212 + 3u].xyz), vec3(_1009, _1010, _1011)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4508 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2530 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2341 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2296;
        _2343 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2298;
        _2345 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2300;
    }
    uint _2348 = _2212 + 8u;
    float _2361 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2212].w)) * _1012) * 0.949999988079071044921875);
    float _2362 = _2361 * _2361;
    float _2363 = cbLight._m0[_2212].x + _1088;
    float _2364 = cbLight._m0[_2212].y + _1089;
    float _2365 = cbLight._m0[_2212].z + _1090;
    float _2369 = inversesqrt(dot(vec3(_2363, _2364, _2365), vec3(_2363, _2364, _2365)));
    float _2370 = _2369 * _2363;
    float _2371 = _2369 * _2364;
    float _2372 = _2369 * _2365;
    float _2373 = dot(vec3(_1009, _1010, _1011), vec3(cbLight._m0[_2212].xyz));
    float _4524 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
    float _2376 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
    float _4535 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
    float _2377 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
    float _2378 = dot(vec3(_1009, _1010, _1011), vec3(_2370, _2371, _2372));
    float _4546 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
    float _2382 = dot(vec3(cbLight._m0[_2212].xyz), vec3(_2370, _2371, _2372));
    float _4557 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2386 = _2362 * _2362;
    float _2390 = ((_2381 * _2381) * (_2386 + (-1.0))) + 1.0;
    float _2398 = exp2(log2(1.0 - (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0)))) * 5.0);
    float _2399 = 0.959999978542327880859375 - _1155;
    float _2401 = 0.959999978542327880859375 - _1156;
    float _2402 = 0.959999978542327880859375 - _1157;
    float _2409 = 1.0 - _2362;
    float _2420 = (0.5 / (((_2377 * ((_2376 * _2409) + _2362)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2409) + _2362) * _2376))) * _2376;
    float _4568 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2386 / ((_2390 * _2390) * 3.141590118408203125));
    uint _2433 = _2212 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _1012) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2249].x + _1088;
    float _2447 = cbLight._m0[_2249].y + _1089;
    float _2448 = cbLight._m0[_2249].z + _1090;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_1009, _1010, _1011), vec3(cbLight._m0[_2249].xyz));
    float _4579 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2460 = dot(vec3(_1009, _1010, _1011), vec3(_2453, _2454, _2455));
    float _4590 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2453, _2454, _2455));
    float _4601 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2486 = 1.0 - _2445;
    float _2496 = (0.5 / (((_2377 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2486) + _2445) * _2459))) * _2459;
    float _4612 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2508 = (((((_2479 * _2399) + _1158) * cbLight._m0[_2433].x) * _2498) * _2235) + (((((_2398 * _2399) + _1158) * cbLight._m0[_2348].x) * _2422) * _2245);
    float _2509 = (((((_2479 * _2401) + _1160) * cbLight._m0[_2433].y) * _2498) * _2235) + (((((_2398 * _2401) + _1160) * cbLight._m0[_2348].y) * _2422) * _2245);
    float _2510 = (((((_2479 * _2402) + _1161) * cbLight._m0[_2433].z) * _2498) * _2235) + (((((_2398 * _2402) + _1161) * cbLight._m0[_2348].z) * _2422) * _2245);
    float _2572;
    float _2574;
    float _2576;
    if (_2285)
    {
        _2572 = _2508;
        _2574 = _2509;
        _2576 = _2510;
    }
    else
    {
        uint _2578 = _2212 + 2u;
        uint _2582 = _2212 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _1012) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _1088;
        float _2599 = cbLight._m0[_2578].y + _1089;
        float _2600 = cbLight._m0[_2578].z + _1090;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_1009, _1010, _1011), vec3(cbLight._m0[_2578].xyz));
        float _4623 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
        float _2612 = dot(vec3(_1009, _1010, _1011), vec3(_2605, _2606, _2607));
        float _4634 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4645 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2377 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2638) + _2597) * _2611))) * _2611;
        float _4656 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2227 : (isnan(_2227) ? 1.0 : min(_2227, 1.0));
        _2572 = (((((_2631 * _2399) + _1158) * cbLight._m0[_2582].x) * _2650) * _2651) + _2508;
        _2574 = (((((_2631 * _2401) + _1160) * cbLight._m0[_2582].y) * _2650) * _2651) + _2509;
        _2576 = (((((_2631 * _2402) + _1161) * cbLight._m0[_2582].z) * _2650) * _2651) + _2510;
    }
    float _2686;
    float _2688;
    float _2690;
    if (_2303)
    {
        _2686 = _2572;
        _2688 = _2574;
        _2690 = _2576;
    }
    else
    {
        uint _2697 = _2212 + 3u;
        uint _2701 = _2212 + 11u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _1012) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _1088;
        float _2718 = cbLight._m0[_2697].y + _1089;
        float _2719 = cbLight._m0[_2697].z + _1090;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_1009, _1010, _1011), vec3(cbLight._m0[_2697].xyz));
        float _4672 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2731 = dot(vec3(_1009, _1010, _1011), vec3(_2724, _2725, _2726));
        float _4683 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4694 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2377 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2377 * _2757) + _2716) * _2730))) * _2730;
        float _4705 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
        _2686 = (((((_2750 * _2399) + _1158) * cbLight._m0[_2701].x) * _2769) * _2770) + _2572;
        _2688 = (((((_2750 * _2401) + _1160) * cbLight._m0[_2701].y) * _2769) * _2770) + _2574;
        _2690 = (((((_2750 * _2402) + _1161) * cbLight._m0[_2701].z) * _2769) * _2770) + _2576;
    }
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_2210.y == 0u)
    {
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2845;
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2845;
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2845;
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.x;
        uint _2872 = uint((float(_2860.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1097) / _2861))) + floor(float(uint(cbSceneParam._m0[85u].x * _1096) / _2861)));
        float _2882 = (log2(_2848 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2883 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        uint _2886 = uint(isnan(14.0) ? _2883 : (isnan(_2883) ? 14.0 : min(_2883, 14.0)));
        uvec4 _2891 = texelFetch(g_lightClusterGridBuffer, int(((_2886 << 2u) + (_2872 << 6u)) >> 2u));
        uint _2892 = _2891.x;
        uint _2893 = _2860.z;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((((1u << ((_2893 >> 4u) & 15u)) + 4294967295u) & _2892) == 0u) || ((_2893 & 240u) == 0u))
        {
            _2993 = 0.0;
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
        }
        else
        {
            float _2994;
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            uint _3144 = 0u;
            uint _3153;
            bool _3154;
            for (;;)
            {
                _3153 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3144 << 2u)) >> 2u)).x;
                _3154 = _3153 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3154)
                {
                    frontier_phi_61_pred = _3138;
                    frontier_phi_61_pred_1 = _3143;
                    frontier_phi_61_pred_2 = _3142;
                    frontier_phi_61_pred_3 = _3141;
                    frontier_phi_61_pred_4 = _3140;
                    frontier_phi_61_pred_5 = _3139;
                }
                else
                {
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    float _3266;
                    float _3267;
                    uint _3268;
                    _3262 = _3138;
                    _3263 = _3139;
                    _3264 = _3140;
                    _3265 = _3141;
                    _3266 = _3142;
                    _3267 = _3143;
                    _3268 = _3153;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    float _3198;
                    float _3199;
                    for (;;)
                    {
                        uint _3272 = uint(findLSB(_3268)) + (_3144 << 5u);
                        uint _3269 = (_3268 + 4294967295u) & _3268;
                        uint _3274 = _3272 * 48u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3294 = (_3272 * 48u) + 4u;
                        vec4 _3307 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 3u)).x));
                        uint _3313 = (_3272 * 48u) + 8u;
                        vec3 _3324 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3313)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3313 + 2u)).x));
                        float _3328 = _3288.x - _2846;
                        float _3329 = _3288.y - _2847;
                        float _3330 = _3288.z - _2848;
                        float _3331 = dot(vec3(_3328, _3329, _3330), vec3(_3328, _3329, _3330));
                        float _3334 = inversesqrt(_3331);
                        float _3335 = _3334 * _3328;
                        float _3336 = _3334 * _3329;
                        float _3337 = _3334 * _3330;
                        float _3338 = dot(vec3(_1115, _1118, _1121), vec3(_3335, _3336, _3337));
                        float _3343 = 1.0 - (_3331 * _3288.w);
                        float _4731 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0));
                        float _3344 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
                        float _3345 = sqrt(_3331) * _3307.w;
                        float _3348 = 1.39999997615814208984375 / (_3345 + 1.39999997615814208984375);
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3338) + _3349;
                        float _3355 = _3345 * _3345;
                        float _3359 = ((isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0))) * _3344) / ((_3355 * 0.699999988079071044921875) + 1.0);
                        float _3363 = (-0.0) - _2846;
                        float _3364 = (-0.0) - _2847;
                        float _3365 = (-0.0) - _2848;
                        float _3369 = inversesqrt(dot(vec3(_3363, _3364, _3365), vec3(_3363, _3364, _3365)));
                        float _3370 = _3369 * _3363;
                        float _3371 = _3369 * _3364;
                        float _3372 = _3369 * _3365;
                        float _3380 = exp2(log2(1.0 / ((_3355 * 3.5) + 5.0)) * 0.25);
                        float _3381 = 1.0 - _1190;
                        float _3388 = sqrt(1.0 - ((1.0 - (_3381 * _3381)) * (1.0 - (_3380 * _3380))));
                        float _3389 = _3388 * _3388;
                        float _3390 = _3389 * _3389;
                        float _3391 = _3370 + _3335;
                        float _3392 = _3371 + _3336;
                        float _3393 = _3372 + _3337;
                        float _3397 = inversesqrt(dot(vec3(_3391, _3392, _3393), vec3(_3391, _3392, _3393)));
                        float _3401 = dot(vec3(_1115, _1118, _1121), vec3(_3370, _3371, _3372));
                        float _4747 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                        float _3404 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                        float _3405 = dot(vec3(_1115, _1118, _1121), vec3(_3397 * _3391, _3397 * _3392, _3397 * _3393));
                        float _4758 = isnan(0.0) ? _3405 : (isnan(_3405) ? 0.0 : max(_3405, 0.0));
                        float _3408 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                        float _3412 = ((_3408 * _3408) * (_3390 + (-1.0))) + 1.0;
                        float _3413 = _3348 * _3389;
                        float _3414 = _3413 * _3413;
                        float _3417 = ((1.0 - _3414) * _3338) + _3414;
                        float _4769 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                        float _3419 = 1.0 - _3389;
                        float _3429 = (0.5 / (((_3418 * ((_3404 * _3419) + _3389)) + 9.9999999392252902907785028219223e-09) + (((_3418 * _3419) + _3389) * _3404))) * _3418;
                        float _4780 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3440 = (((_3390 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3412 * _3412) * ((_3355 * 2.1991131305694580078125) + 3.141590118408203125))) * _3344;
                        _3197 = (_3359 * _3307.x) + _3265;
                        _3198 = (_3359 * _3307.y) + _3266;
                        _3199 = (_3359 * _3307.z) + _3267;
                        _3194 = (_3440 * _3324.x) + _3262;
                        _3195 = (_3440 * _3324.y) + _3263;
                        _3196 = (_3440 * _3324.z) + _3264;
                        if (_3269 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3262 = _3194;
                            _3263 = _3195;
                            _3264 = _3196;
                            _3265 = _3197;
                            _3266 = _3198;
                            _3267 = _3199;
                            _3268 = _3269;
                        }
                    }
                    frontier_phi_61_pred = _3194;
                    frontier_phi_61_pred_1 = _3199;
                    frontier_phi_61_pred_2 = _3198;
                    frontier_phi_61_pred_3 = _3197;
                    frontier_phi_61_pred_4 = _3196;
                    frontier_phi_61_pred_5 = _3195;
                }
                _2994 = frontier_phi_61_pred;
                _3004 = frontier_phi_61_pred_1;
                _3002 = frontier_phi_61_pred_2;
                _3000 = frontier_phi_61_pred_3;
                _2998 = frontier_phi_61_pred_4;
                _2996 = frontier_phi_61_pred_5;
                uint _3145 = _3144 + 1u;
                if (_3145 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3138 = _2994;
                    _3139 = _2996;
                    _3140 = _2998;
                    _3141 = _3000;
                    _3142 = _3002;
                    _3143 = _3004;
                    _3144 = _3145;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2993 = _2994;
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
        }
        uvec4 _3007 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3008 = _3007.z;
        uint _3010 = (_3008 >> 8u) & 15u;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((4294967295u << _3010) & _2892) == 0u)
        {
            _3106 = _2993;
            _3108 = _2995;
            _3110 = _2997;
            _3112 = _2999;
            _3114 = _3001;
            _3116 = _3003;
        }
        else
        {
            float _3131 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
            float _3132 = _3131 * _2846;
            float _3133 = _3131 * _2847;
            float _3134 = _3131 * _2848;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3010 < ((_3008 >> 12u) & 15u))
            {
                float _3107;
                float _3109;
                float _3111;
                float _3113;
                float _3115;
                float _3117;
                float _3245 = _2993;
                float _3246 = _2995;
                float _3247 = _2997;
                float _3248 = _2999;
                float _3249 = _3001;
                float _3250 = _3003;
                uint _3251 = _3010;
                uint _3260;
                bool _3261;
                for (;;)
                {
                    _3260 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3251 << 2u)) >> 2u)).x;
                    _3261 = _3260 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3261)
                    {
                        frontier_phi_67_pred = _3248;
                        frontier_phi_67_pred_1 = _3249;
                        frontier_phi_67_pred_2 = _3250;
                        frontier_phi_67_pred_3 = _3247;
                        frontier_phi_67_pred_4 = _3246;
                        frontier_phi_67_pred_5 = _3245;
                    }
                    else
                    {
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3458 = _3245;
                        float _3459 = _3246;
                        float _3460 = _3247;
                        float _3461 = _3248;
                        float _3462 = _3249;
                        float _3463 = _3250;
                        uint _3464 = _3260;
                        uint _3465;
                        vec4 _3490;
                        float _3491;
                        vec4 _3506;
                        vec3 _3518;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3475 = ((_3251 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3464));
                            _3465 = (_3464 + 4294967295u) & _3464;
                            uint _3477 = _3475 * 40u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            _3491 = _3490.w;
                            uint _3493 = (_3475 * 40u) + 4u;
                            _3506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3493 + 3u)).x));
                            uint _3508 = (_3475 * 40u) + 8u;
                            _3518 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3508)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3508 + 2u)).x));
                            uint _3520 = (_3475 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3475 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3475 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3475 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_2848, _3582.z, fma(_2847, _3582.y, _3582.x * _2846)) + _3582.w;
                            _3595 = !((fma(_2848, _3563.z, fma(_2847, _3563.y, _3563.x * _2846)) + _3563.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3490.x - _2846;
                                float _3623 = _3490.y - _2847;
                                float _3624 = _3490.z - _2848;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3491 * _3491));
                                float _4791 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                                float _3640 = sqrt(_3625) * _3506.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_1115, _1118, _1121))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_2848, _3533.z, fma(_2847, _3533.y, _3533.x * _2846)) + _3533.w) / _3594;
                                float _3654 = (fma(_2848, _3548.z, fma(_2847, _3548.y, _3548.x * _2846)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4807 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _1190;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3132;
                                float _3684 = _3630 - _3133;
                                float _3685 = _3631 - _3134;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_1115, _1118, _1121), vec3((-0.0) - _3132, (-0.0) - _3133, (-0.0) - _3134));
                                float _4818 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                                float _3697 = dot(vec3(_1115, _1118, _1121), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4829 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_1115, _1118, _1121), vec3(_3629, _3630, _3631))) + _3706;
                                float _4840 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4851 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3734 * _3518.x;
                                frontier_phi_73_pred_1 = _3734 * _3518.y;
                                frontier_phi_73_pred_2 = _3660 * _3506.z;
                                frontier_phi_73_pred_3 = _3660 * _3506.y;
                                frontier_phi_73_pred_4 = _3660 * _3506.x;
                                frontier_phi_73_pred_5 = _3734 * _3518.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3738 = frontier_phi_73_pred;
                            _3739 = frontier_phi_73_pred_1;
                            _3743 = frontier_phi_73_pred_2;
                            _3742 = frontier_phi_73_pred_3;
                            _3741 = frontier_phi_73_pred_4;
                            _3740 = frontier_phi_73_pred_5;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3450 = _3743 + _3463;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            _3447 = _3740 + _3460;
                            if (_3465 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3465;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3448;
                        frontier_phi_67_pred_1 = _3449;
                        frontier_phi_67_pred_2 = _3450;
                        frontier_phi_67_pred_3 = _3447;
                        frontier_phi_67_pred_4 = _3446;
                        frontier_phi_67_pred_5 = _3445;
                    }
                    _3113 = frontier_phi_67_pred;
                    _3115 = frontier_phi_67_pred_1;
                    _3117 = frontier_phi_67_pred_2;
                    _3111 = frontier_phi_67_pred_3;
                    _3109 = frontier_phi_67_pred_4;
                    _3107 = frontier_phi_67_pred_5;
                    uint _3252 = _3251 + 1u;
                    if (_3252 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3245 = _3107;
                        _3246 = _3109;
                        _3247 = _3111;
                        _3248 = _3113;
                        _3249 = _3115;
                        _3250 = _3117;
                        _3251 = _3252;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3115;
                frontier_phi_55_56_ladder_1 = _3117;
                frontier_phi_55_56_ladder_2 = _3113;
                frontier_phi_55_56_ladder_3 = _3111;
                frontier_phi_55_56_ladder_4 = _3109;
                frontier_phi_55_56_ladder_5 = _3107;
            }
            else
            {
                frontier_phi_55_56_ladder = _3001;
                frontier_phi_55_56_ladder_1 = _3003;
                frontier_phi_55_56_ladder_2 = _2999;
                frontier_phi_55_56_ladder_3 = _2997;
                frontier_phi_55_56_ladder_4 = _2995;
                frontier_phi_55_56_ladder_5 = _2993;
            }
            _3106 = frontier_phi_55_56_ladder_5;
            _3108 = frontier_phi_55_56_ladder_4;
            _3110 = frontier_phi_55_56_ladder_3;
            _3112 = frontier_phi_55_56_ladder_2;
            _3114 = frontier_phi_55_56_ladder;
            _3116 = frontier_phi_55_56_ladder_1;
        }
        float _3121 = isnan(1.0) ? _1174 : (isnan(_1174) ? 1.0 : min(_1174, 1.0));
        _2905 = (_3121 * _3112) + _2341;
        _2907 = (_3121 * _3114) + _2343;
        _2909 = (_3121 * _3116) + _2345;
        _2911 = ((_3106 * _1158) * _3121) + _2686;
        _2913 = ((_3108 * _1160) * _3121) + _2688;
        _2915 = ((_3110 * _1161) * _3121) + _2690;
    }
    else
    {
        _2905 = _2341;
        _2907 = _2343;
        _2909 = _2345;
        _2911 = _2686;
        _2913 = _2688;
        _2915 = _2690;
    }
    float _4867 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _4878 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _4889 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    uint _2935 = _291 + 6u;
    float _2943 = _1096 / cbSceneParam._m0[86u].x;
    float _2944 = _1097 / cbSceneParam._m0[86u].y;
    vec4 _2958 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2943, _2944, (log2((isnan(cbSceneParam._m0[77u].w) ? _1031 : (isnan(_1031) ? cbSceneParam._m0[77u].w : min(_1031, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2960 = _2958.x;
    float _2961 = _2958.y;
    float _2962 = _2958.z;
    float _2963 = _2958.w;
    float _3056;
    float _3058;
    float _3060;
    float _3062;
    if (_1031 > cbSceneParam._m0[78u].w)
    {
        float _3018 = isnan(_1031) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1031 : min(cbSceneParam._m0[80u].w, _1031));
        float _3019 = _3018 / _1031;
        float _3030 = _3019 * _1081;
        float _3031 = _1082 * _3019;
        float _3032 = (-0.0) - _3031;
        float _3034 = _3019 * _1083;
        float _3036 = (cbSceneParam._m0[77u].w * _3032) / _3018;
        float _3037 = _3036 + cbSceneParam._m0[79u].w;
        float _3038 = cbSceneParam._m0[79u].w - _3031;
        float _3044 = sqrt(((_3030 * _3030) + (_3031 * _3031)) + (_3034 * _3034));
        float _3047 = (1.0 - (cbSceneParam._m0[77u].w / _3018)) * _3044;
        float _3052 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3054 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3207;
        if (abs((_3032 - _3036) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3207 = ((((_3037 > 0.0) ? exp2(_3052 * _3037) : (2.0 - exp2(_3054 * _3037))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3047;
        }
        else
        {
            float _3167 = 1.0 / cbSceneParam._m0[80u].x;
            float _3168 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : max(_3037, _3038));
            float _3169 = isnan(_3038) ? _3037 : (isnan(_3037) ? _3038 : min(_3037, _3038));
            float _3178 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : min(_3168, 0.0));
            float _3179 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : min(_3169, 0.0));
            _3207 = ((abs(_3044 / _3032) * cbSceneParam._m0[80u].y) * ((((_3178 - _3179) * 2.0) - ((exp2(_3052 * (isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0)))) - exp2(_3052 * (isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0))))) * _3167)) - ((exp2(_3054 * _3178) - exp2(_3054 * _3179)) * _3167))) + (_3047 * cbSceneParam._m0[80u].z);
        }
        vec4 _3209 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2943, _2944, 1.0), 0.0);
        float _3218 = exp2((_3207 * (-1.44269502162933349609375)) * (1.0 - _3209.w));
        float _3219 = log2(_3218);
        float _3235 = log2(_2963);
        _3056 = (exp2(_3235 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].x)) * _3209.x) / cbSceneParam._m0[78u].x)) + _2960;
        _3058 = (exp2(_3235 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].y)) * _3209.y) / cbSceneParam._m0[78u].y)) + _2961;
        _3060 = (exp2(_3235 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3219 * cbSceneParam._m0[78u].z)) * _3209.z) / cbSceneParam._m0[78u].z)) + _2962;
        _3062 = _3218 * _2963;
    }
    else
    {
        _3056 = _2960;
        _3058 = _2961;
        _3060 = _2962;
        _3062 = _2963;
    }
    float _3074 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3075 = _3074 == 3.0;
    float _3076 = log2(_3062);
    float _3083 = exp2(_3076 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2905 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1174))) + ((_2911 + ((isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0))) * _1981)) * cbPerFrame._m0[3u].x));
    float _3084 = exp2(_3076 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0))) * (_2907 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1174))) + ((_2913 + ((isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))) * _1981)) * cbPerFrame._m0[3u].x));
    float _3085 = exp2(_3076 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0))) * (_2909 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1174))) + ((_2915 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1981)) * cbPerFrame._m0[3u].x));
    float _3094 = (_3074 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3094 * (_3075 ? _3083 : (_3083 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.y = _3094 * (_3075 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.z = _3094 * (_3075 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.w = cbInstanceData._m0[_2935].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2935].w;
}


