#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1719;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _250 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _251 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _252 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _258 = inversesqrt(dot(vec3(_250, _251, _252), vec3(_250, _251, _252)));
    float _259 = _258 * _250;
    float _260 = _258 * _251;
    float _261 = _258 * _252;
    float _265 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = _265 * NORMAL.x;
    float _267 = _265 * NORMAL.y;
    float _268 = _265 * NORMAL.z;
    float _272 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = _272 * TANGENT.x;
    float _274 = _272 * TANGENT.y;
    float _275 = _272 * TANGENT.z;
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _287 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4041 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _4052 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4063 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    uint _297 = uint(roundEven(NORMAL.w)) * 13u;
    uint _302 = _297 + 1u;
    uint _306 = _297 + 2u;
    float _315 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _316 = _315 * TEXCOORD.z;
    float _317 = _315 * TEXCOORD.w;
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _316) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _317) + cbTextureTilingScale._m0[13u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _359 = _354.x * cbMtdParam._m0[11u].x;
    float _360 = _354.y * cbMtdParam._m0[11u].y;
    float _361 = _354.z * cbMtdParam._m0[11u].z;
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _434 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _436 = _434.x;
    float _448 = dot(vec4(_436, _434.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _465 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _399.x) * 2.0) - ((((_436 - _448) * cbMtdParam._m0[23u].w) + _448) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4074 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _466 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _473 = (_466 * ((_380.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _474 = (_466 * ((_380.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _475 = (_466 * ((_380.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _316) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _317) + cbTextureTilingScale._m0[3u].w));
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _514 = _512.x;
    float _524 = dot(vec4(_514, _512.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _538 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _399.y) * 2.0) - ((((_514 - _524) * cbMtdParam._m0[23u].w) + _524) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4085 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _546 = (_539 * ((_492.x * cbMtdParam._m0[13u].x) - _473)) + _473;
    float _547 = (_539 * ((_492.y * cbMtdParam._m0[13u].y) - _474)) + _474;
    float _548 = (_539 * ((_492.z * cbMtdParam._m0[13u].z) - _475)) + _475;
    vec4 _567 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _316) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _317) + cbTextureTilingScale._m0[24u].w));
    vec4 _584 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _586 = _584.x;
    float _596 = dot(vec4(_586, _584.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _608 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _399.z) * 2.0) - ((((_586 - _596) * cbMtdParam._m0[23u].w) + _596) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4096 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _609 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
    float _616 = (_609 * ((_567.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _617 = (_609 * ((_567.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _618 = (_609 * ((_567.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _622 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _330.x) * _616;
    float _625 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _330.y) * _617;
    float _628 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _330.z) * _618;
    float _635 = ((_616 - _622) * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) + _622;
    float _636 = ((_617 - _625) * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) + _625;
    float _637 = ((_618 - _628) * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) + _628;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _316) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _317) + cbTextureTilingScale._m0[14u].w));
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _316) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _317) + cbTextureTilingScale._m0[20u].w));
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _316) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _317) + cbTextureTilingScale._m0[4u].w));
    vec4 _716 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = _716.x;
    float _719 = _716.y;
    float _720 = _716.z;
    float _727 = ((_699.x - _718) * _466) + _718;
    float _728 = ((_699.y - _719) * _466) + _719;
    float _729 = ((_699.z - _720) * _466) + _720;
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _316) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _317) + cbTextureTilingScale._m0[2u].w));
    float _752 = ((_741.x - _727) * _539) + _727;
    float _753 = ((_741.y - _728) * _539) + _728;
    float _754 = ((_741.z - _729) * _539) + _729;
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _316) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _317) + cbTextureTilingScale._m0[23u].w));
    float _779 = ((_766.z - _754) * _609) + _754;
    float _782 = ((((_766.x - _752) * _609) + _752) * 2.0) + (-1.0);
    float _783 = ((((_766.y - _753) * _609) + _753) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _4107 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0))));
    vec4 _807 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _819 = (_782 + ((((_674.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_807.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _820 = (_783 + ((((_674.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_807.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _823 = fma(_789, _266, fma(_820, _273, _819 * _259));
    float _826 = fma(_789, _267, fma(_820, _274, _819 * _260));
    float _829 = fma(_789, _268, fma(_820, _275, _819 * _261));
    float _833 = inversesqrt(dot(vec3(_823, _826, _829), vec3(_823, _826, _829)));
    vec4 _860 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _316) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _317) + cbTextureTilingScale._m0[11u].w));
    float _862 = _860.x;
    float _863 = 1.0 - _862;
    float _871 = (cbMtdParam._m0[19u].x + dot(vec4(_833 * _823, _833 * _826, _833 * _829, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_862 - _863) * cbMtdParam._m0[24u].z) + _863) * cbMtdParam._m0[21u].z);
    float _4118 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _872 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _874 = (-0.0) - cbMtdParam._m0[24u].x;
    float _876 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _877 = isnan(1.0) ? _876 : (isnan(_876) ? 1.0 : min(_876, 1.0));
    float _884 = _872 - ((_872 * TEXCOORD_8.x) * _877);
    float _885 = _872 - ((_872 * TEXCOORD_8.y) * _877);
    float _886 = _872 - ((_872 * TEXCOORD_8.z) * _877);
    float _893 = (_884 * ((_655.x * cbMtdParam._m0[18u].x) - _635)) + _635;
    float _894 = (_885 * ((_655.y * cbMtdParam._m0[18u].y) - _636)) + _636;
    float _895 = (_886 * ((_655.z * cbMtdParam._m0[18u].z) - _637)) + _637;
    float _910 = sqrt(((cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x)) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x));
    float _911 = _910 * TEXCOORD.z;
    float _912 = _910 * TEXCOORD.w;
    vec4 _924 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _911) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _912) + cbTextureTilingScale._m0[19u].w));
    float _926 = _924.x;
    float _927 = 1.0 - _926;
    float _953 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_926 - _927) * cbMtdParam._m0[24u].w) + _927) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4139 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _954 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _962 = ((((cbMtdParam._m0[10u].x - _893) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _954) + _893;
    float _963 = ((((cbMtdParam._m0[10u].y - _894) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _954) + _894;
    float _964 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _895)) * _954) + _895;
    vec4 _990 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _992 = _990.x;
    float _1010 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _316) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _317) + cbTextureTilingScale._m0[9u].w)).x - _992) * _466) + _992;
    float _1027 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _316) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _317) + cbTextureTilingScale._m0[21u].w)).x - _1010) * _539) + _1010;
    float _1044 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _316) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _317) + cbTextureTilingScale._m0[10u].w)).x - _1027) * _609) + _1027;
    float _1050 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1044) * cbMtdParam._m0[19u].z) + _1044;
    float _1052 = _1050 - (_1050 * _884);
    float _1054 = _1052 - (_1052 * _954);
    float _1061 = (((_674.z - _779) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _779;
    float _1065 = ((_807.z - _1061) * cbMtdParam._m0[19u].w) + _1061;
    vec4 _1081 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _316) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _317) + cbTextureTilingScale._m0[15u].w));
    float _1088 = (_1081.x * 2.0) + (-1.0);
    float _1089 = (_1081.y * 2.0) + (-1.0);
    float _1090 = dot(vec2(_1088, _1089), vec2(_1088, _1089));
    float _4150 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1098 = ((_1081.z - _1065) * _884) + _1065;
    float _1101 = ((cbMtdParam._m0[23u].x - _1098) * _954) + _1098;
    vec4 _1124 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _911) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _912) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1130 = (_1124.x * 2.0) + (-1.0);
    float _1131 = (_1124.y * 2.0) + (-1.0);
    float _1132 = dot(vec2(_1130, _1131), vec2(_1130, _1131));
    float _4161 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _1147 = ((sqrt(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) - _789) * _886) + _789;
    float _1150 = (((_1088 - _819) * _884) + _819) + (cbMtdParam._m0[21u].x * _819);
    float _1151 = (((_1089 - _820) * _885) + _820) + (cbMtdParam._m0[21u].x * _820);
    float _1162 = (((_1130 - _1150) + (_1150 * cbMtdParam._m0[22u].z)) * _954) + _1150;
    float _1163 = (((_1131 - _1151) + (_1151 * cbMtdParam._m0[22u].z)) * _954) + _1151;
    float _1164 = (_954 * (sqrt(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) - _1147)) + _1147;
    float _1166 = cbMtdParam._m0[22u].x + _807.w;
    float _1169 = fma(_1164, _266, fma(_1163, _273, _1162 * _259));
    float _1172 = fma(_1164, _267, fma(_1163, _274, _1162 * _260));
    float _1175 = fma(_1164, _268, fma(_1163, _275, _1162 * _261));
    float _1179 = inversesqrt(dot(vec3(_1169, _1172, _1175), vec3(_1169, _1172, _1175)));
    float _1180 = _1179 * _1169;
    float _1181 = _1179 * _1172;
    float _1182 = _1179 * _1175;
    float _4172 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1183 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _4183 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _4194 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _4205 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _4216 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4227 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1188 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _1202 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1242);
    float _1253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1242);
    float _1254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1242);
    float _1258 = inversesqrt(dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254)));
    float _1259 = _1252 * _1258;
    float _1260 = _1253 * _1258;
    float _1261 = _1254 * _1258;
    float _1267 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1268 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1286 = fma(_1182, cbSceneParam._m0[5u].z, fma(_1181, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1180));
    float _1289 = fma(_1182, cbSceneParam._m0[6u].z, fma(_1181, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1180));
    float _1292 = fma(_1182, cbSceneParam._m0[7u].z, fma(_1181, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1180));
    uint _1306 = (_297 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1312 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0)))) * cbInstanceData._m0[_1306].x;
    float _1313 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1306].y;
    float _1314 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1306].z;
    float _4238 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _1315 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _4249 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _4260 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _1317 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _1318 = 1.0 - _1188;
    float _1319 = _1315 * _1318;
    float _1320 = _1316 * _1318;
    float _1321 = _1317 * _1318;
    float _1326 = (_1315 + (-0.039999999105930328369140625)) * _1188;
    float _1327 = (_1316 + (-0.039999999105930328369140625)) * _1188;
    float _1328 = (_1317 + (-0.039999999105930328369140625)) * _1188;
    float _1329 = _1326 + 0.039999999105930328369140625;
    float _1331 = _1327 + 0.039999999105930328369140625;
    float _1332 = _1328 + 0.039999999105930328369140625;
    vec4 _1341 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1267, cbSceneParam._m0[86u].y * _1268));
    float _1345 = ((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * TEXCOORD_5.w) * _1341.x;
    float _1346 = dot(vec3(_1180, _1181, _1182), vec3(_1259, _1260, _1261));
    float _1349 = _1346 * 2.0;
    float _1353 = (_1349 * _1180) - _1259;
    float _1354 = (_1349 * _1181) - _1260;
    float _1355 = (_1349 * _1182) - _1261;
    float _1359 = abs(dot(vec3(_1259, _1260, _1261), vec3(_1180, _1181, _1182)));
    float _4271 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
    float _1361 = sqrt(_1183);
    float _1374 = exp2((_1361 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1361 * 3.0));
    float _1380 = (1.0 - _1374) * ((_1361 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1381 = _1374 * _1361;
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1718;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1443 = fma(_1417, cbModelParam._m0[26u].z, fma(_1413, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1409));
        float _1447 = fma(_1417, cbModelParam._m0[27u].z, fma(_1413, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1409));
        float _1451 = fma(_1417, cbModelParam._m0[28u].z, fma(_1413, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1409));
        float _1476 = _1409 + _1180;
        float _1477 = _1413 + _1181;
        float _1478 = _1417 + _1182;
        float _1488 = fma(_1478, cbModelParam._m0[26u].z, fma(_1477, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1476)) - _1443;
        float _1489 = fma(_1478, cbModelParam._m0[27u].z, fma(_1477, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1476)) - _1447;
        float _1490 = fma(_1478, cbModelParam._m0[28u].z, fma(_1477, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1476)) - _1451;
        float _1494 = inversesqrt(dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490)));
        float _1507 = ((_1494 * _1488) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1443 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1494 * _1489) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1447 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1509 = ((_1494 * _1490) / cbModelParam._m0[34u].z) + ((((((_1451 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        vec4 _1533 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1507, _1508, _1509), 0.0);
        float _1546 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1512.x + (-0.5));
        float _1548 = _1546 * (_1512.y + (-0.5));
        float _1549 = _1546 * (_1512.z + (-0.5));
        float _1556 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1557 = _1556 * (_1519.x + (-0.5));
        float _1558 = _1556 * (_1519.y + (-0.5));
        float _1559 = _1556 * (_1519.z + (-0.5));
        float _1566 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1567 = _1566 * (_1526.x + (-0.5));
        float _1568 = _1566 * (_1526.y + (-0.5));
        float _1569 = _1566 * (_1526.z + (-0.5));
        float _1576 = exp2((_1533.w + (-0.5)) * 20.0) * 2.0;
        float _1577 = _1576 * (_1533.x + (-0.5));
        float _1578 = _1576 * (_1533.y + (-0.5));
        float _1579 = _1576 * (_1533.z + (-0.5));
        float _1580 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1581 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = _1547 * 0.5;
        float _1584 = _1557 * 0.5;
        float _1585 = _1567 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1600 = (dot(vec3(_1180, _1181, _1182), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1610 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1580 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1612 = _1611 * 2.0;
        float _1616 = (1.0 - _1611) / (_1611 + 1.0);
        float _4319 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1617 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1626 = ((((1.0 - _1617) * (_1612 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1612 + 1.0))) + _1617) * _1580;
        float _1627 = _1548 * 0.5;
        float _1628 = _1558 * 0.5;
        float _1629 = _1568 * 0.5;
        float _1630 = dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629));
        float _1635 = (_1630 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1630);
        float _1643 = (dot(vec3(_1180, _1181, _1182), vec3(_1635 * _1627, _1635 * _1628, _1635 * _1629)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1652 = sqrt(((_1628 * _1628) + (_1627 * _1627)) + (_1629 * _1629)) / (_1581 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1653 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1654 = _1653 * 2.0;
        float _1658 = (1.0 - _1653) / (_1653 + 1.0);
        float _4352 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1668 = ((((1.0 - _1659) * (_1654 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1654 + 1.0))) + _1659) * _1581;
        float _1669 = _1549 * 0.5;
        float _1670 = _1559 * 0.5;
        float _1671 = _1569 * 0.5;
        float _1672 = dot(vec3(_1669, _1670, _1671), vec3(_1669, _1670, _1671));
        float _1677 = (_1672 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1672);
        float _1685 = (dot(vec3(_1180, _1181, _1182), vec3(_1677 * _1669, _1677 * _1670, _1677 * _1671)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1694 = sqrt(((_1670 * _1670) + (_1669 * _1669)) + (_1671 * _1671)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1695 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1696 = _1695 * 2.0;
        float _1700 = (1.0 - _1695) / (_1695 + 1.0);
        float _4385 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1710 = ((((1.0 - _1701) * (_1696 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1696 + 1.0))) + _1701) * _1582;
        _1718 = _1549;
        _1720 = _1548;
        _1721 = _1547;
        _1722 = _1559;
        _1723 = _1558;
        _1724 = _1557;
        _1725 = _1569;
        _1726 = _1568;
        _1727 = _1567;
        _1728 = _1582;
        _1729 = _1581;
        _1730 = _1580;
        _1731 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)));
        _1732 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)));
        _1733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)));
    }
    else
    {
        _1718 = _1719;
        _1720 = _1719;
        _1721 = _1719;
        _1722 = _1719;
        _1723 = _1719;
        _1724 = _1719;
        _1725 = _1719;
        _1726 = _1719;
        _1727 = _1719;
        _1728 = _1719;
        _1729 = _1719;
        _1730 = _1719;
        _1731 = 0.0;
        _1732 = 0.0;
        _1733 = 0.0;
    }
    float _2025;
    float _2026;
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1756 = fma(_1417, cbModelParam._m0[30u].z, fma(_1413, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1409));
        float _1760 = fma(_1417, cbModelParam._m0[31u].z, fma(_1413, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1409));
        float _1764 = fma(_1417, cbModelParam._m0[32u].z, fma(_1413, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1409));
        float _1787 = _1409 + _1180;
        float _1788 = _1413 + _1181;
        float _1789 = _1417 + _1182;
        float _1799 = fma(_1789, cbModelParam._m0[30u].z, fma(_1788, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1787)) - _1756;
        float _1800 = fma(_1789, cbModelParam._m0[31u].z, fma(_1788, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1787)) - _1760;
        float _1801 = fma(_1789, cbModelParam._m0[32u].z, fma(_1788, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1787)) - _1764;
        float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
        float _1818 = ((_1805 * _1799) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1756 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1819 = ((_1805 * _1800) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1760 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1820 = ((_1805 * _1801) / cbModelParam._m0[35u].z) + ((((((_1764 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1822 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1829 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1836 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        vec4 _1843 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1818, _1819, _1820), 0.0);
        float _1855 = exp2((_1822.w + (-0.5)) * 20.0) * 2.0;
        float _1856 = _1855 * (_1822.x + (-0.5));
        float _1857 = _1855 * (_1822.y + (-0.5));
        float _1858 = _1855 * (_1822.z + (-0.5));
        float _1865 = exp2((_1829.w + (-0.5)) * 20.0) * 2.0;
        float _1866 = _1865 * (_1829.x + (-0.5));
        float _1867 = _1865 * (_1829.y + (-0.5));
        float _1868 = _1865 * (_1829.z + (-0.5));
        float _1875 = exp2((_1836.w + (-0.5)) * 20.0) * 2.0;
        float _1876 = _1875 * (_1836.x + (-0.5));
        float _1877 = _1875 * (_1836.y + (-0.5));
        float _1878 = _1875 * (_1836.z + (-0.5));
        float _1885 = exp2((_1843.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1843.x + (-0.5));
        float _1887 = _1885 * (_1843.y + (-0.5));
        float _1888 = _1885 * (_1843.z + (-0.5));
        float _1889 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1890 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1891 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = _1856 * 0.5;
        float _1893 = _1866 * 0.5;
        float _1894 = _1876 * 0.5;
        float _1895 = dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894));
        float _1900 = (_1895 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1895);
        float _1908 = (dot(vec3(_1180, _1181, _1182), vec3(_1900 * _1892, _1900 * _1893, _1900 * _1894)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1917 = sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894)) / (_1889 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1919 = _1918 * 2.0;
        float _1923 = (1.0 - _1918) / (_1918 + 1.0);
        float _4448 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1924 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1933 = ((((1.0 - _1924) * (_1919 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1919 + 1.0))) + _1924) * _1889;
        float _1934 = _1857 * 0.5;
        float _1935 = _1867 * 0.5;
        float _1936 = _1877 * 0.5;
        float _1937 = dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936));
        float _1942 = (_1937 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1937);
        float _1950 = (dot(vec3(_1180, _1181, _1182), vec3(_1942 * _1934, _1942 * _1935, _1942 * _1936)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1959 = sqrt(((_1935 * _1935) + (_1934 * _1934)) + (_1936 * _1936)) / (_1890 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1961 = _1960 * 2.0;
        float _1965 = (1.0 - _1960) / (_1960 + 1.0);
        float _4481 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1975 = ((((1.0 - _1966) * (_1961 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1961 + 1.0))) + _1966) * _1890;
        float _1976 = _1858 * 0.5;
        float _1977 = _1868 * 0.5;
        float _1978 = _1878 * 0.5;
        float _1979 = dot(vec3(_1976, _1977, _1978), vec3(_1976, _1977, _1978));
        float _1984 = (_1979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1979);
        float _1992 = (dot(vec3(_1180, _1181, _1182), vec3(_1984 * _1976, _1984 * _1977, _1984 * _1978)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _2001 = sqrt(((_1977 * _1977) + (_1976 * _1976)) + (_1978 * _1978)) / (_1891 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2003 = _2002 * 2.0;
        float _2007 = (1.0 - _2002) / (_2002 + 1.0);
        float _4514 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        float _2008 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2017 = ((((1.0 - _2008) * (_2003 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2003 + 1.0))) + _2008) * _1891;
        _2025 = _1858;
        _2026 = _1857;
        _2027 = _1856;
        _2028 = _1868;
        _2029 = _1867;
        _2030 = _1866;
        _2031 = _1878;
        _2032 = _1877;
        _2033 = _1876;
        _2034 = _1891;
        _2035 = _1890;
        _2036 = _1889;
        _2037 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)));
        _2038 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0)));
        _2039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)));
    }
    else
    {
        _2025 = _1719;
        _2026 = _1719;
        _2027 = _1719;
        _2028 = _1719;
        _2029 = _1719;
        _2030 = _1719;
        _2031 = _1719;
        _2032 = _1719;
        _2033 = _1719;
        _2034 = _1719;
        _2035 = _1719;
        _2036 = _1719;
        _2037 = 0.0;
        _2038 = 0.0;
        _2039 = 0.0;
    }
    float _2049 = (cbModelParam._m0[1u].x * (_2037 - _1731)) + _1731;
    float _2050 = (cbModelParam._m0[1u].x * (_2038 - _1732)) + _1732;
    float _2051 = (cbModelParam._m0[1u].x * (_2039 - _1733)) + _1733;
    float _2072 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2050, cbSceneParam._m0[89u].y, _2049 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2050, cbSceneParam._m0[90u].y, _2049 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2050, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2049));
    float _2093 = _1353 * 0.5;
    float _2094 = _1354 * 0.5;
    float _2095 = _1355 * 0.5;
    float _2096 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2027, _2030, _2033, _2036));
    float _2099 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2026, _2029, _2032, _2035));
    float _2102 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_2025, _2028, _2031, _2034));
    float _2136;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2109 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1718, _1722, _1725, _1728));
        float _2113 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1720, _1723, _1726, _1729));
        float _2117 = dot(vec4(_2093, _2094, _2095, 1.0), vec4(_1721, _1724, _1727, _1730));
        float _2124 = dot(vec4(cbModelParam._m0[39u]), vec4(_2093, _2094, _2095, 1.0));
        _2136 = dot(vec3(isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0)), isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0)), isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2124) ? 0.0 : (isnan(0.0) ? _2124 : max(0.0, _2124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2136 = 1.0;
    }
    float _2147;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2138 = dot(vec4(cbModelParam._m0[40u]), vec4(_2093, _2094, _2095, 1.0));
        _2147 = dot(vec3(isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0)), isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2138) ? 0.0 : (isnan(0.0) ? _2138 : max(0.0, _2138))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2147 = 1.0;
    }
    float _2151 = (_2147 * cbModelParam._m0[1u].x) + (_2136 * (1.0 - cbModelParam._m0[1u].x));
    float _2161 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1183);
    float _2162 = isnan(_2161) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2161 : min(cbModelParam._m0[25u].z, _2161));
    float _2242;
    float _2244;
    float _2246;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2209 = fma(_1417, cbModelParam._m0[13u].z, fma(_1413, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1409)) + cbModelParam._m0[13u].w;
        float _2213 = fma(_1417, cbModelParam._m0[14u].z, fma(_1413, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1409)) + cbModelParam._m0[14u].w;
        float _2217 = fma(_1417, cbModelParam._m0[15u].z, fma(_1413, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1409)) + cbModelParam._m0[15u].w;
        float _2220 = fma(_1355, cbModelParam._m0[13u].z, fma(_1354, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1353));
        float _2223 = fma(_1355, cbModelParam._m0[14u].z, fma(_1354, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1353));
        float _2226 = fma(_1355, cbModelParam._m0[15u].z, fma(_1354, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1353));
        float _2254;
        if (_2220 > 0.0)
        {
            _2254 = abs((1.0 - _2209) / _2220);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2209 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2254 = frontier_phi_14_12_ladder;
        }
        float _2456;
        if (_2223 > 0.0)
        {
            _2456 = abs((1.0 - _2213) / _2223);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2213 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2456 = frontier_phi_23_19_ladder;
        }
        float _2710;
        if (_2226 > 0.0)
        {
            _2710 = abs((1.0 - _2217) / _2226);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2217 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2710 = frontier_phi_35_30_ladder;
        }
        float _2712 = isnan(_2456) ? _2254 : (isnan(_2254) ? _2456 : min(_2254, _2456));
        float _2713 = isnan(_2710) ? _2712 : (isnan(_2712) ? _2710 : min(_2712, _2710));
        float _2717 = (_2713 * _2220) + _2209;
        float _2718 = (_2713 * _2223) + _2213;
        float _2719 = (_2713 * _2226) + _2217;
        float _2720 = _2713 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2720;
        float _2724 = _2720 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 > _2724) || ((_2718 < _2722) || ((_2717 < _2722) || (_2717 > _2724))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2719, cbModelParam._m0[9u].z, fma(_2718, cbModelParam._m0[9u].y, _2717 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2719, cbModelParam._m0[10u].z, fma(_2718, cbModelParam._m0[10u].y, _2717 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2719, cbModelParam._m0[11u].z, fma(_2718, cbModelParam._m0[11u].y, _2717 * cbModelParam._m0[11u].x))), _2162);
            frontier_phi_13_35_ladder = _2847.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2847.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2847.x * cbModelParam._m0[1u].y;
        }
        _2242 = frontier_phi_13_35_ladder_2;
        _2244 = frontier_phi_13_35_ladder_1;
        _2246 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2230 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1353, _1354, _1355), _2162);
        _2242 = _2230.x * cbModelParam._m0[1u].y;
        _2244 = _2230.y * cbModelParam._m0[1u].y;
        _2246 = _2230.z * cbModelParam._m0[1u].y;
    }
    float _2250 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1183);
    float _2251 = isnan(_2250) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2250 : min(cbModelParam._m0[25u].w, _2250));
    float _2340;
    float _2342;
    float _2344;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2304 = fma(_1417, cbModelParam._m0[21u].z, fma(_1413, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1409)) + cbModelParam._m0[21u].w;
        float _2308 = fma(_1417, cbModelParam._m0[22u].z, fma(_1413, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1409)) + cbModelParam._m0[22u].w;
        float _2312 = fma(_1417, cbModelParam._m0[23u].z, fma(_1413, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1409)) + cbModelParam._m0[23u].w;
        float _2315 = fma(_1355, cbModelParam._m0[21u].z, fma(_1354, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1353));
        float _2318 = fma(_1355, cbModelParam._m0[22u].z, fma(_1354, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1353));
        float _2321 = fma(_1355, cbModelParam._m0[23u].z, fma(_1354, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1353));
        float _2461;
        if (_2315 > 0.0)
        {
            _2461 = abs((1.0 - _2304) / _2315);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2315 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2304 + 1.0) / _2315);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2461 = frontier_phi_25_21_ladder;
        }
        float _2737;
        if (_2318 > 0.0)
        {
            _2737 = abs((1.0 - _2308) / _2318);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2318 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2308 + 1.0) / _2318);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2737 = frontier_phi_37_32_ladder;
        }
        float _2950;
        if (_2321 > 0.0)
        {
            _2950 = abs((1.0 - _2312) / _2321);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2321 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2312 + 1.0) / _2321);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2950 = frontier_phi_46_43_ladder;
        }
        float _2952 = isnan(_2737) ? _2461 : (isnan(_2461) ? _2737 : min(_2461, _2737));
        float _2953 = isnan(_2950) ? _2952 : (isnan(_2952) ? _2950 : min(_2952, _2950));
        float _2957 = (_2953 * _2315) + _2304;
        float _2958 = (_2953 * _2318) + _2308;
        float _2959 = (_2953 * _2321) + _2312;
        float _2960 = _2953 * 9.9999997473787516355514526367188e-05;
        float _2961 = (-1.0) - _2960;
        float _2963 = _2960 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2959 > _2963) || ((_2959 < _2961) || ((_2958 > _2963) || ((_2958 < _2961) || ((_2957 < _2961) || (_2957 > _2963))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2959, cbModelParam._m0[17u].z, fma(_2958, cbModelParam._m0[17u].y, _2957 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2959, cbModelParam._m0[18u].z, fma(_2958, cbModelParam._m0[18u].y, _2957 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2959, cbModelParam._m0[19u].z, fma(_2958, cbModelParam._m0[19u].y, _2957 * cbModelParam._m0[19u].x))), _2251);
            frontier_phi_22_46_ladder = _3158.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3158.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3158.x * cbModelParam._m0[1u].z;
        }
        _2340 = frontier_phi_22_46_ladder_2;
        _2342 = frontier_phi_22_46_ladder_1;
        _2344 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2324 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1353, _1354, _1355), _2251);
        _2340 = _2324.x * cbModelParam._m0[1u].z;
        _2342 = _2324.y * cbModelParam._m0[1u].z;
        _2344 = _2324.z * cbModelParam._m0[1u].z;
    }
    float _2357 = (((_1380 * _1329) + _1381) * _1345) * ((cbModelParam._m0[1u].w * (_2340 - _2242)) + _2242);
    float _2359 = (((_1380 * _1331) + _1381) * _1345) * ((cbModelParam._m0[1u].w * (_2342 - _2244)) + _2244);
    float _2361 = (((_1380 * _1332) + _1381) * _1345) * ((cbModelParam._m0[1u].w * (_2344 - _2246)) + _2246);
    float _2364 = fma(_2361, cbSceneParam._m0[89u].z, fma(_2359, cbSceneParam._m0[89u].y, _2357 * cbSceneParam._m0[89u].x));
    float _2367 = fma(_2361, cbSceneParam._m0[90u].z, fma(_2359, cbSceneParam._m0[90u].y, _2357 * cbSceneParam._m0[90u].x));
    float _2370 = fma(_2361, cbSceneParam._m0[91u].z, fma(_2359, cbSceneParam._m0[91u].y, _2357 * cbSceneParam._m0[91u].x));
    uvec4 _2380 = floatBitsToUint(cbInstanceData._m0[_297 + 5u]);
    uint _2382 = _2380.x * 14u;
    uint _2383 = _2382 + 13u;
    float _2390 = _1345 + (-1.0);
    float _2395 = (cbLight._m0[_2383].x * _2390) + 1.0;
    float _2396 = (cbLight._m0[_2383].y * _2390) + 1.0;
    float _2397 = (cbLight._m0[_2383].z * _2390) + 1.0;
    float _2398 = (cbLight._m0[_2383].w * _2390) + 1.0;
    uint _2399 = _2382 + 5u;
    float _2405 = isnan(1.0) ? _2396 : (isnan(_2396) ? 1.0 : min(_2396, 1.0));
    uint _2409 = _2382 + 4u;
    float _2415 = isnan(1.0) ? _2395 : (isnan(_2395) ? 1.0 : min(_2395, 1.0));
    uint _2419 = _2382 | 1u;
    float _2430 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_1180, _1181, _1182));
    float _2433 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_1180, _1181, _1182));
    float _4650 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _4661 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2438 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2440 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * 0.3183098733425140380859375;
    float _2447 = ((cbLight._m0[_2399].x * _2405) * _2440) + ((cbLight._m0[_2409].x * _2415) * _2438);
    float _2448 = ((_2405 * cbLight._m0[_2399].y) * _2440) + ((_2415 * cbLight._m0[_2409].y) * _2438);
    float _2449 = ((_2405 * cbLight._m0[_2399].z) * _2440) + ((_2415 * cbLight._m0[_2409].z) * _2438);
    uvec4 _2453 = floatBitsToUint(cbLight._m0[_2382 + 12u]);
    bool _2455 = _2453.x == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2455)
    {
        _2466 = _2447;
        _2468 = _2448;
        _2470 = _2449;
    }
    else
    {
        uint _2474 = _2382 + 6u;
        float _2490 = (dot(vec3(cbLight._m0[_2382 + 2u].xyz), vec3(_1180, _1181, _1182)) * 0.5) + 0.5;
        float _2491 = _2490 * _2490;
        float _4672 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        float _2492 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2493 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2466 = (((cbLight._m0[_2474].x * 0.3183098733425140380859375) * _2492) * _2493) + _2447;
        _2468 = (((cbLight._m0[_2474].y * 0.3183098733425140380859375) * _2492) * _2493) + _2448;
        _2470 = (((cbLight._m0[_2474].z * 0.3183098733425140380859375) * _2492) * _2493) + _2449;
    }
    bool _2473 = _2453.y == 0u;
    float _2511;
    float _2513;
    float _2515;
    if (_2473)
    {
        _2511 = _2466;
        _2513 = _2468;
        _2515 = _2470;
    }
    else
    {
        uint _2681 = _2382 + 7u;
        float _2697 = (dot(vec3(cbLight._m0[_2382 + 3u].xyz), vec3(_1180, _1181, _1182)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4688 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
        float _2700 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2511 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2466;
        _2513 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2468;
        _2515 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2470;
    }
    uint _2518 = _2382 + 8u;
    float _2531 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2382].w)) * _1183) * 0.949999988079071044921875);
    float _2532 = _2531 * _2531;
    float _2533 = cbLight._m0[_2382].x + _1259;
    float _2534 = cbLight._m0[_2382].y + _1260;
    float _2535 = cbLight._m0[_2382].z + _1261;
    float _2539 = inversesqrt(dot(vec3(_2533, _2534, _2535), vec3(_2533, _2534, _2535)));
    float _2540 = _2539 * _2533;
    float _2541 = _2539 * _2534;
    float _2542 = _2539 * _2535;
    float _2543 = dot(vec3(_1180, _1181, _1182), vec3(cbLight._m0[_2382].xyz));
    float _4704 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2546 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _4715 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _2547 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2548 = dot(vec3(_1180, _1181, _1182), vec3(_2540, _2541, _2542));
    float _4726 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2551 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2552 = dot(vec3(cbLight._m0[_2382].xyz), vec3(_2540, _2541, _2542));
    float _4737 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
    float _2556 = _2532 * _2532;
    float _2560 = ((_2551 * _2551) * (_2556 + (-1.0))) + 1.0;
    float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
    float _2569 = 0.959999978542327880859375 - _1326;
    float _2571 = 0.959999978542327880859375 - _1327;
    float _2572 = 0.959999978542327880859375 - _1328;
    float _2579 = 1.0 - _2532;
    float _2590 = (0.5 / (((_2547 * ((_2546 * _2579) + _2532)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2579) + _2532) * _2546))) * _2546;
    float _4748 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
    float _2592 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2556 / ((_2560 * _2560) * 3.141590118408203125));
    uint _2603 = _2382 + 9u;
    float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _1183) * 0.949999988079071044921875);
    float _2615 = _2614 * _2614;
    float _2616 = cbLight._m0[_2419].x + _1259;
    float _2617 = cbLight._m0[_2419].y + _1260;
    float _2618 = cbLight._m0[_2419].z + _1261;
    float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
    float _2623 = _2622 * _2616;
    float _2624 = _2622 * _2617;
    float _2625 = _2622 * _2618;
    float _2626 = dot(vec3(_1180, _1181, _1182), vec3(cbLight._m0[_2419].xyz));
    float _4759 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2630 = dot(vec3(_1180, _1181, _1182), vec3(_2623, _2624, _2625));
    float _4770 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2633 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
    float _2634 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2623, _2624, _2625));
    float _4781 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2638 = _2615 * _2615;
    float _2642 = ((_2633 * _2633) * (_2638 + (-1.0))) + 1.0;
    float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
    float _2656 = 1.0 - _2615;
    float _2666 = (0.5 / (((_2547 * ((_2629 * _2656) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2656) + _2615) * _2629))) * _2629;
    float _4792 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2668 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2638 / ((_2642 * _2642) * 3.141590118408203125));
    float _2678 = (((((_2649 * _2569) + _1329) * cbLight._m0[_2603].x) * _2668) * _2405) + (((((_2568 * _2569) + _1329) * cbLight._m0[_2518].x) * _2592) * _2415);
    float _2679 = (((((_2649 * _2571) + _1331) * cbLight._m0[_2603].y) * _2668) * _2405) + (((((_2568 * _2571) + _1331) * cbLight._m0[_2518].y) * _2592) * _2415);
    float _2680 = (((((_2649 * _2572) + _1332) * cbLight._m0[_2603].z) * _2668) * _2405) + (((((_2568 * _2572) + _1332) * cbLight._m0[_2518].z) * _2592) * _2415);
    float _2742;
    float _2744;
    float _2746;
    if (_2455)
    {
        _2742 = _2678;
        _2744 = _2679;
        _2746 = _2680;
    }
    else
    {
        uint _2748 = _2382 + 2u;
        uint _2752 = _2382 + 10u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _1183) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _1259;
        float _2769 = cbLight._m0[_2748].y + _1260;
        float _2770 = cbLight._m0[_2748].z + _1261;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_1180, _1181, _1182), vec3(cbLight._m0[_2748].xyz));
        float _4803 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2782 = dot(vec3(_1180, _1181, _1182), vec3(_2775, _2776, _2777));
        float _4814 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4825 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0)))) * 5.0);
        float _2808 = 1.0 - _2767;
        float _2818 = (0.5 / (((_2547 * ((_2781 * _2808) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2808) + _2767) * _2781))) * _2781;
        float _4836 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0));
        _2742 = (((((_2801 * _2569) + _1329) * cbLight._m0[_2752].x) * _2820) * _2821) + _2678;
        _2744 = (((((_2801 * _2571) + _1331) * cbLight._m0[_2752].y) * _2820) * _2821) + _2679;
        _2746 = (((((_2801 * _2572) + _1332) * cbLight._m0[_2752].z) * _2820) * _2821) + _2680;
    }
    float _2856;
    float _2858;
    float _2860;
    if (_2473)
    {
        _2856 = _2742;
        _2858 = _2744;
        _2860 = _2746;
    }
    else
    {
        uint _2867 = _2382 + 3u;
        uint _2871 = _2382 + 11u;
        float _2885 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2867].w)) * _1183) * 0.949999988079071044921875);
        float _2886 = _2885 * _2885;
        float _2887 = cbLight._m0[_2867].x + _1259;
        float _2888 = cbLight._m0[_2867].y + _1260;
        float _2889 = cbLight._m0[_2867].z + _1261;
        float _2893 = inversesqrt(dot(vec3(_2887, _2888, _2889), vec3(_2887, _2888, _2889)));
        float _2894 = _2893 * _2887;
        float _2895 = _2893 * _2888;
        float _2896 = _2893 * _2889;
        float _2897 = dot(vec3(_1180, _1181, _1182), vec3(cbLight._m0[_2867].xyz));
        float _4852 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2901 = dot(vec3(_1180, _1181, _1182), vec3(_2894, _2895, _2896));
        float _4863 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2904 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
        float _2905 = dot(vec3(cbLight._m0[_2867].xyz), vec3(_2894, _2895, _2896));
        float _4874 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2909 = _2886 * _2886;
        float _2913 = ((_2904 * _2904) * (_2909 + (-1.0))) + 1.0;
        float _2920 = exp2(log2(1.0 - (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) * 5.0);
        float _2927 = 1.0 - _2886;
        float _2937 = (0.5 / (((_2547 * ((_2900 * _2927) + _2886)) + 9.9999999392252902907785028219223e-09) + (((_2547 * _2927) + _2886) * _2900))) * _2900;
        float _4885 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2939 = (isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2909 / ((_2913 * _2913) * 3.141590118408203125));
        float _2940 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
        _2856 = (((((_2920 * _2569) + _1329) * cbLight._m0[_2871].x) * _2939) * _2940) + _2742;
        _2858 = (((((_2920 * _2571) + _1331) * cbLight._m0[_2871].y) * _2939) * _2940) + _2744;
        _2860 = (((((_2920 * _2572) + _1332) * cbLight._m0[_2871].z) * _2939) * _2940) + _2746;
    }
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    float _3083;
    float _3085;
    if (_2380.y == 0u)
    {
        float _3015 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3016 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3015;
        float _3017 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3015;
        float _3018 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3015;
        uvec4 _3030 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3031 = _3030.x;
        uint _3042 = uint((float(_3030.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1268) / _3031))) + floor(float(uint(cbSceneParam._m0[85u].x * _1267) / _3031)));
        float _3052 = (log2(_3018 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3053 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        uint _3056 = uint(isnan(14.0) ? _3053 : (isnan(_3053) ? 14.0 : min(_3053, 14.0)));
        uvec4 _3061 = texelFetch(g_lightClusterGridBuffer, int(((_3056 << 2u) + (_3042 << 6u)) >> 2u));
        uint _3062 = _3061.x;
        uint _3063 = _3030.z;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        if (((((1u << ((_3063 >> 4u) & 15u)) + 4294967295u) & _3062) == 0u) || ((_3063 & 240u) == 0u))
        {
            _3163 = 0.0;
            _3165 = 0.0;
            _3167 = 0.0;
            _3169 = 0.0;
            _3171 = 0.0;
            _3173 = 0.0;
        }
        else
        {
            float _3164;
            float _3166;
            float _3168;
            float _3170;
            float _3172;
            float _3174;
            float _3307 = 0.0;
            float _3308 = 0.0;
            float _3309 = 0.0;
            float _3310 = 0.0;
            float _3311 = 0.0;
            float _3312 = 0.0;
            uint _3313 = 0u;
            uint _3322;
            bool _3323;
            for (;;)
            {
                _3322 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3313 << 2u)) >> 2u)).x;
                _3323 = _3322 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3323)
                {
                    frontier_phi_61_pred = _3307;
                    frontier_phi_61_pred_1 = _3312;
                    frontier_phi_61_pred_2 = _3311;
                    frontier_phi_61_pred_3 = _3310;
                    frontier_phi_61_pred_4 = _3309;
                    frontier_phi_61_pred_5 = _3308;
                }
                else
                {
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    uint _3437;
                    _3431 = _3307;
                    _3432 = _3308;
                    _3433 = _3309;
                    _3434 = _3310;
                    _3435 = _3311;
                    _3436 = _3312;
                    _3437 = _3322;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    for (;;)
                    {
                        uint _3441 = uint(findLSB(_3437)) + (_3313 << 5u);
                        uint _3438 = (_3437 + 4294967295u) & _3437;
                        uint _3443 = _3441 * 48u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3463 = (_3441 * 48u) + 4u;
                        vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3482 = (_3441 * 48u) + 8u;
                        vec3 _3493 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3482)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 2u)).x));
                        float _3497 = _3457.x - _3016;
                        float _3498 = _3457.y - _3017;
                        float _3499 = _3457.z - _3018;
                        float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                        float _3503 = inversesqrt(_3500);
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3507 = dot(vec3(_1286, _1289, _1292), vec3(_3504, _3505, _3506));
                        float _3512 = 1.0 - (_3500 * _3457.w);
                        float _4911 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3513 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                        float _3514 = sqrt(_3500) * _3476.w;
                        float _3517 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3507) + _3518;
                        float _3524 = _3514 * _3514;
                        float _3528 = ((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3513) / ((_3524 * 0.699999988079071044921875) + 1.0);
                        float _3532 = (-0.0) - _3016;
                        float _3533 = (-0.0) - _3017;
                        float _3534 = (-0.0) - _3018;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3549 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                        float _3550 = 1.0 - _1361;
                        float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                        float _3558 = _3557 * _3557;
                        float _3559 = _3558 * _3558;
                        float _3560 = _3539 + _3504;
                        float _3561 = _3540 + _3505;
                        float _3562 = _3541 + _3506;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3570 = dot(vec3(_1286, _1289, _1292), vec3(_3539, _3540, _3541));
                        float _4927 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3574 = dot(vec3(_1286, _1289, _1292), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                        float _4938 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                        float _3582 = _3517 * _3558;
                        float _3583 = _3582 * _3582;
                        float _3586 = ((1.0 - _3583) * _3507) + _3583;
                        float _4949 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3587 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3588 = 1.0 - _3558;
                        float _3598 = (0.5 / (((_3587 * ((_3573 * _3588) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3558) * _3573))) * _3587;
                        float _4960 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3609 = (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0)))) / ((_3581 * _3581) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125))) * _3513;
                        _3366 = (_3528 * _3476.x) + _3434;
                        _3367 = (_3528 * _3476.y) + _3435;
                        _3368 = (_3528 * _3476.z) + _3436;
                        _3363 = (_3609 * _3493.x) + _3431;
                        _3364 = (_3609 * _3493.y) + _3432;
                        _3365 = (_3609 * _3493.z) + _3433;
                        if (_3438 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3431 = _3363;
                            _3432 = _3364;
                            _3433 = _3365;
                            _3434 = _3366;
                            _3435 = _3367;
                            _3436 = _3368;
                            _3437 = _3438;
                        }
                    }
                    frontier_phi_61_pred = _3363;
                    frontier_phi_61_pred_1 = _3368;
                    frontier_phi_61_pred_2 = _3367;
                    frontier_phi_61_pred_3 = _3366;
                    frontier_phi_61_pred_4 = _3365;
                    frontier_phi_61_pred_5 = _3364;
                }
                _3164 = frontier_phi_61_pred;
                _3174 = frontier_phi_61_pred_1;
                _3172 = frontier_phi_61_pred_2;
                _3170 = frontier_phi_61_pred_3;
                _3168 = frontier_phi_61_pred_4;
                _3166 = frontier_phi_61_pred_5;
                uint _3314 = _3313 + 1u;
                if (_3314 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3307 = _3164;
                    _3308 = _3166;
                    _3309 = _3168;
                    _3310 = _3170;
                    _3311 = _3172;
                    _3312 = _3174;
                    _3313 = _3314;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3163 = _3164;
            _3165 = _3166;
            _3167 = _3168;
            _3169 = _3170;
            _3171 = _3172;
            _3173 = _3174;
        }
        uvec4 _3177 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3178 = _3177.z;
        uint _3180 = (_3178 >> 8u) & 15u;
        float _3275;
        float _3277;
        float _3279;
        float _3281;
        float _3283;
        float _3285;
        if (((4294967295u << _3180) & _3062) == 0u)
        {
            _3275 = _3163;
            _3277 = _3165;
            _3279 = _3167;
            _3281 = _3169;
            _3283 = _3171;
            _3285 = _3173;
        }
        else
        {
            float _3300 = inversesqrt(dot(vec3(_3016, _3017, _3018), vec3(_3016, _3017, _3018)));
            float _3301 = _3300 * _3016;
            float _3302 = _3300 * _3017;
            float _3303 = _3300 * _3018;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3180 < ((_3178 >> 12u) & 15u))
            {
                float _3276;
                float _3278;
                float _3280;
                float _3282;
                float _3284;
                float _3286;
                float _3414 = _3163;
                float _3415 = _3165;
                float _3416 = _3167;
                float _3417 = _3169;
                float _3418 = _3171;
                float _3419 = _3173;
                uint _3420 = _3180;
                uint _3429;
                bool _3430;
                for (;;)
                {
                    _3429 = texelFetch(g_lightClassification, int((((_3056 << 5u) + (_3042 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                    _3430 = _3429 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3430)
                    {
                        frontier_phi_67_pred = _3417;
                        frontier_phi_67_pred_1 = _3418;
                        frontier_phi_67_pred_2 = _3419;
                        frontier_phi_67_pred_3 = _3416;
                        frontier_phi_67_pred_4 = _3415;
                        frontier_phi_67_pred_5 = _3414;
                    }
                    else
                    {
                        float _3614;
                        float _3615;
                        float _3616;
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _3912;
                        float _3627 = _3414;
                        float _3628 = _3415;
                        float _3629 = _3416;
                        float _3630 = _3417;
                        float _3631 = _3418;
                        float _3632 = _3419;
                        uint _3633 = _3429;
                        uint _3634;
                        vec4 _3659;
                        float _3660;
                        vec4 _3675;
                        vec3 _3687;
                        vec4 _3702;
                        vec4 _3717;
                        float _3763;
                        bool _3764;
                        for (;;)
                        {
                            uint _3644 = ((_3420 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3633));
                            _3634 = (_3633 + 4294967295u) & _3633;
                            uint _3646 = _3644 * 40u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            _3660 = _3659.w;
                            uint _3662 = (_3644 * 40u) + 4u;
                            _3675 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3662)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3662 + 3u)).x));
                            uint _3677 = (_3644 * 40u) + 8u;
                            _3687 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x));
                            uint _3689 = (_3644 * 40u) + 16u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3644 * 40u) + 20u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3644 * 40u) + 24u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3738 = (_3644 * 40u) + 28u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            _3763 = fma(_3018, _3751.z, fma(_3017, _3751.y, _3751.x * _3016)) + _3751.w;
                            _3764 = !((fma(_3018, _3732.z, fma(_3017, _3732.y, _3732.x * _3016)) + _3732.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3764)
                            {
                                float _3791 = _3659.x - _3016;
                                float _3792 = _3659.y - _3017;
                                float _3793 = _3659.z - _3018;
                                float _3794 = dot(vec3(_3791, _3792, _3793), vec3(_3791, _3792, _3793));
                                float _3797 = inversesqrt(_3794);
                                float _3798 = _3797 * _3791;
                                float _3799 = _3797 * _3792;
                                float _3800 = _3797 * _3793;
                                float _3804 = 1.0 - (_3794 / (_3660 * _3660));
                                float _4971 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                                float _3809 = sqrt(_3794) * _3675.w;
                                float _3811 = 1.39999997615814208984375 / (_3809 + 1.39999997615814208984375);
                                float _3812 = _3811 * _3811;
                                float _3815 = ((1.0 - _3812) * dot(vec3(_3798, _3799, _3800), vec3(_1286, _1289, _1292))) + _3812;
                                float _3818 = _3809 * _3809;
                                float _3822 = (fma(_3018, _3702.z, fma(_3017, _3702.y, _3702.x * _3016)) + _3702.w) / _3763;
                                float _3823 = (fma(_3018, _3717.z, fma(_3017, _3717.y, _3717.x * _3016)) + _3717.w) / _3763;
                                float _3827 = 1.0 - dot(vec2(_3822, _3823), vec2(_3822, _3823));
                                float _4987 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3828 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3829 = _3828 * (((isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0))) * _3805) / ((_3818 * 0.699999988079071044921875) + 1.0));
                                float _3841 = exp2(log2(1.0 / ((_3818 * 3.5) + 5.0)) * 0.25);
                                float _3842 = 1.0 - _1361;
                                float _3849 = sqrt(1.0 - ((1.0 - (_3842 * _3842)) * (1.0 - (_3841 * _3841))));
                                float _3850 = _3849 * _3849;
                                float _3851 = _3850 * _3850;
                                float _3852 = _3798 - _3301;
                                float _3853 = _3799 - _3302;
                                float _3854 = _3800 - _3303;
                                float _3858 = inversesqrt(dot(vec3(_3852, _3853, _3854), vec3(_3852, _3853, _3854)));
                                float _3862 = dot(vec3(_1286, _1289, _1292), vec3((-0.0) - _3301, (-0.0) - _3302, (-0.0) - _3303));
                                float _4998 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3865 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3866 = dot(vec3(_1286, _1289, _1292), vec3(_3858 * _3852, _3858 * _3853, _3858 * _3854));
                                float _5009 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3873 = ((_3869 * _3869) * (_3851 + (-1.0))) + 1.0;
                                float _3874 = _3811 * _3850;
                                float _3875 = _3874 * _3874;
                                float _3881 = ((1.0 - _3875) * dot(vec3(_1286, _1289, _1292), vec3(_3798, _3799, _3800))) + _3875;
                                float _5020 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3882 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3883 = 1.0 - _3850;
                                float _3893 = (0.5 / (((_3882 * ((_3865 * _3883) + _3850)) + 9.9999999392252902907785028219223e-09) + (((_3882 * _3883) + _3850) * _3865))) * _3882;
                                float _5031 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3903 = (_3828 * _3805) * (((_3851 * 3.1415927410125732421875) * (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) / ((_3873 * _3873) * ((_3818 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3903 * _3687.x;
                                frontier_phi_73_pred_1 = _3903 * _3687.y;
                                frontier_phi_73_pred_2 = _3829 * _3675.z;
                                frontier_phi_73_pred_3 = _3829 * _3675.y;
                                frontier_phi_73_pred_4 = _3829 * _3675.x;
                                frontier_phi_73_pred_5 = _3903 * _3687.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3907 = frontier_phi_73_pred;
                            _3908 = frontier_phi_73_pred_1;
                            _3912 = frontier_phi_73_pred_2;
                            _3911 = frontier_phi_73_pred_3;
                            _3910 = frontier_phi_73_pred_4;
                            _3909 = frontier_phi_73_pred_5;
                            _3617 = _3910 + _3630;
                            _3618 = _3911 + _3631;
                            _3619 = _3912 + _3632;
                            _3614 = _3907 + _3627;
                            _3615 = _3908 + _3628;
                            _3616 = _3909 + _3629;
                            if (_3634 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3627 = _3614;
                                _3628 = _3615;
                                _3629 = _3616;
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3634;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3617;
                        frontier_phi_67_pred_1 = _3618;
                        frontier_phi_67_pred_2 = _3619;
                        frontier_phi_67_pred_3 = _3616;
                        frontier_phi_67_pred_4 = _3615;
                        frontier_phi_67_pred_5 = _3614;
                    }
                    _3282 = frontier_phi_67_pred;
                    _3284 = frontier_phi_67_pred_1;
                    _3286 = frontier_phi_67_pred_2;
                    _3280 = frontier_phi_67_pred_3;
                    _3278 = frontier_phi_67_pred_4;
                    _3276 = frontier_phi_67_pred_5;
                    uint _3421 = _3420 + 1u;
                    if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3414 = _3276;
                        _3415 = _3278;
                        _3416 = _3280;
                        _3417 = _3282;
                        _3418 = _3284;
                        _3419 = _3286;
                        _3420 = _3421;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3284;
                frontier_phi_55_56_ladder_1 = _3286;
                frontier_phi_55_56_ladder_2 = _3282;
                frontier_phi_55_56_ladder_3 = _3280;
                frontier_phi_55_56_ladder_4 = _3278;
                frontier_phi_55_56_ladder_5 = _3276;
            }
            else
            {
                frontier_phi_55_56_ladder = _3171;
                frontier_phi_55_56_ladder_1 = _3173;
                frontier_phi_55_56_ladder_2 = _3169;
                frontier_phi_55_56_ladder_3 = _3167;
                frontier_phi_55_56_ladder_4 = _3165;
                frontier_phi_55_56_ladder_5 = _3163;
            }
            _3275 = frontier_phi_55_56_ladder_5;
            _3277 = frontier_phi_55_56_ladder_4;
            _3279 = frontier_phi_55_56_ladder_3;
            _3281 = frontier_phi_55_56_ladder_2;
            _3283 = frontier_phi_55_56_ladder;
            _3285 = frontier_phi_55_56_ladder_1;
        }
        float _3290 = isnan(1.0) ? _1345 : (isnan(_1345) ? 1.0 : min(_1345, 1.0));
        _3075 = (_3290 * _3281) + _2511;
        _3077 = (_3290 * _3283) + _2513;
        _3079 = (_3290 * _3285) + _2515;
        _3081 = ((_3275 * _1329) * _3290) + _2856;
        _3083 = ((_3277 * _1331) * _3290) + _2858;
        _3085 = ((_3279 * _1332) * _3290) + _2860;
    }
    else
    {
        _3075 = _2511;
        _3077 = _2513;
        _3079 = _2515;
        _3081 = _2856;
        _3083 = _2858;
        _3085 = _2860;
    }
    float _5047 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _5058 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _5069 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    uint _3105 = _297 + 6u;
    float _3113 = _1267 / cbSceneParam._m0[86u].x;
    float _3114 = _1268 / cbSceneParam._m0[86u].y;
    vec4 _3128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, (log2((isnan(cbSceneParam._m0[77u].w) ? _1202 : (isnan(_1202) ? cbSceneParam._m0[77u].w : min(_1202, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3130 = _3128.x;
    float _3131 = _3128.y;
    float _3132 = _3128.z;
    float _3133 = _3128.w;
    float _3225;
    float _3227;
    float _3229;
    float _3231;
    if (_1202 > cbSceneParam._m0[78u].w)
    {
        float _3188 = isnan(_1202) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1202 : min(cbSceneParam._m0[80u].w, _1202));
        float _3189 = _3188 / _1202;
        float _3200 = _3189 * _1252;
        float _3201 = _1253 * _3189;
        float _3202 = (-0.0) - _3201;
        float _3203 = _3189 * _1254;
        float _3205 = (cbSceneParam._m0[77u].w * _3202) / _3188;
        float _3206 = _3205 + cbSceneParam._m0[79u].w;
        float _3207 = cbSceneParam._m0[79u].w - _3201;
        float _3213 = sqrt(((_3200 * _3200) + (_3201 * _3201)) + (_3203 * _3203));
        float _3216 = (1.0 - (cbSceneParam._m0[77u].w / _3188)) * _3213;
        float _3221 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3223 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3376;
        if (abs((_3202 - _3205) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3376 = ((((_3206 > 0.0) ? exp2(_3221 * _3206) : (2.0 - exp2(_3223 * _3206))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3216;
        }
        else
        {
            float _3336 = 1.0 / cbSceneParam._m0[80u].x;
            float _3337 = isnan(_3207) ? _3206 : (isnan(_3206) ? _3207 : max(_3206, _3207));
            float _3338 = isnan(_3207) ? _3206 : (isnan(_3206) ? _3207 : min(_3206, _3207));
            float _3347 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : min(_3337, 0.0));
            float _3348 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : min(_3338, 0.0));
            _3376 = ((abs(_3213 / _3202) * cbSceneParam._m0[80u].y) * ((((_3347 - _3348) * 2.0) - ((exp2(_3221 * (isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0)))) - exp2(_3221 * (isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0))))) * _3336)) - ((exp2(_3223 * _3347) - exp2(_3223 * _3348)) * _3336))) + (_3216 * cbSceneParam._m0[80u].z);
        }
        vec4 _3378 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3113, _3114, 1.0), 0.0);
        float _3387 = exp2((_3376 * (-1.44269502162933349609375)) * (1.0 - _3378.w));
        float _3388 = log2(_3387);
        float _3404 = log2(_3133);
        _3225 = (exp2(_3404 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].x)) * _3378.x) / cbSceneParam._m0[78u].x)) + _3130;
        _3227 = (exp2(_3404 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].y)) * _3378.y) / cbSceneParam._m0[78u].y)) + _3131;
        _3229 = (exp2(_3404 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3388 * cbSceneParam._m0[78u].z)) * _3378.z) / cbSceneParam._m0[78u].z)) + _3132;
        _3231 = _3387 * _3133;
    }
    else
    {
        _3225 = _3130;
        _3227 = _3131;
        _3229 = _3132;
        _3231 = _3133;
    }
    float _3243 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3244 = _3243 == 3.0;
    float _3245 = log2(_3231);
    float _3252 = exp2(_3245 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3075 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1345))) + ((_3081 + ((isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0))) * _2151)) * cbPerFrame._m0[3u].x));
    float _3253 = exp2(_3245 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3077 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1345))) + ((_3083 + ((isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0))) * _2151)) * cbPerFrame._m0[3u].x));
    float _3254 = exp2(_3245 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0))) * (_3079 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1345))) + ((_3085 + ((isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0))) * _2151)) * cbPerFrame._m0[3u].x));
    float _3263 = (_3243 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3263 * (_3244 ? _3252 : (_3252 + (cbSceneParam._m0[72u].w * _3225)));
    SV_Target.y = _3263 * (_3244 ? _3253 : (_3253 + (cbSceneParam._m0[72u].w * _3227)));
    SV_Target.z = _3263 * (_3244 ? _3254 : (_3254 + (cbSceneParam._m0[72u].w * _3229)));
    SV_Target.w = cbInstanceData._m0[_3105].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3105].w;
}


