#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1448;
float _3829;
float _3830;
float _3831;
float _3832;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3841 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3852 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _3863 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    uint _285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _290 = _285 + 1u;
    uint _294 = _285 + 2u;
    float _303 = sqrt(((cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x)) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x));
    float _304 = _303 * TEXCOORD.z;
    float _305 = _303 * TEXCOORD.w;
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _304) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _305) + cbTextureTilingScale._m0[13u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _347 = _342.x * cbMtdParam._m0[11u].x;
    float _348 = _342.y * cbMtdParam._m0[11u].y;
    float _349 = _342.z * cbMtdParam._m0[11u].z;
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3874 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _455 = (_448 * ((_368.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _456 = (_448 * ((_368.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _457 = (_448 * ((_368.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    float _461 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _318.x) * _455;
    float _464 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _318.y) * _456;
    float _467 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _318.z) * _457;
    float _474 = ((_455 - _461) * (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) + _461;
    float _475 = ((_456 - _464) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) + _464;
    float _476 = ((_457 - _467) * (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0)))) + _467;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _304) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _305) + cbTextureTilingScale._m0[20u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _304) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _305) + cbTextureTilingScale._m0[4u].w));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _538 = _536.x;
    float _539 = _536.y;
    float _540 = _536.z;
    float _549 = ((_519.z - _540) * _448) + _540;
    float _552 = ((((_519.x - _538) * _448) + _538) * 2.0) + (-1.0);
    float _553 = ((((_519.y - _539) * _448) + _539) * 2.0) + (-1.0);
    float _554 = dot(vec2(_552, _553), vec2(_552, _553));
    float _3885 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _559 = sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _304) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _305) + cbTextureTilingScale._m0[11u].w));
    float _602 = _600.x;
    float _603 = 1.0 - _602;
    float _612 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _615 = ((isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : min(_612, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _624 = (_615 - ((((((_602 - _603) * cbMtdParam._m0[24u].z) + _603) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _615))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3906 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _632 = (_625 * (cbMtdParam._m0[17u].x - _474)) + _474;
    float _633 = (_625 * (cbMtdParam._m0[17u].y - _475)) + _475;
    float _634 = (_625 * (cbMtdParam._m0[17u].z - _476)) + _476;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _304) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _305) + cbTextureTilingScale._m0[19u].w));
    float _648 = _646.x;
    float _649 = 1.0 - _648;
    float _674 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_648 - _649) * cbMtdParam._m0[24u].w) + _649) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3917 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _675 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _683 = ((((cbMtdParam._m0[10u].x - _632) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _675) + _632;
    float _684 = ((((cbMtdParam._m0[10u].y - _633) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _675) + _633;
    float _685 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _634)) * _675) + _634;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _713 = _711.x;
    float _731 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _304) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _305) + cbTextureTilingScale._m0[9u].w)).x - _713) * _448) + _713;
    float _735 = ((_697.x - _731) * cbMtdParam._m0[19u].z) + _731;
    float _737 = _735 - (_735 * _625);
    float _739 = _737 - (_737 * _675);
    float _744 = (((_494.z - _549) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _549;
    float _748 = ((_575.z - _744) * cbMtdParam._m0[19u].w) + _744;
    vec4 _762 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _304) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _305) + cbTextureTilingScale._m0[15u].w));
    float _769 = (_762.x * 2.0) + (-1.0);
    float _770 = (_762.y * 2.0) + (-1.0);
    float _771 = dot(vec2(_769, _770), vec2(_769, _770));
    float _3928 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _779 = (_625 * (_762.z - _748)) + _748;
    float _782 = ((cbMtdParam._m0[23u].x - _779) * _675) + _779;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _304) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _305) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _807 = (_801.x * 2.0) + (-1.0);
    float _808 = (_801.y * 2.0) + (-1.0);
    float _809 = dot(vec2(_807, _808), vec2(_807, _808));
    float _3939 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _823 = (_552 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_494.x * 2.0) + (-1.0)))) + (((_575.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _824 = (_553 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_494.y * 2.0) + (-1.0)))) + (((_575.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _836 = (((_769 - _823) + (cbMtdParam._m0[21u].x * _823)) * _625) + _823;
    float _837 = (((_770 - _824) + (cbMtdParam._m0[21u].x * _824)) * _625) + _824;
    float _838 = (_625 * (sqrt(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) - _559)) + _559;
    float _849 = (((_807 - _836) + (_836 * cbMtdParam._m0[22u].z)) * _675) + _836;
    float _850 = (((_808 - _837) + (_837 * cbMtdParam._m0[22u].z)) * _675) + _837;
    float _851 = ((sqrt(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) - _838) * _675) + _838;
    float _855 = cbMtdParam._m0[22u].x + _575.w;
    float _858 = fma(_851, _253 * NORMAL.x, fma(_850, _260 * TANGENT.x, (_246 * _238) * _849));
    float _861 = fma(_851, _253 * NORMAL.y, fma(_850, _260 * TANGENT.y, (_246 * _239) * _849));
    float _864 = fma(_851, _253 * NORMAL.z, fma(_850, _260 * TANGENT.z, (_246 * _240) * _849));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _3950 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _872 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _3972 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3983 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _3994 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4005 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _877 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _891 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _941 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _931);
    float _942 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _931);
    float _943 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _931);
    float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
    float _948 = _941 * _947;
    float _949 = _942 * _947;
    float _950 = _943 * _947;
    vec4 _955 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _957 = _955.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1129 = sqrt(((_941 * _941) + (_942 * _942)) + (_943 * _943));
        float _1135 = (cbMatDynParam._m0[5u].x * _1129) + cbMatDynParam._m0[5u].y;
        float _4016 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1140 = (cbMatDynParam._m0[5u].z * _1129) + cbMatDynParam._m0[5u].w;
        float _4027 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) - _1136)) + _1136) < ((_957 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _968 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _969 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _987 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _990 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _993 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    uint _1006 = _285 + 9u;
    uint _1007 = _1006 + uint(cbMatDynParam._m0[0u].w);
    float _1013 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * cbInstanceData._m0[_1007].x;
    float _1014 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * cbInstanceData._m0[_1007].y;
    float _1015 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_1007].z;
    float _4038 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _4060 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _1019 = 1.0 - _877;
    float _1020 = _1016 * _1019;
    float _1021 = _1017 * _1019;
    float _1022 = _1018 * _1019;
    float _1027 = (_1016 + (-0.039999999105930328369140625)) * _877;
    float _1028 = (_1017 + (-0.039999999105930328369140625)) * _877;
    float _1029 = (_1018 + (-0.039999999105930328369140625)) * _877;
    float _1030 = _1027 + 0.039999999105930328369140625;
    float _1032 = _1028 + 0.039999999105930328369140625;
    float _1033 = _1029 + 0.039999999105930328369140625;
    vec4 _1042 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _968, cbSceneParam._m0[86u].y * _969));
    float _1046 = ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * TEXCOORD_5.w) * _1042.x;
    float _1047 = dot(vec3(_869, _870, _871), vec3(_948, _949, _950));
    float _1050 = _1047 * 2.0;
    float _1054 = (_1050 * _869) - _948;
    float _1055 = (_1050 * _870) - _949;
    float _1056 = (_1050 * _871) - _950;
    float _1060 = abs(dot(vec3(_948, _949, _950), vec3(_869, _870, _871)));
    float _4071 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1062 = sqrt(_872);
    float _1075 = exp2((_1062 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1062 * 3.0));
    float _1081 = (1.0 - _1075) * ((_1062 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1082 = _1075 * _1062;
    float _1110 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1114 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1118 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1447;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1172 = fma(_1118, cbModelParam._m0[26u].z, fma(_1114, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110));
        float _1176 = fma(_1118, cbModelParam._m0[27u].z, fma(_1114, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110));
        float _1180 = fma(_1118, cbModelParam._m0[28u].z, fma(_1114, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110));
        float _1205 = _1110 + _869;
        float _1206 = _1114 + _870;
        float _1207 = _1118 + _871;
        float _1217 = fma(_1207, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205)) - _1172;
        float _1218 = fma(_1207, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205)) - _1176;
        float _1219 = fma(_1207, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205)) - _1180;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1172 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1176 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[34u].z) + ((((((_1180 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1275 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1241.x + (-0.5));
        float _1277 = _1275 * (_1241.y + (-0.5));
        float _1278 = _1275 * (_1241.z + (-0.5));
        float _1285 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1248.x + (-0.5));
        float _1287 = _1285 * (_1248.y + (-0.5));
        float _1288 = _1285 * (_1248.z + (-0.5));
        float _1295 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1255.x + (-0.5));
        float _1297 = _1295 * (_1255.y + (-0.5));
        float _1298 = _1295 * (_1255.z + (-0.5));
        float _1305 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1262.x + (-0.5));
        float _1307 = _1305 * (_1262.y + (-0.5));
        float _1308 = _1305 * (_1262.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1329 = (dot(vec3(_869, _870, _871), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4097 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1339 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4108 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4119 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_1341 + 1.0))) + _1346) * _1309;
        float _1356 = _1277 * 0.5;
        float _1357 = _1287 * 0.5;
        float _1358 = _1297 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_869, _870, _871), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4130 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4141 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4152 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_1383 + 1.0))) + _1388) * _1310;
        float _1398 = _1278 * 0.5;
        float _1399 = _1288 * 0.5;
        float _1400 = _1298 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_869, _870, _871), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4163 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4174 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4185 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_1425 + 1.0))) + _1430) * _1311;
        _1447 = _1278;
        _1449 = _1277;
        _1450 = _1276;
        _1451 = _1288;
        _1452 = _1287;
        _1453 = _1286;
        _1454 = _1298;
        _1455 = _1297;
        _1456 = _1296;
        _1457 = _1311;
        _1458 = _1310;
        _1459 = _1309;
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1448;
        _1449 = _1448;
        _1450 = _1448;
        _1451 = _1448;
        _1452 = _1448;
        _1453 = _1448;
        _1454 = _1448;
        _1455 = _1448;
        _1456 = _1448;
        _1457 = _1448;
        _1458 = _1448;
        _1459 = _1448;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1490 = fma(_1118, cbModelParam._m0[30u].z, fma(_1114, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1110));
        float _1494 = fma(_1118, cbModelParam._m0[31u].z, fma(_1114, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1110));
        float _1498 = fma(_1118, cbModelParam._m0[32u].z, fma(_1114, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1110));
        float _1521 = _1110 + _869;
        float _1522 = _1114 + _870;
        float _1523 = _1118 + _871;
        float _1533 = fma(_1523, cbModelParam._m0[30u].z, fma(_1522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1521)) - _1490;
        float _1534 = fma(_1523, cbModelParam._m0[31u].z, fma(_1522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1521)) - _1494;
        float _1535 = fma(_1523, cbModelParam._m0[32u].z, fma(_1522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1521)) - _1498;
        float _1539 = inversesqrt(dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535)));
        float _1552 = ((_1539 * _1533) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1490 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1553 = ((_1539 * _1534) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1494 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1554 = ((_1539 * _1535) / cbModelParam._m0[35u].z) + ((((((_1498 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1552, _1553, _1554), 0.0);
        float _1589 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1556.x + (-0.5));
        float _1591 = _1589 * (_1556.y + (-0.5));
        float _1592 = _1589 * (_1556.z + (-0.5));
        float _1599 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1563.x + (-0.5));
        float _1601 = _1599 * (_1563.y + (-0.5));
        float _1602 = _1599 * (_1563.z + (-0.5));
        float _1609 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1570.x + (-0.5));
        float _1611 = _1609 * (_1570.y + (-0.5));
        float _1612 = _1609 * (_1570.z + (-0.5));
        float _1619 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1577.x + (-0.5));
        float _1621 = _1619 * (_1577.y + (-0.5));
        float _1622 = _1619 * (_1577.z + (-0.5));
        float _1623 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1624 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1625 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1626 = _1590 * 0.5;
        float _1627 = _1600 * 0.5;
        float _1628 = _1610 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_869, _870, _871), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4226 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1623 + 9.9999997473787516355514526367188e-06);
        float _4237 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4248 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_1653 + 1.0))) + _1658) * _1623;
        float _1668 = _1591 * 0.5;
        float _1669 = _1601 * 0.5;
        float _1670 = _1611 * 0.5;
        float _1671 = dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670));
        float _1676 = (_1671 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1671);
        float _1684 = (dot(vec3(_869, _870, _871), vec3(_1676 * _1668, _1676 * _1669, _1676 * _1670)) + 1.0) * 0.5;
        float _4259 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1693 = sqrt(((_1669 * _1669) + (_1668 * _1668)) + (_1670 * _1670)) / (_1624 + 9.9999997473787516355514526367188e-06);
        float _4270 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1695 = _1694 * 2.0;
        float _1699 = (1.0 - _1694) / (_1694 + 1.0);
        float _4281 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1709 = ((((1.0 - _1700) * (_1695 + 2.0)) * exp2(log2(isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_1695 + 1.0))) + _1700) * _1624;
        float _1710 = _1592 * 0.5;
        float _1711 = _1602 * 0.5;
        float _1712 = _1612 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_869, _870, _871), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4292 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1625 + 9.9999997473787516355514526367188e-06);
        float _4303 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4314 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_1737 + 1.0))) + _1742) * _1625;
        _1759 = _1592;
        _1760 = _1591;
        _1761 = _1590;
        _1762 = _1602;
        _1763 = _1601;
        _1764 = _1600;
        _1765 = _1612;
        _1766 = _1611;
        _1767 = _1610;
        _1768 = _1625;
        _1769 = _1624;
        _1770 = _1623;
        _1771 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
        _1772 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)));
        _1773 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
    }
    else
    {
        _1759 = _1448;
        _1760 = _1448;
        _1761 = _1448;
        _1762 = _1448;
        _1763 = _1448;
        _1764 = _1448;
        _1765 = _1448;
        _1766 = _1448;
        _1767 = _1448;
        _1768 = _1448;
        _1769 = _1448;
        _1770 = _1448;
        _1771 = 0.0;
        _1772 = 0.0;
        _1773 = 0.0;
    }
    float _1783 = (cbModelParam._m0[1u].x * (_1771 - _1460)) + _1460;
    float _1784 = (cbModelParam._m0[1u].x * (_1772 - _1461)) + _1461;
    float _1785 = (cbModelParam._m0[1u].x * (_1773 - _1462)) + _1462;
    float _1806 = fma(_1785, cbSceneParam._m0[89u].z, fma(_1784, cbSceneParam._m0[89u].y, _1783 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1785, cbSceneParam._m0[90u].z, fma(_1784, cbSceneParam._m0[90u].y, _1783 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1785, cbSceneParam._m0[91u].z, fma(_1784, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1783));
    float _1827 = _1054 * 0.5;
    float _1828 = _1055 * 0.5;
    float _1829 = _1056 * 0.5;
    float _1830 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1761, _1764, _1767, _1770));
    float _1833 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1760, _1763, _1766, _1769));
    float _1836 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1759, _1762, _1765, _1768));
    float _1870;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1843 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1447, _1451, _1454, _1457));
        float _1847 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1851 = dot(vec4(_1827, _1828, _1829, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1858 = dot(vec4(cbModelParam._m0[39u]), vec4(_1827, _1828, _1829, 1.0));
        _1870 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1858) ? 0.0 : (isnan(0.0) ? _1858 : max(0.0, _1858))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1870 = 1.0;
    }
    float _1881;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1872 = dot(vec4(cbModelParam._m0[40u]), vec4(_1827, _1828, _1829, 1.0));
        _1881 = dot(vec3(isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)), isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1872) ? 0.0 : (isnan(0.0) ? _1872 : max(0.0, _1872))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1881 = 1.0;
    }
    float _1885 = (_1881 * cbModelParam._m0[1u].x) + (_1870 * (1.0 - cbModelParam._m0[1u].x));
    float _1895 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _872);
    float _1896 = isnan(_1895) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1895 : min(cbModelParam._m0[25u].z, _1895));
    float _1977;
    float _1979;
    float _1981;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1944 = fma(_1118, cbModelParam._m0[13u].z, fma(_1114, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110)) + cbModelParam._m0[13u].w;
        float _1948 = fma(_1118, cbModelParam._m0[14u].z, fma(_1114, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110)) + cbModelParam._m0[14u].w;
        float _1952 = fma(_1118, cbModelParam._m0[15u].z, fma(_1114, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110)) + cbModelParam._m0[15u].w;
        float _1955 = fma(_1056, cbModelParam._m0[13u].z, fma(_1055, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1054));
        float _1958 = fma(_1056, cbModelParam._m0[14u].z, fma(_1055, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1054));
        float _1961 = fma(_1056, cbModelParam._m0[15u].z, fma(_1055, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1054));
        float _1989;
        if (_1955 > 0.0)
        {
            _1989 = abs((1.0 - _1944) / _1955);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1955 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1944 + 1.0) / _1955);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1989 = frontier_phi_17_15_ladder;
        }
        float _2192;
        if (_1958 > 0.0)
        {
            _2192 = abs((1.0 - _1948) / _1958);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1948 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2192 = frontier_phi_26_22_ladder;
        }
        float _2446;
        if (_1961 > 0.0)
        {
            _2446 = abs((1.0 - _1952) / _1961);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1952 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2446 = frontier_phi_38_33_ladder;
        }
        float _2448 = isnan(_2192) ? _1989 : (isnan(_1989) ? _2192 : min(_1989, _2192));
        float _2449 = isnan(_2446) ? _2448 : (isnan(_2448) ? _2446 : min(_2448, _2446));
        float _2453 = (_2449 * _1955) + _1944;
        float _2454 = (_2449 * _1958) + _1948;
        float _2455 = (_2449 * _1961) + _1952;
        float _2456 = _2449 * 9.9999997473787516355514526367188e-05;
        float _2458 = (-1.0) - _2456;
        float _2460 = _2456 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2455 > _2460) || ((_2455 < _2458) || ((_2454 > _2460) || ((_2454 < _2458) || ((_2453 < _2458) || (_2453 > _2460))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2455, cbModelParam._m0[9u].z, fma(_2454, cbModelParam._m0[9u].y, _2453 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2455, cbModelParam._m0[10u].z, fma(_2454, cbModelParam._m0[10u].y, _2453 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2455, cbModelParam._m0[11u].z, fma(_2454, cbModelParam._m0[11u].y, _2453 * cbModelParam._m0[11u].x))), _1896);
            frontier_phi_16_38_ladder = _2583.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2583.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2583.x * cbModelParam._m0[1u].y;
        }
        _1977 = frontier_phi_16_38_ladder_2;
        _1979 = frontier_phi_16_38_ladder_1;
        _1981 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1054, _1055, _1056), _1896);
        _1977 = _1965.x * cbModelParam._m0[1u].y;
        _1979 = _1965.y * cbModelParam._m0[1u].y;
        _1981 = _1965.z * cbModelParam._m0[1u].y;
    }
    float _1985 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _872);
    float _1986 = isnan(_1985) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1985 : min(cbModelParam._m0[25u].w, _1985));
    float _2076;
    float _2078;
    float _2080;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2040 = fma(_1118, cbModelParam._m0[21u].z, fma(_1114, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110)) + cbModelParam._m0[21u].w;
        float _2044 = fma(_1118, cbModelParam._m0[22u].z, fma(_1114, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110)) + cbModelParam._m0[22u].w;
        float _2048 = fma(_1118, cbModelParam._m0[23u].z, fma(_1114, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110)) + cbModelParam._m0[23u].w;
        float _2051 = fma(_1056, cbModelParam._m0[21u].z, fma(_1055, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1054));
        float _2054 = fma(_1056, cbModelParam._m0[22u].z, fma(_1055, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1054));
        float _2057 = fma(_1056, cbModelParam._m0[23u].z, fma(_1055, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1054));
        float _2197;
        if (_2051 > 0.0)
        {
            _2197 = abs((1.0 - _2040) / _2051);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2040 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2197 = frontier_phi_28_24_ladder;
        }
        float _2473;
        if (_2054 > 0.0)
        {
            _2473 = abs((1.0 - _2044) / _2054);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2054 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2044 + 1.0) / _2054);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2473 = frontier_phi_40_35_ladder;
        }
        float _2686;
        if (_2057 > 0.0)
        {
            _2686 = abs((1.0 - _2048) / _2057);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2057 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2048 + 1.0) / _2057);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2686 = frontier_phi_49_46_ladder;
        }
        float _2688 = isnan(_2473) ? _2197 : (isnan(_2197) ? _2473 : min(_2197, _2473));
        float _2689 = isnan(_2686) ? _2688 : (isnan(_2688) ? _2686 : min(_2688, _2686));
        float _2693 = (_2689 * _2051) + _2040;
        float _2694 = (_2689 * _2054) + _2044;
        float _2695 = (_2689 * _2057) + _2048;
        float _2696 = _2689 * 9.9999997473787516355514526367188e-05;
        float _2697 = (-1.0) - _2696;
        float _2699 = _2696 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2695 > _2699) || ((_2695 < _2697) || ((_2694 > _2699) || ((_2694 < _2697) || ((_2693 < _2697) || (_2693 > _2699))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2894 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2695, cbModelParam._m0[17u].z, fma(_2694, cbModelParam._m0[17u].y, _2693 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2695, cbModelParam._m0[18u].z, fma(_2694, cbModelParam._m0[18u].y, _2693 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2695, cbModelParam._m0[19u].z, fma(_2694, cbModelParam._m0[19u].y, _2693 * cbModelParam._m0[19u].x))), _1986);
            frontier_phi_25_49_ladder = _2894.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2894.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2894.x * cbModelParam._m0[1u].z;
        }
        _2076 = frontier_phi_25_49_ladder_2;
        _2078 = frontier_phi_25_49_ladder_1;
        _2080 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1054, _1055, _1056), _1986);
        _2076 = _2060.x * cbModelParam._m0[1u].z;
        _2078 = _2060.y * cbModelParam._m0[1u].z;
        _2080 = _2060.z * cbModelParam._m0[1u].z;
    }
    float _2093 = (((_1081 * _1030) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2076 - _1977)) + _1977);
    float _2095 = (((_1081 * _1032) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2078 - _1979)) + _1979);
    float _2097 = (((_1081 * _1033) + _1082) * _1046) * ((cbModelParam._m0[1u].w * (_2080 - _1981)) + _1981);
    float _2100 = fma(_2097, cbSceneParam._m0[89u].z, fma(_2095, cbSceneParam._m0[89u].y, _2093 * cbSceneParam._m0[89u].x));
    float _2103 = fma(_2097, cbSceneParam._m0[90u].z, fma(_2095, cbSceneParam._m0[90u].y, _2093 * cbSceneParam._m0[90u].x));
    float _2106 = fma(_2097, cbSceneParam._m0[91u].z, fma(_2095, cbSceneParam._m0[91u].y, _2093 * cbSceneParam._m0[91u].x));
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_285 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _1046 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2151 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2155 = _2118 | 1u;
    float _2166 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_869, _870, _871));
    float _2169 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_869, _870, _871));
    float _4450 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
    float _4461 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2174 = (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0))) * 0.3183098733425140380859375;
    float _2176 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * 0.3183098733425140380859375;
    float _2183 = ((cbLight._m0[_2135].x * _2141) * _2176) + ((cbLight._m0[_2145].x * _2151) * _2174);
    float _2184 = ((_2141 * cbLight._m0[_2135].y) * _2176) + ((_2151 * cbLight._m0[_2145].y) * _2174);
    float _2185 = ((_2141 * cbLight._m0[_2135].z) * _2176) + ((_2151 * cbLight._m0[_2145].z) * _2174);
    uvec4 _2189 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2191 = _2189.x == 0u;
    float _2202;
    float _2204;
    float _2206;
    if (_2191)
    {
        _2202 = _2183;
        _2204 = _2184;
        _2206 = _2185;
    }
    else
    {
        uint _2210 = _2118 + 6u;
        float _2226 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2227 = _2226 * _2226;
        float _4472 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        float _2228 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _2229 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2202 = (((cbLight._m0[_2210].x * 0.3183098733425140380859375) * _2228) * _2229) + _2183;
        _2204 = (((cbLight._m0[_2210].y * 0.3183098733425140380859375) * _2228) * _2229) + _2184;
        _2206 = (((cbLight._m0[_2210].z * 0.3183098733425140380859375) * _2228) * _2229) + _2185;
    }
    bool _2209 = _2189.y == 0u;
    float _2247;
    float _2249;
    float _2251;
    if (_2209)
    {
        _2247 = _2202;
        _2249 = _2204;
        _2251 = _2206;
    }
    else
    {
        uint _2417 = _2118 + 7u;
        float _2433 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2434 = _2433 * _2433;
        float _4488 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2435 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2436 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2247 = (((cbLight._m0[_2417].x * 0.3183098733425140380859375) * _2435) * _2436) + _2202;
        _2249 = (((cbLight._m0[_2417].y * 0.3183098733425140380859375) * _2435) * _2436) + _2204;
        _2251 = (((cbLight._m0[_2417].z * 0.3183098733425140380859375) * _2435) * _2436) + _2206;
    }
    uint _2254 = _2118 + 8u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _872) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2118].x + _948;
    float _2270 = cbLight._m0[_2118].y + _949;
    float _2271 = cbLight._m0[_2118].z + _950;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2118].xyz));
    float _4504 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
    float _4515 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _2283 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
    float _2284 = dot(vec3(_869, _870, _871), vec3(_2276, _2277, _2278));
    float _4526 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2276, _2277, _2278));
    float _4537 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2268 * _2268;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2304 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
    float _2305 = 0.959999978542327880859375 - _1027;
    float _2307 = 0.959999978542327880859375 - _1028;
    float _2308 = 0.959999978542327880859375 - _1029;
    float _2315 = 1.0 - _2268;
    float _2326 = (0.5 / (((_2283 * ((_2282 * _2315) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2315) + _2268) * _2282))) * _2282;
    float _4548 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    uint _2339 = _2118 + 9u;
    float _2350 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2155].w)) * _872) * 0.949999988079071044921875);
    float _2351 = _2350 * _2350;
    float _2352 = cbLight._m0[_2155].x + _948;
    float _2353 = cbLight._m0[_2155].y + _949;
    float _2354 = cbLight._m0[_2155].z + _950;
    float _2358 = inversesqrt(dot(vec3(_2352, _2353, _2354), vec3(_2352, _2353, _2354)));
    float _2359 = _2358 * _2352;
    float _2360 = _2358 * _2353;
    float _2361 = _2358 * _2354;
    float _2362 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2155].xyz));
    float _4559 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2366 = dot(vec3(_869, _870, _871), vec3(_2359, _2360, _2361));
    float _4570 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2370 = dot(vec3(cbLight._m0[_2155].xyz), vec3(_2359, _2360, _2361));
    float _4581 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2374 = _2351 * _2351;
    float _2378 = ((_2369 * _2369) * (_2374 + (-1.0))) + 1.0;
    float _2385 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2392 = 1.0 - _2351;
    float _2402 = (0.5 / (((_2283 * ((_2365 * _2392) + _2351)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2392) + _2351) * _2365))) * _2365;
    float _4592 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2404 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2374 / ((_2378 * _2378) * 3.141590118408203125));
    float _2414 = (((((_2385 * _2305) + _1030) * cbLight._m0[_2339].x) * _2404) * _2141) + (((((_2304 * _2305) + _1030) * cbLight._m0[_2254].x) * _2328) * _2151);
    float _2415 = (((((_2385 * _2307) + _1032) * cbLight._m0[_2339].y) * _2404) * _2141) + (((((_2304 * _2307) + _1032) * cbLight._m0[_2254].y) * _2328) * _2151);
    float _2416 = (((((_2385 * _2308) + _1033) * cbLight._m0[_2339].z) * _2404) * _2141) + (((((_2304 * _2308) + _1033) * cbLight._m0[_2254].z) * _2328) * _2151);
    float _2478;
    float _2480;
    float _2482;
    if (_2191)
    {
        _2478 = _2414;
        _2480 = _2415;
        _2482 = _2416;
    }
    else
    {
        uint _2484 = _2118 + 2u;
        uint _2488 = _2118 + 10u;
        float _2502 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _872) * 0.949999988079071044921875);
        float _2503 = _2502 * _2502;
        float _2504 = cbLight._m0[_2484].x + _948;
        float _2505 = cbLight._m0[_2484].y + _949;
        float _2506 = cbLight._m0[_2484].z + _950;
        float _2510 = inversesqrt(dot(vec3(_2504, _2505, _2506), vec3(_2504, _2505, _2506)));
        float _2511 = _2510 * _2504;
        float _2512 = _2510 * _2505;
        float _2513 = _2510 * _2506;
        float _2514 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2484].xyz));
        float _4603 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _2518 = dot(vec3(_869, _870, _871), vec3(_2511, _2512, _2513));
        float _4614 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _2522 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2511, _2512, _2513));
        float _4625 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2526 = _2503 * _2503;
        float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
        float _2537 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
        float _2544 = 1.0 - _2503;
        float _2554 = (0.5 / (((_2283 * ((_2517 * _2544) + _2503)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2544) + _2503) * _2517))) * _2517;
        float _4636 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2556 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
        float _2557 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2478 = (((((_2537 * _2305) + _1030) * cbLight._m0[_2488].x) * _2556) * _2557) + _2414;
        _2480 = (((((_2537 * _2307) + _1032) * cbLight._m0[_2488].y) * _2556) * _2557) + _2415;
        _2482 = (((((_2537 * _2308) + _1033) * cbLight._m0[_2488].z) * _2556) * _2557) + _2416;
    }
    float _2592;
    float _2594;
    float _2596;
    if (_2209)
    {
        _2592 = _2478;
        _2594 = _2480;
        _2596 = _2482;
    }
    else
    {
        uint _2603 = _2118 + 3u;
        uint _2607 = _2118 + 11u;
        float _2621 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2603].w)) * _872) * 0.949999988079071044921875);
        float _2622 = _2621 * _2621;
        float _2623 = cbLight._m0[_2603].x + _948;
        float _2624 = cbLight._m0[_2603].y + _949;
        float _2625 = cbLight._m0[_2603].z + _950;
        float _2629 = inversesqrt(dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625)));
        float _2630 = _2629 * _2623;
        float _2631 = _2629 * _2624;
        float _2632 = _2629 * _2625;
        float _2633 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2603].xyz));
        float _4652 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2637 = dot(vec3(_869, _870, _871), vec3(_2630, _2631, _2632));
        float _4663 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2641 = dot(vec3(cbLight._m0[_2603].xyz), vec3(_2630, _2631, _2632));
        float _4674 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2645 = _2622 * _2622;
        float _2649 = ((_2640 * _2640) * (_2645 + (-1.0))) + 1.0;
        float _2656 = exp2(log2(1.0 - (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0)))) * 5.0);
        float _2663 = 1.0 - _2622;
        float _2673 = (0.5 / (((_2283 * ((_2636 * _2663) + _2622)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2663) + _2622) * _2636))) * _2636;
        float _4685 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2675 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * (_2645 / ((_2649 * _2649) * 3.141590118408203125));
        float _2676 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2592 = (((((_2656 * _2305) + _1030) * cbLight._m0[_2607].x) * _2675) * _2676) + _2478;
        _2594 = (((((_2656 * _2307) + _1032) * cbLight._m0[_2607].y) * _2675) * _2676) + _2480;
        _2596 = (((((_2656 * _2308) + _1033) * cbLight._m0[_2607].z) * _2675) * _2676) + _2482;
    }
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    if (_2116.y == 0u)
    {
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2751;
        float _2753 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2751;
        float _2754 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2751;
        uvec4 _2766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2767 = _2766.x;
        uint _2778 = uint((float(_2766.y) * floor(float(uint(cbSceneParam._m0[85u].y * _969) / _2767))) + floor(float(uint(cbSceneParam._m0[85u].x * _968) / _2767)));
        float _2788 = (log2(_2754 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2789 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        uint _2792 = uint(isnan(14.0) ? _2789 : (isnan(_2789) ? 14.0 : min(_2789, 14.0)));
        uvec4 _2797 = texelFetch(g_lightClusterGridBuffer, int(((_2792 << 2u) + (_2778 << 6u)) >> 2u));
        uint _2798 = _2797.x;
        uint _2799 = _2766.z;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        if (((((1u << ((_2799 >> 4u) & 15u)) + 4294967295u) & _2798) == 0u) || ((_2799 & 240u) == 0u))
        {
            _2899 = 0.0;
            _2901 = 0.0;
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
        }
        else
        {
            float _2900;
            float _2902;
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            uint _3058 = 0u;
            uint _3067;
            bool _3068;
            for (;;)
            {
                _3067 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                _3068 = _3067 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3068)
                {
                    frontier_phi_66_pred = _3052;
                    frontier_phi_66_pred_1 = _3057;
                    frontier_phi_66_pred_2 = _3056;
                    frontier_phi_66_pred_3 = _3055;
                    frontier_phi_66_pred_4 = _3054;
                    frontier_phi_66_pred_5 = _3053;
                }
                else
                {
                    float _3197;
                    float _3198;
                    float _3199;
                    float _3200;
                    float _3201;
                    float _3202;
                    uint _3203;
                    _3197 = _3052;
                    _3198 = _3053;
                    _3199 = _3054;
                    _3200 = _3055;
                    _3201 = _3056;
                    _3202 = _3057;
                    _3203 = _3067;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    for (;;)
                    {
                        uint _3207 = uint(findLSB(_3203)) + (_3058 << 5u);
                        uint _3204 = (_3203 + 4294967295u) & _3203;
                        uint _3209 = _3207 * 48u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3229 = (_3207 * 48u) + 4u;
                        vec4 _3242 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 3u)).x));
                        uint _3248 = (_3207 * 48u) + 8u;
                        vec3 _3259 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3248)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3248 + 2u)).x));
                        float _3263 = _3223.x - _2752;
                        float _3264 = _3223.y - _2753;
                        float _3265 = _3223.z - _2754;
                        float _3266 = dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265));
                        float _3269 = inversesqrt(_3266);
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3273 = dot(vec3(_987, _990, _993), vec3(_3270, _3271, _3272));
                        float _3278 = 1.0 - (_3266 * _3223.w);
                        float _4711 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                        float _3280 = sqrt(_3266) * _3242.w;
                        float _3283 = 1.39999997615814208984375 / (_3280 + 1.39999997615814208984375);
                        float _3284 = _3283 * _3283;
                        float _3287 = ((1.0 - _3284) * _3273) + _3284;
                        float _3290 = _3280 * _3280;
                        float _3294 = ((isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0))) * _3279) / ((_3290 * 0.699999988079071044921875) + 1.0);
                        float _3298 = (-0.0) - _2752;
                        float _3299 = (-0.0) - _2753;
                        float _3300 = (-0.0) - _2754;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3305 = _3304 * _3298;
                        float _3306 = _3304 * _3299;
                        float _3307 = _3304 * _3300;
                        float _3315 = exp2(log2(1.0 / ((_3290 * 3.5) + 5.0)) * 0.25);
                        float _3316 = 1.0 - _1062;
                        float _3323 = sqrt(1.0 - ((1.0 - (_3316 * _3316)) * (1.0 - (_3315 * _3315))));
                        float _3324 = _3323 * _3323;
                        float _3325 = _3324 * _3324;
                        float _3326 = _3305 + _3270;
                        float _3327 = _3306 + _3271;
                        float _3328 = _3307 + _3272;
                        float _3332 = inversesqrt(dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328)));
                        float _3336 = dot(vec3(_987, _990, _993), vec3(_3305, _3306, _3307));
                        float _4727 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3339 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                        float _3340 = dot(vec3(_987, _990, _993), vec3(_3332 * _3326, _3332 * _3327, _3332 * _3328));
                        float _4738 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3347 = ((_3343 * _3343) * (_3325 + (-1.0))) + 1.0;
                        float _3348 = _3283 * _3324;
                        float _3349 = _3348 * _3348;
                        float _3352 = ((1.0 - _3349) * _3273) + _3349;
                        float _4749 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                        float _3353 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3354 = 1.0 - _3324;
                        float _3364 = (0.5 / (((_3353 * ((_3339 * _3354) + _3324)) + 9.9999999392252902907785028219223e-09) + (((_3353 * _3354) + _3324) * _3339))) * _3353;
                        float _4760 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                        float _3375 = (((_3325 * 3.1415927410125732421875) * (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) / ((_3347 * _3347) * ((_3290 * 2.1991131305694580078125) + 3.141590118408203125))) * _3279;
                        _3127 = (_3294 * _3242.x) + _3200;
                        _3128 = (_3294 * _3242.y) + _3201;
                        _3129 = (_3294 * _3242.z) + _3202;
                        _3124 = (_3375 * _3259.x) + _3197;
                        _3125 = (_3375 * _3259.y) + _3198;
                        _3126 = (_3375 * _3259.z) + _3199;
                        if (_3204 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3197 = _3124;
                            _3198 = _3125;
                            _3199 = _3126;
                            _3200 = _3127;
                            _3201 = _3128;
                            _3202 = _3129;
                            _3203 = _3204;
                        }
                    }
                    frontier_phi_66_pred = _3124;
                    frontier_phi_66_pred_1 = _3129;
                    frontier_phi_66_pred_2 = _3128;
                    frontier_phi_66_pred_3 = _3127;
                    frontier_phi_66_pred_4 = _3126;
                    frontier_phi_66_pred_5 = _3125;
                }
                _2900 = frontier_phi_66_pred;
                _2910 = frontier_phi_66_pred_1;
                _2908 = frontier_phi_66_pred_2;
                _2906 = frontier_phi_66_pred_3;
                _2904 = frontier_phi_66_pred_4;
                _2902 = frontier_phi_66_pred_5;
                uint _3059 = _3058 + 1u;
                if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3052 = _2900;
                    _3053 = _2902;
                    _3054 = _2904;
                    _3055 = _2906;
                    _3056 = _2908;
                    _3057 = _2910;
                    _3058 = _3059;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2899 = _2900;
            _2901 = _2902;
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
        }
        uvec4 _2913 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2914 = _2913.z;
        uint _2916 = (_2914 >> 8u) & 15u;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((4294967295u << _2916) & _2798) == 0u)
        {
            _3020 = _2899;
            _3022 = _2901;
            _3024 = _2903;
            _3026 = _2905;
            _3028 = _2907;
            _3030 = _2909;
        }
        else
        {
            float _3045 = inversesqrt(dot(vec3(_2752, _2753, _2754), vec3(_2752, _2753, _2754)));
            float _3046 = _3045 * _2752;
            float _3047 = _3045 * _2753;
            float _3048 = _3045 * _2754;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2916 < ((_2914 >> 12u) & 15u))
            {
                float _3021;
                float _3023;
                float _3025;
                float _3027;
                float _3029;
                float _3031;
                float _3180 = _2899;
                float _3181 = _2901;
                float _3182 = _2903;
                float _3183 = _2905;
                float _3184 = _2907;
                float _3185 = _2909;
                uint _3186 = _2916;
                uint _3195;
                bool _3196;
                for (;;)
                {
                    _3195 = texelFetch(g_lightClassification, int((((_2792 << 5u) + (_2778 << 9u)) + (_3186 << 2u)) >> 2u)).x;
                    _3196 = _3195 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3196)
                    {
                        frontier_phi_77_pred = _3185;
                        frontier_phi_77_pred_1 = _3184;
                        frontier_phi_77_pred_2 = _3183;
                        frontier_phi_77_pred_3 = _3182;
                        frontier_phi_77_pred_4 = _3181;
                        frontier_phi_77_pred_5 = _3180;
                    }
                    else
                    {
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3686;
                        float _3687;
                        float _3402 = _3180;
                        float _3403 = _3181;
                        float _3404 = _3182;
                        float _3405 = _3183;
                        float _3406 = _3184;
                        float _3407 = _3185;
                        uint _3408 = _3195;
                        uint _3409;
                        vec4 _3434;
                        float _3435;
                        vec4 _3450;
                        vec3 _3462;
                        vec4 _3477;
                        vec4 _3492;
                        float _3538;
                        bool _3539;
                        for (;;)
                        {
                            uint _3419 = ((_3186 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3408));
                            _3409 = (_3408 + 4294967295u) & _3408;
                            uint _3421 = _3419 * 40u;
                            _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            _3435 = _3434.w;
                            uint _3437 = (_3419 * 40u) + 4u;
                            _3450 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3437)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3437 + 3u)).x));
                            uint _3452 = (_3419 * 40u) + 8u;
                            _3462 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x));
                            uint _3464 = (_3419 * 40u) + 16u;
                            _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3479 = (_3419 * 40u) + 20u;
                            _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3494 = (_3419 * 40u) + 24u;
                            vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3513 = (_3419 * 40u) + 28u;
                            vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3538 = fma(_2754, _3526.z, fma(_2753, _3526.y, _3526.x * _2752)) + _3526.w;
                            _3539 = !((fma(_2754, _3507.z, fma(_2753, _3507.y, _3507.x * _2752)) + _3507.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3539)
                            {
                                float _3566 = _3434.x - _2752;
                                float _3567 = _3434.y - _2753;
                                float _3568 = _3434.z - _2754;
                                float _3569 = dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568));
                                float _3572 = inversesqrt(_3569);
                                float _3573 = _3572 * _3566;
                                float _3574 = _3572 * _3567;
                                float _3575 = _3572 * _3568;
                                float _3579 = 1.0 - (_3569 / (_3435 * _3435));
                                float _4771 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                                float _3584 = sqrt(_3569) * _3450.w;
                                float _3586 = 1.39999997615814208984375 / (_3584 + 1.39999997615814208984375);
                                float _3587 = _3586 * _3586;
                                float _3590 = ((1.0 - _3587) * dot(vec3(_3573, _3574, _3575), vec3(_987, _990, _993))) + _3587;
                                float _3593 = _3584 * _3584;
                                float _3597 = (fma(_2754, _3477.z, fma(_2753, _3477.y, _3477.x * _2752)) + _3477.w) / _3538;
                                float _3598 = (fma(_2754, _3492.z, fma(_2753, _3492.y, _3492.x * _2752)) + _3492.w) / _3538;
                                float _3602 = 1.0 - dot(vec2(_3597, _3598), vec2(_3597, _3598));
                                float _4787 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3603 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3604 = _3603 * (((isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0))) * _3580) / ((_3593 * 0.699999988079071044921875) + 1.0));
                                float _3616 = exp2(log2(1.0 / ((_3593 * 3.5) + 5.0)) * 0.25);
                                float _3617 = 1.0 - _1062;
                                float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                                float _3625 = _3624 * _3624;
                                float _3626 = _3625 * _3625;
                                float _3627 = _3573 - _3046;
                                float _3628 = _3574 - _3047;
                                float _3629 = _3575 - _3048;
                                float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                                float _3637 = dot(vec3(_987, _990, _993), vec3((-0.0) - _3046, (-0.0) - _3047, (-0.0) - _3048));
                                float _4798 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3641 = dot(vec3(_987, _990, _993), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                                float _4809 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3644 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                                float _3649 = _3586 * _3625;
                                float _3650 = _3649 * _3649;
                                float _3656 = ((1.0 - _3650) * dot(vec3(_987, _990, _993), vec3(_3573, _3574, _3575))) + _3650;
                                float _4820 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                                float _3658 = 1.0 - _3625;
                                float _3668 = (0.5 / (((_3657 * ((_3640 * _3658) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3657 * _3658) + _3625) * _3640))) * _3657;
                                float _4831 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3678 = (_3603 * _3580) * (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3648 * _3648) * ((_3593 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3604 * _3450.y;
                                frontier_phi_83_pred_1 = _3604 * _3450.x;
                                frontier_phi_83_pred_2 = _3678 * _3462.z;
                                frontier_phi_83_pred_3 = _3678 * _3462.y;
                                frontier_phi_83_pred_4 = _3678 * _3462.x;
                                frontier_phi_83_pred_5 = _3604 * _3450.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3686 = frontier_phi_83_pred;
                            _3685 = frontier_phi_83_pred_1;
                            _3684 = frontier_phi_83_pred_2;
                            _3683 = frontier_phi_83_pred_3;
                            _3682 = frontier_phi_83_pred_4;
                            _3687 = frontier_phi_83_pred_5;
                            _3392 = _3685 + _3405;
                            _3393 = _3686 + _3406;
                            _3394 = _3687 + _3407;
                            _3389 = _3682 + _3402;
                            _3390 = _3683 + _3403;
                            _3391 = _3684 + _3404;
                            if (_3409 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3392;
                                _3406 = _3393;
                                _3407 = _3394;
                                _3408 = _3409;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3394;
                        frontier_phi_77_pred_1 = _3393;
                        frontier_phi_77_pred_2 = _3392;
                        frontier_phi_77_pred_3 = _3391;
                        frontier_phi_77_pred_4 = _3390;
                        frontier_phi_77_pred_5 = _3389;
                    }
                    _3031 = frontier_phi_77_pred;
                    _3029 = frontier_phi_77_pred_1;
                    _3027 = frontier_phi_77_pred_2;
                    _3025 = frontier_phi_77_pred_3;
                    _3023 = frontier_phi_77_pred_4;
                    _3021 = frontier_phi_77_pred_5;
                    uint _3187 = _3186 + 1u;
                    if (_3187 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3180 = _3021;
                        _3181 = _3023;
                        _3182 = _3025;
                        _3183 = _3027;
                        _3184 = _3029;
                        _3185 = _3031;
                        _3186 = _3187;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3025;
                frontier_phi_58_59_ladder_1 = _3031;
                frontier_phi_58_59_ladder_2 = _3029;
                frontier_phi_58_59_ladder_3 = _3027;
                frontier_phi_58_59_ladder_4 = _3023;
                frontier_phi_58_59_ladder_5 = _3021;
            }
            else
            {
                frontier_phi_58_59_ladder = _2903;
                frontier_phi_58_59_ladder_1 = _2909;
                frontier_phi_58_59_ladder_2 = _2907;
                frontier_phi_58_59_ladder_3 = _2905;
                frontier_phi_58_59_ladder_4 = _2901;
                frontier_phi_58_59_ladder_5 = _2899;
            }
            _3020 = frontier_phi_58_59_ladder_5;
            _3022 = frontier_phi_58_59_ladder_4;
            _3024 = frontier_phi_58_59_ladder;
            _3026 = frontier_phi_58_59_ladder_3;
            _3028 = frontier_phi_58_59_ladder_2;
            _3030 = frontier_phi_58_59_ladder_1;
        }
        float _3035 = isnan(1.0) ? _1046 : (isnan(_1046) ? 1.0 : min(_1046, 1.0));
        _2811 = (_3035 * _3026) + _2247;
        _2813 = (_3035 * _3028) + _2249;
        _2815 = (_3035 * _3030) + _2251;
        _2817 = ((_3020 * _1030) * _3035) + _2592;
        _2819 = ((_3022 * _1032) * _3035) + _2594;
        _2821 = ((_3024 * _1033) * _3035) + _2596;
    }
    else
    {
        _2811 = _2247;
        _2813 = _2249;
        _2815 = _2251;
        _2817 = _2592;
        _2819 = _2594;
        _2821 = _2596;
    }
    float _4847 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _4858 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
    float _4869 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
    float _2838 = ((isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0))) * (_2811 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1046))) + ((_2817 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    float _2839 = ((isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0))) * (_2813 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1046))) + ((_2819 + ((isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    float _2840 = ((isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2815 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1046))) + ((_2821 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1885)) * cbPerFrame._m0[3u].x);
    uint _2841 = _285 + 6u;
    float _2849 = _968 / cbSceneParam._m0[86u].x;
    float _2850 = _969 / cbSceneParam._m0[86u].y;
    vec4 _2864 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, (log2((isnan(cbSceneParam._m0[77u].w) ? _891 : (isnan(_891) ? cbSceneParam._m0[77u].w : min(_891, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2866 = _2864.x;
    float _2867 = _2864.y;
    float _2868 = _2864.z;
    float _2869 = _2864.w;
    float _2962;
    float _2964;
    float _2966;
    float _2968;
    if (_891 > cbSceneParam._m0[78u].w)
    {
        float _2924 = isnan(_891) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _891 : min(cbSceneParam._m0[80u].w, _891));
        float _2925 = _2924 / _891;
        float _2936 = _2925 * _941;
        float _2937 = _942 * _2925;
        float _2938 = (-0.0) - _2937;
        float _2940 = _2925 * _943;
        float _2942 = (cbSceneParam._m0[77u].w * _2938) / _2924;
        float _2943 = _2942 + cbSceneParam._m0[79u].w;
        float _2944 = cbSceneParam._m0[79u].w - _2937;
        float _2950 = sqrt(((_2936 * _2936) + (_2937 * _2937)) + (_2940 * _2940));
        float _2953 = (1.0 - (cbSceneParam._m0[77u].w / _2924)) * _2950;
        float _2958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3137;
        if (abs((_2938 - _2942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3137 = ((((_2943 > 0.0) ? exp2(_2958 * _2943) : (2.0 - exp2(_2960 * _2943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2953;
        }
        else
        {
            float _3081 = 1.0 / cbSceneParam._m0[80u].x;
            float _3082 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : max(_2943, _2944));
            float _3083 = isnan(_2944) ? _2943 : (isnan(_2943) ? _2944 : min(_2943, _2944));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            _3137 = ((abs(_2950 / _2938) * cbSceneParam._m0[80u].y) * ((((_3092 - _3093) * 2.0) - ((exp2(_2958 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0)))) - exp2(_2958 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0))))) * _3081)) - ((exp2(_2960 * _3092) - exp2(_2960 * _3093)) * _3081))) + (_2953 * cbSceneParam._m0[80u].z);
        }
        vec4 _3139 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2849, _2850, 1.0), 0.0);
        float _3148 = exp2((_3137 * (-1.44269502162933349609375)) * (1.0 - _3139.w));
        float _3149 = log2(_3148);
        float _3165 = log2(_2869);
        _2962 = (exp2(_3165 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].x)) * _3139.x) / cbSceneParam._m0[78u].x)) + _2866;
        _2964 = (exp2(_3165 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].y)) * _3139.y) / cbSceneParam._m0[78u].y)) + _2867;
        _2966 = (exp2(_3165 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].z)) * _3139.z) / cbSceneParam._m0[78u].z)) + _2868;
        _2968 = _3148 * _2869;
    }
    else
    {
        _2962 = _2866;
        _2964 = _2867;
        _2966 = _2868;
        _2968 = _2869;
    }
    bool _3175;
    vec4 _2978;
    vec4 _3000;
    float _3002;
    float _3006;
    float _3007;
    float _3008;
    float _3009;
    bool _3019;
    for (;;)
    {
        _2978 = cbMatDynParam._m0[0u];
        float _2980 = roundEven(_2978.y);
        bool _2981 = _2980 == 3.0;
        float _2982 = log2(_2968);
        float _2989 = exp2(_2982 * cbSceneParam._m0[78u].x) * _2838;
        float _2990 = exp2(_2982 * cbSceneParam._m0[78u].y) * _2839;
        float _2991 = exp2(_2982 * cbSceneParam._m0[78u].z) * _2840;
        float _2998 = _957 + (-0.5);
        _3000 = cbMtdParam._m0[1u];
        _3002 = _3000.y * _2998;
        float _3005 = (_2980 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3006 = _3005 * (_2981 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2962)));
        _3007 = _3005 * (_2981 ? _2990 : (_2990 + (cbSceneParam._m0[72u].w * _2964)));
        _3008 = _3005 * (_2981 ? _2991 : (_2991 + (cbSceneParam._m0[72u].w * _2966)));
        _3009 = _2998 * 0.999000012874603271484375;
        _3019 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3019)
        {
            if ((cbInstanceData._m0[_285 + 7u].x + _3009) < 0.5)
            {
                _3175 = true;
                break;
            }
        }
        uint _3116 = _1006 + uint(_2978.w);
        if ((cbInstanceData._m0[_3116].w < 1.0) && ((cbInstanceData._m0[_3116].w + _3009) < 0.5))
        {
            _3175 = true;
            break;
        }
        if ((_3002 + 1.0) < _3000.x)
        {
            _3175 = true;
            break;
        }
        _3175 = false;
        break;
    }
    float _3380;
    if (_3175)
    {
        discard_state = true;
        _3380 = 0.0;
    }
    else
    {
        _3380 = cbInstanceData._m0[_2841].w;
    }
    SV_Target.x = _3006;
    SV_Target.y = _3007;
    SV_Target.z = _3008;
    SV_Target.w = _3380;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2841].w;
    discard_exit();
}


