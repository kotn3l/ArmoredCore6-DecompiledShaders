#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1461;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3787 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3798 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3809 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = _363.x * cbMtdParam._m0[11u].x;
    float _369 = _363.y * cbMtdParam._m0[11u].y;
    float _370 = _363.z * cbMtdParam._m0[11u].z;
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _439 = _437.x;
    float _451 = dot(vec4(_439, _437.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _468 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_439 - _451) * cbMtdParam._m0[23u].w) + _451) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3820 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _469 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _479 = (_337.x * cbMtdParam._m0[9u].x) * ((_469 * ((_389.x * cbMtdParam._m0[12u].x) - _368)) + _368);
    float _480 = (_337.y * cbMtdParam._m0[9u].y) * ((_469 * ((_389.y * cbMtdParam._m0[12u].y) - _369)) + _369);
    float _481 = (_337.z * cbMtdParam._m0[9u].z) * ((_469 * ((_389.z * cbMtdParam._m0[12u].z) - _370)) + _370);
    float _485 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _479;
    float _488 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _480;
    float _491 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _481;
    float _499 = (((_479 - _485) * (isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0)))) + _485) * 4.55000019073486328125;
    float _501 = (((_480 - _488) * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) + _488) * 4.55000019073486328125;
    float _503 = (((_481 - _491) * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) + _491) * 4.55000019073486328125;
    vec4 _521 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _548 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _565 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _569 = _565.z;
    float _578 = ((_548.z - _569) * _469) + _569;
    float _581 = ((((_548.x - _567) * _469) + _567) * 2.0) + (-1.0);
    float _582 = ((((_548.y - _568) * _469) + _568) * 2.0) + (-1.0);
    float _583 = dot(vec2(_581, _582), vec2(_581, _582));
    float _3831 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _588 = sqrt(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _620 = (_581 + ((((_521.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_608.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _621 = (_582 + ((((_521.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_608.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _624 = fma(_588, _250, fma(_621, _257, _620 * _243));
    float _627 = fma(_588, _251, fma(_621, _258, _620 * _244));
    float _630 = fma(_588, _252, fma(_621, _259, _620 * _245));
    float _634 = inversesqrt(dot(vec3(_624, _627, _630), vec3(_624, _627, _630)));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _663 = _661.x;
    float _664 = 1.0 - _663;
    float _673 = (cbMtdParam._m0[19u].x + dot(vec4(_634 * _624, _634 * _627, _634 * _630, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_663 - _664) * cbMtdParam._m0[24u].z) + _664) * cbMtdParam._m0[21u].z);
    float _3842 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _674 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _676 = (-0.0) - cbMtdParam._m0[24u].x;
    float _678 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _679 = isnan(1.0) ? _678 : (isnan(_678) ? 1.0 : min(_678, 1.0));
    float _686 = _674 - ((_674 * TEXCOORD_8.x) * _679);
    float _687 = _674 - ((_674 * TEXCOORD_8.y) * _679);
    float _688 = _674 - ((_674 * TEXCOORD_8.z) * _679);
    float _695 = (_686 * (cbMtdParam._m0[17u].x - _499)) + _499;
    float _696 = (_687 * (cbMtdParam._m0[17u].y - _501)) + _501;
    float _697 = (_688 * (cbMtdParam._m0[17u].z - _503)) + _503;
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _711 = _709.x;
    float _712 = 1.0 - _711;
    float _738 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_711 - _712) * cbMtdParam._m0[24u].w) + _712) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3863 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _739 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
    float _747 = ((((cbMtdParam._m0[10u].x - _695) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _739) + _695;
    float _748 = ((((cbMtdParam._m0[10u].y - _696) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _739) + _696;
    float _749 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _697)) * _739) + _697;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _775 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _777 = _775.x;
    float _794 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _777) * _469) + _777;
    float _798 = ((_761.x - _794) * cbMtdParam._m0[19u].z) + _794;
    float _800 = _798 - (_798 * _686);
    float _802 = _800 - (_800 * _739);
    float _807 = (((_521.z - _578) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _578;
    float _811 = ((_608.z - _807) * cbMtdParam._m0[19u].w) + _807;
    vec4 _825 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _832 = (_825.x * 2.0) + (-1.0);
    float _833 = (_825.y * 2.0) + (-1.0);
    float _834 = dot(vec2(_832, _833), vec2(_832, _833));
    float _3874 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _842 = ((_825.z - _811) * _686) + _811;
    float _845 = ((cbMtdParam._m0[23u].x - _842) * _739) + _842;
    vec4 _866 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _872 = (_866.x * 2.0) + (-1.0);
    float _873 = (_866.y * 2.0) + (-1.0);
    float _874 = dot(vec2(_872, _873), vec2(_872, _873));
    float _3885 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _889 = ((sqrt(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) - _588) * _688) + _588;
    float _892 = (((_832 - _620) * _686) + _620) + (cbMtdParam._m0[21u].x * _620);
    float _893 = (((_833 - _621) * _687) + _621) + (cbMtdParam._m0[21u].x * _621);
    float _904 = (((_872 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _739) + _892;
    float _905 = (((_873 - _893) + (_893 * cbMtdParam._m0[22u].z)) * _739) + _893;
    float _906 = (_739 * (sqrt(1.0 - (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0)))) - _889)) + _889;
    float _908 = cbMtdParam._m0[22u].x + _608.w;
    float _911 = fma(_906, _250, fma(_905, _257, _904 * _243));
    float _914 = fma(_906, _251, fma(_905, _258, _904 * _244));
    float _917 = fma(_906, _252, fma(_905, _259, _904 * _245));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _3896 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _925 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _3918 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3929 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3940 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3951 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _930 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    float _1009 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1010 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1028 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1031 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1034 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1048 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1054 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * cbInstanceData._m0[_1048].x;
    float _1055 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * cbInstanceData._m0[_1048].y;
    float _1056 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) * cbInstanceData._m0[_1048].z;
    float _3962 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _3973 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _1058 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1059 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _1060 = 1.0 - _930;
    float _1061 = _1057 * _1060;
    float _1062 = _1058 * _1060;
    float _1063 = _1059 * _1060;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _930;
    float _1069 = (_1058 + (-0.039999999105930328369140625)) * _930;
    float _1070 = (_1059 + (-0.039999999105930328369140625)) * _930;
    float _1071 = _1068 + 0.039999999105930328369140625;
    float _1073 = _1069 + 0.039999999105930328369140625;
    float _1074 = _1070 + 0.039999999105930328369140625;
    vec4 _1083 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1009, cbSceneParam._m0[86u].y * _1010));
    float _1087 = ((isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0))) * TEXCOORD_5.w) * _1083.x;
    float _1088 = dot(vec3(_922, _923, _924), vec3(_1001, _1002, _1003));
    float _1091 = _1088 * 2.0;
    float _1095 = (_1091 * _922) - _1001;
    float _1096 = (_1091 * _923) - _1002;
    float _1097 = (_1091 * _924) - _1003;
    float _1101 = abs(dot(vec3(_1001, _1002, _1003), vec3(_922, _923, _924)));
    float _3995 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1103 = sqrt(_925);
    float _1116 = exp2((_1103 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1103 * 3.0));
    float _1122 = (1.0 - _1116) * ((_1103 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1123 = _1116 * _1103;
    float _1151 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1155 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1460;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1185 = fma(_1159, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1151));
        float _1189 = fma(_1159, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1151));
        float _1193 = fma(_1159, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1151));
        float _1218 = _1151 + _922;
        float _1219 = _1155 + _923;
        float _1220 = _1159 + _924;
        float _1230 = fma(_1220, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1218)) - _1185;
        float _1231 = fma(_1220, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1218)) - _1189;
        float _1232 = fma(_1220, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1218)) - _1193;
        float _1236 = inversesqrt(dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232)));
        float _1249 = ((_1236 * _1230) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1185 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1250 = ((_1236 * _1231) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1189 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1236 * _1232) / cbModelParam._m0[34u].z) + ((((((_1193 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1249, _1250, _1251), 0.0);
        float _1288 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1254.x + (-0.5));
        float _1290 = _1288 * (_1254.y + (-0.5));
        float _1291 = _1288 * (_1254.z + (-0.5));
        float _1298 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1261.x + (-0.5));
        float _1300 = _1298 * (_1261.y + (-0.5));
        float _1301 = _1298 * (_1261.z + (-0.5));
        float _1308 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1268.x + (-0.5));
        float _1310 = _1308 * (_1268.y + (-0.5));
        float _1311 = _1308 * (_1268.z + (-0.5));
        float _1318 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1275.x + (-0.5));
        float _1320 = _1318 * (_1275.y + (-0.5));
        float _1321 = _1318 * (_1275.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1342 = (dot(vec3(_922, _923, _924), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4021 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1352 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4032 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4043 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1354 + 1.0))) + _1359) * _1322;
        float _1369 = _1290 * 0.5;
        float _1370 = _1300 * 0.5;
        float _1371 = _1310 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1385 = (dot(vec3(_922, _923, _924), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4054 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1394 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _4065 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _1396 = _1395 * 2.0;
        float _1400 = (1.0 - _1395) / (_1395 + 1.0);
        float _4076 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1410 = ((((1.0 - _1401) * (_1396 + 2.0)) * exp2(log2(isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * (_1396 + 1.0))) + _1401) * _1323;
        float _1411 = _1291 * 0.5;
        float _1412 = _1301 * 0.5;
        float _1413 = _1311 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_922, _923, _924), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4087 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _4098 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _4109 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_1438 + 1.0))) + _1443) * _1324;
        _1460 = _1291;
        _1462 = _1290;
        _1463 = _1289;
        _1464 = _1301;
        _1465 = _1300;
        _1466 = _1299;
        _1467 = _1311;
        _1468 = _1310;
        _1469 = _1309;
        _1470 = _1324;
        _1471 = _1323;
        _1472 = _1322;
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
        _1474 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)));
        _1475 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
    }
    else
    {
        _1460 = _1461;
        _1462 = _1461;
        _1463 = _1461;
        _1464 = _1461;
        _1465 = _1461;
        _1466 = _1461;
        _1467 = _1461;
        _1468 = _1461;
        _1469 = _1461;
        _1470 = _1461;
        _1471 = _1461;
        _1472 = _1461;
        _1473 = 0.0;
        _1474 = 0.0;
        _1475 = 0.0;
    }
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1500 = fma(_1159, cbModelParam._m0[30u].z, fma(_1155, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1151));
        float _1504 = fma(_1159, cbModelParam._m0[31u].z, fma(_1155, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1151));
        float _1508 = fma(_1159, cbModelParam._m0[32u].z, fma(_1155, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1151));
        float _1531 = _1151 + _922;
        float _1532 = _1155 + _923;
        float _1533 = _1159 + _924;
        float _1543 = fma(_1533, cbModelParam._m0[30u].z, fma(_1532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1531)) - _1500;
        float _1544 = fma(_1533, cbModelParam._m0[31u].z, fma(_1532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1531)) - _1504;
        float _1545 = fma(_1533, cbModelParam._m0[32u].z, fma(_1532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1531)) - _1508;
        float _1549 = inversesqrt(dot(vec3(_1543, _1544, _1545), vec3(_1543, _1544, _1545)));
        float _1562 = ((_1549 * _1543) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1500 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1563 = ((_1549 * _1544) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1504 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1564 = ((_1549 * _1545) / cbModelParam._m0[35u].z) + ((((((_1508 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1562, _1563, _1564), 0.0);
        float _1599 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1566.x + (-0.5));
        float _1601 = _1599 * (_1566.y + (-0.5));
        float _1602 = _1599 * (_1566.z + (-0.5));
        float _1609 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1573.x + (-0.5));
        float _1611 = _1609 * (_1573.y + (-0.5));
        float _1612 = _1609 * (_1573.z + (-0.5));
        float _1619 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1580.x + (-0.5));
        float _1621 = _1619 * (_1580.y + (-0.5));
        float _1622 = _1619 * (_1580.z + (-0.5));
        float _1629 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1587.x + (-0.5));
        float _1631 = _1629 * (_1587.y + (-0.5));
        float _1632 = _1629 * (_1587.z + (-0.5));
        float _1633 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1634 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1635 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1636 = _1600 * 0.5;
        float _1637 = _1610 * 0.5;
        float _1638 = _1620 * 0.5;
        float _1639 = dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638));
        float _1644 = (_1639 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1639);
        float _1652 = (dot(vec3(_922, _923, _924), vec3(_1644 * _1636, _1644 * _1637, _1644 * _1638)) + 1.0) * 0.5;
        float _4150 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1661 = sqrt(((_1637 * _1637) + (_1636 * _1636)) + (_1638 * _1638)) / (_1633 + 9.9999997473787516355514526367188e-06);
        float _4161 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1663 = _1662 * 2.0;
        float _1667 = (1.0 - _1662) / (_1662 + 1.0);
        float _4172 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
        float _1677 = ((((1.0 - _1668) * (_1663 + 2.0)) * exp2(log2(isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_1663 + 1.0))) + _1668) * _1633;
        float _1678 = _1601 * 0.5;
        float _1679 = _1611 * 0.5;
        float _1680 = _1621 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_922, _923, _924), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4183 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1634 + 9.9999997473787516355514526367188e-06);
        float _4194 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4205 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_1705 + 1.0))) + _1710) * _1634;
        float _1720 = _1602 * 0.5;
        float _1721 = _1612 * 0.5;
        float _1722 = _1622 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_922, _923, _924), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4216 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1635 + 9.9999997473787516355514526367188e-06);
        float _4227 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4238 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * (_1747 + 1.0))) + _1752) * _1635;
        _1769 = _1602;
        _1770 = _1601;
        _1771 = _1600;
        _1772 = _1612;
        _1773 = _1611;
        _1774 = _1610;
        _1775 = _1622;
        _1776 = _1621;
        _1777 = _1620;
        _1778 = _1635;
        _1779 = _1634;
        _1780 = _1633;
        _1781 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
        _1782 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1783 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
    }
    else
    {
        _1769 = _1461;
        _1770 = _1461;
        _1771 = _1461;
        _1772 = _1461;
        _1773 = _1461;
        _1774 = _1461;
        _1775 = _1461;
        _1776 = _1461;
        _1777 = _1461;
        _1778 = _1461;
        _1779 = _1461;
        _1780 = _1461;
        _1781 = 0.0;
        _1782 = 0.0;
        _1783 = 0.0;
    }
    float _1793 = (cbModelParam._m0[1u].x * (_1781 - _1473)) + _1473;
    float _1794 = (cbModelParam._m0[1u].x * (_1782 - _1474)) + _1474;
    float _1795 = (cbModelParam._m0[1u].x * (_1783 - _1475)) + _1475;
    float _1816 = fma(_1795, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1793 * cbSceneParam._m0[89u].x));
    float _1819 = fma(_1795, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1793 * cbSceneParam._m0[90u].x));
    float _1822 = fma(_1795, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1793));
    float _1837 = _1095 * 0.5;
    float _1838 = _1096 * 0.5;
    float _1839 = _1097 * 0.5;
    float _1840 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1771, _1774, _1777, _1780));
    float _1843 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1770, _1773, _1776, _1779));
    float _1846 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1769, _1772, _1775, _1778));
    float _1880;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1853 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1460, _1464, _1467, _1470));
        float _1857 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1462, _1465, _1468, _1471));
        float _1861 = dot(vec4(_1837, _1838, _1839, 1.0), vec4(_1463, _1466, _1469, _1472));
        float _1868 = dot(vec4(cbModelParam._m0[39u]), vec4(_1837, _1838, _1839, 1.0));
        _1880 = dot(vec3(isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1880 = 1.0;
    }
    float _1891;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1882 = dot(vec4(cbModelParam._m0[40u]), vec4(_1837, _1838, _1839, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1882) ? 0.0 : (isnan(0.0) ? _1882 : max(0.0, _1882))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1895 = (_1891 * cbModelParam._m0[1u].x) + (_1880 * (1.0 - cbModelParam._m0[1u].x));
    float _1905 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1906 = isnan(_1905) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1905 : min(cbModelParam._m0[25u].z, _1905));
    float _1987;
    float _1989;
    float _1991;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1954 = fma(_1159, cbModelParam._m0[13u].z, fma(_1155, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1151)) + cbModelParam._m0[13u].w;
        float _1958 = fma(_1159, cbModelParam._m0[14u].z, fma(_1155, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1151)) + cbModelParam._m0[14u].w;
        float _1962 = fma(_1159, cbModelParam._m0[15u].z, fma(_1155, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1151)) + cbModelParam._m0[15u].w;
        float _1965 = fma(_1097, cbModelParam._m0[13u].z, fma(_1096, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1095));
        float _1968 = fma(_1097, cbModelParam._m0[14u].z, fma(_1096, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1095));
        float _1971 = fma(_1097, cbModelParam._m0[15u].z, fma(_1096, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1095));
        float _1999;
        if (_1965 > 0.0)
        {
            _1999 = abs((1.0 - _1954) / _1965);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1965 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1954 + 1.0) / _1965);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1999 = frontier_phi_14_12_ladder;
        }
        float _2202;
        if (_1968 > 0.0)
        {
            _2202 = abs((1.0 - _1958) / _1968);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1958 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2202 = frontier_phi_23_19_ladder;
        }
        float _2456;
        if (_1971 > 0.0)
        {
            _2456 = abs((1.0 - _1962) / _1971);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1962 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2456 = frontier_phi_35_30_ladder;
        }
        float _2458 = isnan(_2202) ? _1999 : (isnan(_1999) ? _2202 : min(_1999, _2202));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1965) + _1954;
        float _2464 = (_2459 * _1968) + _1958;
        float _2465 = (_2459 * _1971) + _1962;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2466;
        float _2470 = _2466 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 > _2470) || ((_2464 < _2468) || ((_2463 < _2468) || (_2463 > _2470))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2593 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2465, cbModelParam._m0[9u].z, fma(_2464, cbModelParam._m0[9u].y, _2463 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2465, cbModelParam._m0[10u].z, fma(_2464, cbModelParam._m0[10u].y, _2463 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2465, cbModelParam._m0[11u].z, fma(_2464, cbModelParam._m0[11u].y, _2463 * cbModelParam._m0[11u].x))), _1906);
            frontier_phi_13_35_ladder = _2593.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2593.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2593.x * cbModelParam._m0[1u].y;
        }
        _1987 = frontier_phi_13_35_ladder_2;
        _1989 = frontier_phi_13_35_ladder_1;
        _1991 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1095, _1096, _1097), _1906);
        _1987 = _1975.x * cbModelParam._m0[1u].y;
        _1989 = _1975.y * cbModelParam._m0[1u].y;
        _1991 = _1975.z * cbModelParam._m0[1u].y;
    }
    float _1995 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _1996 = isnan(_1995) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1995 : min(cbModelParam._m0[25u].w, _1995));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2050 = fma(_1159, cbModelParam._m0[21u].z, fma(_1155, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1151)) + cbModelParam._m0[21u].w;
        float _2054 = fma(_1159, cbModelParam._m0[22u].z, fma(_1155, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1151)) + cbModelParam._m0[22u].w;
        float _2058 = fma(_1159, cbModelParam._m0[23u].z, fma(_1155, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1151)) + cbModelParam._m0[23u].w;
        float _2061 = fma(_1097, cbModelParam._m0[21u].z, fma(_1096, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1095));
        float _2064 = fma(_1097, cbModelParam._m0[22u].z, fma(_1096, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1095));
        float _2067 = fma(_1097, cbModelParam._m0[23u].z, fma(_1096, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1095));
        float _2207;
        if (_2061 > 0.0)
        {
            _2207 = abs((1.0 - _2050) / _2061);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2061 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2050 + 1.0) / _2061);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2207 = frontier_phi_25_21_ladder;
        }
        float _2483;
        if (_2064 > 0.0)
        {
            _2483 = abs((1.0 - _2054) / _2064);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2054 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2483 = frontier_phi_37_32_ladder;
        }
        float _2696;
        if (_2067 > 0.0)
        {
            _2696 = abs((1.0 - _2058) / _2067);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2058 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2696 = frontier_phi_46_43_ladder;
        }
        float _2698 = isnan(_2483) ? _2207 : (isnan(_2207) ? _2483 : min(_2207, _2483));
        float _2699 = isnan(_2696) ? _2698 : (isnan(_2698) ? _2696 : min(_2698, _2696));
        float _2703 = (_2699 * _2061) + _2050;
        float _2704 = (_2699 * _2064) + _2054;
        float _2705 = (_2699 * _2067) + _2058;
        float _2706 = _2699 * 9.9999997473787516355514526367188e-05;
        float _2707 = (-1.0) - _2706;
        float _2709 = _2706 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2705 > _2709) || ((_2705 < _2707) || ((_2704 > _2709) || ((_2704 < _2707) || ((_2703 < _2707) || (_2703 > _2709))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2904 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2705, cbModelParam._m0[17u].z, fma(_2704, cbModelParam._m0[17u].y, _2703 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2705, cbModelParam._m0[18u].z, fma(_2704, cbModelParam._m0[18u].y, _2703 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2705, cbModelParam._m0[19u].z, fma(_2704, cbModelParam._m0[19u].y, _2703 * cbModelParam._m0[19u].x))), _1996);
            frontier_phi_22_46_ladder = _2904.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2904.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2904.x * cbModelParam._m0[1u].z;
        }
        _2086 = frontier_phi_22_46_ladder_2;
        _2088 = frontier_phi_22_46_ladder_1;
        _2090 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2070 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1095, _1096, _1097), _1996);
        _2086 = _2070.x * cbModelParam._m0[1u].z;
        _2088 = _2070.y * cbModelParam._m0[1u].z;
        _2090 = _2070.z * cbModelParam._m0[1u].z;
    }
    float _2103 = (((_1122 * _1071) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2105 = (((_1122 * _1073) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2107 = (((_1122 * _1074) + _1123) * _1087) * ((cbModelParam._m0[1u].w * (_2090 - _1991)) + _1991);
    float _2110 = fma(_2107, cbSceneParam._m0[89u].z, fma(_2105, cbSceneParam._m0[89u].y, _2103 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2107, cbSceneParam._m0[90u].z, fma(_2105, cbSceneParam._m0[90u].y, _2103 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2107, cbSceneParam._m0[91u].z, fma(_2105, cbSceneParam._m0[91u].y, _2103 * cbSceneParam._m0[91u].x));
    uvec4 _2126 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2128 = _2126.x * 14u;
    uint _2129 = _2128 + 13u;
    float _2136 = _1087 + (-1.0);
    float _2141 = (cbLight._m0[_2129].x * _2136) + 1.0;
    float _2142 = (cbLight._m0[_2129].y * _2136) + 1.0;
    float _2143 = (cbLight._m0[_2129].z * _2136) + 1.0;
    float _2144 = (cbLight._m0[_2129].w * _2136) + 1.0;
    uint _2145 = _2128 + 5u;
    float _2151 = isnan(1.0) ? _2142 : (isnan(_2142) ? 1.0 : min(_2142, 1.0));
    uint _2155 = _2128 + 4u;
    float _2161 = isnan(1.0) ? _2141 : (isnan(_2141) ? 1.0 : min(_2141, 1.0));
    uint _2165 = _2128 | 1u;
    float _2176 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_922, _923, _924));
    float _2179 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_922, _923, _924));
    float _4374 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _4385 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
    float _2184 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * 0.3183098733425140380859375;
    float _2186 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * 0.3183098733425140380859375;
    float _2193 = ((cbLight._m0[_2145].x * _2151) * _2186) + ((cbLight._m0[_2155].x * _2161) * _2184);
    float _2194 = ((_2151 * cbLight._m0[_2145].y) * _2186) + ((_2161 * cbLight._m0[_2155].y) * _2184);
    float _2195 = ((_2151 * cbLight._m0[_2145].z) * _2186) + ((_2161 * cbLight._m0[_2155].z) * _2184);
    uvec4 _2199 = floatBitsToUint(cbLight._m0[_2128 + 12u]);
    bool _2201 = _2199.x == 0u;
    float _2212;
    float _2214;
    float _2216;
    if (_2201)
    {
        _2212 = _2193;
        _2214 = _2194;
        _2216 = _2195;
    }
    else
    {
        uint _2220 = _2128 + 6u;
        float _2236 = (dot(vec3(cbLight._m0[_2128 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2237 = _2236 * _2236;
        float _4396 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _2238 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2239 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2212 = (((cbLight._m0[_2220].x * 0.3183098733425140380859375) * _2238) * _2239) + _2193;
        _2214 = (((cbLight._m0[_2220].y * 0.3183098733425140380859375) * _2238) * _2239) + _2194;
        _2216 = (((cbLight._m0[_2220].z * 0.3183098733425140380859375) * _2238) * _2239) + _2195;
    }
    bool _2219 = _2199.y == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2219)
    {
        _2257 = _2212;
        _2259 = _2214;
        _2261 = _2216;
    }
    else
    {
        uint _2427 = _2128 + 7u;
        float _2443 = (dot(vec3(cbLight._m0[_2128 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4412 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
        float _2446 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2257 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2212;
        _2259 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2214;
        _2261 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2216;
    }
    uint _2264 = _2128 + 8u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _925) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2128].x + _1001;
    float _2280 = cbLight._m0[_2128].y + _1002;
    float _2281 = cbLight._m0[_2128].z + _1003;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2128].xyz));
    float _4428 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
    float _4439 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _2293 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _2294 = dot(vec3(_922, _923, _924), vec3(_2286, _2287, _2288));
    float _4450 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
    float _2298 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2286, _2287, _2288));
    float _4461 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2302 = _2278 * _2278;
    float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0)))) * 5.0);
    float _2315 = 0.959999978542327880859375 - _1068;
    float _2317 = 0.959999978542327880859375 - _1069;
    float _2318 = 0.959999978542327880859375 - _1070;
    float _2325 = 1.0 - _2278;
    float _2336 = (0.5 / (((_2293 * ((_2292 * _2325) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2325) + _2278) * _2292))) * _2292;
    float _4472 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2338 = (isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
    uint _2349 = _2128 + 9u;
    float _2360 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _925) * 0.949999988079071044921875);
    float _2361 = _2360 * _2360;
    float _2362 = cbLight._m0[_2165].x + _1001;
    float _2363 = cbLight._m0[_2165].y + _1002;
    float _2364 = cbLight._m0[_2165].z + _1003;
    float _2368 = inversesqrt(dot(vec3(_2362, _2363, _2364), vec3(_2362, _2363, _2364)));
    float _2369 = _2368 * _2362;
    float _2370 = _2368 * _2363;
    float _2371 = _2368 * _2364;
    float _2372 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2165].xyz));
    float _4483 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2375 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _2376 = dot(vec3(_922, _923, _924), vec3(_2369, _2370, _2371));
    float _4494 = isnan(0.0) ? _2376 : (isnan(_2376) ? 0.0 : max(_2376, 0.0));
    float _2379 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    float _2380 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2369, _2370, _2371));
    float _4505 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2384 = _2361 * _2361;
    float _2388 = ((_2379 * _2379) * (_2384 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0)))) * 5.0);
    float _2402 = 1.0 - _2361;
    float _2412 = (0.5 / (((_2293 * ((_2375 * _2402) + _2361)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2402) + _2361) * _2375))) * _2375;
    float _4516 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2414 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_2384 / ((_2388 * _2388) * 3.141590118408203125));
    float _2424 = (((((_2395 * _2315) + _1071) * cbLight._m0[_2349].x) * _2414) * _2151) + (((((_2314 * _2315) + _1071) * cbLight._m0[_2264].x) * _2338) * _2161);
    float _2425 = (((((_2395 * _2317) + _1073) * cbLight._m0[_2349].y) * _2414) * _2151) + (((((_2314 * _2317) + _1073) * cbLight._m0[_2264].y) * _2338) * _2161);
    float _2426 = (((((_2395 * _2318) + _1074) * cbLight._m0[_2349].z) * _2414) * _2151) + (((((_2314 * _2318) + _1074) * cbLight._m0[_2264].z) * _2338) * _2161);
    float _2488;
    float _2490;
    float _2492;
    if (_2201)
    {
        _2488 = _2424;
        _2490 = _2425;
        _2492 = _2426;
    }
    else
    {
        uint _2494 = _2128 + 2u;
        uint _2498 = _2128 + 10u;
        float _2512 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2494].w)) * _925) * 0.949999988079071044921875);
        float _2513 = _2512 * _2512;
        float _2514 = cbLight._m0[_2494].x + _1001;
        float _2515 = cbLight._m0[_2494].y + _1002;
        float _2516 = cbLight._m0[_2494].z + _1003;
        float _2520 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
        float _2521 = _2520 * _2514;
        float _2522 = _2520 * _2515;
        float _2523 = _2520 * _2516;
        float _2524 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2494].xyz));
        float _4527 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2527 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _2528 = dot(vec3(_922, _923, _924), vec3(_2521, _2522, _2523));
        float _4538 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2531 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2532 = dot(vec3(cbLight._m0[_2494].xyz), vec3(_2521, _2522, _2523));
        float _4549 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2536 = _2513 * _2513;
        float _2540 = ((_2531 * _2531) * (_2536 + (-1.0))) + 1.0;
        float _2547 = exp2(log2(1.0 - (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) * 5.0);
        float _2554 = 1.0 - _2513;
        float _2564 = (0.5 / (((_2293 * ((_2527 * _2554) + _2513)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2554) + _2513) * _2527))) * _2527;
        float _4560 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2566 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_2536 / ((_2540 * _2540) * 3.141590118408203125));
        float _2567 = isnan(1.0) ? _2143 : (isnan(_2143) ? 1.0 : min(_2143, 1.0));
        _2488 = (((((_2547 * _2315) + _1071) * cbLight._m0[_2498].x) * _2566) * _2567) + _2424;
        _2490 = (((((_2547 * _2317) + _1073) * cbLight._m0[_2498].y) * _2566) * _2567) + _2425;
        _2492 = (((((_2547 * _2318) + _1074) * cbLight._m0[_2498].z) * _2566) * _2567) + _2426;
    }
    float _2602;
    float _2604;
    float _2606;
    if (_2219)
    {
        _2602 = _2488;
        _2604 = _2490;
        _2606 = _2492;
    }
    else
    {
        uint _2613 = _2128 + 3u;
        uint _2617 = _2128 + 11u;
        float _2631 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2613].w)) * _925) * 0.949999988079071044921875);
        float _2632 = _2631 * _2631;
        float _2633 = cbLight._m0[_2613].x + _1001;
        float _2634 = cbLight._m0[_2613].y + _1002;
        float _2635 = cbLight._m0[_2613].z + _1003;
        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
        float _2640 = _2639 * _2633;
        float _2641 = _2639 * _2634;
        float _2642 = _2639 * _2635;
        float _2643 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2613].xyz));
        float _4576 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2646 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
        float _2647 = dot(vec3(_922, _923, _924), vec3(_2640, _2641, _2642));
        float _4587 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2651 = dot(vec3(cbLight._m0[_2613].xyz), vec3(_2640, _2641, _2642));
        float _4598 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2655 = _2632 * _2632;
        float _2659 = ((_2650 * _2650) * (_2655 + (-1.0))) + 1.0;
        float _2666 = exp2(log2(1.0 - (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) * 5.0);
        float _2673 = 1.0 - _2632;
        float _2683 = (0.5 / (((_2293 * ((_2646 * _2673) + _2632)) + 9.9999999392252902907785028219223e-09) + (((_2293 * _2673) + _2632) * _2646))) * _2646;
        float _4609 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * (_2655 / ((_2659 * _2659) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2144 : (isnan(_2144) ? 1.0 : min(_2144, 1.0));
        _2602 = (((((_2666 * _2315) + _1071) * cbLight._m0[_2617].x) * _2685) * _2686) + _2488;
        _2604 = (((((_2666 * _2317) + _1073) * cbLight._m0[_2617].y) * _2685) * _2686) + _2490;
        _2606 = (((((_2666 * _2318) + _1074) * cbLight._m0[_2617].z) * _2685) * _2686) + _2492;
    }
    float _2821;
    float _2823;
    float _2825;
    float _2827;
    float _2829;
    float _2831;
    if (_2126.y == 0u)
    {
        float _2761 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2762 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2761;
        float _2763 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2761;
        float _2764 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2761;
        uvec4 _2776 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2777 = _2776.x;
        uint _2788 = uint((float(_2776.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1010) / _2777))) + floor(float(uint(cbSceneParam._m0[85u].x * _1009) / _2777)));
        float _2798 = (log2(_2764 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2799 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        uint _2802 = uint(isnan(14.0) ? _2799 : (isnan(_2799) ? 14.0 : min(_2799, 14.0)));
        uvec4 _2807 = texelFetch(g_lightClusterGridBuffer, int(((_2802 << 2u) + (_2788 << 6u)) >> 2u));
        uint _2808 = _2807.x;
        uint _2809 = _2776.z;
        float _2909;
        float _2911;
        float _2913;
        float _2915;
        float _2917;
        float _2919;
        if (((((1u << ((_2809 >> 4u) & 15u)) + 4294967295u) & _2808) == 0u) || ((_2809 & 240u) == 0u))
        {
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
            _2915 = 0.0;
            _2917 = 0.0;
            _2919 = 0.0;
        }
        else
        {
            float _2910;
            float _2912;
            float _2914;
            float _2916;
            float _2918;
            float _2920;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            float _3057 = 0.0;
            float _3058 = 0.0;
            uint _3059 = 0u;
            uint _3068;
            bool _3069;
            for (;;)
            {
                _3068 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3059 << 2u)) >> 2u)).x;
                _3069 = _3068 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3069)
                {
                    frontier_phi_61_pred = _3053;
                    frontier_phi_61_pred_1 = _3058;
                    frontier_phi_61_pred_2 = _3057;
                    frontier_phi_61_pred_3 = _3056;
                    frontier_phi_61_pred_4 = _3055;
                    frontier_phi_61_pred_5 = _3054;
                }
                else
                {
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    uint _3183;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3057;
                    _3182 = _3058;
                    _3183 = _3068;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    float _3113;
                    float _3114;
                    for (;;)
                    {
                        uint _3187 = uint(findLSB(_3183)) + (_3059 << 5u);
                        uint _3184 = (_3183 + 4294967295u) & _3183;
                        uint _3189 = _3187 * 48u;
                        vec4 _3203 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3189)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3189 + 3u)).x));
                        uint _3209 = (_3187 * 48u) + 4u;
                        vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3209)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3209 + 3u)).x));
                        uint _3228 = (_3187 * 48u) + 8u;
                        vec3 _3239 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3228)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3228 + 2u)).x));
                        float _3243 = _3203.x - _2762;
                        float _3244 = _3203.y - _2763;
                        float _3245 = _3203.z - _2764;
                        float _3246 = dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245));
                        float _3249 = inversesqrt(_3246);
                        float _3250 = _3249 * _3243;
                        float _3251 = _3249 * _3244;
                        float _3252 = _3249 * _3245;
                        float _3253 = dot(vec3(_1028, _1031, _1034), vec3(_3250, _3251, _3252));
                        float _3258 = 1.0 - (_3246 * _3203.w);
                        float _4635 = isnan(0.0) ? _3258 : (isnan(_3258) ? 0.0 : max(_3258, 0.0));
                        float _3259 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3260 = sqrt(_3246) * _3222.w;
                        float _3263 = 1.39999997615814208984375 / (_3260 + 1.39999997615814208984375);
                        float _3264 = _3263 * _3263;
                        float _3267 = ((1.0 - _3264) * _3253) + _3264;
                        float _3270 = _3260 * _3260;
                        float _3274 = ((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3259) / ((_3270 * 0.699999988079071044921875) + 1.0);
                        float _3278 = (-0.0) - _2762;
                        float _3279 = (-0.0) - _2763;
                        float _3280 = (-0.0) - _2764;
                        float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                        float _3285 = _3284 * _3278;
                        float _3286 = _3284 * _3279;
                        float _3287 = _3284 * _3280;
                        float _3295 = exp2(log2(1.0 / ((_3270 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _1103;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3285 + _3250;
                        float _3307 = _3286 + _3251;
                        float _3308 = _3287 + _3252;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_1028, _1031, _1034), vec3(_3285, _3286, _3287));
                        float _4651 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                        float _3320 = dot(vec3(_1028, _1031, _1034), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4662 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3263 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3253) + _3329;
                        float _4673 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4684 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3327 * _3327) * ((_3270 * 2.1991131305694580078125) + 3.141590118408203125))) * _3259;
                        _3112 = (_3274 * _3222.x) + _3180;
                        _3113 = (_3274 * _3222.y) + _3181;
                        _3114 = (_3274 * _3222.z) + _3182;
                        _3109 = (_3355 * _3239.x) + _3177;
                        _3110 = (_3355 * _3239.y) + _3178;
                        _3111 = (_3355 * _3239.z) + _3179;
                        if (_3184 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3113;
                            _3182 = _3114;
                            _3183 = _3184;
                        }
                    }
                    frontier_phi_61_pred = _3109;
                    frontier_phi_61_pred_1 = _3114;
                    frontier_phi_61_pred_2 = _3113;
                    frontier_phi_61_pred_3 = _3112;
                    frontier_phi_61_pred_4 = _3111;
                    frontier_phi_61_pred_5 = _3110;
                }
                _2910 = frontier_phi_61_pred;
                _2920 = frontier_phi_61_pred_1;
                _2918 = frontier_phi_61_pred_2;
                _2916 = frontier_phi_61_pred_3;
                _2914 = frontier_phi_61_pred_4;
                _2912 = frontier_phi_61_pred_5;
                uint _3060 = _3059 + 1u;
                if (_3060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3053 = _2910;
                    _3054 = _2912;
                    _3055 = _2914;
                    _3056 = _2916;
                    _3057 = _2918;
                    _3058 = _2920;
                    _3059 = _3060;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
            _2915 = _2916;
            _2917 = _2918;
            _2919 = _2920;
        }
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.z;
        uint _2926 = (_2924 >> 8u) & 15u;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((4294967295u << _2926) & _2808) == 0u)
        {
            _3021 = _2909;
            _3023 = _2911;
            _3025 = _2913;
            _3027 = _2915;
            _3029 = _2917;
            _3031 = _2919;
        }
        else
        {
            float _3046 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
            float _3047 = _3046 * _2762;
            float _3048 = _3046 * _2763;
            float _3049 = _3046 * _2764;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2926 < ((_2924 >> 12u) & 15u))
            {
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3032;
                float _3160 = _2909;
                float _3161 = _2911;
                float _3162 = _2913;
                float _3163 = _2915;
                float _3164 = _2917;
                float _3165 = _2919;
                uint _3166 = _2926;
                uint _3175;
                bool _3176;
                for (;;)
                {
                    _3175 = texelFetch(g_lightClassification, int((((_2802 << 5u) + (_2788 << 9u)) + (_3166 << 2u)) >> 2u)).x;
                    _3176 = _3175 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3176)
                    {
                        frontier_phi_67_pred = _3163;
                        frontier_phi_67_pred_1 = _3164;
                        frontier_phi_67_pred_2 = _3165;
                        frontier_phi_67_pred_3 = _3162;
                        frontier_phi_67_pred_4 = _3161;
                        frontier_phi_67_pred_5 = _3160;
                    }
                    else
                    {
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        float _3377 = _3164;
                        float _3378 = _3165;
                        uint _3379 = _3175;
                        uint _3380;
                        vec4 _3405;
                        float _3406;
                        vec4 _3421;
                        vec3 _3433;
                        vec4 _3448;
                        vec4 _3463;
                        float _3509;
                        bool _3510;
                        for (;;)
                        {
                            uint _3390 = ((_3166 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3379));
                            _3380 = (_3379 + 4294967295u) & _3379;
                            uint _3392 = _3390 * 40u;
                            _3405 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3392)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3392 + 3u)).x));
                            _3406 = _3405.w;
                            uint _3408 = (_3390 * 40u) + 4u;
                            _3421 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3408)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3408 + 3u)).x));
                            uint _3423 = (_3390 * 40u) + 8u;
                            _3433 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x));
                            uint _3435 = (_3390 * 40u) + 16u;
                            _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3450 = (_3390 * 40u) + 20u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3390 * 40u) + 24u;
                            vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3484 = (_3390 * 40u) + 28u;
                            vec4 _3497 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3484)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3484 + 3u)).x));
                            _3509 = fma(_2764, _3497.z, fma(_2763, _3497.y, _3497.x * _2762)) + _3497.w;
                            _3510 = !((fma(_2764, _3478.z, fma(_2763, _3478.y, _3478.x * _2762)) + _3478.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3510)
                            {
                                float _3537 = _3405.x - _2762;
                                float _3538 = _3405.y - _2763;
                                float _3539 = _3405.z - _2764;
                                float _3540 = dot(vec3(_3537, _3538, _3539), vec3(_3537, _3538, _3539));
                                float _3543 = inversesqrt(_3540);
                                float _3544 = _3543 * _3537;
                                float _3545 = _3543 * _3538;
                                float _3546 = _3543 * _3539;
                                float _3550 = 1.0 - (_3540 / (_3406 * _3406));
                                float _4695 = isnan(0.0) ? _3550 : (isnan(_3550) ? 0.0 : max(_3550, 0.0));
                                float _3551 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3555 = sqrt(_3540) * _3421.w;
                                float _3557 = 1.39999997615814208984375 / (_3555 + 1.39999997615814208984375);
                                float _3558 = _3557 * _3557;
                                float _3561 = ((1.0 - _3558) * dot(vec3(_3544, _3545, _3546), vec3(_1028, _1031, _1034))) + _3558;
                                float _3564 = _3555 * _3555;
                                float _3568 = (fma(_2764, _3448.z, fma(_2763, _3448.y, _3448.x * _2762)) + _3448.w) / _3509;
                                float _3569 = (fma(_2764, _3463.z, fma(_2763, _3463.y, _3463.x * _2762)) + _3463.w) / _3509;
                                float _3573 = 1.0 - dot(vec2(_3568, _3569), vec2(_3568, _3569));
                                float _4711 = isnan(0.0) ? _3573 : (isnan(_3573) ? 0.0 : max(_3573, 0.0));
                                float _3574 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
                                float _3575 = _3574 * (((isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0))) * _3551) / ((_3564 * 0.699999988079071044921875) + 1.0));
                                float _3587 = exp2(log2(1.0 / ((_3564 * 3.5) + 5.0)) * 0.25);
                                float _3588 = 1.0 - _1103;
                                float _3595 = sqrt(1.0 - ((1.0 - (_3588 * _3588)) * (1.0 - (_3587 * _3587))));
                                float _3596 = _3595 * _3595;
                                float _3597 = _3596 * _3596;
                                float _3598 = _3544 - _3047;
                                float _3599 = _3545 - _3048;
                                float _3600 = _3546 - _3049;
                                float _3604 = inversesqrt(dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600)));
                                float _3608 = dot(vec3(_1028, _1031, _1034), vec3((-0.0) - _3047, (-0.0) - _3048, (-0.0) - _3049));
                                float _4722 = isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0));
                                float _3611 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3612 = dot(vec3(_1028, _1031, _1034), vec3(_3604 * _3598, _3604 * _3599, _3604 * _3600));
                                float _4733 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3615 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
                                float _3619 = ((_3615 * _3615) * (_3597 + (-1.0))) + 1.0;
                                float _3620 = _3557 * _3596;
                                float _3621 = _3620 * _3620;
                                float _3627 = ((1.0 - _3621) * dot(vec3(_1028, _1031, _1034), vec3(_3544, _3545, _3546))) + _3621;
                                float _4744 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3628 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
                                float _3629 = 1.0 - _3596;
                                float _3639 = (0.5 / (((_3628 * ((_3611 * _3629) + _3596)) + 9.9999999392252902907785028219223e-09) + (((_3628 * _3629) + _3596) * _3611))) * _3628;
                                float _4755 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3649 = (_3574 * _3551) * (((_3597 * 3.1415927410125732421875) * (isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0)))) / ((_3619 * _3619) * ((_3564 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3649 * _3433.x;
                                frontier_phi_73_pred_1 = _3649 * _3433.y;
                                frontier_phi_73_pred_2 = _3575 * _3421.z;
                                frontier_phi_73_pred_3 = _3575 * _3421.y;
                                frontier_phi_73_pred_4 = _3575 * _3421.x;
                                frontier_phi_73_pred_5 = _3649 * _3433.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3653 = frontier_phi_73_pred;
                            _3654 = frontier_phi_73_pred_1;
                            _3658 = frontier_phi_73_pred_2;
                            _3657 = frontier_phi_73_pred_3;
                            _3656 = frontier_phi_73_pred_4;
                            _3655 = frontier_phi_73_pred_5;
                            _3363 = _3656 + _3376;
                            _3364 = _3657 + _3377;
                            _3365 = _3658 + _3378;
                            _3360 = _3653 + _3373;
                            _3361 = _3654 + _3374;
                            _3362 = _3655 + _3375;
                            if (_3380 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3380;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3363;
                        frontier_phi_67_pred_1 = _3364;
                        frontier_phi_67_pred_2 = _3365;
                        frontier_phi_67_pred_3 = _3362;
                        frontier_phi_67_pred_4 = _3361;
                        frontier_phi_67_pred_5 = _3360;
                    }
                    _3028 = frontier_phi_67_pred;
                    _3030 = frontier_phi_67_pred_1;
                    _3032 = frontier_phi_67_pred_2;
                    _3026 = frontier_phi_67_pred_3;
                    _3024 = frontier_phi_67_pred_4;
                    _3022 = frontier_phi_67_pred_5;
                    uint _3167 = _3166 + 1u;
                    if (_3167 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3160 = _3022;
                        _3161 = _3024;
                        _3162 = _3026;
                        _3163 = _3028;
                        _3164 = _3030;
                        _3165 = _3032;
                        _3166 = _3167;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            else
            {
                frontier_phi_55_56_ladder = _2917;
                frontier_phi_55_56_ladder_1 = _2919;
                frontier_phi_55_56_ladder_2 = _2915;
                frontier_phi_55_56_ladder_3 = _2913;
                frontier_phi_55_56_ladder_4 = _2911;
                frontier_phi_55_56_ladder_5 = _2909;
            }
            _3021 = frontier_phi_55_56_ladder_5;
            _3023 = frontier_phi_55_56_ladder_4;
            _3025 = frontier_phi_55_56_ladder_3;
            _3027 = frontier_phi_55_56_ladder_2;
            _3029 = frontier_phi_55_56_ladder;
            _3031 = frontier_phi_55_56_ladder_1;
        }
        float _3036 = isnan(1.0) ? _1087 : (isnan(_1087) ? 1.0 : min(_1087, 1.0));
        _2821 = (_3036 * _3027) + _2257;
        _2823 = (_3036 * _3029) + _2259;
        _2825 = (_3036 * _3031) + _2261;
        _2827 = ((_3021 * _1071) * _3036) + _2602;
        _2829 = ((_3023 * _1073) * _3036) + _2604;
        _2831 = ((_3025 * _1074) * _3036) + _2606;
    }
    else
    {
        _2821 = _2257;
        _2823 = _2259;
        _2825 = _2261;
        _2827 = _2602;
        _2829 = _2604;
        _2831 = _2606;
    }
    float _4771 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    float _4782 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _4793 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    uint _2851 = _281 + 6u;
    float _2859 = _1009 / cbSceneParam._m0[86u].x;
    float _2860 = _1010 / cbSceneParam._m0[86u].y;
    vec4 _2874 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2876 = _2874.x;
    float _2877 = _2874.y;
    float _2878 = _2874.z;
    float _2879 = _2874.w;
    float _2971;
    float _2973;
    float _2975;
    float _2977;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _2934 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _2935 = _2934 / _944;
        float _2946 = _2935 * _994;
        float _2947 = _995 * _2935;
        float _2948 = (-0.0) - _2947;
        float _2949 = _2935 * _996;
        float _2951 = (cbSceneParam._m0[77u].w * _2948) / _2934;
        float _2952 = _2951 + cbSceneParam._m0[79u].w;
        float _2953 = cbSceneParam._m0[79u].w - _2947;
        float _2959 = sqrt(((_2946 * _2946) + (_2947 * _2947)) + (_2949 * _2949));
        float _2962 = (1.0 - (cbSceneParam._m0[77u].w / _2934)) * _2959;
        float _2967 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2969 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3122;
        if (abs((_2948 - _2951) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3122 = ((((_2952 > 0.0) ? exp2(_2967 * _2952) : (2.0 - exp2(_2969 * _2952))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2962;
        }
        else
        {
            float _3082 = 1.0 / cbSceneParam._m0[80u].x;
            float _3083 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : max(_2952, _2953));
            float _3084 = isnan(_2953) ? _2952 : (isnan(_2952) ? _2953 : min(_2952, _2953));
            float _3093 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : min(_3083, 0.0));
            float _3094 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : min(_3084, 0.0));
            _3122 = ((abs(_2959 / _2948) * cbSceneParam._m0[80u].y) * ((((_3093 - _3094) * 2.0) - ((exp2(_2967 * (isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0)))) - exp2(_2967 * (isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))))) * _3082)) - ((exp2(_2969 * _3093) - exp2(_2969 * _3094)) * _3082))) + (_2962 * cbSceneParam._m0[80u].z);
        }
        vec4 _3124 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2859, _2860, 1.0), 0.0);
        float _3133 = exp2((_3122 * (-1.44269502162933349609375)) * (1.0 - _3124.w));
        float _3134 = log2(_3133);
        float _3150 = log2(_2879);
        _2971 = (exp2(_3150 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].x)) * _3124.x) / cbSceneParam._m0[78u].x)) + _2876;
        _2973 = (exp2(_3150 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].y)) * _3124.y) / cbSceneParam._m0[78u].y)) + _2877;
        _2975 = (exp2(_3150 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3134 * cbSceneParam._m0[78u].z)) * _3124.z) / cbSceneParam._m0[78u].z)) + _2878;
        _2977 = _3133 * _2879;
    }
    else
    {
        _2971 = _2876;
        _2973 = _2877;
        _2975 = _2878;
        _2977 = _2879;
    }
    float _2989 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2990 = _2989 == 3.0;
    float _2991 = log2(_2977);
    float _2998 = exp2(_2991 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2821 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1087))) + ((_2827 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _2999 = exp2(_2991 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2823 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1087))) + ((_2829 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3000 = exp2(_2991 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0))) * (_2825 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1087))) + ((_2831 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1895)) * cbPerFrame._m0[3u].x));
    float _3009 = (_2989 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3009 * (_2990 ? _2998 : (_2998 + (cbSceneParam._m0[72u].w * _2971)));
    SV_Target.y = _3009 * (_2990 ? _2999 : (_2999 + (cbSceneParam._m0[72u].w * _2973)));
    SV_Target.z = _3009 * (_2990 ? _3000 : (_3000 + (cbSceneParam._m0[72u].w * _2975)));
    SV_Target.w = cbInstanceData._m0[_2851].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2851].w;
}


