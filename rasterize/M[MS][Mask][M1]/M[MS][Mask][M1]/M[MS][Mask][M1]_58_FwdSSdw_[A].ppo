#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1469;
float _3874;
float _3875;
float _3876;
float _3877;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3886 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3897 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3908 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _391 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _391.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3919 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _462 = (_455 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _463 = (_455 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _464 = (_455 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _391.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3930 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    float _541 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _535;
    float _544 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _536;
    float _547 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _537;
    float _554 = ((_535 - _541) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) + _541;
    float _555 = ((_536 - _544) * (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) + _544;
    float _556 = ((_537 - _547) * (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0)))) + _547;
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _591 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _608 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _610 = _608.x;
    float _611 = _608.y;
    float _612 = _608.z;
    float _619 = ((_591.x - _610) * _455) + _610;
    float _620 = ((_591.y - _611) * _455) + _611;
    float _621 = ((_591.z - _612) * _455) + _612;
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _646 = ((_633.z - _621) * _528) + _621;
    float _649 = ((((_633.x - _619) * _528) + _619) * 2.0) + (-1.0);
    float _650 = ((((_633.y - _620) * _528) + _620) * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3941 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _688 = (_649 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_568.x * 2.0) + (-1.0)))) + (((_676.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _689 = (_650 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_568.y * 2.0) + (-1.0)))) + (((_676.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _733 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3952 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _734 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
    float _742 = ((((cbMtdParam._m0[10u].x - _554) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _734) + _554;
    float _743 = ((((cbMtdParam._m0[10u].y - _555) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _734) + _555;
    float _744 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _556)) * _734) + _556;
    vec4 _770 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _772 = _770.x;
    float _790 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _772) * _455) + _772;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _790) * _528) + _790;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _808) * cbMtdParam._m0[19u].z) + _808;
    float _814 = _812 - (_812 * _734);
    float _819 = (((_568.z - _646) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _646;
    float _823 = ((_676.z - _819) * cbMtdParam._m0[19u].w) + _819;
    float _827 = ((cbMtdParam._m0[23u].x - _823) * _734) + _823;
    vec4 _846 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _852 = (_846.x * 2.0) + (-1.0);
    float _853 = (_846.y * 2.0) + (-1.0);
    float _854 = dot(vec2(_852, _853), vec2(_852, _853));
    float _3963 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _870 = (_734 * (((cbMtdParam._m0[22u].z * _688) - _688) + _852)) + _688;
    float _871 = (_734 * (((cbMtdParam._m0[22u].z * _689) - _689) + _853)) + _689;
    float _872 = (_734 * (sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) - _656)) + _656;
    float _876 = cbMtdParam._m0[22u].x + _676.w;
    float _879 = fma(_872, _257 * NORMAL.x, fma(_871, _264 * TANGENT.x, (_250 * _242) * _870));
    float _882 = fma(_872, _257 * NORMAL.y, fma(_871, _264 * TANGENT.y, (_250 * _243) * _870));
    float _885 = fma(_872, _257 * NORMAL.z, fma(_871, _264 * TANGENT.z, (_250 * _244) * _870));
    float _889 = inversesqrt(dot(vec3(_879, _882, _885), vec3(_879, _882, _885)));
    float _890 = _889 * _879;
    float _891 = _889 * _882;
    float _892 = _889 * _885;
    float _3974 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _893 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _3996 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4007 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4018 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4029 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _898 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _912 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _962 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _952);
    float _963 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _952);
    float _964 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _952);
    float _968 = inversesqrt(dot(vec3(_962, _963, _964), vec3(_962, _963, _964)));
    float _969 = _962 * _968;
    float _970 = _963 * _968;
    float _971 = _964 * _968;
    vec4 _976 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _978 = _976.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1150 = sqrt(((_962 * _962) + (_963 * _963)) + (_964 * _964));
        float _1156 = (cbMatDynParam._m0[5u].x * _1150) + cbMatDynParam._m0[5u].y;
        float _4040 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1161 = (cbMatDynParam._m0[5u].z * _1150) + cbMatDynParam._m0[5u].w;
        float _4051 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) - _1157)) + _1157) < ((_978 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _989 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _990 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1008 = fma(_892, cbSceneParam._m0[5u].z, fma(_891, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _890));
    float _1011 = fma(_892, cbSceneParam._m0[6u].z, fma(_891, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _890));
    float _1014 = fma(_892, cbSceneParam._m0[7u].z, fma(_891, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _890));
    uint _1027 = _289 + 9u;
    uint _1028 = _1027 + uint(cbMatDynParam._m0[0u].w);
    float _1034 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1028].x;
    float _1035 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1028].y;
    float _1036 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_1028].z;
    float _4062 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _1037 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1038 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1039 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _1040 = 1.0 - _898;
    float _1041 = _1037 * _1040;
    float _1042 = _1038 * _1040;
    float _1043 = _1039 * _1040;
    float _1048 = (_1037 + (-0.039999999105930328369140625)) * _898;
    float _1049 = (_1038 + (-0.039999999105930328369140625)) * _898;
    float _1050 = (_1039 + (-0.039999999105930328369140625)) * _898;
    float _1051 = _1048 + 0.039999999105930328369140625;
    float _1053 = _1049 + 0.039999999105930328369140625;
    float _1054 = _1050 + 0.039999999105930328369140625;
    vec4 _1063 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _989, cbSceneParam._m0[86u].y * _990));
    float _1067 = ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * TEXCOORD_5.w) * _1063.x;
    float _1068 = dot(vec3(_890, _891, _892), vec3(_969, _970, _971));
    float _1071 = _1068 * 2.0;
    float _1075 = (_1071 * _890) - _969;
    float _1076 = (_1071 * _891) - _970;
    float _1077 = (_1071 * _892) - _971;
    float _1081 = abs(dot(vec3(_969, _970, _971), vec3(_890, _891, _892)));
    float _4095 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _1083 = sqrt(_893);
    float _1096 = exp2((_1083 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1083 * 3.0));
    float _1102 = (1.0 - _1096) * ((_1083 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1103 = _1096 * _1083;
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1468;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1193 = fma(_1139, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1131));
        float _1197 = fma(_1139, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1131));
        float _1201 = fma(_1139, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1131));
        float _1226 = _1131 + _890;
        float _1227 = _1135 + _891;
        float _1228 = _1139 + _892;
        float _1238 = fma(_1228, cbModelParam._m0[26u].z, fma(_1227, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1226)) - _1193;
        float _1239 = fma(_1228, cbModelParam._m0[27u].z, fma(_1227, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1226)) - _1197;
        float _1240 = fma(_1228, cbModelParam._m0[28u].z, fma(_1227, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1226)) - _1201;
        float _1244 = inversesqrt(dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240)));
        float _1257 = ((_1244 * _1238) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1193 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1244 * _1239) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1197 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1244 * _1240) / cbModelParam._m0[34u].z) + ((((((_1201 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1296 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1262.x + (-0.5));
        float _1298 = _1296 * (_1262.y + (-0.5));
        float _1299 = _1296 * (_1262.z + (-0.5));
        float _1306 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1269.x + (-0.5));
        float _1308 = _1306 * (_1269.y + (-0.5));
        float _1309 = _1306 * (_1269.z + (-0.5));
        float _1316 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1276.x + (-0.5));
        float _1318 = _1316 * (_1276.y + (-0.5));
        float _1319 = _1316 * (_1276.z + (-0.5));
        float _1326 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1283.x + (-0.5));
        float _1328 = _1326 * (_1283.y + (-0.5));
        float _1329 = _1326 * (_1283.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1350 = (dot(vec3(_890, _891, _892), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1360 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4143 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1362 + 1.0))) + _1367) * _1330;
        float _1377 = _1298 * 0.5;
        float _1378 = _1308 * 0.5;
        float _1379 = _1318 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_890, _891, _892), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4176 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1404 + 1.0))) + _1409) * _1331;
        float _1419 = _1299 * 0.5;
        float _1420 = _1309 * 0.5;
        float _1421 = _1319 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_890, _891, _892), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4209 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1446 + 1.0))) + _1451) * _1332;
        _1468 = _1299;
        _1470 = _1298;
        _1471 = _1297;
        _1472 = _1309;
        _1473 = _1308;
        _1474 = _1307;
        _1475 = _1319;
        _1476 = _1318;
        _1477 = _1317;
        _1478 = _1332;
        _1479 = _1331;
        _1480 = _1330;
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1469;
        _1470 = _1469;
        _1471 = _1469;
        _1472 = _1469;
        _1473 = _1469;
        _1474 = _1469;
        _1475 = _1469;
        _1476 = _1469;
        _1477 = _1469;
        _1478 = _1469;
        _1479 = _1469;
        _1480 = _1469;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1510 = fma(_1139, cbModelParam._m0[30u].z, fma(_1135, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1131));
        float _1514 = fma(_1139, cbModelParam._m0[31u].z, fma(_1135, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1131));
        float _1518 = fma(_1139, cbModelParam._m0[32u].z, fma(_1135, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1131));
        float _1541 = _1131 + _890;
        float _1542 = _1135 + _891;
        float _1543 = _1139 + _892;
        float _1553 = fma(_1543, cbModelParam._m0[30u].z, fma(_1542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1541)) - _1510;
        float _1554 = fma(_1543, cbModelParam._m0[31u].z, fma(_1542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1541)) - _1514;
        float _1555 = fma(_1543, cbModelParam._m0[32u].z, fma(_1542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1541)) - _1518;
        float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
        float _1572 = ((_1559 * _1553) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1510 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1559 * _1554) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1514 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1559 * _1555) / cbModelParam._m0[35u].z) + ((((((_1518 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1576 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1572, _1573, _1574), 0.0);
        float _1609 = exp2((_1576.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1576.x + (-0.5));
        float _1611 = _1609 * (_1576.y + (-0.5));
        float _1612 = _1609 * (_1576.z + (-0.5));
        float _1619 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1620 = _1619 * (_1583.x + (-0.5));
        float _1621 = _1619 * (_1583.y + (-0.5));
        float _1622 = _1619 * (_1583.z + (-0.5));
        float _1629 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1630 = _1629 * (_1590.x + (-0.5));
        float _1631 = _1629 * (_1590.y + (-0.5));
        float _1632 = _1629 * (_1590.z + (-0.5));
        float _1639 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1640 = _1639 * (_1597.x + (-0.5));
        float _1641 = _1639 * (_1597.y + (-0.5));
        float _1642 = _1639 * (_1597.z + (-0.5));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = _1610 * 0.5;
        float _1647 = _1620 * 0.5;
        float _1648 = _1630 * 0.5;
        float _1649 = dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648));
        float _1654 = (_1649 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1649);
        float _1662 = (dot(vec3(_890, _891, _892), vec3(_1654 * _1646, _1654 * _1647, _1654 * _1648)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1671 = sqrt(((_1647 * _1647) + (_1646 * _1646)) + (_1648 * _1648)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
        float _1672 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1673 = _1672 * 2.0;
        float _1677 = (1.0 - _1672) / (_1672 + 1.0);
        float _4272 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1678 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1687 = ((((1.0 - _1678) * (_1673 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1673 + 1.0))) + _1678) * _1643;
        float _1688 = _1611 * 0.5;
        float _1689 = _1621 * 0.5;
        float _1690 = _1631 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_890, _891, _892), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4305 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1715 + 1.0))) + _1720) * _1644;
        float _1730 = _1612 * 0.5;
        float _1731 = _1622 * 0.5;
        float _1732 = _1632 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_890, _891, _892), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4338 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1757 + 1.0))) + _1762) * _1645;
        _1779 = _1612;
        _1780 = _1611;
        _1781 = _1610;
        _1782 = _1622;
        _1783 = _1621;
        _1784 = _1620;
        _1785 = _1632;
        _1786 = _1631;
        _1787 = _1630;
        _1788 = _1645;
        _1789 = _1644;
        _1790 = _1643;
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
    }
    else
    {
        _1779 = _1469;
        _1780 = _1469;
        _1781 = _1469;
        _1782 = _1469;
        _1783 = _1469;
        _1784 = _1469;
        _1785 = _1469;
        _1786 = _1469;
        _1787 = _1469;
        _1788 = _1469;
        _1789 = _1469;
        _1790 = _1469;
        _1791 = 0.0;
        _1792 = 0.0;
        _1793 = 0.0;
    }
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1481)) + _1481;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1482)) + _1482;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1483)) + _1483;
    float _1826 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1803 * cbSceneParam._m0[89u].x));
    float _1829 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1803 * cbSceneParam._m0[90u].x));
    float _1832 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1803));
    float _1847 = _1075 * 0.5;
    float _1848 = _1076 * 0.5;
    float _1849 = _1077 * 0.5;
    float _1850 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1853 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1856 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1890;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1863 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1468, _1472, _1475, _1478));
        float _1867 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1470, _1473, _1476, _1479));
        float _1871 = dot(vec4(_1847, _1848, _1849, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1878 = dot(vec4(cbModelParam._m0[39u]), vec4(_1847, _1848, _1849, 1.0));
        _1890 = dot(vec3(isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0)), isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1878) ? 0.0 : (isnan(0.0) ? _1878 : max(0.0, _1878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1890 = 1.0;
    }
    float _1901;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1892 = dot(vec4(cbModelParam._m0[40u]), vec4(_1847, _1848, _1849, 1.0));
        _1901 = dot(vec3(isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)), isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1892) ? 0.0 : (isnan(0.0) ? _1892 : max(0.0, _1892))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1901 = 1.0;
    }
    float _1905 = (_1901 * cbModelParam._m0[1u].x) + (_1890 * (1.0 - cbModelParam._m0[1u].x));
    float _1915 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _893);
    float _1916 = isnan(_1915) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1915 : min(cbModelParam._m0[25u].z, _1915));
    float _1998;
    float _2000;
    float _2002;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1965 = fma(_1139, cbModelParam._m0[13u].z, fma(_1135, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1131)) + cbModelParam._m0[13u].w;
        float _1969 = fma(_1139, cbModelParam._m0[14u].z, fma(_1135, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1131)) + cbModelParam._m0[14u].w;
        float _1973 = fma(_1139, cbModelParam._m0[15u].z, fma(_1135, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1131)) + cbModelParam._m0[15u].w;
        float _1976 = fma(_1077, cbModelParam._m0[13u].z, fma(_1076, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1075));
        float _1979 = fma(_1077, cbModelParam._m0[14u].z, fma(_1076, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1075));
        float _1982 = fma(_1077, cbModelParam._m0[15u].z, fma(_1076, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1075));
        float _2010;
        if (_1976 > 0.0)
        {
            _2010 = abs((1.0 - _1965) / _1976);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1965 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2010 = frontier_phi_17_15_ladder;
        }
        float _2234;
        if (_1979 > 0.0)
        {
            _2234 = abs((1.0 - _1969) / _1979);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1969 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2234 = frontier_phi_26_22_ladder;
        }
        float _2491;
        if (_1982 > 0.0)
        {
            _2491 = abs((1.0 - _1973) / _1982);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1973 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2491 = frontier_phi_38_33_ladder;
        }
        float _2493 = isnan(_2234) ? _2010 : (isnan(_2010) ? _2234 : min(_2010, _2234));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1976) + _1965;
        float _2499 = (_2494 * _1979) + _1969;
        float _2500 = (_2494 * _1982) + _1973;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2503 = (-1.0) - _2501;
        float _2505 = _2501 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2500 > _2505) || ((_2500 < _2503) || ((_2499 > _2505) || ((_2499 < _2503) || ((_2498 < _2503) || (_2498 > _2505))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2500, cbModelParam._m0[9u].z, fma(_2499, cbModelParam._m0[9u].y, _2498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2500, cbModelParam._m0[10u].z, fma(_2499, cbModelParam._m0[10u].y, _2498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2500, cbModelParam._m0[11u].z, fma(_2499, cbModelParam._m0[11u].y, _2498 * cbModelParam._m0[11u].x))), _1916);
            frontier_phi_16_38_ladder = _2628.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2628.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2628.x * cbModelParam._m0[1u].y;
        }
        _1998 = frontier_phi_16_38_ladder_2;
        _2000 = frontier_phi_16_38_ladder_1;
        _2002 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1986 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1075, _1076, _1077), _1916);
        _1998 = _1986.x * cbModelParam._m0[1u].y;
        _2000 = _1986.y * cbModelParam._m0[1u].y;
        _2002 = _1986.z * cbModelParam._m0[1u].y;
    }
    float _2006 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _893);
    float _2007 = isnan(_2006) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2006 : min(cbModelParam._m0[25u].w, _2006));
    float _2097;
    float _2099;
    float _2101;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2061 = fma(_1139, cbModelParam._m0[21u].z, fma(_1135, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1131)) + cbModelParam._m0[21u].w;
        float _2065 = fma(_1139, cbModelParam._m0[22u].z, fma(_1135, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1131)) + cbModelParam._m0[22u].w;
        float _2069 = fma(_1139, cbModelParam._m0[23u].z, fma(_1135, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1131)) + cbModelParam._m0[23u].w;
        float _2072 = fma(_1077, cbModelParam._m0[21u].z, fma(_1076, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1075));
        float _2075 = fma(_1077, cbModelParam._m0[22u].z, fma(_1076, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1075));
        float _2078 = fma(_1077, cbModelParam._m0[23u].z, fma(_1076, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1075));
        float _2239;
        if (_2072 > 0.0)
        {
            _2239 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2239 = frontier_phi_28_24_ladder;
        }
        float _2518;
        if (_2075 > 0.0)
        {
            _2518 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2518 = frontier_phi_40_35_ladder;
        }
        float _2731;
        if (_2078 > 0.0)
        {
            _2731 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2731 = frontier_phi_49_46_ladder;
        }
        float _2733 = isnan(_2518) ? _2239 : (isnan(_2239) ? _2518 : min(_2239, _2518));
        float _2734 = isnan(_2731) ? _2733 : (isnan(_2733) ? _2731 : min(_2733, _2731));
        float _2738 = (_2734 * _2072) + _2061;
        float _2739 = (_2734 * _2075) + _2065;
        float _2740 = (_2734 * _2078) + _2069;
        float _2741 = _2734 * 9.9999997473787516355514526367188e-05;
        float _2742 = (-1.0) - _2741;
        float _2744 = _2741 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2740 > _2744) || ((_2740 < _2742) || ((_2739 > _2744) || ((_2739 < _2742) || ((_2738 < _2742) || (_2738 > _2744))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2939 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2740, cbModelParam._m0[17u].z, fma(_2739, cbModelParam._m0[17u].y, _2738 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2740, cbModelParam._m0[18u].z, fma(_2739, cbModelParam._m0[18u].y, _2738 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2740, cbModelParam._m0[19u].z, fma(_2739, cbModelParam._m0[19u].y, _2738 * cbModelParam._m0[19u].x))), _2007);
            frontier_phi_25_49_ladder = _2939.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2939.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2939.x * cbModelParam._m0[1u].z;
        }
        _2097 = frontier_phi_25_49_ladder_2;
        _2099 = frontier_phi_25_49_ladder_1;
        _2101 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2081 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1075, _1076, _1077), _2007);
        _2097 = _2081.x * cbModelParam._m0[1u].z;
        _2099 = _2081.y * cbModelParam._m0[1u].z;
        _2101 = _2081.z * cbModelParam._m0[1u].z;
    }
    float _2114 = (((_1102 * _1051) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2097 - _1998)) + _1998);
    float _2116 = (((_1102 * _1053) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2099 - _2000)) + _2000);
    float _2118 = (((_1102 * _1054) + _1103) * _1067) * ((cbModelParam._m0[1u].w * (_2101 - _2002)) + _2002);
    float _2121 = fma(_2118, cbSceneParam._m0[89u].z, fma(_2116, cbSceneParam._m0[89u].y, _2114 * cbSceneParam._m0[89u].x));
    float _2124 = fma(_2118, cbSceneParam._m0[90u].z, fma(_2116, cbSceneParam._m0[90u].y, _2114 * cbSceneParam._m0[90u].x));
    float _2127 = fma(_2118, cbSceneParam._m0[91u].z, fma(_2116, cbSceneParam._m0[91u].y, _2114 * cbSceneParam._m0[91u].x));
    vec4 _2135 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_989, _990));
    float _2137 = _2135.w;
    float _2149 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2137);
    float _2150 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2137);
    float _2151 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2137);
    uvec4 _2155 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2157 = _2155.x * 14u;
    uint _2158 = _2157 + 13u;
    float _2165 = _1067 + (-1.0);
    float _2170 = (cbLight._m0[_2158].x * _2165) + 1.0;
    float _2171 = (cbLight._m0[_2158].y * _2165) + 1.0;
    float _2172 = (cbLight._m0[_2158].z * _2165) + 1.0;
    float _2173 = (cbLight._m0[_2158].w * _2165) + 1.0;
    uint _2174 = _2157 + 5u;
    float _2180 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2184 = _2157 + 4u;
    float _2193 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2197 = _2157 | 1u;
    float _2208 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_890, _891, _892));
    float _2211 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_890, _891, _892));
    float _4474 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _4485 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2218 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2225 = ((cbLight._m0[_2174].x * _2180) * _2218) + (((cbLight._m0[_2184].x * _2149) * _2193) * _2216);
    float _2226 = ((_2180 * cbLight._m0[_2174].y) * _2218) + (((cbLight._m0[_2184].y * _2150) * _2193) * _2216);
    float _2227 = ((_2180 * cbLight._m0[_2174].z) * _2218) + (((cbLight._m0[_2184].z * _2151) * _2193) * _2216);
    uvec4 _2231 = floatBitsToUint(cbLight._m0[_2157 + 12u]);
    bool _2233 = _2231.x == 0u;
    float _2244;
    float _2246;
    float _2248;
    if (_2233)
    {
        _2244 = _2225;
        _2246 = _2226;
        _2248 = _2227;
    }
    else
    {
        uint _2252 = _2157 + 6u;
        float _2268 = (dot(vec3(cbLight._m0[_2157 + 2u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2269 = _2268 * _2268;
        float _4496 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
        float _2270 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2271 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2244 = (((cbLight._m0[_2252].x * 0.3183098733425140380859375) * _2270) * _2271) + _2225;
        _2246 = (((cbLight._m0[_2252].y * 0.3183098733425140380859375) * _2270) * _2271) + _2226;
        _2248 = (((cbLight._m0[_2252].z * 0.3183098733425140380859375) * _2270) * _2271) + _2227;
    }
    bool _2251 = _2231.y == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2251)
    {
        _2289 = _2244;
        _2291 = _2246;
        _2293 = _2248;
    }
    else
    {
        uint _2462 = _2157 + 7u;
        float _2478 = (dot(vec3(cbLight._m0[_2157 + 3u].xyz), vec3(_890, _891, _892)) * 0.5) + 0.5;
        float _2479 = _2478 * _2478;
        float _4512 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
        float _2480 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2481 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2289 = (((cbLight._m0[_2462].x * 0.3183098733425140380859375) * _2480) * _2481) + _2244;
        _2291 = (((cbLight._m0[_2462].y * 0.3183098733425140380859375) * _2480) * _2481) + _2246;
        _2293 = (((cbLight._m0[_2462].z * 0.3183098733425140380859375) * _2480) * _2481) + _2248;
    }
    uint _2296 = _2157 + 8u;
    float _2309 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2157].w)) * _893) * 0.949999988079071044921875);
    float _2310 = _2309 * _2309;
    float _2311 = cbLight._m0[_2157].x + _969;
    float _2312 = cbLight._m0[_2157].y + _970;
    float _2313 = cbLight._m0[_2157].z + _971;
    float _2317 = inversesqrt(dot(vec3(_2311, _2312, _2313), vec3(_2311, _2312, _2313)));
    float _2318 = _2317 * _2311;
    float _2319 = _2317 * _2312;
    float _2320 = _2317 * _2313;
    float _2321 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2157].xyz));
    float _4528 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2324 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _2325 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2326 = dot(vec3(_890, _891, _892), vec3(_2318, _2319, _2320));
    float _4550 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2329 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2330 = dot(vec3(cbLight._m0[_2157].xyz), vec3(_2318, _2319, _2320));
    float _4561 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2334 = _2310 * _2310;
    float _2338 = ((_2329 * _2329) * (_2334 + (-1.0))) + 1.0;
    float _2346 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2347 = 0.959999978542327880859375 - _1048;
    float _2349 = 0.959999978542327880859375 - _1049;
    float _2350 = 0.959999978542327880859375 - _1050;
    float _2357 = 1.0 - _2310;
    float _2368 = (0.5 / (((_2325 * ((_2324 * _2357) + _2310)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2357) + _2310) * _2324))) * _2324;
    float _4572 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2370 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2334 / ((_2338 * _2338) * 3.141590118408203125));
    uint _2384 = _2157 + 9u;
    float _2395 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2197].w)) * _893) * 0.949999988079071044921875);
    float _2396 = _2395 * _2395;
    float _2397 = cbLight._m0[_2197].x + _969;
    float _2398 = cbLight._m0[_2197].y + _970;
    float _2399 = cbLight._m0[_2197].z + _971;
    float _2403 = inversesqrt(dot(vec3(_2397, _2398, _2399), vec3(_2397, _2398, _2399)));
    float _2404 = _2403 * _2397;
    float _2405 = _2403 * _2398;
    float _2406 = _2403 * _2399;
    float _2407 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2197].xyz));
    float _4583 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2411 = dot(vec3(_890, _891, _892), vec3(_2404, _2405, _2406));
    float _4594 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2414 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2415 = dot(vec3(cbLight._m0[_2197].xyz), vec3(_2404, _2405, _2406));
    float _4605 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
    float _2419 = _2396 * _2396;
    float _2423 = ((_2414 * _2414) * (_2419 + (-1.0))) + 1.0;
    float _2430 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2437 = 1.0 - _2396;
    float _2447 = (0.5 / (((_2325 * ((_2410 * _2437) + _2396)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2437) + _2396) * _2410))) * _2410;
    float _4616 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2449 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2419 / ((_2423 * _2423) * 3.141590118408203125));
    float _2459 = (((((_2430 * _2347) + _1051) * cbLight._m0[_2384].x) * _2449) * _2180) + ((((cbLight._m0[_2296].x * _2149) * ((_2346 * _2347) + _1051)) * _2370) * _2193);
    float _2460 = (((((_2430 * _2349) + _1053) * cbLight._m0[_2384].y) * _2449) * _2180) + ((((cbLight._m0[_2296].y * _2150) * ((_2346 * _2349) + _1053)) * _2370) * _2193);
    float _2461 = (((((_2430 * _2350) + _1054) * cbLight._m0[_2384].z) * _2449) * _2180) + ((((cbLight._m0[_2296].z * _2151) * ((_2346 * _2350) + _1054)) * _2370) * _2193);
    float _2523;
    float _2525;
    float _2527;
    if (_2233)
    {
        _2523 = _2459;
        _2525 = _2460;
        _2527 = _2461;
    }
    else
    {
        uint _2529 = _2157 + 2u;
        uint _2533 = _2157 + 10u;
        float _2547 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2529].w)) * _893) * 0.949999988079071044921875);
        float _2548 = _2547 * _2547;
        float _2549 = cbLight._m0[_2529].x + _969;
        float _2550 = cbLight._m0[_2529].y + _970;
        float _2551 = cbLight._m0[_2529].z + _971;
        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
        float _2556 = _2555 * _2549;
        float _2557 = _2555 * _2550;
        float _2558 = _2555 * _2551;
        float _2559 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2529].xyz));
        float _4627 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2563 = dot(vec3(_890, _891, _892), vec3(_2556, _2557, _2558));
        float _4638 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2566 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2567 = dot(vec3(cbLight._m0[_2529].xyz), vec3(_2556, _2557, _2558));
        float _4649 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        float _2571 = _2548 * _2548;
        float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
        float _2582 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
        float _2589 = 1.0 - _2548;
        float _2599 = (0.5 / (((_2325 * ((_2562 * _2589) + _2548)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2589) + _2548) * _2562))) * _2562;
        float _4660 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2601 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
        float _2602 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2523 = (((((_2582 * _2347) + _1051) * cbLight._m0[_2533].x) * _2601) * _2602) + _2459;
        _2525 = (((((_2582 * _2349) + _1053) * cbLight._m0[_2533].y) * _2601) * _2602) + _2460;
        _2527 = (((((_2582 * _2350) + _1054) * cbLight._m0[_2533].z) * _2601) * _2602) + _2461;
    }
    float _2637;
    float _2639;
    float _2641;
    if (_2251)
    {
        _2637 = _2523;
        _2639 = _2525;
        _2641 = _2527;
    }
    else
    {
        uint _2648 = _2157 + 3u;
        uint _2652 = _2157 + 11u;
        float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2648].w)) * _893) * 0.949999988079071044921875);
        float _2667 = _2666 * _2666;
        float _2668 = cbLight._m0[_2648].x + _969;
        float _2669 = cbLight._m0[_2648].y + _970;
        float _2670 = cbLight._m0[_2648].z + _971;
        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
        float _2675 = _2674 * _2668;
        float _2676 = _2674 * _2669;
        float _2677 = _2674 * _2670;
        float _2678 = dot(vec3(_890, _891, _892), vec3(cbLight._m0[_2648].xyz));
        float _4676 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2681 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2682 = dot(vec3(_890, _891, _892), vec3(_2675, _2676, _2677));
        float _4687 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2686 = dot(vec3(cbLight._m0[_2648].xyz), vec3(_2675, _2676, _2677));
        float _4698 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2690 = _2667 * _2667;
        float _2694 = ((_2685 * _2685) * (_2690 + (-1.0))) + 1.0;
        float _2701 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2708 = 1.0 - _2667;
        float _2718 = (0.5 / (((_2325 * ((_2681 * _2708) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2325 * _2708) + _2667) * _2681))) * _2681;
        float _4709 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2720 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2690 / ((_2694 * _2694) * 3.141590118408203125));
        float _2721 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2637 = (((((_2701 * _2347) + _1051) * cbLight._m0[_2652].x) * _2720) * _2721) + _2523;
        _2639 = (((((_2701 * _2349) + _1053) * cbLight._m0[_2652].y) * _2720) * _2721) + _2525;
        _2641 = (((((_2701 * _2350) + _1054) * cbLight._m0[_2652].z) * _2720) * _2721) + _2527;
    }
    float _2856;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    float _2866;
    if (_2155.y == 0u)
    {
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2796;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2796;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2796;
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _990) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _989) / _2812)));
        float _2833 = (log2(_2799 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2944 = 0.0;
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
        }
        else
        {
            float _2945;
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _3097 = 0.0;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            uint _3103 = 0u;
            uint _3112;
            bool _3113;
            for (;;)
            {
                _3112 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                _3113 = _3112 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3113)
                {
                    frontier_phi_66_pred = _3097;
                    frontier_phi_66_pred_1 = _3102;
                    frontier_phi_66_pred_2 = _3101;
                    frontier_phi_66_pred_3 = _3100;
                    frontier_phi_66_pred_4 = _3099;
                    frontier_phi_66_pred_5 = _3098;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3097;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3112;
                    float _3169;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3103 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _2797;
                        float _3309 = _3268.y - _2798;
                        float _3310 = _3268.z - _2799;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_1008, _1011, _1014), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4735 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _2797;
                        float _3344 = (-0.0) - _2798;
                        float _3345 = (-0.0) - _2799;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3360 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3361 = 1.0 - _1083;
                        float _3368 = sqrt(1.0 - ((1.0 - (_3361 * _3361)) * (1.0 - (_3360 * _3360))));
                        float _3369 = _3368 * _3368;
                        float _3370 = _3369 * _3369;
                        float _3371 = _3350 + _3315;
                        float _3372 = _3351 + _3316;
                        float _3373 = _3352 + _3317;
                        float _3377 = inversesqrt(dot(vec3(_3371, _3372, _3373), vec3(_3371, _3372, _3373)));
                        float _3381 = dot(vec3(_1008, _1011, _1014), vec3(_3350, _3351, _3352));
                        float _4751 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3384 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3385 = dot(vec3(_1008, _1011, _1014), vec3(_3377 * _3371, _3377 * _3372, _3377 * _3373));
                        float _4762 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0));
                        float _3388 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3392 = ((_3388 * _3388) * (_3370 + (-1.0))) + 1.0;
                        float _3393 = _3328 * _3369;
                        float _3394 = _3393 * _3393;
                        float _3397 = ((1.0 - _3394) * _3318) + _3394;
                        float _4773 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3398 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3399 = 1.0 - _3369;
                        float _3409 = (0.5 / (((_3398 * ((_3384 * _3399) + _3369)) + 9.9999999392252902907785028219223e-09) + (((_3398 * _3399) + _3369) * _3384))) * _3398;
                        float _4784 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3420 = (((_3370 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3392 * _3392) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3172 = (_3339 * _3287.x) + _3245;
                        _3173 = (_3339 * _3287.y) + _3246;
                        _3174 = (_3339 * _3287.z) + _3247;
                        _3169 = (_3420 * _3304.x) + _3242;
                        _3170 = (_3420 * _3304.y) + _3243;
                        _3171 = (_3420 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3169;
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_66_pred = _3169;
                    frontier_phi_66_pred_1 = _3174;
                    frontier_phi_66_pred_2 = _3173;
                    frontier_phi_66_pred_3 = _3172;
                    frontier_phi_66_pred_4 = _3171;
                    frontier_phi_66_pred_5 = _3170;
                }
                _2945 = frontier_phi_66_pred;
                _2955 = frontier_phi_66_pred_1;
                _2953 = frontier_phi_66_pred_2;
                _2951 = frontier_phi_66_pred_3;
                _2949 = frontier_phi_66_pred_4;
                _2947 = frontier_phi_66_pred_5;
                uint _3104 = _3103 + 1u;
                if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3097 = _2945;
                    _3098 = _2947;
                    _3099 = _2949;
                    _3100 = _2951;
                    _3101 = _2953;
                    _3102 = _2955;
                    _3103 = _3104;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2944 = _2945;
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
        }
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.z;
        uint _2961 = (_2959 >> 8u) & 15u;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((4294967295u << _2961) & _2843) == 0u)
        {
            _3065 = _2944;
            _3067 = _2946;
            _3069 = _2948;
            _3071 = _2950;
            _3073 = _2952;
            _3075 = _2954;
        }
        else
        {
            float _3090 = inversesqrt(dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799)));
            float _3091 = _3090 * _2797;
            float _3092 = _3090 * _2798;
            float _3093 = _3090 * _2799;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2961 < ((_2959 >> 12u) & 15u))
            {
                float _3066;
                float _3068;
                float _3070;
                float _3072;
                float _3074;
                float _3076;
                float _3225 = _2944;
                float _3226 = _2946;
                float _3227 = _2948;
                float _3228 = _2950;
                float _3229 = _2952;
                float _3230 = _2954;
                uint _3231 = _2961;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3241)
                    {
                        frontier_phi_77_pred = _3230;
                        frontier_phi_77_pred_1 = _3229;
                        frontier_phi_77_pred_2 = _3228;
                        frontier_phi_77_pred_3 = _3227;
                        frontier_phi_77_pred_4 = _3226;
                        frontier_phi_77_pred_5 = _3225;
                    }
                    else
                    {
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3447 = _3225;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        uint _3453 = _3240;
                        uint _3454;
                        vec4 _3479;
                        float _3480;
                        vec4 _3495;
                        vec3 _3507;
                        vec4 _3522;
                        vec4 _3537;
                        float _3583;
                        bool _3584;
                        for (;;)
                        {
                            uint _3464 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3453));
                            _3454 = (_3453 + 4294967295u) & _3453;
                            uint _3466 = _3464 * 40u;
                            _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3480 = _3479.w;
                            uint _3482 = (_3464 * 40u) + 4u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3464 * 40u) + 8u;
                            _3507 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x));
                            uint _3509 = (_3464 * 40u) + 16u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            uint _3524 = (_3464 * 40u) + 20u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            uint _3539 = (_3464 * 40u) + 24u;
                            vec4 _3552 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3539)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3539 + 3u)).x));
                            uint _3558 = (_3464 * 40u) + 28u;
                            vec4 _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            _3583 = fma(_2799, _3571.z, fma(_2798, _3571.y, _3571.x * _2797)) + _3571.w;
                            _3584 = !((fma(_2799, _3552.z, fma(_2798, _3552.y, _3552.x * _2797)) + _3552.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3584)
                            {
                                float _3611 = _3479.x - _2797;
                                float _3612 = _3479.y - _2798;
                                float _3613 = _3479.z - _2799;
                                float _3614 = dot(vec3(_3611, _3612, _3613), vec3(_3611, _3612, _3613));
                                float _3617 = inversesqrt(_3614);
                                float _3618 = _3617 * _3611;
                                float _3619 = _3617 * _3612;
                                float _3620 = _3617 * _3613;
                                float _3624 = 1.0 - (_3614 / (_3480 * _3480));
                                float _4795 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                                float _3625 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3629 = sqrt(_3614) * _3495.w;
                                float _3631 = 1.39999997615814208984375 / (_3629 + 1.39999997615814208984375);
                                float _3632 = _3631 * _3631;
                                float _3635 = ((1.0 - _3632) * dot(vec3(_3618, _3619, _3620), vec3(_1008, _1011, _1014))) + _3632;
                                float _3638 = _3629 * _3629;
                                float _3642 = (fma(_2799, _3522.z, fma(_2798, _3522.y, _3522.x * _2797)) + _3522.w) / _3583;
                                float _3643 = (fma(_2799, _3537.z, fma(_2798, _3537.y, _3537.x * _2797)) + _3537.w) / _3583;
                                float _3647 = 1.0 - dot(vec2(_3642, _3643), vec2(_3642, _3643));
                                float _4811 = isnan(0.0) ? _3647 : (isnan(_3647) ? 0.0 : max(_3647, 0.0));
                                float _3648 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3649 = _3648 * (((isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0))) * _3625) / ((_3638 * 0.699999988079071044921875) + 1.0));
                                float _3661 = exp2(log2(1.0 / ((_3638 * 3.5) + 5.0)) * 0.25);
                                float _3662 = 1.0 - _1083;
                                float _3669 = sqrt(1.0 - ((1.0 - (_3662 * _3662)) * (1.0 - (_3661 * _3661))));
                                float _3670 = _3669 * _3669;
                                float _3671 = _3670 * _3670;
                                float _3672 = _3618 - _3091;
                                float _3673 = _3619 - _3092;
                                float _3674 = _3620 - _3093;
                                float _3678 = inversesqrt(dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674)));
                                float _3682 = dot(vec3(_1008, _1011, _1014), vec3((-0.0) - _3091, (-0.0) - _3092, (-0.0) - _3093));
                                float _4822 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3685 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3686 = dot(vec3(_1008, _1011, _1014), vec3(_3678 * _3672, _3678 * _3673, _3678 * _3674));
                                float _4833 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3689 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3693 = ((_3689 * _3689) * (_3671 + (-1.0))) + 1.0;
                                float _3694 = _3631 * _3670;
                                float _3695 = _3694 * _3694;
                                float _3701 = ((1.0 - _3695) * dot(vec3(_1008, _1011, _1014), vec3(_3618, _3619, _3620))) + _3695;
                                float _4844 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3703 = 1.0 - _3670;
                                float _3713 = (0.5 / (((_3702 * ((_3685 * _3703) + _3670)) + 9.9999999392252902907785028219223e-09) + (((_3702 * _3703) + _3670) * _3685))) * _3702;
                                float _4855 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3723 = (_3648 * _3625) * (((_3671 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3693 * _3693) * ((_3638 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3649 * _3495.y;
                                frontier_phi_83_pred_1 = _3649 * _3495.x;
                                frontier_phi_83_pred_2 = _3723 * _3507.z;
                                frontier_phi_83_pred_3 = _3723 * _3507.y;
                                frontier_phi_83_pred_4 = _3723 * _3507.x;
                                frontier_phi_83_pred_5 = _3649 * _3495.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3731 = frontier_phi_83_pred;
                            _3730 = frontier_phi_83_pred_1;
                            _3729 = frontier_phi_83_pred_2;
                            _3728 = frontier_phi_83_pred_3;
                            _3727 = frontier_phi_83_pred_4;
                            _3732 = frontier_phi_83_pred_5;
                            _3437 = _3730 + _3450;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3434 = _3727 + _3447;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            if (_3454 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3447 = _3434;
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3454;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3439;
                        frontier_phi_77_pred_1 = _3438;
                        frontier_phi_77_pred_2 = _3437;
                        frontier_phi_77_pred_3 = _3436;
                        frontier_phi_77_pred_4 = _3435;
                        frontier_phi_77_pred_5 = _3434;
                    }
                    _3076 = frontier_phi_77_pred;
                    _3074 = frontier_phi_77_pred_1;
                    _3072 = frontier_phi_77_pred_2;
                    _3070 = frontier_phi_77_pred_3;
                    _3068 = frontier_phi_77_pred_4;
                    _3066 = frontier_phi_77_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3066;
                        _3226 = _3068;
                        _3227 = _3070;
                        _3228 = _3072;
                        _3229 = _3074;
                        _3230 = _3076;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3070;
                frontier_phi_58_59_ladder_1 = _3076;
                frontier_phi_58_59_ladder_2 = _3074;
                frontier_phi_58_59_ladder_3 = _3072;
                frontier_phi_58_59_ladder_4 = _3068;
                frontier_phi_58_59_ladder_5 = _3066;
            }
            else
            {
                frontier_phi_58_59_ladder = _2948;
                frontier_phi_58_59_ladder_1 = _2954;
                frontier_phi_58_59_ladder_2 = _2952;
                frontier_phi_58_59_ladder_3 = _2950;
                frontier_phi_58_59_ladder_4 = _2946;
                frontier_phi_58_59_ladder_5 = _2944;
            }
            _3065 = frontier_phi_58_59_ladder_5;
            _3067 = frontier_phi_58_59_ladder_4;
            _3069 = frontier_phi_58_59_ladder;
            _3071 = frontier_phi_58_59_ladder_3;
            _3073 = frontier_phi_58_59_ladder_2;
            _3075 = frontier_phi_58_59_ladder_1;
        }
        float _3080 = isnan(1.0) ? _1067 : (isnan(_1067) ? 1.0 : min(_1067, 1.0));
        _2856 = (_3080 * _3071) + _2289;
        _2858 = (_3080 * _3073) + _2291;
        _2860 = (_3080 * _3075) + _2293;
        _2862 = ((_3065 * _1051) * _3080) + _2637;
        _2864 = ((_3067 * _1053) * _3080) + _2639;
        _2866 = ((_3069 * _1054) * _3080) + _2641;
    }
    else
    {
        _2856 = _2289;
        _2858 = _2291;
        _2860 = _2293;
        _2862 = _2637;
        _2864 = _2639;
        _2866 = _2641;
    }
    float _4871 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _4882 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _4893 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _2883 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2856 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1067))) + ((_2862 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1905)) * cbPerFrame._m0[3u].x);
    float _2884 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2858 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1067))) + ((_2864 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1905)) * cbPerFrame._m0[3u].x);
    float _2885 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2860 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1067))) + ((_2866 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1905)) * cbPerFrame._m0[3u].x);
    uint _2886 = _289 + 6u;
    float _2894 = _989 / cbSceneParam._m0[86u].x;
    float _2895 = _990 / cbSceneParam._m0[86u].y;
    vec4 _2909 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, (log2((isnan(cbSceneParam._m0[77u].w) ? _912 : (isnan(_912) ? cbSceneParam._m0[77u].w : min(_912, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2911 = _2909.x;
    float _2912 = _2909.y;
    float _2913 = _2909.z;
    float _2914 = _2909.w;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_912 > cbSceneParam._m0[78u].w)
    {
        float _2969 = isnan(_912) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _912 : min(cbSceneParam._m0[80u].w, _912));
        float _2970 = _2969 / _912;
        float _2981 = _2970 * _962;
        float _2982 = _963 * _2970;
        float _2983 = (-0.0) - _2982;
        float _2985 = _2970 * _964;
        float _2987 = (cbSceneParam._m0[77u].w * _2983) / _2969;
        float _2988 = _2987 + cbSceneParam._m0[79u].w;
        float _2989 = cbSceneParam._m0[79u].w - _2982;
        float _2995 = sqrt(((_2981 * _2981) + (_2982 * _2982)) + (_2985 * _2985));
        float _2998 = (1.0 - (cbSceneParam._m0[77u].w / _2969)) * _2995;
        float _3003 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3005 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3182;
        if (abs((_2983 - _2987) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3182 = ((((_2988 > 0.0) ? exp2(_3003 * _2988) : (2.0 - exp2(_3005 * _2988))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2998;
        }
        else
        {
            float _3126 = 1.0 / cbSceneParam._m0[80u].x;
            float _3127 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : max(_2988, _2989));
            float _3128 = isnan(_2989) ? _2988 : (isnan(_2988) ? _2989 : min(_2988, _2989));
            float _3137 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : min(_3127, 0.0));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            _3182 = ((abs(_2995 / _2983) * cbSceneParam._m0[80u].y) * ((((_3137 - _3138) * 2.0) - ((exp2(_3003 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)))) - exp2(_3003 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))))) * _3126)) - ((exp2(_3005 * _3137) - exp2(_3005 * _3138)) * _3126))) + (_2998 * cbSceneParam._m0[80u].z);
        }
        vec4 _3184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2894, _2895, 1.0), 0.0);
        float _3193 = exp2((_3182 * (-1.44269502162933349609375)) * (1.0 - _3184.w));
        float _3194 = log2(_3193);
        float _3210 = log2(_2914);
        _3007 = (exp2(_3210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].x)) * _3184.x) / cbSceneParam._m0[78u].x)) + _2911;
        _3009 = (exp2(_3210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].y)) * _3184.y) / cbSceneParam._m0[78u].y)) + _2912;
        _3011 = (exp2(_3210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3194 * cbSceneParam._m0[78u].z)) * _3184.z) / cbSceneParam._m0[78u].z)) + _2913;
        _3013 = _3193 * _2914;
    }
    else
    {
        _3007 = _2911;
        _3009 = _2912;
        _3011 = _2913;
        _3013 = _2914;
    }
    bool _3220;
    vec4 _3023;
    vec4 _3045;
    float _3047;
    float _3051;
    float _3052;
    float _3053;
    float _3054;
    bool _3064;
    for (;;)
    {
        _3023 = cbMatDynParam._m0[0u];
        float _3025 = roundEven(_3023.y);
        bool _3026 = _3025 == 3.0;
        float _3027 = log2(_3013);
        float _3034 = exp2(_3027 * cbSceneParam._m0[78u].x) * _2883;
        float _3035 = exp2(_3027 * cbSceneParam._m0[78u].y) * _2884;
        float _3036 = exp2(_3027 * cbSceneParam._m0[78u].z) * _2885;
        float _3043 = _978 + (-0.5);
        _3045 = cbMtdParam._m0[1u];
        _3047 = _3045.y * _3043;
        float _3050 = (_3025 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3051 = _3050 * (_3026 ? _3034 : (_3034 + (cbSceneParam._m0[72u].w * _3007)));
        _3052 = _3050 * (_3026 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3009)));
        _3053 = _3050 * (_3026 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3011)));
        _3054 = _3043 * 0.999000012874603271484375;
        _3064 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3064)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3054) < 0.5)
            {
                _3220 = true;
                break;
            }
        }
        uint _3161 = _1027 + uint(_3023.w);
        if ((cbInstanceData._m0[_3161].w < 1.0) && ((cbInstanceData._m0[_3161].w + _3054) < 0.5))
        {
            _3220 = true;
            break;
        }
        if ((_3047 + 1.0) < _3045.x)
        {
            _3220 = true;
            break;
        }
        _3220 = false;
        break;
    }
    float _3425;
    if (_3220)
    {
        discard_state = true;
        _3425 = 0.0;
    }
    else
    {
        _3425 = cbInstanceData._m0[_2886].w;
    }
    SV_Target.x = _3051;
    SV_Target.y = _3052;
    SV_Target.z = _3053;
    SV_Target.w = _3425;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2886].w;
    discard_exit();
}


