#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1599;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3946 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3957 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3968 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3979 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3990 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4001 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _677 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _696 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _740 = _738.x;
    float _741 = _738.y;
    float _742 = _738.z;
    float _749 = ((_721.x - _740) * _482) + _740;
    float _750 = ((_721.y - _741) * _482) + _741;
    float _751 = ((_721.z - _742) * _482) + _742;
    vec4 _763 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _774 = ((_763.x - _749) * _555) + _749;
    float _775 = ((_763.y - _750) * _555) + _750;
    float _776 = ((_763.z - _751) * _555) + _751;
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _801 = ((_788.z - _776) * _625) + _776;
    float _804 = ((((_788.x - _774) * _625) + _774) * 2.0) + (-1.0);
    float _805 = ((((_788.y - _775) * _625) + _775) * 2.0) + (-1.0);
    float _806 = dot(vec2(_804, _805), vec2(_804, _805));
    float _4012 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _811 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    vec4 _829 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _841 = (_804 + ((((_696.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_829.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _842 = (_805 + ((((_696.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_829.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _845 = fma(_811, _255, fma(_842, _262, _841 * _248));
    float _848 = fma(_811, _256, fma(_842, _263, _841 * _249));
    float _851 = fma(_811, _257, fma(_842, _264, _841 * _250));
    float _855 = inversesqrt(dot(vec3(_845, _848, _851), vec3(_845, _848, _851)));
    vec4 _882 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _884 = _882.x;
    float _885 = 1.0 - _884;
    float _893 = (cbMtdParam._m0[19u].x + dot(vec4(_855 * _845, _855 * _848, _855 * _851, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_884 - _885) * cbMtdParam._m0[24u].z) + _885) * cbMtdParam._m0[21u].z);
    float _4023 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _901 = (_894 * ((_677.x * cbMtdParam._m0[18u].x) - _655)) + _655;
    float _902 = (_894 * ((_677.y * cbMtdParam._m0[18u].y) - _657)) + _657;
    float _903 = (_894 * ((_677.z * cbMtdParam._m0[18u].z) - _659)) + _659;
    vec4 _929 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _931 = _929.x;
    float _948 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _931) * _482) + _931;
    float _965 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _948) * _555) + _948;
    float _983 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _965) * _625) + _965;
    float _987 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _983) * cbMtdParam._m0[19u].z) + _983;
    float _989 = _987 - (_987 * _894);
    float _994 = (((_696.z - _801) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _801;
    float _998 = ((_829.z - _994) * cbMtdParam._m0[19u].w) + _994;
    vec4 _1011 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _1018 = (_1011.x * 2.0) + (-1.0);
    float _1019 = (_1011.y * 2.0) + (-1.0);
    float _1020 = dot(vec2(_1018, _1019), vec2(_1018, _1019));
    float _4034 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1028 = ((_1011.z - _998) * _894) + _998;
    float _1038 = ((sqrt(1.0 - (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) - _811) * _894) + _811;
    float _1041 = (((_1018 - _841) * _894) + _841) + (cbMtdParam._m0[21u].x * _841);
    float _1042 = (((_1019 - _842) * _894) + _842) + (cbMtdParam._m0[21u].x * _842);
    float _1046 = cbMtdParam._m0[22u].x + _829.w;
    float _1049 = fma(_1038, _255, fma(_1042, _262, _1041 * _248));
    float _1052 = fma(_1038, _256, fma(_1042, _263, _1041 * _249));
    float _1055 = fma(_1038, _257, fma(_1042, _264, _1041 * _250));
    float _1059 = inversesqrt(dot(vec3(_1049, _1052, _1055), vec3(_1049, _1052, _1055)));
    float _1060 = _1059 * _1049;
    float _1061 = _1059 * _1052;
    float _1062 = _1059 * _1055;
    float _4045 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1063 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4067 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4078 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4089 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4100 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1068 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _1082 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1122 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1132 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1122);
    float _1133 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1122);
    float _1134 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1122);
    float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
    float _1139 = _1132 * _1138;
    float _1140 = _1133 * _1138;
    float _1141 = _1134 * _1138;
    float _1147 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1148 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1166 = fma(_1062, cbSceneParam._m0[5u].z, fma(_1061, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1060));
    float _1169 = fma(_1062, cbSceneParam._m0[6u].z, fma(_1061, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1060));
    float _1172 = fma(_1062, cbSceneParam._m0[7u].z, fma(_1061, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1060));
    uint _1186 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1192 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * cbInstanceData._m0[_1186].x;
    float _1193 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * cbInstanceData._m0[_1186].y;
    float _1194 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_1186].z;
    float _4111 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1195 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1198 = 1.0 - _1068;
    float _1199 = _1195 * _1198;
    float _1200 = _1196 * _1198;
    float _1201 = _1197 * _1198;
    float _1206 = (_1195 + (-0.039999999105930328369140625)) * _1068;
    float _1207 = (_1196 + (-0.039999999105930328369140625)) * _1068;
    float _1208 = (_1197 + (-0.039999999105930328369140625)) * _1068;
    float _1209 = _1206 + 0.039999999105930328369140625;
    float _1211 = _1207 + 0.039999999105930328369140625;
    float _1212 = _1208 + 0.039999999105930328369140625;
    vec4 _1221 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1147, cbSceneParam._m0[86u].y * _1148));
    float _1225 = ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * TEXCOORD_5.w) * _1221.x;
    float _1226 = dot(vec3(_1060, _1061, _1062), vec3(_1139, _1140, _1141));
    float _1229 = _1226 * 2.0;
    float _1233 = (_1229 * _1060) - _1139;
    float _1234 = (_1229 * _1061) - _1140;
    float _1235 = (_1229 * _1062) - _1141;
    float _1239 = abs(dot(vec3(_1139, _1140, _1141), vec3(_1060, _1061, _1062)));
    float _4144 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
    float _1241 = sqrt(_1063);
    float _1254 = exp2((_1241 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1241 * 3.0));
    float _1260 = (1.0 - _1254) * ((_1241 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1261 = _1254 * _1241;
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1293 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1297 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1598;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1323 = fma(_1297, cbModelParam._m0[26u].z, fma(_1293, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289));
        float _1327 = fma(_1297, cbModelParam._m0[27u].z, fma(_1293, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289));
        float _1331 = fma(_1297, cbModelParam._m0[28u].z, fma(_1293, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289));
        float _1356 = _1289 + _1060;
        float _1357 = _1293 + _1061;
        float _1358 = _1297 + _1062;
        float _1368 = fma(_1358, cbModelParam._m0[26u].z, fma(_1357, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1356)) - _1323;
        float _1369 = fma(_1358, cbModelParam._m0[27u].z, fma(_1357, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1356)) - _1327;
        float _1370 = fma(_1358, cbModelParam._m0[28u].z, fma(_1357, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1356)) - _1331;
        float _1374 = inversesqrt(dot(vec3(_1368, _1369, _1370), vec3(_1368, _1369, _1370)));
        float _1387 = ((_1374 * _1368) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1323 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1374 * _1369) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1327 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1374 * _1370) / cbModelParam._m0[34u].z) + ((((((_1331 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1387, _1388, _1389), 0.0);
        float _1426 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1427 = _1426 * (_1392.x + (-0.5));
        float _1428 = _1426 * (_1392.y + (-0.5));
        float _1429 = _1426 * (_1392.z + (-0.5));
        float _1436 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1399.x + (-0.5));
        float _1438 = _1436 * (_1399.y + (-0.5));
        float _1439 = _1436 * (_1399.z + (-0.5));
        float _1446 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1406.x + (-0.5));
        float _1448 = _1446 * (_1406.y + (-0.5));
        float _1449 = _1446 * (_1406.z + (-0.5));
        float _1456 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1413.x + (-0.5));
        float _1458 = _1456 * (_1413.y + (-0.5));
        float _1459 = _1456 * (_1413.z + (-0.5));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1463 = _1427 * 0.5;
        float _1464 = _1437 * 0.5;
        float _1465 = _1447 * 0.5;
        float _1466 = dot(vec3(_1463, _1464, _1465), vec3(_1463, _1464, _1465));
        float _1471 = (_1466 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1466);
        float _1480 = (dot(vec3(_1060, _1061, _1062), vec3(_1471 * _1463, _1471 * _1464, _1471 * _1465)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1490 = sqrt(((_1464 * _1464) + (_1463 * _1463)) + (_1465 * _1465)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _4192 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1492 + 1.0))) + _1497) * _1460;
        float _1507 = _1428 * 0.5;
        float _1508 = _1438 * 0.5;
        float _1509 = _1448 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_1060, _1061, _1062), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _4225 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1534 + 1.0))) + _1539) * _1461;
        float _1549 = _1429 * 0.5;
        float _1550 = _1439 * 0.5;
        float _1551 = _1449 * 0.5;
        float _1552 = dot(vec3(_1549, _1550, _1551), vec3(_1549, _1550, _1551));
        float _1557 = (_1552 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1552);
        float _1565 = (dot(vec3(_1060, _1061, _1062), vec3(_1557 * _1549, _1557 * _1550, _1557 * _1551)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1574 = sqrt(((_1550 * _1550) + (_1549 * _1549)) + (_1551 * _1551)) / (_1462 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1575 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1576 = _1575 * 2.0;
        float _1580 = (1.0 - _1575) / (_1575 + 1.0);
        float _4258 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1590 = ((((1.0 - _1581) * (_1576 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1576 + 1.0))) + _1581) * _1462;
        _1598 = _1429;
        _1600 = _1428;
        _1601 = _1427;
        _1602 = _1439;
        _1603 = _1438;
        _1604 = _1437;
        _1605 = _1449;
        _1606 = _1448;
        _1607 = _1447;
        _1608 = _1462;
        _1609 = _1461;
        _1610 = _1460;
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
        _1613 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)));
    }
    else
    {
        _1598 = _1599;
        _1600 = _1599;
        _1601 = _1599;
        _1602 = _1599;
        _1603 = _1599;
        _1604 = _1599;
        _1605 = _1599;
        _1606 = _1599;
        _1607 = _1599;
        _1608 = _1599;
        _1609 = _1599;
        _1610 = _1599;
        _1611 = 0.0;
        _1612 = 0.0;
        _1613 = 0.0;
    }
    float _1905;
    float _1906;
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1636 = fma(_1297, cbModelParam._m0[30u].z, fma(_1293, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289));
        float _1640 = fma(_1297, cbModelParam._m0[31u].z, fma(_1293, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289));
        float _1644 = fma(_1297, cbModelParam._m0[32u].z, fma(_1293, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289));
        float _1667 = _1289 + _1060;
        float _1668 = _1293 + _1061;
        float _1669 = _1297 + _1062;
        float _1679 = fma(_1669, cbModelParam._m0[30u].z, fma(_1668, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1667)) - _1636;
        float _1680 = fma(_1669, cbModelParam._m0[31u].z, fma(_1668, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1667)) - _1640;
        float _1681 = fma(_1669, cbModelParam._m0[32u].z, fma(_1668, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1667)) - _1644;
        float _1685 = inversesqrt(dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681)));
        float _1698 = ((_1685 * _1679) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1636 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1699 = ((_1685 * _1680) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1640 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1700 = ((_1685 * _1681) / cbModelParam._m0[35u].z) + ((((((_1644 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1709 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1716 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        vec4 _1723 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1698, _1699, _1700), 0.0);
        float _1735 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1702.x + (-0.5));
        float _1737 = _1735 * (_1702.y + (-0.5));
        float _1738 = _1735 * (_1702.z + (-0.5));
        float _1745 = exp2((_1709.w + (-0.5)) * 20.0) * 2.0;
        float _1746 = _1745 * (_1709.x + (-0.5));
        float _1747 = _1745 * (_1709.y + (-0.5));
        float _1748 = _1745 * (_1709.z + (-0.5));
        float _1755 = exp2((_1716.w + (-0.5)) * 20.0) * 2.0;
        float _1756 = _1755 * (_1716.x + (-0.5));
        float _1757 = _1755 * (_1716.y + (-0.5));
        float _1758 = _1755 * (_1716.z + (-0.5));
        float _1765 = exp2((_1723.w + (-0.5)) * 20.0) * 2.0;
        float _1766 = _1765 * (_1723.x + (-0.5));
        float _1767 = _1765 * (_1723.y + (-0.5));
        float _1768 = _1765 * (_1723.z + (-0.5));
        float _1769 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1770 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = _1736 * 0.5;
        float _1773 = _1746 * 0.5;
        float _1774 = _1756 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_1060, _1061, _1062), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1769 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4321 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1799 + 1.0))) + _1804) * _1769;
        float _1814 = _1737 * 0.5;
        float _1815 = _1747 * 0.5;
        float _1816 = _1757 * 0.5;
        float _1817 = dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816));
        float _1822 = (_1817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1817);
        float _1830 = (dot(vec3(_1060, _1061, _1062), vec3(_1822 * _1814, _1822 * _1815, _1822 * _1816)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1839 = sqrt(((_1815 * _1815) + (_1814 * _1814)) + (_1816 * _1816)) / (_1770 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
        float _1840 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1841 = _1840 * 2.0;
        float _1845 = (1.0 - _1840) / (_1840 + 1.0);
        float _4354 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1855 = ((((1.0 - _1846) * (_1841 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1841 + 1.0))) + _1846) * _1770;
        float _1856 = _1738 * 0.5;
        float _1857 = _1748 * 0.5;
        float _1858 = _1758 * 0.5;
        float _1859 = dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858));
        float _1864 = (_1859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1859);
        float _1872 = (dot(vec3(_1060, _1061, _1062), vec3(_1864 * _1856, _1864 * _1857, _1864 * _1858)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1881 = sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1883 = _1882 * 2.0;
        float _1887 = (1.0 - _1882) / (_1882 + 1.0);
        float _4387 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1897 = ((((1.0 - _1888) * (_1883 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1883 + 1.0))) + _1888) * _1771;
        _1905 = _1738;
        _1906 = _1737;
        _1907 = _1736;
        _1908 = _1748;
        _1909 = _1747;
        _1910 = _1746;
        _1911 = _1758;
        _1912 = _1757;
        _1913 = _1756;
        _1914 = _1771;
        _1915 = _1770;
        _1916 = _1769;
        _1917 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
        _1918 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0)));
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)));
    }
    else
    {
        _1905 = _1599;
        _1906 = _1599;
        _1907 = _1599;
        _1908 = _1599;
        _1909 = _1599;
        _1910 = _1599;
        _1911 = _1599;
        _1912 = _1599;
        _1913 = _1599;
        _1914 = _1599;
        _1915 = _1599;
        _1916 = _1599;
        _1917 = 0.0;
        _1918 = 0.0;
        _1919 = 0.0;
    }
    float _1929 = (cbModelParam._m0[1u].x * (_1917 - _1611)) + _1611;
    float _1930 = (cbModelParam._m0[1u].x * (_1918 - _1612)) + _1612;
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1613)) + _1613;
    float _1952 = fma(_1931, cbSceneParam._m0[89u].z, fma(_1930, cbSceneParam._m0[89u].y, _1929 * cbSceneParam._m0[89u].x));
    float _1955 = fma(_1931, cbSceneParam._m0[90u].z, fma(_1930, cbSceneParam._m0[90u].y, _1929 * cbSceneParam._m0[90u].x));
    float _1958 = fma(_1931, cbSceneParam._m0[91u].z, fma(_1930, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1929));
    float _1973 = _1233 * 0.5;
    float _1974 = _1234 * 0.5;
    float _1975 = _1235 * 0.5;
    float _1976 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _1979 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1906, _1909, _1912, _1915));
    float _1982 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1905, _1908, _1911, _1914));
    float _2016;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1989 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1598, _1602, _1605, _1608));
        float _1993 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _1997 = dot(vec4(_1973, _1974, _1975, 1.0), vec4(_1601, _1604, _1607, _1610));
        float _2004 = dot(vec4(cbModelParam._m0[39u]), vec4(_1973, _1974, _1975, 1.0));
        _2016 = dot(vec3(isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0)), isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2004) ? 0.0 : (isnan(0.0) ? _2004 : max(0.0, _2004))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2016 = 1.0;
    }
    float _2027;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2018 = dot(vec4(cbModelParam._m0[40u]), vec4(_1973, _1974, _1975, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0)), isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2018) ? 0.0 : (isnan(0.0) ? _2018 : max(0.0, _2018))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2031 = (_2027 * cbModelParam._m0[1u].x) + (_2016 * (1.0 - cbModelParam._m0[1u].x));
    float _2041 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1063);
    float _2042 = isnan(_2041) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2041 : min(cbModelParam._m0[25u].z, _2041));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2089 = fma(_1297, cbModelParam._m0[13u].z, fma(_1293, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1289)) + cbModelParam._m0[13u].w;
        float _2093 = fma(_1297, cbModelParam._m0[14u].z, fma(_1293, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1289)) + cbModelParam._m0[14u].w;
        float _2097 = fma(_1297, cbModelParam._m0[15u].z, fma(_1293, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1289)) + cbModelParam._m0[15u].w;
        float _2100 = fma(_1235, cbModelParam._m0[13u].z, fma(_1234, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233));
        float _2103 = fma(_1235, cbModelParam._m0[14u].z, fma(_1234, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233));
        float _2106 = fma(_1235, cbModelParam._m0[15u].z, fma(_1234, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233));
        float _2134;
        if (_2100 > 0.0)
        {
            _2134 = abs((1.0 - _2089) / _2100);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2089 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2134 = frontier_phi_14_12_ladder;
        }
        float _2357;
        if (_2103 > 0.0)
        {
            _2357 = abs((1.0 - _2093) / _2103);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2093 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2357 = frontier_phi_23_19_ladder;
        }
        float _2614;
        if (_2106 > 0.0)
        {
            _2614 = abs((1.0 - _2097) / _2106);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2097 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2614 = frontier_phi_35_30_ladder;
        }
        float _2616 = isnan(_2357) ? _2134 : (isnan(_2134) ? _2357 : min(_2134, _2357));
        float _2617 = isnan(_2614) ? _2616 : (isnan(_2616) ? _2614 : min(_2616, _2614));
        float _2621 = (_2617 * _2100) + _2089;
        float _2622 = (_2617 * _2103) + _2093;
        float _2623 = (_2617 * _2106) + _2097;
        float _2624 = _2617 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2624;
        float _2628 = _2624 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 > _2628) || ((_2622 < _2626) || ((_2621 < _2626) || (_2621 > _2628))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2623, cbModelParam._m0[9u].z, fma(_2622, cbModelParam._m0[9u].y, _2621 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2623, cbModelParam._m0[10u].z, fma(_2622, cbModelParam._m0[10u].y, _2621 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2623, cbModelParam._m0[11u].z, fma(_2622, cbModelParam._m0[11u].y, _2621 * cbModelParam._m0[11u].x))), _2042);
            frontier_phi_13_35_ladder = _2751.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2751.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2751.x * cbModelParam._m0[1u].y;
        }
        _2122 = frontier_phi_13_35_ladder_2;
        _2124 = frontier_phi_13_35_ladder_1;
        _2126 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1233, _1234, _1235), _2042);
        _2122 = _2110.x * cbModelParam._m0[1u].y;
        _2124 = _2110.y * cbModelParam._m0[1u].y;
        _2126 = _2110.z * cbModelParam._m0[1u].y;
    }
    float _2130 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1063);
    float _2131 = isnan(_2130) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2130 : min(cbModelParam._m0[25u].w, _2130));
    float _2220;
    float _2222;
    float _2224;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2184 = fma(_1297, cbModelParam._m0[21u].z, fma(_1293, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1289)) + cbModelParam._m0[21u].w;
        float _2188 = fma(_1297, cbModelParam._m0[22u].z, fma(_1293, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1289)) + cbModelParam._m0[22u].w;
        float _2192 = fma(_1297, cbModelParam._m0[23u].z, fma(_1293, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1289)) + cbModelParam._m0[23u].w;
        float _2195 = fma(_1235, cbModelParam._m0[21u].z, fma(_1234, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233));
        float _2198 = fma(_1235, cbModelParam._m0[22u].z, fma(_1234, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233));
        float _2201 = fma(_1235, cbModelParam._m0[23u].z, fma(_1234, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233));
        float _2362;
        if (_2195 > 0.0)
        {
            _2362 = abs((1.0 - _2184) / _2195);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2195 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2184 + 1.0) / _2195);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2362 = frontier_phi_25_21_ladder;
        }
        float _2641;
        if (_2198 > 0.0)
        {
            _2641 = abs((1.0 - _2188) / _2198);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2198 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2188 + 1.0) / _2198);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2641 = frontier_phi_37_32_ladder;
        }
        float _2854;
        if (_2201 > 0.0)
        {
            _2854 = abs((1.0 - _2192) / _2201);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2201 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2192 + 1.0) / _2201);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2854 = frontier_phi_46_43_ladder;
        }
        float _2856 = isnan(_2641) ? _2362 : (isnan(_2362) ? _2641 : min(_2362, _2641));
        float _2857 = isnan(_2854) ? _2856 : (isnan(_2856) ? _2854 : min(_2856, _2854));
        float _2861 = (_2857 * _2195) + _2184;
        float _2862 = (_2857 * _2198) + _2188;
        float _2863 = (_2857 * _2201) + _2192;
        float _2864 = _2857 * 9.9999997473787516355514526367188e-05;
        float _2865 = (-1.0) - _2864;
        float _2867 = _2864 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2863 > _2867) || ((_2863 < _2865) || ((_2862 > _2867) || ((_2862 < _2865) || ((_2861 < _2865) || (_2861 > _2867))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2863, cbModelParam._m0[17u].z, fma(_2862, cbModelParam._m0[17u].y, _2861 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2863, cbModelParam._m0[18u].z, fma(_2862, cbModelParam._m0[18u].y, _2861 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2863, cbModelParam._m0[19u].z, fma(_2862, cbModelParam._m0[19u].y, _2861 * cbModelParam._m0[19u].x))), _2131);
            frontier_phi_22_46_ladder = _3062.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3062.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3062.x * cbModelParam._m0[1u].z;
        }
        _2220 = frontier_phi_22_46_ladder_2;
        _2222 = frontier_phi_22_46_ladder_1;
        _2224 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2204 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1233, _1234, _1235), _2131);
        _2220 = _2204.x * cbModelParam._m0[1u].z;
        _2222 = _2204.y * cbModelParam._m0[1u].z;
        _2224 = _2204.z * cbModelParam._m0[1u].z;
    }
    float _2237 = (((_1260 * _1209) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2220 - _2122)) + _2122);
    float _2239 = (((_1260 * _1211) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2241 = (((_1260 * _1212) + _1261) * _1225) * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2244 = fma(_2241, cbSceneParam._m0[89u].z, fma(_2239, cbSceneParam._m0[89u].y, _2237 * cbSceneParam._m0[89u].x));
    float _2247 = fma(_2241, cbSceneParam._m0[90u].z, fma(_2239, cbSceneParam._m0[90u].y, _2237 * cbSceneParam._m0[90u].x));
    float _2250 = fma(_2241, cbSceneParam._m0[91u].z, fma(_2239, cbSceneParam._m0[91u].y, _2237 * cbSceneParam._m0[91u].x));
    vec4 _2258 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1147, _1148));
    float _2260 = _2258.w;
    float _2272 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2260);
    float _2273 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2260);
    float _2274 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2260);
    uvec4 _2278 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2280 = _2278.x * 14u;
    uint _2281 = _2280 + 13u;
    float _2288 = _1225 + (-1.0);
    float _2293 = (cbLight._m0[_2281].x * _2288) + 1.0;
    float _2294 = (cbLight._m0[_2281].y * _2288) + 1.0;
    float _2295 = (cbLight._m0[_2281].z * _2288) + 1.0;
    float _2296 = (cbLight._m0[_2281].w * _2288) + 1.0;
    uint _2297 = _2280 + 5u;
    float _2303 = isnan(1.0) ? _2294 : (isnan(_2294) ? 1.0 : min(_2294, 1.0));
    uint _2307 = _2280 + 4u;
    float _2316 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
    uint _2320 = _2280 | 1u;
    float _2331 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_1060, _1061, _1062));
    float _2334 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_1060, _1061, _1062));
    float _4523 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _4534 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2339 = (isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0))) * 0.3183098733425140380859375;
    float _2341 = (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0))) * 0.3183098733425140380859375;
    float _2348 = ((cbLight._m0[_2297].x * _2303) * _2341) + (((cbLight._m0[_2307].x * _2272) * _2316) * _2339);
    float _2349 = ((_2303 * cbLight._m0[_2297].y) * _2341) + (((cbLight._m0[_2307].y * _2273) * _2316) * _2339);
    float _2350 = ((_2303 * cbLight._m0[_2297].z) * _2341) + (((cbLight._m0[_2307].z * _2274) * _2316) * _2339);
    uvec4 _2354 = floatBitsToUint(cbLight._m0[_2280 + 12u]);
    bool _2356 = _2354.x == 0u;
    float _2367;
    float _2369;
    float _2371;
    if (_2356)
    {
        _2367 = _2348;
        _2369 = _2349;
        _2371 = _2350;
    }
    else
    {
        uint _2375 = _2280 + 6u;
        float _2391 = (dot(vec3(cbLight._m0[_2280 + 2u].xyz), vec3(_1060, _1061, _1062)) * 0.5) + 0.5;
        float _2392 = _2391 * _2391;
        float _4545 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2393 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
        float _2394 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2367 = (((cbLight._m0[_2375].x * 0.3183098733425140380859375) * _2393) * _2394) + _2348;
        _2369 = (((cbLight._m0[_2375].y * 0.3183098733425140380859375) * _2393) * _2394) + _2349;
        _2371 = (((cbLight._m0[_2375].z * 0.3183098733425140380859375) * _2393) * _2394) + _2350;
    }
    bool _2374 = _2354.y == 0u;
    float _2412;
    float _2414;
    float _2416;
    if (_2374)
    {
        _2412 = _2367;
        _2414 = _2369;
        _2416 = _2371;
    }
    else
    {
        uint _2585 = _2280 + 7u;
        float _2601 = (dot(vec3(cbLight._m0[_2280 + 3u].xyz), vec3(_1060, _1061, _1062)) * 0.5) + 0.5;
        float _2602 = _2601 * _2601;
        float _4561 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2603 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
        float _2604 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2412 = (((cbLight._m0[_2585].x * 0.3183098733425140380859375) * _2603) * _2604) + _2367;
        _2414 = (((cbLight._m0[_2585].y * 0.3183098733425140380859375) * _2603) * _2604) + _2369;
        _2416 = (((cbLight._m0[_2585].z * 0.3183098733425140380859375) * _2603) * _2604) + _2371;
    }
    uint _2419 = _2280 + 8u;
    float _2432 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2280].w)) * _1063) * 0.949999988079071044921875);
    float _2433 = _2432 * _2432;
    float _2434 = cbLight._m0[_2280].x + _1139;
    float _2435 = cbLight._m0[_2280].y + _1140;
    float _2436 = cbLight._m0[_2280].z + _1141;
    float _2440 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
    float _2441 = _2440 * _2434;
    float _2442 = _2440 * _2435;
    float _2443 = _2440 * _2436;
    float _2444 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2280].xyz));
    float _4577 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _4588 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _2448 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2449 = dot(vec3(_1060, _1061, _1062), vec3(_2441, _2442, _2443));
    float _4599 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2452 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2453 = dot(vec3(cbLight._m0[_2280].xyz), vec3(_2441, _2442, _2443));
    float _4610 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2457 = _2433 * _2433;
    float _2461 = ((_2452 * _2452) * (_2457 + (-1.0))) + 1.0;
    float _2469 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
    float _2470 = 0.959999978542327880859375 - _1206;
    float _2472 = 0.959999978542327880859375 - _1207;
    float _2473 = 0.959999978542327880859375 - _1208;
    float _2480 = 1.0 - _2433;
    float _2491 = (0.5 / (((_2448 * ((_2447 * _2480) + _2433)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2480) + _2433) * _2447))) * _2447;
    float _4621 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2493 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2457 / ((_2461 * _2461) * 3.141590118408203125));
    uint _2507 = _2280 + 9u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _1063) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2320].x + _1139;
    float _2521 = cbLight._m0[_2320].y + _1140;
    float _2522 = cbLight._m0[_2320].z + _1141;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2320].xyz));
    float _4632 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2534 = dot(vec3(_1060, _1061, _1062), vec3(_2527, _2528, _2529));
    float _4643 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2537 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2538 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2527, _2528, _2529));
    float _4654 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
    float _2542 = _2519 * _2519;
    float _2546 = ((_2537 * _2537) * (_2542 + (-1.0))) + 1.0;
    float _2553 = exp2(log2(1.0 - (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) * 5.0);
    float _2560 = 1.0 - _2519;
    float _2570 = (0.5 / (((_2448 * ((_2533 * _2560) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2560) + _2519) * _2533))) * _2533;
    float _4665 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
    float _2572 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * (_2542 / ((_2546 * _2546) * 3.141590118408203125));
    float _2582 = (((((_2553 * _2470) + _1209) * cbLight._m0[_2507].x) * _2572) * _2303) + ((((cbLight._m0[_2419].x * _2272) * ((_2469 * _2470) + _1209)) * _2493) * _2316);
    float _2583 = (((((_2553 * _2472) + _1211) * cbLight._m0[_2507].y) * _2572) * _2303) + ((((cbLight._m0[_2419].y * _2273) * ((_2469 * _2472) + _1211)) * _2493) * _2316);
    float _2584 = (((((_2553 * _2473) + _1212) * cbLight._m0[_2507].z) * _2572) * _2303) + ((((cbLight._m0[_2419].z * _2274) * ((_2469 * _2473) + _1212)) * _2493) * _2316);
    float _2646;
    float _2648;
    float _2650;
    if (_2356)
    {
        _2646 = _2582;
        _2648 = _2583;
        _2650 = _2584;
    }
    else
    {
        uint _2652 = _2280 + 2u;
        uint _2656 = _2280 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _1063) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _1139;
        float _2673 = cbLight._m0[_2652].y + _1140;
        float _2674 = cbLight._m0[_2652].z + _1141;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2652].xyz));
        float _4676 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2686 = dot(vec3(_1060, _1061, _1062), vec3(_2679, _2680, _2681));
        float _4687 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4698 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2712 = 1.0 - _2671;
        float _2722 = (0.5 / (((_2448 * ((_2685 * _2712) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2712) + _2671) * _2685))) * _2685;
        float _4709 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2295 : (isnan(_2295) ? 1.0 : min(_2295, 1.0));
        _2646 = (((((_2705 * _2470) + _1209) * cbLight._m0[_2656].x) * _2724) * _2725) + _2582;
        _2648 = (((((_2705 * _2472) + _1211) * cbLight._m0[_2656].y) * _2724) * _2725) + _2583;
        _2650 = (((((_2705 * _2473) + _1212) * cbLight._m0[_2656].z) * _2724) * _2725) + _2584;
    }
    float _2760;
    float _2762;
    float _2764;
    if (_2374)
    {
        _2760 = _2646;
        _2762 = _2648;
        _2764 = _2650;
    }
    else
    {
        uint _2771 = _2280 + 3u;
        uint _2775 = _2280 + 11u;
        float _2789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2771].w)) * _1063) * 0.949999988079071044921875);
        float _2790 = _2789 * _2789;
        float _2791 = cbLight._m0[_2771].x + _1139;
        float _2792 = cbLight._m0[_2771].y + _1140;
        float _2793 = cbLight._m0[_2771].z + _1141;
        float _2797 = inversesqrt(dot(vec3(_2791, _2792, _2793), vec3(_2791, _2792, _2793)));
        float _2798 = _2797 * _2791;
        float _2799 = _2797 * _2792;
        float _2800 = _2797 * _2793;
        float _2801 = dot(vec3(_1060, _1061, _1062), vec3(cbLight._m0[_2771].xyz));
        float _4725 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2805 = dot(vec3(_1060, _1061, _1062), vec3(_2798, _2799, _2800));
        float _4736 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2808 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
        float _2809 = dot(vec3(cbLight._m0[_2771].xyz), vec3(_2798, _2799, _2800));
        float _4747 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
        float _2813 = _2790 * _2790;
        float _2817 = ((_2808 * _2808) * (_2813 + (-1.0))) + 1.0;
        float _2824 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
        float _2831 = 1.0 - _2790;
        float _2841 = (0.5 / (((_2448 * ((_2804 * _2831) + _2790)) + 9.9999999392252902907785028219223e-09) + (((_2448 * _2831) + _2790) * _2804))) * _2804;
        float _4758 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2843 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2813 / ((_2817 * _2817) * 3.141590118408203125));
        float _2844 = isnan(1.0) ? _2296 : (isnan(_2296) ? 1.0 : min(_2296, 1.0));
        _2760 = (((((_2824 * _2470) + _1209) * cbLight._m0[_2775].x) * _2843) * _2844) + _2646;
        _2762 = (((((_2824 * _2472) + _1211) * cbLight._m0[_2775].y) * _2843) * _2844) + _2648;
        _2764 = (((((_2824 * _2473) + _1212) * cbLight._m0[_2775].z) * _2843) * _2844) + _2650;
    }
    float _2979;
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    if (_2278.y == 0u)
    {
        float _2919 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2919;
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2919;
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2919;
        uvec4 _2934 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2935 = _2934.x;
        uint _2946 = uint((float(_2934.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1148) / _2935))) + floor(float(uint(cbSceneParam._m0[85u].x * _1147) / _2935)));
        float _2956 = (log2(_2922 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2957 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        uint _2960 = uint(isnan(14.0) ? _2957 : (isnan(_2957) ? 14.0 : min(_2957, 14.0)));
        uvec4 _2965 = texelFetch(g_lightClusterGridBuffer, int(((_2960 << 2u) + (_2946 << 6u)) >> 2u));
        uint _2966 = _2965.x;
        uint _2967 = _2934.z;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        if (((((1u << ((_2967 >> 4u) & 15u)) + 4294967295u) & _2966) == 0u) || ((_2967 & 240u) == 0u))
        {
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
        }
        else
        {
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            float _3217 = 0.0;
            uint _3218 = 0u;
            uint _3227;
            bool _3228;
            for (;;)
            {
                _3227 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3218 << 2u)) >> 2u)).x;
                _3228 = _3227 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3228)
                {
                    frontier_phi_61_pred = _3212;
                    frontier_phi_61_pred_1 = _3217;
                    frontier_phi_61_pred_2 = _3216;
                    frontier_phi_61_pred_3 = _3215;
                    frontier_phi_61_pred_4 = _3214;
                    frontier_phi_61_pred_5 = _3213;
                }
                else
                {
                    float _3336;
                    float _3337;
                    float _3338;
                    float _3339;
                    float _3340;
                    float _3341;
                    uint _3342;
                    _3336 = _3212;
                    _3337 = _3213;
                    _3338 = _3214;
                    _3339 = _3215;
                    _3340 = _3216;
                    _3341 = _3217;
                    _3342 = _3227;
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    for (;;)
                    {
                        uint _3346 = uint(findLSB(_3342)) + (_3218 << 5u);
                        uint _3343 = (_3342 + 4294967295u) & _3342;
                        uint _3348 = _3346 * 48u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3348)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3348 + 3u)).x));
                        uint _3368 = (_3346 * 48u) + 4u;
                        vec4 _3381 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3387 = (_3346 * 48u) + 8u;
                        vec3 _3398 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3387)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3387 + 2u)).x));
                        float _3402 = _3362.x - _2920;
                        float _3403 = _3362.y - _2921;
                        float _3404 = _3362.z - _2922;
                        float _3405 = dot(vec3(_3402, _3403, _3404), vec3(_3402, _3403, _3404));
                        float _3408 = inversesqrt(_3405);
                        float _3409 = _3408 * _3402;
                        float _3410 = _3408 * _3403;
                        float _3411 = _3408 * _3404;
                        float _3412 = dot(vec3(_1166, _1169, _1172), vec3(_3409, _3410, _3411));
                        float _3417 = 1.0 - (_3405 * _3362.w);
                        float _4784 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3418 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                        float _3419 = sqrt(_3405) * _3381.w;
                        float _3422 = 1.39999997615814208984375 / (_3419 + 1.39999997615814208984375);
                        float _3423 = _3422 * _3422;
                        float _3426 = ((1.0 - _3423) * _3412) + _3423;
                        float _3429 = _3419 * _3419;
                        float _3433 = ((isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0))) * _3418) / ((_3429 * 0.699999988079071044921875) + 1.0);
                        float _3437 = (-0.0) - _2920;
                        float _3438 = (-0.0) - _2921;
                        float _3439 = (-0.0) - _2922;
                        float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                        float _3444 = _3443 * _3437;
                        float _3445 = _3443 * _3438;
                        float _3446 = _3443 * _3439;
                        float _3454 = exp2(log2(1.0 / ((_3429 * 3.5) + 5.0)) * 0.25);
                        float _3455 = 1.0 - _1241;
                        float _3462 = sqrt(1.0 - ((1.0 - (_3455 * _3455)) * (1.0 - (_3454 * _3454))));
                        float _3463 = _3462 * _3462;
                        float _3464 = _3463 * _3463;
                        float _3465 = _3444 + _3409;
                        float _3466 = _3445 + _3410;
                        float _3467 = _3446 + _3411;
                        float _3471 = inversesqrt(dot(vec3(_3465, _3466, _3467), vec3(_3465, _3466, _3467)));
                        float _3475 = dot(vec3(_1166, _1169, _1172), vec3(_3444, _3445, _3446));
                        float _4800 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                        float _3478 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
                        float _3479 = dot(vec3(_1166, _1169, _1172), vec3(_3471 * _3465, _3471 * _3466, _3471 * _3467));
                        float _4811 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                        float _3482 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                        float _3486 = ((_3482 * _3482) * (_3464 + (-1.0))) + 1.0;
                        float _3487 = _3422 * _3463;
                        float _3488 = _3487 * _3487;
                        float _3491 = ((1.0 - _3488) * _3412) + _3488;
                        float _4822 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3492 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3493 = 1.0 - _3463;
                        float _3503 = (0.5 / (((_3492 * ((_3478 * _3493) + _3463)) + 9.9999999392252902907785028219223e-09) + (((_3492 * _3493) + _3463) * _3478))) * _3492;
                        float _4833 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3514 = (((_3464 * 3.1415927410125732421875) * (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) / ((_3486 * _3486) * ((_3429 * 2.1991131305694580078125) + 3.141590118408203125))) * _3418;
                        _3271 = (_3433 * _3381.x) + _3339;
                        _3272 = (_3433 * _3381.y) + _3340;
                        _3273 = (_3433 * _3381.z) + _3341;
                        _3268 = (_3514 * _3398.x) + _3336;
                        _3269 = (_3514 * _3398.y) + _3337;
                        _3270 = (_3514 * _3398.z) + _3338;
                        if (_3343 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3336 = _3268;
                            _3337 = _3269;
                            _3338 = _3270;
                            _3339 = _3271;
                            _3340 = _3272;
                            _3341 = _3273;
                            _3342 = _3343;
                        }
                    }
                    frontier_phi_61_pred = _3268;
                    frontier_phi_61_pred_1 = _3273;
                    frontier_phi_61_pred_2 = _3272;
                    frontier_phi_61_pred_3 = _3271;
                    frontier_phi_61_pred_4 = _3270;
                    frontier_phi_61_pred_5 = _3269;
                }
                _3068 = frontier_phi_61_pred;
                _3078 = frontier_phi_61_pred_1;
                _3076 = frontier_phi_61_pred_2;
                _3074 = frontier_phi_61_pred_3;
                _3072 = frontier_phi_61_pred_4;
                _3070 = frontier_phi_61_pred_5;
                uint _3219 = _3218 + 1u;
                if (_3219 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3212 = _3068;
                    _3213 = _3070;
                    _3214 = _3072;
                    _3215 = _3074;
                    _3216 = _3076;
                    _3217 = _3078;
                    _3218 = _3219;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
        }
        uvec4 _3081 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3082 = _3081.z;
        uint _3084 = (_3082 >> 8u) & 15u;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        if (((4294967295u << _3084) & _2966) == 0u)
        {
            _3180 = _3067;
            _3182 = _3069;
            _3184 = _3071;
            _3186 = _3073;
            _3188 = _3075;
            _3190 = _3077;
        }
        else
        {
            float _3205 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
            float _3206 = _3205 * _2920;
            float _3207 = _3205 * _2921;
            float _3208 = _3205 * _2922;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3084 < ((_3082 >> 12u) & 15u))
            {
                float _3181;
                float _3183;
                float _3185;
                float _3187;
                float _3189;
                float _3191;
                float _3319 = _3067;
                float _3320 = _3069;
                float _3321 = _3071;
                float _3322 = _3073;
                float _3323 = _3075;
                float _3324 = _3077;
                uint _3325 = _3084;
                uint _3334;
                bool _3335;
                for (;;)
                {
                    _3334 = texelFetch(g_lightClassification, int((((_2960 << 5u) + (_2946 << 9u)) + (_3325 << 2u)) >> 2u)).x;
                    _3335 = _3334 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3335)
                    {
                        frontier_phi_67_pred = _3322;
                        frontier_phi_67_pred_1 = _3323;
                        frontier_phi_67_pred_2 = _3324;
                        frontier_phi_67_pred_3 = _3321;
                        frontier_phi_67_pred_4 = _3320;
                        frontier_phi_67_pred_5 = _3319;
                    }
                    else
                    {
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3532 = _3319;
                        float _3533 = _3320;
                        float _3534 = _3321;
                        float _3535 = _3322;
                        float _3536 = _3323;
                        float _3537 = _3324;
                        uint _3538 = _3334;
                        uint _3539;
                        vec4 _3564;
                        float _3565;
                        vec4 _3580;
                        vec3 _3592;
                        vec4 _3607;
                        vec4 _3622;
                        float _3668;
                        bool _3669;
                        for (;;)
                        {
                            uint _3549 = ((_3325 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3538));
                            _3539 = (_3538 + 4294967295u) & _3538;
                            uint _3551 = _3549 * 40u;
                            _3564 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3551)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3551 + 3u)).x));
                            _3565 = _3564.w;
                            uint _3567 = (_3549 * 40u) + 4u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3549 * 40u) + 8u;
                            _3592 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x));
                            uint _3594 = (_3549 * 40u) + 16u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            uint _3609 = (_3549 * 40u) + 20u;
                            _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            uint _3624 = (_3549 * 40u) + 24u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            uint _3643 = (_3549 * 40u) + 28u;
                            vec4 _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            _3668 = fma(_2922, _3656.z, fma(_2921, _3656.y, _3656.x * _2920)) + _3656.w;
                            _3669 = !((fma(_2922, _3637.z, fma(_2921, _3637.y, _3637.x * _2920)) + _3637.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3669)
                            {
                                float _3696 = _3564.x - _2920;
                                float _3697 = _3564.y - _2921;
                                float _3698 = _3564.z - _2922;
                                float _3699 = dot(vec3(_3696, _3697, _3698), vec3(_3696, _3697, _3698));
                                float _3702 = inversesqrt(_3699);
                                float _3703 = _3702 * _3696;
                                float _3704 = _3702 * _3697;
                                float _3705 = _3702 * _3698;
                                float _3709 = 1.0 - (_3699 / (_3565 * _3565));
                                float _4844 = isnan(0.0) ? _3709 : (isnan(_3709) ? 0.0 : max(_3709, 0.0));
                                float _3710 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3714 = sqrt(_3699) * _3580.w;
                                float _3716 = 1.39999997615814208984375 / (_3714 + 1.39999997615814208984375);
                                float _3717 = _3716 * _3716;
                                float _3720 = ((1.0 - _3717) * dot(vec3(_3703, _3704, _3705), vec3(_1166, _1169, _1172))) + _3717;
                                float _3723 = _3714 * _3714;
                                float _3727 = (fma(_2922, _3607.z, fma(_2921, _3607.y, _3607.x * _2920)) + _3607.w) / _3668;
                                float _3728 = (fma(_2922, _3622.z, fma(_2921, _3622.y, _3622.x * _2920)) + _3622.w) / _3668;
                                float _3732 = 1.0 - dot(vec2(_3727, _3728), vec2(_3727, _3728));
                                float _4860 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3734 = _3733 * (((isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0))) * _3710) / ((_3723 * 0.699999988079071044921875) + 1.0));
                                float _3746 = exp2(log2(1.0 / ((_3723 * 3.5) + 5.0)) * 0.25);
                                float _3747 = 1.0 - _1241;
                                float _3754 = sqrt(1.0 - ((1.0 - (_3747 * _3747)) * (1.0 - (_3746 * _3746))));
                                float _3755 = _3754 * _3754;
                                float _3756 = _3755 * _3755;
                                float _3757 = _3703 - _3206;
                                float _3758 = _3704 - _3207;
                                float _3759 = _3705 - _3208;
                                float _3763 = inversesqrt(dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759)));
                                float _3767 = dot(vec3(_1166, _1169, _1172), vec3((-0.0) - _3206, (-0.0) - _3207, (-0.0) - _3208));
                                float _4871 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3770 = isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0));
                                float _3771 = dot(vec3(_1166, _1169, _1172), vec3(_3763 * _3757, _3763 * _3758, _3763 * _3759));
                                float _4882 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3774 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3778 = ((_3774 * _3774) * (_3756 + (-1.0))) + 1.0;
                                float _3779 = _3716 * _3755;
                                float _3780 = _3779 * _3779;
                                float _3786 = ((1.0 - _3780) * dot(vec3(_1166, _1169, _1172), vec3(_3703, _3704, _3705))) + _3780;
                                float _4893 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                                float _3787 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3788 = 1.0 - _3755;
                                float _3798 = (0.5 / (((_3787 * ((_3770 * _3788) + _3755)) + 9.9999999392252902907785028219223e-09) + (((_3787 * _3788) + _3755) * _3770))) * _3787;
                                float _4904 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3808 = (_3733 * _3710) * (((_3756 * 3.1415927410125732421875) * (isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0)))) / ((_3778 * _3778) * ((_3723 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3808 * _3592.x;
                                frontier_phi_73_pred_1 = _3808 * _3592.y;
                                frontier_phi_73_pred_2 = _3734 * _3580.z;
                                frontier_phi_73_pred_3 = _3734 * _3580.y;
                                frontier_phi_73_pred_4 = _3734 * _3580.x;
                                frontier_phi_73_pred_5 = _3808 * _3592.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3812 = frontier_phi_73_pred;
                            _3813 = frontier_phi_73_pred_1;
                            _3817 = frontier_phi_73_pred_2;
                            _3816 = frontier_phi_73_pred_3;
                            _3815 = frontier_phi_73_pred_4;
                            _3814 = frontier_phi_73_pred_5;
                            _3522 = _3815 + _3535;
                            _3523 = _3816 + _3536;
                            _3524 = _3817 + _3537;
                            _3519 = _3812 + _3532;
                            _3520 = _3813 + _3533;
                            _3521 = _3814 + _3534;
                            if (_3539 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3532 = _3519;
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3539;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3522;
                        frontier_phi_67_pred_1 = _3523;
                        frontier_phi_67_pred_2 = _3524;
                        frontier_phi_67_pred_3 = _3521;
                        frontier_phi_67_pred_4 = _3520;
                        frontier_phi_67_pred_5 = _3519;
                    }
                    _3187 = frontier_phi_67_pred;
                    _3189 = frontier_phi_67_pred_1;
                    _3191 = frontier_phi_67_pred_2;
                    _3185 = frontier_phi_67_pred_3;
                    _3183 = frontier_phi_67_pred_4;
                    _3181 = frontier_phi_67_pred_5;
                    uint _3326 = _3325 + 1u;
                    if (_3326 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3319 = _3181;
                        _3320 = _3183;
                        _3321 = _3185;
                        _3322 = _3187;
                        _3323 = _3189;
                        _3324 = _3191;
                        _3325 = _3326;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3189;
                frontier_phi_55_56_ladder_1 = _3191;
                frontier_phi_55_56_ladder_2 = _3187;
                frontier_phi_55_56_ladder_3 = _3185;
                frontier_phi_55_56_ladder_4 = _3183;
                frontier_phi_55_56_ladder_5 = _3181;
            }
            else
            {
                frontier_phi_55_56_ladder = _3075;
                frontier_phi_55_56_ladder_1 = _3077;
                frontier_phi_55_56_ladder_2 = _3073;
                frontier_phi_55_56_ladder_3 = _3071;
                frontier_phi_55_56_ladder_4 = _3069;
                frontier_phi_55_56_ladder_5 = _3067;
            }
            _3180 = frontier_phi_55_56_ladder_5;
            _3182 = frontier_phi_55_56_ladder_4;
            _3184 = frontier_phi_55_56_ladder_3;
            _3186 = frontier_phi_55_56_ladder_2;
            _3188 = frontier_phi_55_56_ladder;
            _3190 = frontier_phi_55_56_ladder_1;
        }
        float _3195 = isnan(1.0) ? _1225 : (isnan(_1225) ? 1.0 : min(_1225, 1.0));
        _2979 = (_3195 * _3186) + _2412;
        _2981 = (_3195 * _3188) + _2414;
        _2983 = (_3195 * _3190) + _2416;
        _2985 = ((_3180 * _1209) * _3195) + _2760;
        _2987 = ((_3182 * _1211) * _3195) + _2762;
        _2989 = ((_3184 * _1212) * _3195) + _2764;
    }
    else
    {
        _2979 = _2412;
        _2981 = _2414;
        _2983 = _2416;
        _2985 = _2760;
        _2987 = _2762;
        _2989 = _2764;
    }
    float _4920 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _4931 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _4942 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    uint _3009 = _288 + 6u;
    float _3017 = _1147 / cbSceneParam._m0[86u].x;
    float _3018 = _1148 / cbSceneParam._m0[86u].y;
    vec4 _3032 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, (log2((isnan(cbSceneParam._m0[77u].w) ? _1082 : (isnan(_1082) ? cbSceneParam._m0[77u].w : min(_1082, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3034 = _3032.x;
    float _3035 = _3032.y;
    float _3036 = _3032.z;
    float _3037 = _3032.w;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    if (_1082 > cbSceneParam._m0[78u].w)
    {
        float _3092 = isnan(_1082) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1082 : min(cbSceneParam._m0[80u].w, _1082));
        float _3093 = _3092 / _1082;
        float _3104 = _3093 * _1132;
        float _3105 = _1133 * _3093;
        float _3106 = (-0.0) - _3105;
        float _3108 = _3093 * _1134;
        float _3110 = (cbSceneParam._m0[77u].w * _3106) / _3092;
        float _3111 = _3110 + cbSceneParam._m0[79u].w;
        float _3112 = cbSceneParam._m0[79u].w - _3105;
        float _3118 = sqrt(((_3104 * _3104) + (_3105 * _3105)) + (_3108 * _3108));
        float _3121 = (1.0 - (cbSceneParam._m0[77u].w / _3092)) * _3118;
        float _3126 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3128 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3281;
        if (abs((_3106 - _3110) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3281 = ((((_3111 > 0.0) ? exp2(_3126 * _3111) : (2.0 - exp2(_3128 * _3111))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3121;
        }
        else
        {
            float _3241 = 1.0 / cbSceneParam._m0[80u].x;
            float _3242 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : max(_3111, _3112));
            float _3243 = isnan(_3112) ? _3111 : (isnan(_3111) ? _3112 : min(_3111, _3112));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            float _3253 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : min(_3243, 0.0));
            _3281 = ((abs(_3118 / _3106) * cbSceneParam._m0[80u].y) * ((((_3252 - _3253) * 2.0) - ((exp2(_3126 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0)))) - exp2(_3126 * (isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0))))) * _3241)) - ((exp2(_3128 * _3252) - exp2(_3128 * _3253)) * _3241))) + (_3121 * cbSceneParam._m0[80u].z);
        }
        vec4 _3283 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3017, _3018, 1.0), 0.0);
        float _3292 = exp2((_3281 * (-1.44269502162933349609375)) * (1.0 - _3283.w));
        float _3293 = log2(_3292);
        float _3309 = log2(_3037);
        _3130 = (exp2(_3309 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].x)) * _3283.x) / cbSceneParam._m0[78u].x)) + _3034;
        _3132 = (exp2(_3309 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].y)) * _3283.y) / cbSceneParam._m0[78u].y)) + _3035;
        _3134 = (exp2(_3309 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3293 * cbSceneParam._m0[78u].z)) * _3283.z) / cbSceneParam._m0[78u].z)) + _3036;
        _3136 = _3292 * _3037;
    }
    else
    {
        _3130 = _3034;
        _3132 = _3035;
        _3134 = _3036;
        _3136 = _3037;
    }
    float _3148 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3149 = _3148 == 3.0;
    float _3150 = log2(_3136);
    float _3157 = exp2(_3150 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0))) * (_2979 + ((isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))) * _1225))) + ((_2985 + ((isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3158 = exp2(_3150 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0))) * (_2981 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1225))) + ((_2987 + ((isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3159 = exp2(_3150 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_2983 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1225))) + ((_2989 + ((isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0))) * _2031)) * cbPerFrame._m0[3u].x));
    float _3168 = (_3148 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3168 * (_3149 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3130)));
    SV_Target.y = _3168 * (_3149 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3132)));
    SV_Target.z = _3168 * (_3149 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3134)));
    SV_Target.w = cbInstanceData._m0[_3009].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3009].w;
}


