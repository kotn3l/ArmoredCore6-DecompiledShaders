#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1448;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _240 = _239 * _231;
    float _241 = _239 * _232;
    float _242 = _239 * _233;
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = _246 * NORMAL.x;
    float _248 = _246 * NORMAL.y;
    float _249 = _246 * NORMAL.z;
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _254 = _253 * TANGENT.x;
    float _255 = _253 * TANGENT.y;
    float _256 = _253 * TANGENT.z;
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _269 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4055 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4066 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _4077 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    uint _280 = uint(roundEven(NORMAL.w)) * 13u;
    uint _285 = _280 + 1u;
    uint _289 = _280 + 2u;
    float _298 = sqrt(((cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x)) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x));
    float _299 = _298 * TEXCOORD.z;
    float _300 = _298 * TEXCOORD.w;
    vec4 _313 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _299) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _300) + cbTextureTilingScale._m0[13u].w));
    vec4 _337 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _342 = _337.x * cbMtdParam._m0[11u].x;
    float _343 = _337.y * cbMtdParam._m0[11u].y;
    float _344 = _337.z * cbMtdParam._m0[11u].z;
    vec4 _363 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _299) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _300) + cbTextureTilingScale._m0[5u].w));
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _382.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _453 = (_446 * ((_363.x * cbMtdParam._m0[12u].x) - _342)) + _342;
    float _454 = (_446 * ((_363.y * cbMtdParam._m0[12u].y) - _343)) + _343;
    float _455 = (_446 * ((_363.z * cbMtdParam._m0[12u].z) - _344)) + _344;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _299) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _300) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _382.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4099 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    float _532 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _313.x) * _526;
    float _535 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _313.y) * _527;
    float _538 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _313.z) * _528;
    float _545 = ((_526 - _532) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) + _532;
    float _546 = ((_527 - _535) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _535;
    float _547 = ((_528 - _538) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) + _538;
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _299) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _300) + cbTextureTilingScale._m0[14u].w));
    vec4 _585 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _299) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _300) + cbTextureTilingScale._m0[20u].w));
    vec4 _610 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _299) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _300) + cbTextureTilingScale._m0[4u].w));
    vec4 _627 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _629 = _627.x;
    float _630 = _627.y;
    float _631 = _627.z;
    float _638 = ((_610.x - _629) * _446) + _629;
    float _639 = ((_610.y - _630) * _446) + _630;
    float _640 = ((_610.z - _631) * _446) + _631;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _299) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _300) + cbTextureTilingScale._m0[2u].w));
    float _665 = ((_652.z - _640) * _519) + _640;
    float _668 = ((((_652.x - _638) * _519) + _638) * 2.0) + (-1.0);
    float _669 = ((((_652.y - _639) * _519) + _639) * 2.0) + (-1.0);
    float _670 = dot(vec2(_668, _669), vec2(_668, _669));
    float _4110 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _675 = sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))));
    vec4 _693 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _705 = (_668 + ((((_585.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_693.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _706 = (_669 + ((((_585.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_693.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _709 = fma(_675, _247, fma(_706, _254, _705 * _240));
    float _712 = fma(_675, _248, fma(_706, _255, _705 * _241));
    float _715 = fma(_675, _249, fma(_706, _256, _705 * _242));
    float _719 = inversesqrt(dot(vec3(_709, _712, _715), vec3(_709, _712, _715)));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _299) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _300) + cbTextureTilingScale._m0[11u].w));
    float _748 = _746.x;
    float _749 = 1.0 - _748;
    float _758 = (cbMtdParam._m0[19u].x + dot(vec4(_719 * _709, _719 * _712, _719 * _715, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_748 - _749) * cbMtdParam._m0[24u].z) + _749) * cbMtdParam._m0[21u].z);
    float _4121 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _759 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _766 = (_759 * ((_566.x * cbMtdParam._m0[18u].x) - _545)) + _545;
    float _767 = (_759 * ((_566.y * cbMtdParam._m0[18u].y) - _546)) + _546;
    float _768 = (_759 * ((_566.z * cbMtdParam._m0[18u].z) - _547)) + _547;
    vec4 _794 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _796 = _794.x;
    float _814 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _299) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _300) + cbTextureTilingScale._m0[9u].w)).x - _796) * _446) + _796;
    float _831 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _299) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _300) + cbTextureTilingScale._m0[21u].w)).x - _814) * _519) + _814;
    float _835 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _831) * cbMtdParam._m0[19u].z) + _831;
    float _837 = _835 - (_835 * _759);
    float _842 = (((_585.z - _665) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _665;
    float _846 = ((_693.z - _842) * cbMtdParam._m0[19u].w) + _842;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _299) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _300) + cbTextureTilingScale._m0[15u].w));
    float _866 = (_859.x * 2.0) + (-1.0);
    float _867 = (_859.y * 2.0) + (-1.0);
    float _868 = dot(vec2(_866, _867), vec2(_866, _867));
    float _4132 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _876 = ((_859.z - _846) * _759) + _846;
    float _886 = ((sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _675) * _759) + _675;
    float _889 = (((_866 - _705) * _759) + _705) + (cbMtdParam._m0[21u].x * _705);
    float _890 = (((_867 - _706) * _759) + _706) + (cbMtdParam._m0[21u].x * _706);
    float _894 = cbMtdParam._m0[22u].x + _693.w;
    float _897 = fma(_886, _247, fma(_890, _254, _889 * _240));
    float _900 = fma(_886, _248, fma(_890, _255, _889 * _241));
    float _903 = fma(_886, _249, fma(_890, _256, _889 * _242));
    float _907 = inversesqrt(dot(vec3(_897, _900, _903), vec3(_897, _900, _903)));
    float _908 = _907 * _897;
    float _909 = _907 * _900;
    float _910 = _907 * _903;
    float _4143 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _911 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4165 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4176 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4187 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4198 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _916 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _930 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _971 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _981 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _971);
    float _982 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _971);
    float _983 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _971);
    float _987 = inversesqrt(dot(vec3(_981, _982, _983), vec3(_981, _982, _983)));
    float _988 = _981 * _987;
    float _989 = _982 * _987;
    float _990 = _983 * _987;
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_910, cbSceneParam._m0[5u].z, fma(_909, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _908));
    float _1018 = fma(_910, cbSceneParam._m0[6u].z, fma(_909, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _908));
    float _1021 = fma(_910, cbSceneParam._m0[7u].z, fma(_909, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _908));
    uint _1035 = (_280 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _4209 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _1047 = 1.0 - _916;
    float _1048 = _1044 * _1047;
    float _1049 = _1045 * _1047;
    float _1050 = _1046 * _1047;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _916;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _916;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _916;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1074 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * TEXCOORD_5.w) * _1070.x;
    float _1075 = dot(vec3(_908, _909, _910), vec3(_988, _989, _990));
    float _1078 = _1075 * 2.0;
    float _1082 = (_1078 * _908) - _988;
    float _1083 = (_1078 * _909) - _989;
    float _1084 = (_1078 * _910) - _990;
    float _1088 = abs(dot(vec3(_988, _989, _990), vec3(_908, _909, _910)));
    float _4242 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1090 = sqrt(_911);
    float _1103 = exp2((_1090 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1090 * 3.0));
    float _1109 = (1.0 - _1103) * ((_1090 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1110 = _1103 * _1090;
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1447;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1172 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1176 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1180 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1205 = _1138 + _908;
        float _1206 = _1142 + _909;
        float _1207 = _1146 + _910;
        float _1217 = fma(_1207, cbModelParam._m0[26u].z, fma(_1206, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1205)) - _1172;
        float _1218 = fma(_1207, cbModelParam._m0[27u].z, fma(_1206, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1205)) - _1176;
        float _1219 = fma(_1207, cbModelParam._m0[28u].z, fma(_1206, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1205)) - _1180;
        float _1223 = inversesqrt(dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219)));
        float _1236 = ((_1223 * _1217) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1172 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1237 = ((_1223 * _1218) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1176 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1223 * _1219) / cbModelParam._m0[34u].z) + ((((((_1180 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1236, _1237, _1238), 0.0);
        float _1275 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1241.x + (-0.5));
        float _1277 = _1275 * (_1241.y + (-0.5));
        float _1278 = _1275 * (_1241.z + (-0.5));
        float _1285 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1248.x + (-0.5));
        float _1287 = _1285 * (_1248.y + (-0.5));
        float _1288 = _1285 * (_1248.z + (-0.5));
        float _1295 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1255.x + (-0.5));
        float _1297 = _1295 * (_1255.y + (-0.5));
        float _1298 = _1295 * (_1255.z + (-0.5));
        float _1305 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1262.x + (-0.5));
        float _1307 = _1305 * (_1262.y + (-0.5));
        float _1308 = _1305 * (_1262.z + (-0.5));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = _1276 * 0.5;
        float _1313 = _1286 * 0.5;
        float _1314 = _1296 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1329 = (dot(vec3(_908, _909, _910), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1339 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1340 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1341 = _1340 * 2.0;
        float _1345 = (1.0 - _1340) / (_1340 + 1.0);
        float _4290 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1355 = ((((1.0 - _1346) * (_1341 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1341 + 1.0))) + _1346) * _1309;
        float _1356 = _1277 * 0.5;
        float _1357 = _1287 * 0.5;
        float _1358 = _1297 * 0.5;
        float _1359 = dot(vec3(_1356, _1357, _1358), vec3(_1356, _1357, _1358));
        float _1364 = (_1359 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1359);
        float _1372 = (dot(vec3(_908, _909, _910), vec3(_1364 * _1356, _1364 * _1357, _1364 * _1358)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1381 = sqrt(((_1357 * _1357) + (_1356 * _1356)) + (_1358 * _1358)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1383 = _1382 * 2.0;
        float _1387 = (1.0 - _1382) / (_1382 + 1.0);
        float _4323 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1397 = ((((1.0 - _1388) * (_1383 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1383 + 1.0))) + _1388) * _1310;
        float _1398 = _1278 * 0.5;
        float _1399 = _1288 * 0.5;
        float _1400 = _1298 * 0.5;
        float _1401 = dot(vec3(_1398, _1399, _1400), vec3(_1398, _1399, _1400));
        float _1406 = (_1401 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1401);
        float _1414 = (dot(vec3(_908, _909, _910), vec3(_1406 * _1398, _1406 * _1399, _1406 * _1400)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1423 = sqrt(((_1399 * _1399) + (_1398 * _1398)) + (_1400 * _1400)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4356 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1425 + 1.0))) + _1430) * _1311;
        _1447 = _1278;
        _1449 = _1277;
        _1450 = _1276;
        _1451 = _1288;
        _1452 = _1287;
        _1453 = _1286;
        _1454 = _1298;
        _1455 = _1297;
        _1456 = _1296;
        _1457 = _1311;
        _1458 = _1310;
        _1459 = _1309;
        _1460 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0)));
        _1461 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)));
        _1462 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
    }
    else
    {
        _1447 = _1448;
        _1449 = _1448;
        _1450 = _1448;
        _1451 = _1448;
        _1452 = _1448;
        _1453 = _1448;
        _1454 = _1448;
        _1455 = _1448;
        _1456 = _1448;
        _1457 = _1448;
        _1458 = _1448;
        _1459 = _1448;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1486 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1490 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1494 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1517 = _1138 + _908;
        float _1518 = _1142 + _909;
        float _1519 = _1146 + _910;
        float _1529 = fma(_1519, cbModelParam._m0[30u].z, fma(_1518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1517)) - _1486;
        float _1530 = fma(_1519, cbModelParam._m0[31u].z, fma(_1518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1517)) - _1490;
        float _1531 = fma(_1519, cbModelParam._m0[32u].z, fma(_1518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1517)) - _1494;
        float _1535 = inversesqrt(dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531)));
        float _1548 = ((_1535 * _1529) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1486 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1549 = ((_1535 * _1530) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1490 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1550 = ((_1535 * _1531) / cbModelParam._m0[35u].z) + ((((((_1494 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1548, _1549, _1550), 0.0);
        float _1585 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1552.x + (-0.5));
        float _1587 = _1585 * (_1552.y + (-0.5));
        float _1588 = _1585 * (_1552.z + (-0.5));
        float _1595 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1559.x + (-0.5));
        float _1597 = _1595 * (_1559.y + (-0.5));
        float _1598 = _1595 * (_1559.z + (-0.5));
        float _1605 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1566.x + (-0.5));
        float _1607 = _1605 * (_1566.y + (-0.5));
        float _1608 = _1605 * (_1566.z + (-0.5));
        float _1615 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1616 = _1615 * (_1573.x + (-0.5));
        float _1617 = _1615 * (_1573.y + (-0.5));
        float _1618 = _1615 * (_1573.z + (-0.5));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1621 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1622 = _1586 * 0.5;
        float _1623 = _1596 * 0.5;
        float _1624 = _1606 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_908, _909, _910), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4419 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1649 + 1.0))) + _1654) * _1619;
        float _1664 = _1587 * 0.5;
        float _1665 = _1597 * 0.5;
        float _1666 = _1607 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_908, _909, _910), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1620 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4452 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1691 + 1.0))) + _1696) * _1620;
        float _1706 = _1588 * 0.5;
        float _1707 = _1598 * 0.5;
        float _1708 = _1608 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_908, _909, _910), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1621 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4485 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1733 + 1.0))) + _1738) * _1621;
        _1755 = _1588;
        _1756 = _1587;
        _1757 = _1586;
        _1758 = _1598;
        _1759 = _1597;
        _1760 = _1596;
        _1761 = _1608;
        _1762 = _1607;
        _1763 = _1606;
        _1764 = _1621;
        _1765 = _1620;
        _1766 = _1619;
        _1767 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1768 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1769 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
    }
    else
    {
        _1755 = _1448;
        _1756 = _1448;
        _1757 = _1448;
        _1758 = _1448;
        _1759 = _1448;
        _1760 = _1448;
        _1761 = _1448;
        _1762 = _1448;
        _1763 = _1448;
        _1764 = _1448;
        _1765 = _1448;
        _1766 = _1448;
        _1767 = 0.0;
        _1768 = 0.0;
        _1769 = 0.0;
    }
    float _1779 = (cbModelParam._m0[1u].x * (_1767 - _1460)) + _1460;
    float _1780 = (cbModelParam._m0[1u].x * (_1768 - _1461)) + _1461;
    float _1781 = (cbModelParam._m0[1u].x * (_1769 - _1462)) + _1462;
    float _1802 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1805 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1808 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1779));
    float _1823 = _1082 * 0.5;
    float _1824 = _1083 * 0.5;
    float _1825 = _1084 * 0.5;
    float _1826 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1757, _1760, _1763, _1766));
    float _1829 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1756, _1759, _1762, _1765));
    float _1832 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1755, _1758, _1761, _1764));
    float _1866;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1839 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1447, _1451, _1454, _1457));
        float _1843 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1449, _1452, _1455, _1458));
        float _1847 = dot(vec4(_1823, _1824, _1825, 1.0), vec4(_1450, _1453, _1456, _1459));
        float _1854 = dot(vec4(cbModelParam._m0[39u]), vec4(_1823, _1824, _1825, 1.0));
        _1866 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1854) ? 0.0 : (isnan(0.0) ? _1854 : max(0.0, _1854))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1866 = 1.0;
    }
    float _1877;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1868 = dot(vec4(cbModelParam._m0[40u]), vec4(_1823, _1824, _1825, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)), isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0)), isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1868) ? 0.0 : (isnan(0.0) ? _1868 : max(0.0, _1868))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1881 = (_1877 * cbModelParam._m0[1u].x) + (_1866 * (1.0 - cbModelParam._m0[1u].x));
    float _1891 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _911);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1891 : min(cbModelParam._m0[25u].z, _1891));
    float _1972;
    float _1974;
    float _1976;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1939 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1943 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1947 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1950 = fma(_1084, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082));
        float _1953 = fma(_1084, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082));
        float _1956 = fma(_1084, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082));
        float _1984;
        if (_1950 > 0.0)
        {
            _1984 = abs((1.0 - _1939) / _1950);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1950 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1939 + 1.0) / _1950);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1984 = frontier_phi_14_12_ladder;
        }
        float _2155;
        if (_1953 > 0.0)
        {
            _2155 = abs((1.0 - _1943) / _1953);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1953 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1943 + 1.0) / _1953);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2155 = frontier_phi_23_19_ladder;
        }
        float _2450;
        if (_1956 > 0.0)
        {
            _2450 = abs((1.0 - _1947) / _1956);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1947 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2450 = frontier_phi_35_30_ladder;
        }
        float _2452 = isnan(_2155) ? _1984 : (isnan(_1984) ? _2155 : min(_1984, _2155));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1950) + _1939;
        float _2458 = (_2453 * _1953) + _1943;
        float _2459 = (_2453 * _1956) + _1947;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1892);
            frontier_phi_13_35_ladder = _2604.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2604.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2604.x * cbModelParam._m0[1u].y;
        }
        _1972 = frontier_phi_13_35_ladder_2;
        _1974 = frontier_phi_13_35_ladder_1;
        _1976 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1960 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1082, _1083, _1084), _1892);
        _1972 = _1960.x * cbModelParam._m0[1u].y;
        _1974 = _1960.y * cbModelParam._m0[1u].y;
        _1976 = _1960.z * cbModelParam._m0[1u].y;
    }
    float _1980 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _911);
    float _1981 = isnan(_1980) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1980 : min(cbModelParam._m0[25u].w, _1980));
    float _2070;
    float _2072;
    float _2074;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2034 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2038 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2042 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2045 = fma(_1084, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082));
        float _2048 = fma(_1084, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082));
        float _2051 = fma(_1084, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082));
        float _2160;
        if (_2045 > 0.0)
        {
            _2160 = abs((1.0 - _2034) / _2045);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2045 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2034 + 1.0) / _2045);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2160 = frontier_phi_25_21_ladder;
        }
        float _2477;
        if (_2048 > 0.0)
        {
            _2477 = abs((1.0 - _2038) / _2048);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2048 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2038 + 1.0) / _2048);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2477 = frontier_phi_37_32_ladder;
        }
        float _2815;
        if (_2051 > 0.0)
        {
            _2815 = abs((1.0 - _2042) / _2051);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2051 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2042 + 1.0) / _2051);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2815 = frontier_phi_47_44_ladder;
        }
        float _2817 = isnan(_2477) ? _2160 : (isnan(_2160) ? _2477 : min(_2160, _2477));
        float _2818 = isnan(_2815) ? _2817 : (isnan(_2817) ? _2815 : min(_2817, _2815));
        float _2822 = (_2818 * _2045) + _2034;
        float _2823 = (_2818 * _2048) + _2038;
        float _2824 = (_2818 * _2051) + _2042;
        float _2825 = _2818 * 9.9999997473787516355514526367188e-05;
        float _2826 = (-1.0) - _2825;
        float _2828 = _2825 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2824 > _2828) || ((_2824 < _2826) || ((_2823 > _2828) || ((_2823 < _2826) || ((_2822 < _2826) || (_2822 > _2828))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2946 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2824, cbModelParam._m0[17u].z, fma(_2823, cbModelParam._m0[17u].y, _2822 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2824, cbModelParam._m0[18u].z, fma(_2823, cbModelParam._m0[18u].y, _2822 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2824, cbModelParam._m0[19u].z, fma(_2823, cbModelParam._m0[19u].y, _2822 * cbModelParam._m0[19u].x))), _1981);
            frontier_phi_22_47_ladder = _2946.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2946.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2946.x * cbModelParam._m0[1u].z;
        }
        _2070 = frontier_phi_22_47_ladder_2;
        _2072 = frontier_phi_22_47_ladder_1;
        _2074 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2054 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1082, _1083, _1084), _1981);
        _2070 = _2054.x * cbModelParam._m0[1u].z;
        _2072 = _2054.y * cbModelParam._m0[1u].z;
        _2074 = _2054.z * cbModelParam._m0[1u].z;
    }
    float _2087 = (((_1109 * _1058) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2070 - _1972)) + _1972);
    float _2089 = (((_1109 * _1060) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2072 - _1974)) + _1974);
    float _2091 = (((_1109 * _1061) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2074 - _1976)) + _1976);
    float _2094 = fma(_2091, cbSceneParam._m0[89u].z, fma(_2089, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2097 = fma(_2091, cbSceneParam._m0[90u].z, fma(_2089, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2100 = fma(_2091, cbSceneParam._m0[91u].z, fma(_2089, cbSceneParam._m0[91u].y, _2087 * cbSceneParam._m0[91u].x));
    float _2134 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2138 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2142 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2146 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2147 = _2134 / _2146;
    float _2148 = _2138 / _2146;
    float _2149 = _2142 / _2146;
    float _2296;
    float _2297;
    float _2298;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2176 = ((uint(_2149 > cbSceneParam._m0[59u].y) + uint(_2149 > cbSceneParam._m0[59u].x)) + uint(_2149 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2177 = _2176 + 43u;
        uint _2185 = _2176 + 44u;
        uint _2193 = _2176 + 45u;
        uint _2201 = _2176 + 46u;
        float _2212 = fma(_2146, cbSceneParam._m0[_2177].w, fma(_2142, cbSceneParam._m0[_2177].z, fma(_2138, cbSceneParam._m0[_2177].y, _2134 * cbSceneParam._m0[_2177].x)));
        float _2216 = fma(_2146, cbSceneParam._m0[_2185].w, fma(_2142, cbSceneParam._m0[_2185].z, fma(_2138, cbSceneParam._m0[_2185].y, _2134 * cbSceneParam._m0[_2185].x)));
        float _2224 = fma(_2146, cbSceneParam._m0[_2201].w, fma(_2142, cbSceneParam._m0[_2201].z, fma(_2138, cbSceneParam._m0[_2201].y, _2134 * cbSceneParam._m0[_2201].x)));
        float _2229 = cbSceneParam._m0[33u].z * _2224;
        float _2231 = cbSceneParam._m0[33u].w * _2224;
        float _2234 = fma(_2146, cbSceneParam._m0[_2193].w, fma(_2142, cbSceneParam._m0[_2193].z, fma(_2138, cbSceneParam._m0[_2193].y, _2134 * cbSceneParam._m0[_2193].x))) / _2224;
        float _2282 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
        float _4611 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2289 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2229 + _2212) / _2224, (_2231 + _2216) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2231 + _2212) / _2224, (_2216 - _2229) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2229) / _2224, (_2216 - _2231) / _2224), _2234), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 - _2231) / _2224, (_2229 + _2216) / _2224), _2234), 0.0)).x), vec4(0.25)));
        _2296 = 1.0 - (_2289 * cbSceneParam._m0[34u].x);
        _2297 = 1.0 - (_2289 * cbSceneParam._m0[34u].y);
        _2298 = 1.0 - (_2289 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2296 = 1.0;
        _2297 = 1.0;
        _2298 = 1.0;
    }
    float _2362;
    float _2364;
    float _2366;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2350 = fma(_2146, cbSceneParam._m0[63u].w, fma(_2142, cbSceneParam._m0[63u].z, fma(_2138, cbSceneParam._m0[63u].y, _2134 * cbSceneParam._m0[63u].x)));
        float _2351 = fma(_2146, cbSceneParam._m0[60u].w, fma(_2142, cbSceneParam._m0[60u].z, fma(_2138, cbSceneParam._m0[60u].y, _2134 * cbSceneParam._m0[60u].x))) / _2350;
        float _2352 = fma(_2146, cbSceneParam._m0[61u].w, fma(_2142, cbSceneParam._m0[61u].z, fma(_2138, cbSceneParam._m0[61u].y, _2134 * cbSceneParam._m0[61u].x))) / _2350;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2351 >= cbSceneParam._m0[64u].x) && (_2352 >= cbSceneParam._m0[64u].y)) && (_2351 <= cbSceneParam._m0[64u].z)) && (_2352 <= cbSceneParam._m0[64u].w))
        {
            float _2490 = fma(_2146, cbSceneParam._m0[62u].w, fma(_2142, cbSceneParam._m0[62u].z, fma(_2138, cbSceneParam._m0[62u].y, _2134 * cbSceneParam._m0[62u].x))) / _2350;
            float _2494 = isnan(cbSceneParam._m0[41u].w) ? _2490 : (isnan(_2490) ? cbSceneParam._m0[41u].w : max(_2490, cbSceneParam._m0[41u].w));
            float _2537 = (cbSceneParam._m0[33u].x - sqrt(((_2148 * _2148) + (_2147 * _2147)) + (_2149 * _2149))) * cbSceneParam._m0[33u].y;
            float _4627 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
            float _2544 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2351, cbSceneParam._m0[33u].w + _2352), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2351, _2352 - cbSceneParam._m0[33u].z), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].z, _2352 - cbSceneParam._m0[33u].w), _2494), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2351 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2352), _2494), 0.0)).x), vec4(0.25)));
            float _2548 = 1.0 - (_2544 * cbSceneParam._m0[34u].x);
            float _2549 = 1.0 - (_2544 * cbSceneParam._m0[34u].y);
            float _2550 = 1.0 - (_2544 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2550) ? _2298 : (isnan(_2298) ? _2550 : min(_2298, _2550));
            frontier_phi_34_33_ladder_1 = isnan(_2549) ? _2297 : (isnan(_2297) ? _2549 : min(_2297, _2549));
            frontier_phi_34_33_ladder_2 = isnan(_2548) ? _2296 : (isnan(_2296) ? _2548 : min(_2296, _2548));
        }
        else
        {
            frontier_phi_34_33_ladder = _2298;
            frontier_phi_34_33_ladder_1 = _2297;
            frontier_phi_34_33_ladder_2 = _2296;
        }
        _2362 = frontier_phi_34_33_ladder_2;
        _2364 = frontier_phi_34_33_ladder_1;
        _2366 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2362 = _2296;
        _2364 = _2297;
        _2366 = _2298;
    }
    uvec4 _2371 = floatBitsToUint(cbInstanceData._m0[_280 + 5u]);
    uint _2373 = _2371.x * 14u;
    uint _2374 = _2373 + 13u;
    float _2381 = _1074 + (-1.0);
    float _2386 = (cbLight._m0[_2374].x * _2381) + 1.0;
    float _2387 = (cbLight._m0[_2374].y * _2381) + 1.0;
    float _2388 = (cbLight._m0[_2374].z * _2381) + 1.0;
    float _2389 = (cbLight._m0[_2374].w * _2381) + 1.0;
    uint _2390 = _2373 + 5u;
    float _2396 = isnan(1.0) ? _2387 : (isnan(_2387) ? 1.0 : min(_2387, 1.0));
    uint _2400 = _2373 + 4u;
    float _2409 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    uint _2413 = _2373 | 1u;
    float _2424 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_908, _909, _910));
    float _2427 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_908, _909, _910));
    float _4663 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _4674 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2432 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2434 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2441 = ((cbLight._m0[_2390].x * _2396) * _2434) + (((cbLight._m0[_2400].x * _2362) * _2409) * _2432);
    float _2442 = ((_2396 * cbLight._m0[_2390].y) * _2434) + (((cbLight._m0[_2400].y * _2364) * _2409) * _2432);
    float _2443 = ((_2396 * cbLight._m0[_2390].z) * _2434) + (((cbLight._m0[_2400].z * _2366) * _2409) * _2432);
    uvec4 _2447 = floatBitsToUint(cbLight._m0[_2373 + 12u]);
    bool _2449 = _2447.x == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2449)
    {
        _2551 = _2441;
        _2553 = _2442;
        _2555 = _2443;
    }
    else
    {
        uint _2559 = _2373 + 6u;
        float _2575 = (dot(vec3(cbLight._m0[_2373 + 2u].xyz), vec3(_908, _909, _910)) * 0.5) + 0.5;
        float _2576 = _2575 * _2575;
        float _4685 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2577 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2578 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2551 = (((cbLight._m0[_2559].x * 0.3183098733425140380859375) * _2577) * _2578) + _2441;
        _2553 = (((cbLight._m0[_2559].y * 0.3183098733425140380859375) * _2577) * _2578) + _2442;
        _2555 = (((cbLight._m0[_2559].z * 0.3183098733425140380859375) * _2577) * _2578) + _2443;
    }
    bool _2558 = _2447.y == 0u;
    float _2613;
    float _2615;
    float _2617;
    if (_2558)
    {
        _2613 = _2551;
        _2615 = _2553;
        _2617 = _2555;
    }
    else
    {
        uint _2786 = _2373 + 7u;
        float _2802 = (dot(vec3(cbLight._m0[_2373 + 3u].xyz), vec3(_908, _909, _910)) * 0.5) + 0.5;
        float _2803 = _2802 * _2802;
        float _4701 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2804 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2805 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2613 = (((cbLight._m0[_2786].x * 0.3183098733425140380859375) * _2804) * _2805) + _2551;
        _2615 = (((cbLight._m0[_2786].y * 0.3183098733425140380859375) * _2804) * _2805) + _2553;
        _2617 = (((cbLight._m0[_2786].z * 0.3183098733425140380859375) * _2804) * _2805) + _2555;
    }
    uint _2620 = _2373 + 8u;
    float _2633 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _911) * 0.949999988079071044921875);
    float _2634 = _2633 * _2633;
    float _2635 = cbLight._m0[_2373].x + _988;
    float _2636 = cbLight._m0[_2373].y + _989;
    float _2637 = cbLight._m0[_2373].z + _990;
    float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
    float _2642 = _2641 * _2635;
    float _2643 = _2641 * _2636;
    float _2644 = _2641 * _2637;
    float _2645 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2373].xyz));
    float _4717 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2648 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _4728 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2649 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2650 = dot(vec3(_908, _909, _910), vec3(_2642, _2643, _2644));
    float _4739 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2654 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2642, _2643, _2644));
    float _4750 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2658 = _2634 * _2634;
    float _2662 = ((_2653 * _2653) * (_2658 + (-1.0))) + 1.0;
    float _2670 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
    float _2671 = 0.959999978542327880859375 - _1055;
    float _2673 = 0.959999978542327880859375 - _1056;
    float _2674 = 0.959999978542327880859375 - _1057;
    float _2681 = 1.0 - _2634;
    float _2692 = (0.5 / (((_2649 * ((_2648 * _2681) + _2634)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2681) + _2634) * _2648))) * _2648;
    float _4761 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2658 / ((_2662 * _2662) * 3.141590118408203125));
    uint _2708 = _2373 + 9u;
    float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _911) * 0.949999988079071044921875);
    float _2720 = _2719 * _2719;
    float _2721 = cbLight._m0[_2413].x + _988;
    float _2722 = cbLight._m0[_2413].y + _989;
    float _2723 = cbLight._m0[_2413].z + _990;
    float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
    float _2728 = _2727 * _2721;
    float _2729 = _2727 * _2722;
    float _2730 = _2727 * _2723;
    float _2731 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2413].xyz));
    float _4772 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2734 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2735 = dot(vec3(_908, _909, _910), vec3(_2728, _2729, _2730));
    float _4783 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
    float _2738 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2739 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2728, _2729, _2730));
    float _4794 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
    float _2743 = _2720 * _2720;
    float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
    float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
    float _2761 = 1.0 - _2720;
    float _2771 = (0.5 / (((_2649 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2761) + _2720) * _2734))) * _2734;
    float _4805 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
    float _2773 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
    float _2783 = (((((_2754 * _2671) + _1058) * cbLight._m0[_2708].x) * _2773) * _2396) + ((((cbLight._m0[_2620].x * _2362) * ((_2670 * _2671) + _1058)) * _2694) * _2409);
    float _2784 = (((((_2754 * _2673) + _1060) * cbLight._m0[_2708].y) * _2773) * _2396) + ((((cbLight._m0[_2620].y * _2364) * ((_2670 * _2673) + _1060)) * _2694) * _2409);
    float _2785 = (((((_2754 * _2674) + _1061) * cbLight._m0[_2708].z) * _2773) * _2396) + ((((cbLight._m0[_2620].z * _2366) * ((_2670 * _2674) + _1061)) * _2694) * _2409);
    float _2841;
    float _2843;
    float _2845;
    if (_2449)
    {
        _2841 = _2783;
        _2843 = _2784;
        _2845 = _2785;
    }
    else
    {
        uint _2847 = _2373 + 2u;
        uint _2851 = _2373 + 10u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _911) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _988;
        float _2868 = cbLight._m0[_2847].y + _989;
        float _2869 = cbLight._m0[_2847].z + _990;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2847].xyz));
        float _4816 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2881 = dot(vec3(_908, _909, _910), vec3(_2874, _2875, _2876));
        float _4827 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4838 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2649 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _2907) + _2866) * _2880))) * _2880;
        float _4849 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2388 : (isnan(_2388) ? 1.0 : min(_2388, 1.0));
        _2841 = (((((_2900 * _2671) + _1058) * cbLight._m0[_2851].x) * _2919) * _2920) + _2783;
        _2843 = (((((_2900 * _2673) + _1060) * cbLight._m0[_2851].y) * _2919) * _2920) + _2784;
        _2845 = (((((_2900 * _2674) + _1061) * cbLight._m0[_2851].z) * _2919) * _2920) + _2785;
    }
    float _2951;
    float _2953;
    float _2955;
    if (_2558)
    {
        _2951 = _2841;
        _2953 = _2843;
        _2955 = _2845;
    }
    else
    {
        uint _2962 = _2373 + 3u;
        uint _2966 = _2373 + 11u;
        float _2980 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2962].w)) * _911) * 0.949999988079071044921875);
        float _2981 = _2980 * _2980;
        float _2982 = cbLight._m0[_2962].x + _988;
        float _2983 = cbLight._m0[_2962].y + _989;
        float _2984 = cbLight._m0[_2962].z + _990;
        float _2988 = inversesqrt(dot(vec3(_2982, _2983, _2984), vec3(_2982, _2983, _2984)));
        float _2989 = _2988 * _2982;
        float _2990 = _2988 * _2983;
        float _2991 = _2988 * _2984;
        float _2992 = dot(vec3(_908, _909, _910), vec3(cbLight._m0[_2962].xyz));
        float _4865 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2995 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _2996 = dot(vec3(_908, _909, _910), vec3(_2989, _2990, _2991));
        float _4876 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
        float _2999 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _3000 = dot(vec3(cbLight._m0[_2962].xyz), vec3(_2989, _2990, _2991));
        float _4887 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        float _3004 = _2981 * _2981;
        float _3008 = ((_2999 * _2999) * (_3004 + (-1.0))) + 1.0;
        float _3015 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
        float _3022 = 1.0 - _2981;
        float _3032 = (0.5 / (((_2649 * ((_2995 * _3022) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_2649 * _3022) + _2981) * _2995))) * _2995;
        float _4898 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        float _3034 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_3004 / ((_3008 * _3008) * 3.141590118408203125));
        float _3035 = isnan(1.0) ? _2389 : (isnan(_2389) ? 1.0 : min(_2389, 1.0));
        _2951 = (((((_3015 * _2671) + _1058) * cbLight._m0[_2966].x) * _3034) * _3035) + _2841;
        _2953 = (((((_3015 * _2673) + _1060) * cbLight._m0[_2966].y) * _3034) * _3035) + _2843;
        _2955 = (((((_3015 * _2674) + _1061) * cbLight._m0[_2966].z) * _3034) * _3035) + _2845;
    }
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_2371.y == 0u)
    {
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.x;
        uint _3068 = uint((float(_3056.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _3057))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _3057)));
        float _3078 = (log2(_2149 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3079 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        uint _3082 = uint(isnan(14.0) ? _3079 : (isnan(_3079) ? 14.0 : min(_3079, 14.0)));
        uvec4 _3087 = texelFetch(g_lightClusterGridBuffer, int(((_3082 << 2u) + (_3068 << 6u)) >> 2u));
        uint _3088 = _3087.x;
        uint _3089 = _3056.z;
        float _3168;
        float _3170;
        float _3172;
        float _3174;
        float _3176;
        float _3178;
        if (((((1u << ((_3089 >> 4u) & 15u)) + 4294967295u) & _3088) == 0u) || ((_3089 & 240u) == 0u))
        {
            _3168 = 0.0;
            _3170 = 0.0;
            _3172 = 0.0;
            _3174 = 0.0;
            _3176 = 0.0;
            _3178 = 0.0;
        }
        else
        {
            float _3169;
            float _3171;
            float _3173;
            float _3175;
            float _3177;
            float _3179;
            float _3313 = 0.0;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            uint _3319 = 0u;
            uint _3328;
            bool _3329;
            for (;;)
            {
                _3328 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3319 << 2u)) >> 2u)).x;
                _3329 = _3328 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3329)
                {
                    frontier_phi_66_pred = _3318;
                    frontier_phi_66_pred_1 = _3317;
                    frontier_phi_66_pred_2 = _3316;
                    frontier_phi_66_pred_3 = _3315;
                    frontier_phi_66_pred_4 = _3314;
                    frontier_phi_66_pred_5 = _3313;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3313;
                    _3438 = _3314;
                    _3439 = _3315;
                    _3440 = _3316;
                    _3441 = _3317;
                    _3442 = _3318;
                    _3443 = _3328;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3319 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _2147;
                        float _3504 = _3463.y - _2148;
                        float _3505 = _3463.z - _2149;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_1015, _1018, _1021), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4924 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3534 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3538 = (-0.0) - _2147;
                        float _3539 = (-0.0) - _2148;
                        float _3540 = (-0.0) - _2149;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3554 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3555 = 1.0 - _1090;
                        float _3562 = sqrt(1.0 - ((1.0 - (_3555 * _3555)) * (1.0 - (_3554 * _3554))));
                        float _3563 = _3562 * _3562;
                        float _3564 = _3563 * _3563;
                        float _3565 = _3545 + _3510;
                        float _3566 = _3546 + _3511;
                        float _3567 = _3547 + _3512;
                        float _3571 = inversesqrt(dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567)));
                        float _3575 = dot(vec3(_1015, _1018, _1021), vec3(_3545, _3546, _3547));
                        float _4940 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                        float _3578 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3579 = dot(vec3(_1015, _1018, _1021), vec3(_3571 * _3565, _3571 * _3566, _3571 * _3567));
                        float _4951 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3582 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3586 = ((_3582 * _3582) * (_3564 + (-1.0))) + 1.0;
                        float _3587 = _3523 * _3563;
                        float _3588 = _3587 * _3587;
                        float _3591 = ((1.0 - _3588) * _3513) + _3588;
                        float _4962 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3592 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3593 = 1.0 - _3563;
                        float _3603 = (0.5 / (((_3592 * ((_3578 * _3593) + _3563)) + 9.9999999392252902907785028219223e-09) + (((_3592 * _3593) + _3563) * _3578))) * _3592;
                        float _4973 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                        float _3614 = (((_3564 * 3.1415927410125732421875) * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) / ((_3586 * _3586) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3372 = (_3534 * _3482.x) + _3440;
                        _3373 = (_3534 * _3482.y) + _3441;
                        _3374 = (_3534 * _3482.z) + _3442;
                        _3369 = (_3614 * _3499.x) + _3437;
                        _3370 = (_3614 * _3499.y) + _3438;
                        _3371 = (_3614 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3369;
                            _3438 = _3370;
                            _3439 = _3371;
                            _3440 = _3372;
                            _3441 = _3373;
                            _3442 = _3374;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_66_pred = _3374;
                    frontier_phi_66_pred_1 = _3373;
                    frontier_phi_66_pred_2 = _3372;
                    frontier_phi_66_pred_3 = _3371;
                    frontier_phi_66_pred_4 = _3370;
                    frontier_phi_66_pred_5 = _3369;
                }
                _3179 = frontier_phi_66_pred;
                _3177 = frontier_phi_66_pred_1;
                _3175 = frontier_phi_66_pred_2;
                _3173 = frontier_phi_66_pred_3;
                _3171 = frontier_phi_66_pred_4;
                _3169 = frontier_phi_66_pred_5;
                uint _3320 = _3319 + 1u;
                if (_3320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3313 = _3169;
                    _3314 = _3171;
                    _3315 = _3173;
                    _3316 = _3175;
                    _3317 = _3177;
                    _3318 = _3179;
                    _3319 = _3320;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3168 = _3169;
            _3170 = _3171;
            _3172 = _3173;
            _3174 = _3175;
            _3176 = _3177;
            _3178 = _3179;
        }
        uvec4 _3182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3183 = _3182.z;
        uint _3185 = (_3183 >> 8u) & 15u;
        float _3281;
        float _3283;
        float _3285;
        float _3287;
        float _3289;
        float _3291;
        if (((4294967295u << _3185) & _3088) == 0u)
        {
            _3281 = _3168;
            _3283 = _3170;
            _3285 = _3172;
            _3287 = _3174;
            _3289 = _3176;
            _3291 = _3178;
        }
        else
        {
            float _3306 = inversesqrt(dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149)));
            float _3307 = _3306 * _2147;
            float _3308 = _3306 * _2148;
            float _3309 = _3306 * _2149;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3185 < ((_3183 >> 12u) & 15u))
            {
                float _3282;
                float _3284;
                float _3286;
                float _3288;
                float _3290;
                float _3292;
                float _3420 = _3168;
                float _3421 = _3170;
                float _3422 = _3172;
                float _3423 = _3174;
                float _3424 = _3176;
                float _3425 = _3178;
                uint _3426 = _3185;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3436)
                    {
                        frontier_phi_72_pred = _3425;
                        frontier_phi_72_pred_1 = _3424;
                        frontier_phi_72_pred_2 = _3423;
                        frontier_phi_72_pred_3 = _3422;
                        frontier_phi_72_pred_4 = _3421;
                        frontier_phi_72_pred_5 = _3420;
                    }
                    else
                    {
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3917;
                        float _3632 = _3420;
                        float _3633 = _3421;
                        float _3634 = _3422;
                        float _3635 = _3423;
                        float _3636 = _3424;
                        float _3637 = _3425;
                        uint _3638 = _3435;
                        uint _3639;
                        vec4 _3664;
                        float _3665;
                        vec4 _3680;
                        vec3 _3692;
                        vec4 _3707;
                        vec4 _3722;
                        float _3768;
                        bool _3769;
                        for (;;)
                        {
                            uint _3649 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3638));
                            _3639 = (_3638 + 4294967295u) & _3638;
                            uint _3651 = _3649 * 40u;
                            _3664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3651 + 3u)).x));
                            _3665 = _3664.w;
                            uint _3667 = (_3649 * 40u) + 4u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            uint _3682 = (_3649 * 40u) + 8u;
                            _3692 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x));
                            uint _3694 = (_3649 * 40u) + 16u;
                            _3707 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3694 + 3u)).x));
                            uint _3709 = (_3649 * 40u) + 20u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3649 * 40u) + 24u;
                            vec4 _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3743 = (_3649 * 40u) + 28u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            _3768 = fma(_2149, _3756.z, fma(_2148, _3756.y, _3756.x * _2147)) + _3756.w;
                            _3769 = !((fma(_2149, _3737.z, fma(_2148, _3737.y, _3737.x * _2147)) + _3737.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3769)
                            {
                                float _3796 = _3664.x - _2147;
                                float _3797 = _3664.y - _2148;
                                float _3798 = _3664.z - _2149;
                                float _3799 = dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798));
                                float _3802 = inversesqrt(_3799);
                                float _3803 = _3802 * _3796;
                                float _3804 = _3802 * _3797;
                                float _3805 = _3802 * _3798;
                                float _3809 = 1.0 - (_3799 / (_3665 * _3665));
                                float _4984 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3814 = sqrt(_3799) * _3680.w;
                                float _3816 = 1.39999997615814208984375 / (_3814 + 1.39999997615814208984375);
                                float _3817 = _3816 * _3816;
                                float _3820 = ((1.0 - _3817) * dot(vec3(_3803, _3804, _3805), vec3(_1015, _1018, _1021))) + _3817;
                                float _3823 = _3814 * _3814;
                                float _3827 = (fma(_2149, _3707.z, fma(_2148, _3707.y, _3707.x * _2147)) + _3707.w) / _3768;
                                float _3828 = (fma(_2149, _3722.z, fma(_2148, _3722.y, _3722.x * _2147)) + _3722.w) / _3768;
                                float _3832 = 1.0 - dot(vec2(_3827, _3828), vec2(_3827, _3828));
                                float _5000 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3833 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3834 = _3833 * (((isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0))) * _3810) / ((_3823 * 0.699999988079071044921875) + 1.0));
                                float _3846 = exp2(log2(1.0 / ((_3823 * 3.5) + 5.0)) * 0.25);
                                float _3847 = 1.0 - _1090;
                                float _3854 = sqrt(1.0 - ((1.0 - (_3847 * _3847)) * (1.0 - (_3846 * _3846))));
                                float _3855 = _3854 * _3854;
                                float _3856 = _3855 * _3855;
                                float _3857 = _3803 - _3307;
                                float _3858 = _3804 - _3308;
                                float _3859 = _3805 - _3309;
                                float _3863 = inversesqrt(dot(vec3(_3857, _3858, _3859), vec3(_3857, _3858, _3859)));
                                float _3867 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3307, (-0.0) - _3308, (-0.0) - _3309));
                                float _5011 = isnan(0.0) ? _3867 : (isnan(_3867) ? 0.0 : max(_3867, 0.0));
                                float _3870 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3871 = dot(vec3(_1015, _1018, _1021), vec3(_3863 * _3857, _3863 * _3858, _3863 * _3859));
                                float _5022 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3878 = ((_3874 * _3874) * (_3856 + (-1.0))) + 1.0;
                                float _3879 = _3816 * _3855;
                                float _3880 = _3879 * _3879;
                                float _3886 = ((1.0 - _3880) * dot(vec3(_1015, _1018, _1021), vec3(_3803, _3804, _3805))) + _3880;
                                float _5033 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3887 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3888 = 1.0 - _3855;
                                float _3898 = (0.5 / (((_3887 * ((_3870 * _3888) + _3855)) + 9.9999999392252902907785028219223e-09) + (((_3887 * _3888) + _3855) * _3870))) * _3887;
                                float _5044 = isnan(0.0) ? _3898 : (isnan(_3898) ? 0.0 : max(_3898, 0.0));
                                float _3908 = (_3833 * _3810) * (((_3856 * 3.1415927410125732421875) * (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0)))) / ((_3878 * _3878) * ((_3823 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3834 * _3680.y;
                                frontier_phi_78_pred_1 = _3834 * _3680.x;
                                frontier_phi_78_pred_2 = _3908 * _3692.z;
                                frontier_phi_78_pred_3 = _3908 * _3692.y;
                                frontier_phi_78_pred_4 = _3908 * _3692.x;
                                frontier_phi_78_pred_5 = _3834 * _3680.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3916 = frontier_phi_78_pred;
                            _3915 = frontier_phi_78_pred_1;
                            _3914 = frontier_phi_78_pred_2;
                            _3913 = frontier_phi_78_pred_3;
                            _3912 = frontier_phi_78_pred_4;
                            _3917 = frontier_phi_78_pred_5;
                            _3622 = _3915 + _3635;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3619 = _3912 + _3632;
                            _3620 = _3913 + _3633;
                            _3621 = _3914 + _3634;
                            if (_3639 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3639;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3624;
                        frontier_phi_72_pred_1 = _3623;
                        frontier_phi_72_pred_2 = _3622;
                        frontier_phi_72_pred_3 = _3621;
                        frontier_phi_72_pred_4 = _3620;
                        frontier_phi_72_pred_5 = _3619;
                    }
                    _3292 = frontier_phi_72_pred;
                    _3290 = frontier_phi_72_pred_1;
                    _3288 = frontier_phi_72_pred_2;
                    _3286 = frontier_phi_72_pred_3;
                    _3284 = frontier_phi_72_pred_4;
                    _3282 = frontier_phi_72_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3282;
                        _3421 = _3284;
                        _3422 = _3286;
                        _3423 = _3288;
                        _3424 = _3290;
                        _3425 = _3292;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3292;
                frontier_phi_60_61_ladder_1 = _3290;
                frontier_phi_60_61_ladder_2 = _3286;
                frontier_phi_60_61_ladder_3 = _3284;
                frontier_phi_60_61_ladder_4 = _3282;
                frontier_phi_60_61_ladder_5 = _3288;
            }
            else
            {
                frontier_phi_60_61_ladder = _3178;
                frontier_phi_60_61_ladder_1 = _3176;
                frontier_phi_60_61_ladder_2 = _3172;
                frontier_phi_60_61_ladder_3 = _3170;
                frontier_phi_60_61_ladder_4 = _3168;
                frontier_phi_60_61_ladder_5 = _3174;
            }
            _3281 = frontier_phi_60_61_ladder_4;
            _3283 = frontier_phi_60_61_ladder_3;
            _3285 = frontier_phi_60_61_ladder_2;
            _3287 = frontier_phi_60_61_ladder_5;
            _3289 = frontier_phi_60_61_ladder_1;
            _3291 = frontier_phi_60_61_ladder;
        }
        float _3296 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _3101 = (_3296 * _3287) + _2613;
        _3103 = (_3296 * _3289) + _2615;
        _3105 = (_3296 * _3291) + _2617;
        _3107 = ((_3281 * _1058) * _3296) + _2951;
        _3109 = ((_3283 * _1060) * _3296) + _2953;
        _3111 = ((_3285 * _1061) * _3296) + _2955;
    }
    else
    {
        _3101 = _2613;
        _3103 = _2615;
        _3105 = _2617;
        _3107 = _2951;
        _3109 = _2953;
        _3111 = _2955;
    }
    float _5060 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5071 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5082 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    uint _3131 = _280 + 6u;
    float _3139 = _996 / cbSceneParam._m0[86u].x;
    float _3140 = _997 / cbSceneParam._m0[86u].y;
    vec4 _3154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, (log2((isnan(cbSceneParam._m0[77u].w) ? _930 : (isnan(_930) ? cbSceneParam._m0[77u].w : min(_930, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3156 = _3154.x;
    float _3157 = _3154.y;
    float _3158 = _3154.z;
    float _3159 = _3154.w;
    float _3231;
    float _3233;
    float _3235;
    float _3237;
    if (_930 > cbSceneParam._m0[78u].w)
    {
        float _3193 = isnan(_930) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _930 : min(cbSceneParam._m0[80u].w, _930));
        float _3194 = _3193 / _930;
        float _3205 = _3194 * _981;
        float _3206 = _982 * _3194;
        float _3207 = (-0.0) - _3206;
        float _3209 = _3194 * _983;
        float _3211 = (cbSceneParam._m0[77u].w * _3207) / _3193;
        float _3212 = _3211 + cbSceneParam._m0[79u].w;
        float _3213 = cbSceneParam._m0[79u].w - _3206;
        float _3219 = sqrt(((_3205 * _3205) + (_3206 * _3206)) + (_3209 * _3209));
        float _3222 = (1.0 - (cbSceneParam._m0[77u].w / _3193)) * _3219;
        float _3227 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3229 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3382;
        if (abs((_3207 - _3211) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3382 = ((((_3212 > 0.0) ? exp2(_3227 * _3212) : (2.0 - exp2(_3229 * _3212))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3222;
        }
        else
        {
            float _3342 = 1.0 / cbSceneParam._m0[80u].x;
            float _3343 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : max(_3212, _3213));
            float _3344 = isnan(_3213) ? _3212 : (isnan(_3212) ? _3213 : min(_3212, _3213));
            float _3353 = isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : min(_3343, 0.0));
            float _3354 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : min(_3344, 0.0));
            _3382 = ((abs(_3219 / _3207) * cbSceneParam._m0[80u].y) * ((((_3353 - _3354) * 2.0) - ((exp2(_3227 * (isnan(0.0) ? _3343 : (isnan(_3343) ? 0.0 : max(_3343, 0.0)))) - exp2(_3227 * (isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))))) * _3342)) - ((exp2(_3229 * _3353) - exp2(_3229 * _3354)) * _3342))) + (_3222 * cbSceneParam._m0[80u].z);
        }
        vec4 _3384 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, 1.0), 0.0);
        float _3393 = exp2((_3382 * (-1.44269502162933349609375)) * (1.0 - _3384.w));
        float _3394 = log2(_3393);
        float _3410 = log2(_3159);
        _3231 = (exp2(_3410 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].x)) * _3384.x) / cbSceneParam._m0[78u].x)) + _3156;
        _3233 = (exp2(_3410 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].y)) * _3384.y) / cbSceneParam._m0[78u].y)) + _3157;
        _3235 = (exp2(_3410 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3394 * cbSceneParam._m0[78u].z)) * _3384.z) / cbSceneParam._m0[78u].z)) + _3158;
        _3237 = _3393 * _3159;
    }
    else
    {
        _3231 = _3156;
        _3233 = _3157;
        _3235 = _3158;
        _3237 = _3159;
    }
    float _3249 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3250 = _3249 == 3.0;
    float _3251 = log2(_3237);
    float _3258 = exp2(_3251 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3101 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1074))) + ((_3107 + ((isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _3259 = exp2(_3251 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3103 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1074))) + ((_3109 + ((isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _3260 = exp2(_3251 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3105 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1074))) + ((_3111 + ((isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0))) * _1881)) * cbPerFrame._m0[3u].x));
    float _3269 = (_3249 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3269 * (_3250 ? _3258 : (_3258 + (cbSceneParam._m0[72u].w * _3231)));
    SV_Target.y = _3269 * (_3250 ? _3259 : (_3259 + (cbSceneParam._m0[72u].w * _3233)));
    SV_Target.z = _3269 * (_3250 ? _3260 : (_3260 + (cbSceneParam._m0[72u].w * _3235)));
    SV_Target.w = cbInstanceData._m0[_3131].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3131].w;
}


