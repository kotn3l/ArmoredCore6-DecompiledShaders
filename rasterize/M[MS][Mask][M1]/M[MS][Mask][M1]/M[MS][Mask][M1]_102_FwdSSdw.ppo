#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1368;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _401 = _399.x;
    float _413 = dot(vec4(_401, _399.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _430 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_401 - _413) * cbMtdParam._m0[23u].w) + _413) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3717 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _438 = (_431 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _439 = (_431 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _440 = (_431 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _479 = _477.x;
    float _489 = dot(vec4(_479, _477.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _503 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_479 - _489) * cbMtdParam._m0[23u].w) + _489) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3728 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _504 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _511 = (_504 * ((_457.x * cbMtdParam._m0[13u].x) - _438)) + _438;
    float _512 = (_504 * ((_457.y * cbMtdParam._m0[13u].y) - _439)) + _439;
    float _513 = (_504 * ((_457.z * cbMtdParam._m0[13u].z) - _440)) + _440;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _270) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _271) + cbTextureTilingScale._m0[24u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _551 = _549.x;
    float _561 = dot(vec4(_551, _549.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _573 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _360.z) * 2.0) - ((((_551 - _561) * cbMtdParam._m0[23u].w) + _561) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3739 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _587 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_574 * ((_532.x * cbMtdParam._m0[14u].x) - _511)) + _511);
    float _590 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_574 * ((_532.y * cbMtdParam._m0[14u].y) - _512)) + _512);
    float _593 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_574 * ((_532.z * cbMtdParam._m0[14u].z) - _513)) + _513);
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _625 = _623.x;
    float _626 = _623.y;
    float _627 = _623.z;
    float _634 = ((_606.x - _625) * _431) + _625;
    float _635 = ((_606.y - _626) * _431) + _626;
    float _636 = ((_606.z - _627) * _431) + _627;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _659 = ((_648.x - _634) * _504) + _634;
    float _660 = ((_648.y - _635) * _504) + _635;
    float _661 = ((_648.z - _636) * _504) + _636;
    vec4 _673 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _270) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _271) + cbTextureTilingScale._m0[23u].w));
    float _686 = ((_673.z - _661) * _574) + _661;
    float _689 = ((((_673.x - _659) * _574) + _659) * 2.0) + (-1.0);
    float _691 = ((((_673.y - _660) * _574) + _660) * 2.0) + (-1.0);
    float _692 = dot(vec2(_689, _691), vec2(_689, _691));
    float _3750 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
    float _697 = sqrt(1.0 - (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _723 = (((_711.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _689;
    float _724 = (((_711.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _691;
    vec4 _750 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _752 = _750.x;
    float _769 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _752) * _431) + _752;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _769) * _504) + _769;
    float _805 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _270) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _271) + cbTextureTilingScale._m0[10u].w)).x - _787) * _574) + _787;
    float _809 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _805) * cbMtdParam._m0[19u].z) + _805;
    float _813 = (cbMtdParam._m0[19u].w * (_711.z - _686)) + _686;
    float _815 = cbMtdParam._m0[22u].x + _711.w;
    float _818 = fma(_697, _237 * NORMAL.x, fma(_724, _244 * TANGENT.x, (_230 * _222) * _723));
    float _821 = fma(_697, _237 * NORMAL.y, fma(_724, _244 * TANGENT.y, (_230 * _223) * _723));
    float _824 = fma(_697, _237 * NORMAL.z, fma(_724, _244 * TANGENT.z, (_230 * _224) * _723));
    float _828 = inversesqrt(dot(vec3(_818, _821, _824), vec3(_818, _821, _824)));
    float _829 = _828 * _818;
    float _830 = _828 * _821;
    float _831 = _828 * _824;
    float _3761 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _832 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _3783 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _3794 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _3805 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3816 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
    float _837 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _851 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _891 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _901 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _891);
    float _902 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _891);
    float _903 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _891);
    float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
    float _908 = _901 * _907;
    float _909 = _902 * _907;
    float _910 = _903 * _907;
    float _916 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _917 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _935 = fma(_831, cbSceneParam._m0[5u].z, fma(_830, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _829));
    float _938 = fma(_831, cbSceneParam._m0[6u].z, fma(_830, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _829));
    float _941 = fma(_831, cbSceneParam._m0[7u].z, fma(_830, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _829));
    uint _955 = (_250 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _961 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_955].x;
    float _962 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_955].y;
    float _963 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) * cbInstanceData._m0[_955].z;
    float _3827 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
    float _3849 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _967 = 1.0 - _837;
    float _968 = _964 * _967;
    float _969 = _965 * _967;
    float _970 = _966 * _967;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _837;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _837;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _837;
    float _978 = _975 + 0.039999999105930328369140625;
    float _980 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    vec4 _990 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _916, cbSceneParam._m0[86u].y * _917));
    float _994 = ((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * TEXCOORD_5.w) * _990.x;
    float _995 = dot(vec3(_829, _830, _831), vec3(_908, _909, _910));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _829) - _908;
    float _1003 = (_998 * _830) - _909;
    float _1004 = (_998 * _831) - _910;
    float _1008 = abs(dot(vec3(_908, _909, _910), vec3(_829, _830, _831)));
    float _3860 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_832);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1029 = (1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1030 = _1023 * _1010;
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1092 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1096 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1100 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1125 = _1058 + _829;
        float _1126 = _1062 + _830;
        float _1127 = _1066 + _831;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1092;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1096;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1100;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1092 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1096 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1100 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_829, _830, _831), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _3908 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_829, _830, _831), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _3919 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _3930 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _3941 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_829, _830, _831), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3952 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _3963 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3974 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1409 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1413 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1436 = _1058 + _829;
        float _1437 = _1062 + _830;
        float _1438 = _1066 + _831;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_829, _830, _831), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4037 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_829, _830, _831), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4070 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_829, _830, _831), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4103 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1368;
        _1675 = _1368;
        _1676 = _1368;
        _1677 = _1368;
        _1678 = _1368;
        _1679 = _1368;
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1380)) + _1380;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1381)) + _1381;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1382)) + _1382;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _1002 * 0.5;
    float _1743 = _1003 * 0.5;
    float _1744 = _1004 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _832);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1873 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1876 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1904 = frontier_phi_14_12_ladder;
        }
        float _2128;
        if (_1873 > 0.0)
        {
            _2128 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2128 = frontier_phi_23_19_ladder;
        }
        float _2385;
        if (_1876 > 0.0)
        {
            _2385 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2385 = frontier_phi_35_30_ladder;
        }
        float _2387 = isnan(_2128) ? _1904 : (isnan(_1904) ? _2128 : min(_1904, _2128));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1870) + _1859;
        float _2393 = (_2388 * _1873) + _1863;
        float _2394 = (_2388 * _1876) + _1867;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_13_35_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_13_35_ladder_2;
        _1894 = frontier_phi_13_35_ladder_1;
        _1896 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1811);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _832);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1991;
    float _1993;
    float _1995;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1955 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1959 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1963 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _1966 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _1969 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _1972 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2133;
        if (_1966 > 0.0)
        {
            _2133 = abs((1.0 - _1955) / _1966);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1955 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2133 = frontier_phi_25_21_ladder;
        }
        float _2412;
        if (_1969 > 0.0)
        {
            _2412 = abs((1.0 - _1959) / _1969);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1959 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2412 = frontier_phi_37_32_ladder;
        }
        float _2625;
        if (_1972 > 0.0)
        {
            _2625 = abs((1.0 - _1963) / _1972);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1963 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2625 = frontier_phi_46_43_ladder;
        }
        float _2627 = isnan(_2412) ? _2133 : (isnan(_2133) ? _2412 : min(_2133, _2412));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1966) + _1955;
        float _2633 = (_2628 * _1969) + _1959;
        float _2634 = (_2628 * _1972) + _1963;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_22_46_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1991 = frontier_phi_22_46_ladder_2;
        _1993 = frontier_phi_22_46_ladder_1;
        _1995 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1901);
        _1991 = _1975.x * cbModelParam._m0[1u].z;
        _1993 = _1975.y * cbModelParam._m0[1u].z;
        _1995 = _1975.z * cbModelParam._m0[1u].z;
    }
    float _2008 = (((_1029 * _978) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_1991 - _1892)) + _1892);
    float _2010 = (((_1029 * _980) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_1993 - _1894)) + _1894);
    float _2012 = (((_1029 * _981) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_1995 - _1896)) + _1896);
    float _2015 = fma(_2012, cbSceneParam._m0[89u].z, fma(_2010, cbSceneParam._m0[89u].y, _2008 * cbSceneParam._m0[89u].x));
    float _2018 = fma(_2012, cbSceneParam._m0[90u].z, fma(_2010, cbSceneParam._m0[90u].y, _2008 * cbSceneParam._m0[90u].x));
    float _2021 = fma(_2012, cbSceneParam._m0[91u].z, fma(_2010, cbSceneParam._m0[91u].y, _2008 * cbSceneParam._m0[91u].x));
    vec4 _2029 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_916, _917));
    float _2031 = _2029.w;
    float _2043 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2031);
    float _2044 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2031);
    float _2045 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2031);
    uvec4 _2049 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2051 = _2049.x * 14u;
    uint _2052 = _2051 + 13u;
    float _2059 = _994 + (-1.0);
    float _2064 = (cbLight._m0[_2052].x * _2059) + 1.0;
    float _2065 = (cbLight._m0[_2052].y * _2059) + 1.0;
    float _2066 = (cbLight._m0[_2052].z * _2059) + 1.0;
    float _2067 = (cbLight._m0[_2052].w * _2059) + 1.0;
    uint _2068 = _2051 + 5u;
    float _2074 = isnan(1.0) ? _2065 : (isnan(_2065) ? 1.0 : min(_2065, 1.0));
    uint _2078 = _2051 + 4u;
    float _2087 = isnan(1.0) ? _2064 : (isnan(_2064) ? 1.0 : min(_2064, 1.0));
    uint _2091 = _2051 | 1u;
    float _2102 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_829, _830, _831));
    float _2105 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_829, _830, _831));
    float _4239 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _4250 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2110 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * 0.3183098733425140380859375;
    float _2112 = (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * 0.3183098733425140380859375;
    float _2119 = ((cbLight._m0[_2068].x * _2074) * _2112) + (((cbLight._m0[_2078].x * _2043) * _2087) * _2110);
    float _2120 = ((_2074 * cbLight._m0[_2068].y) * _2112) + (((cbLight._m0[_2078].y * _2044) * _2087) * _2110);
    float _2121 = ((_2074 * cbLight._m0[_2068].z) * _2112) + (((cbLight._m0[_2078].z * _2045) * _2087) * _2110);
    uvec4 _2125 = floatBitsToUint(cbLight._m0[_2051 + 12u]);
    bool _2127 = _2125.x == 0u;
    float _2138;
    float _2140;
    float _2142;
    if (_2127)
    {
        _2138 = _2119;
        _2140 = _2120;
        _2142 = _2121;
    }
    else
    {
        uint _2146 = _2051 + 6u;
        float _2162 = (dot(vec3(cbLight._m0[_2051 + 2u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2163 = _2162 * _2162;
        float _4261 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2164 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _2165 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2138 = (((cbLight._m0[_2146].x * 0.3183098733425140380859375) * _2164) * _2165) + _2119;
        _2140 = (((cbLight._m0[_2146].y * 0.3183098733425140380859375) * _2164) * _2165) + _2120;
        _2142 = (((cbLight._m0[_2146].z * 0.3183098733425140380859375) * _2164) * _2165) + _2121;
    }
    bool _2145 = _2125.y == 0u;
    float _2183;
    float _2185;
    float _2187;
    if (_2145)
    {
        _2183 = _2138;
        _2185 = _2140;
        _2187 = _2142;
    }
    else
    {
        uint _2356 = _2051 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2051 + 3u].xyz), vec3(_829, _830, _831)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4277 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _2375 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2183 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2138;
        _2185 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2140;
        _2187 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2142;
    }
    uint _2190 = _2051 + 8u;
    float _2203 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2051].w)) * _832) * 0.949999988079071044921875);
    float _2204 = _2203 * _2203;
    float _2205 = cbLight._m0[_2051].x + _908;
    float _2206 = cbLight._m0[_2051].y + _909;
    float _2207 = cbLight._m0[_2051].z + _910;
    float _2211 = inversesqrt(dot(vec3(_2205, _2206, _2207), vec3(_2205, _2206, _2207)));
    float _2212 = _2211 * _2205;
    float _2213 = _2211 * _2206;
    float _2214 = _2211 * _2207;
    float _2215 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2051].xyz));
    float _4293 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _4304 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2219 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
    float _2220 = dot(vec3(_829, _830, _831), vec3(_2212, _2213, _2214));
    float _4315 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2223 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
    float _2224 = dot(vec3(cbLight._m0[_2051].xyz), vec3(_2212, _2213, _2214));
    float _4326 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2228 = _2204 * _2204;
    float _2232 = ((_2223 * _2223) * (_2228 + (-1.0))) + 1.0;
    float _2240 = exp2(log2(1.0 - (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * 5.0);
    float _2241 = 0.959999978542327880859375 - _975;
    float _2243 = 0.959999978542327880859375 - _976;
    float _2244 = 0.959999978542327880859375 - _977;
    float _2251 = 1.0 - _2204;
    float _2262 = (0.5 / (((_2219 * ((_2218 * _2251) + _2204)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2251) + _2204) * _2218))) * _2218;
    float _4337 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2264 = (isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_2228 / ((_2232 * _2232) * 3.141590118408203125));
    uint _2278 = _2051 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2091].w)) * _832) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2091].x + _908;
    float _2292 = cbLight._m0[_2091].y + _909;
    float _2293 = cbLight._m0[_2091].z + _910;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2091].xyz));
    float _4348 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
    float _2305 = dot(vec3(_829, _830, _831), vec3(_2298, _2299, _2300));
    float _4359 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2091].xyz), vec3(_2298, _2299, _2300));
    float _4370 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0)))) * 5.0);
    float _2331 = 1.0 - _2290;
    float _2341 = (0.5 / (((_2219 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2331) + _2290) * _2304))) * _2304;
    float _4381 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2353 = (((((_2324 * _2241) + _978) * cbLight._m0[_2278].x) * _2343) * _2074) + ((((cbLight._m0[_2190].x * _2043) * ((_2240 * _2241) + _978)) * _2264) * _2087);
    float _2354 = (((((_2324 * _2243) + _980) * cbLight._m0[_2278].y) * _2343) * _2074) + ((((cbLight._m0[_2190].y * _2044) * ((_2240 * _2243) + _980)) * _2264) * _2087);
    float _2355 = (((((_2324 * _2244) + _981) * cbLight._m0[_2278].z) * _2343) * _2074) + ((((cbLight._m0[_2190].z * _2045) * ((_2240 * _2244) + _981)) * _2264) * _2087);
    float _2417;
    float _2419;
    float _2421;
    if (_2127)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2051 + 2u;
        uint _2427 = _2051 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _832) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _908;
        float _2444 = cbLight._m0[_2423].y + _909;
        float _2445 = cbLight._m0[_2423].z + _910;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2423].xyz));
        float _4392 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
        float _2457 = dot(vec3(_829, _830, _831), vec3(_2450, _2451, _2452));
        float _4403 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4414 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2219 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2483) + _2442) * _2456))) * _2456;
        float _4425 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2066 : (isnan(_2066) ? 1.0 : min(_2066, 1.0));
        _2417 = (((((_2476 * _2241) + _978) * cbLight._m0[_2427].x) * _2495) * _2496) + _2353;
        _2419 = (((((_2476 * _2243) + _980) * cbLight._m0[_2427].y) * _2495) * _2496) + _2354;
        _2421 = (((((_2476 * _2244) + _981) * cbLight._m0[_2427].z) * _2495) * _2496) + _2355;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2145)
    {
        _2531 = _2417;
        _2533 = _2419;
        _2535 = _2421;
    }
    else
    {
        uint _2542 = _2051 + 3u;
        uint _2546 = _2051 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _832) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _908;
        float _2563 = cbLight._m0[_2542].y + _909;
        float _2564 = cbLight._m0[_2542].z + _910;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_829, _830, _831), vec3(cbLight._m0[_2542].xyz));
        float _4441 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _2576 = dot(vec3(_829, _830, _831), vec3(_2569, _2570, _2571));
        float _4452 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4463 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2219 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2219 * _2602) + _2561) * _2575))) * _2575;
        float _4474 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
        _2531 = (((((_2595 * _2241) + _978) * cbLight._m0[_2546].x) * _2614) * _2615) + _2417;
        _2533 = (((((_2595 * _2243) + _980) * cbLight._m0[_2546].y) * _2614) * _2615) + _2419;
        _2535 = (((((_2595 * _2244) + _981) * cbLight._m0[_2546].z) * _2614) * _2615) + _2421;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2049.y == 0u)
    {
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2690;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2690;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2690;
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _917) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _916) / _2706)));
        float _2727 = (log2(_2693 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2983 = 0.0;
            float _2984 = 0.0;
            float _2985 = 0.0;
            float _2986 = 0.0;
            float _2987 = 0.0;
            float _2988 = 0.0;
            uint _2989 = 0u;
            uint _2998;
            bool _2999;
            for (;;)
            {
                _2998 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2989 << 2u)) >> 2u)).x;
                _2999 = _2998 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2999)
                {
                    frontier_phi_61_pred = _2983;
                    frontier_phi_61_pred_1 = _2988;
                    frontier_phi_61_pred_2 = _2987;
                    frontier_phi_61_pred_3 = _2986;
                    frontier_phi_61_pred_4 = _2985;
                    frontier_phi_61_pred_5 = _2984;
                }
                else
                {
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    uint _3113;
                    _3107 = _2983;
                    _3108 = _2984;
                    _3109 = _2985;
                    _3110 = _2986;
                    _3111 = _2987;
                    _3112 = _2988;
                    _3113 = _2998;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    for (;;)
                    {
                        uint _3117 = uint(findLSB(_3113)) + (_2989 << 5u);
                        uint _3114 = (_3113 + 4294967295u) & _3113;
                        uint _3119 = _3117 * 48u;
                        vec4 _3133 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3119)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3119 + 3u)).x));
                        uint _3139 = (_3117 * 48u) + 4u;
                        vec4 _3152 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3139)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3139 + 3u)).x));
                        uint _3158 = (_3117 * 48u) + 8u;
                        vec3 _3169 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3158)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3158 + 2u)).x));
                        float _3173 = _3133.x - _2691;
                        float _3174 = _3133.y - _2692;
                        float _3175 = _3133.z - _2693;
                        float _3176 = dot(vec3(_3173, _3174, _3175), vec3(_3173, _3174, _3175));
                        float _3179 = inversesqrt(_3176);
                        float _3180 = _3179 * _3173;
                        float _3181 = _3179 * _3174;
                        float _3182 = _3179 * _3175;
                        float _3183 = dot(vec3(_935, _938, _941), vec3(_3180, _3181, _3182));
                        float _3188 = 1.0 - (_3176 * _3133.w);
                        float _4500 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
                        float _3190 = sqrt(_3176) * _3152.w;
                        float _3193 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                        float _3194 = _3193 * _3193;
                        float _3197 = ((1.0 - _3194) * _3183) + _3194;
                        float _3200 = _3190 * _3190;
                        float _3204 = ((isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0))) * _3189) / ((_3200 * 0.699999988079071044921875) + 1.0);
                        float _3208 = (-0.0) - _2691;
                        float _3209 = (-0.0) - _2692;
                        float _3210 = (-0.0) - _2693;
                        float _3214 = inversesqrt(dot(vec3(_3208, _3209, _3210), vec3(_3208, _3209, _3210)));
                        float _3215 = _3214 * _3208;
                        float _3216 = _3214 * _3209;
                        float _3217 = _3214 * _3210;
                        float _3225 = exp2(log2(1.0 / ((_3200 * 3.5) + 5.0)) * 0.25);
                        float _3226 = 1.0 - _1010;
                        float _3233 = sqrt(1.0 - ((1.0 - (_3226 * _3226)) * (1.0 - (_3225 * _3225))));
                        float _3234 = _3233 * _3233;
                        float _3235 = _3234 * _3234;
                        float _3236 = _3215 + _3180;
                        float _3237 = _3216 + _3181;
                        float _3238 = _3217 + _3182;
                        float _3242 = inversesqrt(dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238)));
                        float _3246 = dot(vec3(_935, _938, _941), vec3(_3215, _3216, _3217));
                        float _4516 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                        float _3249 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3250 = dot(vec3(_935, _938, _941), vec3(_3242 * _3236, _3242 * _3237, _3242 * _3238));
                        float _4527 = isnan(0.0) ? _3250 : (isnan(_3250) ? 0.0 : max(_3250, 0.0));
                        float _3253 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
                        float _3257 = ((_3253 * _3253) * (_3235 + (-1.0))) + 1.0;
                        float _3258 = _3193 * _3234;
                        float _3259 = _3258 * _3258;
                        float _3262 = ((1.0 - _3259) * _3183) + _3259;
                        float _4538 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3263 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                        float _3264 = 1.0 - _3234;
                        float _3274 = (0.5 / (((_3263 * ((_3249 * _3264) + _3234)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3234) * _3249))) * _3263;
                        float _4549 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                        float _3285 = (((_3235 * 3.1415927410125732421875) * (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0)))) / ((_3257 * _3257) * ((_3200 * 2.1991131305694580078125) + 3.141590118408203125))) * _3189;
                        _3042 = (_3204 * _3152.x) + _3110;
                        _3043 = (_3204 * _3152.y) + _3111;
                        _3044 = (_3204 * _3152.z) + _3112;
                        _3039 = (_3285 * _3169.x) + _3107;
                        _3040 = (_3285 * _3169.y) + _3108;
                        _3041 = (_3285 * _3169.z) + _3109;
                        if (_3114 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3041;
                            _3110 = _3042;
                            _3111 = _3043;
                            _3112 = _3044;
                            _3113 = _3114;
                        }
                    }
                    frontier_phi_61_pred = _3039;
                    frontier_phi_61_pred_1 = _3044;
                    frontier_phi_61_pred_2 = _3043;
                    frontier_phi_61_pred_3 = _3042;
                    frontier_phi_61_pred_4 = _3041;
                    frontier_phi_61_pred_5 = _3040;
                }
                _2839 = frontier_phi_61_pred;
                _2849 = frontier_phi_61_pred_1;
                _2847 = frontier_phi_61_pred_2;
                _2845 = frontier_phi_61_pred_3;
                _2843 = frontier_phi_61_pred_4;
                _2841 = frontier_phi_61_pred_5;
                uint _2990 = _2989 + 1u;
                if (_2990 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2983 = _2839;
                    _2984 = _2841;
                    _2985 = _2843;
                    _2986 = _2845;
                    _2987 = _2847;
                    _2988 = _2849;
                    _2989 = _2990;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2951;
        float _2953;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        if (((4294967295u << _2855) & _2737) == 0u)
        {
            _2951 = _2838;
            _2953 = _2840;
            _2955 = _2842;
            _2957 = _2844;
            _2959 = _2846;
            _2961 = _2848;
        }
        else
        {
            float _2976 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
            float _2977 = _2976 * _2691;
            float _2978 = _2976 * _2692;
            float _2979 = _2976 * _2693;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2952;
                float _2954;
                float _2956;
                float _2958;
                float _2960;
                float _2962;
                float _3090 = _2838;
                float _3091 = _2840;
                float _3092 = _2842;
                float _3093 = _2844;
                float _3094 = _2846;
                float _3095 = _2848;
                uint _3096 = _2855;
                uint _3105;
                bool _3106;
                for (;;)
                {
                    _3105 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3096 << 2u)) >> 2u)).x;
                    _3106 = _3105 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3106)
                    {
                        frontier_phi_67_pred = _3093;
                        frontier_phi_67_pred_1 = _3094;
                        frontier_phi_67_pred_2 = _3095;
                        frontier_phi_67_pred_3 = _3092;
                        frontier_phi_67_pred_4 = _3091;
                        frontier_phi_67_pred_5 = _3090;
                    }
                    else
                    {
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3303 = _3090;
                        float _3304 = _3091;
                        float _3305 = _3092;
                        float _3306 = _3093;
                        float _3307 = _3094;
                        float _3308 = _3095;
                        uint _3309 = _3105;
                        uint _3310;
                        vec4 _3335;
                        float _3336;
                        vec4 _3351;
                        vec3 _3363;
                        vec4 _3378;
                        vec4 _3393;
                        float _3439;
                        bool _3440;
                        for (;;)
                        {
                            uint _3320 = ((_3096 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3309));
                            _3310 = (_3309 + 4294967295u) & _3309;
                            uint _3322 = _3320 * 40u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            _3336 = _3335.w;
                            uint _3338 = (_3320 * 40u) + 4u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3353 = (_3320 * 40u) + 8u;
                            _3363 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x));
                            uint _3365 = (_3320 * 40u) + 16u;
                            _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3380 = (_3320 * 40u) + 20u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3320 * 40u) + 24u;
                            vec4 _3408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 3u)).x));
                            uint _3414 = (_3320 * 40u) + 28u;
                            vec4 _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            _3439 = fma(_2693, _3427.z, fma(_2692, _3427.y, _3427.x * _2691)) + _3427.w;
                            _3440 = !((fma(_2693, _3408.z, fma(_2692, _3408.y, _3408.x * _2691)) + _3408.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3440)
                            {
                                float _3467 = _3335.x - _2691;
                                float _3468 = _3335.y - _2692;
                                float _3469 = _3335.z - _2693;
                                float _3470 = dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469));
                                float _3473 = inversesqrt(_3470);
                                float _3474 = _3473 * _3467;
                                float _3475 = _3473 * _3468;
                                float _3476 = _3473 * _3469;
                                float _3480 = 1.0 - (_3470 / (_3336 * _3336));
                                float _4560 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
                                float _3485 = sqrt(_3470) * _3351.w;
                                float _3487 = 1.39999997615814208984375 / (_3485 + 1.39999997615814208984375);
                                float _3488 = _3487 * _3487;
                                float _3491 = ((1.0 - _3488) * dot(vec3(_3474, _3475, _3476), vec3(_935, _938, _941))) + _3488;
                                float _3494 = _3485 * _3485;
                                float _3498 = (fma(_2693, _3378.z, fma(_2692, _3378.y, _3378.x * _2691)) + _3378.w) / _3439;
                                float _3499 = (fma(_2693, _3393.z, fma(_2692, _3393.y, _3393.x * _2691)) + _3393.w) / _3439;
                                float _3503 = 1.0 - dot(vec2(_3498, _3499), vec2(_3498, _3499));
                                float _4576 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3504 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3505 = _3504 * (((isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * _3481) / ((_3494 * 0.699999988079071044921875) + 1.0));
                                float _3517 = exp2(log2(1.0 / ((_3494 * 3.5) + 5.0)) * 0.25);
                                float _3518 = 1.0 - _1010;
                                float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                                float _3526 = _3525 * _3525;
                                float _3527 = _3526 * _3526;
                                float _3528 = _3474 - _2977;
                                float _3529 = _3475 - _2978;
                                float _3530 = _3476 - _2979;
                                float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                                float _3538 = dot(vec3(_935, _938, _941), vec3((-0.0) - _2977, (-0.0) - _2978, (-0.0) - _2979));
                                float _4587 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3541 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3542 = dot(vec3(_935, _938, _941), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                                float _4598 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                                float _3545 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                                float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                                float _3550 = _3487 * _3526;
                                float _3551 = _3550 * _3550;
                                float _3557 = ((1.0 - _3551) * dot(vec3(_935, _938, _941), vec3(_3474, _3475, _3476))) + _3551;
                                float _4609 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3558 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                                float _3559 = 1.0 - _3526;
                                float _3569 = (0.5 / (((_3558 * ((_3541 * _3559) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3526) * _3541))) * _3558;
                                float _4620 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                                float _3579 = (_3504 * _3481) * (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3549 * _3549) * ((_3494 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3579 * _3363.x;
                                frontier_phi_73_pred_1 = _3579 * _3363.y;
                                frontier_phi_73_pred_2 = _3505 * _3351.z;
                                frontier_phi_73_pred_3 = _3505 * _3351.y;
                                frontier_phi_73_pred_4 = _3505 * _3351.x;
                                frontier_phi_73_pred_5 = _3579 * _3363.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3583 = frontier_phi_73_pred;
                            _3584 = frontier_phi_73_pred_1;
                            _3588 = frontier_phi_73_pred_2;
                            _3587 = frontier_phi_73_pred_3;
                            _3586 = frontier_phi_73_pred_4;
                            _3585 = frontier_phi_73_pred_5;
                            _3293 = _3586 + _3306;
                            _3294 = _3587 + _3307;
                            _3295 = _3588 + _3308;
                            _3290 = _3583 + _3303;
                            _3291 = _3584 + _3304;
                            _3292 = _3585 + _3305;
                            if (_3310 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3303 = _3290;
                                _3304 = _3291;
                                _3305 = _3292;
                                _3306 = _3293;
                                _3307 = _3294;
                                _3308 = _3295;
                                _3309 = _3310;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3293;
                        frontier_phi_67_pred_1 = _3294;
                        frontier_phi_67_pred_2 = _3295;
                        frontier_phi_67_pred_3 = _3292;
                        frontier_phi_67_pred_4 = _3291;
                        frontier_phi_67_pred_5 = _3290;
                    }
                    _2958 = frontier_phi_67_pred;
                    _2960 = frontier_phi_67_pred_1;
                    _2962 = frontier_phi_67_pred_2;
                    _2956 = frontier_phi_67_pred_3;
                    _2954 = frontier_phi_67_pred_4;
                    _2952 = frontier_phi_67_pred_5;
                    uint _3097 = _3096 + 1u;
                    if (_3097 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3090 = _2952;
                        _3091 = _2954;
                        _3092 = _2956;
                        _3093 = _2958;
                        _3094 = _2960;
                        _3095 = _2962;
                        _3096 = _3097;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2960;
                frontier_phi_55_56_ladder_1 = _2962;
                frontier_phi_55_56_ladder_2 = _2958;
                frontier_phi_55_56_ladder_3 = _2956;
                frontier_phi_55_56_ladder_4 = _2954;
                frontier_phi_55_56_ladder_5 = _2952;
            }
            else
            {
                frontier_phi_55_56_ladder = _2846;
                frontier_phi_55_56_ladder_1 = _2848;
                frontier_phi_55_56_ladder_2 = _2844;
                frontier_phi_55_56_ladder_3 = _2842;
                frontier_phi_55_56_ladder_4 = _2840;
                frontier_phi_55_56_ladder_5 = _2838;
            }
            _2951 = frontier_phi_55_56_ladder_5;
            _2953 = frontier_phi_55_56_ladder_4;
            _2955 = frontier_phi_55_56_ladder_3;
            _2957 = frontier_phi_55_56_ladder_2;
            _2959 = frontier_phi_55_56_ladder;
            _2961 = frontier_phi_55_56_ladder_1;
        }
        float _2966 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _2750 = (_2966 * _2957) + _2183;
        _2752 = (_2966 * _2959) + _2185;
        _2754 = (_2966 * _2961) + _2187;
        _2756 = ((_2951 * _978) * _2966) + _2531;
        _2758 = ((_2953 * _980) * _2966) + _2533;
        _2760 = ((_2955 * _981) * _2966) + _2535;
    }
    else
    {
        _2750 = _2183;
        _2752 = _2185;
        _2754 = _2187;
        _2756 = _2531;
        _2758 = _2533;
        _2760 = _2535;
    }
    float _4636 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _4647 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4658 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    uint _2780 = _250 + 6u;
    float _2788 = _916 / cbSceneParam._m0[86u].x;
    float _2789 = _917 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _851 : (isnan(_851) ? cbSceneParam._m0[77u].w : min(_851, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_851 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_851) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _851 : min(cbSceneParam._m0[80u].w, _851));
        float _2864 = _2863 / _851;
        float _2875 = _2864 * _901;
        float _2876 = _902 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2879 = _2864 * _903;
        float _2881 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2876;
        float _2889 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3052;
        if (abs((_2877 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3052 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3012 = 1.0 / cbSceneParam._m0[80u].x;
            float _3013 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3014 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3023 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : min(_3013, 0.0));
            float _3024 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : min(_3014, 0.0));
            _3052 = ((abs(_2889 / _2877) * cbSceneParam._m0[80u].y) * ((((_3023 - _3024) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0))))) * _3012)) - ((exp2(_2899 * _3023) - exp2(_2899 * _3024)) * _3012))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3054 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3063 = exp2((_3052 * (-1.44269502162933349609375)) * (1.0 - _3054.w));
        float _3064 = log2(_3063);
        float _3080 = log2(_2808);
        _2901 = (exp2(_3080 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].x)) * _3054.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2903 = (exp2(_3080 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].y)) * _3054.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2905 = (exp2(_3080 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3064 * cbSceneParam._m0[78u].z)) * _3054.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2907 = _3063 * _2808;
    }
    else
    {
        _2901 = _2805;
        _2903 = _2806;
        _2905 = _2807;
        _2907 = _2808;
    }
    float _2919 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2920 = _2919 == 3.0;
    float _2921 = log2(_2907);
    float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2750 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _994))) + ((_2756 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2752 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _994))) + ((_2758 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2754 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _994))) + ((_2760 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _2939 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2939 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
    SV_Target.y = _2939 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
    SV_Target.z = _2939 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


