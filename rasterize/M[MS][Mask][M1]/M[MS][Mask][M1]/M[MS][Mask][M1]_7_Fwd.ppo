#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1236;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _247 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _247 + 1u;
    uint _256 = _247 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_247].x * cbInstanceData._m0[_247].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _390 = _388.x;
    float _402 = dot(vec4(_390, _388.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _419 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_390 - _402) * cbMtdParam._m0[23u].w) + _402) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3566 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _420 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _433 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_420 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315);
    float _436 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_420 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316);
    float _439 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_420 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317);
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _469 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _471 = _469.x;
    float _472 = _469.y;
    float _473 = _469.z;
    float _482 = ((_452.z - _473) * _420) + _473;
    float _485 = ((((_452.x - _471) * _420) + _471) * 2.0) + (-1.0);
    float _487 = ((((_452.y - _472) * _420) + _472) * 2.0) + (-1.0);
    float _488 = dot(vec2(_485, _487), vec2(_485, _487));
    float _3577 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _493 = sqrt(1.0 - (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _521 = (((_509.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _485;
    float _522 = (((_509.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _487;
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _266) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _267) + cbTextureTilingScale._m0[19u].w));
    float _536 = _534.x;
    float _537 = 1.0 - _536;
    float _566 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_536 - _537) * cbMtdParam._m0[24u].w) + _537) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3588 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _567 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
    float _575 = ((((cbMtdParam._m0[10u].x - _433) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _567) + _433;
    float _576 = ((((cbMtdParam._m0[10u].y - _436) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _567) + _436;
    float _577 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _439)) * _567) + _439;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _605 = _603.x;
    float _622 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _605) * _420) + _605;
    float _626 = ((_589.x - _622) * cbMtdParam._m0[19u].z) + _622;
    float _628 = _626 - (_626 * _567);
    float _632 = (cbMtdParam._m0[19u].w * (_509.z - _482)) + _482;
    float _636 = ((cbMtdParam._m0[23u].x - _632) * _567) + _632;
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _266) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _267) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _661 = (_655.x * 2.0) + (-1.0);
    float _662 = (_655.y * 2.0) + (-1.0);
    float _663 = dot(vec2(_661, _662), vec2(_661, _662));
    float _3599 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
    float _679 = (_567 * (((cbMtdParam._m0[22u].z * _521) - _521) + _661)) + _521;
    float _680 = (_567 * (((cbMtdParam._m0[22u].z * _522) - _522) + _662)) + _522;
    float _681 = (_567 * (sqrt(1.0 - (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) - _493)) + _493;
    float _683 = cbMtdParam._m0[22u].x + _509.w;
    float _686 = fma(_681, _234 * NORMAL.x, fma(_680, _241 * TANGENT.x, (_227 * _219) * _679));
    float _689 = fma(_681, _234 * NORMAL.y, fma(_680, _241 * TANGENT.y, (_227 * _220) * _679));
    float _692 = fma(_681, _234 * NORMAL.z, fma(_680, _241 * TANGENT.z, (_227 * _221) * _679));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    float _697 = _696 * _686;
    float _698 = _696 * _689;
    float _699 = _696 * _692;
    float _3610 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _700 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _3621 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _3632 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _3643 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _3654 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _3665 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _705 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _719 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _769 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _759);
    float _770 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _759);
    float _771 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _759);
    float _775 = inversesqrt(dot(vec3(_769, _770, _771), vec3(_769, _770, _771)));
    float _776 = _769 * _775;
    float _777 = _770 * _775;
    float _778 = _771 * _775;
    float _784 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _785 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _803 = fma(_699, cbSceneParam._m0[5u].z, fma(_698, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _697));
    float _806 = fma(_699, cbSceneParam._m0[6u].z, fma(_698, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _697));
    float _809 = fma(_699, cbSceneParam._m0[7u].z, fma(_698, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _697));
    uint _823 = (_247 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3676 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
    float _3687 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0));
    float _3698 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _835 = 1.0 - _705;
    float _836 = _832 * _835;
    float _837 = _833 * _835;
    float _838 = _834 * _835;
    float _843 = (_832 + (-0.039999999105930328369140625)) * _705;
    float _844 = (_833 + (-0.039999999105930328369140625)) * _705;
    float _845 = (_834 + (-0.039999999105930328369140625)) * _705;
    float _846 = _843 + 0.039999999105930328369140625;
    float _848 = _844 + 0.039999999105930328369140625;
    float _849 = _845 + 0.039999999105930328369140625;
    vec4 _858 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _784, cbSceneParam._m0[86u].y * _785));
    float _862 = ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * TEXCOORD_5.w) * _858.x;
    float _863 = dot(vec3(_697, _698, _699), vec3(_776, _777, _778));
    float _866 = _863 * 2.0;
    float _870 = (_866 * _697) - _776;
    float _871 = (_866 * _698) - _777;
    float _872 = (_866 * _699) - _778;
    float _876 = abs(dot(vec3(_776, _777, _778), vec3(_697, _698, _699)));
    float _3709 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _878 = sqrt(_700);
    float _891 = exp2((_878 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_878 * 3.0));
    float _897 = (1.0 - _891) * ((_878 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _898 = _891 * _878;
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1235;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _960 = fma(_934, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926));
        float _964 = fma(_934, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926));
        float _968 = fma(_934, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926));
        float _993 = _926 + _697;
        float _994 = _930 + _698;
        float _995 = _934 + _699;
        float _1005 = fma(_995, cbModelParam._m0[26u].z, fma(_994, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _993)) - _960;
        float _1006 = fma(_995, cbModelParam._m0[27u].z, fma(_994, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _993)) - _964;
        float _1007 = fma(_995, cbModelParam._m0[28u].z, fma(_994, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _993)) - _968;
        float _1011 = inversesqrt(dot(vec3(_1005, _1006, _1007), vec3(_1005, _1006, _1007)));
        float _1024 = ((_1011 * _1005) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_960 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1025 = ((_1011 * _1006) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_964 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1026 = ((_1011 * _1007) / cbModelParam._m0[34u].z) + ((((((_968 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1024, _1025, _1026), 0.0);
        float _1063 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1029.x + (-0.5));
        float _1065 = _1063 * (_1029.y + (-0.5));
        float _1066 = _1063 * (_1029.z + (-0.5));
        float _1073 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1036.x + (-0.5));
        float _1075 = _1073 * (_1036.y + (-0.5));
        float _1076 = _1073 * (_1036.z + (-0.5));
        float _1083 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1084 = _1083 * (_1043.x + (-0.5));
        float _1085 = _1083 * (_1043.y + (-0.5));
        float _1086 = _1083 * (_1043.z + (-0.5));
        float _1093 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1094 = _1093 * (_1050.x + (-0.5));
        float _1095 = _1093 * (_1050.y + (-0.5));
        float _1096 = _1093 * (_1050.z + (-0.5));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1099 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1100 = _1064 * 0.5;
        float _1101 = _1074 * 0.5;
        float _1102 = _1084 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1117 = (dot(vec3(_697, _698, _699), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1127 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1129 = _1128 * 2.0;
        float _1133 = (1.0 - _1128) / (_1128 + 1.0);
        float _3757 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1143 = ((((1.0 - _1134) * (_1129 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1129 + 1.0))) + _1134) * _1097;
        float _1144 = _1065 * 0.5;
        float _1145 = _1075 * 0.5;
        float _1146 = _1085 * 0.5;
        float _1147 = dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146));
        float _1152 = (_1147 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1147);
        float _1160 = (dot(vec3(_697, _698, _699), vec3(_1152 * _1144, _1152 * _1145, _1152 * _1146)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1169 = sqrt(((_1145 * _1145) + (_1144 * _1144)) + (_1146 * _1146)) / (_1098 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1171 = _1170 * 2.0;
        float _1175 = (1.0 - _1170) / (_1170 + 1.0);
        float _3790 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1185 = ((((1.0 - _1176) * (_1171 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1171 + 1.0))) + _1176) * _1098;
        float _1186 = _1066 * 0.5;
        float _1187 = _1076 * 0.5;
        float _1188 = _1086 * 0.5;
        float _1189 = dot(vec3(_1186, _1187, _1188), vec3(_1186, _1187, _1188));
        float _1194 = (_1189 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1189);
        float _1202 = (dot(vec3(_697, _698, _699), vec3(_1194 * _1186, _1194 * _1187, _1194 * _1188)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1211 = sqrt(((_1187 * _1187) + (_1186 * _1186)) + (_1188 * _1188)) / (_1099 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1213 = _1212 * 2.0;
        float _1217 = (1.0 - _1212) / (_1212 + 1.0);
        float _3823 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1227 = ((((1.0 - _1218) * (_1213 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1213 + 1.0))) + _1218) * _1099;
        _1235 = _1066;
        _1237 = _1065;
        _1238 = _1064;
        _1239 = _1076;
        _1240 = _1075;
        _1241 = _1074;
        _1242 = _1086;
        _1243 = _1085;
        _1244 = _1084;
        _1245 = _1099;
        _1246 = _1098;
        _1247 = _1097;
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0)));
        _1249 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)));
        _1250 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)));
    }
    else
    {
        _1235 = _1236;
        _1237 = _1236;
        _1238 = _1236;
        _1239 = _1236;
        _1240 = _1236;
        _1241 = _1236;
        _1242 = _1236;
        _1243 = _1236;
        _1244 = _1236;
        _1245 = _1236;
        _1246 = _1236;
        _1247 = _1236;
        _1248 = 0.0;
        _1249 = 0.0;
        _1250 = 0.0;
    }
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1275 = fma(_934, cbModelParam._m0[30u].z, fma(_930, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926));
        float _1279 = fma(_934, cbModelParam._m0[31u].z, fma(_930, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926));
        float _1283 = fma(_934, cbModelParam._m0[32u].z, fma(_930, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926));
        float _1306 = _926 + _697;
        float _1307 = _930 + _698;
        float _1308 = _934 + _699;
        float _1318 = fma(_1308, cbModelParam._m0[30u].z, fma(_1307, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1306)) - _1275;
        float _1319 = fma(_1308, cbModelParam._m0[31u].z, fma(_1307, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1306)) - _1279;
        float _1320 = fma(_1308, cbModelParam._m0[32u].z, fma(_1307, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1306)) - _1283;
        float _1324 = inversesqrt(dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320)));
        float _1337 = ((_1324 * _1318) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1275 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1338 = ((_1324 * _1319) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1279 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1339 = ((_1324 * _1320) / cbModelParam._m0[35u].z) + ((((((_1283 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1348 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1337, _1338, _1339), 0.0);
        float _1374 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1341.x + (-0.5));
        float _1376 = _1374 * (_1341.y + (-0.5));
        float _1377 = _1374 * (_1341.z + (-0.5));
        float _1384 = exp2((_1348.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1348.x + (-0.5));
        float _1386 = _1384 * (_1348.y + (-0.5));
        float _1387 = _1384 * (_1348.z + (-0.5));
        float _1394 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1355.x + (-0.5));
        float _1396 = _1394 * (_1355.y + (-0.5));
        float _1397 = _1394 * (_1355.z + (-0.5));
        float _1404 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1362.x + (-0.5));
        float _1406 = _1404 * (_1362.y + (-0.5));
        float _1407 = _1404 * (_1362.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1427 = (dot(vec3(_697, _698, _699), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1436 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1438 = _1437 * 2.0;
        float _1442 = (1.0 - _1437) / (_1437 + 1.0);
        float _3886 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1443 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1452 = ((((1.0 - _1443) * (_1438 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1438 + 1.0))) + _1443) * _1408;
        float _1453 = _1376 * 0.5;
        float _1454 = _1386 * 0.5;
        float _1455 = _1396 * 0.5;
        float _1456 = dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455));
        float _1461 = (_1456 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1456);
        float _1469 = (dot(vec3(_697, _698, _699), vec3(_1461 * _1453, _1461 * _1454, _1461 * _1455)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1478 = sqrt(((_1454 * _1454) + (_1453 * _1453)) + (_1455 * _1455)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1480 = _1479 * 2.0;
        float _1484 = (1.0 - _1479) / (_1479 + 1.0);
        float _3919 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1485 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1494 = ((((1.0 - _1485) * (_1480 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1480 + 1.0))) + _1485) * _1409;
        float _1495 = _1377 * 0.5;
        float _1496 = _1387 * 0.5;
        float _1497 = _1397 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_697, _698, _699), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _3952 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1522 + 1.0))) + _1527) * _1410;
        _1544 = _1377;
        _1545 = _1376;
        _1546 = _1375;
        _1547 = _1387;
        _1548 = _1386;
        _1549 = _1385;
        _1550 = _1397;
        _1551 = _1396;
        _1552 = _1395;
        _1553 = _1410;
        _1554 = _1409;
        _1555 = _1408;
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)));
        _1557 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)));
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
    }
    else
    {
        _1544 = _1236;
        _1545 = _1236;
        _1546 = _1236;
        _1547 = _1236;
        _1548 = _1236;
        _1549 = _1236;
        _1550 = _1236;
        _1551 = _1236;
        _1552 = _1236;
        _1553 = _1236;
        _1554 = _1236;
        _1555 = _1236;
        _1556 = 0.0;
        _1557 = 0.0;
        _1558 = 0.0;
    }
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1248)) + _1248;
    float _1569 = (cbModelParam._m0[1u].x * (_1557 - _1249)) + _1249;
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1250)) + _1250;
    float _1591 = fma(_1570, cbSceneParam._m0[89u].z, fma(_1569, cbSceneParam._m0[89u].y, _1568 * cbSceneParam._m0[89u].x));
    float _1594 = fma(_1570, cbSceneParam._m0[90u].z, fma(_1569, cbSceneParam._m0[90u].y, _1568 * cbSceneParam._m0[90u].x));
    float _1597 = fma(_1570, cbSceneParam._m0[91u].z, fma(_1569, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1568));
    float _1612 = _870 * 0.5;
    float _1613 = _871 * 0.5;
    float _1614 = _872 * 0.5;
    float _1615 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1618 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1545, _1548, _1551, _1554));
    float _1621 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1655;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1628 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1235, _1239, _1242, _1245));
        float _1632 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1237, _1240, _1243, _1246));
        float _1636 = dot(vec4(_1612, _1613, _1614, 1.0), vec4(_1238, _1241, _1244, _1247));
        float _1643 = dot(vec4(cbModelParam._m0[39u]), vec4(_1612, _1613, _1614, 1.0));
        _1655 = dot(vec3(isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1643) ? 0.0 : (isnan(0.0) ? _1643 : max(0.0, _1643))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1655 = 1.0;
    }
    float _1666;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1657 = dot(vec4(cbModelParam._m0[40u]), vec4(_1612, _1613, _1614, 1.0));
        _1666 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)), isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1666 = 1.0;
    }
    float _1670 = (_1666 * cbModelParam._m0[1u].x) + (_1655 * (1.0 - cbModelParam._m0[1u].x));
    float _1680 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _700);
    float _1681 = isnan(_1680) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1680 : min(cbModelParam._m0[25u].z, _1680));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_934, cbModelParam._m0[13u].z, fma(_930, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_934, cbModelParam._m0[14u].z, fma(_930, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_934, cbModelParam._m0[15u].z, fma(_930, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_872, cbModelParam._m0[13u].z, fma(_871, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _870));
        float _1744 = fma(_872, cbModelParam._m0[14u].z, fma(_871, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _870));
        float _1747 = fma(_872, cbModelParam._m0[15u].z, fma(_871, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _870));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1775 = frontier_phi_14_12_ladder;
        }
        float _1979;
        if (_1744 > 0.0)
        {
            _1979 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1979 = frontier_phi_23_19_ladder;
        }
        float _2233;
        if (_1747 > 0.0)
        {
            _2233 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2233 = frontier_phi_35_30_ladder;
        }
        float _2235 = isnan(_1979) ? _1775 : (isnan(_1775) ? _1979 : min(_1775, _1979));
        float _2236 = isnan(_2233) ? _2235 : (isnan(_2235) ? _2233 : min(_2235, _2233));
        float _2240 = (_2236 * _1741) + _1730;
        float _2241 = (_2236 * _1744) + _1734;
        float _2242 = (_2236 * _1747) + _1738;
        float _2243 = _2236 * 9.9999997473787516355514526367188e-05;
        float _2245 = (-1.0) - _2243;
        float _2247 = _2243 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2242 > _2247) || ((_2242 < _2245) || ((_2241 > _2247) || ((_2241 < _2245) || ((_2240 < _2245) || (_2240 > _2247))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2370 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2242, cbModelParam._m0[9u].z, fma(_2241, cbModelParam._m0[9u].y, _2240 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2242, cbModelParam._m0[10u].z, fma(_2241, cbModelParam._m0[10u].y, _2240 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2242, cbModelParam._m0[11u].z, fma(_2241, cbModelParam._m0[11u].y, _2240 * cbModelParam._m0[11u].x))), _1681);
            frontier_phi_13_35_ladder = _2370.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2370.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2370.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_13_35_ladder_2;
        _1765 = frontier_phi_13_35_ladder_1;
        _1767 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_870, _871, _872), _1681);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _700);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_934, cbModelParam._m0[21u].z, fma(_930, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_934, cbModelParam._m0[22u].z, fma(_930, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_934, cbModelParam._m0[23u].z, fma(_930, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_872, cbModelParam._m0[21u].z, fma(_871, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _870));
        float _1841 = fma(_872, cbModelParam._m0[22u].z, fma(_871, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _870));
        float _1844 = fma(_872, cbModelParam._m0[23u].z, fma(_871, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _870));
        float _1984;
        if (_1838 > 0.0)
        {
            _1984 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1984 = frontier_phi_25_21_ladder;
        }
        float _2260;
        if (_1841 > 0.0)
        {
            _2260 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2260 = frontier_phi_37_32_ladder;
        }
        float _2473;
        if (_1844 > 0.0)
        {
            _2473 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2473 = frontier_phi_46_43_ladder;
        }
        float _2475 = isnan(_2260) ? _1984 : (isnan(_1984) ? _2260 : min(_1984, _2260));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1838) + _1827;
        float _2481 = (_2476 * _1841) + _1831;
        float _2482 = (_2476 * _1844) + _1835;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2483;
        float _2486 = _2483 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2482 > _2486) || ((_2482 < _2484) || ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 < _2484) || (_2480 > _2486))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2482, cbModelParam._m0[17u].z, fma(_2481, cbModelParam._m0[17u].y, _2480 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2482, cbModelParam._m0[18u].z, fma(_2481, cbModelParam._m0[18u].y, _2480 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2482, cbModelParam._m0[19u].z, fma(_2481, cbModelParam._m0[19u].y, _2480 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_22_46_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_22_46_ladder_2;
        _1865 = frontier_phi_22_46_ladder_1;
        _1867 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_870, _871, _872), _1772);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_897 * _846) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1882 = (((_897 * _848) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1865 - _1765)) + _1765);
    float _1884 = (((_897 * _849) + _898) * _862) * ((cbModelParam._m0[1u].w * (_1867 - _1767)) + _1767);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    uvec4 _1903 = floatBitsToUint(cbInstanceData._m0[_247 + 5u]);
    uint _1905 = _1903.x * 14u;
    uint _1906 = _1905 + 13u;
    float _1913 = _862 + (-1.0);
    float _1918 = (cbLight._m0[_1906].x * _1913) + 1.0;
    float _1919 = (cbLight._m0[_1906].y * _1913) + 1.0;
    float _1920 = (cbLight._m0[_1906].z * _1913) + 1.0;
    float _1921 = (cbLight._m0[_1906].w * _1913) + 1.0;
    uint _1922 = _1905 + 5u;
    float _1928 = isnan(1.0) ? _1919 : (isnan(_1919) ? 1.0 : min(_1919, 1.0));
    uint _1932 = _1905 + 4u;
    float _1938 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
    uint _1942 = _1905 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_697, _698, _699));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_697, _698, _699));
    float _4088 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4099 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1922].x * _1928) * _1963) + ((cbLight._m0[_1932].x * _1938) * _1961);
    float _1971 = ((_1928 * cbLight._m0[_1922].y) * _1963) + ((_1938 * cbLight._m0[_1932].y) * _1961);
    float _1972 = ((_1928 * cbLight._m0[_1922].z) * _1963) + ((_1938 * cbLight._m0[_1932].z) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1905 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1905 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1905 + 2u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4110 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2016 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2204 = _1905 + 7u;
        float _2220 = (dot(vec3(cbLight._m0[_1905 + 3u].xyz), vec3(_697, _698, _699)) * 0.5) + 0.5;
        float _2221 = _2220 * _2220;
        float _4126 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2222 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2223 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2034 = (((cbLight._m0[_2204].x * 0.3183098733425140380859375) * _2222) * _2223) + _1989;
        _2036 = (((cbLight._m0[_2204].y * 0.3183098733425140380859375) * _2222) * _2223) + _1991;
        _2038 = (((cbLight._m0[_2204].z * 0.3183098733425140380859375) * _2222) * _2223) + _1993;
    }
    uint _2041 = _1905 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1905].w)) * _700) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1905].x + _776;
    float _2057 = cbLight._m0[_1905].y + _777;
    float _2058 = cbLight._m0[_1905].z + _778;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1905].xyz));
    float _4142 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2070 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _2071 = dot(vec3(_697, _698, _699), vec3(_2063, _2064, _2065));
    float _4164 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1905].xyz), vec3(_2063, _2064, _2065));
    float _4175 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2091 = exp2(log2(1.0 - (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * 5.0);
    float _2092 = 0.959999978542327880859375 - _843;
    float _2094 = 0.959999978542327880859375 - _844;
    float _2095 = 0.959999978542327880859375 - _845;
    float _2102 = 1.0 - _2055;
    float _2113 = (0.5 / (((_2070 * ((_2069 * _2102) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2102) + _2055) * _2069))) * _2069;
    float _4186 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2126 = _1905 + 9u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _700) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1942].x + _776;
    float _2140 = cbLight._m0[_1942].y + _777;
    float _2141 = cbLight._m0[_1942].z + _778;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_1942].xyz));
    float _4197 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2153 = dot(vec3(_697, _698, _699), vec3(_2146, _2147, _2148));
    float _4208 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2156 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2157 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2146, _2147, _2148));
    float _4219 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _2161 = _2138 * _2138;
    float _2165 = ((_2156 * _2156) * (_2161 + (-1.0))) + 1.0;
    float _2172 = exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0);
    float _2179 = 1.0 - _2138;
    float _2189 = (0.5 / (((_2070 * ((_2152 * _2179) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2179) + _2138) * _2152))) * _2152;
    float _4230 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2191 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2161 / ((_2165 * _2165) * 3.141590118408203125));
    float _2201 = (((((_2172 * _2092) + _846) * cbLight._m0[_2126].x) * _2191) * _1928) + (((((_2091 * _2092) + _846) * cbLight._m0[_2041].x) * _2115) * _1938);
    float _2202 = (((((_2172 * _2094) + _848) * cbLight._m0[_2126].y) * _2191) * _1928) + (((((_2091 * _2094) + _848) * cbLight._m0[_2041].y) * _2115) * _1938);
    float _2203 = (((((_2172 * _2095) + _849) * cbLight._m0[_2126].z) * _2191) * _1928) + (((((_2091 * _2095) + _849) * cbLight._m0[_2041].z) * _2115) * _1938);
    float _2265;
    float _2267;
    float _2269;
    if (_1978)
    {
        _2265 = _2201;
        _2267 = _2202;
        _2269 = _2203;
    }
    else
    {
        uint _2271 = _1905 + 2u;
        uint _2275 = _1905 + 10u;
        float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _700) * 0.949999988079071044921875);
        float _2290 = _2289 * _2289;
        float _2291 = cbLight._m0[_2271].x + _776;
        float _2292 = cbLight._m0[_2271].y + _777;
        float _2293 = cbLight._m0[_2271].z + _778;
        float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
        float _2298 = _2297 * _2291;
        float _2299 = _2297 * _2292;
        float _2300 = _2297 * _2293;
        float _2301 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2271].xyz));
        float _4241 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2304 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _2305 = dot(vec3(_697, _698, _699), vec3(_2298, _2299, _2300));
        float _4252 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
        float _2308 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2309 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2298, _2299, _2300));
        float _4263 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2313 = _2290 * _2290;
        float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
        float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0);
        float _2331 = 1.0 - _2290;
        float _2341 = (0.5 / (((_2070 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2331) + _2290) * _2304))) * _2304;
        float _4274 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2343 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
        float _2344 = isnan(1.0) ? _1920 : (isnan(_1920) ? 1.0 : min(_1920, 1.0));
        _2265 = (((((_2324 * _2092) + _846) * cbLight._m0[_2275].x) * _2343) * _2344) + _2201;
        _2267 = (((((_2324 * _2094) + _848) * cbLight._m0[_2275].y) * _2343) * _2344) + _2202;
        _2269 = (((((_2324 * _2095) + _849) * cbLight._m0[_2275].z) * _2343) * _2344) + _2203;
    }
    float _2379;
    float _2381;
    float _2383;
    if (_1996)
    {
        _2379 = _2265;
        _2381 = _2267;
        _2383 = _2269;
    }
    else
    {
        uint _2390 = _1905 + 3u;
        uint _2394 = _1905 + 11u;
        float _2408 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2390].w)) * _700) * 0.949999988079071044921875);
        float _2409 = _2408 * _2408;
        float _2410 = cbLight._m0[_2390].x + _776;
        float _2411 = cbLight._m0[_2390].y + _777;
        float _2412 = cbLight._m0[_2390].z + _778;
        float _2416 = inversesqrt(dot(vec3(_2410, _2411, _2412), vec3(_2410, _2411, _2412)));
        float _2417 = _2416 * _2410;
        float _2418 = _2416 * _2411;
        float _2419 = _2416 * _2412;
        float _2420 = dot(vec3(_697, _698, _699), vec3(cbLight._m0[_2390].xyz));
        float _4290 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2423 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _2424 = dot(vec3(_697, _698, _699), vec3(_2417, _2418, _2419));
        float _4301 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2427 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _2428 = dot(vec3(cbLight._m0[_2390].xyz), vec3(_2417, _2418, _2419));
        float _4312 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
        float _2432 = _2409 * _2409;
        float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
        float _2443 = exp2(log2(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * 5.0);
        float _2450 = 1.0 - _2409;
        float _2460 = (0.5 / (((_2070 * ((_2423 * _2450) + _2409)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2450) + _2409) * _2423))) * _2423;
        float _4323 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
        float _2462 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
        float _2463 = isnan(1.0) ? _1921 : (isnan(_1921) ? 1.0 : min(_1921, 1.0));
        _2379 = (((((_2443 * _2092) + _846) * cbLight._m0[_2394].x) * _2462) * _2463) + _2265;
        _2381 = (((((_2443 * _2094) + _848) * cbLight._m0[_2394].y) * _2462) * _2463) + _2267;
        _2383 = (((((_2443 * _2095) + _849) * cbLight._m0[_2394].z) * _2462) * _2463) + _2269;
    }
    float _2598;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    float _2608;
    if (_1903.y == 0u)
    {
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2539 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2538;
        float _2540 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2538;
        float _2541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2538;
        uvec4 _2553 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2554 = _2553.x;
        uint _2565 = uint((float(_2553.y) * floor(float(uint(cbSceneParam._m0[85u].y * _785) / _2554))) + floor(float(uint(cbSceneParam._m0[85u].x * _784) / _2554)));
        float _2575 = (log2(_2541 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2576 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        uint _2579 = uint(isnan(14.0) ? _2576 : (isnan(_2576) ? 14.0 : min(_2576, 14.0)));
        uvec4 _2584 = texelFetch(g_lightClusterGridBuffer, int(((_2579 << 2u) + (_2565 << 6u)) >> 2u));
        uint _2585 = _2584.x;
        uint _2586 = _2553.z;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        float _2694;
        float _2696;
        if (((((1u << ((_2586 >> 4u) & 15u)) + 4294967295u) & _2585) == 0u) || ((_2586 & 240u) == 0u))
        {
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
            _2694 = 0.0;
            _2696 = 0.0;
        }
        else
        {
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2695;
            float _2697;
            float _2831 = 0.0;
            float _2832 = 0.0;
            float _2833 = 0.0;
            float _2834 = 0.0;
            float _2835 = 0.0;
            float _2836 = 0.0;
            uint _2837 = 0u;
            uint _2846;
            bool _2847;
            for (;;)
            {
                _2846 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                _2847 = _2846 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2847)
                {
                    frontier_phi_61_pred = _2831;
                    frontier_phi_61_pred_1 = _2836;
                    frontier_phi_61_pred_2 = _2835;
                    frontier_phi_61_pred_3 = _2834;
                    frontier_phi_61_pred_4 = _2833;
                    frontier_phi_61_pred_5 = _2832;
                }
                else
                {
                    float _2955;
                    float _2956;
                    float _2957;
                    float _2958;
                    float _2959;
                    float _2960;
                    uint _2961;
                    _2955 = _2831;
                    _2956 = _2832;
                    _2957 = _2833;
                    _2958 = _2834;
                    _2959 = _2835;
                    _2960 = _2836;
                    _2961 = _2846;
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    for (;;)
                    {
                        uint _2965 = uint(findLSB(_2961)) + (_2837 << 5u);
                        uint _2962 = (_2961 + 4294967295u) & _2961;
                        uint _2967 = _2965 * 48u;
                        vec4 _2981 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        uint _2987 = (_2965 * 48u) + 4u;
                        vec4 _3000 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2987)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2987 + 3u)).x));
                        uint _3006 = (_2965 * 48u) + 8u;
                        vec3 _3017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3006)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3006 + 2u)).x));
                        float _3021 = _2981.x - _2539;
                        float _3022 = _2981.y - _2540;
                        float _3023 = _2981.z - _2541;
                        float _3024 = dot(vec3(_3021, _3022, _3023), vec3(_3021, _3022, _3023));
                        float _3027 = inversesqrt(_3024);
                        float _3028 = _3027 * _3021;
                        float _3029 = _3027 * _3022;
                        float _3030 = _3027 * _3023;
                        float _3031 = dot(vec3(_803, _806, _809), vec3(_3028, _3029, _3030));
                        float _3036 = 1.0 - (_3024 * _2981.w);
                        float _4349 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                        float _3037 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3038 = sqrt(_3024) * _3000.w;
                        float _3041 = 1.39999997615814208984375 / (_3038 + 1.39999997615814208984375);
                        float _3042 = _3041 * _3041;
                        float _3045 = ((1.0 - _3042) * _3031) + _3042;
                        float _3048 = _3038 * _3038;
                        float _3052 = ((isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0))) * _3037) / ((_3048 * 0.699999988079071044921875) + 1.0);
                        float _3056 = (-0.0) - _2539;
                        float _3057 = (-0.0) - _2540;
                        float _3058 = (-0.0) - _2541;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3063 = _3062 * _3056;
                        float _3064 = _3062 * _3057;
                        float _3065 = _3062 * _3058;
                        float _3073 = exp2(log2(1.0 / ((_3048 * 3.5) + 5.0)) * 0.25);
                        float _3074 = 1.0 - _878;
                        float _3081 = sqrt(1.0 - ((1.0 - (_3074 * _3074)) * (1.0 - (_3073 * _3073))));
                        float _3082 = _3081 * _3081;
                        float _3083 = _3082 * _3082;
                        float _3084 = _3063 + _3028;
                        float _3085 = _3064 + _3029;
                        float _3086 = _3065 + _3030;
                        float _3090 = inversesqrt(dot(vec3(_3084, _3085, _3086), vec3(_3084, _3085, _3086)));
                        float _3094 = dot(vec3(_803, _806, _809), vec3(_3063, _3064, _3065));
                        float _4365 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3097 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
                        float _3098 = dot(vec3(_803, _806, _809), vec3(_3090 * _3084, _3090 * _3085, _3090 * _3086));
                        float _4376 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                        float _3101 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                        float _3105 = ((_3101 * _3101) * (_3083 + (-1.0))) + 1.0;
                        float _3106 = _3041 * _3082;
                        float _3107 = _3106 * _3106;
                        float _3110 = ((1.0 - _3107) * _3031) + _3107;
                        float _4387 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                        float _3111 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
                        float _3112 = 1.0 - _3082;
                        float _3122 = (0.5 / (((_3111 * ((_3097 * _3112) + _3082)) + 9.9999999392252902907785028219223e-09) + (((_3111 * _3112) + _3082) * _3097))) * _3111;
                        float _4398 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                        float _3133 = (((_3083 * 3.1415927410125732421875) * (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) / ((_3105 * _3105) * ((_3048 * 2.1991131305694580078125) + 3.141590118408203125))) * _3037;
                        _2890 = (_3052 * _3000.x) + _2958;
                        _2891 = (_3052 * _3000.y) + _2959;
                        _2892 = (_3052 * _3000.z) + _2960;
                        _2887 = (_3133 * _3017.x) + _2955;
                        _2888 = (_3133 * _3017.y) + _2956;
                        _2889 = (_3133 * _3017.z) + _2957;
                        if (_2962 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2955 = _2887;
                            _2956 = _2888;
                            _2957 = _2889;
                            _2958 = _2890;
                            _2959 = _2891;
                            _2960 = _2892;
                            _2961 = _2962;
                        }
                    }
                    frontier_phi_61_pred = _2887;
                    frontier_phi_61_pred_1 = _2892;
                    frontier_phi_61_pred_2 = _2891;
                    frontier_phi_61_pred_3 = _2890;
                    frontier_phi_61_pred_4 = _2889;
                    frontier_phi_61_pred_5 = _2888;
                }
                _2687 = frontier_phi_61_pred;
                _2697 = frontier_phi_61_pred_1;
                _2695 = frontier_phi_61_pred_2;
                _2693 = frontier_phi_61_pred_3;
                _2691 = frontier_phi_61_pred_4;
                _2689 = frontier_phi_61_pred_5;
                uint _2838 = _2837 + 1u;
                if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2831 = _2687;
                    _2832 = _2689;
                    _2833 = _2691;
                    _2834 = _2693;
                    _2835 = _2695;
                    _2836 = _2697;
                    _2837 = _2838;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
            _2694 = _2695;
            _2696 = _2697;
        }
        uvec4 _2700 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2701 = _2700.z;
        uint _2703 = (_2701 >> 8u) & 15u;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        float _2807;
        float _2809;
        if (((4294967295u << _2703) & _2585) == 0u)
        {
            _2799 = _2686;
            _2801 = _2688;
            _2803 = _2690;
            _2805 = _2692;
            _2807 = _2694;
            _2809 = _2696;
        }
        else
        {
            float _2824 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
            float _2825 = _2824 * _2539;
            float _2826 = _2824 * _2540;
            float _2827 = _2824 * _2541;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2703 < ((_2701 >> 12u) & 15u))
            {
                float _2800;
                float _2802;
                float _2804;
                float _2806;
                float _2808;
                float _2810;
                float _2938 = _2686;
                float _2939 = _2688;
                float _2940 = _2690;
                float _2941 = _2692;
                float _2942 = _2694;
                float _2943 = _2696;
                uint _2944 = _2703;
                uint _2953;
                bool _2954;
                for (;;)
                {
                    _2953 = texelFetch(g_lightClassification, int((((_2579 << 5u) + (_2565 << 9u)) + (_2944 << 2u)) >> 2u)).x;
                    _2954 = _2953 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2954)
                    {
                        frontier_phi_67_pred = _2941;
                        frontier_phi_67_pred_1 = _2942;
                        frontier_phi_67_pred_2 = _2943;
                        frontier_phi_67_pred_3 = _2940;
                        frontier_phi_67_pred_4 = _2939;
                        frontier_phi_67_pred_5 = _2938;
                    }
                    else
                    {
                        float _3138;
                        float _3139;
                        float _3140;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3432;
                        float _3433;
                        float _3434;
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3151 = _2938;
                        float _3152 = _2939;
                        float _3153 = _2940;
                        float _3154 = _2941;
                        float _3155 = _2942;
                        float _3156 = _2943;
                        uint _3157 = _2953;
                        uint _3158;
                        vec4 _3183;
                        float _3184;
                        vec4 _3199;
                        vec3 _3211;
                        vec4 _3226;
                        vec4 _3242;
                        float _3288;
                        bool _3289;
                        for (;;)
                        {
                            uint _3168 = ((_2944 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3157));
                            _3158 = (_3157 + 4294967295u) & _3157;
                            uint _3170 = _3168 * 40u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            _3184 = _3183.w;
                            uint _3186 = (_3168 * 40u) + 4u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3201 = (_3168 * 40u) + 8u;
                            _3211 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x));
                            uint _3213 = (_3168 * 40u) + 16u;
                            _3226 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3213)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3213 + 3u)).x));
                            uint _3229 = (_3168 * 40u) + 20u;
                            _3242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3229 + 3u)).x));
                            uint _3244 = (_3168 * 40u) + 24u;
                            vec4 _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3263 = (_3168 * 40u) + 28u;
                            vec4 _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            _3288 = fma(_2541, _3276.z, fma(_2540, _3276.y, _3276.x * _2539)) + _3276.w;
                            _3289 = !((fma(_2541, _3257.z, fma(_2540, _3257.y, _3257.x * _2539)) + _3257.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3289)
                            {
                                float _3316 = _3183.x - _2539;
                                float _3317 = _3183.y - _2540;
                                float _3318 = _3183.z - _2541;
                                float _3319 = dot(vec3(_3316, _3317, _3318), vec3(_3316, _3317, _3318));
                                float _3322 = inversesqrt(_3319);
                                float _3323 = _3322 * _3316;
                                float _3324 = _3322 * _3317;
                                float _3325 = _3322 * _3318;
                                float _3329 = 1.0 - (_3319 / (_3184 * _3184));
                                float _4409 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3330 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
                                float _3334 = sqrt(_3319) * _3199.w;
                                float _3336 = 1.39999997615814208984375 / (_3334 + 1.39999997615814208984375);
                                float _3337 = _3336 * _3336;
                                float _3340 = ((1.0 - _3337) * dot(vec3(_3323, _3324, _3325), vec3(_803, _806, _809))) + _3337;
                                float _3343 = _3334 * _3334;
                                float _3347 = (fma(_2541, _3226.z, fma(_2540, _3226.y, _3226.x * _2539)) + _3226.w) / _3288;
                                float _3348 = (fma(_2541, _3242.z, fma(_2540, _3242.y, _3242.x * _2539)) + _3242.w) / _3288;
                                float _3352 = 1.0 - dot(vec2(_3347, _3348), vec2(_3347, _3348));
                                float _4425 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3353 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3354 = _3353 * (((isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0))) * _3330) / ((_3343 * 0.699999988079071044921875) + 1.0));
                                float _3366 = exp2(log2(1.0 / ((_3343 * 3.5) + 5.0)) * 0.25);
                                float _3367 = 1.0 - _878;
                                float _3374 = sqrt(1.0 - ((1.0 - (_3367 * _3367)) * (1.0 - (_3366 * _3366))));
                                float _3375 = _3374 * _3374;
                                float _3376 = _3375 * _3375;
                                float _3377 = _3323 - _2825;
                                float _3378 = _3324 - _2826;
                                float _3379 = _3325 - _2827;
                                float _3383 = inversesqrt(dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379)));
                                float _3387 = dot(vec3(_803, _806, _809), vec3((-0.0) - _2825, (-0.0) - _2826, (-0.0) - _2827));
                                float _4436 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3390 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                                float _3391 = dot(vec3(_803, _806, _809), vec3(_3383 * _3377, _3383 * _3378, _3383 * _3379));
                                float _4447 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                                float _3398 = ((_3394 * _3394) * (_3376 + (-1.0))) + 1.0;
                                float _3399 = _3336 * _3375;
                                float _3400 = _3399 * _3399;
                                float _3406 = ((1.0 - _3400) * dot(vec3(_803, _806, _809), vec3(_3323, _3324, _3325))) + _3400;
                                float _4458 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0));
                                float _3407 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                                float _3408 = 1.0 - _3375;
                                float _3418 = (0.5 / (((_3407 * ((_3390 * _3408) + _3375)) + 9.9999999392252902907785028219223e-09) + (((_3407 * _3408) + _3375) * _3390))) * _3407;
                                float _4469 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3428 = (_3353 * _3330) * (((_3376 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3398 * _3398) * ((_3343 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3428 * _3211.x;
                                frontier_phi_73_pred_1 = _3428 * _3211.y;
                                frontier_phi_73_pred_2 = _3354 * _3199.z;
                                frontier_phi_73_pred_3 = _3354 * _3199.y;
                                frontier_phi_73_pred_4 = _3354 * _3199.x;
                                frontier_phi_73_pred_5 = _3428 * _3211.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3432 = frontier_phi_73_pred;
                            _3433 = frontier_phi_73_pred_1;
                            _3437 = frontier_phi_73_pred_2;
                            _3436 = frontier_phi_73_pred_3;
                            _3435 = frontier_phi_73_pred_4;
                            _3434 = frontier_phi_73_pred_5;
                            _3141 = _3435 + _3154;
                            _3142 = _3436 + _3155;
                            _3143 = _3437 + _3156;
                            _3138 = _3432 + _3151;
                            _3139 = _3433 + _3152;
                            _3140 = _3434 + _3153;
                            if (_3158 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3151 = _3138;
                                _3152 = _3139;
                                _3153 = _3140;
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3158;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3141;
                        frontier_phi_67_pred_1 = _3142;
                        frontier_phi_67_pred_2 = _3143;
                        frontier_phi_67_pred_3 = _3140;
                        frontier_phi_67_pred_4 = _3139;
                        frontier_phi_67_pred_5 = _3138;
                    }
                    _2806 = frontier_phi_67_pred;
                    _2808 = frontier_phi_67_pred_1;
                    _2810 = frontier_phi_67_pred_2;
                    _2804 = frontier_phi_67_pred_3;
                    _2802 = frontier_phi_67_pred_4;
                    _2800 = frontier_phi_67_pred_5;
                    uint _2945 = _2944 + 1u;
                    if (_2945 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2938 = _2800;
                        _2939 = _2802;
                        _2940 = _2804;
                        _2941 = _2806;
                        _2942 = _2808;
                        _2943 = _2810;
                        _2944 = _2945;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2808;
                frontier_phi_55_56_ladder_1 = _2810;
                frontier_phi_55_56_ladder_2 = _2806;
                frontier_phi_55_56_ladder_3 = _2804;
                frontier_phi_55_56_ladder_4 = _2802;
                frontier_phi_55_56_ladder_5 = _2800;
            }
            else
            {
                frontier_phi_55_56_ladder = _2694;
                frontier_phi_55_56_ladder_1 = _2696;
                frontier_phi_55_56_ladder_2 = _2692;
                frontier_phi_55_56_ladder_3 = _2690;
                frontier_phi_55_56_ladder_4 = _2688;
                frontier_phi_55_56_ladder_5 = _2686;
            }
            _2799 = frontier_phi_55_56_ladder_5;
            _2801 = frontier_phi_55_56_ladder_4;
            _2803 = frontier_phi_55_56_ladder_3;
            _2805 = frontier_phi_55_56_ladder_2;
            _2807 = frontier_phi_55_56_ladder;
            _2809 = frontier_phi_55_56_ladder_1;
        }
        float _2814 = isnan(1.0) ? _862 : (isnan(_862) ? 1.0 : min(_862, 1.0));
        _2598 = (_2814 * _2805) + _2034;
        _2600 = (_2814 * _2807) + _2036;
        _2602 = (_2814 * _2809) + _2038;
        _2604 = ((_2799 * _846) * _2814) + _2379;
        _2606 = ((_2801 * _848) * _2814) + _2381;
        _2608 = ((_2803 * _849) * _2814) + _2383;
    }
    else
    {
        _2598 = _2034;
        _2600 = _2036;
        _2602 = _2038;
        _2604 = _2379;
        _2606 = _2381;
        _2608 = _2383;
    }
    float _4485 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _4496 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _4507 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    uint _2628 = _247 + 6u;
    float _2636 = _784 / cbSceneParam._m0[86u].x;
    float _2637 = _785 / cbSceneParam._m0[86u].y;
    vec4 _2651 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, (log2((isnan(cbSceneParam._m0[77u].w) ? _719 : (isnan(_719) ? cbSceneParam._m0[77u].w : min(_719, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2653 = _2651.x;
    float _2654 = _2651.y;
    float _2655 = _2651.z;
    float _2656 = _2651.w;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    if (_719 > cbSceneParam._m0[78u].w)
    {
        float _2711 = isnan(_719) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _719 : min(cbSceneParam._m0[80u].w, _719));
        float _2712 = _2711 / _719;
        float _2723 = _2712 * _769;
        float _2724 = _770 * _2712;
        float _2725 = (-0.0) - _2724;
        float _2727 = _2712 * _771;
        float _2729 = (cbSceneParam._m0[77u].w * _2725) / _2711;
        float _2730 = _2729 + cbSceneParam._m0[79u].w;
        float _2731 = cbSceneParam._m0[79u].w - _2724;
        float _2737 = sqrt(((_2723 * _2723) + (_2724 * _2724)) + (_2727 * _2727));
        float _2740 = (1.0 - (cbSceneParam._m0[77u].w / _2711)) * _2737;
        float _2745 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2747 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2900;
        if (abs((_2725 - _2729) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2900 = ((((_2730 > 0.0) ? exp2(_2745 * _2730) : (2.0 - exp2(_2747 * _2730))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2740;
        }
        else
        {
            float _2860 = 1.0 / cbSceneParam._m0[80u].x;
            float _2861 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : max(_2730, _2731));
            float _2862 = isnan(_2731) ? _2730 : (isnan(_2730) ? _2731 : min(_2730, _2731));
            float _2871 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : min(_2861, 0.0));
            float _2872 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : min(_2862, 0.0));
            _2900 = ((abs(_2737 / _2725) * cbSceneParam._m0[80u].y) * ((((_2871 - _2872) * 2.0) - ((exp2(_2745 * (isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0)))) - exp2(_2745 * (isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0))))) * _2860)) - ((exp2(_2747 * _2871) - exp2(_2747 * _2872)) * _2860))) + (_2740 * cbSceneParam._m0[80u].z);
        }
        vec4 _2902 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2636, _2637, 1.0), 0.0);
        float _2911 = exp2((_2900 * (-1.44269502162933349609375)) * (1.0 - _2902.w));
        float _2912 = log2(_2911);
        float _2928 = log2(_2656);
        _2749 = (exp2(_2928 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].x)) * _2902.x) / cbSceneParam._m0[78u].x)) + _2653;
        _2751 = (exp2(_2928 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].y)) * _2902.y) / cbSceneParam._m0[78u].y)) + _2654;
        _2753 = (exp2(_2928 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2912 * cbSceneParam._m0[78u].z)) * _2902.z) / cbSceneParam._m0[78u].z)) + _2655;
        _2755 = _2911 * _2656;
    }
    else
    {
        _2749 = _2653;
        _2751 = _2654;
        _2753 = _2655;
        _2755 = _2656;
    }
    float _2767 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2768 = _2767 == 3.0;
    float _2769 = log2(_2755);
    float _2776 = exp2(_2769 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_2598 + ((isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) * _862))) + ((_2604 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _2777 = exp2(_2769 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2600 + ((isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0))) * _862))) + ((_2606 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _2778 = exp2(_2769 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0))) * (_2602 + ((isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))) * _862))) + ((_2608 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1670)) * cbPerFrame._m0[3u].x));
    float _2787 = (_2767 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2787 * (_2768 ? _2776 : (_2776 + (cbSceneParam._m0[72u].w * _2749)));
    SV_Target.y = _2787 * (_2768 ? _2777 : (_2777 + (cbSceneParam._m0[72u].w * _2751)));
    SV_Target.z = _2787 * (_2768 ? _2778 : (_2778 + (cbSceneParam._m0[72u].w * _2753)));
    SV_Target.w = cbInstanceData._m0[_2628].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2628].w;
}


