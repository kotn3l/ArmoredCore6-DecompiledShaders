#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1431;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _243 = _242 * _234;
    float _244 = _242 * _235;
    float _245 = _242 * _236;
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = _249 * NORMAL.x;
    float _251 = _249 * NORMAL.y;
    float _252 = _249 * NORMAL.z;
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = _256 * TANGENT.x;
    float _258 = _256 * TANGENT.y;
    float _259 = _256 * TANGENT.z;
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3781 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _3792 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3803 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    uint _281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _286 = _281 + 1u;
    uint _290 = _281 + 2u;
    float _299 = sqrt(((cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x) + (cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x)) + (cbInstanceData._m0[_290].x * cbInstanceData._m0[_290].x));
    float _300 = _299 * TEXCOORD.z;
    float _301 = _299 * TEXCOORD.w;
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _300) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _301) + cbTextureTilingScale._m0[13u].w));
    vec4 _338 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _343 = _338.x * cbMtdParam._m0[11u].x;
    float _344 = _338.y * cbMtdParam._m0[11u].y;
    float _345 = _338.z * cbMtdParam._m0[11u].z;
    vec4 _364 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _300) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _301) + cbTextureTilingScale._m0[5u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3814 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _451 = (_444 * ((_364.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _452 = (_444 * ((_364.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _453 = (_444 * ((_364.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    float _457 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _314.x) * _451;
    float _460 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _314.y) * _452;
    float _463 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _314.z) * _453;
    float _470 = ((_451 - _457) * (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) + _457;
    float _471 = ((_452 - _460) * (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) + _460;
    float _472 = ((_453 - _463) * (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0)))) + _463;
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _300) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _301) + cbTextureTilingScale._m0[20u].w));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _300) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _301) + cbTextureTilingScale._m0[4u].w));
    vec4 _534 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _536 = _534.x;
    float _537 = _534.y;
    float _538 = _534.z;
    float _547 = ((_517.z - _538) * _444) + _538;
    float _550 = ((((_517.x - _536) * _444) + _536) * 2.0) + (-1.0);
    float _551 = ((((_517.y - _537) * _444) + _537) * 2.0) + (-1.0);
    float _552 = dot(vec2(_550, _551), vec2(_550, _551));
    float _3825 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _557 = sqrt(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _589 = (_550 + ((((_490.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_577.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _590 = (_551 + ((((_490.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_577.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _593 = fma(_557, _250, fma(_590, _257, _589 * _243));
    float _596 = fma(_557, _251, fma(_590, _258, _589 * _244));
    float _599 = fma(_557, _252, fma(_590, _259, _589 * _245));
    float _603 = inversesqrt(dot(vec3(_593, _596, _599), vec3(_593, _596, _599)));
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _300) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _301) + cbTextureTilingScale._m0[11u].w));
    float _632 = _630.x;
    float _633 = 1.0 - _632;
    float _642 = (cbMtdParam._m0[19u].x + dot(vec4(_603 * _593, _603 * _596, _603 * _599, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_632 - _633) * cbMtdParam._m0[24u].z) + _633) * cbMtdParam._m0[21u].z);
    float _3836 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _643 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
    float _645 = (-0.0) - cbMtdParam._m0[24u].x;
    float _647 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _648 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
    float _655 = _643 - ((_643 * TEXCOORD_8.x) * _648);
    float _656 = _643 - ((_643 * TEXCOORD_8.y) * _648);
    float _657 = _643 - ((_643 * TEXCOORD_8.z) * _648);
    float _664 = (_655 * (cbMtdParam._m0[17u].x - _470)) + _470;
    float _665 = (_656 * (cbMtdParam._m0[17u].y - _471)) + _471;
    float _666 = (_657 * (cbMtdParam._m0[17u].z - _472)) + _472;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _300) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _301) + cbTextureTilingScale._m0[19u].w));
    float _680 = _678.x;
    float _681 = 1.0 - _680;
    float _707 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_680 - _681) * cbMtdParam._m0[24u].w) + _681) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3857 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _708 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _716 = ((((cbMtdParam._m0[10u].x - _664) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _708) + _664;
    float _717 = ((((cbMtdParam._m0[10u].y - _665) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _708) + _665;
    float _718 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _666)) * _708) + _666;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _744 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _746 = _744.x;
    float _764 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _300) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _301) + cbTextureTilingScale._m0[9u].w)).x - _746) * _444) + _746;
    float _768 = ((_730.x - _764) * cbMtdParam._m0[19u].z) + _764;
    float _770 = _768 - (_768 * _655);
    float _772 = _770 - (_770 * _708);
    float _777 = (((_490.z - _547) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _547;
    float _781 = ((_577.z - _777) * cbMtdParam._m0[19u].w) + _777;
    vec4 _795 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _300) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _301) + cbTextureTilingScale._m0[15u].w));
    float _802 = (_795.x * 2.0) + (-1.0);
    float _803 = (_795.y * 2.0) + (-1.0);
    float _804 = dot(vec2(_802, _803), vec2(_802, _803));
    float _3868 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _812 = ((_795.z - _781) * _655) + _781;
    float _815 = ((cbMtdParam._m0[23u].x - _812) * _708) + _812;
    vec4 _834 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _300) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _301) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _840 = (_834.x * 2.0) + (-1.0);
    float _841 = (_834.y * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3879 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _857 = ((sqrt(1.0 - (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) - _557) * _657) + _557;
    float _860 = (((_802 - _589) * _655) + _589) + (cbMtdParam._m0[21u].x * _589);
    float _861 = (((_803 - _590) * _656) + _590) + (cbMtdParam._m0[21u].x * _590);
    float _872 = (((_840 - _860) + (_860 * cbMtdParam._m0[22u].z)) * _708) + _860;
    float _873 = (((_841 - _861) + (_861 * cbMtdParam._m0[22u].z)) * _708) + _861;
    float _874 = (_708 * (sqrt(1.0 - (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) - _857)) + _857;
    float _878 = cbMtdParam._m0[22u].x + _577.w;
    float _881 = fma(_874, _250, fma(_873, _257, _872 * _243));
    float _884 = fma(_874, _251, fma(_873, _258, _872 * _244));
    float _887 = fma(_874, _252, fma(_873, _259, _872 * _245));
    float _891 = inversesqrt(dot(vec3(_881, _884, _887), vec3(_881, _884, _887)));
    float _892 = _891 * _881;
    float _893 = _891 * _884;
    float _894 = _891 * _887;
    float _3890 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _895 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _3912 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _3923 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _3934 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _3945 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _900 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _914 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _964 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _954);
    float _965 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _954);
    float _966 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _954);
    float _970 = inversesqrt(dot(vec3(_964, _965, _966), vec3(_964, _965, _966)));
    float _971 = _964 * _970;
    float _972 = _965 * _970;
    float _973 = _966 * _970;
    float _979 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _980 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _998 = fma(_894, cbSceneParam._m0[5u].z, fma(_893, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _892));
    float _1001 = fma(_894, cbSceneParam._m0[6u].z, fma(_893, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _892));
    float _1004 = fma(_894, cbSceneParam._m0[7u].z, fma(_893, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _892));
    uint _1018 = (_281 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1024 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_1018].x;
    float _1025 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * cbInstanceData._m0[_1018].y;
    float _1026 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * cbInstanceData._m0[_1018].z;
    float _3956 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
    float _1027 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1028 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _3978 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
    float _1030 = 1.0 - _900;
    float _1031 = _1027 * _1030;
    float _1032 = _1028 * _1030;
    float _1033 = _1029 * _1030;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _900;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _900;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _900;
    float _1041 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    vec4 _1053 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _979, cbSceneParam._m0[86u].y * _980));
    float _1057 = ((isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * TEXCOORD_5.w) * _1053.x;
    float _1058 = dot(vec3(_892, _893, _894), vec3(_971, _972, _973));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _892) - _971;
    float _1066 = (_1061 * _893) - _972;
    float _1067 = (_1061 * _894) - _973;
    float _1071 = abs(dot(vec3(_971, _972, _973), vec3(_892, _893, _894)));
    float _3989 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_895);
    float _1086 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1073;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1430;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1155 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1159 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1163 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1188 = _1121 + _892;
        float _1189 = _1125 + _893;
        float _1190 = _1129 + _894;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1155;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1159;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1163;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1219 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1155 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1159 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1221 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1163 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1219, _1220, _1221), 0.0);
        float _1258 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1224.x + (-0.5));
        float _1260 = _1258 * (_1224.y + (-0.5));
        float _1261 = _1258 * (_1224.z + (-0.5));
        float _1268 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1231.x + (-0.5));
        float _1270 = _1268 * (_1231.y + (-0.5));
        float _1271 = _1268 * (_1231.z + (-0.5));
        float _1278 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1238.x + (-0.5));
        float _1280 = _1278 * (_1238.y + (-0.5));
        float _1281 = _1278 * (_1238.z + (-0.5));
        float _1288 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1245.x + (-0.5));
        float _1290 = _1288 * (_1245.y + (-0.5));
        float _1291 = _1288 * (_1245.z + (-0.5));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = _1259 * 0.5;
        float _1296 = _1269 * 0.5;
        float _1297 = _1279 * 0.5;
        float _1298 = dot(vec3(_1295, _1296, _1297), vec3(_1295, _1296, _1297));
        float _1303 = (_1298 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1298);
        float _1312 = (dot(vec3(_892, _893, _894), vec3(_1303 * _1295, _1303 * _1296, _1303 * _1297)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1322 = sqrt(((_1296 * _1296) + (_1295 * _1295)) + (_1297 * _1297)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1324 = _1323 * 2.0;
        float _1328 = (1.0 - _1323) / (_1323 + 1.0);
        float _4037 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1338 = ((((1.0 - _1329) * (_1324 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1324 + 1.0))) + _1329) * _1292;
        float _1339 = _1260 * 0.5;
        float _1340 = _1270 * 0.5;
        float _1341 = _1280 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_892, _893, _894), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4070 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1366 + 1.0))) + _1371) * _1293;
        float _1381 = _1261 * 0.5;
        float _1382 = _1271 * 0.5;
        float _1383 = _1281 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_892, _893, _894), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4081 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _4092 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4103 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0))) * (_1408 + 1.0))) + _1413) * _1294;
        _1430 = _1261;
        _1432 = _1260;
        _1433 = _1259;
        _1434 = _1271;
        _1435 = _1270;
        _1436 = _1269;
        _1437 = _1281;
        _1438 = _1280;
        _1439 = _1279;
        _1440 = _1294;
        _1441 = _1293;
        _1442 = _1292;
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
    }
    else
    {
        _1430 = _1431;
        _1432 = _1431;
        _1433 = _1431;
        _1434 = _1431;
        _1435 = _1431;
        _1436 = _1431;
        _1437 = _1431;
        _1438 = _1431;
        _1439 = _1431;
        _1440 = _1431;
        _1441 = _1431;
        _1442 = _1431;
        _1443 = 0.0;
        _1444 = 0.0;
        _1445 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1474 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1478 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1501 = _1121 + _892;
        float _1502 = _1125 + _893;
        float _1503 = _1129 + _894;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_892, _893, _894), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4166 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_892, _893, _894), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4199 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_892, _893, _894), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4210 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4221 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4232 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1431;
        _1740 = _1431;
        _1741 = _1431;
        _1742 = _1431;
        _1743 = _1431;
        _1744 = _1431;
        _1745 = _1431;
        _1746 = _1431;
        _1747 = _1431;
        _1748 = _1431;
        _1749 = _1431;
        _1750 = _1431;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1443)) + _1443;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1444)) + _1444;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1445)) + _1445;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1065 * 0.5;
    float _1808 = _1066 * 0.5;
    float _1809 = _1067 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1430, _1434, _1437, _1440));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1433, _1436, _1439, _1442));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _895);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1957;
    float _1959;
    float _1961;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1924 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1928 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1932 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1935 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1938 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1941 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1969;
        if (_1935 > 0.0)
        {
            _1969 = abs((1.0 - _1924) / _1935);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1924 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1969 = frontier_phi_14_12_ladder;
        }
        float _2193;
        if (_1938 > 0.0)
        {
            _2193 = abs((1.0 - _1928) / _1938);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1938 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1928 + 1.0) / _1938);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2193 = frontier_phi_23_19_ladder;
        }
        float _2450;
        if (_1941 > 0.0)
        {
            _2450 = abs((1.0 - _1932) / _1941);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1941 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1932 + 1.0) / _1941);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2450 = frontier_phi_35_30_ladder;
        }
        float _2452 = isnan(_2193) ? _1969 : (isnan(_1969) ? _2193 : min(_1969, _2193));
        float _2453 = isnan(_2450) ? _2452 : (isnan(_2452) ? _2450 : min(_2452, _2450));
        float _2457 = (_2453 * _1935) + _1924;
        float _2458 = (_2453 * _1938) + _1928;
        float _2459 = (_2453 * _1941) + _1932;
        float _2460 = _2453 * 9.9999997473787516355514526367188e-05;
        float _2462 = (-1.0) - _2460;
        float _2464 = _2460 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2459 > _2464) || ((_2459 < _2462) || ((_2458 > _2464) || ((_2458 < _2462) || ((_2457 < _2462) || (_2457 > _2464))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2587 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2459, cbModelParam._m0[9u].z, fma(_2458, cbModelParam._m0[9u].y, _2457 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2459, cbModelParam._m0[10u].z, fma(_2458, cbModelParam._m0[10u].y, _2457 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2459, cbModelParam._m0[11u].z, fma(_2458, cbModelParam._m0[11u].y, _2457 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_13_35_ladder = _2587.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2587.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2587.x * cbModelParam._m0[1u].y;
        }
        _1957 = frontier_phi_13_35_ladder_2;
        _1959 = frontier_phi_13_35_ladder_1;
        _1961 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1945 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1876);
        _1957 = _1945.x * cbModelParam._m0[1u].y;
        _1959 = _1945.y * cbModelParam._m0[1u].y;
        _1961 = _1945.z * cbModelParam._m0[1u].y;
    }
    float _1965 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _895);
    float _1966 = isnan(_1965) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1965 : min(cbModelParam._m0[25u].w, _1965));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2020 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2024 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2028 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2031 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2034 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2037 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2198;
        if (_2031 > 0.0)
        {
            _2198 = abs((1.0 - _2020) / _2031);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2020 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2198 = frontier_phi_25_21_ladder;
        }
        float _2477;
        if (_2034 > 0.0)
        {
            _2477 = abs((1.0 - _2024) / _2034);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2024 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2477 = frontier_phi_37_32_ladder;
        }
        float _2690;
        if (_2037 > 0.0)
        {
            _2690 = abs((1.0 - _2028) / _2037);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2028 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2690 = frontier_phi_46_43_ladder;
        }
        float _2692 = isnan(_2477) ? _2198 : (isnan(_2198) ? _2477 : min(_2198, _2477));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2031) + _2020;
        float _2698 = (_2693 * _2034) + _2024;
        float _2699 = (_2693 * _2037) + _2028;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2701 = (-1.0) - _2700;
        float _2703 = _2700 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2699 > _2703) || ((_2699 < _2701) || ((_2698 > _2703) || ((_2698 < _2701) || ((_2697 < _2701) || (_2697 > _2703))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2699, cbModelParam._m0[17u].z, fma(_2698, cbModelParam._m0[17u].y, _2697 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2699, cbModelParam._m0[18u].z, fma(_2698, cbModelParam._m0[18u].y, _2697 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2699, cbModelParam._m0[19u].z, fma(_2698, cbModelParam._m0[19u].y, _2697 * cbModelParam._m0[19u].x))), _1966);
            frontier_phi_22_46_ladder = _2898.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2898.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2898.x * cbModelParam._m0[1u].z;
        }
        _2056 = frontier_phi_22_46_ladder_2;
        _2058 = frontier_phi_22_46_ladder_1;
        _2060 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2040 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1966);
        _2056 = _2040.x * cbModelParam._m0[1u].z;
        _2058 = _2040.y * cbModelParam._m0[1u].z;
        _2060 = _2040.z * cbModelParam._m0[1u].z;
    }
    float _2073 = (((_1092 * _1041) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2056 - _1957)) + _1957);
    float _2075 = (((_1092 * _1043) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2058 - _1959)) + _1959);
    float _2077 = (((_1092 * _1044) + _1093) * _1057) * ((cbModelParam._m0[1u].w * (_2060 - _1961)) + _1961);
    float _2080 = fma(_2077, cbSceneParam._m0[89u].z, fma(_2075, cbSceneParam._m0[89u].y, _2073 * cbSceneParam._m0[89u].x));
    float _2083 = fma(_2077, cbSceneParam._m0[90u].z, fma(_2075, cbSceneParam._m0[90u].y, _2073 * cbSceneParam._m0[90u].x));
    float _2086 = fma(_2077, cbSceneParam._m0[91u].z, fma(_2075, cbSceneParam._m0[91u].y, _2073 * cbSceneParam._m0[91u].x));
    vec4 _2094 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_979, _980));
    float _2096 = _2094.w;
    float _2108 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2096);
    float _2109 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2096);
    float _2110 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2096);
    uvec4 _2114 = floatBitsToUint(cbInstanceData._m0[_281 + 5u]);
    uint _2116 = _2114.x * 14u;
    uint _2117 = _2116 + 13u;
    float _2124 = _1057 + (-1.0);
    float _2129 = (cbLight._m0[_2117].x * _2124) + 1.0;
    float _2130 = (cbLight._m0[_2117].y * _2124) + 1.0;
    float _2131 = (cbLight._m0[_2117].z * _2124) + 1.0;
    float _2132 = (cbLight._m0[_2117].w * _2124) + 1.0;
    uint _2133 = _2116 + 5u;
    float _2139 = isnan(1.0) ? _2130 : (isnan(_2130) ? 1.0 : min(_2130, 1.0));
    uint _2143 = _2116 + 4u;
    float _2152 = isnan(1.0) ? _2129 : (isnan(_2129) ? 1.0 : min(_2129, 1.0));
    uint _2156 = _2116 | 1u;
    float _2167 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_892, _893, _894));
    float _2170 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_892, _893, _894));
    float _4368 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _4379 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _2175 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * 0.3183098733425140380859375;
    float _2177 = (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0))) * 0.3183098733425140380859375;
    float _2184 = ((cbLight._m0[_2133].x * _2139) * _2177) + (((cbLight._m0[_2143].x * _2108) * _2152) * _2175);
    float _2185 = ((_2139 * cbLight._m0[_2133].y) * _2177) + (((cbLight._m0[_2143].y * _2109) * _2152) * _2175);
    float _2186 = ((_2139 * cbLight._m0[_2133].z) * _2177) + (((cbLight._m0[_2143].z * _2110) * _2152) * _2175);
    uvec4 _2190 = floatBitsToUint(cbLight._m0[_2116 + 12u]);
    bool _2192 = _2190.x == 0u;
    float _2203;
    float _2205;
    float _2207;
    if (_2192)
    {
        _2203 = _2184;
        _2205 = _2185;
        _2207 = _2186;
    }
    else
    {
        uint _2211 = _2116 + 6u;
        float _2227 = (dot(vec3(cbLight._m0[_2116 + 2u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2228 = _2227 * _2227;
        float _4390 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2229 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2230 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2203 = (((cbLight._m0[_2211].x * 0.3183098733425140380859375) * _2229) * _2230) + _2184;
        _2205 = (((cbLight._m0[_2211].y * 0.3183098733425140380859375) * _2229) * _2230) + _2185;
        _2207 = (((cbLight._m0[_2211].z * 0.3183098733425140380859375) * _2229) * _2230) + _2186;
    }
    bool _2210 = _2190.y == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2210)
    {
        _2248 = _2203;
        _2250 = _2205;
        _2252 = _2207;
    }
    else
    {
        uint _2421 = _2116 + 7u;
        float _2437 = (dot(vec3(cbLight._m0[_2116 + 3u].xyz), vec3(_892, _893, _894)) * 0.5) + 0.5;
        float _2438 = _2437 * _2437;
        float _4406 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2439 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2440 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2248 = (((cbLight._m0[_2421].x * 0.3183098733425140380859375) * _2439) * _2440) + _2203;
        _2250 = (((cbLight._m0[_2421].y * 0.3183098733425140380859375) * _2439) * _2440) + _2205;
        _2252 = (((cbLight._m0[_2421].z * 0.3183098733425140380859375) * _2439) * _2440) + _2207;
    }
    uint _2255 = _2116 + 8u;
    float _2268 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2116].w)) * _895) * 0.949999988079071044921875);
    float _2269 = _2268 * _2268;
    float _2270 = cbLight._m0[_2116].x + _971;
    float _2271 = cbLight._m0[_2116].y + _972;
    float _2272 = cbLight._m0[_2116].z + _973;
    float _2276 = inversesqrt(dot(vec3(_2270, _2271, _2272), vec3(_2270, _2271, _2272)));
    float _2277 = _2276 * _2270;
    float _2278 = _2276 * _2271;
    float _2279 = _2276 * _2272;
    float _2280 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2116].xyz));
    float _4422 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2283 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _4433 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2284 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2285 = dot(vec3(_892, _893, _894), vec3(_2277, _2278, _2279));
    float _4444 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
    float _2288 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2289 = dot(vec3(cbLight._m0[_2116].xyz), vec3(_2277, _2278, _2279));
    float _4455 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2293 = _2269 * _2269;
    float _2297 = ((_2288 * _2288) * (_2293 + (-1.0))) + 1.0;
    float _2305 = exp2(log2(1.0 - (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0)))) * 5.0);
    float _2306 = 0.959999978542327880859375 - _1038;
    float _2308 = 0.959999978542327880859375 - _1039;
    float _2309 = 0.959999978542327880859375 - _1040;
    float _2316 = 1.0 - _2269;
    float _2327 = (0.5 / (((_2284 * ((_2283 * _2316) + _2269)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2316) + _2269) * _2283))) * _2283;
    float _4466 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2329 = (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2293 / ((_2297 * _2297) * 3.141590118408203125));
    uint _2343 = _2116 + 9u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _895) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2156].x + _971;
    float _2357 = cbLight._m0[_2156].y + _972;
    float _2358 = cbLight._m0[_2156].z + _973;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2156].xyz));
    float _4477 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
    float _2370 = dot(vec3(_892, _893, _894), vec3(_2363, _2364, _2365));
    float _4488 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
    float _2374 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2363, _2364, _2365));
    float _4499 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
    float _2378 = _2355 * _2355;
    float _2382 = ((_2373 * _2373) * (_2378 + (-1.0))) + 1.0;
    float _2389 = exp2(log2(1.0 - (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0)))) * 5.0);
    float _2396 = 1.0 - _2355;
    float _2406 = (0.5 / (((_2284 * ((_2369 * _2396) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2396) + _2355) * _2369))) * _2369;
    float _4510 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2408 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (_2378 / ((_2382 * _2382) * 3.141590118408203125));
    float _2418 = (((((_2389 * _2306) + _1041) * cbLight._m0[_2343].x) * _2408) * _2139) + ((((cbLight._m0[_2255].x * _2108) * ((_2305 * _2306) + _1041)) * _2329) * _2152);
    float _2419 = (((((_2389 * _2308) + _1043) * cbLight._m0[_2343].y) * _2408) * _2139) + ((((cbLight._m0[_2255].y * _2109) * ((_2305 * _2308) + _1043)) * _2329) * _2152);
    float _2420 = (((((_2389 * _2309) + _1044) * cbLight._m0[_2343].z) * _2408) * _2139) + ((((cbLight._m0[_2255].z * _2110) * ((_2305 * _2309) + _1044)) * _2329) * _2152);
    float _2482;
    float _2484;
    float _2486;
    if (_2192)
    {
        _2482 = _2418;
        _2484 = _2419;
        _2486 = _2420;
    }
    else
    {
        uint _2488 = _2116 + 2u;
        uint _2492 = _2116 + 10u;
        float _2506 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _895) * 0.949999988079071044921875);
        float _2507 = _2506 * _2506;
        float _2508 = cbLight._m0[_2488].x + _971;
        float _2509 = cbLight._m0[_2488].y + _972;
        float _2510 = cbLight._m0[_2488].z + _973;
        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
        float _2515 = _2514 * _2508;
        float _2516 = _2514 * _2509;
        float _2517 = _2514 * _2510;
        float _2518 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2488].xyz));
        float _4521 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2521 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _2522 = dot(vec3(_892, _893, _894), vec3(_2515, _2516, _2517));
        float _4532 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
        float _2525 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2526 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2515, _2516, _2517));
        float _4543 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
        float _2530 = _2507 * _2507;
        float _2534 = ((_2525 * _2525) * (_2530 + (-1.0))) + 1.0;
        float _2541 = exp2(log2(1.0 - (isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0)))) * 5.0);
        float _2548 = 1.0 - _2507;
        float _2558 = (0.5 / (((_2284 * ((_2521 * _2548) + _2507)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2548) + _2507) * _2521))) * _2521;
        float _4554 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2560 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (_2530 / ((_2534 * _2534) * 3.141590118408203125));
        float _2561 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
        _2482 = (((((_2541 * _2306) + _1041) * cbLight._m0[_2492].x) * _2560) * _2561) + _2418;
        _2484 = (((((_2541 * _2308) + _1043) * cbLight._m0[_2492].y) * _2560) * _2561) + _2419;
        _2486 = (((((_2541 * _2309) + _1044) * cbLight._m0[_2492].z) * _2560) * _2561) + _2420;
    }
    float _2596;
    float _2598;
    float _2600;
    if (_2210)
    {
        _2596 = _2482;
        _2598 = _2484;
        _2600 = _2486;
    }
    else
    {
        uint _2607 = _2116 + 3u;
        uint _2611 = _2116 + 11u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _895) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _971;
        float _2628 = cbLight._m0[_2607].y + _972;
        float _2629 = cbLight._m0[_2607].z + _973;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_892, _893, _894), vec3(cbLight._m0[_2607].xyz));
        float _4570 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
        float _2641 = dot(vec3(_892, _893, _894), vec3(_2634, _2635, _2636));
        float _4581 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4592 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2284 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2284 * _2667) + _2626) * _2640))) * _2640;
        float _4603 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
        _2596 = (((((_2660 * _2306) + _1041) * cbLight._m0[_2611].x) * _2679) * _2680) + _2482;
        _2598 = (((((_2660 * _2308) + _1043) * cbLight._m0[_2611].y) * _2679) * _2680) + _2484;
        _2600 = (((((_2660 * _2309) + _1044) * cbLight._m0[_2611].z) * _2679) * _2680) + _2486;
    }
    float _2815;
    float _2817;
    float _2819;
    float _2821;
    float _2823;
    float _2825;
    if (_2114.y == 0u)
    {
        float _2755 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2756 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2755;
        float _2757 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2755;
        float _2758 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2755;
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _980) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _979) / _2771)));
        float _2792 = (log2(_2758 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2903;
        float _2905;
        float _2907;
        float _2909;
        float _2911;
        float _2913;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2903 = 0.0;
            _2905 = 0.0;
            _2907 = 0.0;
            _2909 = 0.0;
            _2911 = 0.0;
            _2913 = 0.0;
        }
        else
        {
            float _2904;
            float _2906;
            float _2908;
            float _2910;
            float _2912;
            float _2914;
            float _3047 = 0.0;
            float _3048 = 0.0;
            float _3049 = 0.0;
            float _3050 = 0.0;
            float _3051 = 0.0;
            float _3052 = 0.0;
            uint _3053 = 0u;
            uint _3062;
            bool _3063;
            for (;;)
            {
                _3062 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                _3063 = _3062 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3063)
                {
                    frontier_phi_61_pred = _3047;
                    frontier_phi_61_pred_1 = _3052;
                    frontier_phi_61_pred_2 = _3051;
                    frontier_phi_61_pred_3 = _3050;
                    frontier_phi_61_pred_4 = _3049;
                    frontier_phi_61_pred_5 = _3048;
                }
                else
                {
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    uint _3177;
                    _3171 = _3047;
                    _3172 = _3048;
                    _3173 = _3049;
                    _3174 = _3050;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3062;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    for (;;)
                    {
                        uint _3181 = uint(findLSB(_3177)) + (_3053 << 5u);
                        uint _3178 = (_3177 + 4294967295u) & _3177;
                        uint _3183 = _3181 * 48u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3183)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3183 + 3u)).x));
                        uint _3203 = (_3181 * 48u) + 4u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 3u)).x));
                        uint _3222 = (_3181 * 48u) + 8u;
                        vec3 _3233 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x));
                        float _3237 = _3197.x - _2756;
                        float _3238 = _3197.y - _2757;
                        float _3239 = _3197.z - _2758;
                        float _3240 = dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239));
                        float _3243 = inversesqrt(_3240);
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3247 = dot(vec3(_998, _1001, _1004), vec3(_3244, _3245, _3246));
                        float _3252 = 1.0 - (_3240 * _3197.w);
                        float _4629 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
                        float _3254 = sqrt(_3240) * _3216.w;
                        float _3257 = 1.39999997615814208984375 / (_3254 + 1.39999997615814208984375);
                        float _3258 = _3257 * _3257;
                        float _3261 = ((1.0 - _3258) * _3247) + _3258;
                        float _3264 = _3254 * _3254;
                        float _3268 = ((isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0))) * _3253) / ((_3264 * 0.699999988079071044921875) + 1.0);
                        float _3272 = (-0.0) - _2756;
                        float _3273 = (-0.0) - _2757;
                        float _3274 = (-0.0) - _2758;
                        float _3278 = inversesqrt(dot(vec3(_3272, _3273, _3274), vec3(_3272, _3273, _3274)));
                        float _3279 = _3278 * _3272;
                        float _3280 = _3278 * _3273;
                        float _3281 = _3278 * _3274;
                        float _3289 = exp2(log2(1.0 / ((_3264 * 3.5) + 5.0)) * 0.25);
                        float _3290 = 1.0 - _1073;
                        float _3297 = sqrt(1.0 - ((1.0 - (_3290 * _3290)) * (1.0 - (_3289 * _3289))));
                        float _3298 = _3297 * _3297;
                        float _3299 = _3298 * _3298;
                        float _3300 = _3279 + _3244;
                        float _3301 = _3280 + _3245;
                        float _3302 = _3281 + _3246;
                        float _3306 = inversesqrt(dot(vec3(_3300, _3301, _3302), vec3(_3300, _3301, _3302)));
                        float _3310 = dot(vec3(_998, _1001, _1004), vec3(_3279, _3280, _3281));
                        float _4645 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                        float _3313 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
                        float _3314 = dot(vec3(_998, _1001, _1004), vec3(_3306 * _3300, _3306 * _3301, _3306 * _3302));
                        float _4656 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                        float _3321 = ((_3317 * _3317) * (_3299 + (-1.0))) + 1.0;
                        float _3322 = _3257 * _3298;
                        float _3323 = _3322 * _3322;
                        float _3326 = ((1.0 - _3323) * _3247) + _3323;
                        float _4667 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                        float _3327 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
                        float _3328 = 1.0 - _3298;
                        float _3338 = (0.5 / (((_3327 * ((_3313 * _3328) + _3298)) + 9.9999999392252902907785028219223e-09) + (((_3327 * _3328) + _3298) * _3313))) * _3327;
                        float _4678 = isnan(0.0) ? _3338 : (isnan(_3338) ? 0.0 : max(_3338, 0.0));
                        float _3349 = (((_3299 * 3.1415927410125732421875) * (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) / ((_3321 * _3321) * ((_3264 * 2.1991131305694580078125) + 3.141590118408203125))) * _3253;
                        _3106 = (_3268 * _3216.x) + _3174;
                        _3107 = (_3268 * _3216.y) + _3175;
                        _3108 = (_3268 * _3216.z) + _3176;
                        _3103 = (_3349 * _3233.x) + _3171;
                        _3104 = (_3349 * _3233.y) + _3172;
                        _3105 = (_3349 * _3233.z) + _3173;
                        if (_3178 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3171 = _3103;
                            _3172 = _3104;
                            _3173 = _3105;
                            _3174 = _3106;
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3178;
                        }
                    }
                    frontier_phi_61_pred = _3103;
                    frontier_phi_61_pred_1 = _3108;
                    frontier_phi_61_pred_2 = _3107;
                    frontier_phi_61_pred_3 = _3106;
                    frontier_phi_61_pred_4 = _3105;
                    frontier_phi_61_pred_5 = _3104;
                }
                _2904 = frontier_phi_61_pred;
                _2914 = frontier_phi_61_pred_1;
                _2912 = frontier_phi_61_pred_2;
                _2910 = frontier_phi_61_pred_3;
                _2908 = frontier_phi_61_pred_4;
                _2906 = frontier_phi_61_pred_5;
                uint _3054 = _3053 + 1u;
                if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3047 = _2904;
                    _3048 = _2906;
                    _3049 = _2908;
                    _3050 = _2910;
                    _3051 = _2912;
                    _3052 = _2914;
                    _3053 = _3054;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2903 = _2904;
            _2905 = _2906;
            _2907 = _2908;
            _2909 = _2910;
            _2911 = _2912;
            _2913 = _2914;
        }
        uvec4 _2917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2918 = _2917.z;
        uint _2920 = (_2918 >> 8u) & 15u;
        float _3015;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        if (((4294967295u << _2920) & _2802) == 0u)
        {
            _3015 = _2903;
            _3017 = _2905;
            _3019 = _2907;
            _3021 = _2909;
            _3023 = _2911;
            _3025 = _2913;
        }
        else
        {
            float _3040 = inversesqrt(dot(vec3(_2756, _2757, _2758), vec3(_2756, _2757, _2758)));
            float _3041 = _3040 * _2756;
            float _3042 = _3040 * _2757;
            float _3043 = _3040 * _2758;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2920 < ((_2918 >> 12u) & 15u))
            {
                float _3016;
                float _3018;
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3154 = _2903;
                float _3155 = _2905;
                float _3156 = _2907;
                float _3157 = _2909;
                float _3158 = _2911;
                float _3159 = _2913;
                uint _3160 = _2920;
                uint _3169;
                bool _3170;
                for (;;)
                {
                    _3169 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3160 << 2u)) >> 2u)).x;
                    _3170 = _3169 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3170)
                    {
                        frontier_phi_67_pred = _3157;
                        frontier_phi_67_pred_1 = _3158;
                        frontier_phi_67_pred_2 = _3159;
                        frontier_phi_67_pred_3 = _3156;
                        frontier_phi_67_pred_4 = _3155;
                        frontier_phi_67_pred_5 = _3154;
                    }
                    else
                    {
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3357;
                        float _3358;
                        float _3359;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3651;
                        float _3652;
                        float _3367 = _3154;
                        float _3368 = _3155;
                        float _3369 = _3156;
                        float _3370 = _3157;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        uint _3373 = _3169;
                        uint _3374;
                        vec4 _3399;
                        float _3400;
                        vec4 _3415;
                        vec3 _3427;
                        vec4 _3442;
                        vec4 _3457;
                        float _3503;
                        bool _3504;
                        for (;;)
                        {
                            uint _3384 = ((_3160 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3373));
                            _3374 = (_3373 + 4294967295u) & _3373;
                            uint _3386 = _3384 * 40u;
                            _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            _3400 = _3399.w;
                            uint _3402 = (_3384 * 40u) + 4u;
                            _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            uint _3417 = (_3384 * 40u) + 8u;
                            _3427 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x));
                            uint _3429 = (_3384 * 40u) + 16u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3444 = (_3384 * 40u) + 20u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3459 = (_3384 * 40u) + 24u;
                            vec4 _3472 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3459)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3459 + 3u)).x));
                            uint _3478 = (_3384 * 40u) + 28u;
                            vec4 _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3503 = fma(_2758, _3491.z, fma(_2757, _3491.y, _3491.x * _2756)) + _3491.w;
                            _3504 = !((fma(_2758, _3472.z, fma(_2757, _3472.y, _3472.x * _2756)) + _3472.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3504)
                            {
                                float _3531 = _3399.x - _2756;
                                float _3532 = _3399.y - _2757;
                                float _3533 = _3399.z - _2758;
                                float _3534 = dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533));
                                float _3537 = inversesqrt(_3534);
                                float _3538 = _3537 * _3531;
                                float _3539 = _3537 * _3532;
                                float _3540 = _3537 * _3533;
                                float _3544 = 1.0 - (_3534 / (_3400 * _3400));
                                float _4689 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3545 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                                float _3549 = sqrt(_3534) * _3415.w;
                                float _3551 = 1.39999997615814208984375 / (_3549 + 1.39999997615814208984375);
                                float _3552 = _3551 * _3551;
                                float _3555 = ((1.0 - _3552) * dot(vec3(_3538, _3539, _3540), vec3(_998, _1001, _1004))) + _3552;
                                float _3558 = _3549 * _3549;
                                float _3562 = (fma(_2758, _3442.z, fma(_2757, _3442.y, _3442.x * _2756)) + _3442.w) / _3503;
                                float _3563 = (fma(_2758, _3457.z, fma(_2757, _3457.y, _3457.x * _2756)) + _3457.w) / _3503;
                                float _3567 = 1.0 - dot(vec2(_3562, _3563), vec2(_3562, _3563));
                                float _4705 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                                float _3568 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3569 = _3568 * (((isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0))) * _3545) / ((_3558 * 0.699999988079071044921875) + 1.0));
                                float _3581 = exp2(log2(1.0 / ((_3558 * 3.5) + 5.0)) * 0.25);
                                float _3582 = 1.0 - _1073;
                                float _3589 = sqrt(1.0 - ((1.0 - (_3582 * _3582)) * (1.0 - (_3581 * _3581))));
                                float _3590 = _3589 * _3589;
                                float _3591 = _3590 * _3590;
                                float _3592 = _3538 - _3041;
                                float _3593 = _3539 - _3042;
                                float _3594 = _3540 - _3043;
                                float _3598 = inversesqrt(dot(vec3(_3592, _3593, _3594), vec3(_3592, _3593, _3594)));
                                float _3602 = dot(vec3(_998, _1001, _1004), vec3((-0.0) - _3041, (-0.0) - _3042, (-0.0) - _3043));
                                float _4716 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                                float _3605 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
                                float _3606 = dot(vec3(_998, _1001, _1004), vec3(_3598 * _3592, _3598 * _3593, _3598 * _3594));
                                float _4727 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                                float _3609 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
                                float _3613 = ((_3609 * _3609) * (_3591 + (-1.0))) + 1.0;
                                float _3614 = _3551 * _3590;
                                float _3615 = _3614 * _3614;
                                float _3621 = ((1.0 - _3615) * dot(vec3(_998, _1001, _1004), vec3(_3538, _3539, _3540))) + _3615;
                                float _4738 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3622 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3623 = 1.0 - _3590;
                                float _3633 = (0.5 / (((_3622 * ((_3605 * _3623) + _3590)) + 9.9999999392252902907785028219223e-09) + (((_3622 * _3623) + _3590) * _3605))) * _3622;
                                float _4749 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3643 = (_3568 * _3545) * (((_3591 * 3.1415927410125732421875) * (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0)))) / ((_3613 * _3613) * ((_3558 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3643 * _3427.x;
                                frontier_phi_73_pred_1 = _3643 * _3427.y;
                                frontier_phi_73_pred_2 = _3569 * _3415.z;
                                frontier_phi_73_pred_3 = _3569 * _3415.y;
                                frontier_phi_73_pred_4 = _3569 * _3415.x;
                                frontier_phi_73_pred_5 = _3643 * _3427.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3647 = frontier_phi_73_pred;
                            _3648 = frontier_phi_73_pred_1;
                            _3652 = frontier_phi_73_pred_2;
                            _3651 = frontier_phi_73_pred_3;
                            _3650 = frontier_phi_73_pred_4;
                            _3649 = frontier_phi_73_pred_5;
                            _3357 = _3650 + _3370;
                            _3358 = _3651 + _3371;
                            _3359 = _3652 + _3372;
                            _3354 = _3647 + _3367;
                            _3355 = _3648 + _3368;
                            _3356 = _3649 + _3369;
                            if (_3374 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3367 = _3354;
                                _3368 = _3355;
                                _3369 = _3356;
                                _3370 = _3357;
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3374;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3357;
                        frontier_phi_67_pred_1 = _3358;
                        frontier_phi_67_pred_2 = _3359;
                        frontier_phi_67_pred_3 = _3356;
                        frontier_phi_67_pred_4 = _3355;
                        frontier_phi_67_pred_5 = _3354;
                    }
                    _3022 = frontier_phi_67_pred;
                    _3024 = frontier_phi_67_pred_1;
                    _3026 = frontier_phi_67_pred_2;
                    _3020 = frontier_phi_67_pred_3;
                    _3018 = frontier_phi_67_pred_4;
                    _3016 = frontier_phi_67_pred_5;
                    uint _3161 = _3160 + 1u;
                    if (_3161 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3154 = _3016;
                        _3155 = _3018;
                        _3156 = _3020;
                        _3157 = _3022;
                        _3158 = _3024;
                        _3159 = _3026;
                        _3160 = _3161;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3024;
                frontier_phi_55_56_ladder_1 = _3026;
                frontier_phi_55_56_ladder_2 = _3022;
                frontier_phi_55_56_ladder_3 = _3020;
                frontier_phi_55_56_ladder_4 = _3018;
                frontier_phi_55_56_ladder_5 = _3016;
            }
            else
            {
                frontier_phi_55_56_ladder = _2911;
                frontier_phi_55_56_ladder_1 = _2913;
                frontier_phi_55_56_ladder_2 = _2909;
                frontier_phi_55_56_ladder_3 = _2907;
                frontier_phi_55_56_ladder_4 = _2905;
                frontier_phi_55_56_ladder_5 = _2903;
            }
            _3015 = frontier_phi_55_56_ladder_5;
            _3017 = frontier_phi_55_56_ladder_4;
            _3019 = frontier_phi_55_56_ladder_3;
            _3021 = frontier_phi_55_56_ladder_2;
            _3023 = frontier_phi_55_56_ladder;
            _3025 = frontier_phi_55_56_ladder_1;
        }
        float _3030 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _2815 = (_3030 * _3021) + _2248;
        _2817 = (_3030 * _3023) + _2250;
        _2819 = (_3030 * _3025) + _2252;
        _2821 = ((_3015 * _1041) * _3030) + _2596;
        _2823 = ((_3017 * _1043) * _3030) + _2598;
        _2825 = ((_3019 * _1044) * _3030) + _2600;
    }
    else
    {
        _2815 = _2248;
        _2817 = _2250;
        _2819 = _2252;
        _2821 = _2596;
        _2823 = _2598;
        _2825 = _2600;
    }
    float _4765 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4776 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _4787 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    uint _2845 = _281 + 6u;
    float _2853 = _979 / cbSceneParam._m0[86u].x;
    float _2854 = _980 / cbSceneParam._m0[86u].y;
    vec4 _2868 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, (log2((isnan(cbSceneParam._m0[77u].w) ? _914 : (isnan(_914) ? cbSceneParam._m0[77u].w : min(_914, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2870 = _2868.x;
    float _2871 = _2868.y;
    float _2872 = _2868.z;
    float _2873 = _2868.w;
    float _2965;
    float _2967;
    float _2969;
    float _2971;
    if (_914 > cbSceneParam._m0[78u].w)
    {
        float _2928 = isnan(_914) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _914 : min(cbSceneParam._m0[80u].w, _914));
        float _2929 = _2928 / _914;
        float _2940 = _2929 * _964;
        float _2941 = _965 * _2929;
        float _2942 = (-0.0) - _2941;
        float _2943 = _2929 * _966;
        float _2945 = (cbSceneParam._m0[77u].w * _2942) / _2928;
        float _2946 = _2945 + cbSceneParam._m0[79u].w;
        float _2947 = cbSceneParam._m0[79u].w - _2941;
        float _2953 = sqrt(((_2940 * _2940) + (_2941 * _2941)) + (_2943 * _2943));
        float _2956 = (1.0 - (cbSceneParam._m0[77u].w / _2928)) * _2953;
        float _2961 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2963 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3116;
        if (abs((_2942 - _2945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3116 = ((((_2946 > 0.0) ? exp2(_2961 * _2946) : (2.0 - exp2(_2963 * _2946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2956;
        }
        else
        {
            float _3076 = 1.0 / cbSceneParam._m0[80u].x;
            float _3077 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : max(_2946, _2947));
            float _3078 = isnan(_2947) ? _2946 : (isnan(_2946) ? _2947 : min(_2946, _2947));
            float _3087 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : min(_3077, 0.0));
            float _3088 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : min(_3078, 0.0));
            _3116 = ((abs(_2953 / _2942) * cbSceneParam._m0[80u].y) * ((((_3087 - _3088) * 2.0) - ((exp2(_2961 * (isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0)))) - exp2(_2961 * (isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0))))) * _3076)) - ((exp2(_2963 * _3087) - exp2(_2963 * _3088)) * _3076))) + (_2956 * cbSceneParam._m0[80u].z);
        }
        vec4 _3118 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2853, _2854, 1.0), 0.0);
        float _3127 = exp2((_3116 * (-1.44269502162933349609375)) * (1.0 - _3118.w));
        float _3128 = log2(_3127);
        float _3144 = log2(_2873);
        _2965 = (exp2(_3144 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].x)) * _3118.x) / cbSceneParam._m0[78u].x)) + _2870;
        _2967 = (exp2(_3144 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].y)) * _3118.y) / cbSceneParam._m0[78u].y)) + _2871;
        _2969 = (exp2(_3144 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3128 * cbSceneParam._m0[78u].z)) * _3118.z) / cbSceneParam._m0[78u].z)) + _2872;
        _2971 = _3127 * _2873;
    }
    else
    {
        _2965 = _2870;
        _2967 = _2871;
        _2969 = _2872;
        _2971 = _2873;
    }
    float _2983 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2984 = _2983 == 3.0;
    float _2985 = log2(_2971);
    float _2992 = exp2(_2985 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0))) * (_2815 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1057))) + ((_2821 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _2993 = exp2(_2985 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0))) * (_2817 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1057))) + ((_2823 + ((isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _2994 = exp2(_2985 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2819 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1057))) + ((_2825 + ((isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _3003 = (_2983 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3003 * (_2984 ? _2992 : (_2992 + (cbSceneParam._m0[72u].w * _2965)));
    SV_Target.y = _3003 * (_2984 ? _2993 : (_2993 + (cbSceneParam._m0[72u].w * _2967)));
    SV_Target.z = _3003 * (_2984 ? _2994 : (_2994 + (cbSceneParam._m0[72u].w * _2969)));
    SV_Target.w = cbInstanceData._m0[_2845].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2845].w;
}


