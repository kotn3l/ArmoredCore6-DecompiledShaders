#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1307;
float _3970;
float _3971;
float _3972;
float _3973;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _218 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _219 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _220 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _226 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _227 = _226 * _218;
    float _228 = _226 * _219;
    float _229 = _226 * _220;
    float _233 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _234 = _233 * NORMAL.x;
    float _235 = _233 * NORMAL.y;
    float _236 = _233 * NORMAL.z;
    float _240 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _241 = _240 * TANGENT.x;
    float _242 = _240 * TANGENT.y;
    float _243 = _240 * TANGENT.z;
    uint _246 = uint(roundEven(NORMAL.w)) * 13u;
    uint _252 = _246 + 1u;
    uint _256 = _246 + 2u;
    float _265 = sqrt(((cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x) + (cbInstanceData._m0[_246].x * cbInstanceData._m0[_246].x)) + (cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x));
    float _266 = _265 * TEXCOORD.z;
    float _267 = _265 * TEXCOORD.w;
    vec4 _286 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _310.x * cbMtdParam._m0[11u].x;
    float _316 = _310.y * cbMtdParam._m0[11u].y;
    float _317 = _310.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _266) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    vec4 _389 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _391 = _389.x;
    float _403 = dot(vec4(_391, _389.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _420 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_391 - _403) * cbMtdParam._m0[23u].w) + _403) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3982 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _434 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _286.x) * ((_421 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315);
    float _437 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _286.y) * ((_421 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316);
    float _440 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _286.z) * ((_421 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317);
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _266) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _267) + cbTextureTilingScale._m0[14u].w));
    vec4 _479 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _266) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _267) + cbTextureTilingScale._m0[4u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _498 = _496.x;
    float _499 = _496.y;
    float _500 = _496.z;
    float _509 = ((_479.z - _500) * _421) + _500;
    float _512 = ((((_479.x - _498) * _421) + _498) * 2.0) + (-1.0);
    float _514 = ((((_479.y - _499) * _421) + _499) * 2.0) + (-1.0);
    float _515 = dot(vec2(_512, _514), vec2(_512, _514));
    float _3993 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    vec4 _536 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _548 = (((_536.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _512;
    float _549 = (((_536.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _514;
    float _552 = fma(_520, _234, fma(_549, _241, _548 * _227));
    float _555 = fma(_520, _235, fma(_549, _242, _548 * _228));
    float _558 = fma(_520, _236, fma(_549, _243, _548 * _229));
    float _562 = inversesqrt(dot(vec3(_552, _555, _558), vec3(_552, _555, _558)));
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _266) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _601 = (cbMtdParam._m0[19u].x + dot(vec4(_562 * _552, _562 * _555, _562 * _558, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_591 - _592) * cbMtdParam._m0[24u].z) + _592) * cbMtdParam._m0[21u].z);
    float _4004 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _602 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _609 = (_602 * ((_459.x * cbMtdParam._m0[18u].x) - _434)) + _434;
    float _610 = (_602 * ((_459.y * cbMtdParam._m0[18u].y) - _437)) + _437;
    float _611 = (_602 * ((_459.z * cbMtdParam._m0[18u].z) - _440)) + _440;
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _639 = _637.x;
    float _656 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _266) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w)).x - _639) * _421) + _639;
    float _660 = ((_623.x - _656) * cbMtdParam._m0[19u].z) + _656;
    float _662 = _660 - (_660 * _602);
    float _666 = (cbMtdParam._m0[19u].w * (_536.z - _509)) + _509;
    vec4 _679 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _266) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _267) + cbTextureTilingScale._m0[15u].w));
    float _686 = (_679.x * 2.0) + (-1.0);
    float _687 = (_679.y * 2.0) + (-1.0);
    float _688 = dot(vec2(_686, _687), vec2(_686, _687));
    float _4015 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _696 = ((_679.z - _666) * _602) + _666;
    float _706 = ((sqrt(1.0 - (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) - _520) * _602) + _520;
    float _709 = (((_686 - _548) * _602) + _548) + (cbMtdParam._m0[21u].x * _548);
    float _710 = (((_687 - _549) * _602) + _549) + (cbMtdParam._m0[21u].x * _549);
    float _712 = cbMtdParam._m0[22u].x + _536.w;
    float _715 = fma(_706, _234, fma(_710, _241, _709 * _227));
    float _718 = fma(_706, _235, fma(_710, _242, _709 * _228));
    float _721 = fma(_706, _236, fma(_710, _243, _709 * _229));
    float _725 = inversesqrt(dot(vec3(_715, _718, _721), vec3(_715, _718, _721)));
    float _726 = _725 * _715;
    float _727 = _725 * _718;
    float _728 = _725 * _721;
    float _4026 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _729 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _4037 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4048 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _4059 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _4070 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _4081 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _734 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _748 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _799 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _789);
    float _800 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _789);
    float _801 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _789);
    float _805 = inversesqrt(dot(vec3(_799, _800, _801), vec3(_799, _800, _801)));
    float _806 = _799 * _805;
    float _807 = _800 * _805;
    float _808 = _801 * _805;
    vec4 _813 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _815 = _813.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _987 = sqrt(((_799 * _799) + (_800 * _800)) + (_801 * _801));
        float _993 = (cbMatDynParam._m0[5u].x * _987) + cbMatDynParam._m0[5u].y;
        float _4092 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _998 = (cbMatDynParam._m0[5u].z * _987) + cbMatDynParam._m0[5u].w;
        float _4103 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) - _994)) + _994) < ((_815 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _826 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _827 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _845 = fma(_728, cbSceneParam._m0[5u].z, fma(_727, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _726));
    float _848 = fma(_728, cbSceneParam._m0[6u].z, fma(_727, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _726));
    float _851 = fma(_728, cbSceneParam._m0[7u].z, fma(_727, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _726));
    uint _864 = _246 + 9u;
    uint _865 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_865].z;
    float _4114 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _4125 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
    float _4136 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
    float _877 = 1.0 - _734;
    float _878 = _874 * _877;
    float _879 = _875 * _877;
    float _880 = _876 * _877;
    float _885 = (_874 + (-0.039999999105930328369140625)) * _734;
    float _886 = (_875 + (-0.039999999105930328369140625)) * _734;
    float _887 = (_876 + (-0.039999999105930328369140625)) * _734;
    float _888 = _885 + 0.039999999105930328369140625;
    float _890 = _886 + 0.039999999105930328369140625;
    float _891 = _887 + 0.039999999105930328369140625;
    vec4 _900 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _826, cbSceneParam._m0[86u].y * _827));
    float _904 = ((isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * TEXCOORD_5.w) * _900.x;
    float _905 = dot(vec3(_726, _727, _728), vec3(_806, _807, _808));
    float _908 = _905 * 2.0;
    float _912 = (_908 * _726) - _806;
    float _913 = (_908 * _727) - _807;
    float _914 = (_908 * _728) - _808;
    float _918 = abs(dot(vec3(_806, _807, _808), vec3(_726, _727, _728)));
    float _4147 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _920 = sqrt(_729);
    float _933 = exp2((_920 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_920 * 3.0));
    float _939 = (1.0 - _933) * ((_920 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _940 = _933 * _920;
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1306;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1031 = fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968));
        float _1035 = fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968));
        float _1039 = fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968));
        float _1064 = _968 + _726;
        float _1065 = _972 + _727;
        float _1066 = _976 + _728;
        float _1076 = fma(_1066, cbModelParam._m0[26u].z, fma(_1065, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1064)) - _1031;
        float _1077 = fma(_1066, cbModelParam._m0[27u].z, fma(_1065, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1064)) - _1035;
        float _1078 = fma(_1066, cbModelParam._m0[28u].z, fma(_1065, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1064)) - _1039;
        float _1082 = inversesqrt(dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078)));
        float _1095 = ((_1082 * _1076) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1031 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1082 * _1077) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1035 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1082 * _1078) / cbModelParam._m0[34u].z) + ((((((_1039 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1095, _1096, _1097), 0.0);
        float _1134 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1100.x + (-0.5));
        float _1136 = _1134 * (_1100.y + (-0.5));
        float _1137 = _1134 * (_1100.z + (-0.5));
        float _1144 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1107.x + (-0.5));
        float _1146 = _1144 * (_1107.y + (-0.5));
        float _1147 = _1144 * (_1107.z + (-0.5));
        float _1154 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1114.x + (-0.5));
        float _1156 = _1154 * (_1114.y + (-0.5));
        float _1157 = _1154 * (_1114.z + (-0.5));
        float _1164 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1121.x + (-0.5));
        float _1166 = _1164 * (_1121.y + (-0.5));
        float _1167 = _1164 * (_1121.z + (-0.5));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = _1135 * 0.5;
        float _1172 = _1145 * 0.5;
        float _1173 = _1155 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1188 = (dot(vec3(_726, _727, _728), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1198 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _4195 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1200 + 1.0))) + _1205) * _1168;
        float _1215 = _1136 * 0.5;
        float _1216 = _1146 * 0.5;
        float _1217 = _1156 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_726, _727, _728), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _4228 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1242 + 1.0))) + _1247) * _1169;
        float _1257 = _1137 * 0.5;
        float _1258 = _1147 * 0.5;
        float _1259 = _1157 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_726, _727, _728), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _4239 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4250 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _4261 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (_1284 + 1.0))) + _1289) * _1170;
        _1306 = _1137;
        _1308 = _1136;
        _1309 = _1135;
        _1310 = _1147;
        _1311 = _1146;
        _1312 = _1145;
        _1313 = _1157;
        _1314 = _1156;
        _1315 = _1155;
        _1316 = _1170;
        _1317 = _1169;
        _1318 = _1168;
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _1307;
        _1308 = _1307;
        _1309 = _1307;
        _1310 = _1307;
        _1311 = _1307;
        _1312 = _1307;
        _1313 = _1307;
        _1314 = _1307;
        _1315 = _1307;
        _1316 = _1307;
        _1317 = _1307;
        _1318 = _1307;
        _1319 = 0.0;
        _1320 = 0.0;
        _1321 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968));
        float _1353 = fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968));
        float _1357 = fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968));
        float _1380 = _968 + _726;
        float _1381 = _972 + _727;
        float _1382 = _976 + _728;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_726, _727, _728), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _4324 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_726, _727, _728), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _4357 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_726, _727, _728), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _4368 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4379 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _4390 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1307;
        _1619 = _1307;
        _1620 = _1307;
        _1621 = _1307;
        _1622 = _1307;
        _1623 = _1307;
        _1624 = _1307;
        _1625 = _1307;
        _1626 = _1307;
        _1627 = _1307;
        _1628 = _1307;
        _1629 = _1307;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1319)) + _1319;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1320)) + _1320;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1321)) + _1321;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _912 * 0.5;
    float _1687 = _913 * 0.5;
    float _1688 = _914 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1306, _1310, _1313, _1316));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _729);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1835;
    float _1837;
    float _1839;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1802 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1806 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1810 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1813 = fma(_914, cbModelParam._m0[13u].z, fma(_913, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _912));
        float _1816 = fma(_914, cbModelParam._m0[14u].z, fma(_913, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _912));
        float _1819 = fma(_914, cbModelParam._m0[15u].z, fma(_913, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _912));
        float _1847;
        if (_1813 > 0.0)
        {
            _1847 = abs((1.0 - _1802) / _1813);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1813 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1802 + 1.0) / _1813);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1847 = frontier_phi_17_15_ladder;
        }
        float _2018;
        if (_1816 > 0.0)
        {
            _2018 = abs((1.0 - _1806) / _1816);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1806 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2018 = frontier_phi_26_22_ladder;
        }
        float _2313;
        if (_1819 > 0.0)
        {
            _2313 = abs((1.0 - _1810) / _1819);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1810 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2313 = frontier_phi_38_33_ladder;
        }
        float _2315 = isnan(_2018) ? _1847 : (isnan(_1847) ? _2018 : min(_1847, _2018));
        float _2316 = isnan(_2313) ? _2315 : (isnan(_2315) ? _2313 : min(_2315, _2313));
        float _2320 = (_2316 * _1813) + _1802;
        float _2321 = (_2316 * _1816) + _1806;
        float _2322 = (_2316 * _1819) + _1810;
        float _2323 = _2316 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2323;
        float _2327 = _2323 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 > _2327) || ((_2321 < _2325) || ((_2320 < _2325) || (_2320 > _2327))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2467 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2322, cbModelParam._m0[9u].z, fma(_2321, cbModelParam._m0[9u].y, _2320 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2322, cbModelParam._m0[10u].z, fma(_2321, cbModelParam._m0[10u].y, _2320 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2322, cbModelParam._m0[11u].z, fma(_2321, cbModelParam._m0[11u].y, _2320 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_16_38_ladder = _2467.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2467.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2467.x * cbModelParam._m0[1u].y;
        }
        _1835 = frontier_phi_16_38_ladder_2;
        _1837 = frontier_phi_16_38_ladder_1;
        _1839 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1823 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_912, _913, _914), _1755);
        _1835 = _1823.x * cbModelParam._m0[1u].y;
        _1837 = _1823.y * cbModelParam._m0[1u].y;
        _1839 = _1823.z * cbModelParam._m0[1u].y;
    }
    float _1843 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _729);
    float _1844 = isnan(_1843) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1843 : min(cbModelParam._m0[25u].w, _1843));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_914, cbModelParam._m0[21u].z, fma(_913, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _912));
        float _1911 = fma(_914, cbModelParam._m0[22u].z, fma(_913, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _912));
        float _1914 = fma(_914, cbModelParam._m0[23u].z, fma(_913, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _912));
        float _2023;
        if (_1908 > 0.0)
        {
            _2023 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2023 = frontier_phi_28_24_ladder;
        }
        float _2340;
        if (_1911 > 0.0)
        {
            _2340 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2340 = frontier_phi_40_35_ladder;
        }
        float _2678;
        if (_1914 > 0.0)
        {
            _2678 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2678 = frontier_phi_50_47_ladder;
        }
        float _2680 = isnan(_2340) ? _2023 : (isnan(_2023) ? _2340 : min(_2023, _2340));
        float _2681 = isnan(_2678) ? _2680 : (isnan(_2680) ? _2678 : min(_2680, _2678));
        float _2685 = (_2681 * _1908) + _1897;
        float _2686 = (_2681 * _1911) + _1901;
        float _2687 = (_2681 * _1914) + _1905;
        float _2688 = _2681 * 9.9999997473787516355514526367188e-05;
        float _2689 = (-1.0) - _2688;
        float _2691 = _2688 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2687 > _2691) || ((_2687 < _2689) || ((_2686 > _2691) || ((_2686 < _2689) || ((_2685 < _2689) || (_2685 > _2691))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2809 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2687, cbModelParam._m0[17u].z, fma(_2686, cbModelParam._m0[17u].y, _2685 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2687, cbModelParam._m0[18u].z, fma(_2686, cbModelParam._m0[18u].y, _2685 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2687, cbModelParam._m0[19u].z, fma(_2686, cbModelParam._m0[19u].y, _2685 * cbModelParam._m0[19u].x))), _1844);
            frontier_phi_25_50_ladder = _2809.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2809.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2809.x * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_25_50_ladder_2;
        _1935 = frontier_phi_25_50_ladder_1;
        _1937 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_912, _913, _914), _1844);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1950 = (((_939 * _888) + _940) * _904) * ((cbModelParam._m0[1u].w * (_1933 - _1835)) + _1835);
    float _1952 = (((_939 * _890) + _940) * _904) * ((cbModelParam._m0[1u].w * (_1935 - _1837)) + _1837);
    float _1954 = (((_939 * _891) + _940) * _904) * ((cbModelParam._m0[1u].w * (_1937 - _1839)) + _1839);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1952, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1952, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1952, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2010 = _1997 / _2009;
    float _2011 = _2001 / _2009;
    float _2012 = _2005 / _2009;
    float _2159;
    float _2160;
    float _2161;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2039 = ((uint(_2012 > cbSceneParam._m0[59u].y) + uint(_2012 > cbSceneParam._m0[59u].x)) + uint(_2012 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2040 = _2039 + 43u;
        uint _2048 = _2039 + 44u;
        uint _2056 = _2039 + 45u;
        uint _2064 = _2039 + 46u;
        float _2075 = fma(_2009, cbSceneParam._m0[_2040].w, fma(_2005, cbSceneParam._m0[_2040].z, fma(_2001, cbSceneParam._m0[_2040].y, _1997 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2009, cbSceneParam._m0[_2048].w, fma(_2005, cbSceneParam._m0[_2048].z, fma(_2001, cbSceneParam._m0[_2048].y, _1997 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2009, cbSceneParam._m0[_2064].w, fma(_2005, cbSceneParam._m0[_2064].z, fma(_2001, cbSceneParam._m0[_2064].y, _1997 * cbSceneParam._m0[_2064].x)));
        float _2092 = cbSceneParam._m0[33u].z * _2087;
        float _2094 = cbSceneParam._m0[33u].w * _2087;
        float _2097 = fma(_2009, cbSceneParam._m0[_2056].w, fma(_2005, cbSceneParam._m0[_2056].z, fma(_2001, cbSceneParam._m0[_2056].y, _1997 * cbSceneParam._m0[_2056].x))) / _2087;
        float _2145 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
        float _4516 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2152 = (isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 + _2075) / _2087, (_2094 + _2079) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2075) / _2087, (_2079 - _2092) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2092) / _2087, (_2079 - _2094) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2094) / _2087, (_2092 + _2079) / _2087), _2097), 0.0)).x), vec4(0.25)));
        _2159 = 1.0 - (_2152 * cbSceneParam._m0[34u].x);
        _2160 = 1.0 - (_2152 * cbSceneParam._m0[34u].y);
        _2161 = 1.0 - (_2152 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2159 = 1.0;
        _2160 = 1.0;
        _2161 = 1.0;
    }
    float _2225;
    float _2227;
    float _2229;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2213 = fma(_2009, cbSceneParam._m0[63u].w, fma(_2005, cbSceneParam._m0[63u].z, fma(_2001, cbSceneParam._m0[63u].y, _1997 * cbSceneParam._m0[63u].x)));
        float _2214 = fma(_2009, cbSceneParam._m0[60u].w, fma(_2005, cbSceneParam._m0[60u].z, fma(_2001, cbSceneParam._m0[60u].y, _1997 * cbSceneParam._m0[60u].x))) / _2213;
        float _2215 = fma(_2009, cbSceneParam._m0[61u].w, fma(_2005, cbSceneParam._m0[61u].z, fma(_2001, cbSceneParam._m0[61u].y, _1997 * cbSceneParam._m0[61u].x))) / _2213;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2214 >= cbSceneParam._m0[64u].x) && (_2215 >= cbSceneParam._m0[64u].y)) && (_2214 <= cbSceneParam._m0[64u].z)) && (_2215 <= cbSceneParam._m0[64u].w))
        {
            float _2353 = fma(_2009, cbSceneParam._m0[62u].w, fma(_2005, cbSceneParam._m0[62u].z, fma(_2001, cbSceneParam._m0[62u].y, _1997 * cbSceneParam._m0[62u].x))) / _2213;
            float _2357 = isnan(cbSceneParam._m0[41u].w) ? _2353 : (isnan(_2353) ? cbSceneParam._m0[41u].w : max(_2353, cbSceneParam._m0[41u].w));
            float _2400 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
            float _4532 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
            float _2407 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2214, cbSceneParam._m0[33u].w + _2215), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2214, _2215 - cbSceneParam._m0[33u].z), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].z, _2215 - cbSceneParam._m0[33u].w), _2357), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2215), _2357), 0.0)).x), vec4(0.25)));
            float _2411 = 1.0 - (_2407 * cbSceneParam._m0[34u].x);
            float _2412 = 1.0 - (_2407 * cbSceneParam._m0[34u].y);
            float _2413 = 1.0 - (_2407 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2413) ? _2161 : (isnan(_2161) ? _2413 : min(_2161, _2413));
            frontier_phi_37_36_ladder_1 = isnan(_2412) ? _2160 : (isnan(_2160) ? _2412 : min(_2160, _2412));
            frontier_phi_37_36_ladder_2 = isnan(_2411) ? _2159 : (isnan(_2159) ? _2411 : min(_2159, _2411));
        }
        else
        {
            frontier_phi_37_36_ladder = _2161;
            frontier_phi_37_36_ladder_1 = _2160;
            frontier_phi_37_36_ladder_2 = _2159;
        }
        _2225 = frontier_phi_37_36_ladder_2;
        _2227 = frontier_phi_37_36_ladder_1;
        _2229 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2225 = _2159;
        _2227 = _2160;
        _2229 = _2161;
    }
    uvec4 _2234 = floatBitsToUint(cbInstanceData._m0[_246 + 5u]);
    uint _2236 = _2234.x * 14u;
    uint _2237 = _2236 + 13u;
    float _2244 = _904 + (-1.0);
    float _2249 = (cbLight._m0[_2237].x * _2244) + 1.0;
    float _2250 = (cbLight._m0[_2237].y * _2244) + 1.0;
    float _2251 = (cbLight._m0[_2237].z * _2244) + 1.0;
    float _2252 = (cbLight._m0[_2237].w * _2244) + 1.0;
    uint _2253 = _2236 + 5u;
    float _2259 = isnan(1.0) ? _2250 : (isnan(_2250) ? 1.0 : min(_2250, 1.0));
    uint _2263 = _2236 + 4u;
    float _2272 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
    uint _2276 = _2236 | 1u;
    float _2287 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_726, _727, _728));
    float _2290 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_726, _727, _728));
    float _4568 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _4579 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2295 = (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * 0.3183098733425140380859375;
    float _2297 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * 0.3183098733425140380859375;
    float _2304 = ((cbLight._m0[_2253].x * _2259) * _2297) + (((cbLight._m0[_2263].x * _2225) * _2272) * _2295);
    float _2305 = ((_2259 * cbLight._m0[_2253].y) * _2297) + (((cbLight._m0[_2263].y * _2227) * _2272) * _2295);
    float _2306 = ((_2259 * cbLight._m0[_2253].z) * _2297) + (((cbLight._m0[_2263].z * _2229) * _2272) * _2295);
    uvec4 _2310 = floatBitsToUint(cbLight._m0[_2236 + 12u]);
    bool _2312 = _2310.x == 0u;
    float _2414;
    float _2416;
    float _2418;
    if (_2312)
    {
        _2414 = _2304;
        _2416 = _2305;
        _2418 = _2306;
    }
    else
    {
        uint _2422 = _2236 + 6u;
        float _2438 = (dot(vec3(cbLight._m0[_2236 + 2u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2439 = _2438 * _2438;
        float _4590 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2440 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2441 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2414 = (((cbLight._m0[_2422].x * 0.3183098733425140380859375) * _2440) * _2441) + _2304;
        _2416 = (((cbLight._m0[_2422].y * 0.3183098733425140380859375) * _2440) * _2441) + _2305;
        _2418 = (((cbLight._m0[_2422].z * 0.3183098733425140380859375) * _2440) * _2441) + _2306;
    }
    bool _2421 = _2310.y == 0u;
    float _2476;
    float _2478;
    float _2480;
    if (_2421)
    {
        _2476 = _2414;
        _2478 = _2416;
        _2480 = _2418;
    }
    else
    {
        uint _2649 = _2236 + 7u;
        float _2665 = (dot(vec3(cbLight._m0[_2236 + 3u].xyz), vec3(_726, _727, _728)) * 0.5) + 0.5;
        float _2666 = _2665 * _2665;
        float _4606 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2667 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _2668 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2476 = (((cbLight._m0[_2649].x * 0.3183098733425140380859375) * _2667) * _2668) + _2414;
        _2478 = (((cbLight._m0[_2649].y * 0.3183098733425140380859375) * _2667) * _2668) + _2416;
        _2480 = (((cbLight._m0[_2649].z * 0.3183098733425140380859375) * _2667) * _2668) + _2418;
    }
    uint _2483 = _2236 + 8u;
    float _2496 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _729) * 0.949999988079071044921875);
    float _2497 = _2496 * _2496;
    float _2498 = cbLight._m0[_2236].x + _806;
    float _2499 = cbLight._m0[_2236].y + _807;
    float _2500 = cbLight._m0[_2236].z + _808;
    float _2504 = inversesqrt(dot(vec3(_2498, _2499, _2500), vec3(_2498, _2499, _2500)));
    float _2505 = _2504 * _2498;
    float _2506 = _2504 * _2499;
    float _2507 = _2504 * _2500;
    float _2508 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2236].xyz));
    float _4622 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2511 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _4633 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _2512 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
    float _2513 = dot(vec3(_726, _727, _728), vec3(_2505, _2506, _2507));
    float _4644 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
    float _2517 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2505, _2506, _2507));
    float _4655 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2521 = _2497 * _2497;
    float _2525 = ((_2516 * _2516) * (_2521 + (-1.0))) + 1.0;
    float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0)))) * 5.0);
    float _2534 = 0.959999978542327880859375 - _885;
    float _2536 = 0.959999978542327880859375 - _886;
    float _2537 = 0.959999978542327880859375 - _887;
    float _2544 = 1.0 - _2497;
    float _2555 = (0.5 / (((_2512 * ((_2511 * _2544) + _2497)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2544) + _2497) * _2511))) * _2511;
    float _4666 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0))) * (_2521 / ((_2525 * _2525) * 3.141590118408203125));
    uint _2571 = _2236 + 9u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2276].w)) * _729) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2276].x + _806;
    float _2585 = cbLight._m0[_2276].y + _807;
    float _2586 = cbLight._m0[_2276].z + _808;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2276].xyz));
    float _4677 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
    float _2598 = dot(vec3(_726, _727, _728), vec3(_2591, _2592, _2593));
    float _4688 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
    float _2602 = dot(vec3(cbLight._m0[_2276].xyz), vec3(_2591, _2592, _2593));
    float _4699 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
    float _2606 = _2583 * _2583;
    float _2610 = ((_2601 * _2601) * (_2606 + (-1.0))) + 1.0;
    float _2617 = exp2(log2(1.0 - (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) * 5.0);
    float _2624 = 1.0 - _2583;
    float _2634 = (0.5 / (((_2512 * ((_2597 * _2624) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2624) + _2583) * _2597))) * _2597;
    float _4710 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
    float _2636 = (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2606 / ((_2610 * _2610) * 3.141590118408203125));
    float _2646 = (((((_2617 * _2534) + _888) * cbLight._m0[_2571].x) * _2636) * _2259) + ((((cbLight._m0[_2483].x * _2225) * ((_2533 * _2534) + _888)) * _2557) * _2272);
    float _2647 = (((((_2617 * _2536) + _890) * cbLight._m0[_2571].y) * _2636) * _2259) + ((((cbLight._m0[_2483].y * _2227) * ((_2533 * _2536) + _890)) * _2557) * _2272);
    float _2648 = (((((_2617 * _2537) + _891) * cbLight._m0[_2571].z) * _2636) * _2259) + ((((cbLight._m0[_2483].z * _2229) * ((_2533 * _2537) + _891)) * _2557) * _2272);
    float _2704;
    float _2706;
    float _2708;
    if (_2312)
    {
        _2704 = _2646;
        _2706 = _2647;
        _2708 = _2648;
    }
    else
    {
        uint _2710 = _2236 + 2u;
        uint _2714 = _2236 + 10u;
        float _2728 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2710].w)) * _729) * 0.949999988079071044921875);
        float _2729 = _2728 * _2728;
        float _2730 = cbLight._m0[_2710].x + _806;
        float _2731 = cbLight._m0[_2710].y + _807;
        float _2732 = cbLight._m0[_2710].z + _808;
        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
        float _2737 = _2736 * _2730;
        float _2738 = _2736 * _2731;
        float _2739 = _2736 * _2732;
        float _2740 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2710].xyz));
        float _4721 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2744 = dot(vec3(_726, _727, _728), vec3(_2737, _2738, _2739));
        float _4732 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2748 = dot(vec3(cbLight._m0[_2710].xyz), vec3(_2737, _2738, _2739));
        float _4743 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2752 = _2729 * _2729;
        float _2756 = ((_2747 * _2747) * (_2752 + (-1.0))) + 1.0;
        float _2763 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
        float _2770 = 1.0 - _2729;
        float _2780 = (0.5 / (((_2512 * ((_2743 * _2770) + _2729)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2770) + _2729) * _2743))) * _2743;
        float _4754 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
        float _2782 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2752 / ((_2756 * _2756) * 3.141590118408203125));
        float _2783 = isnan(1.0) ? _2251 : (isnan(_2251) ? 1.0 : min(_2251, 1.0));
        _2704 = (((((_2763 * _2534) + _888) * cbLight._m0[_2714].x) * _2782) * _2783) + _2646;
        _2706 = (((((_2763 * _2536) + _890) * cbLight._m0[_2714].y) * _2782) * _2783) + _2647;
        _2708 = (((((_2763 * _2537) + _891) * cbLight._m0[_2714].z) * _2782) * _2783) + _2648;
    }
    float _2814;
    float _2816;
    float _2818;
    if (_2421)
    {
        _2814 = _2704;
        _2816 = _2706;
        _2818 = _2708;
    }
    else
    {
        uint _2825 = _2236 + 3u;
        uint _2829 = _2236 + 11u;
        float _2843 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2825].w)) * _729) * 0.949999988079071044921875);
        float _2844 = _2843 * _2843;
        float _2845 = cbLight._m0[_2825].x + _806;
        float _2846 = cbLight._m0[_2825].y + _807;
        float _2847 = cbLight._m0[_2825].z + _808;
        float _2851 = inversesqrt(dot(vec3(_2845, _2846, _2847), vec3(_2845, _2846, _2847)));
        float _2852 = _2851 * _2845;
        float _2853 = _2851 * _2846;
        float _2854 = _2851 * _2847;
        float _2855 = dot(vec3(_726, _727, _728), vec3(cbLight._m0[_2825].xyz));
        float _4770 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2858 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2859 = dot(vec3(_726, _727, _728), vec3(_2852, _2853, _2854));
        float _4781 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2862 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
        float _2863 = dot(vec3(cbLight._m0[_2825].xyz), vec3(_2852, _2853, _2854));
        float _4792 = isnan(0.0) ? _2863 : (isnan(_2863) ? 0.0 : max(_2863, 0.0));
        float _2867 = _2844 * _2844;
        float _2871 = ((_2862 * _2862) * (_2867 + (-1.0))) + 1.0;
        float _2878 = exp2(log2(1.0 - (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0)))) * 5.0);
        float _2885 = 1.0 - _2844;
        float _2895 = (0.5 / (((_2512 * ((_2858 * _2885) + _2844)) + 9.9999999392252902907785028219223e-09) + (((_2512 * _2885) + _2844) * _2858))) * _2858;
        float _4803 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2897 = (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0))) * (_2867 / ((_2871 * _2871) * 3.141590118408203125));
        float _2898 = isnan(1.0) ? _2252 : (isnan(_2252) ? 1.0 : min(_2252, 1.0));
        _2814 = (((((_2878 * _2534) + _888) * cbLight._m0[_2829].x) * _2897) * _2898) + _2704;
        _2816 = (((((_2878 * _2536) + _890) * cbLight._m0[_2829].y) * _2897) * _2898) + _2706;
        _2818 = (((((_2878 * _2537) + _891) * cbLight._m0[_2829].z) * _2897) * _2898) + _2708;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2234.y == 0u)
    {
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _827) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _826) / _2920)));
        float _2941 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        float _3039;
        float _3041;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3031 = 0.0;
            _3033 = 0.0;
            _3035 = 0.0;
            _3037 = 0.0;
            _3039 = 0.0;
            _3041 = 0.0;
        }
        else
        {
            float _3032;
            float _3034;
            float _3036;
            float _3038;
            float _3040;
            float _3042;
            float _3184 = 0.0;
            float _3185 = 0.0;
            float _3186 = 0.0;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            uint _3190 = 0u;
            uint _3199;
            bool _3200;
            for (;;)
            {
                _3199 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                _3200 = _3199 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3200)
                {
                    frontier_phi_71_pred = _3189;
                    frontier_phi_71_pred_1 = _3188;
                    frontier_phi_71_pred_2 = _3187;
                    frontier_phi_71_pred_3 = _3186;
                    frontier_phi_71_pred_4 = _3185;
                    frontier_phi_71_pred_5 = _3184;
                }
                else
                {
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    uint _3335;
                    _3329 = _3184;
                    _3330 = _3185;
                    _3331 = _3186;
                    _3332 = _3187;
                    _3333 = _3188;
                    _3334 = _3189;
                    _3335 = _3199;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    float _3260;
                    float _3261;
                    for (;;)
                    {
                        uint _3339 = uint(findLSB(_3335)) + (_3190 << 5u);
                        uint _3336 = (_3335 + 4294967295u) & _3335;
                        uint _3341 = _3339 * 48u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3341)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3341 + 3u)).x));
                        uint _3361 = (_3339 * 48u) + 4u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 3u)).x));
                        uint _3380 = (_3339 * 48u) + 8u;
                        vec3 _3391 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x));
                        float _3395 = _3355.x - _2010;
                        float _3396 = _3355.y - _2011;
                        float _3397 = _3355.z - _2012;
                        float _3398 = dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397));
                        float _3401 = inversesqrt(_3398);
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3405 = dot(vec3(_845, _848, _851), vec3(_3402, _3403, _3404));
                        float _3410 = 1.0 - (_3398 * _3355.w);
                        float _4829 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3411 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3412 = sqrt(_3398) * _3374.w;
                        float _3415 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                        float _3416 = _3415 * _3415;
                        float _3419 = ((1.0 - _3416) * _3405) + _3416;
                        float _3422 = _3412 * _3412;
                        float _3426 = ((isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0))) * _3411) / ((_3422 * 0.699999988079071044921875) + 1.0);
                        float _3430 = (-0.0) - _2010;
                        float _3431 = (-0.0) - _2011;
                        float _3432 = (-0.0) - _2012;
                        float _3436 = inversesqrt(dot(vec3(_3430, _3431, _3432), vec3(_3430, _3431, _3432)));
                        float _3437 = _3436 * _3430;
                        float _3438 = _3436 * _3431;
                        float _3439 = _3436 * _3432;
                        float _3446 = exp2(log2(1.0 / ((_3422 * 3.5) + 5.0)) * 0.25);
                        float _3447 = 1.0 - _920;
                        float _3454 = sqrt(1.0 - ((1.0 - (_3447 * _3447)) * (1.0 - (_3446 * _3446))));
                        float _3455 = _3454 * _3454;
                        float _3456 = _3455 * _3455;
                        float _3457 = _3437 + _3402;
                        float _3458 = _3438 + _3403;
                        float _3459 = _3439 + _3404;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3467 = dot(vec3(_845, _848, _851), vec3(_3437, _3438, _3439));
                        float _4845 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3470 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3471 = dot(vec3(_845, _848, _851), vec3(_3463 * _3457, _3463 * _3458, _3463 * _3459));
                        float _4856 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3474 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3478 = ((_3474 * _3474) * (_3456 + (-1.0))) + 1.0;
                        float _3479 = _3415 * _3455;
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3405) + _3480;
                        float _4867 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3484 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3485 = 1.0 - _3455;
                        float _3495 = (0.5 / (((_3484 * ((_3470 * _3485) + _3455)) + 9.9999999392252902907785028219223e-09) + (((_3484 * _3485) + _3455) * _3470))) * _3484;
                        float _4878 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3506 = (((_3456 * 3.1415927410125732421875) * (isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0)))) / ((_3478 * _3478) * ((_3422 * 2.1991131305694580078125) + 3.141590118408203125))) * _3411;
                        _3259 = (_3426 * _3374.x) + _3332;
                        _3260 = (_3426 * _3374.y) + _3333;
                        _3261 = (_3426 * _3374.z) + _3334;
                        _3256 = (_3506 * _3391.x) + _3329;
                        _3257 = (_3506 * _3391.y) + _3330;
                        _3258 = (_3506 * _3391.z) + _3331;
                        if (_3336 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3329 = _3256;
                            _3330 = _3257;
                            _3331 = _3258;
                            _3332 = _3259;
                            _3333 = _3260;
                            _3334 = _3261;
                            _3335 = _3336;
                        }
                    }
                    frontier_phi_71_pred = _3261;
                    frontier_phi_71_pred_1 = _3260;
                    frontier_phi_71_pred_2 = _3259;
                    frontier_phi_71_pred_3 = _3258;
                    frontier_phi_71_pred_4 = _3257;
                    frontier_phi_71_pred_5 = _3256;
                }
                _3042 = frontier_phi_71_pred;
                _3040 = frontier_phi_71_pred_1;
                _3038 = frontier_phi_71_pred_2;
                _3036 = frontier_phi_71_pred_3;
                _3034 = frontier_phi_71_pred_4;
                _3032 = frontier_phi_71_pred_5;
                uint _3191 = _3190 + 1u;
                if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3184 = _3032;
                    _3185 = _3034;
                    _3186 = _3036;
                    _3187 = _3038;
                    _3188 = _3040;
                    _3189 = _3042;
                    _3190 = _3191;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3031 = _3032;
            _3033 = _3034;
            _3035 = _3036;
            _3037 = _3038;
            _3039 = _3040;
            _3041 = _3042;
        }
        uvec4 _3045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3046 = _3045.z;
        uint _3048 = (_3046 >> 8u) & 15u;
        float _3152;
        float _3154;
        float _3156;
        float _3158;
        float _3160;
        float _3162;
        if (((4294967295u << _3048) & _2951) == 0u)
        {
            _3152 = _3031;
            _3154 = _3033;
            _3156 = _3035;
            _3158 = _3037;
            _3160 = _3039;
            _3162 = _3041;
        }
        else
        {
            float _3177 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _3178 = _3177 * _2010;
            float _3179 = _3177 * _2011;
            float _3180 = _3177 * _2012;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3048 < ((_3046 >> 12u) & 15u))
            {
                float _3153;
                float _3155;
                float _3157;
                float _3159;
                float _3161;
                float _3163;
                float _3312 = _3031;
                float _3313 = _3033;
                float _3314 = _3035;
                float _3315 = _3037;
                float _3316 = _3039;
                float _3317 = _3041;
                uint _3318 = _3048;
                uint _3327;
                bool _3328;
                for (;;)
                {
                    _3327 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3318 << 2u)) >> 2u)).x;
                    _3328 = _3327 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3328)
                    {
                        frontier_phi_82_pred = _3317;
                        frontier_phi_82_pred_1 = _3316;
                        frontier_phi_82_pred_2 = _3315;
                        frontier_phi_82_pred_3 = _3314;
                        frontier_phi_82_pred_4 = _3313;
                        frontier_phi_82_pred_5 = _3312;
                    }
                    else
                    {
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3525;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3533 = _3312;
                        float _3534 = _3313;
                        float _3535 = _3314;
                        float _3536 = _3315;
                        float _3537 = _3316;
                        float _3538 = _3317;
                        uint _3539 = _3327;
                        uint _3540;
                        vec4 _3565;
                        float _3566;
                        vec4 _3581;
                        vec3 _3593;
                        vec4 _3608;
                        vec4 _3624;
                        float _3670;
                        bool _3671;
                        for (;;)
                        {
                            uint _3550 = ((_3318 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3539));
                            _3540 = (_3539 + 4294967295u) & _3539;
                            uint _3552 = _3550 * 40u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            _3566 = _3565.w;
                            uint _3568 = (_3550 * 40u) + 4u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3550 * 40u) + 8u;
                            _3593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x));
                            uint _3595 = (_3550 * 40u) + 16u;
                            _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            uint _3611 = (_3550 * 40u) + 20u;
                            _3624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 3u)).x));
                            uint _3626 = (_3550 * 40u) + 24u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            uint _3645 = (_3550 * 40u) + 28u;
                            vec4 _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            _3670 = fma(_2012, _3658.z, fma(_2011, _3658.y, _3658.x * _2010)) + _3658.w;
                            _3671 = !((fma(_2012, _3639.z, fma(_2011, _3639.y, _3639.x * _2010)) + _3639.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3671)
                            {
                                float _3698 = _3565.x - _2010;
                                float _3699 = _3565.y - _2011;
                                float _3700 = _3565.z - _2012;
                                float _3701 = dot(vec3(_3698, _3699, _3700), vec3(_3698, _3699, _3700));
                                float _3704 = inversesqrt(_3701);
                                float _3705 = _3704 * _3698;
                                float _3706 = _3704 * _3699;
                                float _3707 = _3704 * _3700;
                                float _3711 = 1.0 - (_3701 / (_3566 * _3566));
                                float _4889 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3716 = sqrt(_3701) * _3581.w;
                                float _3718 = 1.39999997615814208984375 / (_3716 + 1.39999997615814208984375);
                                float _3719 = _3718 * _3718;
                                float _3722 = ((1.0 - _3719) * dot(vec3(_3705, _3706, _3707), vec3(_845, _848, _851))) + _3719;
                                float _3725 = _3716 * _3716;
                                float _3729 = (fma(_2012, _3608.z, fma(_2011, _3608.y, _3608.x * _2010)) + _3608.w) / _3670;
                                float _3730 = (fma(_2012, _3624.z, fma(_2011, _3624.y, _3624.x * _2010)) + _3624.w) / _3670;
                                float _3734 = 1.0 - dot(vec2(_3729, _3730), vec2(_3729, _3730));
                                float _4905 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3735 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3736 = _3735 * (((isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0))) * _3712) / ((_3725 * 0.699999988079071044921875) + 1.0));
                                float _3748 = exp2(log2(1.0 / ((_3725 * 3.5) + 5.0)) * 0.25);
                                float _3749 = 1.0 - _920;
                                float _3756 = sqrt(1.0 - ((1.0 - (_3749 * _3749)) * (1.0 - (_3748 * _3748))));
                                float _3757 = _3756 * _3756;
                                float _3758 = _3757 * _3757;
                                float _3759 = _3705 - _3178;
                                float _3760 = _3706 - _3179;
                                float _3761 = _3707 - _3180;
                                float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                                float _3769 = dot(vec3(_845, _848, _851), vec3((-0.0) - _3178, (-0.0) - _3179, (-0.0) - _3180));
                                float _4916 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3772 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3773 = dot(vec3(_845, _848, _851), vec3(_3765 * _3759, _3765 * _3760, _3765 * _3761));
                                float _4927 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3776 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3780 = ((_3776 * _3776) * (_3758 + (-1.0))) + 1.0;
                                float _3781 = _3718 * _3757;
                                float _3782 = _3781 * _3781;
                                float _3788 = ((1.0 - _3782) * dot(vec3(_845, _848, _851), vec3(_3705, _3706, _3707))) + _3782;
                                float _4938 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                                float _3790 = 1.0 - _3757;
                                float _3800 = (0.5 / (((_3789 * ((_3772 * _3790) + _3757)) + 9.9999999392252902907785028219223e-09) + (((_3789 * _3790) + _3757) * _3772))) * _3789;
                                float _4949 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3810 = (_3735 * _3712) * (((_3758 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3780 * _3780) * ((_3725 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3736 * _3581.z;
                                frontier_phi_88_pred_1 = _3736 * _3581.y;
                                frontier_phi_88_pred_2 = _3736 * _3581.x;
                                frontier_phi_88_pred_3 = _3810 * _3593.z;
                                frontier_phi_88_pred_4 = _3810 * _3593.y;
                                frontier_phi_88_pred_5 = _3810 * _3593.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3819 = frontier_phi_88_pred;
                            _3818 = frontier_phi_88_pred_1;
                            _3817 = frontier_phi_88_pred_2;
                            _3816 = frontier_phi_88_pred_3;
                            _3815 = frontier_phi_88_pred_4;
                            _3814 = frontier_phi_88_pred_5;
                            _3523 = _3817 + _3536;
                            _3524 = _3818 + _3537;
                            _3525 = _3819 + _3538;
                            _3520 = _3814 + _3533;
                            _3521 = _3815 + _3534;
                            _3522 = _3816 + _3535;
                            if (_3540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3533 = _3520;
                                _3534 = _3521;
                                _3535 = _3522;
                                _3536 = _3523;
                                _3537 = _3524;
                                _3538 = _3525;
                                _3539 = _3540;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3525;
                        frontier_phi_82_pred_1 = _3524;
                        frontier_phi_82_pred_2 = _3523;
                        frontier_phi_82_pred_3 = _3522;
                        frontier_phi_82_pred_4 = _3521;
                        frontier_phi_82_pred_5 = _3520;
                    }
                    _3163 = frontier_phi_82_pred;
                    _3161 = frontier_phi_82_pred_1;
                    _3159 = frontier_phi_82_pred_2;
                    _3157 = frontier_phi_82_pred_3;
                    _3155 = frontier_phi_82_pred_4;
                    _3153 = frontier_phi_82_pred_5;
                    uint _3319 = _3318 + 1u;
                    if (_3319 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3312 = _3153;
                        _3313 = _3155;
                        _3314 = _3157;
                        _3315 = _3159;
                        _3316 = _3161;
                        _3317 = _3163;
                        _3318 = _3319;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3159;
                frontier_phi_63_64_ladder_1 = _3163;
                frontier_phi_63_64_ladder_2 = _3161;
                frontier_phi_63_64_ladder_3 = _3157;
                frontier_phi_63_64_ladder_4 = _3155;
                frontier_phi_63_64_ladder_5 = _3153;
            }
            else
            {
                frontier_phi_63_64_ladder = _3037;
                frontier_phi_63_64_ladder_1 = _3041;
                frontier_phi_63_64_ladder_2 = _3039;
                frontier_phi_63_64_ladder_3 = _3035;
                frontier_phi_63_64_ladder_4 = _3033;
                frontier_phi_63_64_ladder_5 = _3031;
            }
            _3152 = frontier_phi_63_64_ladder_5;
            _3154 = frontier_phi_63_64_ladder_4;
            _3156 = frontier_phi_63_64_ladder_3;
            _3158 = frontier_phi_63_64_ladder;
            _3160 = frontier_phi_63_64_ladder_2;
            _3162 = frontier_phi_63_64_ladder_1;
        }
        float _3167 = isnan(1.0) ? _904 : (isnan(_904) ? 1.0 : min(_904, 1.0));
        _2964 = (_3167 * _3158) + _2476;
        _2966 = (_3167 * _3160) + _2478;
        _2968 = (_3167 * _3162) + _2480;
        _2970 = ((_3152 * _888) * _3167) + _2814;
        _2972 = ((_3154 * _890) * _3167) + _2816;
        _2974 = ((_3156 * _891) * _3167) + _2818;
    }
    else
    {
        _2964 = _2476;
        _2966 = _2478;
        _2968 = _2480;
        _2970 = _2814;
        _2972 = _2816;
        _2974 = _2818;
    }
    float _4965 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4976 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4987 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2991 = ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2964 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _904))) + ((_2970 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2992 = ((isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2966 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _904))) + ((_2972 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    float _2993 = ((isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0))) * (_2968 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _904))) + ((_2974 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1744)) * cbPerFrame._m0[3u].x);
    uint _2994 = _246 + 6u;
    float _3002 = _826 / cbSceneParam._m0[86u].x;
    float _3003 = _827 / cbSceneParam._m0[86u].y;
    vec4 _3017 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, (log2((isnan(cbSceneParam._m0[77u].w) ? _748 : (isnan(_748) ? cbSceneParam._m0[77u].w : min(_748, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3019 = _3017.x;
    float _3020 = _3017.y;
    float _3021 = _3017.z;
    float _3022 = _3017.w;
    float _3094;
    float _3096;
    float _3098;
    float _3100;
    if (_748 > cbSceneParam._m0[78u].w)
    {
        float _3056 = isnan(_748) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _748 : min(cbSceneParam._m0[80u].w, _748));
        float _3057 = _3056 / _748;
        float _3068 = _3057 * _799;
        float _3069 = _800 * _3057;
        float _3070 = (-0.0) - _3069;
        float _3072 = _3057 * _801;
        float _3074 = (cbSceneParam._m0[77u].w * _3070) / _3056;
        float _3075 = _3074 + cbSceneParam._m0[79u].w;
        float _3076 = cbSceneParam._m0[79u].w - _3069;
        float _3082 = sqrt(((_3068 * _3068) + (_3069 * _3069)) + (_3072 * _3072));
        float _3085 = (1.0 - (cbSceneParam._m0[77u].w / _3056)) * _3082;
        float _3090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3269;
        if (abs((_3070 - _3074) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3269 = ((((_3075 > 0.0) ? exp2(_3090 * _3075) : (2.0 - exp2(_3092 * _3075))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3085;
        }
        else
        {
            float _3213 = 1.0 / cbSceneParam._m0[80u].x;
            float _3214 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : max(_3075, _3076));
            float _3215 = isnan(_3076) ? _3075 : (isnan(_3075) ? _3076 : min(_3075, _3076));
            float _3224 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : min(_3214, 0.0));
            float _3225 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : min(_3215, 0.0));
            _3269 = ((abs(_3082 / _3070) * cbSceneParam._m0[80u].y) * ((((_3224 - _3225) * 2.0) - ((exp2(_3090 * (isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0)))) - exp2(_3090 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))))) * _3213)) - ((exp2(_3092 * _3224) - exp2(_3092 * _3225)) * _3213))) + (_3085 * cbSceneParam._m0[80u].z);
        }
        vec4 _3271 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3002, _3003, 1.0), 0.0);
        float _3280 = exp2((_3269 * (-1.44269502162933349609375)) * (1.0 - _3271.w));
        float _3281 = log2(_3280);
        float _3297 = log2(_3022);
        _3094 = (exp2(_3297 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].x)) * _3271.x) / cbSceneParam._m0[78u].x)) + _3019;
        _3096 = (exp2(_3297 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].y)) * _3271.y) / cbSceneParam._m0[78u].y)) + _3020;
        _3098 = (exp2(_3297 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3281 * cbSceneParam._m0[78u].z)) * _3271.z) / cbSceneParam._m0[78u].z)) + _3021;
        _3100 = _3280 * _3022;
    }
    else
    {
        _3094 = _3019;
        _3096 = _3020;
        _3098 = _3021;
        _3100 = _3022;
    }
    bool _3307;
    vec4 _3110;
    vec4 _3132;
    float _3134;
    float _3138;
    float _3139;
    float _3140;
    float _3141;
    bool _3151;
    for (;;)
    {
        _3110 = cbMatDynParam._m0[0u];
        float _3112 = roundEven(_3110.y);
        bool _3113 = _3112 == 3.0;
        float _3114 = log2(_3100);
        float _3121 = exp2(_3114 * cbSceneParam._m0[78u].x) * _2991;
        float _3122 = exp2(_3114 * cbSceneParam._m0[78u].y) * _2992;
        float _3123 = exp2(_3114 * cbSceneParam._m0[78u].z) * _2993;
        float _3130 = _815 + (-0.5);
        _3132 = cbMtdParam._m0[1u];
        _3134 = _3132.y * _3130;
        float _3137 = (_3112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3138 = _3137 * (_3113 ? _3121 : (_3121 + (cbSceneParam._m0[72u].w * _3094)));
        _3139 = _3137 * (_3113 ? _3122 : (_3122 + (cbSceneParam._m0[72u].w * _3096)));
        _3140 = _3137 * (_3113 ? _3123 : (_3123 + (cbSceneParam._m0[72u].w * _3098)));
        _3141 = _3130 * 0.999000012874603271484375;
        _3151 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3151)
        {
            if ((cbInstanceData._m0[_246 + 7u].x + _3141) < 0.5)
            {
                _3307 = true;
                break;
            }
        }
        uint _3248 = _864 + uint(_3110.w);
        if ((cbInstanceData._m0[_3248].w < 1.0) && ((cbInstanceData._m0[_3248].w + _3141) < 0.5))
        {
            _3307 = true;
            break;
        }
        if ((_3134 + 1.0) < _3132.x)
        {
            _3307 = true;
            break;
        }
        _3307 = false;
        break;
    }
    float _3511;
    if (_3307)
    {
        discard_state = true;
        _3511 = 0.0;
    }
    else
    {
        _3511 = cbInstanceData._m0[_2994].w;
    }
    SV_Target.x = _3138;
    SV_Target.y = _3139;
    SV_Target.z = _3140;
    SV_Target.w = _3511;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2994].w;
    discard_exit();
}


