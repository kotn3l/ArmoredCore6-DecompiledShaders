#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1529;
float _3932;
float _3933;
float _3934;
float _3935;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3944 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _455 = (_448 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _456 = (_448 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _457 = (_448 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3955 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _568 = _566.x;
    float _578 = dot(vec4(_568, _566.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _590 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _377.z) * 2.0) - ((((_568 - _578) * cbMtdParam._m0[23u].w) + _578) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3966 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _604 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_591 * ((_549.x * cbMtdParam._m0[14u].x) - _528)) + _528);
    float _607 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_591 * ((_549.y * cbMtdParam._m0[14u].y) - _529)) + _529);
    float _610 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_591 * ((_549.z * cbMtdParam._m0[14u].z) - _530)) + _530);
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _640 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _642 = _640.x;
    float _643 = _640.y;
    float _644 = _640.z;
    float _651 = ((_623.x - _642) * _448) + _642;
    float _652 = ((_623.y - _643) * _448) + _643;
    float _653 = ((_623.z - _644) * _448) + _644;
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _676 = ((_665.x - _651) * _521) + _651;
    float _677 = ((_665.y - _652) * _521) + _652;
    float _678 = ((_665.z - _653) * _521) + _653;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _703 = ((_690.z - _678) * _591) + _678;
    float _706 = ((((_690.x - _676) * _591) + _676) * 2.0) + (-1.0);
    float _708 = ((((_690.y - _677) * _591) + _677) * 2.0) + (-1.0);
    float _709 = dot(vec2(_706, _708), vec2(_706, _708));
    float _3977 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _714 = sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))));
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _740 = (((_728.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    float _741 = (((_728.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _708;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _755 = _753.x;
    float _756 = 1.0 - _755;
    float _784 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_755 - _756) * cbMtdParam._m0[24u].w) + _756) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3988 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _785 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _793 = ((((cbMtdParam._m0[10u].x - _604) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _785) + _604;
    float _794 = ((((cbMtdParam._m0[10u].y - _607) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _785) + _607;
    float _795 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _610)) * _785) + _610;
    vec4 _821 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _823 = _821.x;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _823) * _448) + _823;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _840) * _521) + _840;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _858) * _591) + _858;
    float _879 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _875) * cbMtdParam._m0[19u].z) + _875;
    float _881 = _879 - (_879 * _785);
    float _885 = (cbMtdParam._m0[19u].w * (_728.z - _703)) + _703;
    float _889 = ((cbMtdParam._m0[23u].x - _885) * _785) + _885;
    vec4 _908 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _914 = (_908.x * 2.0) + (-1.0);
    float _915 = (_908.y * 2.0) + (-1.0);
    float _916 = dot(vec2(_914, _915), vec2(_914, _915));
    float _3999 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _932 = (_785 * (((cbMtdParam._m0[22u].z * _740) - _740) + _914)) + _740;
    float _933 = (_785 * (((cbMtdParam._m0[22u].z * _741) - _741) + _915)) + _741;
    float _934 = (_785 * (sqrt(1.0 - (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0)))) - _714)) + _714;
    float _936 = cbMtdParam._m0[22u].x + _728.w;
    float _939 = fma(_934, _256 * NORMAL.x, fma(_933, _263 * TANGENT.x, (_249 * _241) * _932));
    float _942 = fma(_934, _256 * NORMAL.y, fma(_933, _263 * TANGENT.y, (_249 * _242) * _932));
    float _945 = fma(_934, _256 * NORMAL.z, fma(_933, _263 * TANGENT.z, (_249 * _243) * _932));
    float _949 = inversesqrt(dot(vec3(_939, _942, _945), vec3(_939, _942, _945)));
    float _950 = _949 * _939;
    float _951 = _949 * _942;
    float _952 = _949 * _945;
    float _4010 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _953 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _4021 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4032 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4043 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _4054 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4065 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _958 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _972 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1022 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1012);
    float _1023 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1012);
    float _1024 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1012);
    float _1028 = inversesqrt(dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024)));
    float _1029 = _1022 * _1028;
    float _1030 = _1023 * _1028;
    float _1031 = _1024 * _1028;
    vec4 _1036 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1038 = _1036.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1210 = sqrt(((_1022 * _1022) + (_1023 * _1023)) + (_1024 * _1024));
        float _1216 = (cbMatDynParam._m0[5u].x * _1210) + cbMatDynParam._m0[5u].y;
        float _4076 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1221 = (cbMatDynParam._m0[5u].z * _1210) + cbMatDynParam._m0[5u].w;
        float _4087 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) - _1217)) + _1217) < ((_1038 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1049 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1050 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1068 = fma(_952, cbSceneParam._m0[5u].z, fma(_951, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _950));
    float _1071 = fma(_952, cbSceneParam._m0[6u].z, fma(_951, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _950));
    float _1074 = fma(_952, cbSceneParam._m0[7u].z, fma(_951, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _950));
    uint _1087 = _269 + 9u;
    uint _1088 = _1087 + uint(cbMatDynParam._m0[0u].w);
    float _1094 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1088].x;
    float _1095 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1088].y;
    float _1096 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1088].z;
    float _4098 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _4109 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1100 = 1.0 - _958;
    float _1101 = _1097 * _1100;
    float _1102 = _1098 * _1100;
    float _1103 = _1099 * _1100;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _958;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _958;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _958;
    float _1111 = _1108 + 0.039999999105930328369140625;
    float _1113 = _1109 + 0.039999999105930328369140625;
    float _1114 = _1110 + 0.039999999105930328369140625;
    vec4 _1123 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1049, cbSceneParam._m0[86u].y * _1050));
    float _1127 = ((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * TEXCOORD_5.w) * _1123.x;
    float _1128 = dot(vec3(_950, _951, _952), vec3(_1029, _1030, _1031));
    float _1131 = _1128 * 2.0;
    float _1135 = (_1131 * _950) - _1029;
    float _1136 = (_1131 * _951) - _1030;
    float _1137 = (_1131 * _952) - _1031;
    float _1141 = abs(dot(vec3(_1029, _1030, _1031), vec3(_950, _951, _952)));
    float _4131 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1143 = sqrt(_953);
    float _1156 = exp2((_1143 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1143 * 3.0));
    float _1162 = (1.0 - _1156) * ((_1143 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1163 = _1156 * _1143;
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1199 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1528;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1253 = fma(_1199, cbModelParam._m0[26u].z, fma(_1195, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1191));
        float _1257 = fma(_1199, cbModelParam._m0[27u].z, fma(_1195, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1191));
        float _1261 = fma(_1199, cbModelParam._m0[28u].z, fma(_1195, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1191));
        float _1286 = _1191 + _950;
        float _1287 = _1195 + _951;
        float _1288 = _1199 + _952;
        float _1298 = fma(_1288, cbModelParam._m0[26u].z, fma(_1287, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1286)) - _1253;
        float _1299 = fma(_1288, cbModelParam._m0[27u].z, fma(_1287, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1286)) - _1257;
        float _1300 = fma(_1288, cbModelParam._m0[28u].z, fma(_1287, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1286)) - _1261;
        float _1304 = inversesqrt(dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300)));
        float _1317 = ((_1304 * _1298) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1253 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1304 * _1299) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1257 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1304 * _1300) / cbModelParam._m0[34u].z) + ((((((_1261 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1317, _1318, _1319), 0.0);
        float _1356 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1322.x + (-0.5));
        float _1358 = _1356 * (_1322.y + (-0.5));
        float _1359 = _1356 * (_1322.z + (-0.5));
        float _1366 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1367 = _1366 * (_1329.x + (-0.5));
        float _1368 = _1366 * (_1329.y + (-0.5));
        float _1369 = _1366 * (_1329.z + (-0.5));
        float _1376 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1336.x + (-0.5));
        float _1378 = _1376 * (_1336.y + (-0.5));
        float _1379 = _1376 * (_1336.z + (-0.5));
        float _1386 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1343.x + (-0.5));
        float _1388 = _1386 * (_1343.y + (-0.5));
        float _1389 = _1386 * (_1343.z + (-0.5));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = _1357 * 0.5;
        float _1394 = _1367 * 0.5;
        float _1395 = _1377 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1410 = (dot(vec3(_950, _951, _952), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1420 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4179 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1422 + 1.0))) + _1427) * _1390;
        float _1437 = _1358 * 0.5;
        float _1438 = _1368 * 0.5;
        float _1439 = _1378 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_950, _951, _952), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4212 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1464 + 1.0))) + _1469) * _1391;
        float _1479 = _1359 * 0.5;
        float _1480 = _1369 * 0.5;
        float _1481 = _1379 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_950, _951, _952), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4223 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4234 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4245 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0))) * (_1506 + 1.0))) + _1511) * _1392;
        _1528 = _1359;
        _1530 = _1358;
        _1531 = _1357;
        _1532 = _1369;
        _1533 = _1368;
        _1534 = _1367;
        _1535 = _1379;
        _1536 = _1378;
        _1537 = _1377;
        _1538 = _1392;
        _1539 = _1391;
        _1540 = _1390;
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
    }
    else
    {
        _1528 = _1529;
        _1530 = _1529;
        _1531 = _1529;
        _1532 = _1529;
        _1533 = _1529;
        _1534 = _1529;
        _1535 = _1529;
        _1536 = _1529;
        _1537 = _1529;
        _1538 = _1529;
        _1539 = _1529;
        _1540 = _1529;
        _1541 = 0.0;
        _1542 = 0.0;
        _1543 = 0.0;
    }
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1569 = fma(_1199, cbModelParam._m0[30u].z, fma(_1195, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1191));
        float _1573 = fma(_1199, cbModelParam._m0[31u].z, fma(_1195, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1191));
        float _1577 = fma(_1199, cbModelParam._m0[32u].z, fma(_1195, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1191));
        float _1600 = _1191 + _950;
        float _1601 = _1195 + _951;
        float _1602 = _1199 + _952;
        float _1612 = fma(_1602, cbModelParam._m0[30u].z, fma(_1601, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1600)) - _1569;
        float _1613 = fma(_1602, cbModelParam._m0[31u].z, fma(_1601, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1600)) - _1573;
        float _1614 = fma(_1602, cbModelParam._m0[32u].z, fma(_1601, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1600)) - _1577;
        float _1618 = inversesqrt(dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614)));
        float _1631 = ((_1618 * _1612) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1569 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1632 = ((_1618 * _1613) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1573 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1633 = ((_1618 * _1614) / cbModelParam._m0[35u].z) + ((((((_1577 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1649 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        vec4 _1656 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1631, _1632, _1633), 0.0);
        float _1668 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1635.x + (-0.5));
        float _1670 = _1668 * (_1635.y + (-0.5));
        float _1671 = _1668 * (_1635.z + (-0.5));
        float _1678 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1642.x + (-0.5));
        float _1680 = _1678 * (_1642.y + (-0.5));
        float _1681 = _1678 * (_1642.z + (-0.5));
        float _1688 = exp2((_1649.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1649.x + (-0.5));
        float _1690 = _1688 * (_1649.y + (-0.5));
        float _1691 = _1688 * (_1649.z + (-0.5));
        float _1698 = exp2((_1656.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1656.x + (-0.5));
        float _1700 = _1698 * (_1656.y + (-0.5));
        float _1701 = _1698 * (_1656.z + (-0.5));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = _1669 * 0.5;
        float _1706 = _1679 * 0.5;
        float _1707 = _1689 * 0.5;
        float _1708 = dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707));
        float _1713 = (_1708 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1708);
        float _1721 = (dot(vec3(_950, _951, _952), vec3(_1713 * _1705, _1713 * _1706, _1713 * _1707)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1730 = sqrt(((_1706 * _1706) + (_1705 * _1705)) + (_1707 * _1707)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1731 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1732 = _1731 * 2.0;
        float _1736 = (1.0 - _1731) / (_1731 + 1.0);
        float _4308 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1737 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1746 = ((((1.0 - _1737) * (_1732 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1732 + 1.0))) + _1737) * _1702;
        float _1747 = _1670 * 0.5;
        float _1748 = _1680 * 0.5;
        float _1749 = _1690 * 0.5;
        float _1750 = dot(vec3(_1747, _1748, _1749), vec3(_1747, _1748, _1749));
        float _1755 = (_1750 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1750);
        float _1763 = (dot(vec3(_950, _951, _952), vec3(_1755 * _1747, _1755 * _1748, _1755 * _1749)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1772 = sqrt(((_1748 * _1748) + (_1747 * _1747)) + (_1749 * _1749)) / (_1703 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
        float _1773 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1774 = _1773 * 2.0;
        float _1778 = (1.0 - _1773) / (_1773 + 1.0);
        float _4341 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1788 = ((((1.0 - _1779) * (_1774 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1774 + 1.0))) + _1779) * _1703;
        float _1789 = _1671 * 0.5;
        float _1790 = _1681 * 0.5;
        float _1791 = _1691 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_950, _951, _952), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4352 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4363 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4374 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0))) * (_1816 + 1.0))) + _1821) * _1704;
        _1838 = _1671;
        _1839 = _1670;
        _1840 = _1669;
        _1841 = _1681;
        _1842 = _1680;
        _1843 = _1679;
        _1844 = _1691;
        _1845 = _1690;
        _1846 = _1689;
        _1847 = _1704;
        _1848 = _1703;
        _1849 = _1702;
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)));
        _1851 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0)));
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
    }
    else
    {
        _1838 = _1529;
        _1839 = _1529;
        _1840 = _1529;
        _1841 = _1529;
        _1842 = _1529;
        _1843 = _1529;
        _1844 = _1529;
        _1845 = _1529;
        _1846 = _1529;
        _1847 = _1529;
        _1848 = _1529;
        _1849 = _1529;
        _1850 = 0.0;
        _1851 = 0.0;
        _1852 = 0.0;
    }
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1863 = (cbModelParam._m0[1u].x * (_1851 - _1542)) + _1542;
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1885 = fma(_1864, cbSceneParam._m0[89u].z, fma(_1863, cbSceneParam._m0[89u].y, _1862 * cbSceneParam._m0[89u].x));
    float _1888 = fma(_1864, cbSceneParam._m0[90u].z, fma(_1863, cbSceneParam._m0[90u].y, _1862 * cbSceneParam._m0[90u].x));
    float _1891 = fma(_1864, cbSceneParam._m0[91u].z, fma(_1863, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1862));
    float _1906 = _1135 * 0.5;
    float _1907 = _1136 * 0.5;
    float _1908 = _1137 * 0.5;
    float _1909 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1912 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1839, _1842, _1845, _1848));
    float _1915 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1922 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1528, _1532, _1535, _1538));
        float _1926 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1530, _1533, _1536, _1539));
        float _1930 = dot(vec4(_1906, _1907, _1908, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1937 = dot(vec4(cbModelParam._m0[39u]), vec4(_1906, _1907, _1908, 1.0));
        _1949 = dot(vec3(isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0)), isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1949 = 1.0;
    }
    float _1960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1951 = dot(vec4(cbModelParam._m0[40u]), vec4(_1906, _1907, _1908, 1.0));
        _1960 = dot(vec3(isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1951) ? 0.0 : (isnan(0.0) ? _1951 : max(0.0, _1951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1960 = 1.0;
    }
    float _1964 = (_1960 * cbModelParam._m0[1u].x) + (_1949 * (1.0 - cbModelParam._m0[1u].x));
    float _1974 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _953);
    float _1975 = isnan(_1974) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1974 : min(cbModelParam._m0[25u].z, _1974));
    float _2056;
    float _2058;
    float _2060;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2023 = fma(_1199, cbModelParam._m0[13u].z, fma(_1195, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1191)) + cbModelParam._m0[13u].w;
        float _2027 = fma(_1199, cbModelParam._m0[14u].z, fma(_1195, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1191)) + cbModelParam._m0[14u].w;
        float _2031 = fma(_1199, cbModelParam._m0[15u].z, fma(_1195, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1191)) + cbModelParam._m0[15u].w;
        float _2034 = fma(_1137, cbModelParam._m0[13u].z, fma(_1136, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135));
        float _2037 = fma(_1137, cbModelParam._m0[14u].z, fma(_1136, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135));
        float _2040 = fma(_1137, cbModelParam._m0[15u].z, fma(_1136, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135));
        float _2068;
        if (_2034 > 0.0)
        {
            _2068 = abs((1.0 - _2023) / _2034);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2034 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2023 + 1.0) / _2034);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2068 = frontier_phi_17_15_ladder;
        }
        float _2292;
        if (_2037 > 0.0)
        {
            _2292 = abs((1.0 - _2027) / _2037);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2027 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2292 = frontier_phi_26_22_ladder;
        }
        float _2549;
        if (_2040 > 0.0)
        {
            _2549 = abs((1.0 - _2031) / _2040);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2031 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2549 = frontier_phi_38_33_ladder;
        }
        float _2551 = isnan(_2292) ? _2068 : (isnan(_2068) ? _2292 : min(_2068, _2292));
        float _2552 = isnan(_2549) ? _2551 : (isnan(_2551) ? _2549 : min(_2551, _2549));
        float _2556 = (_2552 * _2034) + _2023;
        float _2557 = (_2552 * _2037) + _2027;
        float _2558 = (_2552 * _2040) + _2031;
        float _2559 = _2552 * 9.9999997473787516355514526367188e-05;
        float _2561 = (-1.0) - _2559;
        float _2563 = _2559 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2558 > _2563) || ((_2558 < _2561) || ((_2557 > _2563) || ((_2557 < _2561) || ((_2556 < _2561) || (_2556 > _2563))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2558, cbModelParam._m0[9u].z, fma(_2557, cbModelParam._m0[9u].y, _2556 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2558, cbModelParam._m0[10u].z, fma(_2557, cbModelParam._m0[10u].y, _2556 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2558, cbModelParam._m0[11u].z, fma(_2557, cbModelParam._m0[11u].y, _2556 * cbModelParam._m0[11u].x))), _1975);
            frontier_phi_16_38_ladder = _2686.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2686.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2686.x * cbModelParam._m0[1u].y;
        }
        _2056 = frontier_phi_16_38_ladder_2;
        _2058 = frontier_phi_16_38_ladder_1;
        _2060 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2044 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1135, _1136, _1137), _1975);
        _2056 = _2044.x * cbModelParam._m0[1u].y;
        _2058 = _2044.y * cbModelParam._m0[1u].y;
        _2060 = _2044.z * cbModelParam._m0[1u].y;
    }
    float _2064 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _953);
    float _2065 = isnan(_2064) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2064 : min(cbModelParam._m0[25u].w, _2064));
    float _2155;
    float _2157;
    float _2159;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2119 = fma(_1199, cbModelParam._m0[21u].z, fma(_1195, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1191)) + cbModelParam._m0[21u].w;
        float _2123 = fma(_1199, cbModelParam._m0[22u].z, fma(_1195, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1191)) + cbModelParam._m0[22u].w;
        float _2127 = fma(_1199, cbModelParam._m0[23u].z, fma(_1195, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1191)) + cbModelParam._m0[23u].w;
        float _2130 = fma(_1137, cbModelParam._m0[21u].z, fma(_1136, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135));
        float _2133 = fma(_1137, cbModelParam._m0[22u].z, fma(_1136, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135));
        float _2136 = fma(_1137, cbModelParam._m0[23u].z, fma(_1136, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135));
        float _2297;
        if (_2130 > 0.0)
        {
            _2297 = abs((1.0 - _2119) / _2130);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2119 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2297 = frontier_phi_28_24_ladder;
        }
        float _2576;
        if (_2133 > 0.0)
        {
            _2576 = abs((1.0 - _2123) / _2133);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2123 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2576 = frontier_phi_40_35_ladder;
        }
        float _2789;
        if (_2136 > 0.0)
        {
            _2789 = abs((1.0 - _2127) / _2136);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2127 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2789 = frontier_phi_49_46_ladder;
        }
        float _2791 = isnan(_2576) ? _2297 : (isnan(_2297) ? _2576 : min(_2297, _2576));
        float _2792 = isnan(_2789) ? _2791 : (isnan(_2791) ? _2789 : min(_2791, _2789));
        float _2796 = (_2792 * _2130) + _2119;
        float _2797 = (_2792 * _2133) + _2123;
        float _2798 = (_2792 * _2136) + _2127;
        float _2799 = _2792 * 9.9999997473787516355514526367188e-05;
        float _2800 = (-1.0) - _2799;
        float _2802 = _2799 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2798 > _2802) || ((_2798 < _2800) || ((_2797 > _2802) || ((_2797 < _2800) || ((_2796 < _2800) || (_2796 > _2802))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2997 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2798, cbModelParam._m0[17u].z, fma(_2797, cbModelParam._m0[17u].y, _2796 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2798, cbModelParam._m0[18u].z, fma(_2797, cbModelParam._m0[18u].y, _2796 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2798, cbModelParam._m0[19u].z, fma(_2797, cbModelParam._m0[19u].y, _2796 * cbModelParam._m0[19u].x))), _2065);
            frontier_phi_25_49_ladder = _2997.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2997.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2997.x * cbModelParam._m0[1u].z;
        }
        _2155 = frontier_phi_25_49_ladder_2;
        _2157 = frontier_phi_25_49_ladder_1;
        _2159 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2139 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1135, _1136, _1137), _2065);
        _2155 = _2139.x * cbModelParam._m0[1u].z;
        _2157 = _2139.y * cbModelParam._m0[1u].z;
        _2159 = _2139.z * cbModelParam._m0[1u].z;
    }
    float _2172 = (((_1162 * _1111) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2174 = (((_1162 * _1113) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2176 = (((_1162 * _1114) + _1163) * _1127) * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2179 = fma(_2176, cbSceneParam._m0[89u].z, fma(_2174, cbSceneParam._m0[89u].y, _2172 * cbSceneParam._m0[89u].x));
    float _2182 = fma(_2176, cbSceneParam._m0[90u].z, fma(_2174, cbSceneParam._m0[90u].y, _2172 * cbSceneParam._m0[90u].x));
    float _2185 = fma(_2176, cbSceneParam._m0[91u].z, fma(_2174, cbSceneParam._m0[91u].y, _2172 * cbSceneParam._m0[91u].x));
    vec4 _2193 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1049, _1050));
    float _2195 = _2193.w;
    float _2207 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2195);
    float _2208 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2195);
    float _2209 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2195);
    uvec4 _2213 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2215 = _2213.x * 14u;
    uint _2216 = _2215 + 13u;
    float _2223 = _1127 + (-1.0);
    float _2228 = (cbLight._m0[_2216].x * _2223) + 1.0;
    float _2229 = (cbLight._m0[_2216].y * _2223) + 1.0;
    float _2230 = (cbLight._m0[_2216].z * _2223) + 1.0;
    float _2231 = (cbLight._m0[_2216].w * _2223) + 1.0;
    uint _2232 = _2215 + 5u;
    float _2238 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2242 = _2215 + 4u;
    float _2251 = isnan(1.0) ? _2228 : (isnan(_2228) ? 1.0 : min(_2228, 1.0));
    uint _2255 = _2215 | 1u;
    float _2266 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_950, _951, _952));
    float _2269 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_950, _951, _952));
    float _4510 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _4521 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2274 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * 0.3183098733425140380859375;
    float _2276 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2283 = ((cbLight._m0[_2232].x * _2238) * _2276) + (((cbLight._m0[_2242].x * _2207) * _2251) * _2274);
    float _2284 = ((_2238 * cbLight._m0[_2232].y) * _2276) + (((cbLight._m0[_2242].y * _2208) * _2251) * _2274);
    float _2285 = ((_2238 * cbLight._m0[_2232].z) * _2276) + (((cbLight._m0[_2242].z * _2209) * _2251) * _2274);
    uvec4 _2289 = floatBitsToUint(cbLight._m0[_2215 + 12u]);
    bool _2291 = _2289.x == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2291)
    {
        _2302 = _2283;
        _2304 = _2284;
        _2306 = _2285;
    }
    else
    {
        uint _2310 = _2215 + 6u;
        float _2326 = (dot(vec3(cbLight._m0[_2215 + 2u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2327 = _2326 * _2326;
        float _4532 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2328 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2329 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2302 = (((cbLight._m0[_2310].x * 0.3183098733425140380859375) * _2328) * _2329) + _2283;
        _2304 = (((cbLight._m0[_2310].y * 0.3183098733425140380859375) * _2328) * _2329) + _2284;
        _2306 = (((cbLight._m0[_2310].z * 0.3183098733425140380859375) * _2328) * _2329) + _2285;
    }
    bool _2309 = _2289.y == 0u;
    float _2347;
    float _2349;
    float _2351;
    if (_2309)
    {
        _2347 = _2302;
        _2349 = _2304;
        _2351 = _2306;
    }
    else
    {
        uint _2520 = _2215 + 7u;
        float _2536 = (dot(vec3(cbLight._m0[_2215 + 3u].xyz), vec3(_950, _951, _952)) * 0.5) + 0.5;
        float _2537 = _2536 * _2536;
        float _4548 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2538 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2539 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2347 = (((cbLight._m0[_2520].x * 0.3183098733425140380859375) * _2538) * _2539) + _2302;
        _2349 = (((cbLight._m0[_2520].y * 0.3183098733425140380859375) * _2538) * _2539) + _2304;
        _2351 = (((cbLight._m0[_2520].z * 0.3183098733425140380859375) * _2538) * _2539) + _2306;
    }
    uint _2354 = _2215 + 8u;
    float _2367 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2215].w)) * _953) * 0.949999988079071044921875);
    float _2368 = _2367 * _2367;
    float _2369 = cbLight._m0[_2215].x + _1029;
    float _2370 = cbLight._m0[_2215].y + _1030;
    float _2371 = cbLight._m0[_2215].z + _1031;
    float _2375 = inversesqrt(dot(vec3(_2369, _2370, _2371), vec3(_2369, _2370, _2371)));
    float _2376 = _2375 * _2369;
    float _2377 = _2375 * _2370;
    float _2378 = _2375 * _2371;
    float _2379 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2215].xyz));
    float _4564 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2382 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _4575 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _2383 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _2384 = dot(vec3(_950, _951, _952), vec3(_2376, _2377, _2378));
    float _4586 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2215].xyz), vec3(_2376, _2377, _2378));
    float _4597 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2368 * _2368;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2404 = exp2(log2(1.0 - (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) * 5.0);
    float _2405 = 0.959999978542327880859375 - _1108;
    float _2407 = 0.959999978542327880859375 - _1109;
    float _2408 = 0.959999978542327880859375 - _1110;
    float _2415 = 1.0 - _2368;
    float _2426 = (0.5 / (((_2383 * ((_2382 * _2415) + _2368)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2415) + _2368) * _2382))) * _2382;
    float _4608 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2428 = (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    uint _2442 = _2215 + 9u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _953) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2255].x + _1029;
    float _2456 = cbLight._m0[_2255].y + _1030;
    float _2457 = cbLight._m0[_2255].z + _1031;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2255].xyz));
    float _4619 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
    float _2469 = dot(vec3(_950, _951, _952), vec3(_2462, _2463, _2464));
    float _4630 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
    float _2472 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2473 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2462, _2463, _2464));
    float _4641 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2477 = _2454 * _2454;
    float _2481 = ((_2472 * _2472) * (_2477 + (-1.0))) + 1.0;
    float _2488 = exp2(log2(1.0 - (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0)))) * 5.0);
    float _2495 = 1.0 - _2454;
    float _2505 = (0.5 / (((_2383 * ((_2468 * _2495) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2495) + _2454) * _2468))) * _2468;
    float _4652 = isnan(0.0) ? _2505 : (isnan(_2505) ? 0.0 : max(_2505, 0.0));
    float _2507 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2477 / ((_2481 * _2481) * 3.141590118408203125));
    float _2517 = (((((_2488 * _2405) + _1111) * cbLight._m0[_2442].x) * _2507) * _2238) + ((((cbLight._m0[_2354].x * _2207) * ((_2404 * _2405) + _1111)) * _2428) * _2251);
    float _2518 = (((((_2488 * _2407) + _1113) * cbLight._m0[_2442].y) * _2507) * _2238) + ((((cbLight._m0[_2354].y * _2208) * ((_2404 * _2407) + _1113)) * _2428) * _2251);
    float _2519 = (((((_2488 * _2408) + _1114) * cbLight._m0[_2442].z) * _2507) * _2238) + ((((cbLight._m0[_2354].z * _2209) * ((_2404 * _2408) + _1114)) * _2428) * _2251);
    float _2581;
    float _2583;
    float _2585;
    if (_2291)
    {
        _2581 = _2517;
        _2583 = _2518;
        _2585 = _2519;
    }
    else
    {
        uint _2587 = _2215 + 2u;
        uint _2591 = _2215 + 10u;
        float _2605 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2587].w)) * _953) * 0.949999988079071044921875);
        float _2606 = _2605 * _2605;
        float _2607 = cbLight._m0[_2587].x + _1029;
        float _2608 = cbLight._m0[_2587].y + _1030;
        float _2609 = cbLight._m0[_2587].z + _1031;
        float _2613 = inversesqrt(dot(vec3(_2607, _2608, _2609), vec3(_2607, _2608, _2609)));
        float _2614 = _2613 * _2607;
        float _2615 = _2613 * _2608;
        float _2616 = _2613 * _2609;
        float _2617 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2587].xyz));
        float _4663 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2620 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
        float _2621 = dot(vec3(_950, _951, _952), vec3(_2614, _2615, _2616));
        float _4674 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
        float _2624 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2625 = dot(vec3(cbLight._m0[_2587].xyz), vec3(_2614, _2615, _2616));
        float _4685 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2629 = _2606 * _2606;
        float _2633 = ((_2624 * _2624) * (_2629 + (-1.0))) + 1.0;
        float _2640 = exp2(log2(1.0 - (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0)))) * 5.0);
        float _2647 = 1.0 - _2606;
        float _2657 = (0.5 / (((_2383 * ((_2620 * _2647) + _2606)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2647) + _2606) * _2620))) * _2620;
        float _4696 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2659 = (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0))) * (_2629 / ((_2633 * _2633) * 3.141590118408203125));
        float _2660 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
        _2581 = (((((_2640 * _2405) + _1111) * cbLight._m0[_2591].x) * _2659) * _2660) + _2517;
        _2583 = (((((_2640 * _2407) + _1113) * cbLight._m0[_2591].y) * _2659) * _2660) + _2518;
        _2585 = (((((_2640 * _2408) + _1114) * cbLight._m0[_2591].z) * _2659) * _2660) + _2519;
    }
    float _2695;
    float _2697;
    float _2699;
    if (_2309)
    {
        _2695 = _2581;
        _2697 = _2583;
        _2699 = _2585;
    }
    else
    {
        uint _2706 = _2215 + 3u;
        uint _2710 = _2215 + 11u;
        float _2724 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2706].w)) * _953) * 0.949999988079071044921875);
        float _2725 = _2724 * _2724;
        float _2726 = cbLight._m0[_2706].x + _1029;
        float _2727 = cbLight._m0[_2706].y + _1030;
        float _2728 = cbLight._m0[_2706].z + _1031;
        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
        float _2733 = _2732 * _2726;
        float _2734 = _2732 * _2727;
        float _2735 = _2732 * _2728;
        float _2736 = dot(vec3(_950, _951, _952), vec3(cbLight._m0[_2706].xyz));
        float _4712 = isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0));
        float _2739 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2740 = dot(vec3(_950, _951, _952), vec3(_2733, _2734, _2735));
        float _4723 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2743 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2744 = dot(vec3(cbLight._m0[_2706].xyz), vec3(_2733, _2734, _2735));
        float _4734 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2748 = _2725 * _2725;
        float _2752 = ((_2743 * _2743) * (_2748 + (-1.0))) + 1.0;
        float _2759 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
        float _2766 = 1.0 - _2725;
        float _2776 = (0.5 / (((_2383 * ((_2739 * _2766) + _2725)) + 9.9999999392252902907785028219223e-09) + (((_2383 * _2766) + _2725) * _2739))) * _2739;
        float _4745 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
        float _2778 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2748 / ((_2752 * _2752) * 3.141590118408203125));
        float _2779 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2695 = (((((_2759 * _2405) + _1111) * cbLight._m0[_2710].x) * _2778) * _2779) + _2581;
        _2697 = (((((_2759 * _2407) + _1113) * cbLight._m0[_2710].y) * _2778) * _2779) + _2583;
        _2699 = (((((_2759 * _2408) + _1114) * cbLight._m0[_2710].z) * _2778) * _2779) + _2585;
    }
    float _2914;
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    if (_2213.y == 0u)
    {
        float _2854 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2854;
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2854;
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2854;
        uvec4 _2869 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2870 = _2869.x;
        uint _2881 = uint((float(_2869.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1050) / _2870))) + floor(float(uint(cbSceneParam._m0[85u].x * _1049) / _2870)));
        float _2891 = (log2(_2857 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2892 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        uint _2895 = uint(isnan(14.0) ? _2892 : (isnan(_2892) ? 14.0 : min(_2892, 14.0)));
        uvec4 _2900 = texelFetch(g_lightClusterGridBuffer, int(((_2895 << 2u) + (_2881 << 6u)) >> 2u));
        uint _2901 = _2900.x;
        uint _2902 = _2869.z;
        float _3002;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        if (((((1u << ((_2902 >> 4u) & 15u)) + 4294967295u) & _2901) == 0u) || ((_2902 & 240u) == 0u))
        {
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
        }
        else
        {
            float _3003;
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3171)
                {
                    frontier_phi_66_pred = _3155;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3170;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3161 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _2855;
                        float _3367 = _3326.y - _2856;
                        float _3368 = _3326.z - _2857;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_1068, _1071, _1074), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4771 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _2855;
                        float _3402 = (-0.0) - _2856;
                        float _3403 = (-0.0) - _2857;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3418 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _1143;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_1068, _1071, _1074), vec3(_3408, _3409, _3410));
                        float _4787 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3443 = dot(vec3(_1068, _1071, _1074), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4798 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3386 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3376) + _3452;
                        float _4809 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4820 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) / ((_3450 * _3450) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3230 = (_3397 * _3345.x) + _3303;
                        _3231 = (_3397 * _3345.y) + _3304;
                        _3232 = (_3397 * _3345.z) + _3305;
                        _3227 = (_3478 * _3362.x) + _3300;
                        _3228 = (_3478 * _3362.y) + _3301;
                        _3229 = (_3478 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                _3003 = frontier_phi_66_pred;
                _3013 = frontier_phi_66_pred_1;
                _3011 = frontier_phi_66_pred_2;
                _3009 = frontier_phi_66_pred_3;
                _3007 = frontier_phi_66_pred_4;
                _3005 = frontier_phi_66_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _3003;
                    _3156 = _3005;
                    _3157 = _3007;
                    _3158 = _3009;
                    _3159 = _3011;
                    _3160 = _3013;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
        }
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.z;
        uint _3019 = (_3017 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3019) & _2901) == 0u)
        {
            _3123 = _3002;
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
            float _3149 = _3148 * _2855;
            float _3150 = _3148 * _2856;
            float _3151 = _3148 * _2857;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3019 < ((_3017 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3283 = _3002;
                float _3284 = _3004;
                float _3285 = _3006;
                float _3286 = _3008;
                float _3287 = _3010;
                float _3288 = _3012;
                uint _3289 = _3019;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2895 << 5u) + (_2881 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3299)
                    {
                        frontier_phi_77_pred = _3288;
                        frontier_phi_77_pred_1 = _3287;
                        frontier_phi_77_pred_2 = _3286;
                        frontier_phi_77_pred_3 = _3285;
                        frontier_phi_77_pred_4 = _3284;
                        frontier_phi_77_pred_5 = _3283;
                    }
                    else
                    {
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        uint _3511 = _3298;
                        uint _3512;
                        vec4 _3537;
                        float _3538;
                        vec4 _3553;
                        vec3 _3565;
                        vec4 _3580;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3522 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3511));
                            _3512 = (_3511 + 4294967295u) & _3511;
                            uint _3524 = _3522 * 40u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3538 = _3537.w;
                            uint _3540 = (_3522 * 40u) + 4u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3522 * 40u) + 8u;
                            _3565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x));
                            uint _3567 = (_3522 * 40u) + 16u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3522 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3522 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3522 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2857, _3629.z, fma(_2856, _3629.y, _3629.x * _2855)) + _3629.w;
                            _3642 = !((fma(_2857, _3610.z, fma(_2856, _3610.y, _3610.x * _2855)) + _3610.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3537.x - _2855;
                                float _3670 = _3537.y - _2856;
                                float _3671 = _3537.z - _2857;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3538 * _3538));
                                float _4831 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3687 = sqrt(_3672) * _3553.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_1068, _1071, _1074))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2857, _3580.z, fma(_2856, _3580.y, _3580.x * _2855)) + _3580.w) / _3641;
                                float _3701 = (fma(_2857, _3595.z, fma(_2856, _3595.y, _3595.x * _2855)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4847 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _1143;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3149;
                                float _3731 = _3677 - _3150;
                                float _3732 = _3678 - _3151;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_1068, _1071, _1074), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4858 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3744 = dot(vec3(_1068, _1071, _1074), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4869 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_1068, _1071, _1074), vec3(_3676, _3677, _3678))) + _3753;
                                float _4880 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4891 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3707 * _3553.y;
                                frontier_phi_83_pred_1 = _3707 * _3553.x;
                                frontier_phi_83_pred_2 = _3781 * _3565.z;
                                frontier_phi_83_pred_3 = _3781 * _3565.y;
                                frontier_phi_83_pred_4 = _3781 * _3565.x;
                                frontier_phi_83_pred_5 = _3707 * _3553.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_83_pred;
                            _3788 = frontier_phi_83_pred_1;
                            _3787 = frontier_phi_83_pred_2;
                            _3786 = frontier_phi_83_pred_3;
                            _3785 = frontier_phi_83_pred_4;
                            _3790 = frontier_phi_83_pred_5;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            if (_3512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3512;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3497;
                        frontier_phi_77_pred_1 = _3496;
                        frontier_phi_77_pred_2 = _3495;
                        frontier_phi_77_pred_3 = _3494;
                        frontier_phi_77_pred_4 = _3493;
                        frontier_phi_77_pred_5 = _3492;
                    }
                    _3134 = frontier_phi_77_pred;
                    _3132 = frontier_phi_77_pred_1;
                    _3130 = frontier_phi_77_pred_2;
                    _3128 = frontier_phi_77_pred_3;
                    _3126 = frontier_phi_77_pred_4;
                    _3124 = frontier_phi_77_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3124;
                        _3284 = _3126;
                        _3285 = _3128;
                        _3286 = _3130;
                        _3287 = _3132;
                        _3288 = _3134;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3128;
                frontier_phi_58_59_ladder_1 = _3134;
                frontier_phi_58_59_ladder_2 = _3132;
                frontier_phi_58_59_ladder_3 = _3130;
                frontier_phi_58_59_ladder_4 = _3126;
                frontier_phi_58_59_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_58_59_ladder = _3006;
                frontier_phi_58_59_ladder_1 = _3012;
                frontier_phi_58_59_ladder_2 = _3010;
                frontier_phi_58_59_ladder_3 = _3008;
                frontier_phi_58_59_ladder_4 = _3004;
                frontier_phi_58_59_ladder_5 = _3002;
            }
            _3123 = frontier_phi_58_59_ladder_5;
            _3125 = frontier_phi_58_59_ladder_4;
            _3127 = frontier_phi_58_59_ladder;
            _3129 = frontier_phi_58_59_ladder_3;
            _3131 = frontier_phi_58_59_ladder_2;
            _3133 = frontier_phi_58_59_ladder_1;
        }
        float _3138 = isnan(1.0) ? _1127 : (isnan(_1127) ? 1.0 : min(_1127, 1.0));
        _2914 = (_3138 * _3129) + _2347;
        _2916 = (_3138 * _3131) + _2349;
        _2918 = (_3138 * _3133) + _2351;
        _2920 = ((_3123 * _1111) * _3138) + _2695;
        _2922 = ((_3125 * _1113) * _3138) + _2697;
        _2924 = ((_3127 * _1114) * _3138) + _2699;
    }
    else
    {
        _2914 = _2347;
        _2916 = _2349;
        _2918 = _2351;
        _2920 = _2695;
        _2922 = _2697;
        _2924 = _2699;
    }
    float _4907 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _4918 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4929 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2941 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2914 + ((isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0))) * _1127))) + ((_2920 + ((isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _2942 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2916 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1127))) + ((_2922 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2918 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1127))) + ((_2924 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1964)) * cbPerFrame._m0[3u].x);
    uint _2944 = _269 + 6u;
    float _2952 = _1049 / cbSceneParam._m0[86u].x;
    float _2953 = _1050 / cbSceneParam._m0[86u].y;
    vec4 _2967 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, (log2((isnan(cbSceneParam._m0[77u].w) ? _972 : (isnan(_972) ? cbSceneParam._m0[77u].w : min(_972, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2969 = _2967.x;
    float _2970 = _2967.y;
    float _2971 = _2967.z;
    float _2972 = _2967.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_972 > cbSceneParam._m0[78u].w)
    {
        float _3027 = isnan(_972) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _972 : min(cbSceneParam._m0[80u].w, _972));
        float _3028 = _3027 / _972;
        float _3039 = _3028 * _1022;
        float _3040 = _1023 * _3028;
        float _3041 = (-0.0) - _3040;
        float _3043 = _3028 * _1024;
        float _3045 = (cbSceneParam._m0[77u].w * _3041) / _3027;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3040;
        float _3053 = sqrt(((_3039 * _3039) + (_3040 * _3040)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3027)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3041 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3186 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3240 = ((abs(_3053 / _3041) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3063 * _3195) - exp2(_3063 * _3196)) * _3184))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2952, _2953, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2972);
        _3065 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2969;
        _3067 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2970;
        _3069 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2971;
        _3071 = _3251 * _2972;
    }
    else
    {
        _3065 = _2969;
        _3067 = _2970;
        _3069 = _2971;
        _3071 = _2972;
    }
    bool _3278;
    vec4 _3081;
    vec4 _3103;
    float _3105;
    float _3109;
    float _3110;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        _3081 = cbMatDynParam._m0[0u];
        float _3083 = roundEven(_3081.y);
        bool _3084 = _3083 == 3.0;
        float _3085 = log2(_3071);
        float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * _2941;
        float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * _2942;
        float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * _2943;
        float _3101 = _1038 + (-0.5);
        _3103 = cbMtdParam._m0[1u];
        _3105 = _3103.y * _3101;
        float _3108 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = _3108 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
        _3111 = _3108 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
        _3112 = _3101 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3112) < 0.5)
            {
                _3278 = true;
                break;
            }
        }
        uint _3219 = _1087 + uint(_3081.w);
        if ((cbInstanceData._m0[_3219].w < 1.0) && ((cbInstanceData._m0[_3219].w + _3112) < 0.5))
        {
            _3278 = true;
            break;
        }
        if ((_3105 + 1.0) < _3103.x)
        {
            _3278 = true;
            break;
        }
        _3278 = false;
        break;
    }
    float _3483;
    if (_3278)
    {
        discard_state = true;
        _3483 = 0.0;
    }
    else
    {
        _3483 = cbInstanceData._m0[_2944].w;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3483;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2944].w;
    discard_exit();
}


