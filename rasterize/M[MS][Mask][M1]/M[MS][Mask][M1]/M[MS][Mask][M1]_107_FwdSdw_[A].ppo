#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1531;
float _4193;
float _4194;
float _4195;
float _4196;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4205 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4216 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4227 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _625 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _642 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _644 = _642.x;
    float _645 = _642.y;
    float _646 = _642.z;
    float _653 = ((_625.x - _644) * _450) + _644;
    float _654 = ((_625.y - _645) * _450) + _645;
    float _655 = ((_625.z - _646) * _450) + _646;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _678 = ((_667.x - _653) * _523) + _653;
    float _679 = ((_667.y - _654) * _523) + _654;
    float _680 = ((_667.z - _655) * _523) + _655;
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _705 = ((_692.z - _680) * _593) + _680;
    float _708 = ((((_692.x - _678) * _593) + _678) * 2.0) + (-1.0);
    float _710 = ((((_692.y - _679) * _593) + _679) * 2.0) + (-1.0);
    float _711 = dot(vec2(_708, _710), vec2(_708, _710));
    float _4238 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _716 = sqrt(1.0 - (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))));
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _742 = (((_730.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _708;
    float _743 = (((_730.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _710;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _757 = _755.x;
    float _758 = 1.0 - _757;
    float _786 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_757 - _758) * cbMtdParam._m0[24u].w) + _758) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4249 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _787 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _795 = ((((cbMtdParam._m0[10u].x - _606) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _787) + _606;
    float _796 = ((((cbMtdParam._m0[10u].y - _609) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _787) + _609;
    float _797 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _612)) * _787) + _612;
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _825 = _823.x;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _825) * _450) + _825;
    float _860 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _842) * _523) + _842;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _860) * _593) + _860;
    float _881 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _877) * cbMtdParam._m0[19u].z) + _877;
    float _883 = _881 - (_881 * _787);
    float _887 = (cbMtdParam._m0[19u].w * (_730.z - _705)) + _705;
    float _891 = ((cbMtdParam._m0[23u].x - _887) * _787) + _887;
    vec4 _910 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _916 = (_910.x * 2.0) + (-1.0);
    float _917 = (_910.y * 2.0) + (-1.0);
    float _918 = dot(vec2(_916, _917), vec2(_916, _917));
    float _4260 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _934 = (_787 * (((cbMtdParam._m0[22u].z * _742) - _742) + _916)) + _742;
    float _935 = (_787 * (((cbMtdParam._m0[22u].z * _743) - _743) + _917)) + _743;
    float _936 = (_787 * (sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _716)) + _716;
    float _938 = cbMtdParam._m0[22u].x + _730.w;
    float _941 = fma(_936, _258 * NORMAL.x, fma(_935, _265 * TANGENT.x, (_251 * _243) * _934));
    float _944 = fma(_936, _258 * NORMAL.y, fma(_935, _265 * TANGENT.y, (_251 * _244) * _934));
    float _947 = fma(_936, _258 * NORMAL.z, fma(_935, _265 * TANGENT.z, (_251 * _245) * _934));
    float _951 = inversesqrt(dot(vec3(_941, _944, _947), vec3(_941, _944, _947)));
    float _952 = _951 * _941;
    float _953 = _951 * _944;
    float _954 = _951 * _947;
    float _4271 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _955 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4293 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _4304 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _4315 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _4326 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _960 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _974 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1024 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1014);
    float _1025 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1014);
    float _1026 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1014);
    float _1030 = inversesqrt(dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026)));
    float _1031 = _1024 * _1030;
    float _1032 = _1025 * _1030;
    float _1033 = _1026 * _1030;
    vec4 _1038 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1040 = _1038.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1212 = sqrt(((_1024 * _1024) + (_1025 * _1025)) + (_1026 * _1026));
        float _1218 = (cbMatDynParam._m0[5u].x * _1212) + cbMatDynParam._m0[5u].y;
        float _4337 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1223 = (cbMatDynParam._m0[5u].z * _1212) + cbMatDynParam._m0[5u].w;
        float _4348 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) - _1219)) + _1219) < ((_1040 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1051 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1052 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1070 = fma(_954, cbSceneParam._m0[5u].z, fma(_953, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _952));
    float _1073 = fma(_954, cbSceneParam._m0[6u].z, fma(_953, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _952));
    float _1076 = fma(_954, cbSceneParam._m0[7u].z, fma(_953, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _952));
    uint _1089 = _271 + 9u;
    uint _1090 = _1089 + uint(cbMatDynParam._m0[0u].w);
    float _1096 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * cbInstanceData._m0[_1090].x;
    float _1097 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1090].y;
    float _1098 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1090].z;
    float _4359 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
    float _4370 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _1102 = 1.0 - _960;
    float _1103 = _1099 * _1102;
    float _1104 = _1100 * _1102;
    float _1105 = _1101 * _1102;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _960;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _960;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _960;
    float _1113 = _1110 + 0.039999999105930328369140625;
    float _1115 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    vec4 _1125 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1051, cbSceneParam._m0[86u].y * _1052));
    float _1129 = ((isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * TEXCOORD_5.w) * _1125.x;
    float _1130 = dot(vec3(_952, _953, _954), vec3(_1031, _1032, _1033));
    float _1133 = _1130 * 2.0;
    float _1137 = (_1133 * _952) - _1031;
    float _1138 = (_1133 * _953) - _1032;
    float _1139 = (_1133 * _954) - _1033;
    float _1143 = abs(dot(vec3(_1031, _1032, _1033), vec3(_952, _953, _954)));
    float _4392 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1145 = sqrt(_955);
    float _1158 = exp2((_1145 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1145 * 3.0));
    float _1164 = (1.0 - _1158) * ((_1145 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1165 = _1158 * _1145;
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1201 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1530;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1255 = fma(_1201, cbModelParam._m0[26u].z, fma(_1197, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1193));
        float _1259 = fma(_1201, cbModelParam._m0[27u].z, fma(_1197, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1193));
        float _1263 = fma(_1201, cbModelParam._m0[28u].z, fma(_1197, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1193));
        float _1288 = _1193 + _952;
        float _1289 = _1197 + _953;
        float _1290 = _1201 + _954;
        float _1300 = fma(_1290, cbModelParam._m0[26u].z, fma(_1289, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1288)) - _1255;
        float _1301 = fma(_1290, cbModelParam._m0[27u].z, fma(_1289, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1288)) - _1259;
        float _1302 = fma(_1290, cbModelParam._m0[28u].z, fma(_1289, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1288)) - _1263;
        float _1306 = inversesqrt(dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302)));
        float _1319 = ((_1306 * _1300) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1255 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1306 * _1301) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1259 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1306 * _1302) / cbModelParam._m0[34u].z) + ((((((_1263 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1319, _1320, _1321), 0.0);
        float _1358 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1324.x + (-0.5));
        float _1360 = _1358 * (_1324.y + (-0.5));
        float _1361 = _1358 * (_1324.z + (-0.5));
        float _1368 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1331.x + (-0.5));
        float _1370 = _1368 * (_1331.y + (-0.5));
        float _1371 = _1368 * (_1331.z + (-0.5));
        float _1378 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1379 = _1378 * (_1338.x + (-0.5));
        float _1380 = _1378 * (_1338.y + (-0.5));
        float _1381 = _1378 * (_1338.z + (-0.5));
        float _1388 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1345.x + (-0.5));
        float _1390 = _1388 * (_1345.y + (-0.5));
        float _1391 = _1388 * (_1345.z + (-0.5));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = _1359 * 0.5;
        float _1396 = _1369 * 0.5;
        float _1397 = _1379 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1412 = (dot(vec3(_952, _953, _954), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1422 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _4440 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1424 + 1.0))) + _1429) * _1392;
        float _1439 = _1360 * 0.5;
        float _1440 = _1370 * 0.5;
        float _1441 = _1380 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_952, _953, _954), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1466 + 1.0))) + _1471) * _1393;
        float _1481 = _1361 * 0.5;
        float _1482 = _1371 * 0.5;
        float _1483 = _1381 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_952, _953, _954), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4484 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4495 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4506 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_1508 + 1.0))) + _1513) * _1394;
        _1530 = _1361;
        _1532 = _1360;
        _1533 = _1359;
        _1534 = _1371;
        _1535 = _1370;
        _1536 = _1369;
        _1537 = _1381;
        _1538 = _1380;
        _1539 = _1379;
        _1540 = _1394;
        _1541 = _1393;
        _1542 = _1392;
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
    }
    else
    {
        _1530 = _1531;
        _1532 = _1531;
        _1533 = _1531;
        _1534 = _1531;
        _1535 = _1531;
        _1536 = _1531;
        _1537 = _1531;
        _1538 = _1531;
        _1539 = _1531;
        _1540 = _1531;
        _1541 = _1531;
        _1542 = _1531;
        _1543 = 0.0;
        _1544 = 0.0;
        _1545 = 0.0;
    }
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1571 = fma(_1201, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1193));
        float _1575 = fma(_1201, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1193));
        float _1579 = fma(_1201, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1193));
        float _1602 = _1193 + _952;
        float _1603 = _1197 + _953;
        float _1604 = _1201 + _954;
        float _1614 = fma(_1604, cbModelParam._m0[30u].z, fma(_1603, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1602)) - _1571;
        float _1615 = fma(_1604, cbModelParam._m0[31u].z, fma(_1603, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1602)) - _1575;
        float _1616 = fma(_1604, cbModelParam._m0[32u].z, fma(_1603, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1602)) - _1579;
        float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
        float _1633 = ((_1620 * _1614) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1571 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1634 = ((_1620 * _1615) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1575 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1620 * _1616) / cbModelParam._m0[35u].z) + ((((((_1579 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1651 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        vec4 _1658 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1633, _1634, _1635), 0.0);
        float _1670 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1637.x + (-0.5));
        float _1672 = _1670 * (_1637.y + (-0.5));
        float _1673 = _1670 * (_1637.z + (-0.5));
        float _1680 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1644.x + (-0.5));
        float _1682 = _1680 * (_1644.y + (-0.5));
        float _1683 = _1680 * (_1644.z + (-0.5));
        float _1690 = exp2((_1651.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1651.x + (-0.5));
        float _1692 = _1690 * (_1651.y + (-0.5));
        float _1693 = _1690 * (_1651.z + (-0.5));
        float _1700 = exp2((_1658.w + (-0.5)) * 20.0) * 2.0;
        float _1701 = _1700 * (_1658.x + (-0.5));
        float _1702 = _1700 * (_1658.y + (-0.5));
        float _1703 = _1700 * (_1658.z + (-0.5));
        float _1704 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = _1671 * 0.5;
        float _1708 = _1681 * 0.5;
        float _1709 = _1691 * 0.5;
        float _1710 = dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709));
        float _1715 = (_1710 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1710);
        float _1723 = (dot(vec3(_952, _953, _954), vec3(_1715 * _1707, _1715 * _1708, _1715 * _1709)) + 1.0) * 0.5;
        float _4547 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1732 = sqrt(((_1708 * _1708) + (_1707 * _1707)) + (_1709 * _1709)) / (_1704 + 9.9999997473787516355514526367188e-06);
        float _4558 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1733 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
        float _1734 = _1733 * 2.0;
        float _1738 = (1.0 - _1733) / (_1733 + 1.0);
        float _4569 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1748 = ((((1.0 - _1739) * (_1734 + 2.0)) * exp2(log2(isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_1734 + 1.0))) + _1739) * _1704;
        float _1749 = _1672 * 0.5;
        float _1750 = _1682 * 0.5;
        float _1751 = _1692 * 0.5;
        float _1752 = dot(vec3(_1749, _1750, _1751), vec3(_1749, _1750, _1751));
        float _1757 = (_1752 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1752);
        float _1765 = (dot(vec3(_952, _953, _954), vec3(_1757 * _1749, _1757 * _1750, _1757 * _1751)) + 1.0) * 0.5;
        float _4580 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1774 = sqrt(((_1750 * _1750) + (_1749 * _1749)) + (_1751 * _1751)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4591 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1775 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _1776 = _1775 * 2.0;
        float _1780 = (1.0 - _1775) / (_1775 + 1.0);
        float _4602 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1781 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1790 = ((((1.0 - _1781) * (_1776 + 2.0)) * exp2(log2(isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (_1776 + 1.0))) + _1781) * _1705;
        float _1791 = _1673 * 0.5;
        float _1792 = _1683 * 0.5;
        float _1793 = _1693 * 0.5;
        float _1794 = dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793));
        float _1799 = (_1794 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1794);
        float _1807 = (dot(vec3(_952, _953, _954), vec3(_1799 * _1791, _1799 * _1792, _1799 * _1793)) + 1.0) * 0.5;
        float _4613 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1816 = sqrt(((_1792 * _1792) + (_1791 * _1791)) + (_1793 * _1793)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4624 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
        float _1818 = _1817 * 2.0;
        float _1822 = (1.0 - _1817) / (_1817 + 1.0);
        float _4635 = isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0));
        float _1823 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1832 = ((((1.0 - _1823) * (_1818 + 2.0)) * exp2(log2(isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_1818 + 1.0))) + _1823) * _1706;
        _1840 = _1673;
        _1841 = _1672;
        _1842 = _1671;
        _1843 = _1683;
        _1844 = _1682;
        _1845 = _1681;
        _1846 = _1693;
        _1847 = _1692;
        _1848 = _1691;
        _1849 = _1706;
        _1850 = _1705;
        _1851 = _1704;
        _1852 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)));
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0)));
    }
    else
    {
        _1840 = _1531;
        _1841 = _1531;
        _1842 = _1531;
        _1843 = _1531;
        _1844 = _1531;
        _1845 = _1531;
        _1846 = _1531;
        _1847 = _1531;
        _1848 = _1531;
        _1849 = _1531;
        _1850 = _1531;
        _1851 = _1531;
        _1852 = 0.0;
        _1853 = 0.0;
        _1854 = 0.0;
    }
    float _1864 = (cbModelParam._m0[1u].x * (_1852 - _1543)) + _1543;
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1544)) + _1544;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1545)) + _1545;
    float _1887 = fma(_1866, cbSceneParam._m0[89u].z, fma(_1865, cbSceneParam._m0[89u].y, _1864 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1866, cbSceneParam._m0[90u].z, fma(_1865, cbSceneParam._m0[90u].y, _1864 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1866, cbSceneParam._m0[91u].z, fma(_1865, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1864));
    float _1908 = _1137 * 0.5;
    float _1909 = _1138 * 0.5;
    float _1910 = _1139 * 0.5;
    float _1911 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1914 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1917 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1840, _1843, _1846, _1849));
    float _1951;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1924 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1530, _1534, _1537, _1540));
        float _1928 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1932 = dot(vec4(_1908, _1909, _1910, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1939 = dot(vec4(cbModelParam._m0[39u]), vec4(_1908, _1909, _1910, 1.0));
        _1951 = dot(vec3(isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1951 = 1.0;
    }
    float _1962;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1953 = dot(vec4(cbModelParam._m0[40u]), vec4(_1908, _1909, _1910, 1.0));
        _1962 = dot(vec3(isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1953) ? 0.0 : (isnan(0.0) ? _1953 : max(0.0, _1953))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1962 = 1.0;
    }
    float _1966 = (_1962 * cbModelParam._m0[1u].x) + (_1951 * (1.0 - cbModelParam._m0[1u].x));
    float _1976 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _955);
    float _1977 = isnan(_1976) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1976 : min(cbModelParam._m0[25u].z, _1976));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1201, cbModelParam._m0[13u].z, fma(_1197, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1193)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1201, cbModelParam._m0[14u].z, fma(_1197, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1193)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1201, cbModelParam._m0[15u].z, fma(_1197, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1193)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1139, cbModelParam._m0[13u].z, fma(_1138, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137));
        float _2039 = fma(_1139, cbModelParam._m0[14u].z, fma(_1138, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137));
        float _2042 = fma(_1139, cbModelParam._m0[15u].z, fma(_1138, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2070 = frontier_phi_17_15_ladder;
        }
        float _2242;
        if (_2039 > 0.0)
        {
            _2242 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2242 = frontier_phi_26_22_ladder;
        }
        float _2537;
        if (_2042 > 0.0)
        {
            _2537 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2537 = frontier_phi_38_33_ladder;
        }
        float _2539 = isnan(_2242) ? _2070 : (isnan(_2070) ? _2242 : min(_2070, _2242));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _2036) + _2025;
        float _2545 = (_2540 * _2039) + _2029;
        float _2546 = (_2540 * _2042) + _2033;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2547;
        float _2551 = _2547 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 > _2551) || ((_2545 < _2549) || ((_2544 < _2549) || (_2544 > _2551))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2691 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2546, cbModelParam._m0[9u].z, fma(_2545, cbModelParam._m0[9u].y, _2544 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2546, cbModelParam._m0[10u].z, fma(_2545, cbModelParam._m0[10u].y, _2544 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2546, cbModelParam._m0[11u].z, fma(_2545, cbModelParam._m0[11u].y, _2544 * cbModelParam._m0[11u].x))), _1977);
            frontier_phi_16_38_ladder = _2691.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2691.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2691.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_16_38_ladder_2;
        _2060 = frontier_phi_16_38_ladder_1;
        _2062 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1137, _1138, _1139), _1977);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _955);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2157;
    float _2159;
    float _2161;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2121 = fma(_1201, cbModelParam._m0[21u].z, fma(_1197, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1193)) + cbModelParam._m0[21u].w;
        float _2125 = fma(_1201, cbModelParam._m0[22u].z, fma(_1197, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1193)) + cbModelParam._m0[22u].w;
        float _2129 = fma(_1201, cbModelParam._m0[23u].z, fma(_1197, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1193)) + cbModelParam._m0[23u].w;
        float _2132 = fma(_1139, cbModelParam._m0[21u].z, fma(_1138, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137));
        float _2135 = fma(_1139, cbModelParam._m0[22u].z, fma(_1138, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137));
        float _2138 = fma(_1139, cbModelParam._m0[23u].z, fma(_1138, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137));
        float _2247;
        if (_2132 > 0.0)
        {
            _2247 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2247 = frontier_phi_28_24_ladder;
        }
        float _2564;
        if (_2135 > 0.0)
        {
            _2564 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2564 = frontier_phi_40_35_ladder;
        }
        float _2902;
        if (_2138 > 0.0)
        {
            _2902 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2902 = frontier_phi_50_47_ladder;
        }
        float _2904 = isnan(_2564) ? _2247 : (isnan(_2247) ? _2564 : min(_2247, _2564));
        float _2905 = isnan(_2902) ? _2904 : (isnan(_2904) ? _2902 : min(_2904, _2902));
        float _2909 = (_2905 * _2132) + _2121;
        float _2910 = (_2905 * _2135) + _2125;
        float _2911 = (_2905 * _2138) + _2129;
        float _2912 = _2905 * 9.9999997473787516355514526367188e-05;
        float _2913 = (-1.0) - _2912;
        float _2915 = _2912 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2911 > _2915) || ((_2911 < _2913) || ((_2910 > _2915) || ((_2910 < _2913) || ((_2909 < _2913) || (_2909 > _2915))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2911, cbModelParam._m0[17u].z, fma(_2910, cbModelParam._m0[17u].y, _2909 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2911, cbModelParam._m0[18u].z, fma(_2910, cbModelParam._m0[18u].y, _2909 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2911, cbModelParam._m0[19u].z, fma(_2910, cbModelParam._m0[19u].y, _2909 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_25_50_ladder = _3033.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3033.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3033.x * cbModelParam._m0[1u].z;
        }
        _2157 = frontier_phi_25_50_ladder_2;
        _2159 = frontier_phi_25_50_ladder_1;
        _2161 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1137, _1138, _1139), _2067);
        _2157 = _2141.x * cbModelParam._m0[1u].z;
        _2159 = _2141.y * cbModelParam._m0[1u].z;
        _2161 = _2141.z * cbModelParam._m0[1u].z;
    }
    float _2174 = (((_1164 * _1113) + _1165) * _1129) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2176 = (((_1164 * _1115) + _1165) * _1129) * ((cbModelParam._m0[1u].w * (_2159 - _2060)) + _2060);
    float _2178 = (((_1164 * _1116) + _1165) * _1129) * ((cbModelParam._m0[1u].w * (_2161 - _2062)) + _2062);
    float _2181 = fma(_2178, cbSceneParam._m0[89u].z, fma(_2176, cbSceneParam._m0[89u].y, _2174 * cbSceneParam._m0[89u].x));
    float _2184 = fma(_2178, cbSceneParam._m0[90u].z, fma(_2176, cbSceneParam._m0[90u].y, _2174 * cbSceneParam._m0[90u].x));
    float _2187 = fma(_2178, cbSceneParam._m0[91u].z, fma(_2176, cbSceneParam._m0[91u].y, _2174 * cbSceneParam._m0[91u].x));
    float _2221 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2225 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2229 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2233 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2234 = _2221 / _2233;
    float _2235 = _2225 / _2233;
    float _2236 = _2229 / _2233;
    float _2383;
    float _2384;
    float _2385;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2263 = ((uint(_2236 > cbSceneParam._m0[59u].y) + uint(_2236 > cbSceneParam._m0[59u].x)) + uint(_2236 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2264 = _2263 + 43u;
        uint _2272 = _2263 + 44u;
        uint _2280 = _2263 + 45u;
        uint _2288 = _2263 + 46u;
        float _2299 = fma(_2233, cbSceneParam._m0[_2264].w, fma(_2229, cbSceneParam._m0[_2264].z, fma(_2225, cbSceneParam._m0[_2264].y, _2221 * cbSceneParam._m0[_2264].x)));
        float _2303 = fma(_2233, cbSceneParam._m0[_2272].w, fma(_2229, cbSceneParam._m0[_2272].z, fma(_2225, cbSceneParam._m0[_2272].y, _2221 * cbSceneParam._m0[_2272].x)));
        float _2311 = fma(_2233, cbSceneParam._m0[_2288].w, fma(_2229, cbSceneParam._m0[_2288].z, fma(_2225, cbSceneParam._m0[_2288].y, _2221 * cbSceneParam._m0[_2288].x)));
        float _2316 = cbSceneParam._m0[33u].z * _2311;
        float _2318 = cbSceneParam._m0[33u].w * _2311;
        float _2321 = fma(_2233, cbSceneParam._m0[_2280].w, fma(_2229, cbSceneParam._m0[_2280].z, fma(_2225, cbSceneParam._m0[_2280].y, _2221 * cbSceneParam._m0[_2280].x))) / _2311;
        float _2369 = (cbSceneParam._m0[33u].x - sqrt(((_2235 * _2235) + (_2234 * _2234)) + (_2236 * _2236))) * cbSceneParam._m0[33u].y;
        float _4761 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2376 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2316 + _2299) / _2311, (_2318 + _2303) / _2311), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2318 + _2299) / _2311, (_2303 - _2316) / _2311), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2299 - _2316) / _2311, (_2303 - _2318) / _2311), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2299 - _2318) / _2311, (_2316 + _2303) / _2311), _2321), 0.0)).x), vec4(0.25)));
        _2383 = 1.0 - (_2376 * cbSceneParam._m0[34u].x);
        _2384 = 1.0 - (_2376 * cbSceneParam._m0[34u].y);
        _2385 = 1.0 - (_2376 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2383 = 1.0;
        _2384 = 1.0;
        _2385 = 1.0;
    }
    float _2449;
    float _2451;
    float _2453;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2437 = fma(_2233, cbSceneParam._m0[63u].w, fma(_2229, cbSceneParam._m0[63u].z, fma(_2225, cbSceneParam._m0[63u].y, _2221 * cbSceneParam._m0[63u].x)));
        float _2438 = fma(_2233, cbSceneParam._m0[60u].w, fma(_2229, cbSceneParam._m0[60u].z, fma(_2225, cbSceneParam._m0[60u].y, _2221 * cbSceneParam._m0[60u].x))) / _2437;
        float _2439 = fma(_2233, cbSceneParam._m0[61u].w, fma(_2229, cbSceneParam._m0[61u].z, fma(_2225, cbSceneParam._m0[61u].y, _2221 * cbSceneParam._m0[61u].x))) / _2437;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2438 >= cbSceneParam._m0[64u].x) && (_2439 >= cbSceneParam._m0[64u].y)) && (_2438 <= cbSceneParam._m0[64u].z)) && (_2439 <= cbSceneParam._m0[64u].w))
        {
            float _2577 = fma(_2233, cbSceneParam._m0[62u].w, fma(_2229, cbSceneParam._m0[62u].z, fma(_2225, cbSceneParam._m0[62u].y, _2221 * cbSceneParam._m0[62u].x))) / _2437;
            float _2581 = isnan(cbSceneParam._m0[41u].w) ? _2577 : (isnan(_2577) ? cbSceneParam._m0[41u].w : max(_2577, cbSceneParam._m0[41u].w));
            float _2624 = (cbSceneParam._m0[33u].x - sqrt(((_2235 * _2235) + (_2234 * _2234)) + (_2236 * _2236))) * cbSceneParam._m0[33u].y;
            float _4777 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
            float _2631 = (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2438, cbSceneParam._m0[33u].w + _2439), _2581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2438, _2439 - cbSceneParam._m0[33u].z), _2581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2438 - cbSceneParam._m0[33u].z, _2439 - cbSceneParam._m0[33u].w), _2581), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2438 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2439), _2581), 0.0)).x), vec4(0.25)));
            float _2635 = 1.0 - (_2631 * cbSceneParam._m0[34u].x);
            float _2636 = 1.0 - (_2631 * cbSceneParam._m0[34u].y);
            float _2637 = 1.0 - (_2631 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2637) ? _2385 : (isnan(_2385) ? _2637 : min(_2385, _2637));
            frontier_phi_37_36_ladder_1 = isnan(_2636) ? _2384 : (isnan(_2384) ? _2636 : min(_2384, _2636));
            frontier_phi_37_36_ladder_2 = isnan(_2635) ? _2383 : (isnan(_2383) ? _2635 : min(_2383, _2635));
        }
        else
        {
            frontier_phi_37_36_ladder = _2385;
            frontier_phi_37_36_ladder_1 = _2384;
            frontier_phi_37_36_ladder_2 = _2383;
        }
        _2449 = frontier_phi_37_36_ladder_2;
        _2451 = frontier_phi_37_36_ladder_1;
        _2453 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2449 = _2383;
        _2451 = _2384;
        _2453 = _2385;
    }
    uvec4 _2458 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2460 = _2458.x * 14u;
    uint _2461 = _2460 + 13u;
    float _2468 = _1129 + (-1.0);
    float _2473 = (cbLight._m0[_2461].x * _2468) + 1.0;
    float _2474 = (cbLight._m0[_2461].y * _2468) + 1.0;
    float _2475 = (cbLight._m0[_2461].z * _2468) + 1.0;
    float _2476 = (cbLight._m0[_2461].w * _2468) + 1.0;
    uint _2477 = _2460 + 5u;
    float _2483 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    uint _2487 = _2460 + 4u;
    float _2496 = isnan(1.0) ? _2473 : (isnan(_2473) ? 1.0 : min(_2473, 1.0));
    uint _2500 = _2460 | 1u;
    float _2511 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_952, _953, _954));
    float _2514 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_952, _953, _954));
    float _4813 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _4824 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
    float _2519 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * 0.3183098733425140380859375;
    float _2521 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * 0.3183098733425140380859375;
    float _2528 = ((cbLight._m0[_2477].x * _2483) * _2521) + (((cbLight._m0[_2487].x * _2449) * _2496) * _2519);
    float _2529 = ((_2483 * cbLight._m0[_2477].y) * _2521) + (((cbLight._m0[_2487].y * _2451) * _2496) * _2519);
    float _2530 = ((_2483 * cbLight._m0[_2477].z) * _2521) + (((cbLight._m0[_2487].z * _2453) * _2496) * _2519);
    uvec4 _2534 = floatBitsToUint(cbLight._m0[_2460 + 12u]);
    bool _2536 = _2534.x == 0u;
    float _2638;
    float _2640;
    float _2642;
    if (_2536)
    {
        _2638 = _2528;
        _2640 = _2529;
        _2642 = _2530;
    }
    else
    {
        uint _2646 = _2460 + 6u;
        float _2662 = (dot(vec3(cbLight._m0[_2460 + 2u].xyz), vec3(_952, _953, _954)) * 0.5) + 0.5;
        float _2663 = _2662 * _2662;
        float _4835 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2664 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2665 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
        _2638 = (((cbLight._m0[_2646].x * 0.3183098733425140380859375) * _2664) * _2665) + _2528;
        _2640 = (((cbLight._m0[_2646].y * 0.3183098733425140380859375) * _2664) * _2665) + _2529;
        _2642 = (((cbLight._m0[_2646].z * 0.3183098733425140380859375) * _2664) * _2665) + _2530;
    }
    bool _2645 = _2534.y == 0u;
    float _2700;
    float _2702;
    float _2704;
    if (_2645)
    {
        _2700 = _2638;
        _2702 = _2640;
        _2704 = _2642;
    }
    else
    {
        uint _2873 = _2460 + 7u;
        float _2889 = (dot(vec3(cbLight._m0[_2460 + 3u].xyz), vec3(_952, _953, _954)) * 0.5) + 0.5;
        float _2890 = _2889 * _2889;
        float _4851 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0));
        float _2891 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2892 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2700 = (((cbLight._m0[_2873].x * 0.3183098733425140380859375) * _2891) * _2892) + _2638;
        _2702 = (((cbLight._m0[_2873].y * 0.3183098733425140380859375) * _2891) * _2892) + _2640;
        _2704 = (((cbLight._m0[_2873].z * 0.3183098733425140380859375) * _2891) * _2892) + _2642;
    }
    uint _2707 = _2460 + 8u;
    float _2720 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _955) * 0.949999988079071044921875);
    float _2721 = _2720 * _2720;
    float _2722 = cbLight._m0[_2460].x + _1031;
    float _2723 = cbLight._m0[_2460].y + _1032;
    float _2724 = cbLight._m0[_2460].z + _1033;
    float _2728 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
    float _2729 = _2728 * _2722;
    float _2730 = _2728 * _2723;
    float _2731 = _2728 * _2724;
    float _2732 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2460].xyz));
    float _4867 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
    float _2735 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
    float _4878 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _2736 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _2737 = dot(vec3(_952, _953, _954), vec3(_2729, _2730, _2731));
    float _4889 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
    float _2740 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2741 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2729, _2730, _2731));
    float _4900 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
    float _2745 = _2721 * _2721;
    float _2749 = ((_2740 * _2740) * (_2745 + (-1.0))) + 1.0;
    float _2757 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
    float _2758 = 0.959999978542327880859375 - _1110;
    float _2760 = 0.959999978542327880859375 - _1111;
    float _2761 = 0.959999978542327880859375 - _1112;
    float _2768 = 1.0 - _2721;
    float _2779 = (0.5 / (((_2736 * ((_2735 * _2768) + _2721)) + 9.9999999392252902907785028219223e-09) + (((_2736 * _2768) + _2721) * _2735))) * _2735;
    float _4911 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
    float _2781 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2745 / ((_2749 * _2749) * 3.141590118408203125));
    uint _2795 = _2460 + 9u;
    float _2806 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2500].w)) * _955) * 0.949999988079071044921875);
    float _2807 = _2806 * _2806;
    float _2808 = cbLight._m0[_2500].x + _1031;
    float _2809 = cbLight._m0[_2500].y + _1032;
    float _2810 = cbLight._m0[_2500].z + _1033;
    float _2814 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
    float _2815 = _2814 * _2808;
    float _2816 = _2814 * _2809;
    float _2817 = _2814 * _2810;
    float _2818 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2500].xyz));
    float _4922 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
    float _2821 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
    float _2822 = dot(vec3(_952, _953, _954), vec3(_2815, _2816, _2817));
    float _4933 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
    float _2825 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
    float _2826 = dot(vec3(cbLight._m0[_2500].xyz), vec3(_2815, _2816, _2817));
    float _4944 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
    float _2830 = _2807 * _2807;
    float _2834 = ((_2825 * _2825) * (_2830 + (-1.0))) + 1.0;
    float _2841 = exp2(log2(1.0 - (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0)))) * 5.0);
    float _2848 = 1.0 - _2807;
    float _2858 = (0.5 / (((_2736 * ((_2821 * _2848) + _2807)) + 9.9999999392252902907785028219223e-09) + (((_2736 * _2848) + _2807) * _2821))) * _2821;
    float _4955 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
    float _2860 = (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2830 / ((_2834 * _2834) * 3.141590118408203125));
    float _2870 = (((((_2841 * _2758) + _1113) * cbLight._m0[_2795].x) * _2860) * _2483) + ((((cbLight._m0[_2707].x * _2449) * ((_2757 * _2758) + _1113)) * _2781) * _2496);
    float _2871 = (((((_2841 * _2760) + _1115) * cbLight._m0[_2795].y) * _2860) * _2483) + ((((cbLight._m0[_2707].y * _2451) * ((_2757 * _2760) + _1115)) * _2781) * _2496);
    float _2872 = (((((_2841 * _2761) + _1116) * cbLight._m0[_2795].z) * _2860) * _2483) + ((((cbLight._m0[_2707].z * _2453) * ((_2757 * _2761) + _1116)) * _2781) * _2496);
    float _2928;
    float _2930;
    float _2932;
    if (_2536)
    {
        _2928 = _2870;
        _2930 = _2871;
        _2932 = _2872;
    }
    else
    {
        uint _2934 = _2460 + 2u;
        uint _2938 = _2460 + 10u;
        float _2952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2934].w)) * _955) * 0.949999988079071044921875);
        float _2953 = _2952 * _2952;
        float _2954 = cbLight._m0[_2934].x + _1031;
        float _2955 = cbLight._m0[_2934].y + _1032;
        float _2956 = cbLight._m0[_2934].z + _1033;
        float _2960 = inversesqrt(dot(vec3(_2954, _2955, _2956), vec3(_2954, _2955, _2956)));
        float _2961 = _2960 * _2954;
        float _2962 = _2960 * _2955;
        float _2963 = _2960 * _2956;
        float _2964 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_2934].xyz));
        float _4966 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
        float _2967 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
        float _2968 = dot(vec3(_952, _953, _954), vec3(_2961, _2962, _2963));
        float _4977 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
        float _2971 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
        float _2972 = dot(vec3(cbLight._m0[_2934].xyz), vec3(_2961, _2962, _2963));
        float _4988 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
        float _2976 = _2953 * _2953;
        float _2980 = ((_2971 * _2971) * (_2976 + (-1.0))) + 1.0;
        float _2987 = exp2(log2(1.0 - (isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0)))) * 5.0);
        float _2994 = 1.0 - _2953;
        float _3004 = (0.5 / (((_2736 * ((_2967 * _2994) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2736 * _2994) + _2953) * _2967))) * _2967;
        float _4999 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        float _3006 = (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0))) * (_2976 / ((_2980 * _2980) * 3.141590118408203125));
        float _3007 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
        _2928 = (((((_2987 * _2758) + _1113) * cbLight._m0[_2938].x) * _3006) * _3007) + _2870;
        _2930 = (((((_2987 * _2760) + _1115) * cbLight._m0[_2938].y) * _3006) * _3007) + _2871;
        _2932 = (((((_2987 * _2761) + _1116) * cbLight._m0[_2938].z) * _3006) * _3007) + _2872;
    }
    float _3038;
    float _3040;
    float _3042;
    if (_2645)
    {
        _3038 = _2928;
        _3040 = _2930;
        _3042 = _2932;
    }
    else
    {
        uint _3049 = _2460 + 3u;
        uint _3053 = _2460 + 11u;
        float _3067 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3049].w)) * _955) * 0.949999988079071044921875);
        float _3068 = _3067 * _3067;
        float _3069 = cbLight._m0[_3049].x + _1031;
        float _3070 = cbLight._m0[_3049].y + _1032;
        float _3071 = cbLight._m0[_3049].z + _1033;
        float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
        float _3076 = _3075 * _3069;
        float _3077 = _3075 * _3070;
        float _3078 = _3075 * _3071;
        float _3079 = dot(vec3(_952, _953, _954), vec3(cbLight._m0[_3049].xyz));
        float _5015 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
        float _3082 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
        float _3083 = dot(vec3(_952, _953, _954), vec3(_3076, _3077, _3078));
        float _5026 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
        float _3086 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _3087 = dot(vec3(cbLight._m0[_3049].xyz), vec3(_3076, _3077, _3078));
        float _5037 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
        float _3091 = _3068 * _3068;
        float _3095 = ((_3086 * _3086) * (_3091 + (-1.0))) + 1.0;
        float _3102 = exp2(log2(1.0 - (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) * 5.0);
        float _3109 = 1.0 - _3068;
        float _3119 = (0.5 / (((_2736 * ((_3082 * _3109) + _3068)) + 9.9999999392252902907785028219223e-09) + (((_2736 * _3109) + _3068) * _3082))) * _3082;
        float _5048 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
        float _3121 = (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3091 / ((_3095 * _3095) * 3.141590118408203125));
        float _3122 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _3038 = (((((_3102 * _2758) + _1113) * cbLight._m0[_3053].x) * _3121) * _3122) + _2928;
        _3040 = (((((_3102 * _2760) + _1115) * cbLight._m0[_3053].y) * _3121) * _3122) + _2930;
        _3042 = (((((_3102 * _2761) + _1116) * cbLight._m0[_3053].z) * _3121) * _3122) + _2932;
    }
    float _3188;
    float _3190;
    float _3192;
    float _3194;
    float _3196;
    float _3198;
    if (_2458.y == 0u)
    {
        uvec4 _3143 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3144 = _3143.x;
        uint _3155 = uint((float(_3143.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1052) / _3144))) + floor(float(uint(cbSceneParam._m0[85u].x * _1051) / _3144)));
        float _3165 = (log2(_2236 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3166 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
        uint _3169 = uint(isnan(14.0) ? _3166 : (isnan(_3166) ? 14.0 : min(_3166, 14.0)));
        uvec4 _3174 = texelFetch(g_lightClusterGridBuffer, int(((_3169 << 2u) + (_3155 << 6u)) >> 2u));
        uint _3175 = _3174.x;
        uint _3176 = _3143.z;
        float _3255;
        float _3257;
        float _3259;
        float _3261;
        float _3263;
        float _3265;
        if (((((1u << ((_3176 >> 4u) & 15u)) + 4294967295u) & _3175) == 0u) || ((_3176 & 240u) == 0u))
        {
            _3255 = 0.0;
            _3257 = 0.0;
            _3259 = 0.0;
            _3261 = 0.0;
            _3263 = 0.0;
            _3265 = 0.0;
        }
        else
        {
            float _3256;
            float _3258;
            float _3260;
            float _3262;
            float _3264;
            float _3266;
            float _3408 = 0.0;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            uint _3414 = 0u;
            uint _3423;
            bool _3424;
            for (;;)
            {
                _3423 = texelFetch(g_lightClassification, int((((_3169 << 5u) + (_3155 << 9u)) + (_3414 << 2u)) >> 2u)).x;
                _3424 = _3423 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3424)
                {
                    frontier_phi_71_pred = _3413;
                    frontier_phi_71_pred_1 = _3412;
                    frontier_phi_71_pred_2 = _3411;
                    frontier_phi_71_pred_3 = _3410;
                    frontier_phi_71_pred_4 = _3409;
                    frontier_phi_71_pred_5 = _3408;
                }
                else
                {
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    uint _3559;
                    _3553 = _3408;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3423;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    for (;;)
                    {
                        uint _3563 = uint(findLSB(_3559)) + (_3414 << 5u);
                        uint _3560 = (_3559 + 4294967295u) & _3559;
                        uint _3565 = _3563 * 48u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3585 = (_3563 * 48u) + 4u;
                        vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3604 = (_3563 * 48u) + 8u;
                        vec3 _3615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3604)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 2u)).x));
                        float _3619 = _3579.x - _2234;
                        float _3620 = _3579.y - _2235;
                        float _3621 = _3579.z - _2236;
                        float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                        float _3625 = inversesqrt(_3622);
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3629 = dot(vec3(_1070, _1073, _1076), vec3(_3626, _3627, _3628));
                        float _3634 = 1.0 - (_3622 * _3579.w);
                        float _5074 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3636 = sqrt(_3622) * _3598.w;
                        float _3639 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3629) + _3640;
                        float _3646 = _3636 * _3636;
                        float _3650 = ((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3635) / ((_3646 * 0.699999988079071044921875) + 1.0);
                        float _3654 = (-0.0) - _2234;
                        float _3655 = (-0.0) - _2235;
                        float _3656 = (-0.0) - _2236;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3661 = _3660 * _3654;
                        float _3662 = _3660 * _3655;
                        float _3663 = _3660 * _3656;
                        float _3670 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                        float _3671 = 1.0 - _1145;
                        float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                        float _3679 = _3678 * _3678;
                        float _3680 = _3679 * _3679;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                        float _3691 = dot(vec3(_1070, _1073, _1076), vec3(_3661, _3662, _3663));
                        float _5090 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
                        float _3695 = dot(vec3(_1070, _1073, _1076), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                        float _5101 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                        float _3703 = _3639 * _3679;
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3629) + _3704;
                        float _5112 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3708 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                        float _3709 = 1.0 - _3679;
                        float _3719 = (0.5 / (((_3708 * ((_3694 * _3709) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3679) * _3694))) * _3708;
                        float _5123 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3730 = (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0)))) / ((_3702 * _3702) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125))) * _3635;
                        _3483 = (_3650 * _3598.x) + _3556;
                        _3484 = (_3650 * _3598.y) + _3557;
                        _3485 = (_3650 * _3598.z) + _3558;
                        _3480 = (_3730 * _3615.x) + _3553;
                        _3481 = (_3730 * _3615.y) + _3554;
                        _3482 = (_3730 * _3615.z) + _3555;
                        if (_3560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3553 = _3480;
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3560;
                        }
                    }
                    frontier_phi_71_pred = _3485;
                    frontier_phi_71_pred_1 = _3484;
                    frontier_phi_71_pred_2 = _3483;
                    frontier_phi_71_pred_3 = _3482;
                    frontier_phi_71_pred_4 = _3481;
                    frontier_phi_71_pred_5 = _3480;
                }
                _3266 = frontier_phi_71_pred;
                _3264 = frontier_phi_71_pred_1;
                _3262 = frontier_phi_71_pred_2;
                _3260 = frontier_phi_71_pred_3;
                _3258 = frontier_phi_71_pred_4;
                _3256 = frontier_phi_71_pred_5;
                uint _3415 = _3414 + 1u;
                if (_3415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3408 = _3256;
                    _3409 = _3258;
                    _3410 = _3260;
                    _3411 = _3262;
                    _3412 = _3264;
                    _3413 = _3266;
                    _3414 = _3415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3255 = _3256;
            _3257 = _3258;
            _3259 = _3260;
            _3261 = _3262;
            _3263 = _3264;
            _3265 = _3266;
        }
        uvec4 _3269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3270 = _3269.z;
        uint _3272 = (_3270 >> 8u) & 15u;
        float _3376;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        if (((4294967295u << _3272) & _3175) == 0u)
        {
            _3376 = _3255;
            _3378 = _3257;
            _3380 = _3259;
            _3382 = _3261;
            _3384 = _3263;
            _3386 = _3265;
        }
        else
        {
            float _3401 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
            float _3402 = _3401 * _2234;
            float _3403 = _3401 * _2235;
            float _3404 = _3401 * _2236;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3272 < ((_3270 >> 12u) & 15u))
            {
                float _3377;
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3536 = _3255;
                float _3537 = _3257;
                float _3538 = _3259;
                float _3539 = _3261;
                float _3540 = _3263;
                float _3541 = _3265;
                uint _3542 = _3272;
                uint _3551;
                bool _3552;
                for (;;)
                {
                    _3551 = texelFetch(g_lightClassification, int((((_3169 << 5u) + (_3155 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                    _3552 = _3551 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3552)
                    {
                        frontier_phi_82_pred = _3541;
                        frontier_phi_82_pred_1 = _3540;
                        frontier_phi_82_pred_2 = _3539;
                        frontier_phi_82_pred_3 = _3538;
                        frontier_phi_82_pred_4 = _3537;
                        frontier_phi_82_pred_5 = _3536;
                    }
                    else
                    {
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _4037;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _3757 = _3536;
                        float _3758 = _3537;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        uint _3763 = _3551;
                        uint _3764;
                        vec4 _3789;
                        float _3790;
                        vec4 _3805;
                        vec3 _3817;
                        vec4 _3832;
                        vec4 _3847;
                        float _3893;
                        bool _3894;
                        for (;;)
                        {
                            uint _3774 = ((_3542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3763));
                            _3764 = (_3763 + 4294967295u) & _3763;
                            uint _3776 = _3774 * 40u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            _3790 = _3789.w;
                            uint _3792 = (_3774 * 40u) + 4u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3774 * 40u) + 8u;
                            _3817 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x));
                            uint _3819 = (_3774 * 40u) + 16u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3834 = (_3774 * 40u) + 20u;
                            _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            uint _3849 = (_3774 * 40u) + 24u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            uint _3868 = (_3774 * 40u) + 28u;
                            vec4 _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            _3893 = fma(_2236, _3881.z, fma(_2235, _3881.y, _3881.x * _2234)) + _3881.w;
                            _3894 = !((fma(_2236, _3862.z, fma(_2235, _3862.y, _3862.x * _2234)) + _3862.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3894)
                            {
                                float _3921 = _3789.x - _2234;
                                float _3922 = _3789.y - _2235;
                                float _3923 = _3789.z - _2236;
                                float _3924 = dot(vec3(_3921, _3922, _3923), vec3(_3921, _3922, _3923));
                                float _3927 = inversesqrt(_3924);
                                float _3928 = _3927 * _3921;
                                float _3929 = _3927 * _3922;
                                float _3930 = _3927 * _3923;
                                float _3934 = 1.0 - (_3924 / (_3790 * _3790));
                                float _5134 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3939 = sqrt(_3924) * _3805.w;
                                float _3941 = 1.39999997615814208984375 / (_3939 + 1.39999997615814208984375);
                                float _3942 = _3941 * _3941;
                                float _3945 = ((1.0 - _3942) * dot(vec3(_3928, _3929, _3930), vec3(_1070, _1073, _1076))) + _3942;
                                float _3948 = _3939 * _3939;
                                float _3952 = (fma(_2236, _3832.z, fma(_2235, _3832.y, _3832.x * _2234)) + _3832.w) / _3893;
                                float _3953 = (fma(_2236, _3847.z, fma(_2235, _3847.y, _3847.x * _2234)) + _3847.w) / _3893;
                                float _3957 = 1.0 - dot(vec2(_3952, _3953), vec2(_3952, _3953));
                                float _5150 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3958 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
                                float _3959 = _3958 * (((isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0))) * _3935) / ((_3948 * 0.699999988079071044921875) + 1.0));
                                float _3971 = exp2(log2(1.0 / ((_3948 * 3.5) + 5.0)) * 0.25);
                                float _3972 = 1.0 - _1145;
                                float _3979 = sqrt(1.0 - ((1.0 - (_3972 * _3972)) * (1.0 - (_3971 * _3971))));
                                float _3980 = _3979 * _3979;
                                float _3981 = _3980 * _3980;
                                float _3982 = _3928 - _3402;
                                float _3983 = _3929 - _3403;
                                float _3984 = _3930 - _3404;
                                float _3988 = inversesqrt(dot(vec3(_3982, _3983, _3984), vec3(_3982, _3983, _3984)));
                                float _3992 = dot(vec3(_1070, _1073, _1076), vec3((-0.0) - _3402, (-0.0) - _3403, (-0.0) - _3404));
                                float _5161 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3995 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3996 = dot(vec3(_1070, _1073, _1076), vec3(_3988 * _3982, _3988 * _3983, _3988 * _3984));
                                float _5172 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3999 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _4003 = ((_3999 * _3999) * (_3981 + (-1.0))) + 1.0;
                                float _4004 = _3941 * _3980;
                                float _4005 = _4004 * _4004;
                                float _4011 = ((1.0 - _4005) * dot(vec3(_1070, _1073, _1076), vec3(_3928, _3929, _3930))) + _4005;
                                float _5183 = isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0));
                                float _4012 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                                float _4013 = 1.0 - _3980;
                                float _4023 = (0.5 / (((_4012 * ((_3995 * _4013) + _3980)) + 9.9999999392252902907785028219223e-09) + (((_4012 * _4013) + _3980) * _3995))) * _4012;
                                float _5194 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4033 = (_3958 * _3935) * (((_3981 * 3.1415927410125732421875) * (isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0)))) / ((_4003 * _4003) * ((_3948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3959 * _3805.z;
                                frontier_phi_88_pred_1 = _3959 * _3805.y;
                                frontier_phi_88_pred_2 = _3959 * _3805.x;
                                frontier_phi_88_pred_3 = _4033 * _3817.z;
                                frontier_phi_88_pred_4 = _4033 * _3817.y;
                                frontier_phi_88_pred_5 = _4033 * _3817.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4042 = frontier_phi_88_pred;
                            _4041 = frontier_phi_88_pred_1;
                            _4040 = frontier_phi_88_pred_2;
                            _4039 = frontier_phi_88_pred_3;
                            _4038 = frontier_phi_88_pred_4;
                            _4037 = frontier_phi_88_pred_5;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            _3744 = _4037 + _3757;
                            _3745 = _4038 + _3758;
                            _3746 = _4039 + _3759;
                            if (_3764 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3757 = _3744;
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3764;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3749;
                        frontier_phi_82_pred_1 = _3748;
                        frontier_phi_82_pred_2 = _3747;
                        frontier_phi_82_pred_3 = _3746;
                        frontier_phi_82_pred_4 = _3745;
                        frontier_phi_82_pred_5 = _3744;
                    }
                    _3387 = frontier_phi_82_pred;
                    _3385 = frontier_phi_82_pred_1;
                    _3383 = frontier_phi_82_pred_2;
                    _3381 = frontier_phi_82_pred_3;
                    _3379 = frontier_phi_82_pred_4;
                    _3377 = frontier_phi_82_pred_5;
                    uint _3543 = _3542 + 1u;
                    if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3536 = _3377;
                        _3537 = _3379;
                        _3538 = _3381;
                        _3539 = _3383;
                        _3540 = _3385;
                        _3541 = _3387;
                        _3542 = _3543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3383;
                frontier_phi_63_64_ladder_1 = _3387;
                frontier_phi_63_64_ladder_2 = _3385;
                frontier_phi_63_64_ladder_3 = _3381;
                frontier_phi_63_64_ladder_4 = _3379;
                frontier_phi_63_64_ladder_5 = _3377;
            }
            else
            {
                frontier_phi_63_64_ladder = _3261;
                frontier_phi_63_64_ladder_1 = _3265;
                frontier_phi_63_64_ladder_2 = _3263;
                frontier_phi_63_64_ladder_3 = _3259;
                frontier_phi_63_64_ladder_4 = _3257;
                frontier_phi_63_64_ladder_5 = _3255;
            }
            _3376 = frontier_phi_63_64_ladder_5;
            _3378 = frontier_phi_63_64_ladder_4;
            _3380 = frontier_phi_63_64_ladder_3;
            _3382 = frontier_phi_63_64_ladder;
            _3384 = frontier_phi_63_64_ladder_2;
            _3386 = frontier_phi_63_64_ladder_1;
        }
        float _3391 = isnan(1.0) ? _1129 : (isnan(_1129) ? 1.0 : min(_1129, 1.0));
        _3188 = (_3391 * _3382) + _2700;
        _3190 = (_3391 * _3384) + _2702;
        _3192 = (_3391 * _3386) + _2704;
        _3194 = ((_3376 * _1113) * _3391) + _3038;
        _3196 = ((_3378 * _1115) * _3391) + _3040;
        _3198 = ((_3380 * _1116) * _3391) + _3042;
    }
    else
    {
        _3188 = _2700;
        _3190 = _2702;
        _3192 = _2704;
        _3194 = _3038;
        _3196 = _3040;
        _3198 = _3042;
    }
    float _5210 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _5221 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _5232 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _3215 = ((isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_3188 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1129))) + ((_3194 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _3216 = ((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3190 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1129))) + ((_3196 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    float _3217 = ((isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0))) * (_3192 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1129))) + ((_3198 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1966)) * cbPerFrame._m0[3u].x);
    uint _3218 = _271 + 6u;
    float _3226 = _1051 / cbSceneParam._m0[86u].x;
    float _3227 = _1052 / cbSceneParam._m0[86u].y;
    vec4 _3241 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, (log2((isnan(cbSceneParam._m0[77u].w) ? _974 : (isnan(_974) ? cbSceneParam._m0[77u].w : min(_974, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3243 = _3241.x;
    float _3244 = _3241.y;
    float _3245 = _3241.z;
    float _3246 = _3241.w;
    float _3318;
    float _3320;
    float _3322;
    float _3324;
    if (_974 > cbSceneParam._m0[78u].w)
    {
        float _3280 = isnan(_974) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _974 : min(cbSceneParam._m0[80u].w, _974));
        float _3281 = _3280 / _974;
        float _3292 = _3281 * _1024;
        float _3293 = _1025 * _3281;
        float _3294 = (-0.0) - _3293;
        float _3296 = _3281 * _1026;
        float _3298 = (cbSceneParam._m0[77u].w * _3294) / _3280;
        float _3299 = _3298 + cbSceneParam._m0[79u].w;
        float _3300 = cbSceneParam._m0[79u].w - _3293;
        float _3306 = sqrt(((_3292 * _3292) + (_3293 * _3293)) + (_3296 * _3296));
        float _3309 = (1.0 - (cbSceneParam._m0[77u].w / _3280)) * _3306;
        float _3314 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3316 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3493;
        if (abs((_3294 - _3298) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3493 = ((((_3299 > 0.0) ? exp2(_3314 * _3299) : (2.0 - exp2(_3316 * _3299))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3309;
        }
        else
        {
            float _3437 = 1.0 / cbSceneParam._m0[80u].x;
            float _3438 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : max(_3299, _3300));
            float _3439 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : min(_3299, _3300));
            float _3448 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : min(_3438, 0.0));
            float _3449 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : min(_3439, 0.0));
            _3493 = ((abs(_3306 / _3294) * cbSceneParam._m0[80u].y) * ((((_3448 - _3449) * 2.0) - ((exp2(_3314 * (isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0)))) - exp2(_3314 * (isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))))) * _3437)) - ((exp2(_3316 * _3448) - exp2(_3316 * _3449)) * _3437))) + (_3309 * cbSceneParam._m0[80u].z);
        }
        vec4 _3495 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3226, _3227, 1.0), 0.0);
        float _3504 = exp2((_3493 * (-1.44269502162933349609375)) * (1.0 - _3495.w));
        float _3505 = log2(_3504);
        float _3521 = log2(_3246);
        _3318 = (exp2(_3521 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].x)) * _3495.x) / cbSceneParam._m0[78u].x)) + _3243;
        _3320 = (exp2(_3521 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].y)) * _3495.y) / cbSceneParam._m0[78u].y)) + _3244;
        _3322 = (exp2(_3521 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].z)) * _3495.z) / cbSceneParam._m0[78u].z)) + _3245;
        _3324 = _3504 * _3246;
    }
    else
    {
        _3318 = _3243;
        _3320 = _3244;
        _3322 = _3245;
        _3324 = _3246;
    }
    bool _3531;
    vec4 _3334;
    vec4 _3356;
    float _3358;
    float _3362;
    float _3363;
    float _3364;
    float _3365;
    bool _3375;
    for (;;)
    {
        _3334 = cbMatDynParam._m0[0u];
        float _3336 = roundEven(_3334.y);
        bool _3337 = _3336 == 3.0;
        float _3338 = log2(_3324);
        float _3345 = exp2(_3338 * cbSceneParam._m0[78u].x) * _3215;
        float _3346 = exp2(_3338 * cbSceneParam._m0[78u].y) * _3216;
        float _3347 = exp2(_3338 * cbSceneParam._m0[78u].z) * _3217;
        float _3354 = _1040 + (-0.5);
        _3356 = cbMtdParam._m0[1u];
        _3358 = _3356.y * _3354;
        float _3361 = (_3336 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3362 = _3361 * (_3337 ? _3345 : (_3345 + (cbSceneParam._m0[72u].w * _3318)));
        _3363 = _3361 * (_3337 ? _3346 : (_3346 + (cbSceneParam._m0[72u].w * _3320)));
        _3364 = _3361 * (_3337 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3322)));
        _3365 = _3354 * 0.999000012874603271484375;
        _3375 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3375)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3365) < 0.5)
            {
                _3531 = true;
                break;
            }
        }
        uint _3472 = _1089 + uint(_3334.w);
        if ((cbInstanceData._m0[_3472].w < 1.0) && ((cbInstanceData._m0[_3472].w + _3365) < 0.5))
        {
            _3531 = true;
            break;
        }
        if ((_3358 + 1.0) < _3356.x)
        {
            _3531 = true;
            break;
        }
        _3531 = false;
        break;
    }
    float _3735;
    if (_3531)
    {
        discard_state = true;
        _3735 = 0.0;
    }
    else
    {
        _3735 = cbInstanceData._m0[_3218].w;
    }
    SV_Target.x = _3362;
    SV_Target.y = _3363;
    SV_Target.z = _3364;
    SV_Target.w = _3735;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3218].w;
    discard_exit();
}


