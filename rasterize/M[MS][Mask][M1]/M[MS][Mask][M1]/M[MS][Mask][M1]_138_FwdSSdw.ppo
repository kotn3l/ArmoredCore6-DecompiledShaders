#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1675;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _254 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _255 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _256 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _262 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _269 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _276 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _290 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _291 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4022 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4033 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _4044 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    uint _301 = uint(roundEven(NORMAL.w)) * 13u;
    uint _306 = _301 + 1u;
    uint _310 = _301 + 2u;
    float _319 = sqrt(((cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x) + (cbInstanceData._m0[_301].x * cbInstanceData._m0[_301].x)) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x));
    float _320 = _319 * TEXCOORD.z;
    float _321 = _319 * TEXCOORD.w;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _320) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _321) + cbTextureTilingScale._m0[13u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _320) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _321) + cbTextureTilingScale._m0[5u].w));
    vec4 _403 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _438 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _440 = _438.x;
    float _452 = dot(vec4(_440, _438.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _469 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _403.x) * 2.0) - ((((_440 - _452) * cbMtdParam._m0[23u].w) + _452) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4055 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _470 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
    float _477 = (_470 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _478 = (_470 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _479 = (_470 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _320) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _321) + cbTextureTilingScale._m0[3u].w));
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _518 = _516.x;
    float _528 = dot(vec4(_518, _516.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _542 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _403.y) * 2.0) - ((((_518 - _528) * cbMtdParam._m0[23u].w) + _528) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4066 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _543 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
    float _550 = (_543 * ((_496.x * cbMtdParam._m0[13u].x) - _477)) + _477;
    float _551 = (_543 * ((_496.y * cbMtdParam._m0[13u].y) - _478)) + _478;
    float _552 = (_543 * ((_496.z * cbMtdParam._m0[13u].z) - _479)) + _479;
    vec4 _571 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _320) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _321) + cbTextureTilingScale._m0[24u].w));
    vec4 _588 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _590 = _588.x;
    float _600 = dot(vec4(_590, _588.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _612 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _403.z) * 2.0) - ((((_590 - _600) * cbMtdParam._m0[23u].w) + _600) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4077 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _613 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _620 = (_613 * ((_571.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _621 = (_613 * ((_571.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _622 = (_613 * ((_571.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _626 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _334.x) * _620;
    float _629 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _334.y) * _621;
    float _632 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _334.z) * _622;
    float _639 = ((_620 - _626) * (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) + _626;
    float _640 = ((_621 - _629) * (isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0)))) + _629;
    float _641 = ((_622 - _632) * (isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0)))) + _632;
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _320) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _321) + cbTextureTilingScale._m0[14u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _320) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _321) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _320) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _321) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _470) + _720;
    float _730 = ((_701.y - _721) * _470) + _721;
    float _731 = ((_701.z - _722) * _470) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _320) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _321) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _543) + _729;
    float _755 = ((_743.y - _730) * _543) + _730;
    float _756 = ((_743.z - _731) * _543) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _320) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _321) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _613) + _756;
    float _784 = ((((_768.x - _754) * _613) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _613) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4088 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))));
    vec4 _805 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _830 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _320) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _321) + cbTextureTilingScale._m0[11u].w));
    float _832 = _830.x;
    float _833 = 1.0 - _832;
    float _841 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _844 = ((isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : min(_841, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _853 = (_844 - ((((((_832 - _833) * cbMtdParam._m0[24u].z) + _833) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _844))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4109 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _854 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _861 = (_854 * ((_659.x * cbMtdParam._m0[18u].x) - _639)) + _639;
    float _862 = (_854 * ((_659.y * cbMtdParam._m0[18u].y) - _640)) + _640;
    float _863 = (_854 * ((_659.z * cbMtdParam._m0[18u].z) - _641)) + _641;
    vec4 _875 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _320) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _321) + cbTextureTilingScale._m0[19u].w));
    float _877 = _875.x;
    float _878 = 1.0 - _877;
    float _903 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_877 - _878) * cbMtdParam._m0[24u].w) + _878) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4120 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _904 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _912 = ((((cbMtdParam._m0[10u].x - _861) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _904) + _861;
    float _913 = ((((cbMtdParam._m0[10u].y - _862) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _904) + _862;
    float _914 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _863)) * _904) + _863;
    vec4 _940 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _942 = _940.x;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _320) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _321) + cbTextureTilingScale._m0[9u].w)).x - _942) * _470) + _942;
    float _977 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _320) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _321) + cbTextureTilingScale._m0[21u].w)).x - _960) * _543) + _960;
    float _994 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _320) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _321) + cbTextureTilingScale._m0[10u].w)).x - _977) * _613) + _977;
    float _998 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _994) * cbMtdParam._m0[19u].z) + _994;
    float _1000 = _998 - (_998 * _854);
    float _1002 = _1000 - (_1000 * _904);
    float _1007 = (((_678.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _1011 = ((_805.z - _1007) * cbMtdParam._m0[19u].w) + _1007;
    vec4 _1027 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _320) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _321) + cbTextureTilingScale._m0[15u].w));
    float _1034 = (_1027.x * 2.0) + (-1.0);
    float _1035 = (_1027.y * 2.0) + (-1.0);
    float _1036 = dot(vec2(_1034, _1035), vec2(_1034, _1035));
    float _4131 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _1044 = (_854 * (_1027.z - _1011)) + _1011;
    float _1047 = ((cbMtdParam._m0[23u].x - _1044) * _904) + _1044;
    vec4 _1070 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _320) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _321) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1076 = (_1070.x * 2.0) + (-1.0);
    float _1077 = (_1070.y * 2.0) + (-1.0);
    float _1078 = dot(vec2(_1076, _1077), vec2(_1076, _1077));
    float _4142 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1092 = (_784 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_678.x * 2.0) + (-1.0)))) + (((_805.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1093 = (_785 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_678.y * 2.0) + (-1.0)))) + (((_805.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _1105 = (((_1034 - _1092) + (cbMtdParam._m0[21u].x * _1092)) * _854) + _1092;
    float _1106 = (((_1035 - _1093) + (cbMtdParam._m0[21u].x * _1093)) * _854) + _1093;
    float _1107 = (_854 * (sqrt(1.0 - (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) - _791)) + _791;
    float _1118 = (((_1076 - _1105) + (_1105 * cbMtdParam._m0[22u].z)) * _904) + _1105;
    float _1119 = (((_1077 - _1106) + (_1106 * cbMtdParam._m0[22u].z)) * _904) + _1106;
    float _1120 = ((sqrt(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) - _1107) * _904) + _1107;
    float _1122 = cbMtdParam._m0[22u].x + _805.w;
    float _1125 = fma(_1120, _269 * NORMAL.x, fma(_1119, _276 * TANGENT.x, (_262 * _254) * _1118));
    float _1128 = fma(_1120, _269 * NORMAL.y, fma(_1119, _276 * TANGENT.y, (_262 * _255) * _1118));
    float _1131 = fma(_1120, _269 * NORMAL.z, fma(_1119, _276 * TANGENT.z, (_262 * _256) * _1118));
    float _1135 = inversesqrt(dot(vec3(_1125, _1128, _1131), vec3(_1125, _1128, _1131)));
    float _1136 = _1135 * _1125;
    float _1137 = _1135 * _1128;
    float _1138 = _1135 * _1131;
    float _4153 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1139 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _4164 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _4175 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _4186 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _4197 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _4208 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1144 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _1158 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1208 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1198);
    float _1209 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1198);
    float _1210 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1198);
    float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
    float _1215 = _1208 * _1214;
    float _1216 = _1209 * _1214;
    float _1217 = _1210 * _1214;
    float _1223 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1224 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1242 = fma(_1138, cbSceneParam._m0[5u].z, fma(_1137, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1136));
    float _1245 = fma(_1138, cbSceneParam._m0[6u].z, fma(_1137, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1136));
    float _1248 = fma(_1138, cbSceneParam._m0[7u].z, fma(_1137, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1136));
    uint _1262 = (_301 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1268 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0)))) * cbInstanceData._m0[_1262].x;
    float _1269 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * cbInstanceData._m0[_1262].y;
    float _1270 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0)))) * cbInstanceData._m0[_1262].z;
    float _4219 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
    float _1271 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
    float _1272 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
    float _4241 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
    float _1273 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _1274 = 1.0 - _1144;
    float _1275 = _1271 * _1274;
    float _1276 = _1272 * _1274;
    float _1277 = _1273 * _1274;
    float _1282 = (_1271 + (-0.039999999105930328369140625)) * _1144;
    float _1283 = (_1272 + (-0.039999999105930328369140625)) * _1144;
    float _1284 = (_1273 + (-0.039999999105930328369140625)) * _1144;
    float _1285 = _1282 + 0.039999999105930328369140625;
    float _1287 = _1283 + 0.039999999105930328369140625;
    float _1288 = _1284 + 0.039999999105930328369140625;
    vec4 _1297 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1223, cbSceneParam._m0[86u].y * _1224));
    float _1301 = ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * TEXCOORD_5.w) * _1297.x;
    float _1302 = dot(vec3(_1136, _1137, _1138), vec3(_1215, _1216, _1217));
    float _1305 = _1302 * 2.0;
    float _1309 = (_1305 * _1136) - _1215;
    float _1310 = (_1305 * _1137) - _1216;
    float _1311 = (_1305 * _1138) - _1217;
    float _1315 = abs(dot(vec3(_1215, _1216, _1217), vec3(_1136, _1137, _1138)));
    float _4252 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1317 = sqrt(_1139);
    float _1330 = exp2((_1317 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1317 * 3.0));
    float _1336 = (1.0 - _1330) * ((_1317 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1337 = _1330 * _1317;
    float _1365 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1369 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1373 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1674;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1399 = fma(_1373, cbModelParam._m0[26u].z, fma(_1369, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1365));
        float _1403 = fma(_1373, cbModelParam._m0[27u].z, fma(_1369, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1365));
        float _1407 = fma(_1373, cbModelParam._m0[28u].z, fma(_1369, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1365));
        float _1432 = _1365 + _1136;
        float _1433 = _1369 + _1137;
        float _1434 = _1373 + _1138;
        float _1444 = fma(_1434, cbModelParam._m0[26u].z, fma(_1433, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1432)) - _1399;
        float _1445 = fma(_1434, cbModelParam._m0[27u].z, fma(_1433, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1432)) - _1403;
        float _1446 = fma(_1434, cbModelParam._m0[28u].z, fma(_1433, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1432)) - _1407;
        float _1450 = inversesqrt(dot(vec3(_1444, _1445, _1446), vec3(_1444, _1445, _1446)));
        float _1463 = ((_1450 * _1444) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1399 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1464 = ((_1450 * _1445) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1403 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1465 = ((_1450 * _1446) / cbModelParam._m0[34u].z) + ((((((_1407 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        vec4 _1489 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1463, _1464, _1465), 0.0);
        float _1502 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1468.x + (-0.5));
        float _1504 = _1502 * (_1468.y + (-0.5));
        float _1505 = _1502 * (_1468.z + (-0.5));
        float _1512 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1475.x + (-0.5));
        float _1514 = _1512 * (_1475.y + (-0.5));
        float _1515 = _1512 * (_1475.z + (-0.5));
        float _1522 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1482.x + (-0.5));
        float _1524 = _1522 * (_1482.y + (-0.5));
        float _1525 = _1522 * (_1482.z + (-0.5));
        float _1532 = exp2((_1489.w + (-0.5)) * 20.0) * 2.0;
        float _1533 = _1532 * (_1489.x + (-0.5));
        float _1534 = _1532 * (_1489.y + (-0.5));
        float _1535 = _1532 * (_1489.z + (-0.5));
        float _1536 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1537 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = _1503 * 0.5;
        float _1540 = _1513 * 0.5;
        float _1541 = _1523 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1556 = (dot(vec3(_1136, _1137, _1138), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1566 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1536 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4300 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1568 + 1.0))) + _1573) * _1536;
        float _1583 = _1504 * 0.5;
        float _1584 = _1514 * 0.5;
        float _1585 = _1524 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_1136, _1137, _1138), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1537 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4333 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1610 + 1.0))) + _1615) * _1537;
        float _1625 = _1505 * 0.5;
        float _1626 = _1515 * 0.5;
        float _1627 = _1525 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_1136, _1137, _1138), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4344 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4355 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4366 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_1652 + 1.0))) + _1657) * _1538;
        _1674 = _1505;
        _1676 = _1504;
        _1677 = _1503;
        _1678 = _1515;
        _1679 = _1514;
        _1680 = _1513;
        _1681 = _1525;
        _1682 = _1524;
        _1683 = _1523;
        _1684 = _1538;
        _1685 = _1537;
        _1686 = _1536;
        _1687 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1688 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1689 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1675;
        _1676 = _1675;
        _1677 = _1675;
        _1678 = _1675;
        _1679 = _1675;
        _1680 = _1675;
        _1681 = _1675;
        _1682 = _1675;
        _1683 = _1675;
        _1684 = _1675;
        _1685 = _1675;
        _1686 = _1675;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    float _1985;
    float _1986;
    float _1987;
    float _1988;
    float _1989;
    float _1990;
    float _1991;
    float _1992;
    float _1993;
    float _1994;
    float _1995;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1712 = fma(_1373, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1365));
        float _1716 = fma(_1373, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1365));
        float _1720 = fma(_1373, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1365));
        float _1743 = _1365 + _1136;
        float _1744 = _1369 + _1137;
        float _1745 = _1373 + _1138;
        float _1755 = fma(_1745, cbModelParam._m0[30u].z, fma(_1744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1743)) - _1712;
        float _1756 = fma(_1745, cbModelParam._m0[31u].z, fma(_1744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1743)) - _1716;
        float _1757 = fma(_1745, cbModelParam._m0[32u].z, fma(_1744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1743)) - _1720;
        float _1761 = inversesqrt(dot(vec3(_1755, _1756, _1757), vec3(_1755, _1756, _1757)));
        float _1774 = ((_1761 * _1755) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1712 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1775 = ((_1761 * _1756) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1716 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1776 = ((_1761 * _1757) / cbModelParam._m0[35u].z) + ((((((_1720 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1778 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1774, _1775, _1776), 0.0);
        vec4 _1785 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1774, _1775, _1776), 0.0);
        vec4 _1792 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1774, _1775, _1776), 0.0);
        vec4 _1799 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1774, _1775, _1776), 0.0);
        float _1811 = exp2((_1778.w + (-0.5)) * 20.0) * 2.0;
        float _1812 = _1811 * (_1778.x + (-0.5));
        float _1813 = _1811 * (_1778.y + (-0.5));
        float _1814 = _1811 * (_1778.z + (-0.5));
        float _1821 = exp2((_1785.w + (-0.5)) * 20.0) * 2.0;
        float _1822 = _1821 * (_1785.x + (-0.5));
        float _1823 = _1821 * (_1785.y + (-0.5));
        float _1824 = _1821 * (_1785.z + (-0.5));
        float _1831 = exp2((_1792.w + (-0.5)) * 20.0) * 2.0;
        float _1832 = _1831 * (_1792.x + (-0.5));
        float _1833 = _1831 * (_1792.y + (-0.5));
        float _1834 = _1831 * (_1792.z + (-0.5));
        float _1841 = exp2((_1799.w + (-0.5)) * 20.0) * 2.0;
        float _1842 = _1841 * (_1799.x + (-0.5));
        float _1843 = _1841 * (_1799.y + (-0.5));
        float _1844 = _1841 * (_1799.z + (-0.5));
        float _1845 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1846 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1847 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1848 = _1812 * 0.5;
        float _1849 = _1822 * 0.5;
        float _1850 = _1832 * 0.5;
        float _1851 = dot(vec3(_1848, _1849, _1850), vec3(_1848, _1849, _1850));
        float _1856 = (_1851 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1851);
        float _1864 = (dot(vec3(_1136, _1137, _1138), vec3(_1856 * _1848, _1856 * _1849, _1856 * _1850)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1873 = sqrt(((_1849 * _1849) + (_1848 * _1848)) + (_1850 * _1850)) / (_1845 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1875 = _1874 * 2.0;
        float _1879 = (1.0 - _1874) / (_1874 + 1.0);
        float _4429 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1889 = ((((1.0 - _1880) * (_1875 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1875 + 1.0))) + _1880) * _1845;
        float _1890 = _1813 * 0.5;
        float _1891 = _1823 * 0.5;
        float _1892 = _1833 * 0.5;
        float _1893 = dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892));
        float _1898 = (_1893 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1893);
        float _1906 = (dot(vec3(_1136, _1137, _1138), vec3(_1898 * _1890, _1898 * _1891, _1898 * _1892)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1915 = sqrt(((_1891 * _1891) + (_1890 * _1890)) + (_1892 * _1892)) / (_1846 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1916 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1917 = _1916 * 2.0;
        float _1921 = (1.0 - _1916) / (_1916 + 1.0);
        float _4462 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1931 = ((((1.0 - _1922) * (_1917 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1917 + 1.0))) + _1922) * _1846;
        float _1932 = _1814 * 0.5;
        float _1933 = _1824 * 0.5;
        float _1934 = _1834 * 0.5;
        float _1935 = dot(vec3(_1932, _1933, _1934), vec3(_1932, _1933, _1934));
        float _1940 = (_1935 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1935);
        float _1948 = (dot(vec3(_1136, _1137, _1138), vec3(_1940 * _1932, _1940 * _1933, _1940 * _1934)) + 1.0) * 0.5;
        float _4473 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1957 = sqrt(((_1933 * _1933) + (_1932 * _1932)) + (_1934 * _1934)) / (_1847 + 9.9999997473787516355514526367188e-06);
        float _4484 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1959 = _1958 * 2.0;
        float _1963 = (1.0 - _1958) / (_1958 + 1.0);
        float _4495 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
        float _1964 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _1973 = ((((1.0 - _1964) * (_1959 + 2.0)) * exp2(log2(isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_1959 + 1.0))) + _1964) * _1847;
        _1981 = _1814;
        _1982 = _1813;
        _1983 = _1812;
        _1984 = _1824;
        _1985 = _1823;
        _1986 = _1822;
        _1987 = _1834;
        _1988 = _1833;
        _1989 = _1832;
        _1990 = _1847;
        _1991 = _1846;
        _1992 = _1845;
        _1993 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0)));
        _1994 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)));
        _1995 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0)));
    }
    else
    {
        _1981 = _1675;
        _1982 = _1675;
        _1983 = _1675;
        _1984 = _1675;
        _1985 = _1675;
        _1986 = _1675;
        _1987 = _1675;
        _1988 = _1675;
        _1989 = _1675;
        _1990 = _1675;
        _1991 = _1675;
        _1992 = _1675;
        _1993 = 0.0;
        _1994 = 0.0;
        _1995 = 0.0;
    }
    float _2005 = (cbModelParam._m0[1u].x * (_1993 - _1687)) + _1687;
    float _2006 = (cbModelParam._m0[1u].x * (_1994 - _1688)) + _1688;
    float _2007 = (cbModelParam._m0[1u].x * (_1995 - _1689)) + _1689;
    float _2028 = fma(_2007, cbSceneParam._m0[89u].z, fma(_2006, cbSceneParam._m0[89u].y, _2005 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2007, cbSceneParam._m0[90u].z, fma(_2006, cbSceneParam._m0[90u].y, _2005 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2007, cbSceneParam._m0[91u].z, fma(_2006, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2005));
    float _2049 = _1309 * 0.5;
    float _2050 = _1310 * 0.5;
    float _2051 = _1311 * 0.5;
    float _2052 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1983, _1986, _1989, _1992));
    float _2055 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1982, _1985, _1988, _1991));
    float _2058 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1981, _1984, _1987, _1990));
    float _2092;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2065 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1674, _1678, _1681, _1684));
        float _2069 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1676, _1679, _1682, _1685));
        float _2073 = dot(vec4(_2049, _2050, _2051, 1.0), vec4(_1677, _1680, _1683, _1686));
        float _2080 = dot(vec4(cbModelParam._m0[39u]), vec4(_2049, _2050, _2051, 1.0));
        _2092 = dot(vec3(isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0)), isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0)), isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2080) ? 0.0 : (isnan(0.0) ? _2080 : max(0.0, _2080))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2092 = 1.0;
    }
    float _2103;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2094 = dot(vec4(cbModelParam._m0[40u]), vec4(_2049, _2050, _2051, 1.0));
        _2103 = dot(vec3(isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)), isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2094) ? 0.0 : (isnan(0.0) ? _2094 : max(0.0, _2094))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2103 = 1.0;
    }
    float _2107 = (_2103 * cbModelParam._m0[1u].x) + (_2092 * (1.0 - cbModelParam._m0[1u].x));
    float _2117 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1139);
    float _2118 = isnan(_2117) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2117 : min(cbModelParam._m0[25u].z, _2117));
    float _2198;
    float _2200;
    float _2202;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2165 = fma(_1373, cbModelParam._m0[13u].z, fma(_1369, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1365)) + cbModelParam._m0[13u].w;
        float _2169 = fma(_1373, cbModelParam._m0[14u].z, fma(_1369, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1365)) + cbModelParam._m0[14u].w;
        float _2173 = fma(_1373, cbModelParam._m0[15u].z, fma(_1369, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1365)) + cbModelParam._m0[15u].w;
        float _2176 = fma(_1311, cbModelParam._m0[13u].z, fma(_1310, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1309));
        float _2179 = fma(_1311, cbModelParam._m0[14u].z, fma(_1310, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1309));
        float _2182 = fma(_1311, cbModelParam._m0[15u].z, fma(_1310, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1309));
        float _2210;
        if (_2176 > 0.0)
        {
            _2210 = abs((1.0 - _2165) / _2176);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2165 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2210 = frontier_phi_14_12_ladder;
        }
        float _2433;
        if (_2179 > 0.0)
        {
            _2433 = abs((1.0 - _2169) / _2179);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2179 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2169 + 1.0) / _2179);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2433 = frontier_phi_23_19_ladder;
        }
        float _2690;
        if (_2182 > 0.0)
        {
            _2690 = abs((1.0 - _2173) / _2182);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2182 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2173 + 1.0) / _2182);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2690 = frontier_phi_35_30_ladder;
        }
        float _2692 = isnan(_2433) ? _2210 : (isnan(_2210) ? _2433 : min(_2210, _2433));
        float _2693 = isnan(_2690) ? _2692 : (isnan(_2692) ? _2690 : min(_2692, _2690));
        float _2697 = (_2693 * _2176) + _2165;
        float _2698 = (_2693 * _2179) + _2169;
        float _2699 = (_2693 * _2182) + _2173;
        float _2700 = _2693 * 9.9999997473787516355514526367188e-05;
        float _2702 = (-1.0) - _2700;
        float _2704 = _2700 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2699 > _2704) || ((_2699 < _2702) || ((_2698 > _2704) || ((_2698 < _2702) || ((_2697 < _2702) || (_2697 > _2704))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2827 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2699, cbModelParam._m0[9u].z, fma(_2698, cbModelParam._m0[9u].y, _2697 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2699, cbModelParam._m0[10u].z, fma(_2698, cbModelParam._m0[10u].y, _2697 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2699, cbModelParam._m0[11u].z, fma(_2698, cbModelParam._m0[11u].y, _2697 * cbModelParam._m0[11u].x))), _2118);
            frontier_phi_13_35_ladder = _2827.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2827.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2827.x * cbModelParam._m0[1u].y;
        }
        _2198 = frontier_phi_13_35_ladder_2;
        _2200 = frontier_phi_13_35_ladder_1;
        _2202 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2186 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1309, _1310, _1311), _2118);
        _2198 = _2186.x * cbModelParam._m0[1u].y;
        _2200 = _2186.y * cbModelParam._m0[1u].y;
        _2202 = _2186.z * cbModelParam._m0[1u].y;
    }
    float _2206 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1139);
    float _2207 = isnan(_2206) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2206 : min(cbModelParam._m0[25u].w, _2206));
    float _2296;
    float _2298;
    float _2300;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2260 = fma(_1373, cbModelParam._m0[21u].z, fma(_1369, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1365)) + cbModelParam._m0[21u].w;
        float _2264 = fma(_1373, cbModelParam._m0[22u].z, fma(_1369, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1365)) + cbModelParam._m0[22u].w;
        float _2268 = fma(_1373, cbModelParam._m0[23u].z, fma(_1369, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1365)) + cbModelParam._m0[23u].w;
        float _2271 = fma(_1311, cbModelParam._m0[21u].z, fma(_1310, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1309));
        float _2274 = fma(_1311, cbModelParam._m0[22u].z, fma(_1310, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1309));
        float _2277 = fma(_1311, cbModelParam._m0[23u].z, fma(_1310, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1309));
        float _2438;
        if (_2271 > 0.0)
        {
            _2438 = abs((1.0 - _2260) / _2271);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2271 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2260 + 1.0) / _2271);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2438 = frontier_phi_25_21_ladder;
        }
        float _2717;
        if (_2274 > 0.0)
        {
            _2717 = abs((1.0 - _2264) / _2274);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2274 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2264 + 1.0) / _2274);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2717 = frontier_phi_37_32_ladder;
        }
        float _2930;
        if (_2277 > 0.0)
        {
            _2930 = abs((1.0 - _2268) / _2277);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2277 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2268 + 1.0) / _2277);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2930 = frontier_phi_46_43_ladder;
        }
        float _2932 = isnan(_2717) ? _2438 : (isnan(_2438) ? _2717 : min(_2438, _2717));
        float _2933 = isnan(_2930) ? _2932 : (isnan(_2932) ? _2930 : min(_2932, _2930));
        float _2937 = (_2933 * _2271) + _2260;
        float _2938 = (_2933 * _2274) + _2264;
        float _2939 = (_2933 * _2277) + _2268;
        float _2940 = _2933 * 9.9999997473787516355514526367188e-05;
        float _2941 = (-1.0) - _2940;
        float _2943 = _2940 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2939 > _2943) || ((_2939 < _2941) || ((_2938 > _2943) || ((_2938 < _2941) || ((_2937 < _2941) || (_2937 > _2943))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2939, cbModelParam._m0[17u].z, fma(_2938, cbModelParam._m0[17u].y, _2937 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2939, cbModelParam._m0[18u].z, fma(_2938, cbModelParam._m0[18u].y, _2937 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2939, cbModelParam._m0[19u].z, fma(_2938, cbModelParam._m0[19u].y, _2937 * cbModelParam._m0[19u].x))), _2207);
            frontier_phi_22_46_ladder = _3138.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3138.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3138.x * cbModelParam._m0[1u].z;
        }
        _2296 = frontier_phi_22_46_ladder_2;
        _2298 = frontier_phi_22_46_ladder_1;
        _2300 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2280 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1309, _1310, _1311), _2207);
        _2296 = _2280.x * cbModelParam._m0[1u].z;
        _2298 = _2280.y * cbModelParam._m0[1u].z;
        _2300 = _2280.z * cbModelParam._m0[1u].z;
    }
    float _2313 = (((_1336 * _1285) + _1337) * _1301) * ((cbModelParam._m0[1u].w * (_2296 - _2198)) + _2198);
    float _2315 = (((_1336 * _1287) + _1337) * _1301) * ((cbModelParam._m0[1u].w * (_2298 - _2200)) + _2200);
    float _2317 = (((_1336 * _1288) + _1337) * _1301) * ((cbModelParam._m0[1u].w * (_2300 - _2202)) + _2202);
    float _2320 = fma(_2317, cbSceneParam._m0[89u].z, fma(_2315, cbSceneParam._m0[89u].y, _2313 * cbSceneParam._m0[89u].x));
    float _2323 = fma(_2317, cbSceneParam._m0[90u].z, fma(_2315, cbSceneParam._m0[90u].y, _2313 * cbSceneParam._m0[90u].x));
    float _2326 = fma(_2317, cbSceneParam._m0[91u].z, fma(_2315, cbSceneParam._m0[91u].y, _2313 * cbSceneParam._m0[91u].x));
    vec4 _2334 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1223, _1224));
    float _2336 = _2334.w;
    float _2348 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2336);
    float _2349 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2336);
    float _2350 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2336);
    uvec4 _2354 = floatBitsToUint(cbInstanceData._m0[_301 + 5u]);
    uint _2356 = _2354.x * 14u;
    uint _2357 = _2356 + 13u;
    float _2364 = _1301 + (-1.0);
    float _2369 = (cbLight._m0[_2357].x * _2364) + 1.0;
    float _2370 = (cbLight._m0[_2357].y * _2364) + 1.0;
    float _2371 = (cbLight._m0[_2357].z * _2364) + 1.0;
    float _2372 = (cbLight._m0[_2357].w * _2364) + 1.0;
    uint _2373 = _2356 + 5u;
    float _2379 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
    uint _2383 = _2356 + 4u;
    float _2392 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
    uint _2396 = _2356 | 1u;
    float _2407 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_1136, _1137, _1138));
    float _2410 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_1136, _1137, _1138));
    float _4631 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _4642 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2415 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * 0.3183098733425140380859375;
    float _2417 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2424 = ((cbLight._m0[_2373].x * _2379) * _2417) + (((cbLight._m0[_2383].x * _2348) * _2392) * _2415);
    float _2425 = ((_2379 * cbLight._m0[_2373].y) * _2417) + (((cbLight._m0[_2383].y * _2349) * _2392) * _2415);
    float _2426 = ((_2379 * cbLight._m0[_2373].z) * _2417) + (((cbLight._m0[_2383].z * _2350) * _2392) * _2415);
    uvec4 _2430 = floatBitsToUint(cbLight._m0[_2356 + 12u]);
    bool _2432 = _2430.x == 0u;
    float _2443;
    float _2445;
    float _2447;
    if (_2432)
    {
        _2443 = _2424;
        _2445 = _2425;
        _2447 = _2426;
    }
    else
    {
        uint _2451 = _2356 + 6u;
        float _2467 = (dot(vec3(cbLight._m0[_2356 + 2u].xyz), vec3(_1136, _1137, _1138)) * 0.5) + 0.5;
        float _2468 = _2467 * _2467;
        float _4653 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2469 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2470 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2443 = (((cbLight._m0[_2451].x * 0.3183098733425140380859375) * _2469) * _2470) + _2424;
        _2445 = (((cbLight._m0[_2451].y * 0.3183098733425140380859375) * _2469) * _2470) + _2425;
        _2447 = (((cbLight._m0[_2451].z * 0.3183098733425140380859375) * _2469) * _2470) + _2426;
    }
    bool _2450 = _2430.y == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2450)
    {
        _2488 = _2443;
        _2490 = _2445;
        _2492 = _2447;
    }
    else
    {
        uint _2661 = _2356 + 7u;
        float _2677 = (dot(vec3(cbLight._m0[_2356 + 3u].xyz), vec3(_1136, _1137, _1138)) * 0.5) + 0.5;
        float _2678 = _2677 * _2677;
        float _4669 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2679 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2680 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2488 = (((cbLight._m0[_2661].x * 0.3183098733425140380859375) * _2679) * _2680) + _2443;
        _2490 = (((cbLight._m0[_2661].y * 0.3183098733425140380859375) * _2679) * _2680) + _2445;
        _2492 = (((cbLight._m0[_2661].z * 0.3183098733425140380859375) * _2679) * _2680) + _2447;
    }
    uint _2495 = _2356 + 8u;
    float _2508 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2356].w)) * _1139) * 0.949999988079071044921875);
    float _2509 = _2508 * _2508;
    float _2510 = cbLight._m0[_2356].x + _1215;
    float _2511 = cbLight._m0[_2356].y + _1216;
    float _2512 = cbLight._m0[_2356].z + _1217;
    float _2516 = inversesqrt(dot(vec3(_2510, _2511, _2512), vec3(_2510, _2511, _2512)));
    float _2517 = _2516 * _2510;
    float _2518 = _2516 * _2511;
    float _2519 = _2516 * _2512;
    float _2520 = dot(vec3(_1136, _1137, _1138), vec3(cbLight._m0[_2356].xyz));
    float _4685 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2523 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _4696 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    float _2524 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _2525 = dot(vec3(_1136, _1137, _1138), vec3(_2517, _2518, _2519));
    float _4707 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2356].xyz), vec3(_2517, _2518, _2519));
    float _4718 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2509 * _2509;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2545 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
    float _2546 = 0.959999978542327880859375 - _1282;
    float _2548 = 0.959999978542327880859375 - _1283;
    float _2549 = 0.959999978542327880859375 - _1284;
    float _2556 = 1.0 - _2509;
    float _2567 = (0.5 / (((_2524 * ((_2523 * _2556) + _2509)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2556) + _2509) * _2523))) * _2523;
    float _4729 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2569 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    uint _2583 = _2356 + 9u;
    float _2594 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2396].w)) * _1139) * 0.949999988079071044921875);
    float _2595 = _2594 * _2594;
    float _2596 = cbLight._m0[_2396].x + _1215;
    float _2597 = cbLight._m0[_2396].y + _1216;
    float _2598 = cbLight._m0[_2396].z + _1217;
    float _2602 = inversesqrt(dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598)));
    float _2603 = _2602 * _2596;
    float _2604 = _2602 * _2597;
    float _2605 = _2602 * _2598;
    float _2606 = dot(vec3(_1136, _1137, _1138), vec3(cbLight._m0[_2396].xyz));
    float _4740 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2609 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _2610 = dot(vec3(_1136, _1137, _1138), vec3(_2603, _2604, _2605));
    float _4751 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2396].xyz), vec3(_2603, _2604, _2605));
    float _4762 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2595 * _2595;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2629 = exp2(log2(1.0 - (isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0)))) * 5.0);
    float _2636 = 1.0 - _2595;
    float _2646 = (0.5 / (((_2524 * ((_2609 * _2636) + _2595)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2636) + _2595) * _2609))) * _2609;
    float _4773 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
    float _2648 = (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    float _2658 = (((((_2629 * _2546) + _1285) * cbLight._m0[_2583].x) * _2648) * _2379) + ((((cbLight._m0[_2495].x * _2348) * ((_2545 * _2546) + _1285)) * _2569) * _2392);
    float _2659 = (((((_2629 * _2548) + _1287) * cbLight._m0[_2583].y) * _2648) * _2379) + ((((cbLight._m0[_2495].y * _2349) * ((_2545 * _2548) + _1287)) * _2569) * _2392);
    float _2660 = (((((_2629 * _2549) + _1288) * cbLight._m0[_2583].z) * _2648) * _2379) + ((((cbLight._m0[_2495].z * _2350) * ((_2545 * _2549) + _1288)) * _2569) * _2392);
    float _2722;
    float _2724;
    float _2726;
    if (_2432)
    {
        _2722 = _2658;
        _2724 = _2659;
        _2726 = _2660;
    }
    else
    {
        uint _2728 = _2356 + 2u;
        uint _2732 = _2356 + 10u;
        float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2728].w)) * _1139) * 0.949999988079071044921875);
        float _2747 = _2746 * _2746;
        float _2748 = cbLight._m0[_2728].x + _1215;
        float _2749 = cbLight._m0[_2728].y + _1216;
        float _2750 = cbLight._m0[_2728].z + _1217;
        float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
        float _2755 = _2754 * _2748;
        float _2756 = _2754 * _2749;
        float _2757 = _2754 * _2750;
        float _2758 = dot(vec3(_1136, _1137, _1138), vec3(cbLight._m0[_2728].xyz));
        float _4784 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2762 = dot(vec3(_1136, _1137, _1138), vec3(_2755, _2756, _2757));
        float _4795 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2765 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2766 = dot(vec3(cbLight._m0[_2728].xyz), vec3(_2755, _2756, _2757));
        float _4806 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
        float _2770 = _2747 * _2747;
        float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
        float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2788 = 1.0 - _2747;
        float _2798 = (0.5 / (((_2524 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2788) + _2747) * _2761))) * _2761;
        float _4817 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2800 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
        float _2801 = isnan(1.0) ? _2371 : (isnan(_2371) ? 1.0 : min(_2371, 1.0));
        _2722 = (((((_2781 * _2546) + _1285) * cbLight._m0[_2732].x) * _2800) * _2801) + _2658;
        _2724 = (((((_2781 * _2548) + _1287) * cbLight._m0[_2732].y) * _2800) * _2801) + _2659;
        _2726 = (((((_2781 * _2549) + _1288) * cbLight._m0[_2732].z) * _2800) * _2801) + _2660;
    }
    float _2836;
    float _2838;
    float _2840;
    if (_2450)
    {
        _2836 = _2722;
        _2838 = _2724;
        _2840 = _2726;
    }
    else
    {
        uint _2847 = _2356 + 3u;
        uint _2851 = _2356 + 11u;
        float _2865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2847].w)) * _1139) * 0.949999988079071044921875);
        float _2866 = _2865 * _2865;
        float _2867 = cbLight._m0[_2847].x + _1215;
        float _2868 = cbLight._m0[_2847].y + _1216;
        float _2869 = cbLight._m0[_2847].z + _1217;
        float _2873 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
        float _2874 = _2873 * _2867;
        float _2875 = _2873 * _2868;
        float _2876 = _2873 * _2869;
        float _2877 = dot(vec3(_1136, _1137, _1138), vec3(cbLight._m0[_2847].xyz));
        float _4833 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2880 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
        float _2881 = dot(vec3(_1136, _1137, _1138), vec3(_2874, _2875, _2876));
        float _4844 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2884 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2885 = dot(vec3(cbLight._m0[_2847].xyz), vec3(_2874, _2875, _2876));
        float _4855 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2889 = _2866 * _2866;
        float _2893 = ((_2884 * _2884) * (_2889 + (-1.0))) + 1.0;
        float _2900 = exp2(log2(1.0 - (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) * 5.0);
        float _2907 = 1.0 - _2866;
        float _2917 = (0.5 / (((_2524 * ((_2880 * _2907) + _2866)) + 9.9999999392252902907785028219223e-09) + (((_2524 * _2907) + _2866) * _2880))) * _2880;
        float _4866 = isnan(0.0) ? _2917 : (isnan(_2917) ? 0.0 : max(_2917, 0.0));
        float _2919 = (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0))) * (_2889 / ((_2893 * _2893) * 3.141590118408203125));
        float _2920 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
        _2836 = (((((_2900 * _2546) + _1285) * cbLight._m0[_2851].x) * _2919) * _2920) + _2722;
        _2838 = (((((_2900 * _2548) + _1287) * cbLight._m0[_2851].y) * _2919) * _2920) + _2724;
        _2840 = (((((_2900 * _2549) + _1288) * cbLight._m0[_2851].z) * _2919) * _2920) + _2726;
    }
    float _3055;
    float _3057;
    float _3059;
    float _3061;
    float _3063;
    float _3065;
    if (_2354.y == 0u)
    {
        float _2995 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2996 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2995;
        float _2997 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2995;
        float _2998 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2995;
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.x;
        uint _3022 = uint((float(_3010.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1224) / _3011))) + floor(float(uint(cbSceneParam._m0[85u].x * _1223) / _3011)));
        float _3032 = (log2(_2998 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3033 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0));
        uint _3036 = uint(isnan(14.0) ? _3033 : (isnan(_3033) ? 14.0 : min(_3033, 14.0)));
        uvec4 _3041 = texelFetch(g_lightClusterGridBuffer, int(((_3036 << 2u) + (_3022 << 6u)) >> 2u));
        uint _3042 = _3041.x;
        uint _3043 = _3010.z;
        float _3143;
        float _3145;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        if (((((1u << ((_3043 >> 4u) & 15u)) + 4294967295u) & _3042) == 0u) || ((_3043 & 240u) == 0u))
        {
            _3143 = 0.0;
            _3145 = 0.0;
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
        }
        else
        {
            float _3144;
            float _3146;
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_3036 << 5u) + (_3022 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3304)
                {
                    frontier_phi_61_pred = _3288;
                    frontier_phi_61_pred_1 = _3293;
                    frontier_phi_61_pred_2 = _3292;
                    frontier_phi_61_pred_3 = _3291;
                    frontier_phi_61_pred_4 = _3290;
                    frontier_phi_61_pred_5 = _3289;
                }
                else
                {
                    float _3412;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    uint _3418;
                    _3412 = _3288;
                    _3413 = _3289;
                    _3414 = _3290;
                    _3415 = _3291;
                    _3416 = _3292;
                    _3417 = _3293;
                    _3418 = _3303;
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    for (;;)
                    {
                        uint _3422 = uint(findLSB(_3418)) + (_3294 << 5u);
                        uint _3419 = (_3418 + 4294967295u) & _3418;
                        uint _3424 = _3422 * 48u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3424)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3424 + 3u)).x));
                        uint _3444 = (_3422 * 48u) + 4u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 3u)).x));
                        uint _3463 = (_3422 * 48u) + 8u;
                        vec3 _3474 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x));
                        float _3478 = _3438.x - _2996;
                        float _3479 = _3438.y - _2997;
                        float _3480 = _3438.z - _2998;
                        float _3481 = dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480));
                        float _3484 = inversesqrt(_3481);
                        float _3485 = _3484 * _3478;
                        float _3486 = _3484 * _3479;
                        float _3487 = _3484 * _3480;
                        float _3488 = dot(vec3(_1242, _1245, _1248), vec3(_3485, _3486, _3487));
                        float _3493 = 1.0 - (_3481 * _3438.w);
                        float _4892 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                        float _3494 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                        float _3495 = sqrt(_3481) * _3457.w;
                        float _3498 = 1.39999997615814208984375 / (_3495 + 1.39999997615814208984375);
                        float _3499 = _3498 * _3498;
                        float _3502 = ((1.0 - _3499) * _3488) + _3499;
                        float _3505 = _3495 * _3495;
                        float _3509 = ((isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0))) * _3494) / ((_3505 * 0.699999988079071044921875) + 1.0);
                        float _3513 = (-0.0) - _2996;
                        float _3514 = (-0.0) - _2997;
                        float _3515 = (-0.0) - _2998;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3520 = _3519 * _3513;
                        float _3521 = _3519 * _3514;
                        float _3522 = _3519 * _3515;
                        float _3530 = exp2(log2(1.0 / ((_3505 * 3.5) + 5.0)) * 0.25);
                        float _3531 = 1.0 - _1317;
                        float _3538 = sqrt(1.0 - ((1.0 - (_3531 * _3531)) * (1.0 - (_3530 * _3530))));
                        float _3539 = _3538 * _3538;
                        float _3540 = _3539 * _3539;
                        float _3541 = _3520 + _3485;
                        float _3542 = _3521 + _3486;
                        float _3543 = _3522 + _3487;
                        float _3547 = inversesqrt(dot(vec3(_3541, _3542, _3543), vec3(_3541, _3542, _3543)));
                        float _3551 = dot(vec3(_1242, _1245, _1248), vec3(_3520, _3521, _3522));
                        float _4908 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3554 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3555 = dot(vec3(_1242, _1245, _1248), vec3(_3547 * _3541, _3547 * _3542, _3547 * _3543));
                        float _4919 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3558 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3562 = ((_3558 * _3558) * (_3540 + (-1.0))) + 1.0;
                        float _3563 = _3498 * _3539;
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3488) + _3564;
                        float _4930 = isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0));
                        float _3568 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3569 = 1.0 - _3539;
                        float _3579 = (0.5 / (((_3568 * ((_3554 * _3569) + _3539)) + 9.9999999392252902907785028219223e-09) + (((_3568 * _3569) + _3539) * _3554))) * _3568;
                        float _4941 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                        float _3590 = (((_3540 * 3.1415927410125732421875) * (isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0)))) / ((_3562 * _3562) * ((_3505 * 2.1991131305694580078125) + 3.141590118408203125))) * _3494;
                        _3347 = (_3509 * _3457.x) + _3415;
                        _3348 = (_3509 * _3457.y) + _3416;
                        _3349 = (_3509 * _3457.z) + _3417;
                        _3344 = (_3590 * _3474.x) + _3412;
                        _3345 = (_3590 * _3474.y) + _3413;
                        _3346 = (_3590 * _3474.z) + _3414;
                        if (_3419 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3412 = _3344;
                            _3413 = _3345;
                            _3414 = _3346;
                            _3415 = _3347;
                            _3416 = _3348;
                            _3417 = _3349;
                            _3418 = _3419;
                        }
                    }
                    frontier_phi_61_pred = _3344;
                    frontier_phi_61_pred_1 = _3349;
                    frontier_phi_61_pred_2 = _3348;
                    frontier_phi_61_pred_3 = _3347;
                    frontier_phi_61_pred_4 = _3346;
                    frontier_phi_61_pred_5 = _3345;
                }
                _3144 = frontier_phi_61_pred;
                _3154 = frontier_phi_61_pred_1;
                _3152 = frontier_phi_61_pred_2;
                _3150 = frontier_phi_61_pred_3;
                _3148 = frontier_phi_61_pred_4;
                _3146 = frontier_phi_61_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3144;
                    _3289 = _3146;
                    _3290 = _3148;
                    _3291 = _3150;
                    _3292 = _3152;
                    _3293 = _3154;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3143 = _3144;
            _3145 = _3146;
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
        }
        uvec4 _3157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3158 = _3157.z;
        uint _3160 = (_3158 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3160) & _3042) == 0u)
        {
            _3256 = _3143;
            _3258 = _3145;
            _3260 = _3147;
            _3262 = _3149;
            _3264 = _3151;
            _3266 = _3153;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
            float _3282 = _3281 * _2996;
            float _3283 = _3281 * _2997;
            float _3284 = _3281 * _2998;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3160 < ((_3158 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3395 = _3143;
                float _3396 = _3145;
                float _3397 = _3147;
                float _3398 = _3149;
                float _3399 = _3151;
                float _3400 = _3153;
                uint _3401 = _3160;
                uint _3410;
                bool _3411;
                for (;;)
                {
                    _3410 = texelFetch(g_lightClassification, int((((_3036 << 5u) + (_3022 << 9u)) + (_3401 << 2u)) >> 2u)).x;
                    _3411 = _3410 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3411)
                    {
                        frontier_phi_67_pred = _3398;
                        frontier_phi_67_pred_1 = _3399;
                        frontier_phi_67_pred_2 = _3400;
                        frontier_phi_67_pred_3 = _3397;
                        frontier_phi_67_pred_4 = _3396;
                        frontier_phi_67_pred_5 = _3395;
                    }
                    else
                    {
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3608 = _3395;
                        float _3609 = _3396;
                        float _3610 = _3397;
                        float _3611 = _3398;
                        float _3612 = _3399;
                        float _3613 = _3400;
                        uint _3614 = _3410;
                        uint _3615;
                        vec4 _3640;
                        float _3641;
                        vec4 _3656;
                        vec3 _3668;
                        vec4 _3683;
                        vec4 _3698;
                        float _3744;
                        bool _3745;
                        for (;;)
                        {
                            uint _3625 = ((_3401 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3614));
                            _3615 = (_3614 + 4294967295u) & _3614;
                            uint _3627 = _3625 * 40u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3641 = _3640.w;
                            uint _3643 = (_3625 * 40u) + 4u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3625 * 40u) + 8u;
                            _3668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x));
                            uint _3670 = (_3625 * 40u) + 16u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3625 * 40u) + 20u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3625 * 40u) + 24u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3719 = (_3625 * 40u) + 28u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3744 = fma(_2998, _3732.z, fma(_2997, _3732.y, _3732.x * _2996)) + _3732.w;
                            _3745 = !((fma(_2998, _3713.z, fma(_2997, _3713.y, _3713.x * _2996)) + _3713.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3745)
                            {
                                float _3772 = _3640.x - _2996;
                                float _3773 = _3640.y - _2997;
                                float _3774 = _3640.z - _2998;
                                float _3775 = dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774));
                                float _3778 = inversesqrt(_3775);
                                float _3779 = _3778 * _3772;
                                float _3780 = _3778 * _3773;
                                float _3781 = _3778 * _3774;
                                float _3785 = 1.0 - (_3775 / (_3641 * _3641));
                                float _4952 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3790 = sqrt(_3775) * _3656.w;
                                float _3792 = 1.39999997615814208984375 / (_3790 + 1.39999997615814208984375);
                                float _3793 = _3792 * _3792;
                                float _3796 = ((1.0 - _3793) * dot(vec3(_3779, _3780, _3781), vec3(_1242, _1245, _1248))) + _3793;
                                float _3799 = _3790 * _3790;
                                float _3803 = (fma(_2998, _3683.z, fma(_2997, _3683.y, _3683.x * _2996)) + _3683.w) / _3744;
                                float _3804 = (fma(_2998, _3698.z, fma(_2997, _3698.y, _3698.x * _2996)) + _3698.w) / _3744;
                                float _3808 = 1.0 - dot(vec2(_3803, _3804), vec2(_3803, _3804));
                                float _4968 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3810 = _3809 * (((isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0))) * _3786) / ((_3799 * 0.699999988079071044921875) + 1.0));
                                float _3822 = exp2(log2(1.0 / ((_3799 * 3.5) + 5.0)) * 0.25);
                                float _3823 = 1.0 - _1317;
                                float _3830 = sqrt(1.0 - ((1.0 - (_3823 * _3823)) * (1.0 - (_3822 * _3822))));
                                float _3831 = _3830 * _3830;
                                float _3832 = _3831 * _3831;
                                float _3833 = _3779 - _3282;
                                float _3834 = _3780 - _3283;
                                float _3835 = _3781 - _3284;
                                float _3839 = inversesqrt(dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835)));
                                float _3843 = dot(vec3(_1242, _1245, _1248), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _4979 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3847 = dot(vec3(_1242, _1245, _1248), vec3(_3839 * _3833, _3839 * _3834, _3839 * _3835));
                                float _4990 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3854 = ((_3850 * _3850) * (_3832 + (-1.0))) + 1.0;
                                float _3855 = _3792 * _3831;
                                float _3856 = _3855 * _3855;
                                float _3862 = ((1.0 - _3856) * dot(vec3(_1242, _1245, _1248), vec3(_3779, _3780, _3781))) + _3856;
                                float _5001 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3864 = 1.0 - _3831;
                                float _3874 = (0.5 / (((_3863 * ((_3846 * _3864) + _3831)) + 9.9999999392252902907785028219223e-09) + (((_3863 * _3864) + _3831) * _3846))) * _3863;
                                float _5012 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3884 = (_3809 * _3786) * (((_3832 * 3.1415927410125732421875) * (isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0)))) / ((_3854 * _3854) * ((_3799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3884 * _3668.x;
                                frontier_phi_73_pred_1 = _3884 * _3668.y;
                                frontier_phi_73_pred_2 = _3810 * _3656.z;
                                frontier_phi_73_pred_3 = _3810 * _3656.y;
                                frontier_phi_73_pred_4 = _3810 * _3656.x;
                                frontier_phi_73_pred_5 = _3884 * _3668.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3888 = frontier_phi_73_pred;
                            _3889 = frontier_phi_73_pred_1;
                            _3893 = frontier_phi_73_pred_2;
                            _3892 = frontier_phi_73_pred_3;
                            _3891 = frontier_phi_73_pred_4;
                            _3890 = frontier_phi_73_pred_5;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            if (_3615 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3615;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3598;
                        frontier_phi_67_pred_1 = _3599;
                        frontier_phi_67_pred_2 = _3600;
                        frontier_phi_67_pred_3 = _3597;
                        frontier_phi_67_pred_4 = _3596;
                        frontier_phi_67_pred_5 = _3595;
                    }
                    _3263 = frontier_phi_67_pred;
                    _3265 = frontier_phi_67_pred_1;
                    _3267 = frontier_phi_67_pred_2;
                    _3261 = frontier_phi_67_pred_3;
                    _3259 = frontier_phi_67_pred_4;
                    _3257 = frontier_phi_67_pred_5;
                    uint _3402 = _3401 + 1u;
                    if (_3402 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3395 = _3257;
                        _3396 = _3259;
                        _3397 = _3261;
                        _3398 = _3263;
                        _3399 = _3265;
                        _3400 = _3267;
                        _3401 = _3402;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3265;
                frontier_phi_55_56_ladder_1 = _3267;
                frontier_phi_55_56_ladder_2 = _3263;
                frontier_phi_55_56_ladder_3 = _3261;
                frontier_phi_55_56_ladder_4 = _3259;
                frontier_phi_55_56_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_55_56_ladder = _3151;
                frontier_phi_55_56_ladder_1 = _3153;
                frontier_phi_55_56_ladder_2 = _3149;
                frontier_phi_55_56_ladder_3 = _3147;
                frontier_phi_55_56_ladder_4 = _3145;
                frontier_phi_55_56_ladder_5 = _3143;
            }
            _3256 = frontier_phi_55_56_ladder_5;
            _3258 = frontier_phi_55_56_ladder_4;
            _3260 = frontier_phi_55_56_ladder_3;
            _3262 = frontier_phi_55_56_ladder_2;
            _3264 = frontier_phi_55_56_ladder;
            _3266 = frontier_phi_55_56_ladder_1;
        }
        float _3271 = isnan(1.0) ? _1301 : (isnan(_1301) ? 1.0 : min(_1301, 1.0));
        _3055 = (_3271 * _3262) + _2488;
        _3057 = (_3271 * _3264) + _2490;
        _3059 = (_3271 * _3266) + _2492;
        _3061 = ((_3256 * _1285) * _3271) + _2836;
        _3063 = ((_3258 * _1287) * _3271) + _2838;
        _3065 = ((_3260 * _1288) * _3271) + _2840;
    }
    else
    {
        _3055 = _2488;
        _3057 = _2490;
        _3059 = _2492;
        _3061 = _2836;
        _3063 = _2838;
        _3065 = _2840;
    }
    float _5028 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    float _5039 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
    float _5050 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    uint _3085 = _301 + 6u;
    float _3093 = _1223 / cbSceneParam._m0[86u].x;
    float _3094 = _1224 / cbSceneParam._m0[86u].y;
    vec4 _3108 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, (log2((isnan(cbSceneParam._m0[77u].w) ? _1158 : (isnan(_1158) ? cbSceneParam._m0[77u].w : min(_1158, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3110 = _3108.x;
    float _3111 = _3108.y;
    float _3112 = _3108.z;
    float _3113 = _3108.w;
    float _3206;
    float _3208;
    float _3210;
    float _3212;
    if (_1158 > cbSceneParam._m0[78u].w)
    {
        float _3168 = isnan(_1158) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1158 : min(cbSceneParam._m0[80u].w, _1158));
        float _3169 = _3168 / _1158;
        float _3180 = _3169 * _1208;
        float _3181 = _1209 * _3169;
        float _3182 = (-0.0) - _3181;
        float _3184 = _3169 * _1210;
        float _3186 = (cbSceneParam._m0[77u].w * _3182) / _3168;
        float _3187 = _3186 + cbSceneParam._m0[79u].w;
        float _3188 = cbSceneParam._m0[79u].w - _3181;
        float _3194 = sqrt(((_3180 * _3180) + (_3181 * _3181)) + (_3184 * _3184));
        float _3197 = (1.0 - (cbSceneParam._m0[77u].w / _3168)) * _3194;
        float _3202 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3204 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3357;
        if (abs((_3182 - _3186) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3357 = ((((_3187 > 0.0) ? exp2(_3202 * _3187) : (2.0 - exp2(_3204 * _3187))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3197;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : max(_3187, _3188));
            float _3319 = isnan(_3188) ? _3187 : (isnan(_3187) ? _3188 : min(_3187, _3188));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3357 = ((abs(_3194 / _3182) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3202 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3202 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3204 * _3328) - exp2(_3204 * _3329)) * _3317))) + (_3197 * cbSceneParam._m0[80u].z);
        }
        vec4 _3359 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3093, _3094, 1.0), 0.0);
        float _3368 = exp2((_3357 * (-1.44269502162933349609375)) * (1.0 - _3359.w));
        float _3369 = log2(_3368);
        float _3385 = log2(_3113);
        _3206 = (exp2(_3385 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].x)) * _3359.x) / cbSceneParam._m0[78u].x)) + _3110;
        _3208 = (exp2(_3385 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].y)) * _3359.y) / cbSceneParam._m0[78u].y)) + _3111;
        _3210 = (exp2(_3385 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3369 * cbSceneParam._m0[78u].z)) * _3359.z) / cbSceneParam._m0[78u].z)) + _3112;
        _3212 = _3368 * _3113;
    }
    else
    {
        _3206 = _3110;
        _3208 = _3111;
        _3210 = _3112;
        _3212 = _3113;
    }
    float _3224 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3225 = _3224 == 3.0;
    float _3226 = log2(_3212);
    float _3233 = exp2(_3226 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_3055 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1301))) + ((_3061 + ((isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0))) * _2107)) * cbPerFrame._m0[3u].x));
    float _3234 = exp2(_3226 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3057 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1301))) + ((_3063 + ((isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0))) * _2107)) * cbPerFrame._m0[3u].x));
    float _3235 = exp2(_3226 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3059 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1301))) + ((_3065 + ((isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0))) * _2107)) * cbPerFrame._m0[3u].x));
    float _3244 = (_3224 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3244 * (_3225 ? _3233 : (_3233 + (cbSceneParam._m0[72u].w * _3206)));
    SV_Target.y = _3244 * (_3225 ? _3234 : (_3234 + (cbSceneParam._m0[72u].w * _3208)));
    SV_Target.z = _3244 * (_3225 ? _3235 : (_3235 + (cbSceneParam._m0[72u].w * _3210)));
    SV_Target.w = cbInstanceData._m0[_3085].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3085].w;
}


