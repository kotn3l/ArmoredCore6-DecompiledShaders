#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1375;
float _3756;
float _3757;
float _3758;
float _3759;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    uint _253 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _253 + 1u;
    uint _262 = _253 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_253].x * cbInstanceData._m0[_253].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _374 = _372.x;
    float _386 = dot(vec4(_374, _372.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _403 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_374 - _386) * cbMtdParam._m0[23u].w) + _386) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3768 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _404 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _411 = (_404 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _412 = (_404 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _413 = (_404 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _450 = _448.x;
    float _451 = _448.y;
    float _452 = _448.z;
    float _461 = ((_431.z - _452) * _404) + _452;
    float _464 = ((((_431.x - _450) * _404) + _450) * 2.0) + (-1.0);
    float _466 = ((((_431.y - _451) * _404) + _451) * 2.0) + (-1.0);
    float _467 = dot(vec2(_464, _466), vec2(_464, _466));
    float _3779 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _472 = sqrt(1.0 - (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))));
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _500 = (((_488.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _464;
    float _501 = (((_488.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _466;
    float _504 = fma(_472, _241, fma(_501, _248, _500 * _234));
    float _507 = fma(_472, _242, fma(_501, _249, _500 * _235));
    float _510 = fma(_472, _243, fma(_501, _250, _500 * _236));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _543 = _541.x;
    float _544 = 1.0 - _543;
    float _553 = (cbMtdParam._m0[19u].x + dot(vec4(_514 * _504, _514 * _507, _514 * _510, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_543 - _544) * cbMtdParam._m0[24u].z) + _544) * cbMtdParam._m0[21u].z);
    float _3790 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _556 = (-0.0) - cbMtdParam._m0[24u].x;
    float _558 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _559 = isnan(1.0) ? _558 : (isnan(_558) ? 1.0 : min(_558, 1.0));
    float _566 = _554 - ((_554 * TEXCOORD_8.x) * _559);
    float _567 = _554 - ((_554 * TEXCOORD_8.y) * _559);
    float _568 = _554 - ((_554 * TEXCOORD_8.z) * _559);
    float _575 = (_566 * (cbMtdParam._m0[17u].x - _411)) + _411;
    float _576 = (_567 * (cbMtdParam._m0[17u].y - _412)) + _412;
    float _577 = (_568 * (cbMtdParam._m0[17u].z - _413)) + _413;
    vec4 _589 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _272) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _273) + cbTextureTilingScale._m0[19u].w));
    float _591 = _589.x;
    float _592 = 1.0 - _591;
    float _618 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_591 - _592) * cbMtdParam._m0[24u].w) + _592) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3811 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _619 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _627 = ((((cbMtdParam._m0[10u].x - _575) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _619) + _575;
    float _628 = ((((cbMtdParam._m0[10u].y - _576) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _619) + _576;
    float _629 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _577)) * _619) + _577;
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _655 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _657 = _655.x;
    float _675 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _657) * _404) + _657;
    float _679 = ((_641.x - _675) * cbMtdParam._m0[19u].z) + _675;
    float _681 = _679 - (_679 * _566);
    float _683 = _681 - (_681 * _619);
    float _687 = (cbMtdParam._m0[19u].w * (_488.z - _461)) + _461;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _708 = (_701.x * 2.0) + (-1.0);
    float _709 = (_701.y * 2.0) + (-1.0);
    float _710 = dot(vec2(_708, _709), vec2(_708, _709));
    float _3822 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _718 = ((_701.z - _687) * _566) + _687;
    float _721 = ((cbMtdParam._m0[23u].x - _718) * _619) + _718;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _272) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _273) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _746 = (_740.x * 2.0) + (-1.0);
    float _747 = (_740.y * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3833 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _763 = ((sqrt(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) - _472) * _568) + _472;
    float _766 = (((_708 - _500) * _566) + _500) + (cbMtdParam._m0[21u].x * _500);
    float _767 = (((_709 - _501) * _567) + _501) + (cbMtdParam._m0[21u].x * _501);
    float _778 = (((_746 - _766) + (_766 * cbMtdParam._m0[22u].z)) * _619) + _766;
    float _779 = (((_747 - _767) + (_767 * cbMtdParam._m0[22u].z)) * _619) + _767;
    float _780 = (_619 * (sqrt(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) - _763)) + _763;
    float _782 = cbMtdParam._m0[22u].x + _488.w;
    float _785 = fma(_780, _241, fma(_779, _248, _778 * _234));
    float _788 = fma(_780, _242, fma(_779, _249, _778 * _235));
    float _791 = fma(_780, _243, fma(_779, _250, _778 * _236));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3844 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _799 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3866 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3877 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3888 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3899 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _804 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _858 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _868 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _858);
    float _869 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _858);
    float _870 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _858);
    float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
    float _875 = _868 * _874;
    float _876 = _869 * _874;
    float _877 = _870 * _874;
    vec4 _882 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _884 = _882.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1056 = sqrt(((_868 * _868) + (_869 * _869)) + (_870 * _870));
        float _1062 = (cbMatDynParam._m0[5u].x * _1056) + cbMatDynParam._m0[5u].y;
        float _3910 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1067 = (cbMatDynParam._m0[5u].z * _1056) + cbMatDynParam._m0[5u].w;
        float _3921 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) - _1063)) + _1063) < ((_884 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _895 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _896 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _914 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _917 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _920 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _933 = _253 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * cbInstanceData._m0[_934].z;
    float _3932 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _3954 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _946 = 1.0 - _804;
    float _947 = _943 * _946;
    float _948 = _944 * _946;
    float _949 = _945 * _946;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _804;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _804;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _804;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _895, cbSceneParam._m0[86u].y * _896));
    float _973 = ((isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * TEXCOORD_5.w) * _969.x;
    float _974 = dot(vec3(_796, _797, _798), vec3(_875, _876, _877));
    float _977 = _974 * 2.0;
    float _981 = (_977 * _796) - _875;
    float _982 = (_977 * _797) - _876;
    float _983 = (_977 * _798) - _877;
    float _987 = abs(dot(vec3(_875, _876, _877), vec3(_796, _797, _798)));
    float _3965 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _989 = sqrt(_799);
    float _1002 = exp2((_989 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_989 * 3.0));
    float _1008 = (1.0 - _1002) * ((_989 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1009 = _1002 * _989;
    float _1037 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1041 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1045 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1045, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1037));
        float _1103 = fma(_1045, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1037));
        float _1107 = fma(_1045, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1037));
        float _1132 = _1037 + _796;
        float _1133 = _1041 + _797;
        float _1134 = _1045 + _798;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1099;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1103;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1107;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_796, _797, _798), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3991 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4002 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4013 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_796, _797, _798), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4024 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4035 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4046 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_796, _797, _798), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4057 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4068 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4079 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1417 = fma(_1045, cbModelParam._m0[30u].z, fma(_1041, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037));
        float _1421 = fma(_1045, cbModelParam._m0[31u].z, fma(_1041, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037));
        float _1425 = fma(_1045, cbModelParam._m0[32u].z, fma(_1041, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037));
        float _1448 = _1037 + _796;
        float _1449 = _1041 + _797;
        float _1450 = _1045 + _798;
        float _1460 = fma(_1450, cbModelParam._m0[30u].z, fma(_1449, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1448)) - _1417;
        float _1461 = fma(_1450, cbModelParam._m0[31u].z, fma(_1449, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1448)) - _1421;
        float _1462 = fma(_1450, cbModelParam._m0[32u].z, fma(_1449, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1448)) - _1425;
        float _1466 = inversesqrt(dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462)));
        float _1479 = ((_1466 * _1460) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1417 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1480 = ((_1466 * _1461) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1421 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1466 * _1462) / cbModelParam._m0[35u].z) + ((((((_1425 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        vec4 _1504 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1479, _1480, _1481), 0.0);
        float _1516 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1483.x + (-0.5));
        float _1518 = _1516 * (_1483.y + (-0.5));
        float _1519 = _1516 * (_1483.z + (-0.5));
        float _1526 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1490.x + (-0.5));
        float _1528 = _1526 * (_1490.y + (-0.5));
        float _1529 = _1526 * (_1490.z + (-0.5));
        float _1536 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1537 = _1536 * (_1497.x + (-0.5));
        float _1538 = _1536 * (_1497.y + (-0.5));
        float _1539 = _1536 * (_1497.z + (-0.5));
        float _1546 = exp2((_1504.w + (-0.5)) * 20.0) * 2.0;
        float _1547 = _1546 * (_1504.x + (-0.5));
        float _1548 = _1546 * (_1504.y + (-0.5));
        float _1549 = _1546 * (_1504.z + (-0.5));
        float _1550 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = _1517 * 0.5;
        float _1554 = _1527 * 0.5;
        float _1555 = _1537 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_796, _797, _798), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1550 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4142 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1580 + 1.0))) + _1585) * _1550;
        float _1595 = _1518 * 0.5;
        float _1596 = _1528 * 0.5;
        float _1597 = _1538 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_796, _797, _798), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4175 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1622 + 1.0))) + _1627) * _1551;
        float _1637 = _1519 * 0.5;
        float _1638 = _1529 * 0.5;
        float _1639 = _1539 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_796, _797, _798), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4208 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1664 + 1.0))) + _1669) * _1552;
        _1686 = _1519;
        _1687 = _1518;
        _1688 = _1517;
        _1689 = _1529;
        _1690 = _1528;
        _1691 = _1527;
        _1692 = _1539;
        _1693 = _1538;
        _1694 = _1537;
        _1695 = _1552;
        _1696 = _1551;
        _1697 = _1550;
        _1698 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
    }
    else
    {
        _1686 = _1375;
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = _1375;
        _1697 = _1375;
        _1698 = 0.0;
        _1699 = 0.0;
        _1700 = 0.0;
    }
    float _1710 = (cbModelParam._m0[1u].x * (_1698 - _1387)) + _1387;
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1388)) + _1388;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1733 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1736 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1739 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1710));
    float _1754 = _981 * 0.5;
    float _1755 = _982 * 0.5;
    float _1756 = _983 * 0.5;
    float _1757 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1760 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1763 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1686, _1689, _1692, _1695));
    float _1797;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1770 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1774 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1778 = dot(vec4(_1754, _1755, _1756, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1785 = dot(vec4(cbModelParam._m0[39u]), vec4(_1754, _1755, _1756, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)), isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1785) ? 0.0 : (isnan(0.0) ? _1785 : max(0.0, _1785))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1808;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1799 = dot(vec4(cbModelParam._m0[40u]), vec4(_1754, _1755, _1756, 1.0));
        _1808 = dot(vec3(isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1799) ? 0.0 : (isnan(0.0) ? _1799 : max(0.0, _1799))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1808 = 1.0;
    }
    float _1812 = (_1808 * cbModelParam._m0[1u].x) + (_1797 * (1.0 - cbModelParam._m0[1u].x));
    float _1822 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1822 : min(cbModelParam._m0[25u].z, _1822));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1871 = fma(_1045, cbModelParam._m0[13u].z, fma(_1041, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1037)) + cbModelParam._m0[13u].w;
        float _1875 = fma(_1045, cbModelParam._m0[14u].z, fma(_1041, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1037)) + cbModelParam._m0[14u].w;
        float _1879 = fma(_1045, cbModelParam._m0[15u].z, fma(_1041, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1037)) + cbModelParam._m0[15u].w;
        float _1882 = fma(_983, cbModelParam._m0[13u].z, fma(_982, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981));
        float _1885 = fma(_983, cbModelParam._m0[14u].z, fma(_982, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981));
        float _1888 = fma(_983, cbModelParam._m0[15u].z, fma(_982, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981));
        float _1916;
        if (_1882 > 0.0)
        {
            _1916 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1916 = frontier_phi_17_15_ladder;
        }
        float _2119;
        if (_1885 > 0.0)
        {
            _2119 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2119 = frontier_phi_26_22_ladder;
        }
        float _2373;
        if (_1888 > 0.0)
        {
            _2373 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2373 = frontier_phi_38_33_ladder;
        }
        float _2375 = isnan(_2119) ? _1916 : (isnan(_1916) ? _2119 : min(_1916, _2119));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1882) + _1871;
        float _2381 = (_2376 * _1885) + _1875;
        float _2382 = (_2376 * _1888) + _1879;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1823);
            frontier_phi_16_38_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1904 = frontier_phi_16_38_ladder_2;
        _1906 = frontier_phi_16_38_ladder_1;
        _1908 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_981, _982, _983), _1823);
        _1904 = _1892.x * cbModelParam._m0[1u].y;
        _1906 = _1892.y * cbModelParam._m0[1u].y;
        _1908 = _1892.z * cbModelParam._m0[1u].y;
    }
    float _1912 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1912 : min(cbModelParam._m0[25u].w, _1912));
    float _2003;
    float _2005;
    float _2007;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1967 = fma(_1045, cbModelParam._m0[21u].z, fma(_1041, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1037)) + cbModelParam._m0[21u].w;
        float _1971 = fma(_1045, cbModelParam._m0[22u].z, fma(_1041, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1037)) + cbModelParam._m0[22u].w;
        float _1975 = fma(_1045, cbModelParam._m0[23u].z, fma(_1041, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1037)) + cbModelParam._m0[23u].w;
        float _1978 = fma(_983, cbModelParam._m0[21u].z, fma(_982, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981));
        float _1981 = fma(_983, cbModelParam._m0[22u].z, fma(_982, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981));
        float _1984 = fma(_983, cbModelParam._m0[23u].z, fma(_982, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981));
        float _2124;
        if (_1978 > 0.0)
        {
            _2124 = abs((1.0 - _1967) / _1978);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1967 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2124 = frontier_phi_28_24_ladder;
        }
        float _2400;
        if (_1981 > 0.0)
        {
            _2400 = abs((1.0 - _1971) / _1981);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1971 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2400 = frontier_phi_40_35_ladder;
        }
        float _2613;
        if (_1984 > 0.0)
        {
            _2613 = abs((1.0 - _1975) / _1984);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1984 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1975 + 1.0) / _1984);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2613 = frontier_phi_49_46_ladder;
        }
        float _2615 = isnan(_2400) ? _2124 : (isnan(_2124) ? _2400 : min(_2124, _2400));
        float _2616 = isnan(_2613) ? _2615 : (isnan(_2615) ? _2613 : min(_2615, _2613));
        float _2620 = (_2616 * _1978) + _1967;
        float _2621 = (_2616 * _1981) + _1971;
        float _2622 = (_2616 * _1984) + _1975;
        float _2623 = _2616 * 9.9999997473787516355514526367188e-05;
        float _2624 = (-1.0) - _2623;
        float _2626 = _2623 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2622 > _2626) || ((_2622 < _2624) || ((_2621 > _2626) || ((_2621 < _2624) || ((_2620 < _2624) || (_2620 > _2626))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2622, cbModelParam._m0[17u].z, fma(_2621, cbModelParam._m0[17u].y, _2620 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2622, cbModelParam._m0[18u].z, fma(_2621, cbModelParam._m0[18u].y, _2620 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2622, cbModelParam._m0[19u].z, fma(_2621, cbModelParam._m0[19u].y, _2620 * cbModelParam._m0[19u].x))), _1913);
            frontier_phi_25_49_ladder = _2821.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2821.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2821.x * cbModelParam._m0[1u].z;
        }
        _2003 = frontier_phi_25_49_ladder_2;
        _2005 = frontier_phi_25_49_ladder_1;
        _2007 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_981, _982, _983), _1913);
        _2003 = _1987.x * cbModelParam._m0[1u].z;
        _2005 = _1987.y * cbModelParam._m0[1u].z;
        _2007 = _1987.z * cbModelParam._m0[1u].z;
    }
    float _2020 = (((_1008 * _957) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2003 - _1904)) + _1904);
    float _2022 = (((_1008 * _959) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2024 = (((_1008 * _960) + _1009) * _973) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2027 = fma(_2024, cbSceneParam._m0[89u].z, fma(_2022, cbSceneParam._m0[89u].y, _2020 * cbSceneParam._m0[89u].x));
    float _2030 = fma(_2024, cbSceneParam._m0[90u].z, fma(_2022, cbSceneParam._m0[90u].y, _2020 * cbSceneParam._m0[90u].x));
    float _2033 = fma(_2024, cbSceneParam._m0[91u].z, fma(_2022, cbSceneParam._m0[91u].y, _2020 * cbSceneParam._m0[91u].x));
    uvec4 _2043 = floatBitsToUint(cbInstanceData._m0[_253 + 5u]);
    uint _2045 = _2043.x * 14u;
    uint _2046 = _2045 + 13u;
    float _2053 = _973 + (-1.0);
    float _2058 = (cbLight._m0[_2046].x * _2053) + 1.0;
    float _2059 = (cbLight._m0[_2046].y * _2053) + 1.0;
    float _2060 = (cbLight._m0[_2046].z * _2053) + 1.0;
    float _2061 = (cbLight._m0[_2046].w * _2053) + 1.0;
    uint _2062 = _2045 + 5u;
    float _2068 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
    uint _2072 = _2045 + 4u;
    float _2078 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
    uint _2082 = _2045 | 1u;
    float _2093 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_796, _797, _798));
    float _2096 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_796, _797, _798));
    float _4344 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _4355 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2101 = (isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * 0.3183098733425140380859375;
    float _2103 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2110 = ((cbLight._m0[_2062].x * _2068) * _2103) + ((cbLight._m0[_2072].x * _2078) * _2101);
    float _2111 = ((_2068 * cbLight._m0[_2062].y) * _2103) + ((_2078 * cbLight._m0[_2072].y) * _2101);
    float _2112 = ((_2068 * cbLight._m0[_2062].z) * _2103) + ((_2078 * cbLight._m0[_2072].z) * _2101);
    uvec4 _2116 = floatBitsToUint(cbLight._m0[_2045 + 12u]);
    bool _2118 = _2116.x == 0u;
    float _2129;
    float _2131;
    float _2133;
    if (_2118)
    {
        _2129 = _2110;
        _2131 = _2111;
        _2133 = _2112;
    }
    else
    {
        uint _2137 = _2045 + 6u;
        float _2153 = (dot(vec3(cbLight._m0[_2045 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2154 = _2153 * _2153;
        float _4366 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        float _2155 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2156 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2129 = (((cbLight._m0[_2137].x * 0.3183098733425140380859375) * _2155) * _2156) + _2110;
        _2131 = (((cbLight._m0[_2137].y * 0.3183098733425140380859375) * _2155) * _2156) + _2111;
        _2133 = (((cbLight._m0[_2137].z * 0.3183098733425140380859375) * _2155) * _2156) + _2112;
    }
    bool _2136 = _2116.y == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2136)
    {
        _2174 = _2129;
        _2176 = _2131;
        _2178 = _2133;
    }
    else
    {
        uint _2344 = _2045 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_2045 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4382 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2363 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2174 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2129;
        _2176 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2131;
        _2178 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2133;
    }
    uint _2181 = _2045 + 8u;
    float _2194 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _799) * 0.949999988079071044921875);
    float _2195 = _2194 * _2194;
    float _2196 = cbLight._m0[_2045].x + _875;
    float _2197 = cbLight._m0[_2045].y + _876;
    float _2198 = cbLight._m0[_2045].z + _877;
    float _2202 = inversesqrt(dot(vec3(_2196, _2197, _2198), vec3(_2196, _2197, _2198)));
    float _2203 = _2202 * _2196;
    float _2204 = _2202 * _2197;
    float _2205 = _2202 * _2198;
    float _2206 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2045].xyz));
    float _4398 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2209 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _4409 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _2210 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _2211 = dot(vec3(_796, _797, _798), vec3(_2203, _2204, _2205));
    float _4420 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2215 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2203, _2204, _2205));
    float _4431 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2219 = _2195 * _2195;
    float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
    float _2231 = exp2(log2(1.0 - (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0)))) * 5.0);
    float _2232 = 0.959999978542327880859375 - _954;
    float _2234 = 0.959999978542327880859375 - _955;
    float _2235 = 0.959999978542327880859375 - _956;
    float _2242 = 1.0 - _2195;
    float _2253 = (0.5 / (((_2210 * ((_2209 * _2242) + _2195)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2242) + _2195) * _2209))) * _2209;
    float _4442 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _2255 = (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
    uint _2266 = _2045 + 9u;
    float _2277 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _799) * 0.949999988079071044921875);
    float _2278 = _2277 * _2277;
    float _2279 = cbLight._m0[_2082].x + _875;
    float _2280 = cbLight._m0[_2082].y + _876;
    float _2281 = cbLight._m0[_2082].z + _877;
    float _2285 = inversesqrt(dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281)));
    float _2286 = _2285 * _2279;
    float _2287 = _2285 * _2280;
    float _2288 = _2285 * _2281;
    float _2289 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2082].xyz));
    float _4453 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _2292 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2293 = dot(vec3(_796, _797, _798), vec3(_2286, _2287, _2288));
    float _4464 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
    float _2296 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2297 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2286, _2287, _2288));
    float _4475 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2301 = _2278 * _2278;
    float _2305 = ((_2296 * _2296) * (_2301 + (-1.0))) + 1.0;
    float _2312 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
    float _2319 = 1.0 - _2278;
    float _2329 = (0.5 / (((_2210 * ((_2292 * _2319) + _2278)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2319) + _2278) * _2292))) * _2292;
    float _4486 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2331 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2301 / ((_2305 * _2305) * 3.141590118408203125));
    float _2341 = (((((_2312 * _2232) + _957) * cbLight._m0[_2266].x) * _2331) * _2068) + (((((_2231 * _2232) + _957) * cbLight._m0[_2181].x) * _2255) * _2078);
    float _2342 = (((((_2312 * _2234) + _959) * cbLight._m0[_2266].y) * _2331) * _2068) + (((((_2231 * _2234) + _959) * cbLight._m0[_2181].y) * _2255) * _2078);
    float _2343 = (((((_2312 * _2235) + _960) * cbLight._m0[_2266].z) * _2331) * _2068) + (((((_2231 * _2235) + _960) * cbLight._m0[_2181].z) * _2255) * _2078);
    float _2405;
    float _2407;
    float _2409;
    if (_2118)
    {
        _2405 = _2341;
        _2407 = _2342;
        _2409 = _2343;
    }
    else
    {
        uint _2411 = _2045 + 2u;
        uint _2415 = _2045 + 10u;
        float _2429 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2411].w)) * _799) * 0.949999988079071044921875);
        float _2430 = _2429 * _2429;
        float _2431 = cbLight._m0[_2411].x + _875;
        float _2432 = cbLight._m0[_2411].y + _876;
        float _2433 = cbLight._m0[_2411].z + _877;
        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
        float _2438 = _2437 * _2431;
        float _2439 = _2437 * _2432;
        float _2440 = _2437 * _2433;
        float _2441 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2411].xyz));
        float _4497 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
        float _2444 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _2445 = dot(vec3(_796, _797, _798), vec3(_2438, _2439, _2440));
        float _4508 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2448 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2449 = dot(vec3(cbLight._m0[_2411].xyz), vec3(_2438, _2439, _2440));
        float _4519 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2453 = _2430 * _2430;
        float _2457 = ((_2448 * _2448) * (_2453 + (-1.0))) + 1.0;
        float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
        float _2471 = 1.0 - _2430;
        float _2481 = (0.5 / (((_2210 * ((_2444 * _2471) + _2430)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2471) + _2430) * _2444))) * _2444;
        float _4530 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
        float _2483 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2453 / ((_2457 * _2457) * 3.141590118408203125));
        float _2484 = isnan(1.0) ? _2060 : (isnan(_2060) ? 1.0 : min(_2060, 1.0));
        _2405 = (((((_2464 * _2232) + _957) * cbLight._m0[_2415].x) * _2483) * _2484) + _2341;
        _2407 = (((((_2464 * _2234) + _959) * cbLight._m0[_2415].y) * _2483) * _2484) + _2342;
        _2409 = (((((_2464 * _2235) + _960) * cbLight._m0[_2415].z) * _2483) * _2484) + _2343;
    }
    float _2519;
    float _2521;
    float _2523;
    if (_2136)
    {
        _2519 = _2405;
        _2521 = _2407;
        _2523 = _2409;
    }
    else
    {
        uint _2530 = _2045 + 3u;
        uint _2534 = _2045 + 11u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _799) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _875;
        float _2551 = cbLight._m0[_2530].y + _876;
        float _2552 = cbLight._m0[_2530].z + _877;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2530].xyz));
        float _4546 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2564 = dot(vec3(_796, _797, _798), vec3(_2557, _2558, _2559));
        float _4557 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4568 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2210 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2210 * _2590) + _2549) * _2563))) * _2563;
        float _4579 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2061 : (isnan(_2061) ? 1.0 : min(_2061, 1.0));
        _2519 = (((((_2583 * _2232) + _957) * cbLight._m0[_2534].x) * _2602) * _2603) + _2405;
        _2521 = (((((_2583 * _2234) + _959) * cbLight._m0[_2534].y) * _2602) * _2603) + _2407;
        _2523 = (((((_2583 * _2235) + _960) * cbLight._m0[_2534].z) * _2602) * _2603) + _2409;
    }
    float _2738;
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    if (_2043.y == 0u)
    {
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2678;
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2678;
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2678;
        uvec4 _2693 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2694 = _2693.x;
        uint _2705 = uint((float(_2693.y) * floor(float(uint(cbSceneParam._m0[85u].y * _896) / _2694))) + floor(float(uint(cbSceneParam._m0[85u].x * _895) / _2694)));
        float _2715 = (log2(_2681 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2716 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
        uint _2719 = uint(isnan(14.0) ? _2716 : (isnan(_2716) ? 14.0 : min(_2716, 14.0)));
        uvec4 _2724 = texelFetch(g_lightClusterGridBuffer, int(((_2719 << 2u) + (_2705 << 6u)) >> 2u));
        uint _2725 = _2724.x;
        uint _2726 = _2693.z;
        float _2826;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        if (((((1u << ((_2726 >> 4u) & 15u)) + 4294967295u) & _2725) == 0u) || ((_2726 & 240u) == 0u))
        {
            _2826 = 0.0;
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
        }
        else
        {
            float _2827;
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            float _2983 = 0.0;
            uint _2984 = 0u;
            uint _2993;
            bool _2994;
            for (;;)
            {
                _2993 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_2984 << 2u)) >> 2u)).x;
                _2994 = _2993 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2994)
                {
                    frontier_phi_66_pred = _2978;
                    frontier_phi_66_pred_1 = _2983;
                    frontier_phi_66_pred_2 = _2982;
                    frontier_phi_66_pred_3 = _2981;
                    frontier_phi_66_pred_4 = _2980;
                    frontier_phi_66_pred_5 = _2979;
                }
                else
                {
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    uint _3129;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2982;
                    _3128 = _2983;
                    _3129 = _2993;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    float _3054;
                    float _3055;
                    for (;;)
                    {
                        uint _3133 = uint(findLSB(_3129)) + (_2984 << 5u);
                        uint _3130 = (_3129 + 4294967295u) & _3129;
                        uint _3135 = _3133 * 48u;
                        vec4 _3149 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        uint _3155 = (_3133 * 48u) + 4u;
                        vec4 _3168 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3155)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3155 + 3u)).x));
                        uint _3174 = (_3133 * 48u) + 8u;
                        vec3 _3185 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3174)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3174 + 2u)).x));
                        float _3189 = _3149.x - _2679;
                        float _3190 = _3149.y - _2680;
                        float _3191 = _3149.z - _2681;
                        float _3192 = dot(vec3(_3189, _3190, _3191), vec3(_3189, _3190, _3191));
                        float _3195 = inversesqrt(_3192);
                        float _3196 = _3195 * _3189;
                        float _3197 = _3195 * _3190;
                        float _3198 = _3195 * _3191;
                        float _3199 = dot(vec3(_914, _917, _920), vec3(_3196, _3197, _3198));
                        float _3204 = 1.0 - (_3192 * _3149.w);
                        float _4605 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
                        float _3205 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
                        float _3206 = sqrt(_3192) * _3168.w;
                        float _3209 = 1.39999997615814208984375 / (_3206 + 1.39999997615814208984375);
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3199) + _3210;
                        float _3216 = _3206 * _3206;
                        float _3220 = ((isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0))) * _3205) / ((_3216 * 0.699999988079071044921875) + 1.0);
                        float _3224 = (-0.0) - _2679;
                        float _3225 = (-0.0) - _2680;
                        float _3226 = (-0.0) - _2681;
                        float _3230 = inversesqrt(dot(vec3(_3224, _3225, _3226), vec3(_3224, _3225, _3226)));
                        float _3231 = _3230 * _3224;
                        float _3232 = _3230 * _3225;
                        float _3233 = _3230 * _3226;
                        float _3241 = exp2(log2(1.0 / ((_3216 * 3.5) + 5.0)) * 0.25);
                        float _3242 = 1.0 - _989;
                        float _3249 = sqrt(1.0 - ((1.0 - (_3242 * _3242)) * (1.0 - (_3241 * _3241))));
                        float _3250 = _3249 * _3249;
                        float _3251 = _3250 * _3250;
                        float _3252 = _3231 + _3196;
                        float _3253 = _3232 + _3197;
                        float _3254 = _3233 + _3198;
                        float _3258 = inversesqrt(dot(vec3(_3252, _3253, _3254), vec3(_3252, _3253, _3254)));
                        float _3262 = dot(vec3(_914, _917, _920), vec3(_3231, _3232, _3233));
                        float _4621 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                        float _3265 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3266 = dot(vec3(_914, _917, _920), vec3(_3258 * _3252, _3258 * _3253, _3258 * _3254));
                        float _4632 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                        float _3269 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3273 = ((_3269 * _3269) * (_3251 + (-1.0))) + 1.0;
                        float _3274 = _3209 * _3250;
                        float _3275 = _3274 * _3274;
                        float _3278 = ((1.0 - _3275) * _3199) + _3275;
                        float _4643 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                        float _3279 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3280 = 1.0 - _3250;
                        float _3290 = (0.5 / (((_3279 * ((_3265 * _3280) + _3250)) + 9.9999999392252902907785028219223e-09) + (((_3279 * _3280) + _3250) * _3265))) * _3279;
                        float _4654 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3301 = (((_3251 * 3.1415927410125732421875) * (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0)))) / ((_3273 * _3273) * ((_3216 * 2.1991131305694580078125) + 3.141590118408203125))) * _3205;
                        _3053 = (_3220 * _3168.x) + _3126;
                        _3054 = (_3220 * _3168.y) + _3127;
                        _3055 = (_3220 * _3168.z) + _3128;
                        _3050 = (_3301 * _3185.x) + _3123;
                        _3051 = (_3301 * _3185.y) + _3124;
                        _3052 = (_3301 * _3185.z) + _3125;
                        if (_3130 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3054;
                            _3128 = _3055;
                            _3129 = _3130;
                        }
                    }
                    frontier_phi_66_pred = _3050;
                    frontier_phi_66_pred_1 = _3055;
                    frontier_phi_66_pred_2 = _3054;
                    frontier_phi_66_pred_3 = _3053;
                    frontier_phi_66_pred_4 = _3052;
                    frontier_phi_66_pred_5 = _3051;
                }
                _2827 = frontier_phi_66_pred;
                _2837 = frontier_phi_66_pred_1;
                _2835 = frontier_phi_66_pred_2;
                _2833 = frontier_phi_66_pred_3;
                _2831 = frontier_phi_66_pred_4;
                _2829 = frontier_phi_66_pred_5;
                uint _2985 = _2984 + 1u;
                if (_2985 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2978 = _2827;
                    _2979 = _2829;
                    _2980 = _2831;
                    _2981 = _2833;
                    _2982 = _2835;
                    _2983 = _2837;
                    _2984 = _2985;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2826 = _2827;
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
        }
        uvec4 _2840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2841 = _2840.z;
        uint _2843 = (_2841 >> 8u) & 15u;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((4294967295u << _2843) & _2725) == 0u)
        {
            _2946 = _2826;
            _2948 = _2828;
            _2950 = _2830;
            _2952 = _2832;
            _2954 = _2834;
            _2956 = _2836;
        }
        else
        {
            float _2971 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
            float _2972 = _2971 * _2679;
            float _2973 = _2971 * _2680;
            float _2974 = _2971 * _2681;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2843 < ((_2841 >> 12u) & 15u))
            {
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _2957;
                float _3106 = _2826;
                float _3107 = _2828;
                float _3108 = _2830;
                float _3109 = _2832;
                float _3110 = _2834;
                float _3111 = _2836;
                uint _3112 = _2843;
                uint _3121;
                bool _3122;
                for (;;)
                {
                    _3121 = texelFetch(g_lightClassification, int((((_2719 << 5u) + (_2705 << 9u)) + (_3112 << 2u)) >> 2u)).x;
                    _3122 = _3121 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3122)
                    {
                        frontier_phi_77_pred = _3111;
                        frontier_phi_77_pred_1 = _3110;
                        frontier_phi_77_pred_2 = _3109;
                        frontier_phi_77_pred_3 = _3108;
                        frontier_phi_77_pred_4 = _3107;
                        frontier_phi_77_pred_5 = _3106;
                    }
                    else
                    {
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3613;
                        float _3614;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        float _3332 = _3110;
                        float _3333 = _3111;
                        uint _3334 = _3121;
                        uint _3335;
                        vec4 _3360;
                        float _3361;
                        vec4 _3376;
                        vec3 _3388;
                        vec4 _3403;
                        vec4 _3419;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3345 = ((_3112 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3334));
                            _3335 = (_3334 + 4294967295u) & _3334;
                            uint _3347 = _3345 * 40u;
                            _3360 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3347)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3347 + 3u)).x));
                            _3361 = _3360.w;
                            uint _3363 = (_3345 * 40u) + 4u;
                            _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3378 = (_3345 * 40u) + 8u;
                            _3388 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x));
                            uint _3390 = (_3345 * 40u) + 16u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3406 = (_3345 * 40u) + 20u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3345 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3345 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_2681, _3453.z, fma(_2680, _3453.y, _3453.x * _2679)) + _3453.w;
                            _3466 = !((fma(_2681, _3434.z, fma(_2680, _3434.y, _3434.x * _2679)) + _3434.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3466)
                            {
                                float _3493 = _3360.x - _2679;
                                float _3494 = _3360.y - _2680;
                                float _3495 = _3360.z - _2681;
                                float _3496 = dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495));
                                float _3499 = inversesqrt(_3496);
                                float _3500 = _3499 * _3493;
                                float _3501 = _3499 * _3494;
                                float _3502 = _3499 * _3495;
                                float _3506 = 1.0 - (_3496 / (_3361 * _3361));
                                float _4665 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3507 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                                float _3511 = sqrt(_3496) * _3376.w;
                                float _3513 = 1.39999997615814208984375 / (_3511 + 1.39999997615814208984375);
                                float _3514 = _3513 * _3513;
                                float _3517 = ((1.0 - _3514) * dot(vec3(_3500, _3501, _3502), vec3(_914, _917, _920))) + _3514;
                                float _3520 = _3511 * _3511;
                                float _3524 = (fma(_2681, _3403.z, fma(_2680, _3403.y, _3403.x * _2679)) + _3403.w) / _3465;
                                float _3525 = (fma(_2681, _3419.z, fma(_2680, _3419.y, _3419.x * _2679)) + _3419.w) / _3465;
                                float _3529 = 1.0 - dot(vec2(_3524, _3525), vec2(_3524, _3525));
                                float _4681 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3530 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3531 = _3530 * (((isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0))) * _3507) / ((_3520 * 0.699999988079071044921875) + 1.0));
                                float _3543 = exp2(log2(1.0 / ((_3520 * 3.5) + 5.0)) * 0.25);
                                float _3544 = 1.0 - _989;
                                float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                                float _3552 = _3551 * _3551;
                                float _3553 = _3552 * _3552;
                                float _3554 = _3500 - _2972;
                                float _3555 = _3501 - _2973;
                                float _3556 = _3502 - _2974;
                                float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                                float _3564 = dot(vec3(_914, _917, _920), vec3((-0.0) - _2972, (-0.0) - _2973, (-0.0) - _2974));
                                float _4692 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3567 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3568 = dot(vec3(_914, _917, _920), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                                float _4703 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                                float _3571 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                                float _3576 = _3513 * _3552;
                                float _3577 = _3576 * _3576;
                                float _3583 = ((1.0 - _3577) * dot(vec3(_914, _917, _920), vec3(_3500, _3501, _3502))) + _3577;
                                float _4714 = isnan(0.0) ? _3583 : (isnan(_3583) ? 0.0 : max(_3583, 0.0));
                                float _3584 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3585 = 1.0 - _3552;
                                float _3595 = (0.5 / (((_3584 * ((_3567 * _3585) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3584 * _3585) + _3552) * _3567))) * _3584;
                                float _4725 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3605 = (_3530 * _3507) * (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0)))) / ((_3575 * _3575) * ((_3520 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3531 * _3376.y;
                                frontier_phi_83_pred_1 = _3531 * _3376.x;
                                frontier_phi_83_pred_2 = _3605 * _3388.z;
                                frontier_phi_83_pred_3 = _3605 * _3388.y;
                                frontier_phi_83_pred_4 = _3605 * _3388.x;
                                frontier_phi_83_pred_5 = _3531 * _3376.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3613 = frontier_phi_83_pred;
                            _3612 = frontier_phi_83_pred_1;
                            _3611 = frontier_phi_83_pred_2;
                            _3610 = frontier_phi_83_pred_3;
                            _3609 = frontier_phi_83_pred_4;
                            _3614 = frontier_phi_83_pred_5;
                            _3318 = _3612 + _3331;
                            _3319 = _3613 + _3332;
                            _3320 = _3614 + _3333;
                            _3315 = _3609 + _3328;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            if (_3335 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3319;
                                _3333 = _3320;
                                _3334 = _3335;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3320;
                        frontier_phi_77_pred_1 = _3319;
                        frontier_phi_77_pred_2 = _3318;
                        frontier_phi_77_pred_3 = _3317;
                        frontier_phi_77_pred_4 = _3316;
                        frontier_phi_77_pred_5 = _3315;
                    }
                    _2957 = frontier_phi_77_pred;
                    _2955 = frontier_phi_77_pred_1;
                    _2953 = frontier_phi_77_pred_2;
                    _2951 = frontier_phi_77_pred_3;
                    _2949 = frontier_phi_77_pred_4;
                    _2947 = frontier_phi_77_pred_5;
                    uint _3113 = _3112 + 1u;
                    if (_3113 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3106 = _2947;
                        _3107 = _2949;
                        _3108 = _2951;
                        _3109 = _2953;
                        _3110 = _2955;
                        _3111 = _2957;
                        _3112 = _3113;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2951;
                frontier_phi_58_59_ladder_1 = _2957;
                frontier_phi_58_59_ladder_2 = _2955;
                frontier_phi_58_59_ladder_3 = _2953;
                frontier_phi_58_59_ladder_4 = _2949;
                frontier_phi_58_59_ladder_5 = _2947;
            }
            else
            {
                frontier_phi_58_59_ladder = _2830;
                frontier_phi_58_59_ladder_1 = _2836;
                frontier_phi_58_59_ladder_2 = _2834;
                frontier_phi_58_59_ladder_3 = _2832;
                frontier_phi_58_59_ladder_4 = _2828;
                frontier_phi_58_59_ladder_5 = _2826;
            }
            _2946 = frontier_phi_58_59_ladder_5;
            _2948 = frontier_phi_58_59_ladder_4;
            _2950 = frontier_phi_58_59_ladder;
            _2952 = frontier_phi_58_59_ladder_3;
            _2954 = frontier_phi_58_59_ladder_2;
            _2956 = frontier_phi_58_59_ladder_1;
        }
        float _2961 = isnan(1.0) ? _973 : (isnan(_973) ? 1.0 : min(_973, 1.0));
        _2738 = (_2961 * _2952) + _2174;
        _2740 = (_2961 * _2954) + _2176;
        _2742 = (_2961 * _2956) + _2178;
        _2744 = ((_2946 * _957) * _2961) + _2519;
        _2746 = ((_2948 * _959) * _2961) + _2521;
        _2748 = ((_2950 * _960) * _2961) + _2523;
    }
    else
    {
        _2738 = _2174;
        _2740 = _2176;
        _2742 = _2178;
        _2744 = _2519;
        _2746 = _2521;
        _2748 = _2523;
    }
    float _4741 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _4752 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4763 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2765 = ((isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2738 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _973))) + ((_2744 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2766 = ((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2740 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _973))) + ((_2746 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    float _2767 = ((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2742 + ((isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))) * _973))) + ((_2748 + ((isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0))) * _1812)) * cbPerFrame._m0[3u].x);
    uint _2768 = _253 + 6u;
    float _2776 = _895 / cbSceneParam._m0[86u].x;
    float _2777 = _896 / cbSceneParam._m0[86u].y;
    vec4 _2791 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2793 = _2791.x;
    float _2794 = _2791.y;
    float _2795 = _2791.z;
    float _2796 = _2791.w;
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2851 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2852 = _2851 / _818;
        float _2863 = _2852 * _868;
        float _2864 = _869 * _2852;
        float _2865 = (-0.0) - _2864;
        float _2866 = _2852 * _870;
        float _2868 = (cbSceneParam._m0[77u].w * _2865) / _2851;
        float _2869 = _2868 + cbSceneParam._m0[79u].w;
        float _2870 = cbSceneParam._m0[79u].w - _2864;
        float _2876 = sqrt(((_2863 * _2863) + (_2864 * _2864)) + (_2866 * _2866));
        float _2879 = (1.0 - (cbSceneParam._m0[77u].w / _2851)) * _2876;
        float _2884 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2886 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3063;
        if (abs((_2865 - _2868) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3063 = ((((_2869 > 0.0) ? exp2(_2884 * _2869) : (2.0 - exp2(_2886 * _2869))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2879;
        }
        else
        {
            float _3007 = 1.0 / cbSceneParam._m0[80u].x;
            float _3008 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : max(_2869, _2870));
            float _3009 = isnan(_2870) ? _2869 : (isnan(_2869) ? _2870 : min(_2869, _2870));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            float _3019 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : min(_3009, 0.0));
            _3063 = ((abs(_2876 / _2865) * cbSceneParam._m0[80u].y) * ((((_3018 - _3019) * 2.0) - ((exp2(_2884 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0)))) - exp2(_2884 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0))))) * _3007)) - ((exp2(_2886 * _3018) - exp2(_2886 * _3019)) * _3007))) + (_2879 * cbSceneParam._m0[80u].z);
        }
        vec4 _3065 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2776, _2777, 1.0), 0.0);
        float _3074 = exp2((_3063 * (-1.44269502162933349609375)) * (1.0 - _3065.w));
        float _3075 = log2(_3074);
        float _3091 = log2(_2796);
        _2888 = (exp2(_3091 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].x)) * _3065.x) / cbSceneParam._m0[78u].x)) + _2793;
        _2890 = (exp2(_3091 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].y)) * _3065.y) / cbSceneParam._m0[78u].y)) + _2794;
        _2892 = (exp2(_3091 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3075 * cbSceneParam._m0[78u].z)) * _3065.z) / cbSceneParam._m0[78u].z)) + _2795;
        _2894 = _3074 * _2796;
    }
    else
    {
        _2888 = _2793;
        _2890 = _2794;
        _2892 = _2795;
        _2894 = _2796;
    }
    bool _3101;
    vec4 _2904;
    vec4 _2926;
    float _2928;
    float _2932;
    float _2933;
    float _2934;
    float _2935;
    bool _2945;
    for (;;)
    {
        _2904 = cbMatDynParam._m0[0u];
        float _2906 = roundEven(_2904.y);
        bool _2907 = _2906 == 3.0;
        float _2908 = log2(_2894);
        float _2915 = exp2(_2908 * cbSceneParam._m0[78u].x) * _2765;
        float _2916 = exp2(_2908 * cbSceneParam._m0[78u].y) * _2766;
        float _2917 = exp2(_2908 * cbSceneParam._m0[78u].z) * _2767;
        float _2924 = _884 + (-0.5);
        _2926 = cbMtdParam._m0[1u];
        _2928 = _2926.y * _2924;
        float _2931 = (_2906 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2932 = _2931 * (_2907 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2888)));
        _2933 = _2931 * (_2907 ? _2916 : (_2916 + (cbSceneParam._m0[72u].w * _2890)));
        _2934 = _2931 * (_2907 ? _2917 : (_2917 + (cbSceneParam._m0[72u].w * _2892)));
        _2935 = _2924 * 0.999000012874603271484375;
        _2945 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2945)
        {
            if ((cbInstanceData._m0[_253 + 7u].x + _2935) < 0.5)
            {
                _3101 = true;
                break;
            }
        }
        uint _3042 = _933 + uint(_2904.w);
        if ((cbInstanceData._m0[_3042].w < 1.0) && ((cbInstanceData._m0[_3042].w + _2935) < 0.5))
        {
            _3101 = true;
            break;
        }
        if ((_2928 + 1.0) < _2926.x)
        {
            _3101 = true;
            break;
        }
        _3101 = false;
        break;
    }
    float _3306;
    if (_3101)
    {
        discard_state = true;
        _3306 = 0.0;
    }
    else
    {
        _3306 = cbInstanceData._m0[_2768].w;
    }
    SV_Target.x = _2932;
    SV_Target.y = _2933;
    SV_Target.z = _2934;
    SV_Target.w = _3306;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2768].w;
    discard_exit();
}


