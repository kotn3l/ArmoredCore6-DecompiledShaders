#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1284;
float _3951;
float _3952;
float _3953;
float _3954;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _255 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _255 + 1u;
    uint _264 = _255 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_255].x * cbInstanceData._m0[_255].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _294 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _318 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _323 = _318.x * cbMtdParam._m0[11u].x;
    float _324 = _318.y * cbMtdParam._m0[11u].y;
    float _325 = _318.z * cbMtdParam._m0[11u].z;
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3963 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _441 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _294.x) * ((_428 * ((_344.x * cbMtdParam._m0[12u].x) - _323)) + _323);
    float _444 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _294.y) * ((_428 * ((_344.y * cbMtdParam._m0[12u].y) - _324)) + _324);
    float _447 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _294.z) * ((_428 * ((_344.z * cbMtdParam._m0[12u].z) - _325)) + _325);
    vec4 _460 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _477 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    float _490 = ((_460.z - _481) * _428) + _481;
    float _493 = ((((_460.x - _479) * _428) + _479) * 2.0) + (-1.0);
    float _495 = ((((_460.y - _480) * _428) + _480) * 2.0) + (-1.0);
    float _496 = dot(vec2(_493, _495), vec2(_493, _495));
    float _3974 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))));
    vec4 _517 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _529 = (((_517.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _493;
    float _530 = (((_517.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _495;
    vec4 _542 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _274) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _275) + cbTextureTilingScale._m0[19u].w));
    float _544 = _542.x;
    float _545 = 1.0 - _544;
    float _574 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_544 - _545) * cbMtdParam._m0[24u].w) + _545) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3985 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _575 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _583 = ((((cbMtdParam._m0[10u].x - _441) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _575) + _441;
    float _584 = ((((cbMtdParam._m0[10u].y - _444) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _575) + _444;
    float _585 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _447)) * _575) + _447;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _611 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _613 = _611.x;
    float _630 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _613) * _428) + _613;
    float _634 = ((_597.x - _630) * cbMtdParam._m0[19u].z) + _630;
    float _636 = _634 - (_634 * _575);
    float _640 = (cbMtdParam._m0[19u].w * (_517.z - _490)) + _490;
    float _644 = ((cbMtdParam._m0[23u].x - _640) * _575) + _640;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _274) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _275) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _669 = (_663.x * 2.0) + (-1.0);
    float _670 = (_663.y * 2.0) + (-1.0);
    float _671 = dot(vec2(_669, _670), vec2(_669, _670));
    float _3996 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _687 = (_575 * (((cbMtdParam._m0[22u].z * _529) - _529) + _669)) + _529;
    float _688 = (_575 * (((cbMtdParam._m0[22u].z * _530) - _530) + _670)) + _530;
    float _689 = (_575 * (sqrt(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) - _501)) + _501;
    float _691 = cbMtdParam._m0[22u].x + _517.w;
    float _694 = fma(_689, _242 * NORMAL.x, fma(_688, _249 * TANGENT.x, (_235 * _227) * _687));
    float _697 = fma(_689, _242 * NORMAL.y, fma(_688, _249 * TANGENT.y, (_235 * _228) * _687));
    float _700 = fma(_689, _242 * NORMAL.z, fma(_688, _249 * TANGENT.z, (_235 * _229) * _687));
    float _704 = inversesqrt(dot(vec3(_694, _697, _700), vec3(_694, _697, _700)));
    float _705 = _704 * _694;
    float _706 = _704 * _697;
    float _707 = _704 * _700;
    float _4007 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _708 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    float _4029 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _4040 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _4051 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _4062 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _713 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _965 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _971 = (cbMatDynParam._m0[5u].x * _965) + cbMatDynParam._m0[5u].y;
        float _4073 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _976 = (cbMatDynParam._m0[5u].z * _965) + cbMatDynParam._m0[5u].w;
        float _4084 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) - _972)) + _972) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _823 = fma(_707, cbSceneParam._m0[5u].z, fma(_706, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _705));
    float _826 = fma(_707, cbSceneParam._m0[6u].z, fma(_706, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _705));
    float _829 = fma(_707, cbSceneParam._m0[7u].z, fma(_706, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _705));
    uint _842 = _255 + 9u;
    uint _843 = _842 + uint(cbMatDynParam._m0[0u].w);
    float _849 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) * cbInstanceData._m0[_843].x;
    float _850 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * cbInstanceData._m0[_843].y;
    float _851 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * cbInstanceData._m0[_843].z;
    float _4095 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _852 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _4106 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _853 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _854 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _855 = 1.0 - _713;
    float _856 = _852 * _855;
    float _857 = _853 * _855;
    float _858 = _854 * _855;
    float _863 = (_852 + (-0.039999999105930328369140625)) * _713;
    float _864 = (_853 + (-0.039999999105930328369140625)) * _713;
    float _865 = (_854 + (-0.039999999105930328369140625)) * _713;
    float _866 = _863 + 0.039999999105930328369140625;
    float _868 = _864 + 0.039999999105930328369140625;
    float _869 = _865 + 0.039999999105930328369140625;
    vec4 _878 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _882 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * TEXCOORD_5.w) * _878.x;
    float _883 = dot(vec3(_705, _706, _707), vec3(_784, _785, _786));
    float _886 = _883 * 2.0;
    float _890 = (_886 * _705) - _784;
    float _891 = (_886 * _706) - _785;
    float _892 = (_886 * _707) - _786;
    float _896 = abs(dot(vec3(_784, _785, _786), vec3(_705, _706, _707)));
    float _4128 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _898 = sqrt(_708);
    float _911 = exp2((_898 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_898 * 3.0));
    float _917 = (1.0 - _911) * ((_898 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _918 = _911 * _898;
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1283;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1008 = fma(_954, cbModelParam._m0[26u].z, fma(_950, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946));
        float _1012 = fma(_954, cbModelParam._m0[27u].z, fma(_950, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946));
        float _1016 = fma(_954, cbModelParam._m0[28u].z, fma(_950, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946));
        float _1041 = _946 + _705;
        float _1042 = _950 + _706;
        float _1043 = _954 + _707;
        float _1053 = fma(_1043, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1041)) - _1008;
        float _1054 = fma(_1043, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1041)) - _1012;
        float _1055 = fma(_1043, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1041)) - _1016;
        float _1059 = inversesqrt(dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055)));
        float _1072 = ((_1059 * _1053) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1008 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1059 * _1054) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1012 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1074 = ((_1059 * _1055) / cbModelParam._m0[34u].z) + ((((((_1016 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1072, _1073, _1074), 0.0);
        float _1111 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1112 = _1111 * (_1077.x + (-0.5));
        float _1113 = _1111 * (_1077.y + (-0.5));
        float _1114 = _1111 * (_1077.z + (-0.5));
        float _1121 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1084.x + (-0.5));
        float _1123 = _1121 * (_1084.y + (-0.5));
        float _1124 = _1121 * (_1084.z + (-0.5));
        float _1131 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1091.x + (-0.5));
        float _1133 = _1131 * (_1091.y + (-0.5));
        float _1134 = _1131 * (_1091.z + (-0.5));
        float _1141 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1098.x + (-0.5));
        float _1143 = _1141 * (_1098.y + (-0.5));
        float _1144 = _1141 * (_1098.z + (-0.5));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1148 = _1112 * 0.5;
        float _1149 = _1122 * 0.5;
        float _1150 = _1132 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1165 = (dot(vec3(_705, _706, _707), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1175 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _4176 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1177 + 1.0))) + _1182) * _1145;
        float _1192 = _1113 * 0.5;
        float _1193 = _1123 * 0.5;
        float _1194 = _1133 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_705, _706, _707), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _4209 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1219 + 1.0))) + _1224) * _1146;
        float _1234 = _1114 * 0.5;
        float _1235 = _1124 * 0.5;
        float _1236 = _1134 * 0.5;
        float _1237 = dot(vec3(_1234, _1235, _1236), vec3(_1234, _1235, _1236));
        float _1242 = (_1237 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1237);
        float _1250 = (dot(vec3(_705, _706, _707), vec3(_1242 * _1234, _1242 * _1235, _1242 * _1236)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1259 = sqrt(((_1235 * _1235) + (_1234 * _1234)) + (_1236 * _1236)) / (_1147 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4242 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1261 + 1.0))) + _1266) * _1147;
        _1283 = _1114;
        _1285 = _1113;
        _1286 = _1112;
        _1287 = _1124;
        _1288 = _1123;
        _1289 = _1122;
        _1290 = _1134;
        _1291 = _1133;
        _1292 = _1132;
        _1293 = _1147;
        _1294 = _1146;
        _1295 = _1145;
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
        _1298 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
    }
    else
    {
        _1283 = _1284;
        _1285 = _1284;
        _1286 = _1284;
        _1287 = _1284;
        _1288 = _1284;
        _1289 = _1284;
        _1290 = _1284;
        _1291 = _1284;
        _1292 = _1284;
        _1293 = _1284;
        _1294 = _1284;
        _1295 = _1284;
        _1296 = 0.0;
        _1297 = 0.0;
        _1298 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_954, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _946));
        float _1330 = fma(_954, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _946));
        float _1334 = fma(_954, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _946));
        float _1357 = _946 + _705;
        float _1358 = _950 + _706;
        float _1359 = _954 + _707;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_705, _706, _707), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _4305 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_705, _706, _707), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _4338 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_705, _706, _707), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4349 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4360 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4371 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1284;
        _1596 = _1284;
        _1597 = _1284;
        _1598 = _1284;
        _1599 = _1284;
        _1600 = _1284;
        _1601 = _1284;
        _1602 = _1284;
        _1603 = _1284;
        _1604 = _1284;
        _1605 = _1284;
        _1606 = _1284;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1296)) + _1296;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1297)) + _1297;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1298)) + _1298;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _890 * 0.5;
    float _1664 = _891 * 0.5;
    float _1665 = _892 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1283, _1287, _1290, _1293));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1286, _1289, _1292, _1295));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _708);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1781 = fma(_954, cbModelParam._m0[13u].z, fma(_950, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946)) + cbModelParam._m0[13u].w;
        float _1785 = fma(_954, cbModelParam._m0[14u].z, fma(_950, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946)) + cbModelParam._m0[14u].w;
        float _1789 = fma(_954, cbModelParam._m0[15u].z, fma(_950, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946)) + cbModelParam._m0[15u].w;
        float _1792 = fma(_892, cbModelParam._m0[13u].z, fma(_891, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890));
        float _1795 = fma(_892, cbModelParam._m0[14u].z, fma(_891, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890));
        float _1798 = fma(_892, cbModelParam._m0[15u].z, fma(_891, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890));
        float _1826;
        if (_1792 > 0.0)
        {
            _1826 = abs((1.0 - _1781) / _1792);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1781 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1826 = frontier_phi_17_15_ladder;
        }
        float _1999;
        if (_1795 > 0.0)
        {
            _1999 = abs((1.0 - _1785) / _1795);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1785 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1999 = frontier_phi_26_22_ladder;
        }
        float _2294;
        if (_1798 > 0.0)
        {
            _2294 = abs((1.0 - _1789) / _1798);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1798 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1789 + 1.0) / _1798);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2294 = frontier_phi_38_33_ladder;
        }
        float _2296 = isnan(_1999) ? _1826 : (isnan(_1826) ? _1999 : min(_1826, _1999));
        float _2297 = isnan(_2294) ? _2296 : (isnan(_2296) ? _2294 : min(_2296, _2294));
        float _2301 = (_2297 * _1792) + _1781;
        float _2302 = (_2297 * _1795) + _1785;
        float _2303 = (_2297 * _1798) + _1789;
        float _2304 = _2297 * 9.9999997473787516355514526367188e-05;
        float _2306 = (-1.0) - _2304;
        float _2308 = _2304 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2303 > _2308) || ((_2303 < _2306) || ((_2302 > _2308) || ((_2302 < _2306) || ((_2301 < _2306) || (_2301 > _2308))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2303, cbModelParam._m0[9u].z, fma(_2302, cbModelParam._m0[9u].y, _2301 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2303, cbModelParam._m0[10u].z, fma(_2302, cbModelParam._m0[10u].y, _2301 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2303, cbModelParam._m0[11u].z, fma(_2302, cbModelParam._m0[11u].y, _2301 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_16_38_ladder = _2448.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2448.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2448.x * cbModelParam._m0[1u].y;
        }
        _1814 = frontier_phi_16_38_ladder_2;
        _1816 = frontier_phi_16_38_ladder_1;
        _1818 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1802 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_890, _891, _892), _1732);
        _1814 = _1802.x * cbModelParam._m0[1u].y;
        _1816 = _1802.y * cbModelParam._m0[1u].y;
        _1818 = _1802.z * cbModelParam._m0[1u].y;
    }
    float _1822 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _708);
    float _1823 = isnan(_1822) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1822 : min(cbModelParam._m0[25u].w, _1822));
    float _1914;
    float _1916;
    float _1918;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1878 = fma(_954, cbModelParam._m0[21u].z, fma(_950, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946)) + cbModelParam._m0[21u].w;
        float _1882 = fma(_954, cbModelParam._m0[22u].z, fma(_950, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946)) + cbModelParam._m0[22u].w;
        float _1886 = fma(_954, cbModelParam._m0[23u].z, fma(_950, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946)) + cbModelParam._m0[23u].w;
        float _1889 = fma(_892, cbModelParam._m0[21u].z, fma(_891, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890));
        float _1892 = fma(_892, cbModelParam._m0[22u].z, fma(_891, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890));
        float _1895 = fma(_892, cbModelParam._m0[23u].z, fma(_891, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890));
        float _2004;
        if (_1889 > 0.0)
        {
            _2004 = abs((1.0 - _1878) / _1889);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1878 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2004 = frontier_phi_28_24_ladder;
        }
        float _2321;
        if (_1892 > 0.0)
        {
            _2321 = abs((1.0 - _1882) / _1892);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1882 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2321 = frontier_phi_40_35_ladder;
        }
        float _2659;
        if (_1895 > 0.0)
        {
            _2659 = abs((1.0 - _1886) / _1895);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1895 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1886 + 1.0) / _1895);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2659 = frontier_phi_50_47_ladder;
        }
        float _2661 = isnan(_2321) ? _2004 : (isnan(_2004) ? _2321 : min(_2004, _2321));
        float _2662 = isnan(_2659) ? _2661 : (isnan(_2661) ? _2659 : min(_2661, _2659));
        float _2666 = (_2662 * _1889) + _1878;
        float _2667 = (_2662 * _1892) + _1882;
        float _2668 = (_2662 * _1895) + _1886;
        float _2669 = _2662 * 9.9999997473787516355514526367188e-05;
        float _2670 = (-1.0) - _2669;
        float _2672 = _2669 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2668 > _2672) || ((_2668 < _2670) || ((_2667 > _2672) || ((_2667 < _2670) || ((_2666 < _2670) || (_2666 > _2672))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2668, cbModelParam._m0[17u].z, fma(_2667, cbModelParam._m0[17u].y, _2666 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2668, cbModelParam._m0[18u].z, fma(_2667, cbModelParam._m0[18u].y, _2666 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2668, cbModelParam._m0[19u].z, fma(_2667, cbModelParam._m0[19u].y, _2666 * cbModelParam._m0[19u].x))), _1823);
            frontier_phi_25_50_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1914 = frontier_phi_25_50_ladder_2;
        _1916 = frontier_phi_25_50_ladder_1;
        _1918 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1898 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_890, _891, _892), _1823);
        _1914 = _1898.x * cbModelParam._m0[1u].z;
        _1916 = _1898.y * cbModelParam._m0[1u].z;
        _1918 = _1898.z * cbModelParam._m0[1u].z;
    }
    float _1931 = (((_917 * _866) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1914 - _1814)) + _1814);
    float _1933 = (((_917 * _868) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1916 - _1816)) + _1816);
    float _1935 = (((_917 * _869) + _918) * _882) * ((cbModelParam._m0[1u].w * (_1918 - _1818)) + _1818);
    float _1938 = fma(_1935, cbSceneParam._m0[89u].z, fma(_1933, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1941 = fma(_1935, cbSceneParam._m0[90u].z, fma(_1933, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1944 = fma(_1935, cbSceneParam._m0[91u].z, fma(_1933, cbSceneParam._m0[91u].y, _1931 * cbSceneParam._m0[91u].x));
    float _1978 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1982 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1986 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1990 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1991 = _1978 / _1990;
    float _1992 = _1982 / _1990;
    float _1993 = _1986 / _1990;
    float _2140;
    float _2141;
    float _2142;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2020 = ((uint(_1993 > cbSceneParam._m0[59u].y) + uint(_1993 > cbSceneParam._m0[59u].x)) + uint(_1993 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2021 = _2020 + 43u;
        uint _2029 = _2020 + 44u;
        uint _2037 = _2020 + 45u;
        uint _2045 = _2020 + 46u;
        float _2056 = fma(_1990, cbSceneParam._m0[_2021].w, fma(_1986, cbSceneParam._m0[_2021].z, fma(_1982, cbSceneParam._m0[_2021].y, _1978 * cbSceneParam._m0[_2021].x)));
        float _2060 = fma(_1990, cbSceneParam._m0[_2029].w, fma(_1986, cbSceneParam._m0[_2029].z, fma(_1982, cbSceneParam._m0[_2029].y, _1978 * cbSceneParam._m0[_2029].x)));
        float _2068 = fma(_1990, cbSceneParam._m0[_2045].w, fma(_1986, cbSceneParam._m0[_2045].z, fma(_1982, cbSceneParam._m0[_2045].y, _1978 * cbSceneParam._m0[_2045].x)));
        float _2073 = cbSceneParam._m0[33u].z * _2068;
        float _2075 = cbSceneParam._m0[33u].w * _2068;
        float _2078 = fma(_1990, cbSceneParam._m0[_2037].w, fma(_1986, cbSceneParam._m0[_2037].z, fma(_1982, cbSceneParam._m0[_2037].y, _1978 * cbSceneParam._m0[_2037].x))) / _2068;
        float _2126 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
        float _4497 = isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0));
        float _2133 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2073 + _2056) / _2068, (_2075 + _2060) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 + _2056) / _2068, (_2060 - _2073) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2073) / _2068, (_2060 - _2075) / _2068), _2078), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 - _2075) / _2068, (_2073 + _2060) / _2068), _2078), 0.0)).x), vec4(0.25)));
        _2140 = 1.0 - (_2133 * cbSceneParam._m0[34u].x);
        _2141 = 1.0 - (_2133 * cbSceneParam._m0[34u].y);
        _2142 = 1.0 - (_2133 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2140 = 1.0;
        _2141 = 1.0;
        _2142 = 1.0;
    }
    float _2206;
    float _2208;
    float _2210;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2194 = fma(_1990, cbSceneParam._m0[63u].w, fma(_1986, cbSceneParam._m0[63u].z, fma(_1982, cbSceneParam._m0[63u].y, _1978 * cbSceneParam._m0[63u].x)));
        float _2195 = fma(_1990, cbSceneParam._m0[60u].w, fma(_1986, cbSceneParam._m0[60u].z, fma(_1982, cbSceneParam._m0[60u].y, _1978 * cbSceneParam._m0[60u].x))) / _2194;
        float _2196 = fma(_1990, cbSceneParam._m0[61u].w, fma(_1986, cbSceneParam._m0[61u].z, fma(_1982, cbSceneParam._m0[61u].y, _1978 * cbSceneParam._m0[61u].x))) / _2194;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2195 >= cbSceneParam._m0[64u].x) && (_2196 >= cbSceneParam._m0[64u].y)) && (_2195 <= cbSceneParam._m0[64u].z)) && (_2196 <= cbSceneParam._m0[64u].w))
        {
            float _2334 = fma(_1990, cbSceneParam._m0[62u].w, fma(_1986, cbSceneParam._m0[62u].z, fma(_1982, cbSceneParam._m0[62u].y, _1978 * cbSceneParam._m0[62u].x))) / _2194;
            float _2338 = isnan(cbSceneParam._m0[41u].w) ? _2334 : (isnan(_2334) ? cbSceneParam._m0[41u].w : max(_2334, cbSceneParam._m0[41u].w));
            float _2381 = (cbSceneParam._m0[33u].x - sqrt(((_1992 * _1992) + (_1991 * _1991)) + (_1993 * _1993))) * cbSceneParam._m0[33u].y;
            float _4513 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
            float _2388 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2195, cbSceneParam._m0[33u].w + _2196), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2195, _2196 - cbSceneParam._m0[33u].z), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].z, _2196 - cbSceneParam._m0[33u].w), _2338), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2195 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2196), _2338), 0.0)).x), vec4(0.25)));
            float _2392 = 1.0 - (_2388 * cbSceneParam._m0[34u].x);
            float _2393 = 1.0 - (_2388 * cbSceneParam._m0[34u].y);
            float _2394 = 1.0 - (_2388 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2394) ? _2142 : (isnan(_2142) ? _2394 : min(_2142, _2394));
            frontier_phi_37_36_ladder_1 = isnan(_2393) ? _2141 : (isnan(_2141) ? _2393 : min(_2141, _2393));
            frontier_phi_37_36_ladder_2 = isnan(_2392) ? _2140 : (isnan(_2140) ? _2392 : min(_2140, _2392));
        }
        else
        {
            frontier_phi_37_36_ladder = _2142;
            frontier_phi_37_36_ladder_1 = _2141;
            frontier_phi_37_36_ladder_2 = _2140;
        }
        _2206 = frontier_phi_37_36_ladder_2;
        _2208 = frontier_phi_37_36_ladder_1;
        _2210 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2206 = _2140;
        _2208 = _2141;
        _2210 = _2142;
    }
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_255 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _882 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2253 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2257 = _2217 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_705, _706, _707));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_705, _706, _707));
    float _4549 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4560 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2234].x * _2240) * _2278) + (((cbLight._m0[_2244].x * _2206) * _2253) * _2276);
    float _2286 = ((_2240 * cbLight._m0[_2234].y) * _2278) + (((cbLight._m0[_2244].y * _2208) * _2253) * _2276);
    float _2287 = ((_2240 * cbLight._m0[_2234].z) * _2278) + (((cbLight._m0[_2244].z * _2210) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2395;
    float _2397;
    float _2399;
    if (_2293)
    {
        _2395 = _2285;
        _2397 = _2286;
        _2399 = _2287;
    }
    else
    {
        uint _2403 = _2217 + 6u;
        float _2419 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2420 = _2419 * _2419;
        float _4571 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
        float _2421 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2422 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2395 = (((cbLight._m0[_2403].x * 0.3183098733425140380859375) * _2421) * _2422) + _2285;
        _2397 = (((cbLight._m0[_2403].y * 0.3183098733425140380859375) * _2421) * _2422) + _2286;
        _2399 = (((cbLight._m0[_2403].z * 0.3183098733425140380859375) * _2421) * _2422) + _2287;
    }
    bool _2402 = _2291.y == 0u;
    float _2457;
    float _2459;
    float _2461;
    if (_2402)
    {
        _2457 = _2395;
        _2459 = _2397;
        _2461 = _2399;
    }
    else
    {
        uint _2630 = _2217 + 7u;
        float _2646 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_705, _706, _707)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4587 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2649 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2457 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2395;
        _2459 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2397;
        _2461 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2399;
    }
    uint _2464 = _2217 + 8u;
    float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _708) * 0.949999988079071044921875);
    float _2478 = _2477 * _2477;
    float _2479 = cbLight._m0[_2217].x + _784;
    float _2480 = cbLight._m0[_2217].y + _785;
    float _2481 = cbLight._m0[_2217].z + _786;
    float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
    float _2486 = _2485 * _2479;
    float _2487 = _2485 * _2480;
    float _2488 = _2485 * _2481;
    float _2489 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2217].xyz));
    float _4603 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _4614 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _2493 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2494 = dot(vec3(_705, _706, _707), vec3(_2486, _2487, _2488));
    float _4625 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2497 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _2498 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2486, _2487, _2488));
    float _4636 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2502 = _2478 * _2478;
    float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
    float _2514 = exp2(log2(1.0 - (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0)))) * 5.0);
    float _2515 = 0.959999978542327880859375 - _863;
    float _2517 = 0.959999978542327880859375 - _864;
    float _2518 = 0.959999978542327880859375 - _865;
    float _2525 = 1.0 - _2478;
    float _2536 = (0.5 / (((_2493 * ((_2492 * _2525) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2525) + _2478) * _2492))) * _2492;
    float _4647 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2538 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
    uint _2552 = _2217 + 9u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _708) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2257].x + _784;
    float _2566 = cbLight._m0[_2257].y + _785;
    float _2567 = cbLight._m0[_2257].z + _786;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2257].xyz));
    float _4658 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2579 = dot(vec3(_705, _706, _707), vec3(_2572, _2573, _2574));
    float _4669 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _2583 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2572, _2573, _2574));
    float _4680 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2587 = _2564 * _2564;
    float _2591 = ((_2582 * _2582) * (_2587 + (-1.0))) + 1.0;
    float _2598 = exp2(log2(1.0 - (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0)))) * 5.0);
    float _2605 = 1.0 - _2564;
    float _2615 = (0.5 / (((_2493 * ((_2578 * _2605) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2605) + _2564) * _2578))) * _2578;
    float _4691 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2617 = (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * (_2587 / ((_2591 * _2591) * 3.141590118408203125));
    float _2627 = (((((_2598 * _2515) + _866) * cbLight._m0[_2552].x) * _2617) * _2240) + ((((cbLight._m0[_2464].x * _2206) * ((_2514 * _2515) + _866)) * _2538) * _2253);
    float _2628 = (((((_2598 * _2517) + _868) * cbLight._m0[_2552].y) * _2617) * _2240) + ((((cbLight._m0[_2464].y * _2208) * ((_2514 * _2517) + _868)) * _2538) * _2253);
    float _2629 = (((((_2598 * _2518) + _869) * cbLight._m0[_2552].z) * _2617) * _2240) + ((((cbLight._m0[_2464].z * _2210) * ((_2514 * _2518) + _869)) * _2538) * _2253);
    float _2685;
    float _2687;
    float _2689;
    if (_2293)
    {
        _2685 = _2627;
        _2687 = _2628;
        _2689 = _2629;
    }
    else
    {
        uint _2691 = _2217 + 2u;
        uint _2695 = _2217 + 10u;
        float _2709 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2691].w)) * _708) * 0.949999988079071044921875);
        float _2710 = _2709 * _2709;
        float _2711 = cbLight._m0[_2691].x + _784;
        float _2712 = cbLight._m0[_2691].y + _785;
        float _2713 = cbLight._m0[_2691].z + _786;
        float _2717 = inversesqrt(dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713)));
        float _2718 = _2717 * _2711;
        float _2719 = _2717 * _2712;
        float _2720 = _2717 * _2713;
        float _2721 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2691].xyz));
        float _4702 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2725 = dot(vec3(_705, _706, _707), vec3(_2718, _2719, _2720));
        float _4713 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2728 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2729 = dot(vec3(cbLight._m0[_2691].xyz), vec3(_2718, _2719, _2720));
        float _4724 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2733 = _2710 * _2710;
        float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
        float _2744 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2751 = 1.0 - _2710;
        float _2761 = (0.5 / (((_2493 * ((_2724 * _2751) + _2710)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2751) + _2710) * _2724))) * _2724;
        float _4735 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2763 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
        float _2764 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2685 = (((((_2744 * _2515) + _866) * cbLight._m0[_2695].x) * _2763) * _2764) + _2627;
        _2687 = (((((_2744 * _2517) + _868) * cbLight._m0[_2695].y) * _2763) * _2764) + _2628;
        _2689 = (((((_2744 * _2518) + _869) * cbLight._m0[_2695].z) * _2763) * _2764) + _2629;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2402)
    {
        _2795 = _2685;
        _2797 = _2687;
        _2799 = _2689;
    }
    else
    {
        uint _2806 = _2217 + 3u;
        uint _2810 = _2217 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _708) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _784;
        float _2827 = cbLight._m0[_2806].y + _785;
        float _2828 = cbLight._m0[_2806].z + _786;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_705, _706, _707), vec3(cbLight._m0[_2806].xyz));
        float _4751 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
        float _2840 = dot(vec3(_705, _706, _707), vec3(_2833, _2834, _2835));
        float _4762 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4773 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2493 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2493 * _2866) + _2825) * _2839))) * _2839;
        float _4784 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2795 = (((((_2859 * _2515) + _866) * cbLight._m0[_2810].x) * _2878) * _2879) + _2685;
        _2797 = (((((_2859 * _2517) + _868) * cbLight._m0[_2810].y) * _2878) * _2879) + _2687;
        _2799 = (((((_2859 * _2518) + _869) * cbLight._m0[_2810].z) * _2878) * _2879) + _2689;
    }
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    if (_2215.y == 0u)
    {
        uvec4 _2900 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2901 = _2900.x;
        uint _2912 = uint((float(_2900.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2901))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2901)));
        float _2922 = (log2(_1993 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2923 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        uint _2926 = uint(isnan(14.0) ? _2923 : (isnan(_2923) ? 14.0 : min(_2923, 14.0)));
        uvec4 _2931 = texelFetch(g_lightClusterGridBuffer, int(((_2926 << 2u) + (_2912 << 6u)) >> 2u));
        uint _2932 = _2931.x;
        uint _2933 = _2900.z;
        float _3012;
        float _3014;
        float _3016;
        float _3018;
        float _3020;
        float _3022;
        if (((((1u << ((_2933 >> 4u) & 15u)) + 4294967295u) & _2932) == 0u) || ((_2933 & 240u) == 0u))
        {
            _3012 = 0.0;
            _3014 = 0.0;
            _3016 = 0.0;
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
        }
        else
        {
            float _3013;
            float _3015;
            float _3017;
            float _3019;
            float _3021;
            float _3023;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            uint _3171 = 0u;
            uint _3180;
            bool _3181;
            for (;;)
            {
                _3180 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                _3181 = _3180 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3181)
                {
                    frontier_phi_71_pred = _3170;
                    frontier_phi_71_pred_1 = _3169;
                    frontier_phi_71_pred_2 = _3168;
                    frontier_phi_71_pred_3 = _3167;
                    frontier_phi_71_pred_4 = _3166;
                    frontier_phi_71_pred_5 = _3165;
                }
                else
                {
                    float _3310;
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    uint _3316;
                    _3310 = _3165;
                    _3311 = _3166;
                    _3312 = _3167;
                    _3313 = _3168;
                    _3314 = _3169;
                    _3315 = _3170;
                    _3316 = _3180;
                    float _3237;
                    float _3238;
                    float _3239;
                    float _3240;
                    float _3241;
                    float _3242;
                    for (;;)
                    {
                        uint _3320 = uint(findLSB(_3316)) + (_3171 << 5u);
                        uint _3317 = (_3316 + 4294967295u) & _3316;
                        uint _3322 = _3320 * 48u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3322)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3322 + 3u)).x));
                        uint _3342 = (_3320 * 48u) + 4u;
                        vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 3u)).x));
                        uint _3361 = (_3320 * 48u) + 8u;
                        vec3 _3372 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3361)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3361 + 2u)).x));
                        float _3376 = _3336.x - _1991;
                        float _3377 = _3336.y - _1992;
                        float _3378 = _3336.z - _1993;
                        float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                        float _3382 = inversesqrt(_3379);
                        float _3383 = _3382 * _3376;
                        float _3384 = _3382 * _3377;
                        float _3385 = _3382 * _3378;
                        float _3386 = dot(vec3(_823, _826, _829), vec3(_3383, _3384, _3385));
                        float _3391 = 1.0 - (_3379 * _3336.w);
                        float _4810 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3392 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3393 = sqrt(_3379) * _3355.w;
                        float _3396 = 1.39999997615814208984375 / (_3393 + 1.39999997615814208984375);
                        float _3397 = _3396 * _3396;
                        float _3400 = ((1.0 - _3397) * _3386) + _3397;
                        float _3403 = _3393 * _3393;
                        float _3407 = ((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3392) / ((_3403 * 0.699999988079071044921875) + 1.0);
                        float _3411 = (-0.0) - _1991;
                        float _3412 = (-0.0) - _1992;
                        float _3413 = (-0.0) - _1993;
                        float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                        float _3418 = _3417 * _3411;
                        float _3419 = _3417 * _3412;
                        float _3420 = _3417 * _3413;
                        float _3427 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                        float _3428 = 1.0 - _898;
                        float _3435 = sqrt(1.0 - ((1.0 - (_3428 * _3428)) * (1.0 - (_3427 * _3427))));
                        float _3436 = _3435 * _3435;
                        float _3437 = _3436 * _3436;
                        float _3438 = _3418 + _3383;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3444 = inversesqrt(dot(vec3(_3438, _3439, _3440), vec3(_3438, _3439, _3440)));
                        float _3448 = dot(vec3(_823, _826, _829), vec3(_3418, _3419, _3420));
                        float _4826 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3451 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
                        float _3452 = dot(vec3(_823, _826, _829), vec3(_3444 * _3438, _3444 * _3439, _3444 * _3440));
                        float _4837 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3455 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                        float _3459 = ((_3455 * _3455) * (_3437 + (-1.0))) + 1.0;
                        float _3460 = _3396 * _3436;
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3386) + _3461;
                        float _4848 = isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0));
                        float _3465 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3466 = 1.0 - _3436;
                        float _3476 = (0.5 / (((_3465 * ((_3451 * _3466) + _3436)) + 9.9999999392252902907785028219223e-09) + (((_3465 * _3466) + _3436) * _3451))) * _3465;
                        float _4859 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                        float _3487 = (((_3437 * 3.1415927410125732421875) * (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0)))) / ((_3459 * _3459) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125))) * _3392;
                        _3240 = (_3407 * _3355.x) + _3313;
                        _3241 = (_3407 * _3355.y) + _3314;
                        _3242 = (_3407 * _3355.z) + _3315;
                        _3237 = (_3487 * _3372.x) + _3310;
                        _3238 = (_3487 * _3372.y) + _3311;
                        _3239 = (_3487 * _3372.z) + _3312;
                        if (_3317 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3310 = _3237;
                            _3311 = _3238;
                            _3312 = _3239;
                            _3313 = _3240;
                            _3314 = _3241;
                            _3315 = _3242;
                            _3316 = _3317;
                        }
                    }
                    frontier_phi_71_pred = _3242;
                    frontier_phi_71_pred_1 = _3241;
                    frontier_phi_71_pred_2 = _3240;
                    frontier_phi_71_pred_3 = _3239;
                    frontier_phi_71_pred_4 = _3238;
                    frontier_phi_71_pred_5 = _3237;
                }
                _3023 = frontier_phi_71_pred;
                _3021 = frontier_phi_71_pred_1;
                _3019 = frontier_phi_71_pred_2;
                _3017 = frontier_phi_71_pred_3;
                _3015 = frontier_phi_71_pred_4;
                _3013 = frontier_phi_71_pred_5;
                uint _3172 = _3171 + 1u;
                if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3165 = _3013;
                    _3166 = _3015;
                    _3167 = _3017;
                    _3168 = _3019;
                    _3169 = _3021;
                    _3170 = _3023;
                    _3171 = _3172;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3012 = _3013;
            _3014 = _3015;
            _3016 = _3017;
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
        }
        uvec4 _3026 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3027 = _3026.z;
        uint _3029 = (_3027 >> 8u) & 15u;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((4294967295u << _3029) & _2932) == 0u)
        {
            _3133 = _3012;
            _3135 = _3014;
            _3137 = _3016;
            _3139 = _3018;
            _3141 = _3020;
            _3143 = _3022;
        }
        else
        {
            float _3158 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
            float _3159 = _3158 * _1991;
            float _3160 = _3158 * _1992;
            float _3161 = _3158 * _1993;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3029 < ((_3027 >> 12u) & 15u))
            {
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3293 = _3012;
                float _3294 = _3014;
                float _3295 = _3016;
                float _3296 = _3018;
                float _3297 = _3020;
                float _3298 = _3022;
                uint _3299 = _3029;
                uint _3308;
                bool _3309;
                for (;;)
                {
                    _3308 = texelFetch(g_lightClassification, int((((_2926 << 5u) + (_2912 << 9u)) + (_3299 << 2u)) >> 2u)).x;
                    _3309 = _3308 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3309)
                    {
                        frontier_phi_82_pred = _3298;
                        frontier_phi_82_pred_1 = _3297;
                        frontier_phi_82_pred_2 = _3296;
                        frontier_phi_82_pred_3 = _3295;
                        frontier_phi_82_pred_4 = _3294;
                        frontier_phi_82_pred_5 = _3293;
                    }
                    else
                    {
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3799;
                        float _3800;
                        float _3514 = _3293;
                        float _3515 = _3294;
                        float _3516 = _3295;
                        float _3517 = _3296;
                        float _3518 = _3297;
                        float _3519 = _3298;
                        uint _3520 = _3308;
                        uint _3521;
                        vec4 _3546;
                        float _3547;
                        vec4 _3562;
                        vec3 _3574;
                        vec4 _3589;
                        vec4 _3605;
                        float _3651;
                        bool _3652;
                        for (;;)
                        {
                            uint _3531 = ((_3299 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3520));
                            _3521 = (_3520 + 4294967295u) & _3520;
                            uint _3533 = _3531 * 40u;
                            _3546 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 3u)).x));
                            _3547 = _3546.w;
                            uint _3549 = (_3531 * 40u) + 4u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3531 * 40u) + 8u;
                            _3574 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x));
                            uint _3576 = (_3531 * 40u) + 16u;
                            _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3592 = (_3531 * 40u) + 20u;
                            _3605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3592 + 3u)).x));
                            uint _3607 = (_3531 * 40u) + 24u;
                            vec4 _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3626 = (_3531 * 40u) + 28u;
                            vec4 _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3651 = fma(_1993, _3639.z, fma(_1992, _3639.y, _3639.x * _1991)) + _3639.w;
                            _3652 = !((fma(_1993, _3620.z, fma(_1992, _3620.y, _3620.x * _1991)) + _3620.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3652)
                            {
                                float _3679 = _3546.x - _1991;
                                float _3680 = _3546.y - _1992;
                                float _3681 = _3546.z - _1993;
                                float _3682 = dot(vec3(_3679, _3680, _3681), vec3(_3679, _3680, _3681));
                                float _3685 = inversesqrt(_3682);
                                float _3686 = _3685 * _3679;
                                float _3687 = _3685 * _3680;
                                float _3688 = _3685 * _3681;
                                float _3692 = 1.0 - (_3682 / (_3547 * _3547));
                                float _4870 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3697 = sqrt(_3682) * _3562.w;
                                float _3699 = 1.39999997615814208984375 / (_3697 + 1.39999997615814208984375);
                                float _3700 = _3699 * _3699;
                                float _3703 = ((1.0 - _3700) * dot(vec3(_3686, _3687, _3688), vec3(_823, _826, _829))) + _3700;
                                float _3706 = _3697 * _3697;
                                float _3710 = (fma(_1993, _3589.z, fma(_1992, _3589.y, _3589.x * _1991)) + _3589.w) / _3651;
                                float _3711 = (fma(_1993, _3605.z, fma(_1992, _3605.y, _3605.x * _1991)) + _3605.w) / _3651;
                                float _3715 = 1.0 - dot(vec2(_3710, _3711), vec2(_3710, _3711));
                                float _4886 = isnan(0.0) ? _3715 : (isnan(_3715) ? 0.0 : max(_3715, 0.0));
                                float _3716 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                                float _3717 = _3716 * (((isnan(0.0) ? _3703 : (isnan(_3703) ? 0.0 : max(_3703, 0.0))) * _3693) / ((_3706 * 0.699999988079071044921875) + 1.0));
                                float _3729 = exp2(log2(1.0 / ((_3706 * 3.5) + 5.0)) * 0.25);
                                float _3730 = 1.0 - _898;
                                float _3737 = sqrt(1.0 - ((1.0 - (_3730 * _3730)) * (1.0 - (_3729 * _3729))));
                                float _3738 = _3737 * _3737;
                                float _3739 = _3738 * _3738;
                                float _3740 = _3686 - _3159;
                                float _3741 = _3687 - _3160;
                                float _3742 = _3688 - _3161;
                                float _3746 = inversesqrt(dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742)));
                                float _3750 = dot(vec3(_823, _826, _829), vec3((-0.0) - _3159, (-0.0) - _3160, (-0.0) - _3161));
                                float _4897 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3753 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                                float _3754 = dot(vec3(_823, _826, _829), vec3(_3746 * _3740, _3746 * _3741, _3746 * _3742));
                                float _4908 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3757 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3761 = ((_3757 * _3757) * (_3739 + (-1.0))) + 1.0;
                                float _3762 = _3699 * _3738;
                                float _3763 = _3762 * _3762;
                                float _3769 = ((1.0 - _3763) * dot(vec3(_823, _826, _829), vec3(_3686, _3687, _3688))) + _3763;
                                float _4919 = isnan(0.0) ? _3769 : (isnan(_3769) ? 0.0 : max(_3769, 0.0));
                                float _3770 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3771 = 1.0 - _3738;
                                float _3781 = (0.5 / (((_3770 * ((_3753 * _3771) + _3738)) + 9.9999999392252902907785028219223e-09) + (((_3770 * _3771) + _3738) * _3753))) * _3770;
                                float _4930 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3791 = (_3716 * _3693) * (((_3739 * 3.1415927410125732421875) * (isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0)))) / ((_3761 * _3761) * ((_3706 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3717 * _3562.z;
                                frontier_phi_88_pred_1 = _3717 * _3562.y;
                                frontier_phi_88_pred_2 = _3717 * _3562.x;
                                frontier_phi_88_pred_3 = _3791 * _3574.z;
                                frontier_phi_88_pred_4 = _3791 * _3574.y;
                                frontier_phi_88_pred_5 = _3791 * _3574.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3800 = frontier_phi_88_pred;
                            _3799 = frontier_phi_88_pred_1;
                            _3798 = frontier_phi_88_pred_2;
                            _3797 = frontier_phi_88_pred_3;
                            _3796 = frontier_phi_88_pred_4;
                            _3795 = frontier_phi_88_pred_5;
                            _3504 = _3798 + _3517;
                            _3505 = _3799 + _3518;
                            _3506 = _3800 + _3519;
                            _3501 = _3795 + _3514;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            if (_3521 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3505;
                                _3519 = _3506;
                                _3520 = _3521;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3506;
                        frontier_phi_82_pred_1 = _3505;
                        frontier_phi_82_pred_2 = _3504;
                        frontier_phi_82_pred_3 = _3503;
                        frontier_phi_82_pred_4 = _3502;
                        frontier_phi_82_pred_5 = _3501;
                    }
                    _3144 = frontier_phi_82_pred;
                    _3142 = frontier_phi_82_pred_1;
                    _3140 = frontier_phi_82_pred_2;
                    _3138 = frontier_phi_82_pred_3;
                    _3136 = frontier_phi_82_pred_4;
                    _3134 = frontier_phi_82_pred_5;
                    uint _3300 = _3299 + 1u;
                    if (_3300 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3293 = _3134;
                        _3294 = _3136;
                        _3295 = _3138;
                        _3296 = _3140;
                        _3297 = _3142;
                        _3298 = _3144;
                        _3299 = _3300;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3140;
                frontier_phi_63_64_ladder_1 = _3144;
                frontier_phi_63_64_ladder_2 = _3142;
                frontier_phi_63_64_ladder_3 = _3138;
                frontier_phi_63_64_ladder_4 = _3136;
                frontier_phi_63_64_ladder_5 = _3134;
            }
            else
            {
                frontier_phi_63_64_ladder = _3018;
                frontier_phi_63_64_ladder_1 = _3022;
                frontier_phi_63_64_ladder_2 = _3020;
                frontier_phi_63_64_ladder_3 = _3016;
                frontier_phi_63_64_ladder_4 = _3014;
                frontier_phi_63_64_ladder_5 = _3012;
            }
            _3133 = frontier_phi_63_64_ladder_5;
            _3135 = frontier_phi_63_64_ladder_4;
            _3137 = frontier_phi_63_64_ladder_3;
            _3139 = frontier_phi_63_64_ladder;
            _3141 = frontier_phi_63_64_ladder_2;
            _3143 = frontier_phi_63_64_ladder_1;
        }
        float _3148 = isnan(1.0) ? _882 : (isnan(_882) ? 1.0 : min(_882, 1.0));
        _2945 = (_3148 * _3139) + _2457;
        _2947 = (_3148 * _3141) + _2459;
        _2949 = (_3148 * _3143) + _2461;
        _2951 = ((_3133 * _866) * _3148) + _2795;
        _2953 = ((_3135 * _868) * _3148) + _2797;
        _2955 = ((_3137 * _869) * _3148) + _2799;
    }
    else
    {
        _2945 = _2457;
        _2947 = _2459;
        _2949 = _2461;
        _2951 = _2795;
        _2953 = _2797;
        _2955 = _2799;
    }
    float _4946 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _4957 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _4968 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _2972 = ((isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0))) * (_2945 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _882))) + ((_2951 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2973 = ((isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2947 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _882))) + ((_2953 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    float _2974 = ((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_2949 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _882))) + ((_2955 + ((isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))) * _1721)) * cbPerFrame._m0[3u].x);
    uint _2975 = _255 + 6u;
    float _2983 = _804 / cbSceneParam._m0[86u].x;
    float _2984 = _805 / cbSceneParam._m0[86u].y;
    vec4 _2998 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3000 = _2998.x;
    float _3001 = _2998.y;
    float _3002 = _2998.z;
    float _3003 = _2998.w;
    float _3075;
    float _3077;
    float _3079;
    float _3081;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _3037 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _3038 = _3037 / _727;
        float _3049 = _3038 * _777;
        float _3050 = _778 * _3038;
        float _3051 = (-0.0) - _3050;
        float _3053 = _3038 * _779;
        float _3055 = (cbSceneParam._m0[77u].w * _3051) / _3037;
        float _3056 = _3055 + cbSceneParam._m0[79u].w;
        float _3057 = cbSceneParam._m0[79u].w - _3050;
        float _3063 = sqrt(((_3049 * _3049) + (_3050 * _3050)) + (_3053 * _3053));
        float _3066 = (1.0 - (cbSceneParam._m0[77u].w / _3037)) * _3063;
        float _3071 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3073 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3250;
        if (abs((_3051 - _3055) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3250 = ((((_3056 > 0.0) ? exp2(_3071 * _3056) : (2.0 - exp2(_3073 * _3056))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3066;
        }
        else
        {
            float _3194 = 1.0 / cbSceneParam._m0[80u].x;
            float _3195 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : max(_3056, _3057));
            float _3196 = isnan(_3057) ? _3056 : (isnan(_3056) ? _3057 : min(_3056, _3057));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            _3250 = ((abs(_3063 / _3051) * cbSceneParam._m0[80u].y) * ((((_3205 - _3206) * 2.0) - ((exp2(_3071 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0)))) - exp2(_3071 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))))) * _3194)) - ((exp2(_3073 * _3205) - exp2(_3073 * _3206)) * _3194))) + (_3066 * cbSceneParam._m0[80u].z);
        }
        vec4 _3252 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2983, _2984, 1.0), 0.0);
        float _3261 = exp2((_3250 * (-1.44269502162933349609375)) * (1.0 - _3252.w));
        float _3262 = log2(_3261);
        float _3278 = log2(_3003);
        _3075 = (exp2(_3278 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].x)) * _3252.x) / cbSceneParam._m0[78u].x)) + _3000;
        _3077 = (exp2(_3278 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].y)) * _3252.y) / cbSceneParam._m0[78u].y)) + _3001;
        _3079 = (exp2(_3278 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3262 * cbSceneParam._m0[78u].z)) * _3252.z) / cbSceneParam._m0[78u].z)) + _3002;
        _3081 = _3261 * _3003;
    }
    else
    {
        _3075 = _3000;
        _3077 = _3001;
        _3079 = _3002;
        _3081 = _3003;
    }
    bool _3288;
    vec4 _3091;
    vec4 _3113;
    float _3115;
    float _3119;
    float _3120;
    float _3121;
    float _3122;
    bool _3132;
    for (;;)
    {
        _3091 = cbMatDynParam._m0[0u];
        float _3093 = roundEven(_3091.y);
        bool _3094 = _3093 == 3.0;
        float _3095 = log2(_3081);
        float _3102 = exp2(_3095 * cbSceneParam._m0[78u].x) * _2972;
        float _3103 = exp2(_3095 * cbSceneParam._m0[78u].y) * _2973;
        float _3104 = exp2(_3095 * cbSceneParam._m0[78u].z) * _2974;
        float _3111 = _793 + (-0.5);
        _3113 = cbMtdParam._m0[1u];
        _3115 = _3113.y * _3111;
        float _3118 = (_3093 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3119 = _3118 * (_3094 ? _3102 : (_3102 + (cbSceneParam._m0[72u].w * _3075)));
        _3120 = _3118 * (_3094 ? _3103 : (_3103 + (cbSceneParam._m0[72u].w * _3077)));
        _3121 = _3118 * (_3094 ? _3104 : (_3104 + (cbSceneParam._m0[72u].w * _3079)));
        _3122 = _3111 * 0.999000012874603271484375;
        _3132 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3132)
        {
            if ((cbInstanceData._m0[_255 + 7u].x + _3122) < 0.5)
            {
                _3288 = true;
                break;
            }
        }
        uint _3229 = _842 + uint(_3091.w);
        if ((cbInstanceData._m0[_3229].w < 1.0) && ((cbInstanceData._m0[_3229].w + _3122) < 0.5))
        {
            _3288 = true;
            break;
        }
        if ((_3115 + 1.0) < _3113.x)
        {
            _3288 = true;
            break;
        }
        _3288 = false;
        break;
    }
    float _3492;
    if (_3288)
    {
        discard_state = true;
        _3492 = 0.0;
    }
    else
    {
        _3492 = cbInstanceData._m0[_2975].w;
    }
    SV_Target.x = _3119;
    SV_Target.y = _3120;
    SV_Target.z = _3121;
    SV_Target.w = _3492;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2975].w;
    discard_exit();
}


