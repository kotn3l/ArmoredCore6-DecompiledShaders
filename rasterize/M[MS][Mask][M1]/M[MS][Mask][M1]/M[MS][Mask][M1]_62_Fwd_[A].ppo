#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1388;
float _3768;
float _3769;
float _3770;
float _3771;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _222 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _223 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _224 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _230 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _237 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _244 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _250 = uint(roundEven(NORMAL.w)) * 13u;
    uint _256 = _250 + 1u;
    uint _260 = _250 + 2u;
    float _269 = sqrt(((cbInstanceData._m0[_256].x * cbInstanceData._m0[_256].x) + (cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x)) + (cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x));
    float _270 = _269 * TEXCOORD.z;
    float _271 = _269 * TEXCOORD.w;
    vec4 _290 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _314 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _319 = _314.x * cbMtdParam._m0[11u].x;
    float _320 = _314.y * cbMtdParam._m0[11u].y;
    float _321 = _314.z * cbMtdParam._m0[11u].z;
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _270) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _271) + cbTextureTilingScale._m0[5u].w));
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _398 = _396.x;
    float _410 = dot(vec4(_398, _396.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _427 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _360.x) * 2.0) - ((((_398 - _410) * cbMtdParam._m0[23u].w) + _410) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3780 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _428 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _435 = (_428 * ((_340.x * cbMtdParam._m0[12u].x) - _319)) + _319;
    float _436 = (_428 * ((_340.y * cbMtdParam._m0[12u].y) - _320)) + _320;
    float _437 = (_428 * ((_340.z * cbMtdParam._m0[12u].z) - _321)) + _321;
    vec4 _454 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _270) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _271) + cbTextureTilingScale._m0[3u].w));
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _476 = _474.x;
    float _486 = dot(vec4(_476, _474.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _500 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _360.y) * 2.0) - ((((_476 - _486) * cbMtdParam._m0[23u].w) + _486) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3791 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _501 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _514 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _290.x) * ((_501 * ((_454.x * cbMtdParam._m0[13u].x) - _435)) + _435);
    float _517 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _290.y) * ((_501 * ((_454.y * cbMtdParam._m0[13u].y) - _436)) + _436);
    float _520 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _290.z) * ((_501 * ((_454.z * cbMtdParam._m0[13u].z) - _437)) + _437);
    vec4 _538 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _270) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _271) + cbTextureTilingScale._m0[4u].w));
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _557 = _555.x;
    float _558 = _555.y;
    float _559 = _555.z;
    float _566 = ((_538.x - _557) * _428) + _557;
    float _567 = ((_538.y - _558) * _428) + _558;
    float _568 = ((_538.z - _559) * _428) + _559;
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _270) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _271) + cbTextureTilingScale._m0[2u].w));
    float _593 = ((_580.z - _568) * _501) + _568;
    float _596 = ((((_580.x - _566) * _501) + _566) * 2.0) + (-1.0);
    float _598 = ((((_580.y - _567) * _501) + _567) * 2.0) + (-1.0);
    float _599 = dot(vec2(_596, _598), vec2(_596, _598));
    float _3802 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _604 = sqrt(1.0 - (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))));
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _643 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _270) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _271) + cbTextureTilingScale._m0[11u].w));
    float _645 = _643.x;
    float _646 = 1.0 - _645;
    float _662 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_645 - _646) * cbMtdParam._m0[24u].z) + _646) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3813 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _663 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _670 = (_663 * (cbMtdParam._m0[17u].x - _514)) + _514;
    float _671 = (_663 * (cbMtdParam._m0[17u].y - _517)) + _517;
    float _672 = (_663 * (cbMtdParam._m0[17u].z - _520)) + _520;
    vec4 _698 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _700 = _698.x;
    float _717 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _270) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _271) + cbTextureTilingScale._m0[9u].w)).x - _700) * _428) + _700;
    float _734 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _270) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _271) + cbTextureTilingScale._m0[21u].w)).x - _717) * _501) + _717;
    float _738 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _734) * cbMtdParam._m0[19u].z) + _734;
    float _740 = _738 - (_738 * _663);
    float _744 = (cbMtdParam._m0[19u].w * (_618.z - _593)) + _593;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _270) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _271) + cbTextureTilingScale._m0[15u].w));
    float _764 = (_757.x * 2.0) + (-1.0);
    float _765 = (_757.y * 2.0) + (-1.0);
    float _766 = dot(vec2(_764, _765), vec2(_764, _765));
    float _3824 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _774 = (_663 * (_757.z - _744)) + _744;
    float _777 = (((_618.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _596;
    float _778 = (((_618.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _790 = (((_764 - _777) + (cbMtdParam._m0[21u].x * _777)) * _663) + _777;
    float _791 = (((_765 - _778) + (cbMtdParam._m0[21u].x * _778)) * _663) + _778;
    float _792 = (_663 * (sqrt(1.0 - (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) - _604)) + _604;
    float _794 = cbMtdParam._m0[22u].x + _618.w;
    float _797 = fma(_792, _237 * NORMAL.x, fma(_791, _244 * TANGENT.x, (_230 * _222) * _790));
    float _800 = fma(_792, _237 * NORMAL.y, fma(_791, _244 * TANGENT.y, (_230 * _223) * _790));
    float _803 = fma(_792, _237 * NORMAL.z, fma(_791, _244 * TANGENT.z, (_230 * _224) * _790));
    float _807 = inversesqrt(dot(vec3(_797, _800, _803), vec3(_797, _800, _803)));
    float _808 = _807 * _797;
    float _809 = _807 * _800;
    float _810 = _807 * _803;
    float _3835 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _811 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _3846 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _3857 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3868 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3879 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3890 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _816 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _830 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _871 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _881 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _871);
    float _882 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _871);
    float _883 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _871);
    float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
    float _888 = _881 * _887;
    float _889 = _882 * _887;
    float _890 = _883 * _887;
    vec4 _895 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _897 = _895.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1069 = sqrt(((_881 * _881) + (_882 * _882)) + (_883 * _883));
        float _1075 = (cbMatDynParam._m0[5u].x * _1069) + cbMatDynParam._m0[5u].y;
        float _3901 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1080 = (cbMatDynParam._m0[5u].z * _1069) + cbMatDynParam._m0[5u].w;
        float _3912 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) - _1076)) + _1076) < ((_897 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _908 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _909 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _927 = fma(_810, cbSceneParam._m0[5u].z, fma(_809, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _808));
    float _930 = fma(_810, cbSceneParam._m0[6u].z, fma(_809, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _808));
    float _933 = fma(_810, cbSceneParam._m0[7u].z, fma(_809, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _808));
    uint _946 = _250 + 9u;
    uint _947 = _946 + uint(cbMatDynParam._m0[0u].w);
    float _953 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_947].x;
    float _954 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_947].y;
    float _955 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_947].z;
    float _3923 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _3934 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _3945 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _958 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _959 = 1.0 - _816;
    float _960 = _956 * _959;
    float _961 = _957 * _959;
    float _962 = _958 * _959;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _816;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _816;
    float _969 = (_958 + (-0.039999999105930328369140625)) * _816;
    float _970 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    float _973 = _969 + 0.039999999105930328369140625;
    vec4 _982 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _908, cbSceneParam._m0[86u].y * _909));
    float _986 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * TEXCOORD_5.w) * _982.x;
    float _987 = dot(vec3(_808, _809, _810), vec3(_888, _889, _890));
    float _990 = _987 * 2.0;
    float _994 = (_990 * _808) - _888;
    float _995 = (_990 * _809) - _889;
    float _996 = (_990 * _810) - _890;
    float _1000 = abs(dot(vec3(_888, _889, _890), vec3(_808, _809, _810)));
    float _3956 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1002 = sqrt(_811);
    float _1015 = exp2((_1002 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1002 * 3.0));
    float _1021 = (1.0 - _1015) * ((_1002 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1022 = _1015 * _1002;
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1387;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1112 = fma(_1058, cbModelParam._m0[26u].z, fma(_1054, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1050));
        float _1116 = fma(_1058, cbModelParam._m0[27u].z, fma(_1054, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1050));
        float _1120 = fma(_1058, cbModelParam._m0[28u].z, fma(_1054, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1050));
        float _1145 = _1050 + _808;
        float _1146 = _1054 + _809;
        float _1147 = _1058 + _810;
        float _1157 = fma(_1147, cbModelParam._m0[26u].z, fma(_1146, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1145)) - _1112;
        float _1158 = fma(_1147, cbModelParam._m0[27u].z, fma(_1146, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1145)) - _1116;
        float _1159 = fma(_1147, cbModelParam._m0[28u].z, fma(_1146, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1145)) - _1120;
        float _1163 = inversesqrt(dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159)));
        float _1176 = ((_1163 * _1157) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1112 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1177 = ((_1163 * _1158) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1116 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1178 = ((_1163 * _1159) / cbModelParam._m0[34u].z) + ((((((_1120 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1195 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        vec4 _1202 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1176, _1177, _1178), 0.0);
        float _1215 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1181.x + (-0.5));
        float _1217 = _1215 * (_1181.y + (-0.5));
        float _1218 = _1215 * (_1181.z + (-0.5));
        float _1225 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1188.x + (-0.5));
        float _1227 = _1225 * (_1188.y + (-0.5));
        float _1228 = _1225 * (_1188.z + (-0.5));
        float _1235 = exp2((_1195.w + (-0.5)) * 20.0) * 2.0;
        float _1236 = _1235 * (_1195.x + (-0.5));
        float _1237 = _1235 * (_1195.y + (-0.5));
        float _1238 = _1235 * (_1195.z + (-0.5));
        float _1245 = exp2((_1202.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1202.x + (-0.5));
        float _1247 = _1245 * (_1202.y + (-0.5));
        float _1248 = _1245 * (_1202.z + (-0.5));
        float _1249 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1250 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1251 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1252 = _1216 * 0.5;
        float _1253 = _1226 * 0.5;
        float _1254 = _1236 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1269 = (dot(vec3(_808, _809, _810), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3982 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1279 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1249 + 9.9999997473787516355514526367188e-06);
        float _3993 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _4004 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_1281 + 1.0))) + _1286) * _1249;
        float _1296 = _1217 * 0.5;
        float _1297 = _1227 * 0.5;
        float _1298 = _1237 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_808, _809, _810), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _4015 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1250 + 9.9999997473787516355514526367188e-06);
        float _4026 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4037 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) * (_1323 + 1.0))) + _1328) * _1250;
        float _1338 = _1218 * 0.5;
        float _1339 = _1228 * 0.5;
        float _1340 = _1238 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_808, _809, _810), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4048 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1251 + 9.9999997473787516355514526367188e-06);
        float _4059 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4070 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * (_1365 + 1.0))) + _1370) * _1251;
        _1387 = _1218;
        _1389 = _1217;
        _1390 = _1216;
        _1391 = _1228;
        _1392 = _1227;
        _1393 = _1226;
        _1394 = _1238;
        _1395 = _1237;
        _1396 = _1236;
        _1397 = _1251;
        _1398 = _1250;
        _1399 = _1249;
        _1400 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1401 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1402 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
    }
    else
    {
        _1387 = _1388;
        _1389 = _1388;
        _1390 = _1388;
        _1391 = _1388;
        _1392 = _1388;
        _1393 = _1388;
        _1394 = _1388;
        _1395 = _1388;
        _1396 = _1388;
        _1397 = _1388;
        _1398 = _1388;
        _1399 = _1388;
        _1400 = 0.0;
        _1401 = 0.0;
        _1402 = 0.0;
    }
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    float _1706;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1429 = fma(_1058, cbModelParam._m0[30u].z, fma(_1054, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1050));
        float _1433 = fma(_1058, cbModelParam._m0[31u].z, fma(_1054, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1050));
        float _1437 = fma(_1058, cbModelParam._m0[32u].z, fma(_1054, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1050));
        float _1460 = _1050 + _808;
        float _1461 = _1054 + _809;
        float _1462 = _1058 + _810;
        float _1472 = fma(_1462, cbModelParam._m0[30u].z, fma(_1461, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1460)) - _1429;
        float _1473 = fma(_1462, cbModelParam._m0[31u].z, fma(_1461, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1460)) - _1433;
        float _1474 = fma(_1462, cbModelParam._m0[32u].z, fma(_1461, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1460)) - _1437;
        float _1478 = inversesqrt(dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474)));
        float _1491 = ((_1478 * _1472) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1429 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1492 = ((_1478 * _1473) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1433 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1493 = ((_1478 * _1474) / cbModelParam._m0[35u].z) + ((((((_1437 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        vec4 _1516 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1491, _1492, _1493), 0.0);
        float _1528 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1495.x + (-0.5));
        float _1530 = _1528 * (_1495.y + (-0.5));
        float _1531 = _1528 * (_1495.z + (-0.5));
        float _1538 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1502.x + (-0.5));
        float _1540 = _1538 * (_1502.y + (-0.5));
        float _1541 = _1538 * (_1502.z + (-0.5));
        float _1548 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1509.x + (-0.5));
        float _1550 = _1548 * (_1509.y + (-0.5));
        float _1551 = _1548 * (_1509.z + (-0.5));
        float _1558 = exp2((_1516.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1516.x + (-0.5));
        float _1560 = _1558 * (_1516.y + (-0.5));
        float _1561 = _1558 * (_1516.z + (-0.5));
        float _1562 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1565 = _1529 * 0.5;
        float _1566 = _1539 * 0.5;
        float _1567 = _1549 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_808, _809, _810), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1562 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4133 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1592 + 1.0))) + _1597) * _1562;
        float _1607 = _1530 * 0.5;
        float _1608 = _1540 * 0.5;
        float _1609 = _1550 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_808, _809, _810), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1563 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4166 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1634 + 1.0))) + _1639) * _1563;
        float _1649 = _1531 * 0.5;
        float _1650 = _1541 * 0.5;
        float _1651 = _1551 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_808, _809, _810), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1564 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4199 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1676 + 1.0))) + _1681) * _1564;
        _1698 = _1531;
        _1699 = _1530;
        _1700 = _1529;
        _1701 = _1541;
        _1702 = _1540;
        _1703 = _1539;
        _1704 = _1551;
        _1705 = _1550;
        _1706 = _1549;
        _1707 = _1564;
        _1708 = _1563;
        _1709 = _1562;
        _1710 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1711 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
        _1712 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
    }
    else
    {
        _1698 = _1388;
        _1699 = _1388;
        _1700 = _1388;
        _1701 = _1388;
        _1702 = _1388;
        _1703 = _1388;
        _1704 = _1388;
        _1705 = _1388;
        _1706 = _1388;
        _1707 = _1388;
        _1708 = _1388;
        _1709 = _1388;
        _1710 = 0.0;
        _1711 = 0.0;
        _1712 = 0.0;
    }
    float _1722 = (cbModelParam._m0[1u].x * (_1710 - _1400)) + _1400;
    float _1723 = (cbModelParam._m0[1u].x * (_1711 - _1401)) + _1401;
    float _1724 = (cbModelParam._m0[1u].x * (_1712 - _1402)) + _1402;
    float _1745 = fma(_1724, cbSceneParam._m0[89u].z, fma(_1723, cbSceneParam._m0[89u].y, _1722 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1724, cbSceneParam._m0[90u].z, fma(_1723, cbSceneParam._m0[90u].y, _1722 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1724, cbSceneParam._m0[91u].z, fma(_1723, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1722));
    float _1766 = _994 * 0.5;
    float _1767 = _995 * 0.5;
    float _1768 = _996 * 0.5;
    float _1769 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1700, _1703, _1706, _1709));
    float _1772 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1699, _1702, _1705, _1708));
    float _1775 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1698, _1701, _1704, _1707));
    float _1809;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1782 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1387, _1391, _1394, _1397));
        float _1786 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1389, _1392, _1395, _1398));
        float _1790 = dot(vec4(_1766, _1767, _1768, 1.0), vec4(_1390, _1393, _1396, _1399));
        float _1797 = dot(vec4(cbModelParam._m0[39u]), vec4(_1766, _1767, _1768, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)), isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1797) ? 0.0 : (isnan(0.0) ? _1797 : max(0.0, _1797))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1820;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1811 = dot(vec4(cbModelParam._m0[40u]), vec4(_1766, _1767, _1768, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1811) ? 0.0 : (isnan(0.0) ? _1811 : max(0.0, _1811))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1824 = (_1820 * cbModelParam._m0[1u].x) + (_1809 * (1.0 - cbModelParam._m0[1u].x));
    float _1834 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _811);
    float _1835 = isnan(_1834) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1834 : min(cbModelParam._m0[25u].z, _1834));
    float _1916;
    float _1918;
    float _1920;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1883 = fma(_1058, cbModelParam._m0[13u].z, fma(_1054, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1050)) + cbModelParam._m0[13u].w;
        float _1887 = fma(_1058, cbModelParam._m0[14u].z, fma(_1054, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1050)) + cbModelParam._m0[14u].w;
        float _1891 = fma(_1058, cbModelParam._m0[15u].z, fma(_1054, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1050)) + cbModelParam._m0[15u].w;
        float _1894 = fma(_996, cbModelParam._m0[13u].z, fma(_995, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _994));
        float _1897 = fma(_996, cbModelParam._m0[14u].z, fma(_995, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _994));
        float _1900 = fma(_996, cbModelParam._m0[15u].z, fma(_995, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _994));
        float _1928;
        if (_1894 > 0.0)
        {
            _1928 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1928 = frontier_phi_17_15_ladder;
        }
        float _2131;
        if (_1897 > 0.0)
        {
            _2131 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2131 = frontier_phi_26_22_ladder;
        }
        float _2385;
        if (_1900 > 0.0)
        {
            _2385 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2385 = frontier_phi_38_33_ladder;
        }
        float _2387 = isnan(_2131) ? _1928 : (isnan(_1928) ? _2131 : min(_1928, _2131));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1894) + _1883;
        float _2393 = (_2388 * _1897) + _1887;
        float _2394 = (_2388 * _1900) + _1891;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2397 = (-1.0) - _2395;
        float _2399 = _2395 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2394 > _2399) || ((_2394 < _2397) || ((_2393 > _2399) || ((_2393 < _2397) || ((_2392 < _2397) || (_2392 > _2399))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2522 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2394, cbModelParam._m0[9u].z, fma(_2393, cbModelParam._m0[9u].y, _2392 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2394, cbModelParam._m0[10u].z, fma(_2393, cbModelParam._m0[10u].y, _2392 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2394, cbModelParam._m0[11u].z, fma(_2393, cbModelParam._m0[11u].y, _2392 * cbModelParam._m0[11u].x))), _1835);
            frontier_phi_16_38_ladder = _2522.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2522.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2522.x * cbModelParam._m0[1u].y;
        }
        _1916 = frontier_phi_16_38_ladder_2;
        _1918 = frontier_phi_16_38_ladder_1;
        _1920 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1904 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_994, _995, _996), _1835);
        _1916 = _1904.x * cbModelParam._m0[1u].y;
        _1918 = _1904.y * cbModelParam._m0[1u].y;
        _1920 = _1904.z * cbModelParam._m0[1u].y;
    }
    float _1924 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _811);
    float _1925 = isnan(_1924) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1924 : min(cbModelParam._m0[25u].w, _1924));
    float _2015;
    float _2017;
    float _2019;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1979 = fma(_1058, cbModelParam._m0[21u].z, fma(_1054, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1050)) + cbModelParam._m0[21u].w;
        float _1983 = fma(_1058, cbModelParam._m0[22u].z, fma(_1054, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1050)) + cbModelParam._m0[22u].w;
        float _1987 = fma(_1058, cbModelParam._m0[23u].z, fma(_1054, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1050)) + cbModelParam._m0[23u].w;
        float _1990 = fma(_996, cbModelParam._m0[21u].z, fma(_995, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _994));
        float _1993 = fma(_996, cbModelParam._m0[22u].z, fma(_995, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _994));
        float _1996 = fma(_996, cbModelParam._m0[23u].z, fma(_995, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _994));
        float _2136;
        if (_1990 > 0.0)
        {
            _2136 = abs((1.0 - _1979) / _1990);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1979 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2136 = frontier_phi_28_24_ladder;
        }
        float _2412;
        if (_1993 > 0.0)
        {
            _2412 = abs((1.0 - _1983) / _1993);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1983 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2412 = frontier_phi_40_35_ladder;
        }
        float _2625;
        if (_1996 > 0.0)
        {
            _2625 = abs((1.0 - _1987) / _1996);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1996 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1987 + 1.0) / _1996);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2625 = frontier_phi_49_46_ladder;
        }
        float _2627 = isnan(_2412) ? _2136 : (isnan(_2136) ? _2412 : min(_2136, _2412));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _1990) + _1979;
        float _2633 = (_2628 * _1993) + _1983;
        float _2634 = (_2628 * _1996) + _1987;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2636 = (-1.0) - _2635;
        float _2638 = _2635 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2634 > _2638) || ((_2634 < _2636) || ((_2633 > _2638) || ((_2633 < _2636) || ((_2632 < _2636) || (_2632 > _2638))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2634, cbModelParam._m0[17u].z, fma(_2633, cbModelParam._m0[17u].y, _2632 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2634, cbModelParam._m0[18u].z, fma(_2633, cbModelParam._m0[18u].y, _2632 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2634, cbModelParam._m0[19u].z, fma(_2633, cbModelParam._m0[19u].y, _2632 * cbModelParam._m0[19u].x))), _1925);
            frontier_phi_25_49_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _2015 = frontier_phi_25_49_ladder_2;
        _2017 = frontier_phi_25_49_ladder_1;
        _2019 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_994, _995, _996), _1925);
        _2015 = _1999.x * cbModelParam._m0[1u].z;
        _2017 = _1999.y * cbModelParam._m0[1u].z;
        _2019 = _1999.z * cbModelParam._m0[1u].z;
    }
    float _2032 = (((_1021 * _970) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2015 - _1916)) + _1916);
    float _2034 = (((_1021 * _972) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2017 - _1918)) + _1918);
    float _2036 = (((_1021 * _973) + _1022) * _986) * ((cbModelParam._m0[1u].w * (_2019 - _1920)) + _1920);
    float _2039 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2034, cbSceneParam._m0[89u].y, _2032 * cbSceneParam._m0[89u].x));
    float _2042 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2034, cbSceneParam._m0[90u].y, _2032 * cbSceneParam._m0[90u].x));
    float _2045 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2034, cbSceneParam._m0[91u].y, _2032 * cbSceneParam._m0[91u].x));
    uvec4 _2055 = floatBitsToUint(cbInstanceData._m0[_250 + 5u]);
    uint _2057 = _2055.x * 14u;
    uint _2058 = _2057 + 13u;
    float _2065 = _986 + (-1.0);
    float _2070 = (cbLight._m0[_2058].x * _2065) + 1.0;
    float _2071 = (cbLight._m0[_2058].y * _2065) + 1.0;
    float _2072 = (cbLight._m0[_2058].z * _2065) + 1.0;
    float _2073 = (cbLight._m0[_2058].w * _2065) + 1.0;
    uint _2074 = _2057 + 5u;
    float _2080 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2084 = _2057 + 4u;
    float _2090 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
    uint _2094 = _2057 | 1u;
    float _2105 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_808, _809, _810));
    float _2108 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_808, _809, _810));
    float _4335 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _4346 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2113 = (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * 0.3183098733425140380859375;
    float _2115 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * 0.3183098733425140380859375;
    float _2122 = ((cbLight._m0[_2074].x * _2080) * _2115) + ((cbLight._m0[_2084].x * _2090) * _2113);
    float _2123 = ((_2080 * cbLight._m0[_2074].y) * _2115) + ((_2090 * cbLight._m0[_2084].y) * _2113);
    float _2124 = ((_2080 * cbLight._m0[_2074].z) * _2115) + ((_2090 * cbLight._m0[_2084].z) * _2113);
    uvec4 _2128 = floatBitsToUint(cbLight._m0[_2057 + 12u]);
    bool _2130 = _2128.x == 0u;
    float _2141;
    float _2143;
    float _2145;
    if (_2130)
    {
        _2141 = _2122;
        _2143 = _2123;
        _2145 = _2124;
    }
    else
    {
        uint _2149 = _2057 + 6u;
        float _2165 = (dot(vec3(cbLight._m0[_2057 + 2u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2166 = _2165 * _2165;
        float _4357 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2167 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2168 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2141 = (((cbLight._m0[_2149].x * 0.3183098733425140380859375) * _2167) * _2168) + _2122;
        _2143 = (((cbLight._m0[_2149].y * 0.3183098733425140380859375) * _2167) * _2168) + _2123;
        _2145 = (((cbLight._m0[_2149].z * 0.3183098733425140380859375) * _2167) * _2168) + _2124;
    }
    bool _2148 = _2128.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2148)
    {
        _2186 = _2141;
        _2188 = _2143;
        _2190 = _2145;
    }
    else
    {
        uint _2356 = _2057 + 7u;
        float _2372 = (dot(vec3(cbLight._m0[_2057 + 3u].xyz), vec3(_808, _809, _810)) * 0.5) + 0.5;
        float _2373 = _2372 * _2372;
        float _4373 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2374 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2375 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2186 = (((cbLight._m0[_2356].x * 0.3183098733425140380859375) * _2374) * _2375) + _2141;
        _2188 = (((cbLight._m0[_2356].y * 0.3183098733425140380859375) * _2374) * _2375) + _2143;
        _2190 = (((cbLight._m0[_2356].z * 0.3183098733425140380859375) * _2374) * _2375) + _2145;
    }
    uint _2193 = _2057 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2057].w)) * _811) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_2057].x + _888;
    float _2209 = cbLight._m0[_2057].y + _889;
    float _2210 = cbLight._m0[_2057].z + _890;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2057].xyz));
    float _4389 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _2222 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2223 = dot(vec3(_808, _809, _810), vec3(_2215, _2216, _2217));
    float _4411 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_2057].xyz), vec3(_2215, _2216, _2217));
    float _4422 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2243 = exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0);
    float _2244 = 0.959999978542327880859375 - _967;
    float _2246 = 0.959999978542327880859375 - _968;
    float _2247 = 0.959999978542327880859375 - _969;
    float _2254 = 1.0 - _2207;
    float _2265 = (0.5 / (((_2222 * ((_2221 * _2254) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2254) + _2207) * _2221))) * _2221;
    float _4433 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2267 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2278 = _2057 + 9u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2094].w)) * _811) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2094].x + _888;
    float _2292 = cbLight._m0[_2094].y + _889;
    float _2293 = cbLight._m0[_2094].z + _890;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2094].xyz));
    float _4444 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
    float _2305 = dot(vec3(_808, _809, _810), vec3(_2298, _2299, _2300));
    float _4455 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
    float _2309 = dot(vec3(cbLight._m0[_2094].xyz), vec3(_2298, _2299, _2300));
    float _4466 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2313 = _2290 * _2290;
    float _2317 = ((_2308 * _2308) * (_2313 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0);
    float _2331 = 1.0 - _2290;
    float _2341 = (0.5 / (((_2222 * ((_2304 * _2331) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2331) + _2290) * _2304))) * _2304;
    float _4477 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2343 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2313 / ((_2317 * _2317) * 3.141590118408203125));
    float _2353 = (((((_2324 * _2244) + _970) * cbLight._m0[_2278].x) * _2343) * _2080) + (((((_2243 * _2244) + _970) * cbLight._m0[_2193].x) * _2267) * _2090);
    float _2354 = (((((_2324 * _2246) + _972) * cbLight._m0[_2278].y) * _2343) * _2080) + (((((_2243 * _2246) + _972) * cbLight._m0[_2193].y) * _2267) * _2090);
    float _2355 = (((((_2324 * _2247) + _973) * cbLight._m0[_2278].z) * _2343) * _2080) + (((((_2243 * _2247) + _973) * cbLight._m0[_2193].z) * _2267) * _2090);
    float _2417;
    float _2419;
    float _2421;
    if (_2130)
    {
        _2417 = _2353;
        _2419 = _2354;
        _2421 = _2355;
    }
    else
    {
        uint _2423 = _2057 + 2u;
        uint _2427 = _2057 + 10u;
        float _2441 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2423].w)) * _811) * 0.949999988079071044921875);
        float _2442 = _2441 * _2441;
        float _2443 = cbLight._m0[_2423].x + _888;
        float _2444 = cbLight._m0[_2423].y + _889;
        float _2445 = cbLight._m0[_2423].z + _890;
        float _2449 = inversesqrt(dot(vec3(_2443, _2444, _2445), vec3(_2443, _2444, _2445)));
        float _2450 = _2449 * _2443;
        float _2451 = _2449 * _2444;
        float _2452 = _2449 * _2445;
        float _2453 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2423].xyz));
        float _4488 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _2457 = dot(vec3(_808, _809, _810), vec3(_2450, _2451, _2452));
        float _4499 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2461 = dot(vec3(cbLight._m0[_2423].xyz), vec3(_2450, _2451, _2452));
        float _4510 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2465 = _2442 * _2442;
        float _2469 = ((_2460 * _2460) * (_2465 + (-1.0))) + 1.0;
        float _2476 = exp2(log2(1.0 - (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) * 5.0);
        float _2483 = 1.0 - _2442;
        float _2493 = (0.5 / (((_2222 * ((_2456 * _2483) + _2442)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2483) + _2442) * _2456))) * _2456;
        float _4521 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2495 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * (_2465 / ((_2469 * _2469) * 3.141590118408203125));
        float _2496 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
        _2417 = (((((_2476 * _2244) + _970) * cbLight._m0[_2427].x) * _2495) * _2496) + _2353;
        _2419 = (((((_2476 * _2246) + _972) * cbLight._m0[_2427].y) * _2495) * _2496) + _2354;
        _2421 = (((((_2476 * _2247) + _973) * cbLight._m0[_2427].z) * _2495) * _2496) + _2355;
    }
    float _2531;
    float _2533;
    float _2535;
    if (_2148)
    {
        _2531 = _2417;
        _2533 = _2419;
        _2535 = _2421;
    }
    else
    {
        uint _2542 = _2057 + 3u;
        uint _2546 = _2057 + 11u;
        float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2542].w)) * _811) * 0.949999988079071044921875);
        float _2561 = _2560 * _2560;
        float _2562 = cbLight._m0[_2542].x + _888;
        float _2563 = cbLight._m0[_2542].y + _889;
        float _2564 = cbLight._m0[_2542].z + _890;
        float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
        float _2569 = _2568 * _2562;
        float _2570 = _2568 * _2563;
        float _2571 = _2568 * _2564;
        float _2572 = dot(vec3(_808, _809, _810), vec3(cbLight._m0[_2542].xyz));
        float _4537 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2575 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _2576 = dot(vec3(_808, _809, _810), vec3(_2569, _2570, _2571));
        float _4548 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _2580 = dot(vec3(cbLight._m0[_2542].xyz), vec3(_2569, _2570, _2571));
        float _4559 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2584 = _2561 * _2561;
        float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
        float _2595 = exp2(log2(1.0 - (isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0)))) * 5.0);
        float _2602 = 1.0 - _2561;
        float _2612 = (0.5 / (((_2222 * ((_2575 * _2602) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2602) + _2561) * _2575))) * _2575;
        float _4570 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2614 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
        float _2615 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2531 = (((((_2595 * _2244) + _970) * cbLight._m0[_2546].x) * _2614) * _2615) + _2417;
        _2533 = (((((_2595 * _2246) + _972) * cbLight._m0[_2546].y) * _2614) * _2615) + _2419;
        _2535 = (((((_2595 * _2247) + _973) * cbLight._m0[_2546].z) * _2614) * _2615) + _2421;
    }
    float _2750;
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    if (_2055.y == 0u)
    {
        float _2690 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2691 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2690;
        float _2692 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2690;
        float _2693 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2690;
        uvec4 _2705 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2706 = _2705.x;
        uint _2717 = uint((float(_2705.y) * floor(float(uint(cbSceneParam._m0[85u].y * _909) / _2706))) + floor(float(uint(cbSceneParam._m0[85u].x * _908) / _2706)));
        float _2727 = (log2(_2693 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2728 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        uint _2731 = uint(isnan(14.0) ? _2728 : (isnan(_2728) ? 14.0 : min(_2728, 14.0)));
        uvec4 _2736 = texelFetch(g_lightClusterGridBuffer, int(((_2731 << 2u) + (_2717 << 6u)) >> 2u));
        uint _2737 = _2736.x;
        uint _2738 = _2705.z;
        float _2838;
        float _2840;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        if (((((1u << ((_2738 >> 4u) & 15u)) + 4294967295u) & _2737) == 0u) || ((_2738 & 240u) == 0u))
        {
            _2838 = 0.0;
            _2840 = 0.0;
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
        }
        else
        {
            float _2839;
            float _2841;
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2991 = 0.0;
            float _2992 = 0.0;
            float _2993 = 0.0;
            float _2994 = 0.0;
            float _2995 = 0.0;
            float _2996 = 0.0;
            uint _2997 = 0u;
            uint _3006;
            bool _3007;
            for (;;)
            {
                _3006 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                _3007 = _3006 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3007)
                {
                    frontier_phi_66_pred = _2991;
                    frontier_phi_66_pred_1 = _2996;
                    frontier_phi_66_pred_2 = _2995;
                    frontier_phi_66_pred_3 = _2994;
                    frontier_phi_66_pred_4 = _2993;
                    frontier_phi_66_pred_5 = _2992;
                }
                else
                {
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    float _3141;
                    uint _3142;
                    _3136 = _2991;
                    _3137 = _2992;
                    _3138 = _2993;
                    _3139 = _2994;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _3006;
                    float _3063;
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    for (;;)
                    {
                        uint _3146 = uint(findLSB(_3142)) + (_2997 << 5u);
                        uint _3143 = (_3142 + 4294967295u) & _3142;
                        uint _3148 = _3146 * 48u;
                        vec4 _3162 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 3u)).x));
                        uint _3168 = (_3146 * 48u) + 4u;
                        vec4 _3181 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3168)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3168 + 3u)).x));
                        uint _3187 = (_3146 * 48u) + 8u;
                        vec3 _3198 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x));
                        float _3202 = _3162.x - _2691;
                        float _3203 = _3162.y - _2692;
                        float _3204 = _3162.z - _2693;
                        float _3205 = dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204));
                        float _3208 = inversesqrt(_3205);
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3212 = dot(vec3(_927, _930, _933), vec3(_3209, _3210, _3211));
                        float _3217 = 1.0 - (_3205 * _3162.w);
                        float _4596 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0));
                        float _3218 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                        float _3219 = sqrt(_3205) * _3181.w;
                        float _3222 = 1.39999997615814208984375 / (_3219 + 1.39999997615814208984375);
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3212) + _3223;
                        float _3229 = _3219 * _3219;
                        float _3233 = ((isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0))) * _3218) / ((_3229 * 0.699999988079071044921875) + 1.0);
                        float _3237 = (-0.0) - _2691;
                        float _3238 = (-0.0) - _2692;
                        float _3239 = (-0.0) - _2693;
                        float _3243 = inversesqrt(dot(vec3(_3237, _3238, _3239), vec3(_3237, _3238, _3239)));
                        float _3244 = _3243 * _3237;
                        float _3245 = _3243 * _3238;
                        float _3246 = _3243 * _3239;
                        float _3254 = exp2(log2(1.0 / ((_3229 * 3.5) + 5.0)) * 0.25);
                        float _3255 = 1.0 - _1002;
                        float _3262 = sqrt(1.0 - ((1.0 - (_3255 * _3255)) * (1.0 - (_3254 * _3254))));
                        float _3263 = _3262 * _3262;
                        float _3264 = _3263 * _3263;
                        float _3265 = _3244 + _3209;
                        float _3266 = _3245 + _3210;
                        float _3267 = _3246 + _3211;
                        float _3271 = inversesqrt(dot(vec3(_3265, _3266, _3267), vec3(_3265, _3266, _3267)));
                        float _3275 = dot(vec3(_927, _930, _933), vec3(_3244, _3245, _3246));
                        float _4612 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                        float _3278 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                        float _3279 = dot(vec3(_927, _930, _933), vec3(_3271 * _3265, _3271 * _3266, _3271 * _3267));
                        float _4623 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3286 = ((_3282 * _3282) * (_3264 + (-1.0))) + 1.0;
                        float _3287 = _3222 * _3263;
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3212) + _3288;
                        float _4634 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
                        float _3292 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
                        float _3293 = 1.0 - _3263;
                        float _3303 = (0.5 / (((_3292 * ((_3278 * _3293) + _3263)) + 9.9999999392252902907785028219223e-09) + (((_3292 * _3293) + _3263) * _3278))) * _3292;
                        float _4645 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                        float _3314 = (((_3264 * 3.1415927410125732421875) * (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) / ((_3286 * _3286) * ((_3229 * 2.1991131305694580078125) + 3.141590118408203125))) * _3218;
                        _3066 = (_3233 * _3181.x) + _3139;
                        _3067 = (_3233 * _3181.y) + _3140;
                        _3068 = (_3233 * _3181.z) + _3141;
                        _3063 = (_3314 * _3198.x) + _3136;
                        _3064 = (_3314 * _3198.y) + _3137;
                        _3065 = (_3314 * _3198.z) + _3138;
                        if (_3143 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3136 = _3063;
                            _3137 = _3064;
                            _3138 = _3065;
                            _3139 = _3066;
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3143;
                        }
                    }
                    frontier_phi_66_pred = _3063;
                    frontier_phi_66_pred_1 = _3068;
                    frontier_phi_66_pred_2 = _3067;
                    frontier_phi_66_pred_3 = _3066;
                    frontier_phi_66_pred_4 = _3065;
                    frontier_phi_66_pred_5 = _3064;
                }
                _2839 = frontier_phi_66_pred;
                _2849 = frontier_phi_66_pred_1;
                _2847 = frontier_phi_66_pred_2;
                _2845 = frontier_phi_66_pred_3;
                _2843 = frontier_phi_66_pred_4;
                _2841 = frontier_phi_66_pred_5;
                uint _2998 = _2997 + 1u;
                if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2991 = _2839;
                    _2992 = _2841;
                    _2993 = _2843;
                    _2994 = _2845;
                    _2995 = _2847;
                    _2996 = _2849;
                    _2997 = _2998;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2838 = _2839;
            _2840 = _2841;
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
        }
        uvec4 _2852 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2853 = _2852.z;
        uint _2855 = (_2853 >> 8u) & 15u;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        if (((4294967295u << _2855) & _2737) == 0u)
        {
            _2959 = _2838;
            _2961 = _2840;
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
        }
        else
        {
            float _2984 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
            float _2985 = _2984 * _2691;
            float _2986 = _2984 * _2692;
            float _2987 = _2984 * _2693;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2855 < ((_2853 >> 12u) & 15u))
            {
                float _2960;
                float _2962;
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _3119 = _2838;
                float _3120 = _2840;
                float _3121 = _2842;
                float _3122 = _2844;
                float _3123 = _2846;
                float _3124 = _2848;
                uint _3125 = _2855;
                uint _3134;
                bool _3135;
                for (;;)
                {
                    _3134 = texelFetch(g_lightClassification, int((((_2731 << 5u) + (_2717 << 9u)) + (_3125 << 2u)) >> 2u)).x;
                    _3135 = _3134 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3135)
                    {
                        frontier_phi_77_pred = _3124;
                        frontier_phi_77_pred_1 = _3123;
                        frontier_phi_77_pred_2 = _3122;
                        frontier_phi_77_pred_3 = _3121;
                        frontier_phi_77_pred_4 = _3120;
                        frontier_phi_77_pred_5 = _3119;
                    }
                    else
                    {
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3621;
                        float _3622;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3341 = _3119;
                        float _3342 = _3120;
                        float _3343 = _3121;
                        float _3344 = _3122;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        uint _3347 = _3134;
                        uint _3348;
                        vec4 _3373;
                        float _3374;
                        vec4 _3389;
                        vec3 _3401;
                        vec4 _3416;
                        vec4 _3431;
                        float _3477;
                        bool _3478;
                        for (;;)
                        {
                            uint _3358 = ((_3125 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3347));
                            _3348 = (_3347 + 4294967295u) & _3347;
                            uint _3360 = _3358 * 40u;
                            _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            _3374 = _3373.w;
                            uint _3376 = (_3358 * 40u) + 4u;
                            _3389 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 3u)).x));
                            uint _3391 = (_3358 * 40u) + 8u;
                            _3401 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x));
                            uint _3403 = (_3358 * 40u) + 16u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3418 = (_3358 * 40u) + 20u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            uint _3433 = (_3358 * 40u) + 24u;
                            vec4 _3446 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3433)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3433 + 3u)).x));
                            uint _3452 = (_3358 * 40u) + 28u;
                            vec4 _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            _3477 = fma(_2693, _3465.z, fma(_2692, _3465.y, _3465.x * _2691)) + _3465.w;
                            _3478 = !((fma(_2693, _3446.z, fma(_2692, _3446.y, _3446.x * _2691)) + _3446.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3478)
                            {
                                float _3505 = _3373.x - _2691;
                                float _3506 = _3373.y - _2692;
                                float _3507 = _3373.z - _2693;
                                float _3508 = dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507));
                                float _3511 = inversesqrt(_3508);
                                float _3512 = _3511 * _3505;
                                float _3513 = _3511 * _3506;
                                float _3514 = _3511 * _3507;
                                float _3518 = 1.0 - (_3508 / (_3374 * _3374));
                                float _4656 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3519 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
                                float _3523 = sqrt(_3508) * _3389.w;
                                float _3525 = 1.39999997615814208984375 / (_3523 + 1.39999997615814208984375);
                                float _3526 = _3525 * _3525;
                                float _3529 = ((1.0 - _3526) * dot(vec3(_3512, _3513, _3514), vec3(_927, _930, _933))) + _3526;
                                float _3532 = _3523 * _3523;
                                float _3536 = (fma(_2693, _3416.z, fma(_2692, _3416.y, _3416.x * _2691)) + _3416.w) / _3477;
                                float _3537 = (fma(_2693, _3431.z, fma(_2692, _3431.y, _3431.x * _2691)) + _3431.w) / _3477;
                                float _3541 = 1.0 - dot(vec2(_3536, _3537), vec2(_3536, _3537));
                                float _4672 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                                float _3542 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
                                float _3543 = _3542 * (((isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0))) * _3519) / ((_3532 * 0.699999988079071044921875) + 1.0));
                                float _3555 = exp2(log2(1.0 / ((_3532 * 3.5) + 5.0)) * 0.25);
                                float _3556 = 1.0 - _1002;
                                float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                                float _3564 = _3563 * _3563;
                                float _3565 = _3564 * _3564;
                                float _3566 = _3512 - _2985;
                                float _3567 = _3513 - _2986;
                                float _3568 = _3514 - _2987;
                                float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                                float _3576 = dot(vec3(_927, _930, _933), vec3((-0.0) - _2985, (-0.0) - _2986, (-0.0) - _2987));
                                float _4683 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3579 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3580 = dot(vec3(_927, _930, _933), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                                float _4694 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                                float _3583 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
                                float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                                float _3588 = _3525 * _3564;
                                float _3589 = _3588 * _3588;
                                float _3595 = ((1.0 - _3589) * dot(vec3(_927, _930, _933), vec3(_3512, _3513, _3514))) + _3589;
                                float _4705 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                                float _3596 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
                                float _3597 = 1.0 - _3564;
                                float _3607 = (0.5 / (((_3596 * ((_3579 * _3597) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3596 * _3597) + _3564) * _3579))) * _3596;
                                float _4716 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3617 = (_3542 * _3519) * (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0)))) / ((_3587 * _3587) * ((_3532 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3543 * _3389.y;
                                frontier_phi_83_pred_1 = _3543 * _3389.x;
                                frontier_phi_83_pred_2 = _3617 * _3401.z;
                                frontier_phi_83_pred_3 = _3617 * _3401.y;
                                frontier_phi_83_pred_4 = _3617 * _3401.x;
                                frontier_phi_83_pred_5 = _3543 * _3389.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3625 = frontier_phi_83_pred;
                            _3624 = frontier_phi_83_pred_1;
                            _3623 = frontier_phi_83_pred_2;
                            _3622 = frontier_phi_83_pred_3;
                            _3621 = frontier_phi_83_pred_4;
                            _3626 = frontier_phi_83_pred_5;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            _3333 = _3626 + _3346;
                            _3328 = _3621 + _3341;
                            _3329 = _3622 + _3342;
                            _3330 = _3623 + _3343;
                            if (_3348 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3341 = _3328;
                                _3342 = _3329;
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3348;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3333;
                        frontier_phi_77_pred_1 = _3332;
                        frontier_phi_77_pred_2 = _3331;
                        frontier_phi_77_pred_3 = _3330;
                        frontier_phi_77_pred_4 = _3329;
                        frontier_phi_77_pred_5 = _3328;
                    }
                    _2970 = frontier_phi_77_pred;
                    _2968 = frontier_phi_77_pred_1;
                    _2966 = frontier_phi_77_pred_2;
                    _2964 = frontier_phi_77_pred_3;
                    _2962 = frontier_phi_77_pred_4;
                    _2960 = frontier_phi_77_pred_5;
                    uint _3126 = _3125 + 1u;
                    if (_3126 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3119 = _2960;
                        _3120 = _2962;
                        _3121 = _2964;
                        _3122 = _2966;
                        _3123 = _2968;
                        _3124 = _2970;
                        _3125 = _3126;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2964;
                frontier_phi_58_59_ladder_1 = _2970;
                frontier_phi_58_59_ladder_2 = _2968;
                frontier_phi_58_59_ladder_3 = _2966;
                frontier_phi_58_59_ladder_4 = _2962;
                frontier_phi_58_59_ladder_5 = _2960;
            }
            else
            {
                frontier_phi_58_59_ladder = _2842;
                frontier_phi_58_59_ladder_1 = _2848;
                frontier_phi_58_59_ladder_2 = _2846;
                frontier_phi_58_59_ladder_3 = _2844;
                frontier_phi_58_59_ladder_4 = _2840;
                frontier_phi_58_59_ladder_5 = _2838;
            }
            _2959 = frontier_phi_58_59_ladder_5;
            _2961 = frontier_phi_58_59_ladder_4;
            _2963 = frontier_phi_58_59_ladder;
            _2965 = frontier_phi_58_59_ladder_3;
            _2967 = frontier_phi_58_59_ladder_2;
            _2969 = frontier_phi_58_59_ladder_1;
        }
        float _2974 = isnan(1.0) ? _986 : (isnan(_986) ? 1.0 : min(_986, 1.0));
        _2750 = (_2974 * _2965) + _2186;
        _2752 = (_2974 * _2967) + _2188;
        _2754 = (_2974 * _2969) + _2190;
        _2756 = ((_2959 * _970) * _2974) + _2531;
        _2758 = ((_2961 * _972) * _2974) + _2533;
        _2760 = ((_2963 * _973) * _2974) + _2535;
    }
    else
    {
        _2750 = _2186;
        _2752 = _2188;
        _2754 = _2190;
        _2756 = _2531;
        _2758 = _2533;
        _2760 = _2535;
    }
    float _4732 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4743 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _4754 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _2777 = ((isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2750 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _986))) + ((_2756 + ((isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _2778 = ((isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0))) * (_2752 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _986))) + ((_2758 + ((isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    float _2779 = ((isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2754 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _986))) + ((_2760 + ((isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))) * _1824)) * cbPerFrame._m0[3u].x);
    uint _2780 = _250 + 6u;
    float _2788 = _908 / cbSceneParam._m0[86u].x;
    float _2789 = _909 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _830 : (isnan(_830) ? cbSceneParam._m0[77u].w : min(_830, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    if (_830 > cbSceneParam._m0[78u].w)
    {
        float _2863 = isnan(_830) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _830 : min(cbSceneParam._m0[80u].w, _830));
        float _2864 = _2863 / _830;
        float _2875 = _2864 * _881;
        float _2876 = _882 * _2864;
        float _2877 = (-0.0) - _2876;
        float _2879 = _2864 * _883;
        float _2881 = (cbSceneParam._m0[77u].w * _2877) / _2863;
        float _2882 = _2881 + cbSceneParam._m0[79u].w;
        float _2883 = cbSceneParam._m0[79u].w - _2876;
        float _2889 = sqrt(((_2875 * _2875) + (_2876 * _2876)) + (_2879 * _2879));
        float _2892 = (1.0 - (cbSceneParam._m0[77u].w / _2863)) * _2889;
        float _2897 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2899 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3076;
        if (abs((_2877 - _2881) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3076 = ((((_2882 > 0.0) ? exp2(_2897 * _2882) : (2.0 - exp2(_2899 * _2882))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2892;
        }
        else
        {
            float _3020 = 1.0 / cbSceneParam._m0[80u].x;
            float _3021 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : max(_2882, _2883));
            float _3022 = isnan(_2883) ? _2882 : (isnan(_2882) ? _2883 : min(_2882, _2883));
            float _3031 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : min(_3021, 0.0));
            float _3032 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : min(_3022, 0.0));
            _3076 = ((abs(_2889 / _2877) * cbSceneParam._m0[80u].y) * ((((_3031 - _3032) * 2.0) - ((exp2(_2897 * (isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0)))) - exp2(_2897 * (isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0))))) * _3020)) - ((exp2(_2899 * _3031) - exp2(_2899 * _3032)) * _3020))) + (_2892 * cbSceneParam._m0[80u].z);
        }
        vec4 _3078 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3087 = exp2((_3076 * (-1.44269502162933349609375)) * (1.0 - _3078.w));
        float _3088 = log2(_3087);
        float _3104 = log2(_2808);
        _2901 = (exp2(_3104 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].x)) * _3078.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2903 = (exp2(_3104 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].y)) * _3078.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2905 = (exp2(_3104 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3088 * cbSceneParam._m0[78u].z)) * _3078.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2907 = _3087 * _2808;
    }
    else
    {
        _2901 = _2805;
        _2903 = _2806;
        _2905 = _2807;
        _2907 = _2808;
    }
    bool _3114;
    vec4 _2917;
    vec4 _2939;
    float _2941;
    float _2945;
    float _2946;
    float _2947;
    float _2948;
    bool _2958;
    for (;;)
    {
        _2917 = cbMatDynParam._m0[0u];
        float _2919 = roundEven(_2917.y);
        bool _2920 = _2919 == 3.0;
        float _2921 = log2(_2907);
        float _2928 = exp2(_2921 * cbSceneParam._m0[78u].x) * _2777;
        float _2929 = exp2(_2921 * cbSceneParam._m0[78u].y) * _2778;
        float _2930 = exp2(_2921 * cbSceneParam._m0[78u].z) * _2779;
        float _2937 = _897 + (-0.5);
        _2939 = cbMtdParam._m0[1u];
        _2941 = _2939.y * _2937;
        float _2944 = (_2919 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2945 = _2944 * (_2920 ? _2928 : (_2928 + (cbSceneParam._m0[72u].w * _2901)));
        _2946 = _2944 * (_2920 ? _2929 : (_2929 + (cbSceneParam._m0[72u].w * _2903)));
        _2947 = _2944 * (_2920 ? _2930 : (_2930 + (cbSceneParam._m0[72u].w * _2905)));
        _2948 = _2937 * 0.999000012874603271484375;
        _2958 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2958)
        {
            if ((cbInstanceData._m0[_250 + 7u].x + _2948) < 0.5)
            {
                _3114 = true;
                break;
            }
        }
        uint _3055 = _946 + uint(_2917.w);
        if ((cbInstanceData._m0[_3055].w < 1.0) && ((cbInstanceData._m0[_3055].w + _2948) < 0.5))
        {
            _3114 = true;
            break;
        }
        if ((_2941 + 1.0) < _2939.x)
        {
            _3114 = true;
            break;
        }
        _3114 = false;
        break;
    }
    float _3319;
    if (_3114)
    {
        discard_state = true;
        _3319 = 0.0;
    }
    else
    {
        _3319 = cbInstanceData._m0[_2780].w;
    }
    SV_Target.x = _2945;
    SV_Target.y = _2946;
    SV_Target.z = _2947;
    SV_Target.w = _3319;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
    discard_exit();
}


