#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1505;
float _3884;
float _3885;
float _3886;
float _3887;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _271 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _274 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3896 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _3907 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _3918 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    uint _284 = uint(roundEven(NORMAL.w)) * 13u;
    uint _289 = _284 + 1u;
    uint _293 = _284 + 2u;
    float _302 = sqrt(((cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x) + (cbInstanceData._m0[_284].x * cbInstanceData._m0[_284].x)) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x));
    float _303 = _302 * TEXCOORD.z;
    float _304 = _302 * TEXCOORD.w;
    vec4 _317 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _303) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _304) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _371 = _366.x * cbMtdParam._m0[11u].x;
    float _372 = _366.y * cbMtdParam._m0[11u].y;
    float _373 = _366.z * cbMtdParam._m0[11u].z;
    vec4 _392 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _303) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _304) + cbTextureTilingScale._m0[5u].w));
    vec4 _411 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _446 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _448 = _446.x;
    float _460 = dot(vec4(_448, _446.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _477 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _411.x) * 2.0) - ((((_448 - _460) * cbMtdParam._m0[23u].w) + _460) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _478 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _485 = (_478 * ((_392.x * cbMtdParam._m0[12u].x) - _371)) + _371;
    float _486 = (_478 * ((_392.y * cbMtdParam._m0[12u].y) - _372)) + _372;
    float _487 = (_478 * ((_392.z * cbMtdParam._m0[12u].z) - _373)) + _373;
    vec4 _504 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _303) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _304) + cbTextureTilingScale._m0[3u].w));
    vec4 _524 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _526 = _524.x;
    float _536 = dot(vec4(_526, _524.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _550 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _411.y) * 2.0) - ((((_526 - _536) * cbMtdParam._m0[23u].w) + _536) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3940 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _558 = (_551 * ((_504.x * cbMtdParam._m0[13u].x) - _485)) + _485;
    float _559 = (_551 * ((_504.y * cbMtdParam._m0[13u].y) - _486)) + _486;
    float _560 = (_551 * ((_504.z * cbMtdParam._m0[13u].z) - _487)) + _487;
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _303) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _304) + cbTextureTilingScale._m0[24u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _598 = _596.x;
    float _608 = dot(vec4(_598, _596.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _620 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _411.z) * 2.0) - ((((_598 - _608) * cbMtdParam._m0[23u].w) + _608) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3951 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _631 = (_340.x * cbMtdParam._m0[9u].x) * ((_621 * ((_579.x * cbMtdParam._m0[14u].x) - _558)) + _558);
    float _632 = (_340.y * cbMtdParam._m0[9u].y) * ((_621 * ((_579.y * cbMtdParam._m0[14u].y) - _559)) + _559);
    float _633 = (_340.z * cbMtdParam._m0[9u].z) * ((_621 * ((_579.z * cbMtdParam._m0[14u].z) - _560)) + _560);
    float _637 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _317.x) * _631;
    float _640 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _317.y) * _632;
    float _643 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _317.z) * _633;
    float _651 = (((_631 - _637) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _637) * 4.55000019073486328125;
    float _653 = (((_632 - _640) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _640) * 4.55000019073486328125;
    float _655 = (((_633 - _643) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _643) * 4.55000019073486328125;
    vec4 _667 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _303) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _304) + cbTextureTilingScale._m0[20u].w));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _303) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _304) + cbTextureTilingScale._m0[4u].w));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _709 = _707.x;
    float _710 = _707.y;
    float _711 = _707.z;
    float _718 = ((_690.x - _709) * _478) + _709;
    float _719 = ((_690.y - _710) * _478) + _710;
    float _720 = ((_690.z - _711) * _478) + _711;
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _303) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _304) + cbTextureTilingScale._m0[2u].w));
    float _743 = ((_732.x - _718) * _551) + _718;
    float _744 = ((_732.y - _719) * _551) + _719;
    float _745 = ((_732.z - _720) * _551) + _720;
    vec4 _757 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _303) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _304) + cbTextureTilingScale._m0[23u].w));
    float _770 = ((_757.z - _745) * _621) + _745;
    float _773 = ((((_757.x - _743) * _621) + _743) * 2.0) + (-1.0);
    float _774 = ((((_757.y - _744) * _621) + _744) * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3962 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _800 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _812 = (_773 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_667.x * 2.0) + (-1.0)))) + (((_800.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _813 = (_774 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_667.y * 2.0) + (-1.0)))) + (((_800.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _839 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _841 = _839.x;
    float _858 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _303) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _304) + cbTextureTilingScale._m0[9u].w)).x - _841) * _478) + _841;
    float _876 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _303) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _304) + cbTextureTilingScale._m0[21u].w)).x - _858) * _551) + _858;
    float _894 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _303) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _304) + cbTextureTilingScale._m0[10u].w)).x - _876) * _621) + _876;
    float _898 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _894) * cbMtdParam._m0[19u].z) + _894;
    float _903 = (((_667.z - _770) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _770;
    float _907 = ((_800.z - _903) * cbMtdParam._m0[19u].w) + _903;
    float _911 = cbMtdParam._m0[22u].x + _800.w;
    float _914 = fma(_780, _250 * NORMAL.x, fma(_813, _257 * TANGENT.x, (_243 * _235) * _812));
    float _917 = fma(_780, _250 * NORMAL.y, fma(_813, _257 * TANGENT.y, (_243 * _236) * _812));
    float _920 = fma(_780, _250 * NORMAL.z, fma(_813, _257 * TANGENT.z, (_243 * _237) * _812));
    float _924 = inversesqrt(dot(vec3(_914, _917, _920), vec3(_914, _917, _920)));
    float _925 = _924 * _914;
    float _926 = _924 * _917;
    float _927 = _924 * _920;
    float _3973 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _928 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _3984 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _3995 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _4006 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _4017 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4028 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _933 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
    float _947 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _997 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _987);
    float _998 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _987);
    float _999 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _987);
    float _1003 = inversesqrt(dot(vec3(_997, _998, _999), vec3(_997, _998, _999)));
    float _1004 = _997 * _1003;
    float _1005 = _998 * _1003;
    float _1006 = _999 * _1003;
    vec4 _1011 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1013 = _1011.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1185 = sqrt(((_997 * _997) + (_998 * _998)) + (_999 * _999));
        float _1191 = (cbMatDynParam._m0[5u].x * _1185) + cbMatDynParam._m0[5u].y;
        float _4039 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
        float _1196 = (cbMatDynParam._m0[5u].z * _1185) + cbMatDynParam._m0[5u].w;
        float _4050 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) - _1192)) + _1192) < ((_1013 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1024 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1025 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1043 = fma(_927, cbSceneParam._m0[5u].z, fma(_926, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _925));
    float _1046 = fma(_927, cbSceneParam._m0[6u].z, fma(_926, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _925));
    float _1049 = fma(_927, cbSceneParam._m0[7u].z, fma(_926, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _925));
    uint _1062 = _284 + 9u;
    uint _1063 = _1062 + uint(cbMatDynParam._m0[0u].w);
    float _1069 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * cbInstanceData._m0[_1063].x;
    float _1070 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1063].y;
    float _1071 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1063].z;
    float _4061 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1072 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1073 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1074 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1075 = 1.0 - _933;
    float _1076 = _1072 * _1075;
    float _1077 = _1073 * _1075;
    float _1078 = _1074 * _1075;
    float _1083 = (_1072 + (-0.039999999105930328369140625)) * _933;
    float _1084 = (_1073 + (-0.039999999105930328369140625)) * _933;
    float _1085 = (_1074 + (-0.039999999105930328369140625)) * _933;
    float _1086 = _1083 + 0.039999999105930328369140625;
    float _1088 = _1084 + 0.039999999105930328369140625;
    float _1089 = _1085 + 0.039999999105930328369140625;
    vec4 _1098 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1024, cbSceneParam._m0[86u].y * _1025));
    float _1102 = ((isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * TEXCOORD_5.w) * _1098.x;
    float _1103 = dot(vec3(_925, _926, _927), vec3(_1004, _1005, _1006));
    float _1106 = _1103 * 2.0;
    float _1110 = (_1106 * _925) - _1004;
    float _1111 = (_1106 * _926) - _1005;
    float _1112 = (_1106 * _927) - _1006;
    float _1116 = abs(dot(vec3(_1004, _1005, _1006), vec3(_925, _926, _927)));
    float _4094 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
    float _1118 = sqrt(_928);
    float _1131 = exp2((_1118 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1118 * 3.0));
    float _1137 = (1.0 - _1131) * ((_1118 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1138 = _1131 * _1118;
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1174 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1504;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1229 = fma(_1174, cbModelParam._m0[26u].z, fma(_1170, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1166));
        float _1233 = fma(_1174, cbModelParam._m0[27u].z, fma(_1170, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1166));
        float _1237 = fma(_1174, cbModelParam._m0[28u].z, fma(_1170, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1166));
        float _1262 = _1166 + _925;
        float _1263 = _1170 + _926;
        float _1264 = _1174 + _927;
        float _1274 = fma(_1264, cbModelParam._m0[26u].z, fma(_1263, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1262)) - _1229;
        float _1275 = fma(_1264, cbModelParam._m0[27u].z, fma(_1263, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1262)) - _1233;
        float _1276 = fma(_1264, cbModelParam._m0[28u].z, fma(_1263, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1262)) - _1237;
        float _1280 = inversesqrt(dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276)));
        float _1293 = ((_1280 * _1274) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1229 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1294 = ((_1280 * _1275) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1233 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1295 = ((_1280 * _1276) / cbModelParam._m0[34u].z) + ((((((_1237 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1293, _1294, _1295), 0.0);
        float _1332 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1298.x + (-0.5));
        float _1334 = _1332 * (_1298.y + (-0.5));
        float _1335 = _1332 * (_1298.z + (-0.5));
        float _1342 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1305.x + (-0.5));
        float _1344 = _1342 * (_1305.y + (-0.5));
        float _1345 = _1342 * (_1305.z + (-0.5));
        float _1352 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1312.x + (-0.5));
        float _1354 = _1352 * (_1312.y + (-0.5));
        float _1355 = _1352 * (_1312.z + (-0.5));
        float _1362 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1363 = _1362 * (_1319.x + (-0.5));
        float _1364 = _1362 * (_1319.y + (-0.5));
        float _1365 = _1362 * (_1319.z + (-0.5));
        float _1366 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1367 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1368 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1369 = _1333 * 0.5;
        float _1370 = _1343 * 0.5;
        float _1371 = _1353 * 0.5;
        float _1372 = dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371));
        float _1377 = (_1372 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1372);
        float _1386 = (dot(vec3(_925, _926, _927), vec3(_1377 * _1369, _1377 * _1370, _1377 * _1371)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1396 = sqrt(((_1370 * _1370) + (_1369 * _1369)) + (_1371 * _1371)) / (_1366 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4142 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1398 + 1.0))) + _1403) * _1366;
        float _1413 = _1334 * 0.5;
        float _1414 = _1344 * 0.5;
        float _1415 = _1354 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_925, _926, _927), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1367 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4175 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1440 + 1.0))) + _1445) * _1367;
        float _1455 = _1335 * 0.5;
        float _1456 = _1345 * 0.5;
        float _1457 = _1355 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_925, _926, _927), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1368 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4208 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1482 + 1.0))) + _1487) * _1368;
        _1504 = _1335;
        _1506 = _1334;
        _1507 = _1333;
        _1508 = _1345;
        _1509 = _1344;
        _1510 = _1343;
        _1511 = _1355;
        _1512 = _1354;
        _1513 = _1353;
        _1514 = _1368;
        _1515 = _1367;
        _1516 = _1366;
        _1517 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1518 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1519 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
    }
    else
    {
        _1504 = _1505;
        _1506 = _1505;
        _1507 = _1505;
        _1508 = _1505;
        _1509 = _1505;
        _1510 = _1505;
        _1511 = _1505;
        _1512 = _1505;
        _1513 = _1505;
        _1514 = _1505;
        _1515 = _1505;
        _1516 = _1505;
        _1517 = 0.0;
        _1518 = 0.0;
        _1519 = 0.0;
    }
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1545 = fma(_1174, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166));
        float _1549 = fma(_1174, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166));
        float _1553 = fma(_1174, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166));
        float _1576 = _1166 + _925;
        float _1577 = _1170 + _926;
        float _1578 = _1174 + _927;
        float _1588 = fma(_1578, cbModelParam._m0[30u].z, fma(_1577, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1576)) - _1545;
        float _1589 = fma(_1578, cbModelParam._m0[31u].z, fma(_1577, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1576)) - _1549;
        float _1590 = fma(_1578, cbModelParam._m0[32u].z, fma(_1577, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1576)) - _1553;
        float _1594 = inversesqrt(dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590)));
        float _1607 = ((_1594 * _1588) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1545 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1608 = ((_1594 * _1589) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1549 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1609 = ((_1594 * _1590) / cbModelParam._m0[35u].z) + ((((((_1553 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1607, _1608, _1609), 0.0);
        float _1644 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1645 = _1644 * (_1611.x + (-0.5));
        float _1646 = _1644 * (_1611.y + (-0.5));
        float _1647 = _1644 * (_1611.z + (-0.5));
        float _1654 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1618.x + (-0.5));
        float _1656 = _1654 * (_1618.y + (-0.5));
        float _1657 = _1654 * (_1618.z + (-0.5));
        float _1664 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1625.x + (-0.5));
        float _1666 = _1664 * (_1625.y + (-0.5));
        float _1667 = _1664 * (_1625.z + (-0.5));
        float _1674 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1632.x + (-0.5));
        float _1676 = _1674 * (_1632.y + (-0.5));
        float _1677 = _1674 * (_1632.z + (-0.5));
        float _1678 = isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0));
        float _1679 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1680 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0));
        float _1681 = _1645 * 0.5;
        float _1682 = _1655 * 0.5;
        float _1683 = _1665 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_925, _926, _927), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1678 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4271 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1708 + 1.0))) + _1713) * _1678;
        float _1723 = _1646 * 0.5;
        float _1724 = _1656 * 0.5;
        float _1725 = _1666 * 0.5;
        float _1726 = dot(vec3(_1723, _1724, _1725), vec3(_1723, _1724, _1725));
        float _1731 = (_1726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1726);
        float _1739 = (dot(vec3(_925, _926, _927), vec3(_1731 * _1723, _1731 * _1724, _1731 * _1725)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1748 = sqrt(((_1724 * _1724) + (_1723 * _1723)) + (_1725 * _1725)) / (_1679 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1750 = _1749 * 2.0;
        float _1754 = (1.0 - _1749) / (_1749 + 1.0);
        float _4304 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1764 = ((((1.0 - _1755) * (_1750 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1750 + 1.0))) + _1755) * _1679;
        float _1765 = _1647 * 0.5;
        float _1766 = _1657 * 0.5;
        float _1767 = _1667 * 0.5;
        float _1768 = dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767));
        float _1773 = (_1768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1768);
        float _1781 = (dot(vec3(_925, _926, _927), vec3(_1773 * _1765, _1773 * _1766, _1773 * _1767)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1790 = sqrt(((_1766 * _1766) + (_1765 * _1765)) + (_1767 * _1767)) / (_1680 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1791 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1792 = _1791 * 2.0;
        float _1796 = (1.0 - _1791) / (_1791 + 1.0);
        float _4337 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1797 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1806 = ((((1.0 - _1797) * (_1792 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1792 + 1.0))) + _1797) * _1680;
        _1814 = _1647;
        _1815 = _1646;
        _1816 = _1645;
        _1817 = _1657;
        _1818 = _1656;
        _1819 = _1655;
        _1820 = _1667;
        _1821 = _1666;
        _1822 = _1665;
        _1823 = _1680;
        _1824 = _1679;
        _1825 = _1678;
        _1826 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
        _1827 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)));
        _1828 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    }
    else
    {
        _1814 = _1505;
        _1815 = _1505;
        _1816 = _1505;
        _1817 = _1505;
        _1818 = _1505;
        _1819 = _1505;
        _1820 = _1505;
        _1821 = _1505;
        _1822 = _1505;
        _1823 = _1505;
        _1824 = _1505;
        _1825 = _1505;
        _1826 = 0.0;
        _1827 = 0.0;
        _1828 = 0.0;
    }
    float _1838 = (cbModelParam._m0[1u].x * (_1826 - _1517)) + _1517;
    float _1839 = (cbModelParam._m0[1u].x * (_1827 - _1518)) + _1518;
    float _1840 = (cbModelParam._m0[1u].x * (_1828 - _1519)) + _1519;
    float _1861 = fma(_1840, cbSceneParam._m0[89u].z, fma(_1839, cbSceneParam._m0[89u].y, _1838 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1840, cbSceneParam._m0[90u].z, fma(_1839, cbSceneParam._m0[90u].y, _1838 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1840, cbSceneParam._m0[91u].z, fma(_1839, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1838));
    float _1882 = _1110 * 0.5;
    float _1883 = _1111 * 0.5;
    float _1884 = _1112 * 0.5;
    float _1885 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1816, _1819, _1822, _1825));
    float _1888 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1815, _1818, _1821, _1824));
    float _1891 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1814, _1817, _1820, _1823));
    float _1925;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1898 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1504, _1508, _1511, _1514));
        float _1902 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1506, _1509, _1512, _1515));
        float _1906 = dot(vec4(_1882, _1883, _1884, 1.0), vec4(_1507, _1510, _1513, _1516));
        float _1913 = dot(vec4(cbModelParam._m0[39u]), vec4(_1882, _1883, _1884, 1.0));
        _1925 = dot(vec3(isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1913) ? 0.0 : (isnan(0.0) ? _1913 : max(0.0, _1913))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1925 = 1.0;
    }
    float _1936;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1927 = dot(vec4(cbModelParam._m0[40u]), vec4(_1882, _1883, _1884, 1.0));
        _1936 = dot(vec3(isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1936 = 1.0;
    }
    float _1940 = (_1936 * cbModelParam._m0[1u].x) + (_1925 * (1.0 - cbModelParam._m0[1u].x));
    float _1950 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _928);
    float _1951 = isnan(_1950) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1950 : min(cbModelParam._m0[25u].z, _1950));
    float _2032;
    float _2034;
    float _2036;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1999 = fma(_1174, cbModelParam._m0[13u].z, fma(_1170, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1166)) + cbModelParam._m0[13u].w;
        float _2003 = fma(_1174, cbModelParam._m0[14u].z, fma(_1170, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1166)) + cbModelParam._m0[14u].w;
        float _2007 = fma(_1174, cbModelParam._m0[15u].z, fma(_1170, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1166)) + cbModelParam._m0[15u].w;
        float _2010 = fma(_1112, cbModelParam._m0[13u].z, fma(_1111, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1110));
        float _2013 = fma(_1112, cbModelParam._m0[14u].z, fma(_1111, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1110));
        float _2016 = fma(_1112, cbModelParam._m0[15u].z, fma(_1111, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1110));
        float _2044;
        if (_2010 > 0.0)
        {
            _2044 = abs((1.0 - _1999) / _2010);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2010 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1999 + 1.0) / _2010);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2044 = frontier_phi_17_15_ladder;
        }
        float _2247;
        if (_2013 > 0.0)
        {
            _2247 = abs((1.0 - _2003) / _2013);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2013 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2003 + 1.0) / _2013);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2247 = frontier_phi_26_22_ladder;
        }
        float _2501;
        if (_2016 > 0.0)
        {
            _2501 = abs((1.0 - _2007) / _2016);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2016 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2007 + 1.0) / _2016);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2501 = frontier_phi_38_33_ladder;
        }
        float _2503 = isnan(_2247) ? _2044 : (isnan(_2044) ? _2247 : min(_2044, _2247));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _2010) + _1999;
        float _2509 = (_2504 * _2013) + _2003;
        float _2510 = (_2504 * _2016) + _2007;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2513 = (-1.0) - _2511;
        float _2515 = _2511 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2510 > _2515) || ((_2510 < _2513) || ((_2509 > _2515) || ((_2509 < _2513) || ((_2508 < _2513) || (_2508 > _2515))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2510, cbModelParam._m0[9u].z, fma(_2509, cbModelParam._m0[9u].y, _2508 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2510, cbModelParam._m0[10u].z, fma(_2509, cbModelParam._m0[10u].y, _2508 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2510, cbModelParam._m0[11u].z, fma(_2509, cbModelParam._m0[11u].y, _2508 * cbModelParam._m0[11u].x))), _1951);
            frontier_phi_16_38_ladder = _2638.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2638.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2638.x * cbModelParam._m0[1u].y;
        }
        _2032 = frontier_phi_16_38_ladder_2;
        _2034 = frontier_phi_16_38_ladder_1;
        _2036 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2020 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1110, _1111, _1112), _1951);
        _2032 = _2020.x * cbModelParam._m0[1u].y;
        _2034 = _2020.y * cbModelParam._m0[1u].y;
        _2036 = _2020.z * cbModelParam._m0[1u].y;
    }
    float _2040 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _928);
    float _2041 = isnan(_2040) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2040 : min(cbModelParam._m0[25u].w, _2040));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2095 = fma(_1174, cbModelParam._m0[21u].z, fma(_1170, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1166)) + cbModelParam._m0[21u].w;
        float _2099 = fma(_1174, cbModelParam._m0[22u].z, fma(_1170, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1166)) + cbModelParam._m0[22u].w;
        float _2103 = fma(_1174, cbModelParam._m0[23u].z, fma(_1170, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1166)) + cbModelParam._m0[23u].w;
        float _2106 = fma(_1112, cbModelParam._m0[21u].z, fma(_1111, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1110));
        float _2109 = fma(_1112, cbModelParam._m0[22u].z, fma(_1111, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1110));
        float _2112 = fma(_1112, cbModelParam._m0[23u].z, fma(_1111, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1110));
        float _2252;
        if (_2106 > 0.0)
        {
            _2252 = abs((1.0 - _2095) / _2106);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2106 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2095 + 1.0) / _2106);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2252 = frontier_phi_28_24_ladder;
        }
        float _2528;
        if (_2109 > 0.0)
        {
            _2528 = abs((1.0 - _2099) / _2109);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2099 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2528 = frontier_phi_40_35_ladder;
        }
        float _2741;
        if (_2112 > 0.0)
        {
            _2741 = abs((1.0 - _2103) / _2112);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2103 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2741 = frontier_phi_49_46_ladder;
        }
        float _2743 = isnan(_2528) ? _2252 : (isnan(_2252) ? _2528 : min(_2252, _2528));
        float _2744 = isnan(_2741) ? _2743 : (isnan(_2743) ? _2741 : min(_2743, _2741));
        float _2748 = (_2744 * _2106) + _2095;
        float _2749 = (_2744 * _2109) + _2099;
        float _2750 = (_2744 * _2112) + _2103;
        float _2751 = _2744 * 9.9999997473787516355514526367188e-05;
        float _2752 = (-1.0) - _2751;
        float _2754 = _2751 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2750 > _2754) || ((_2750 < _2752) || ((_2749 > _2754) || ((_2749 < _2752) || ((_2748 < _2752) || (_2748 > _2754))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2949 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2750, cbModelParam._m0[17u].z, fma(_2749, cbModelParam._m0[17u].y, _2748 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2750, cbModelParam._m0[18u].z, fma(_2749, cbModelParam._m0[18u].y, _2748 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2750, cbModelParam._m0[19u].z, fma(_2749, cbModelParam._m0[19u].y, _2748 * cbModelParam._m0[19u].x))), _2041);
            frontier_phi_25_49_ladder = _2949.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2949.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2949.x * cbModelParam._m0[1u].z;
        }
        _2131 = frontier_phi_25_49_ladder_2;
        _2133 = frontier_phi_25_49_ladder_1;
        _2135 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2115 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1110, _1111, _1112), _2041);
        _2131 = _2115.x * cbModelParam._m0[1u].z;
        _2133 = _2115.y * cbModelParam._m0[1u].z;
        _2135 = _2115.z * cbModelParam._m0[1u].z;
    }
    float _2148 = (((_1137 * _1086) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2150 = (((_1137 * _1088) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2152 = (((_1137 * _1089) + _1138) * _1102) * ((cbModelParam._m0[1u].w * (_2135 - _2036)) + _2036);
    float _2155 = fma(_2152, cbSceneParam._m0[89u].z, fma(_2150, cbSceneParam._m0[89u].y, _2148 * cbSceneParam._m0[89u].x));
    float _2158 = fma(_2152, cbSceneParam._m0[90u].z, fma(_2150, cbSceneParam._m0[90u].y, _2148 * cbSceneParam._m0[90u].x));
    float _2161 = fma(_2152, cbSceneParam._m0[91u].z, fma(_2150, cbSceneParam._m0[91u].y, _2148 * cbSceneParam._m0[91u].x));
    uvec4 _2171 = floatBitsToUint(cbInstanceData._m0[_284 + 5u]);
    uint _2173 = _2171.x * 14u;
    uint _2174 = _2173 + 13u;
    float _2181 = _1102 + (-1.0);
    float _2186 = (cbLight._m0[_2174].x * _2181) + 1.0;
    float _2187 = (cbLight._m0[_2174].y * _2181) + 1.0;
    float _2188 = (cbLight._m0[_2174].z * _2181) + 1.0;
    float _2189 = (cbLight._m0[_2174].w * _2181) + 1.0;
    uint _2190 = _2173 + 5u;
    float _2196 = isnan(1.0) ? _2187 : (isnan(_2187) ? 1.0 : min(_2187, 1.0));
    uint _2200 = _2173 + 4u;
    float _2206 = isnan(1.0) ? _2186 : (isnan(_2186) ? 1.0 : min(_2186, 1.0));
    uint _2210 = _2173 | 1u;
    float _2221 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_925, _926, _927));
    float _2224 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_925, _926, _927));
    float _4473 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _4484 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2229 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2231 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2238 = ((cbLight._m0[_2190].x * _2196) * _2231) + ((cbLight._m0[_2200].x * _2206) * _2229);
    float _2239 = ((_2196 * cbLight._m0[_2190].y) * _2231) + ((_2206 * cbLight._m0[_2200].y) * _2229);
    float _2240 = ((_2196 * cbLight._m0[_2190].z) * _2231) + ((_2206 * cbLight._m0[_2200].z) * _2229);
    uvec4 _2244 = floatBitsToUint(cbLight._m0[_2173 + 12u]);
    bool _2246 = _2244.x == 0u;
    float _2257;
    float _2259;
    float _2261;
    if (_2246)
    {
        _2257 = _2238;
        _2259 = _2239;
        _2261 = _2240;
    }
    else
    {
        uint _2265 = _2173 + 6u;
        float _2281 = (dot(vec3(cbLight._m0[_2173 + 2u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2282 = _2281 * _2281;
        float _4495 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
        float _2283 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2284 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2257 = (((cbLight._m0[_2265].x * 0.3183098733425140380859375) * _2283) * _2284) + _2238;
        _2259 = (((cbLight._m0[_2265].y * 0.3183098733425140380859375) * _2283) * _2284) + _2239;
        _2261 = (((cbLight._m0[_2265].z * 0.3183098733425140380859375) * _2283) * _2284) + _2240;
    }
    bool _2264 = _2244.y == 0u;
    float _2302;
    float _2304;
    float _2306;
    if (_2264)
    {
        _2302 = _2257;
        _2304 = _2259;
        _2306 = _2261;
    }
    else
    {
        uint _2472 = _2173 + 7u;
        float _2488 = (dot(vec3(cbLight._m0[_2173 + 3u].xyz), vec3(_925, _926, _927)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4511 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2491 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2302 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2257;
        _2304 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2259;
        _2306 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2261;
    }
    uint _2309 = _2173 + 8u;
    float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _928) * 0.949999988079071044921875);
    float _2323 = _2322 * _2322;
    float _2324 = cbLight._m0[_2173].x + _1004;
    float _2325 = cbLight._m0[_2173].y + _1005;
    float _2326 = cbLight._m0[_2173].z + _1006;
    float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
    float _2331 = _2330 * _2324;
    float _2332 = _2330 * _2325;
    float _2333 = _2330 * _2326;
    float _2334 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2173].xyz));
    float _4527 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2337 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _4538 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _2338 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2339 = dot(vec3(_925, _926, _927), vec3(_2331, _2332, _2333));
    float _4549 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2342 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2343 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2331, _2332, _2333));
    float _4560 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2347 = _2323 * _2323;
    float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
    float _2359 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
    float _2360 = 0.959999978542327880859375 - _1083;
    float _2362 = 0.959999978542327880859375 - _1084;
    float _2363 = 0.959999978542327880859375 - _1085;
    float _2370 = 1.0 - _2323;
    float _2381 = (0.5 / (((_2338 * ((_2337 * _2370) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2370) + _2323) * _2337))) * _2337;
    float _4571 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
    uint _2394 = _2173 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2210].w)) * _928) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2210].x + _1004;
    float _2408 = cbLight._m0[_2210].y + _1005;
    float _2409 = cbLight._m0[_2210].z + _1006;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2210].xyz));
    float _4582 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2421 = dot(vec3(_925, _926, _927), vec3(_2414, _2415, _2416));
    float _4593 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2210].xyz), vec3(_2414, _2415, _2416));
    float _4604 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2447 = 1.0 - _2406;
    float _2457 = (0.5 / (((_2338 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2447) + _2406) * _2420))) * _2420;
    float _4615 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2459 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2469 = (((((_2440 * _2360) + _1086) * cbLight._m0[_2394].x) * _2459) * _2196) + (((((_2359 * _2360) + _1086) * cbLight._m0[_2309].x) * _2383) * _2206);
    float _2470 = (((((_2440 * _2362) + _1088) * cbLight._m0[_2394].y) * _2459) * _2196) + (((((_2359 * _2362) + _1088) * cbLight._m0[_2309].y) * _2383) * _2206);
    float _2471 = (((((_2440 * _2363) + _1089) * cbLight._m0[_2394].z) * _2459) * _2196) + (((((_2359 * _2363) + _1089) * cbLight._m0[_2309].z) * _2383) * _2206);
    float _2533;
    float _2535;
    float _2537;
    if (_2246)
    {
        _2533 = _2469;
        _2535 = _2470;
        _2537 = _2471;
    }
    else
    {
        uint _2539 = _2173 + 2u;
        uint _2543 = _2173 + 10u;
        float _2557 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2539].w)) * _928) * 0.949999988079071044921875);
        float _2558 = _2557 * _2557;
        float _2559 = cbLight._m0[_2539].x + _1004;
        float _2560 = cbLight._m0[_2539].y + _1005;
        float _2561 = cbLight._m0[_2539].z + _1006;
        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
        float _2566 = _2565 * _2559;
        float _2567 = _2565 * _2560;
        float _2568 = _2565 * _2561;
        float _2569 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2539].xyz));
        float _4626 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2572 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2573 = dot(vec3(_925, _926, _927), vec3(_2566, _2567, _2568));
        float _4637 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2576 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2577 = dot(vec3(cbLight._m0[_2539].xyz), vec3(_2566, _2567, _2568));
        float _4648 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
        float _2581 = _2558 * _2558;
        float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
        float _2592 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
        float _2599 = 1.0 - _2558;
        float _2609 = (0.5 / (((_2338 * ((_2572 * _2599) + _2558)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2599) + _2558) * _2572))) * _2572;
        float _4659 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2611 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
        float _2612 = isnan(1.0) ? _2188 : (isnan(_2188) ? 1.0 : min(_2188, 1.0));
        _2533 = (((((_2592 * _2360) + _1086) * cbLight._m0[_2543].x) * _2611) * _2612) + _2469;
        _2535 = (((((_2592 * _2362) + _1088) * cbLight._m0[_2543].y) * _2611) * _2612) + _2470;
        _2537 = (((((_2592 * _2363) + _1089) * cbLight._m0[_2543].z) * _2611) * _2612) + _2471;
    }
    float _2647;
    float _2649;
    float _2651;
    if (_2264)
    {
        _2647 = _2533;
        _2649 = _2535;
        _2651 = _2537;
    }
    else
    {
        uint _2658 = _2173 + 3u;
        uint _2662 = _2173 + 11u;
        float _2676 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2658].w)) * _928) * 0.949999988079071044921875);
        float _2677 = _2676 * _2676;
        float _2678 = cbLight._m0[_2658].x + _1004;
        float _2679 = cbLight._m0[_2658].y + _1005;
        float _2680 = cbLight._m0[_2658].z + _1006;
        float _2684 = inversesqrt(dot(vec3(_2678, _2679, _2680), vec3(_2678, _2679, _2680)));
        float _2685 = _2684 * _2678;
        float _2686 = _2684 * _2679;
        float _2687 = _2684 * _2680;
        float _2688 = dot(vec3(_925, _926, _927), vec3(cbLight._m0[_2658].xyz));
        float _4675 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
        float _2691 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2692 = dot(vec3(_925, _926, _927), vec3(_2685, _2686, _2687));
        float _4686 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
        float _2695 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2696 = dot(vec3(cbLight._m0[_2658].xyz), vec3(_2685, _2686, _2687));
        float _4697 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
        float _2700 = _2677 * _2677;
        float _2704 = ((_2695 * _2695) * (_2700 + (-1.0))) + 1.0;
        float _2711 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2718 = 1.0 - _2677;
        float _2728 = (0.5 / (((_2338 * ((_2691 * _2718) + _2677)) + 9.9999999392252902907785028219223e-09) + (((_2338 * _2718) + _2677) * _2691))) * _2691;
        float _4708 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2730 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2700 / ((_2704 * _2704) * 3.141590118408203125));
        float _2731 = isnan(1.0) ? _2189 : (isnan(_2189) ? 1.0 : min(_2189, 1.0));
        _2647 = (((((_2711 * _2360) + _1086) * cbLight._m0[_2662].x) * _2730) * _2731) + _2533;
        _2649 = (((((_2711 * _2362) + _1088) * cbLight._m0[_2662].y) * _2730) * _2731) + _2535;
        _2651 = (((((_2711 * _2363) + _1089) * cbLight._m0[_2662].z) * _2730) * _2731) + _2537;
    }
    float _2866;
    float _2868;
    float _2870;
    float _2872;
    float _2874;
    float _2876;
    if (_2171.y == 0u)
    {
        float _2806 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2806;
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2806;
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2806;
        uvec4 _2821 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2822 = _2821.x;
        uint _2833 = uint((float(_2821.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1025) / _2822))) + floor(float(uint(cbSceneParam._m0[85u].x * _1024) / _2822)));
        float _2843 = (log2(_2809 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2844 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
        uint _2847 = uint(isnan(14.0) ? _2844 : (isnan(_2844) ? 14.0 : min(_2844, 14.0)));
        uvec4 _2852 = texelFetch(g_lightClusterGridBuffer, int(((_2847 << 2u) + (_2833 << 6u)) >> 2u));
        uint _2853 = _2852.x;
        uint _2854 = _2821.z;
        float _2954;
        float _2956;
        float _2958;
        float _2960;
        float _2962;
        float _2964;
        if (((((1u << ((_2854 >> 4u) & 15u)) + 4294967295u) & _2853) == 0u) || ((_2854 & 240u) == 0u))
        {
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
            _2960 = 0.0;
            _2962 = 0.0;
            _2964 = 0.0;
        }
        else
        {
            float _2955;
            float _2957;
            float _2959;
            float _2961;
            float _2963;
            float _2965;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            uint _3113 = 0u;
            uint _3122;
            bool _3123;
            for (;;)
            {
                _3122 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                _3123 = _3122 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3123)
                {
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                else
                {
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    uint _3258;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3122;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    for (;;)
                    {
                        uint _3262 = uint(findLSB(_3258)) + (_3113 << 5u);
                        uint _3259 = (_3258 + 4294967295u) & _3258;
                        uint _3264 = _3262 * 48u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3284 = (_3262 * 48u) + 4u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3303 = (_3262 * 48u) + 8u;
                        vec3 _3314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x));
                        float _3318 = _3278.x - _2807;
                        float _3319 = _3278.y - _2808;
                        float _3320 = _3278.z - _2809;
                        float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                        float _3324 = inversesqrt(_3321);
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3328 = dot(vec3(_1043, _1046, _1049), vec3(_3325, _3326, _3327));
                        float _3333 = 1.0 - (_3321 * _3278.w);
                        float _4734 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3335 = sqrt(_3321) * _3297.w;
                        float _3338 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3328) + _3339;
                        float _3345 = _3335 * _3335;
                        float _3349 = ((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3334) / ((_3345 * 0.699999988079071044921875) + 1.0);
                        float _3353 = (-0.0) - _2807;
                        float _3354 = (-0.0) - _2808;
                        float _3355 = (-0.0) - _2809;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3370 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _1118;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_1043, _1046, _1049), vec3(_3360, _3361, _3362));
                        float _4750 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3395 = dot(vec3(_1043, _1046, _1049), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4761 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3338 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3328) + _3404;
                        float _4772 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4783 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3402 * _3402) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125))) * _3334;
                        _3182 = (_3349 * _3297.x) + _3255;
                        _3183 = (_3349 * _3297.y) + _3256;
                        _3184 = (_3349 * _3297.z) + _3257;
                        _3179 = (_3430 * _3314.x) + _3252;
                        _3180 = (_3430 * _3314.y) + _3253;
                        _3181 = (_3430 * _3314.z) + _3254;
                        if (_3259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3259;
                        }
                    }
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                _2955 = frontier_phi_66_pred;
                _2965 = frontier_phi_66_pred_1;
                _2963 = frontier_phi_66_pred_2;
                _2961 = frontier_phi_66_pred_3;
                _2959 = frontier_phi_66_pred_4;
                _2957 = frontier_phi_66_pred_5;
                uint _3114 = _3113 + 1u;
                if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3107 = _2955;
                    _3108 = _2957;
                    _3109 = _2959;
                    _3110 = _2961;
                    _3111 = _2963;
                    _3112 = _2965;
                    _3113 = _3114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
            _2960 = _2961;
            _2962 = _2963;
            _2964 = _2965;
        }
        uvec4 _2968 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2969 = _2968.z;
        uint _2971 = (_2969 >> 8u) & 15u;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((4294967295u << _2971) & _2853) == 0u)
        {
            _3075 = _2954;
            _3077 = _2956;
            _3079 = _2958;
            _3081 = _2960;
            _3083 = _2962;
            _3085 = _2964;
        }
        else
        {
            float _3100 = inversesqrt(dot(vec3(_2807, _2808, _2809), vec3(_2807, _2808, _2809)));
            float _3101 = _3100 * _2807;
            float _3102 = _3100 * _2808;
            float _3103 = _3100 * _2809;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2971 < ((_2969 >> 12u) & 15u))
            {
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3235 = _2954;
                float _3236 = _2956;
                float _3237 = _2958;
                float _3238 = _2960;
                float _3239 = _2962;
                float _3240 = _2964;
                uint _3241 = _2971;
                uint _3250;
                bool _3251;
                for (;;)
                {
                    _3250 = texelFetch(g_lightClassification, int((((_2847 << 5u) + (_2833 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                    _3251 = _3250 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3251)
                    {
                        frontier_phi_77_pred = _3240;
                        frontier_phi_77_pred_1 = _3239;
                        frontier_phi_77_pred_2 = _3238;
                        frontier_phi_77_pred_3 = _3237;
                        frontier_phi_77_pred_4 = _3236;
                        frontier_phi_77_pred_5 = _3235;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3737;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        uint _3463 = _3250;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3532;
                        vec4 _3547;
                        float _3593;
                        bool _3594;
                        for (;;)
                        {
                            uint _3474 = ((_3241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3519 = (_3474 * 40u) + 16u;
                            _3532 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3519)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3519 + 3u)).x));
                            uint _3534 = (_3474 * 40u) + 20u;
                            _3547 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3534)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3534 + 3u)).x));
                            uint _3549 = (_3474 * 40u) + 24u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3568 = (_3474 * 40u) + 28u;
                            vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3593 = fma(_2809, _3581.z, fma(_2808, _3581.y, _3581.x * _2807)) + _3581.w;
                            _3594 = !((fma(_2809, _3562.z, fma(_2808, _3562.y, _3562.x * _2807)) + _3562.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3594)
                            {
                                float _3621 = _3489.x - _2807;
                                float _3622 = _3489.y - _2808;
                                float _3623 = _3489.z - _2809;
                                float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                                float _3627 = inversesqrt(_3624);
                                float _3628 = _3627 * _3621;
                                float _3629 = _3627 * _3622;
                                float _3630 = _3627 * _3623;
                                float _3634 = 1.0 - (_3624 / (_3490 * _3490));
                                float _4794 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3639 = sqrt(_3624) * _3505.w;
                                float _3641 = 1.39999997615814208984375 / (_3639 + 1.39999997615814208984375);
                                float _3642 = _3641 * _3641;
                                float _3645 = ((1.0 - _3642) * dot(vec3(_3628, _3629, _3630), vec3(_1043, _1046, _1049))) + _3642;
                                float _3648 = _3639 * _3639;
                                float _3652 = (fma(_2809, _3532.z, fma(_2808, _3532.y, _3532.x * _2807)) + _3532.w) / _3593;
                                float _3653 = (fma(_2809, _3547.z, fma(_2808, _3547.y, _3547.x * _2807)) + _3547.w) / _3593;
                                float _3657 = 1.0 - dot(vec2(_3652, _3653), vec2(_3652, _3653));
                                float _4810 = isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0));
                                float _3658 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3659 = _3658 * (((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3635) / ((_3648 * 0.699999988079071044921875) + 1.0));
                                float _3671 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                                float _3672 = 1.0 - _1118;
                                float _3679 = sqrt(1.0 - ((1.0 - (_3672 * _3672)) * (1.0 - (_3671 * _3671))));
                                float _3680 = _3679 * _3679;
                                float _3681 = _3680 * _3680;
                                float _3682 = _3628 - _3101;
                                float _3683 = _3629 - _3102;
                                float _3684 = _3630 - _3103;
                                float _3688 = inversesqrt(dot(vec3(_3682, _3683, _3684), vec3(_3682, _3683, _3684)));
                                float _3692 = dot(vec3(_1043, _1046, _1049), vec3((-0.0) - _3101, (-0.0) - _3102, (-0.0) - _3103));
                                float _4821 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3695 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3696 = dot(vec3(_1043, _1046, _1049), vec3(_3688 * _3682, _3688 * _3683, _3688 * _3684));
                                float _4832 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                                float _3699 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3703 = ((_3699 * _3699) * (_3681 + (-1.0))) + 1.0;
                                float _3704 = _3641 * _3680;
                                float _3705 = _3704 * _3704;
                                float _3711 = ((1.0 - _3705) * dot(vec3(_1043, _1046, _1049), vec3(_3628, _3629, _3630))) + _3705;
                                float _4843 = isnan(0.0) ? _3711 : (isnan(_3711) ? 0.0 : max(_3711, 0.0));
                                float _3712 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3713 = 1.0 - _3680;
                                float _3723 = (0.5 / (((_3712 * ((_3695 * _3713) + _3680)) + 9.9999999392252902907785028219223e-09) + (((_3712 * _3713) + _3680) * _3695))) * _3712;
                                float _4854 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3733 = (_3658 * _3635) * (((_3681 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3703 * _3703) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3659 * _3505.y;
                                frontier_phi_83_pred_1 = _3659 * _3505.x;
                                frontier_phi_83_pred_2 = _3733 * _3517.z;
                                frontier_phi_83_pred_3 = _3733 * _3517.y;
                                frontier_phi_83_pred_4 = _3733 * _3517.x;
                                frontier_phi_83_pred_5 = _3659 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3741 = frontier_phi_83_pred;
                            _3740 = frontier_phi_83_pred_1;
                            _3739 = frontier_phi_83_pred_2;
                            _3738 = frontier_phi_83_pred_3;
                            _3737 = frontier_phi_83_pred_4;
                            _3742 = frontier_phi_83_pred_5;
                            _3447 = _3740 + _3460;
                            _3448 = _3741 + _3461;
                            _3449 = _3742 + _3462;
                            _3444 = _3737 + _3457;
                            _3445 = _3738 + _3458;
                            _3446 = _3739 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3449;
                        frontier_phi_77_pred_1 = _3448;
                        frontier_phi_77_pred_2 = _3447;
                        frontier_phi_77_pred_3 = _3446;
                        frontier_phi_77_pred_4 = _3445;
                        frontier_phi_77_pred_5 = _3444;
                    }
                    _3086 = frontier_phi_77_pred;
                    _3084 = frontier_phi_77_pred_1;
                    _3082 = frontier_phi_77_pred_2;
                    _3080 = frontier_phi_77_pred_3;
                    _3078 = frontier_phi_77_pred_4;
                    _3076 = frontier_phi_77_pred_5;
                    uint _3242 = _3241 + 1u;
                    if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3235 = _3076;
                        _3236 = _3078;
                        _3237 = _3080;
                        _3238 = _3082;
                        _3239 = _3084;
                        _3240 = _3086;
                        _3241 = _3242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3080;
                frontier_phi_58_59_ladder_1 = _3086;
                frontier_phi_58_59_ladder_2 = _3084;
                frontier_phi_58_59_ladder_3 = _3082;
                frontier_phi_58_59_ladder_4 = _3078;
                frontier_phi_58_59_ladder_5 = _3076;
            }
            else
            {
                frontier_phi_58_59_ladder = _2958;
                frontier_phi_58_59_ladder_1 = _2964;
                frontier_phi_58_59_ladder_2 = _2962;
                frontier_phi_58_59_ladder_3 = _2960;
                frontier_phi_58_59_ladder_4 = _2956;
                frontier_phi_58_59_ladder_5 = _2954;
            }
            _3075 = frontier_phi_58_59_ladder_5;
            _3077 = frontier_phi_58_59_ladder_4;
            _3079 = frontier_phi_58_59_ladder;
            _3081 = frontier_phi_58_59_ladder_3;
            _3083 = frontier_phi_58_59_ladder_2;
            _3085 = frontier_phi_58_59_ladder_1;
        }
        float _3090 = isnan(1.0) ? _1102 : (isnan(_1102) ? 1.0 : min(_1102, 1.0));
        _2866 = (_3090 * _3081) + _2302;
        _2868 = (_3090 * _3083) + _2304;
        _2870 = (_3090 * _3085) + _2306;
        _2872 = ((_3075 * _1086) * _3090) + _2647;
        _2874 = ((_3077 * _1088) * _3090) + _2649;
        _2876 = ((_3079 * _1089) * _3090) + _2651;
    }
    else
    {
        _2866 = _2302;
        _2868 = _2304;
        _2870 = _2306;
        _2872 = _2647;
        _2874 = _2649;
        _2876 = _2651;
    }
    float _4870 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _4881 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _4892 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2893 = ((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2866 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1102))) + ((_2872 + ((isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2894 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2868 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1102))) + ((_2874 + ((isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    float _2895 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2870 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1102))) + ((_2876 + ((isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0))) * _1940)) * cbPerFrame._m0[3u].x);
    uint _2896 = _284 + 6u;
    float _2904 = _1024 / cbSceneParam._m0[86u].x;
    float _2905 = _1025 / cbSceneParam._m0[86u].y;
    vec4 _2919 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2904, _2905, (log2((isnan(cbSceneParam._m0[77u].w) ? _947 : (isnan(_947) ? cbSceneParam._m0[77u].w : min(_947, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2921 = _2919.x;
    float _2922 = _2919.y;
    float _2923 = _2919.z;
    float _2924 = _2919.w;
    float _3017;
    float _3019;
    float _3021;
    float _3023;
    if (_947 > cbSceneParam._m0[78u].w)
    {
        float _2979 = isnan(_947) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _947 : min(cbSceneParam._m0[80u].w, _947));
        float _2980 = _2979 / _947;
        float _2991 = _2980 * _997;
        float _2992 = _998 * _2980;
        float _2993 = (-0.0) - _2992;
        float _2995 = _2980 * _999;
        float _2997 = (cbSceneParam._m0[77u].w * _2993) / _2979;
        float _2998 = _2997 + cbSceneParam._m0[79u].w;
        float _2999 = cbSceneParam._m0[79u].w - _2992;
        float _3005 = sqrt(((_2991 * _2991) + (_2992 * _2992)) + (_2995 * _2995));
        float _3008 = (1.0 - (cbSceneParam._m0[77u].w / _2979)) * _3005;
        float _3013 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3015 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3192;
        if (abs((_2993 - _2997) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3192 = ((((_2998 > 0.0) ? exp2(_3013 * _2998) : (2.0 - exp2(_3015 * _2998))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3008;
        }
        else
        {
            float _3136 = 1.0 / cbSceneParam._m0[80u].x;
            float _3137 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : max(_2998, _2999));
            float _3138 = isnan(_2999) ? _2998 : (isnan(_2998) ? _2999 : min(_2998, _2999));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            _3192 = ((abs(_3005 / _2993) * cbSceneParam._m0[80u].y) * ((((_3147 - _3148) * 2.0) - ((exp2(_3013 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0)))) - exp2(_3013 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))))) * _3136)) - ((exp2(_3015 * _3147) - exp2(_3015 * _3148)) * _3136))) + (_3008 * cbSceneParam._m0[80u].z);
        }
        vec4 _3194 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2904, _2905, 1.0), 0.0);
        float _3203 = exp2((_3192 * (-1.44269502162933349609375)) * (1.0 - _3194.w));
        float _3204 = log2(_3203);
        float _3220 = log2(_2924);
        _3017 = (exp2(_3220 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].x)) * _3194.x) / cbSceneParam._m0[78u].x)) + _2921;
        _3019 = (exp2(_3220 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].y)) * _3194.y) / cbSceneParam._m0[78u].y)) + _2922;
        _3021 = (exp2(_3220 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].z)) * _3194.z) / cbSceneParam._m0[78u].z)) + _2923;
        _3023 = _3203 * _2924;
    }
    else
    {
        _3017 = _2921;
        _3019 = _2922;
        _3021 = _2923;
        _3023 = _2924;
    }
    bool _3230;
    vec4 _3033;
    vec4 _3055;
    float _3057;
    float _3061;
    float _3062;
    float _3063;
    float _3064;
    bool _3074;
    for (;;)
    {
        _3033 = cbMatDynParam._m0[0u];
        float _3035 = roundEven(_3033.y);
        bool _3036 = _3035 == 3.0;
        float _3037 = log2(_3023);
        float _3044 = exp2(_3037 * cbSceneParam._m0[78u].x) * _2893;
        float _3045 = exp2(_3037 * cbSceneParam._m0[78u].y) * _2894;
        float _3046 = exp2(_3037 * cbSceneParam._m0[78u].z) * _2895;
        float _3053 = _1013 + (-0.5);
        _3055 = cbMtdParam._m0[1u];
        _3057 = _3055.y * _3053;
        float _3060 = (_3035 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3061 = _3060 * (_3036 ? _3044 : (_3044 + (cbSceneParam._m0[72u].w * _3017)));
        _3062 = _3060 * (_3036 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3019)));
        _3063 = _3060 * (_3036 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3021)));
        _3064 = _3053 * 0.999000012874603271484375;
        _3074 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3074)
        {
            if ((cbInstanceData._m0[_284 + 7u].x + _3064) < 0.5)
            {
                _3230 = true;
                break;
            }
        }
        uint _3171 = _1062 + uint(_3033.w);
        if ((cbInstanceData._m0[_3171].w < 1.0) && ((cbInstanceData._m0[_3171].w + _3064) < 0.5))
        {
            _3230 = true;
            break;
        }
        if ((_3057 + 1.0) < _3055.x)
        {
            _3230 = true;
            break;
        }
        _3230 = false;
        break;
    }
    float _3435;
    if (_3230)
    {
        discard_state = true;
        _3435 = 0.0;
    }
    else
    {
        _3435 = cbInstanceData._m0[_2896].w;
    }
    SV_Target.x = _3061;
    SV_Target.y = _3062;
    SV_Target.z = _3063;
    SV_Target.w = _3435;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2896].w;
    discard_exit();
}


