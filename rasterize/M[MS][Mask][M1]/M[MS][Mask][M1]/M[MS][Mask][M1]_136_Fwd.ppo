#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1578;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _315 = _309.x * cbMtdParam._m0[11u].x;
    float _316 = _309.y * cbMtdParam._m0[11u].y;
    float _317 = _309.z * cbMtdParam._m0[11u].z;
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _394 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _396 = _394.x;
    float _408 = dot(vec4(_396, _394.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _425 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _355.x) * 2.0) - ((((_396 - _408) * cbMtdParam._m0[23u].w) + _408) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3901 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _426 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _433 = (_426 * ((_336.x * cbMtdParam._m0[12u].x) - _315)) + _315;
    float _434 = (_426 * ((_336.y * cbMtdParam._m0[12u].y) - _316)) + _316;
    float _435 = (_426 * ((_336.z * cbMtdParam._m0[12u].z) - _317)) + _317;
    vec4 _452 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _474 = _472.x;
    float _484 = dot(vec4(_474, _472.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _498 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _355.y) * 2.0) - ((((_474 - _484) * cbMtdParam._m0[23u].w) + _484) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3912 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _499 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _506 = (_499 * ((_452.x * cbMtdParam._m0[13u].x) - _433)) + _433;
    float _507 = (_499 * ((_452.y * cbMtdParam._m0[13u].y) - _434)) + _434;
    float _508 = (_499 * ((_452.z * cbMtdParam._m0[13u].z) - _435)) + _435;
    vec4 _527 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _544 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _546 = _544.x;
    float _556 = dot(vec4(_546, _544.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _568 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _355.z) * 2.0) - ((((_546 - _556) * cbMtdParam._m0[23u].w) + _556) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3923 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _569 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _576 = (_569 * ((_527.x * cbMtdParam._m0[14u].x) - _506)) + _506;
    float _577 = (_569 * ((_527.y * cbMtdParam._m0[14u].y) - _507)) + _507;
    float _578 = (_569 * ((_527.z * cbMtdParam._m0[14u].z) - _508)) + _508;
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _616 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _633 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _635 = _633.x;
    float _636 = _633.y;
    float _637 = _633.z;
    float _644 = ((_616.x - _635) * _426) + _635;
    float _645 = ((_616.y - _636) * _426) + _636;
    float _646 = ((_616.z - _637) * _426) + _637;
    vec4 _658 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _669 = ((_658.x - _644) * _499) + _644;
    float _670 = ((_658.y - _645) * _499) + _645;
    float _671 = ((_658.z - _646) * _499) + _646;
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _696 = ((_683.z - _671) * _569) + _671;
    float _699 = ((((_683.x - _669) * _569) + _669) * 2.0) + (-1.0);
    float _701 = ((((_683.y - _670) * _569) + _670) * 2.0) + (-1.0);
    float _702 = dot(vec2(_699, _701), vec2(_699, _701));
    float _3934 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _707 = sqrt(1.0 - (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))));
    vec4 _721 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _746 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _748 = _746.x;
    float _749 = 1.0 - _748;
    float _757 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _760 = ((isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : min(_757, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _769 = (_760 - ((((((_748 - _749) * cbMtdParam._m0[24u].z) + _749) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _760))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3955 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _770 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _777 = (_770 * ((_596.x * cbMtdParam._m0[18u].x) - _576)) + _576;
    float _778 = (_770 * ((_596.y * cbMtdParam._m0[18u].y) - _577)) + _577;
    float _779 = (_770 * ((_596.z * cbMtdParam._m0[18u].z) - _578)) + _578;
    vec4 _791 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _793 = _791.x;
    float _794 = 1.0 - _793;
    float _819 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_793 - _794) * cbMtdParam._m0[24u].w) + _794) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3966 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
    float _820 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _828 = ((((cbMtdParam._m0[10u].x - _777) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _820) + _777;
    float _829 = ((((cbMtdParam._m0[10u].y - _778) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _820) + _778;
    float _830 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _779)) * _820) + _779;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _858 = _856.x;
    float _876 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _858) * _426) + _858;
    float _893 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _876) * _499) + _876;
    float _910 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _893) * _569) + _893;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _910) * cbMtdParam._m0[19u].z) + _910;
    float _916 = _914 - (_914 * _770);
    float _918 = _916 - (_916 * _820);
    float _922 = (cbMtdParam._m0[19u].w * (_721.z - _696)) + _696;
    vec4 _936 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _943 = (_936.x * 2.0) + (-1.0);
    float _944 = (_936.y * 2.0) + (-1.0);
    float _945 = dot(vec2(_943, _944), vec2(_943, _944));
    float _3977 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _953 = (_770 * (_936.z - _922)) + _922;
    float _956 = ((cbMtdParam._m0[23u].x - _953) * _820) + _953;
    vec4 _979 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _985 = (_979.x * 2.0) + (-1.0);
    float _986 = (_979.y * 2.0) + (-1.0);
    float _987 = dot(vec2(_985, _986), vec2(_985, _986));
    float _3988 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _995 = (((_721.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _699;
    float _996 = (((_721.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _701;
    float _1008 = (((_943 - _995) + (cbMtdParam._m0[21u].x * _995)) * _770) + _995;
    float _1009 = (((_944 - _996) + (cbMtdParam._m0[21u].x * _996)) * _770) + _996;
    float _1010 = (_770 * (sqrt(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) - _707)) + _707;
    float _1021 = (((_985 - _1008) + (_1008 * cbMtdParam._m0[22u].z)) * _820) + _1008;
    float _1022 = (((_986 - _1009) + (_1009 * cbMtdParam._m0[22u].z)) * _820) + _1009;
    float _1023 = ((sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) - _1010) * _820) + _1010;
    float _1025 = cbMtdParam._m0[22u].x + _721.w;
    float _1028 = fma(_1023, _256 * NORMAL.x, fma(_1022, _263 * TANGENT.x, (_249 * _241) * _1021));
    float _1031 = fma(_1023, _256 * NORMAL.y, fma(_1022, _263 * TANGENT.y, (_249 * _242) * _1021));
    float _1034 = fma(_1023, _256 * NORMAL.z, fma(_1022, _263 * TANGENT.z, (_249 * _243) * _1021));
    float _1038 = inversesqrt(dot(vec3(_1028, _1031, _1034), vec3(_1028, _1031, _1034)));
    float _1039 = _1038 * _1028;
    float _1040 = _1038 * _1031;
    float _1041 = _1038 * _1034;
    float _3999 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _1042 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _4010 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _4021 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4032 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4043 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4054 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _1047 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _1061 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1111 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1101);
    float _1112 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1101);
    float _1113 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1101);
    float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
    float _1118 = _1111 * _1117;
    float _1119 = _1112 * _1117;
    float _1120 = _1113 * _1117;
    float _1126 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1127 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1145 = fma(_1041, cbSceneParam._m0[5u].z, fma(_1040, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1039));
    float _1148 = fma(_1041, cbSceneParam._m0[6u].z, fma(_1040, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1039));
    float _1151 = fma(_1041, cbSceneParam._m0[7u].z, fma(_1040, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1039));
    uint _1165 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1171 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) * cbInstanceData._m0[_1165].x;
    float _1172 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) * cbInstanceData._m0[_1165].y;
    float _1173 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1165].z;
    float _4065 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1174 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _1175 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _4087 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
    float _1176 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _1177 = 1.0 - _1047;
    float _1178 = _1174 * _1177;
    float _1179 = _1175 * _1177;
    float _1180 = _1176 * _1177;
    float _1185 = (_1174 + (-0.039999999105930328369140625)) * _1047;
    float _1186 = (_1175 + (-0.039999999105930328369140625)) * _1047;
    float _1187 = (_1176 + (-0.039999999105930328369140625)) * _1047;
    float _1188 = _1185 + 0.039999999105930328369140625;
    float _1190 = _1186 + 0.039999999105930328369140625;
    float _1191 = _1187 + 0.039999999105930328369140625;
    vec4 _1200 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1126, cbSceneParam._m0[86u].y * _1127));
    float _1204 = ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * TEXCOORD_5.w) * _1200.x;
    float _1205 = dot(vec3(_1039, _1040, _1041), vec3(_1118, _1119, _1120));
    float _1208 = _1205 * 2.0;
    float _1212 = (_1208 * _1039) - _1118;
    float _1213 = (_1208 * _1040) - _1119;
    float _1214 = (_1208 * _1041) - _1120;
    float _1218 = abs(dot(vec3(_1118, _1119, _1120), vec3(_1039, _1040, _1041)));
    float _4098 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _1220 = sqrt(_1042);
    float _1233 = exp2((_1220 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1220 * 3.0));
    float _1239 = (1.0 - _1233) * ((_1220 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1240 = _1233 * _1220;
    float _1268 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1272 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1276 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1577;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1302 = fma(_1276, cbModelParam._m0[26u].z, fma(_1272, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1268));
        float _1306 = fma(_1276, cbModelParam._m0[27u].z, fma(_1272, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1268));
        float _1310 = fma(_1276, cbModelParam._m0[28u].z, fma(_1272, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1268));
        float _1335 = _1268 + _1039;
        float _1336 = _1272 + _1040;
        float _1337 = _1276 + _1041;
        float _1347 = fma(_1337, cbModelParam._m0[26u].z, fma(_1336, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1335)) - _1302;
        float _1348 = fma(_1337, cbModelParam._m0[27u].z, fma(_1336, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1335)) - _1306;
        float _1349 = fma(_1337, cbModelParam._m0[28u].z, fma(_1336, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1335)) - _1310;
        float _1353 = inversesqrt(dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349)));
        float _1366 = ((_1353 * _1347) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1302 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1353 * _1348) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1306 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1368 = ((_1353 * _1349) / cbModelParam._m0[34u].z) + ((((((_1310 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1366, _1367, _1368), 0.0);
        float _1405 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1371.x + (-0.5));
        float _1407 = _1405 * (_1371.y + (-0.5));
        float _1408 = _1405 * (_1371.z + (-0.5));
        float _1415 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1378.x + (-0.5));
        float _1417 = _1415 * (_1378.y + (-0.5));
        float _1418 = _1415 * (_1378.z + (-0.5));
        float _1425 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1385.x + (-0.5));
        float _1427 = _1425 * (_1385.y + (-0.5));
        float _1428 = _1425 * (_1385.z + (-0.5));
        float _1435 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1392.x + (-0.5));
        float _1437 = _1435 * (_1392.y + (-0.5));
        float _1438 = _1435 * (_1392.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1459 = (dot(vec3(_1039, _1040, _1041), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _4124 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1469 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _4135 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
        float _1471 = _1470 * 2.0;
        float _1475 = (1.0 - _1470) / (_1470 + 1.0);
        float _4146 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0));
        float _1485 = ((((1.0 - _1476) * (_1471 + 2.0)) * exp2(log2(isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_1471 + 1.0))) + _1476) * _1439;
        float _1486 = _1407 * 0.5;
        float _1487 = _1417 * 0.5;
        float _1488 = _1427 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_1039, _1040, _1041), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _4157 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _4168 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4179 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_1513 + 1.0))) + _1518) * _1440;
        float _1528 = _1408 * 0.5;
        float _1529 = _1418 * 0.5;
        float _1530 = _1428 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_1039, _1040, _1041), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4190 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _4201 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4212 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (_1555 + 1.0))) + _1560) * _1441;
        _1577 = _1408;
        _1579 = _1407;
        _1580 = _1406;
        _1581 = _1418;
        _1582 = _1417;
        _1583 = _1416;
        _1584 = _1428;
        _1585 = _1427;
        _1586 = _1426;
        _1587 = _1441;
        _1588 = _1440;
        _1589 = _1439;
        _1590 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)));
        _1591 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1592 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
    }
    else
    {
        _1577 = _1578;
        _1579 = _1578;
        _1580 = _1578;
        _1581 = _1578;
        _1582 = _1578;
        _1583 = _1578;
        _1584 = _1578;
        _1585 = _1578;
        _1586 = _1578;
        _1587 = _1578;
        _1588 = _1578;
        _1589 = _1578;
        _1590 = 0.0;
        _1591 = 0.0;
        _1592 = 0.0;
    }
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    float _1892;
    float _1893;
    float _1894;
    float _1895;
    float _1896;
    float _1897;
    float _1898;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1615 = fma(_1276, cbModelParam._m0[30u].z, fma(_1272, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1268));
        float _1619 = fma(_1276, cbModelParam._m0[31u].z, fma(_1272, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1268));
        float _1623 = fma(_1276, cbModelParam._m0[32u].z, fma(_1272, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1268));
        float _1646 = _1268 + _1039;
        float _1647 = _1272 + _1040;
        float _1648 = _1276 + _1041;
        float _1658 = fma(_1648, cbModelParam._m0[30u].z, fma(_1647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1646)) - _1615;
        float _1659 = fma(_1648, cbModelParam._m0[31u].z, fma(_1647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1646)) - _1619;
        float _1660 = fma(_1648, cbModelParam._m0[32u].z, fma(_1647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1646)) - _1623;
        float _1664 = inversesqrt(dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660)));
        float _1677 = ((_1664 * _1658) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1615 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1678 = ((_1664 * _1659) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1619 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1679 = ((_1664 * _1660) / cbModelParam._m0[35u].z) + ((((((_1623 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        vec4 _1702 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1677, _1678, _1679), 0.0);
        float _1714 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1715 = _1714 * (_1681.x + (-0.5));
        float _1716 = _1714 * (_1681.y + (-0.5));
        float _1717 = _1714 * (_1681.z + (-0.5));
        float _1724 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1725 = _1724 * (_1688.x + (-0.5));
        float _1726 = _1724 * (_1688.y + (-0.5));
        float _1727 = _1724 * (_1688.z + (-0.5));
        float _1734 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1735 = _1734 * (_1695.x + (-0.5));
        float _1736 = _1734 * (_1695.y + (-0.5));
        float _1737 = _1734 * (_1695.z + (-0.5));
        float _1744 = exp2((_1702.w + (-0.5)) * 20.0) * 2.0;
        float _1745 = _1744 * (_1702.x + (-0.5));
        float _1746 = _1744 * (_1702.y + (-0.5));
        float _1747 = _1744 * (_1702.z + (-0.5));
        float _1748 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1749 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1750 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1751 = _1715 * 0.5;
        float _1752 = _1725 * 0.5;
        float _1753 = _1735 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_1039, _1040, _1041), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4253 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1748 + 9.9999997473787516355514526367188e-06);
        float _4264 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4275 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_1778 + 1.0))) + _1783) * _1748;
        float _1793 = _1716 * 0.5;
        float _1794 = _1726 * 0.5;
        float _1795 = _1736 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_1039, _1040, _1041), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4286 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1749 + 9.9999997473787516355514526367188e-06);
        float _4297 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4308 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_1820 + 1.0))) + _1825) * _1749;
        float _1835 = _1717 * 0.5;
        float _1836 = _1727 * 0.5;
        float _1837 = _1737 * 0.5;
        float _1838 = dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837));
        float _1843 = (_1838 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1838);
        float _1851 = (dot(vec3(_1039, _1040, _1041), vec3(_1843 * _1835, _1843 * _1836, _1843 * _1837)) + 1.0) * 0.5;
        float _4319 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1860 = sqrt(((_1836 * _1836) + (_1835 * _1835)) + (_1837 * _1837)) / (_1750 + 9.9999997473787516355514526367188e-06);
        float _4330 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1862 = _1861 * 2.0;
        float _1866 = (1.0 - _1861) / (_1861 + 1.0);
        float _4341 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
        float _1867 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1876 = ((((1.0 - _1867) * (_1862 + 2.0)) * exp2(log2(isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (_1862 + 1.0))) + _1867) * _1750;
        _1884 = _1717;
        _1885 = _1716;
        _1886 = _1715;
        _1887 = _1727;
        _1888 = _1726;
        _1889 = _1725;
        _1890 = _1737;
        _1891 = _1736;
        _1892 = _1735;
        _1893 = _1750;
        _1894 = _1749;
        _1895 = _1748;
        _1896 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1897 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
        _1898 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0)));
    }
    else
    {
        _1884 = _1578;
        _1885 = _1578;
        _1886 = _1578;
        _1887 = _1578;
        _1888 = _1578;
        _1889 = _1578;
        _1890 = _1578;
        _1891 = _1578;
        _1892 = _1578;
        _1893 = _1578;
        _1894 = _1578;
        _1895 = _1578;
        _1896 = 0.0;
        _1897 = 0.0;
        _1898 = 0.0;
    }
    float _1908 = (cbModelParam._m0[1u].x * (_1896 - _1590)) + _1590;
    float _1909 = (cbModelParam._m0[1u].x * (_1897 - _1591)) + _1591;
    float _1910 = (cbModelParam._m0[1u].x * (_1898 - _1592)) + _1592;
    float _1931 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1909, cbSceneParam._m0[89u].y, _1908 * cbSceneParam._m0[89u].x));
    float _1934 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1909, cbSceneParam._m0[90u].y, _1908 * cbSceneParam._m0[90u].x));
    float _1937 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1909, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1908));
    float _1952 = _1212 * 0.5;
    float _1953 = _1213 * 0.5;
    float _1954 = _1214 * 0.5;
    float _1955 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1886, _1889, _1892, _1895));
    float _1958 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1885, _1888, _1891, _1894));
    float _1961 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1884, _1887, _1890, _1893));
    float _1995;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1968 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1577, _1581, _1584, _1587));
        float _1972 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1579, _1582, _1585, _1588));
        float _1976 = dot(vec4(_1952, _1953, _1954, 1.0), vec4(_1580, _1583, _1586, _1589));
        float _1983 = dot(vec4(cbModelParam._m0[39u]), vec4(_1952, _1953, _1954, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0)), isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0)), isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1983) ? 0.0 : (isnan(0.0) ? _1983 : max(0.0, _1983))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _2006;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1997 = dot(vec4(cbModelParam._m0[40u]), vec4(_1952, _1953, _1954, 1.0));
        _2006 = dot(vec3(isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1997) ? 0.0 : (isnan(0.0) ? _1997 : max(0.0, _1997))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2006 = 1.0;
    }
    float _2010 = (_2006 * cbModelParam._m0[1u].x) + (_1995 * (1.0 - cbModelParam._m0[1u].x));
    float _2020 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1042);
    float _2021 = isnan(_2020) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2020 : min(cbModelParam._m0[25u].z, _2020));
    float _2101;
    float _2103;
    float _2105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2068 = fma(_1276, cbModelParam._m0[13u].z, fma(_1272, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1268)) + cbModelParam._m0[13u].w;
        float _2072 = fma(_1276, cbModelParam._m0[14u].z, fma(_1272, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1268)) + cbModelParam._m0[14u].w;
        float _2076 = fma(_1276, cbModelParam._m0[15u].z, fma(_1272, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1268)) + cbModelParam._m0[15u].w;
        float _2079 = fma(_1214, cbModelParam._m0[13u].z, fma(_1213, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1212));
        float _2082 = fma(_1214, cbModelParam._m0[14u].z, fma(_1213, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1212));
        float _2085 = fma(_1214, cbModelParam._m0[15u].z, fma(_1213, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1212));
        float _2113;
        if (_2079 > 0.0)
        {
            _2113 = abs((1.0 - _2068) / _2079);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2068 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2113 = frontier_phi_14_12_ladder;
        }
        float _2315;
        if (_2082 > 0.0)
        {
            _2315 = abs((1.0 - _2072) / _2082);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2082 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2072 + 1.0) / _2082);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2315 = frontier_phi_23_19_ladder;
        }
        float _2569;
        if (_2085 > 0.0)
        {
            _2569 = abs((1.0 - _2076) / _2085);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2085 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2076 + 1.0) / _2085);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2569 = frontier_phi_35_30_ladder;
        }
        float _2571 = isnan(_2315) ? _2113 : (isnan(_2113) ? _2315 : min(_2113, _2315));
        float _2572 = isnan(_2569) ? _2571 : (isnan(_2571) ? _2569 : min(_2571, _2569));
        float _2576 = (_2572 * _2079) + _2068;
        float _2577 = (_2572 * _2082) + _2072;
        float _2578 = (_2572 * _2085) + _2076;
        float _2579 = _2572 * 9.9999997473787516355514526367188e-05;
        float _2581 = (-1.0) - _2579;
        float _2583 = _2579 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2578 > _2583) || ((_2578 < _2581) || ((_2577 > _2583) || ((_2577 < _2581) || ((_2576 < _2581) || (_2576 > _2583))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2706 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2578, cbModelParam._m0[9u].z, fma(_2577, cbModelParam._m0[9u].y, _2576 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2578, cbModelParam._m0[10u].z, fma(_2577, cbModelParam._m0[10u].y, _2576 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2578, cbModelParam._m0[11u].z, fma(_2577, cbModelParam._m0[11u].y, _2576 * cbModelParam._m0[11u].x))), _2021);
            frontier_phi_13_35_ladder = _2706.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2706.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2706.x * cbModelParam._m0[1u].y;
        }
        _2101 = frontier_phi_13_35_ladder_2;
        _2103 = frontier_phi_13_35_ladder_1;
        _2105 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1212, _1213, _1214), _2021);
        _2101 = _2089.x * cbModelParam._m0[1u].y;
        _2103 = _2089.y * cbModelParam._m0[1u].y;
        _2105 = _2089.z * cbModelParam._m0[1u].y;
    }
    float _2109 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1042);
    float _2110 = isnan(_2109) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2109 : min(cbModelParam._m0[25u].w, _2109));
    float _2199;
    float _2201;
    float _2203;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2163 = fma(_1276, cbModelParam._m0[21u].z, fma(_1272, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1268)) + cbModelParam._m0[21u].w;
        float _2167 = fma(_1276, cbModelParam._m0[22u].z, fma(_1272, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1268)) + cbModelParam._m0[22u].w;
        float _2171 = fma(_1276, cbModelParam._m0[23u].z, fma(_1272, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1268)) + cbModelParam._m0[23u].w;
        float _2174 = fma(_1214, cbModelParam._m0[21u].z, fma(_1213, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1212));
        float _2177 = fma(_1214, cbModelParam._m0[22u].z, fma(_1213, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1212));
        float _2180 = fma(_1214, cbModelParam._m0[23u].z, fma(_1213, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1212));
        float _2320;
        if (_2174 > 0.0)
        {
            _2320 = abs((1.0 - _2163) / _2174);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2163 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2320 = frontier_phi_25_21_ladder;
        }
        float _2596;
        if (_2177 > 0.0)
        {
            _2596 = abs((1.0 - _2167) / _2177);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2177 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2167 + 1.0) / _2177);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2596 = frontier_phi_37_32_ladder;
        }
        float _2809;
        if (_2180 > 0.0)
        {
            _2809 = abs((1.0 - _2171) / _2180);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2180 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2171 + 1.0) / _2180);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2809 = frontier_phi_46_43_ladder;
        }
        float _2811 = isnan(_2596) ? _2320 : (isnan(_2320) ? _2596 : min(_2320, _2596));
        float _2812 = isnan(_2809) ? _2811 : (isnan(_2811) ? _2809 : min(_2811, _2809));
        float _2816 = (_2812 * _2174) + _2163;
        float _2817 = (_2812 * _2177) + _2167;
        float _2818 = (_2812 * _2180) + _2171;
        float _2819 = _2812 * 9.9999997473787516355514526367188e-05;
        float _2820 = (-1.0) - _2819;
        float _2822 = _2819 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2818 > _2822) || ((_2818 < _2820) || ((_2817 > _2822) || ((_2817 < _2820) || ((_2816 < _2820) || (_2816 > _2822))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2818, cbModelParam._m0[17u].z, fma(_2817, cbModelParam._m0[17u].y, _2816 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2818, cbModelParam._m0[18u].z, fma(_2817, cbModelParam._m0[18u].y, _2816 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2818, cbModelParam._m0[19u].z, fma(_2817, cbModelParam._m0[19u].y, _2816 * cbModelParam._m0[19u].x))), _2110);
            frontier_phi_22_46_ladder = _3017.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3017.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3017.x * cbModelParam._m0[1u].z;
        }
        _2199 = frontier_phi_22_46_ladder_2;
        _2201 = frontier_phi_22_46_ladder_1;
        _2203 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2183 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1212, _1213, _1214), _2110);
        _2199 = _2183.x * cbModelParam._m0[1u].z;
        _2201 = _2183.y * cbModelParam._m0[1u].z;
        _2203 = _2183.z * cbModelParam._m0[1u].z;
    }
    float _2216 = (((_1239 * _1188) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2199 - _2101)) + _2101);
    float _2218 = (((_1239 * _1190) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2201 - _2103)) + _2103);
    float _2220 = (((_1239 * _1191) + _1240) * _1204) * ((cbModelParam._m0[1u].w * (_2203 - _2105)) + _2105);
    float _2223 = fma(_2220, cbSceneParam._m0[89u].z, fma(_2218, cbSceneParam._m0[89u].y, _2216 * cbSceneParam._m0[89u].x));
    float _2226 = fma(_2220, cbSceneParam._m0[90u].z, fma(_2218, cbSceneParam._m0[90u].y, _2216 * cbSceneParam._m0[90u].x));
    float _2229 = fma(_2220, cbSceneParam._m0[91u].z, fma(_2218, cbSceneParam._m0[91u].y, _2216 * cbSceneParam._m0[91u].x));
    uvec4 _2239 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2241 = _2239.x * 14u;
    uint _2242 = _2241 + 13u;
    float _2249 = _1204 + (-1.0);
    float _2254 = (cbLight._m0[_2242].x * _2249) + 1.0;
    float _2255 = (cbLight._m0[_2242].y * _2249) + 1.0;
    float _2256 = (cbLight._m0[_2242].z * _2249) + 1.0;
    float _2257 = (cbLight._m0[_2242].w * _2249) + 1.0;
    uint _2258 = _2241 + 5u;
    float _2264 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2268 = _2241 + 4u;
    float _2274 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2278 = _2241 | 1u;
    float _2289 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_1039, _1040, _1041));
    float _2292 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_1039, _1040, _1041));
    float _4477 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
    float _4488 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2297 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * 0.3183098733425140380859375;
    float _2299 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2306 = ((cbLight._m0[_2258].x * _2264) * _2299) + ((cbLight._m0[_2268].x * _2274) * _2297);
    float _2307 = ((_2264 * cbLight._m0[_2258].y) * _2299) + ((_2274 * cbLight._m0[_2268].y) * _2297);
    float _2308 = ((_2264 * cbLight._m0[_2258].z) * _2299) + ((_2274 * cbLight._m0[_2268].z) * _2297);
    uvec4 _2312 = floatBitsToUint(cbLight._m0[_2241 + 12u]);
    bool _2314 = _2312.x == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2314)
    {
        _2325 = _2306;
        _2327 = _2307;
        _2329 = _2308;
    }
    else
    {
        uint _2333 = _2241 + 6u;
        float _2349 = (dot(vec3(cbLight._m0[_2241 + 2u].xyz), vec3(_1039, _1040, _1041)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4499 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _2352 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2325 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2306;
        _2327 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2307;
        _2329 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2308;
    }
    bool _2332 = _2312.y == 0u;
    float _2370;
    float _2372;
    float _2374;
    if (_2332)
    {
        _2370 = _2325;
        _2372 = _2327;
        _2374 = _2329;
    }
    else
    {
        uint _2540 = _2241 + 7u;
        float _2556 = (dot(vec3(cbLight._m0[_2241 + 3u].xyz), vec3(_1039, _1040, _1041)) * 0.5) + 0.5;
        float _2557 = _2556 * _2556;
        float _4515 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2558 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2559 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2370 = (((cbLight._m0[_2540].x * 0.3183098733425140380859375) * _2558) * _2559) + _2325;
        _2372 = (((cbLight._m0[_2540].y * 0.3183098733425140380859375) * _2558) * _2559) + _2327;
        _2374 = (((cbLight._m0[_2540].z * 0.3183098733425140380859375) * _2558) * _2559) + _2329;
    }
    uint _2377 = _2241 + 8u;
    float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _1042) * 0.949999988079071044921875);
    float _2391 = _2390 * _2390;
    float _2392 = cbLight._m0[_2241].x + _1118;
    float _2393 = cbLight._m0[_2241].y + _1119;
    float _2394 = cbLight._m0[_2241].z + _1120;
    float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
    float _2399 = _2398 * _2392;
    float _2400 = _2398 * _2393;
    float _2401 = _2398 * _2394;
    float _2402 = dot(vec3(_1039, _1040, _1041), vec3(cbLight._m0[_2241].xyz));
    float _4531 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
    float _4542 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
    float _2406 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _2407 = dot(vec3(_1039, _1040, _1041), vec3(_2399, _2400, _2401));
    float _4553 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
    float _2410 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2411 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2399, _2400, _2401));
    float _4564 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
    float _2415 = _2391 * _2391;
    float _2419 = ((_2410 * _2410) * (_2415 + (-1.0))) + 1.0;
    float _2427 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
    float _2428 = 0.959999978542327880859375 - _1185;
    float _2430 = 0.959999978542327880859375 - _1186;
    float _2431 = 0.959999978542327880859375 - _1187;
    float _2438 = 1.0 - _2391;
    float _2449 = (0.5 / (((_2406 * ((_2405 * _2438) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2438) + _2391) * _2405))) * _2405;
    float _4575 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2451 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2415 / ((_2419 * _2419) * 3.141590118408203125));
    uint _2462 = _2241 + 9u;
    float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2278].w)) * _1042) * 0.949999988079071044921875);
    float _2474 = _2473 * _2473;
    float _2475 = cbLight._m0[_2278].x + _1118;
    float _2476 = cbLight._m0[_2278].y + _1119;
    float _2477 = cbLight._m0[_2278].z + _1120;
    float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
    float _2482 = _2481 * _2475;
    float _2483 = _2481 * _2476;
    float _2484 = _2481 * _2477;
    float _2485 = dot(vec3(_1039, _1040, _1041), vec3(cbLight._m0[_2278].xyz));
    float _4586 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2488 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2489 = dot(vec3(_1039, _1040, _1041), vec3(_2482, _2483, _2484));
    float _4597 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
    float _2492 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2493 = dot(vec3(cbLight._m0[_2278].xyz), vec3(_2482, _2483, _2484));
    float _4608 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2497 = _2474 * _2474;
    float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
    float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2515 = 1.0 - _2474;
    float _2525 = (0.5 / (((_2406 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2515) + _2474) * _2488))) * _2488;
    float _4619 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
    float _2537 = (((((_2508 * _2428) + _1188) * cbLight._m0[_2462].x) * _2527) * _2264) + (((((_2427 * _2428) + _1188) * cbLight._m0[_2377].x) * _2451) * _2274);
    float _2538 = (((((_2508 * _2430) + _1190) * cbLight._m0[_2462].y) * _2527) * _2264) + (((((_2427 * _2430) + _1190) * cbLight._m0[_2377].y) * _2451) * _2274);
    float _2539 = (((((_2508 * _2431) + _1191) * cbLight._m0[_2462].z) * _2527) * _2264) + (((((_2427 * _2431) + _1191) * cbLight._m0[_2377].z) * _2451) * _2274);
    float _2601;
    float _2603;
    float _2605;
    if (_2314)
    {
        _2601 = _2537;
        _2603 = _2538;
        _2605 = _2539;
    }
    else
    {
        uint _2607 = _2241 + 2u;
        uint _2611 = _2241 + 10u;
        float _2625 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2607].w)) * _1042) * 0.949999988079071044921875);
        float _2626 = _2625 * _2625;
        float _2627 = cbLight._m0[_2607].x + _1118;
        float _2628 = cbLight._m0[_2607].y + _1119;
        float _2629 = cbLight._m0[_2607].z + _1120;
        float _2633 = inversesqrt(dot(vec3(_2627, _2628, _2629), vec3(_2627, _2628, _2629)));
        float _2634 = _2633 * _2627;
        float _2635 = _2633 * _2628;
        float _2636 = _2633 * _2629;
        float _2637 = dot(vec3(_1039, _1040, _1041), vec3(cbLight._m0[_2607].xyz));
        float _4630 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2640 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
        float _2641 = dot(vec3(_1039, _1040, _1041), vec3(_2634, _2635, _2636));
        float _4641 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2644 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2645 = dot(vec3(cbLight._m0[_2607].xyz), vec3(_2634, _2635, _2636));
        float _4652 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
        float _2649 = _2626 * _2626;
        float _2653 = ((_2644 * _2644) * (_2649 + (-1.0))) + 1.0;
        float _2660 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
        float _2667 = 1.0 - _2626;
        float _2677 = (0.5 / (((_2406 * ((_2640 * _2667) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2667) + _2626) * _2640))) * _2640;
        float _4663 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2679 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2649 / ((_2653 * _2653) * 3.141590118408203125));
        float _2680 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2601 = (((((_2660 * _2428) + _1188) * cbLight._m0[_2611].x) * _2679) * _2680) + _2537;
        _2603 = (((((_2660 * _2430) + _1190) * cbLight._m0[_2611].y) * _2679) * _2680) + _2538;
        _2605 = (((((_2660 * _2431) + _1191) * cbLight._m0[_2611].z) * _2679) * _2680) + _2539;
    }
    float _2715;
    float _2717;
    float _2719;
    if (_2332)
    {
        _2715 = _2601;
        _2717 = _2603;
        _2719 = _2605;
    }
    else
    {
        uint _2726 = _2241 + 3u;
        uint _2730 = _2241 + 11u;
        float _2744 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2726].w)) * _1042) * 0.949999988079071044921875);
        float _2745 = _2744 * _2744;
        float _2746 = cbLight._m0[_2726].x + _1118;
        float _2747 = cbLight._m0[_2726].y + _1119;
        float _2748 = cbLight._m0[_2726].z + _1120;
        float _2752 = inversesqrt(dot(vec3(_2746, _2747, _2748), vec3(_2746, _2747, _2748)));
        float _2753 = _2752 * _2746;
        float _2754 = _2752 * _2747;
        float _2755 = _2752 * _2748;
        float _2756 = dot(vec3(_1039, _1040, _1041), vec3(cbLight._m0[_2726].xyz));
        float _4679 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2759 = isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0));
        float _2760 = dot(vec3(_1039, _1040, _1041), vec3(_2753, _2754, _2755));
        float _4690 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
        float _2763 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2764 = dot(vec3(cbLight._m0[_2726].xyz), vec3(_2753, _2754, _2755));
        float _4701 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        float _2768 = _2745 * _2745;
        float _2772 = ((_2763 * _2763) * (_2768 + (-1.0))) + 1.0;
        float _2779 = exp2(log2(1.0 - (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0)))) * 5.0);
        float _2786 = 1.0 - _2745;
        float _2796 = (0.5 / (((_2406 * ((_2759 * _2786) + _2745)) + 9.9999999392252902907785028219223e-09) + (((_2406 * _2786) + _2745) * _2759))) * _2759;
        float _4712 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2798 = (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0))) * (_2768 / ((_2772 * _2772) * 3.141590118408203125));
        float _2799 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2715 = (((((_2779 * _2428) + _1188) * cbLight._m0[_2730].x) * _2798) * _2799) + _2601;
        _2717 = (((((_2779 * _2430) + _1190) * cbLight._m0[_2730].y) * _2798) * _2799) + _2603;
        _2719 = (((((_2779 * _2431) + _1191) * cbLight._m0[_2730].z) * _2798) * _2799) + _2605;
    }
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_2239.y == 0u)
    {
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2874;
        float _2876 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2874;
        float _2877 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2874;
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.x;
        uint _2901 = uint((float(_2889.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1127) / _2890))) + floor(float(uint(cbSceneParam._m0[85u].x * _1126) / _2890)));
        float _2911 = (log2(_2877 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2912 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        uint _2915 = uint(isnan(14.0) ? _2912 : (isnan(_2912) ? 14.0 : min(_2912, 14.0)));
        uvec4 _2920 = texelFetch(g_lightClusterGridBuffer, int(((_2915 << 2u) + (_2901 << 6u)) >> 2u));
        uint _2921 = _2920.x;
        uint _2922 = _2889.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2922 >> 4u) & 15u)) + 4294967295u) & _2921) == 0u) || ((_2922 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            uint _3173 = 0u;
            uint _3182;
            bool _3183;
            for (;;)
            {
                _3182 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                _3183 = _3182 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3183)
                {
                    frontier_phi_61_pred = _3167;
                    frontier_phi_61_pred_1 = _3172;
                    frontier_phi_61_pred_2 = _3171;
                    frontier_phi_61_pred_3 = _3170;
                    frontier_phi_61_pred_4 = _3169;
                    frontier_phi_61_pred_5 = _3168;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3182;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3173 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2875;
                        float _3358 = _3317.y - _2876;
                        float _3359 = _3317.z - _2877;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_1145, _1148, _1151), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4738 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2875;
                        float _3393 = (-0.0) - _2876;
                        float _3394 = (-0.0) - _2877;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3409 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3410 = 1.0 - _1220;
                        float _3417 = sqrt(1.0 - ((1.0 - (_3410 * _3410)) * (1.0 - (_3409 * _3409))));
                        float _3418 = _3417 * _3417;
                        float _3419 = _3418 * _3418;
                        float _3420 = _3399 + _3364;
                        float _3421 = _3400 + _3365;
                        float _3422 = _3401 + _3366;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3430 = dot(vec3(_1145, _1148, _1151), vec3(_3399, _3400, _3401));
                        float _4754 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                        float _3433 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3434 = dot(vec3(_1145, _1148, _1151), vec3(_3426 * _3420, _3426 * _3421, _3426 * _3422));
                        float _4765 = isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0));
                        float _3437 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3441 = ((_3437 * _3437) * (_3419 + (-1.0))) + 1.0;
                        float _3442 = _3377 * _3418;
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3367) + _3443;
                        float _4776 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                        float _3447 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3448 = 1.0 - _3418;
                        float _3458 = (0.5 / (((_3447 * ((_3433 * _3448) + _3418)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3418) * _3433))) * _3447;
                        float _4787 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                        float _3469 = (((_3419 * 3.1415927410125732421875) * (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) / ((_3441 * _3441) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3226 = (_3388 * _3336.x) + _3294;
                        _3227 = (_3388 * _3336.y) + _3295;
                        _3228 = (_3388 * _3336.z) + _3296;
                        _3223 = (_3469 * _3353.x) + _3291;
                        _3224 = (_3469 * _3353.y) + _3292;
                        _3225 = (_3469 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_61_pred = _3223;
                    frontier_phi_61_pred_1 = _3228;
                    frontier_phi_61_pred_2 = _3227;
                    frontier_phi_61_pred_3 = _3226;
                    frontier_phi_61_pred_4 = _3225;
                    frontier_phi_61_pred_5 = _3224;
                }
                _3023 = frontier_phi_61_pred;
                _3033 = frontier_phi_61_pred_1;
                _3031 = frontier_phi_61_pred_2;
                _3029 = frontier_phi_61_pred_3;
                _3027 = frontier_phi_61_pred_4;
                _3025 = frontier_phi_61_pred_5;
                uint _3174 = _3173 + 1u;
                if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3167 = _3023;
                    _3168 = _3025;
                    _3169 = _3027;
                    _3170 = _3029;
                    _3171 = _3031;
                    _3172 = _3033;
                    _3173 = _3174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((4294967295u << _3039) & _2921) == 0u)
        {
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
            _3145 = _3032;
        }
        else
        {
            float _3160 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
            float _3161 = _3160 * _2875;
            float _3162 = _3160 * _2876;
            float _3163 = _3160 * _2877;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3274 = _3022;
                float _3275 = _3024;
                float _3276 = _3026;
                float _3277 = _3028;
                float _3278 = _3030;
                float _3279 = _3032;
                uint _3280 = _3039;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2915 << 5u) + (_2901 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3290)
                    {
                        frontier_phi_67_pred = _3277;
                        frontier_phi_67_pred_1 = _3278;
                        frontier_phi_67_pred_2 = _3279;
                        frontier_phi_67_pred_3 = _3276;
                        frontier_phi_67_pred_4 = _3275;
                        frontier_phi_67_pred_5 = _3274;
                    }
                    else
                    {
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        uint _3493 = _3289;
                        uint _3494;
                        vec4 _3519;
                        float _3520;
                        vec4 _3535;
                        vec3 _3547;
                        vec4 _3562;
                        vec4 _3577;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3504 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3493));
                            _3494 = (_3493 + 4294967295u) & _3493;
                            uint _3506 = _3504 * 40u;
                            _3519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3506 + 3u)).x));
                            _3520 = _3519.w;
                            uint _3522 = (_3504 * 40u) + 4u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3504 * 40u) + 8u;
                            _3547 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x));
                            uint _3549 = (_3504 * 40u) + 16u;
                            _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            uint _3564 = (_3504 * 40u) + 20u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            uint _3579 = (_3504 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3504 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2877, _3611.z, fma(_2876, _3611.y, _3611.x * _2875)) + _3611.w;
                            _3624 = !((fma(_2877, _3592.z, fma(_2876, _3592.y, _3592.x * _2875)) + _3592.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3519.x - _2875;
                                float _3652 = _3519.y - _2876;
                                float _3653 = _3519.z - _2877;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3520 * _3520));
                                float _4798 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                                float _3669 = sqrt(_3654) * _3535.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_1145, _1148, _1151))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2877, _3562.z, fma(_2876, _3562.y, _3562.x * _2875)) + _3562.w) / _3623;
                                float _3683 = (fma(_2877, _3577.z, fma(_2876, _3577.y, _3577.x * _2875)) + _3577.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4814 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _1220;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3161;
                                float _3713 = _3659 - _3162;
                                float _3714 = _3660 - _3163;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_1145, _1148, _1151), vec3((-0.0) - _3161, (-0.0) - _3162, (-0.0) - _3163));
                                float _4825 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3726 = dot(vec3(_1145, _1148, _1151), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4836 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_1145, _1148, _1151), vec3(_3658, _3659, _3660))) + _3735;
                                float _4847 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4858 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3763 * _3547.x;
                                frontier_phi_73_pred_1 = _3763 * _3547.y;
                                frontier_phi_73_pred_2 = _3689 * _3535.z;
                                frontier_phi_73_pred_3 = _3689 * _3535.y;
                                frontier_phi_73_pred_4 = _3689 * _3535.x;
                                frontier_phi_73_pred_5 = _3763 * _3547.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3767 = frontier_phi_73_pred;
                            _3768 = frontier_phi_73_pred_1;
                            _3772 = frontier_phi_73_pred_2;
                            _3771 = frontier_phi_73_pred_3;
                            _3770 = frontier_phi_73_pred_4;
                            _3769 = frontier_phi_73_pred_5;
                            _3477 = _3770 + _3490;
                            _3478 = _3771 + _3491;
                            _3479 = _3772 + _3492;
                            _3474 = _3767 + _3487;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            if (_3494 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3494;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3477;
                        frontier_phi_67_pred_1 = _3478;
                        frontier_phi_67_pred_2 = _3479;
                        frontier_phi_67_pred_3 = _3476;
                        frontier_phi_67_pred_4 = _3475;
                        frontier_phi_67_pred_5 = _3474;
                    }
                    _3142 = frontier_phi_67_pred;
                    _3144 = frontier_phi_67_pred_1;
                    _3146 = frontier_phi_67_pred_2;
                    _3140 = frontier_phi_67_pred_3;
                    _3138 = frontier_phi_67_pred_4;
                    _3136 = frontier_phi_67_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3136;
                        _3275 = _3138;
                        _3276 = _3140;
                        _3277 = _3142;
                        _3278 = _3144;
                        _3279 = _3146;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3144;
                frontier_phi_55_56_ladder_1 = _3146;
                frontier_phi_55_56_ladder_2 = _3142;
                frontier_phi_55_56_ladder_3 = _3140;
                frontier_phi_55_56_ladder_4 = _3138;
                frontier_phi_55_56_ladder_5 = _3136;
            }
            else
            {
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            _3135 = frontier_phi_55_56_ladder_5;
            _3137 = frontier_phi_55_56_ladder_4;
            _3139 = frontier_phi_55_56_ladder_3;
            _3141 = frontier_phi_55_56_ladder_2;
            _3143 = frontier_phi_55_56_ladder;
            _3145 = frontier_phi_55_56_ladder_1;
        }
        float _3150 = isnan(1.0) ? _1204 : (isnan(_1204) ? 1.0 : min(_1204, 1.0));
        _2934 = (_3150 * _3141) + _2370;
        _2936 = (_3150 * _3143) + _2372;
        _2938 = (_3150 * _3145) + _2374;
        _2940 = ((_3135 * _1188) * _3150) + _2715;
        _2942 = ((_3137 * _1190) * _3150) + _2717;
        _2944 = ((_3139 * _1191) * _3150) + _2719;
    }
    else
    {
        _2934 = _2370;
        _2936 = _2372;
        _2938 = _2374;
        _2940 = _2715;
        _2942 = _2717;
        _2944 = _2719;
    }
    float _4874 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _4885 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _4896 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    uint _2964 = _269 + 6u;
    float _2972 = _1126 / cbSceneParam._m0[86u].x;
    float _2973 = _1127 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _1061 : (isnan(_1061) ? cbSceneParam._m0[77u].w : min(_1061, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_1061 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_1061) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1061 : min(cbSceneParam._m0[80u].w, _1061));
        float _3048 = _3047 / _1061;
        float _3059 = _3048 * _1111;
        float _3060 = _1112 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3063 = _3048 * _1113;
        float _3065 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3060;
        float _3073 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3061 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3196 = 1.0 / cbSceneParam._m0[80u].x;
            float _3197 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3198 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            _3236 = ((abs(_3073 / _3061) * cbSceneParam._m0[80u].y) * ((((_3207 - _3208) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))))) * _3196)) - ((exp2(_3083 * _3207) - exp2(_3083 * _3208)) * _3196))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_2992);
        _3085 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3087 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3089 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3091 = _3247 * _2992;
    }
    else
    {
        _3085 = _2989;
        _3087 = _2990;
        _3089 = _2991;
        _3091 = _2992;
    }
    float _3103 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3104 = _3103 == 3.0;
    float _3105 = log2(_3091);
    float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2934 + ((isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0))) * _1204))) + ((_2940 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2936 + ((isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0))) * _1204))) + ((_2942 + ((isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2938 + ((isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))) * _1204))) + ((_2944 + ((isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0))) * _2010)) * cbPerFrame._m0[3u].x));
    float _3123 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3123 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.y = _3123 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.z = _3123 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.w = cbInstanceData._m0[_2964].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2964].w;
}


