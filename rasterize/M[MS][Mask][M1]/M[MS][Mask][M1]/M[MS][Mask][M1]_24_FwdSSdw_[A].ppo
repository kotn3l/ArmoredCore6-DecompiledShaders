#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1377;
float _3782;
float _3783;
float _3784;
float _3785;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _234 = _233 * _225;
    float _235 = _233 * _226;
    float _236 = _233 * _227;
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = _240 * NORMAL.x;
    float _242 = _240 * NORMAL.y;
    float _243 = _240 * NORMAL.z;
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = _247 * TANGENT.x;
    float _249 = _247 * TANGENT.y;
    float _250 = _247 * TANGENT.z;
    float _261 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _264 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3794 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _3805 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _3816 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    uint _274 = uint(roundEven(NORMAL.w)) * 13u;
    uint _279 = _274 + 1u;
    uint _283 = _274 + 2u;
    float _292 = sqrt(((cbInstanceData._m0[_279].x * cbInstanceData._m0[_279].x) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x)) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x));
    float _293 = _292 * TEXCOORD.z;
    float _294 = _292 * TEXCOORD.w;
    vec4 _307 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _293) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _294) + cbTextureTilingScale._m0[13u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _293) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _294) + cbTextureTilingScale._m0[5u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _432 = _430.x;
    float _444 = dot(vec4(_432, _430.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _461 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_432 - _444) * cbMtdParam._m0[23u].w) + _444) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3827 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _472 = (_330.x * cbMtdParam._m0[9u].x) * ((_462 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361);
    float _473 = (_330.y * cbMtdParam._m0[9u].y) * ((_462 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362);
    float _474 = (_330.z * cbMtdParam._m0[9u].z) * ((_462 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363);
    float _478 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _307.x) * _472;
    float _481 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _307.y) * _473;
    float _484 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _307.z) * _474;
    float _492 = (((_472 - _478) * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) + _478) * 4.55000019073486328125;
    float _494 = (((_473 - _481) * (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0)))) + _481) * 4.55000019073486328125;
    float _496 = (((_474 - _484) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) + _484) * 4.55000019073486328125;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _293) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _294) + cbTextureTilingScale._m0[20u].w));
    vec4 _541 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _293) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _294) + cbTextureTilingScale._m0[4u].w));
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _560 = _558.x;
    float _561 = _558.y;
    float _562 = _558.z;
    float _571 = ((_541.z - _562) * _462) + _562;
    float _574 = ((((_541.x - _560) * _462) + _560) * 2.0) + (-1.0);
    float _575 = ((((_541.y - _561) * _462) + _561) * 2.0) + (-1.0);
    float _576 = dot(vec2(_574, _575), vec2(_574, _575));
    float _3838 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _581 = sqrt(1.0 - (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))));
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _613 = (_574 + ((((_514.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_601.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _614 = (_575 + ((((_514.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_601.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _617 = fma(_581, _241, fma(_614, _248, _613 * _234));
    float _620 = fma(_581, _242, fma(_614, _249, _613 * _235));
    float _623 = fma(_581, _243, fma(_614, _250, _613 * _236));
    float _627 = inversesqrt(dot(vec3(_617, _620, _623), vec3(_617, _620, _623)));
    vec4 _654 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _293) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _294) + cbTextureTilingScale._m0[11u].w));
    float _656 = _654.x;
    float _657 = 1.0 - _656;
    float _666 = (cbMtdParam._m0[19u].x + dot(vec4(_627 * _617, _627 * _620, _627 * _623, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_656 - _657) * cbMtdParam._m0[24u].z) + _657) * cbMtdParam._m0[21u].z);
    float _3849 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
    float _667 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _674 = (_667 * (cbMtdParam._m0[17u].x - _492)) + _492;
    float _675 = (_667 * (cbMtdParam._m0[17u].y - _494)) + _494;
    float _676 = (_667 * (cbMtdParam._m0[17u].z - _496)) + _496;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _702 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _704 = _702.x;
    float _721 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _293) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _294) + cbTextureTilingScale._m0[9u].w)).x - _704) * _462) + _704;
    float _725 = ((_688.x - _721) * cbMtdParam._m0[19u].z) + _721;
    float _727 = _725 - (_725 * _667);
    float _732 = (((_514.z - _571) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _571;
    float _736 = ((_601.z - _732) * cbMtdParam._m0[19u].w) + _732;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _293) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _294) + cbTextureTilingScale._m0[15u].w));
    float _756 = (_749.x * 2.0) + (-1.0);
    float _757 = (_749.y * 2.0) + (-1.0);
    float _758 = dot(vec2(_756, _757), vec2(_756, _757));
    float _3860 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _766 = ((_749.z - _736) * _667) + _736;
    float _776 = ((sqrt(1.0 - (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) - _581) * _667) + _581;
    float _779 = (((_756 - _613) * _667) + _613) + (cbMtdParam._m0[21u].x * _613);
    float _780 = (((_757 - _614) * _667) + _614) + (cbMtdParam._m0[21u].x * _614);
    float _782 = cbMtdParam._m0[22u].x + _601.w;
    float _785 = fma(_776, _241, fma(_780, _248, _779 * _234));
    float _788 = fma(_776, _242, fma(_780, _249, _779 * _235));
    float _791 = fma(_776, _243, fma(_780, _250, _779 * _236));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3871 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _799 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _3882 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3893 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3904 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3915 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3926 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _804 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _869 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _859);
    float _870 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _859);
    float _871 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _859);
    float _875 = inversesqrt(dot(vec3(_869, _870, _871), vec3(_869, _870, _871)));
    float _876 = _869 * _875;
    float _877 = _870 * _875;
    float _878 = _871 * _875;
    vec4 _883 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _885 = _883.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1057 = sqrt(((_869 * _869) + (_870 * _870)) + (_871 * _871));
        float _1063 = (cbMatDynParam._m0[5u].x * _1057) + cbMatDynParam._m0[5u].y;
        float _3937 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1068 = (cbMatDynParam._m0[5u].z * _1057) + cbMatDynParam._m0[5u].w;
        float _3948 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) - _1064)) + _1064) < ((_885 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _896 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _897 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _915 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _918 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _921 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _934 = _274 + 9u;
    uint _935 = _934 + uint(cbMatDynParam._m0[0u].w);
    float _941 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) * cbInstanceData._m0[_935].x;
    float _942 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_935].y;
    float _943 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_935].z;
    float _3959 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    float _3981 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _947 = 1.0 - _804;
    float _948 = _944 * _947;
    float _949 = _945 * _947;
    float _950 = _946 * _947;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _804;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _804;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _804;
    float _958 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    float _961 = _957 + 0.039999999105930328369140625;
    vec4 _970 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _896, cbSceneParam._m0[86u].y * _897));
    float _974 = ((isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * TEXCOORD_5.w) * _970.x;
    float _975 = dot(vec3(_796, _797, _798), vec3(_876, _877, _878));
    float _978 = _975 * 2.0;
    float _982 = (_978 * _796) - _876;
    float _983 = (_978 * _797) - _877;
    float _984 = (_978 * _798) - _878;
    float _988 = abs(dot(vec3(_876, _877, _878), vec3(_796, _797, _798)));
    float _3992 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _990 = sqrt(_799);
    float _1003 = exp2((_990 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_990 * 3.0));
    float _1009 = (1.0 - _1003) * ((_990 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1010 = _1003 * _990;
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1376;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1101 = fma(_1046, cbModelParam._m0[26u].z, fma(_1042, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1038));
        float _1105 = fma(_1046, cbModelParam._m0[27u].z, fma(_1042, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1038));
        float _1109 = fma(_1046, cbModelParam._m0[28u].z, fma(_1042, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1038));
        float _1134 = _1038 + _796;
        float _1135 = _1042 + _797;
        float _1136 = _1046 + _798;
        float _1146 = fma(_1136, cbModelParam._m0[26u].z, fma(_1135, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1134)) - _1101;
        float _1147 = fma(_1136, cbModelParam._m0[27u].z, fma(_1135, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1134)) - _1105;
        float _1148 = fma(_1136, cbModelParam._m0[28u].z, fma(_1135, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1134)) - _1109;
        float _1152 = inversesqrt(dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148)));
        float _1165 = ((_1152 * _1146) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1101 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1166 = ((_1152 * _1147) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1105 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1167 = ((_1152 * _1148) / cbModelParam._m0[34u].z) + ((((((_1109 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1184 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1191 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1204 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1170.x + (-0.5));
        float _1206 = _1204 * (_1170.y + (-0.5));
        float _1207 = _1204 * (_1170.z + (-0.5));
        float _1214 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1177.x + (-0.5));
        float _1216 = _1214 * (_1177.y + (-0.5));
        float _1217 = _1214 * (_1177.z + (-0.5));
        float _1224 = exp2((_1184.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1184.x + (-0.5));
        float _1226 = _1224 * (_1184.y + (-0.5));
        float _1227 = _1224 * (_1184.z + (-0.5));
        float _1234 = exp2((_1191.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1191.x + (-0.5));
        float _1236 = _1234 * (_1191.y + (-0.5));
        float _1237 = _1234 * (_1191.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1258 = (dot(vec3(_796, _797, _798), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _4018 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1268 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4029 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _4040 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1270 + 1.0))) + _1275) * _1238;
        float _1285 = _1206 * 0.5;
        float _1286 = _1216 * 0.5;
        float _1287 = _1226 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_796, _797, _798), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _4051 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _4062 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _4073 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_1312 + 1.0))) + _1317) * _1239;
        float _1327 = _1207 * 0.5;
        float _1328 = _1217 * 0.5;
        float _1329 = _1227 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_796, _797, _798), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _4084 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4095 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _4106 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * (_1354 + 1.0))) + _1359) * _1240;
        _1376 = _1207;
        _1378 = _1206;
        _1379 = _1205;
        _1380 = _1217;
        _1381 = _1216;
        _1382 = _1215;
        _1383 = _1227;
        _1384 = _1226;
        _1385 = _1225;
        _1386 = _1240;
        _1387 = _1239;
        _1388 = _1238;
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1390 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1377;
        _1378 = _1377;
        _1379 = _1377;
        _1380 = _1377;
        _1381 = _1377;
        _1382 = _1377;
        _1383 = _1377;
        _1384 = _1377;
        _1385 = _1377;
        _1386 = _1377;
        _1387 = _1377;
        _1388 = _1377;
        _1389 = 0.0;
        _1390 = 0.0;
        _1391 = 0.0;
    }
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1419 = fma(_1046, cbModelParam._m0[30u].z, fma(_1042, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1038));
        float _1423 = fma(_1046, cbModelParam._m0[31u].z, fma(_1042, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1038));
        float _1427 = fma(_1046, cbModelParam._m0[32u].z, fma(_1042, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1038));
        float _1450 = _1038 + _796;
        float _1451 = _1042 + _797;
        float _1452 = _1046 + _798;
        float _1462 = fma(_1452, cbModelParam._m0[30u].z, fma(_1451, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1450)) - _1419;
        float _1463 = fma(_1452, cbModelParam._m0[31u].z, fma(_1451, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1450)) - _1423;
        float _1464 = fma(_1452, cbModelParam._m0[32u].z, fma(_1451, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1450)) - _1427;
        float _1468 = inversesqrt(dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464)));
        float _1481 = ((_1468 * _1462) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1419 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1468 * _1463) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1423 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1483 = ((_1468 * _1464) / cbModelParam._m0[35u].z) + ((((((_1427 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1481, _1482, _1483), 0.0);
        float _1518 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1519 = _1518 * (_1485.x + (-0.5));
        float _1520 = _1518 * (_1485.y + (-0.5));
        float _1521 = _1518 * (_1485.z + (-0.5));
        float _1528 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1529 = _1528 * (_1492.x + (-0.5));
        float _1530 = _1528 * (_1492.y + (-0.5));
        float _1531 = _1528 * (_1492.z + (-0.5));
        float _1538 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1539 = _1538 * (_1499.x + (-0.5));
        float _1540 = _1538 * (_1499.y + (-0.5));
        float _1541 = _1538 * (_1499.z + (-0.5));
        float _1548 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1506.x + (-0.5));
        float _1550 = _1548 * (_1506.y + (-0.5));
        float _1551 = _1548 * (_1506.z + (-0.5));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = _1519 * 0.5;
        float _1556 = _1529 * 0.5;
        float _1557 = _1539 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_796, _797, _798), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4147 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4158 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4169 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_1582 + 1.0))) + _1587) * _1552;
        float _1597 = _1520 * 0.5;
        float _1598 = _1530 * 0.5;
        float _1599 = _1540 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_796, _797, _798), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4202 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1624 + 1.0))) + _1629) * _1553;
        float _1639 = _1521 * 0.5;
        float _1640 = _1531 * 0.5;
        float _1641 = _1541 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_796, _797, _798), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4235 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1666 + 1.0))) + _1671) * _1554;
        _1688 = _1521;
        _1689 = _1520;
        _1690 = _1519;
        _1691 = _1531;
        _1692 = _1530;
        _1693 = _1529;
        _1694 = _1541;
        _1695 = _1540;
        _1696 = _1539;
        _1697 = _1554;
        _1698 = _1553;
        _1699 = _1552;
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
    }
    else
    {
        _1688 = _1377;
        _1689 = _1377;
        _1690 = _1377;
        _1691 = _1377;
        _1692 = _1377;
        _1693 = _1377;
        _1694 = _1377;
        _1695 = _1377;
        _1696 = _1377;
        _1697 = _1377;
        _1698 = _1377;
        _1699 = _1377;
        _1700 = 0.0;
        _1701 = 0.0;
        _1702 = 0.0;
    }
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1389)) + _1389;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1390)) + _1390;
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1735 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1738 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1741 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1712));
    float _1756 = _982 * 0.5;
    float _1757 = _983 * 0.5;
    float _1758 = _984 * 0.5;
    float _1759 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1762 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1765 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1799;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1772 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1376, _1380, _1383, _1386));
        float _1776 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1378, _1381, _1384, _1387));
        float _1780 = dot(vec4(_1756, _1757, _1758, 1.0), vec4(_1379, _1382, _1385, _1388));
        float _1787 = dot(vec4(cbModelParam._m0[39u]), vec4(_1756, _1757, _1758, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)), isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1810;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1801 = dot(vec4(cbModelParam._m0[40u]), vec4(_1756, _1757, _1758, 1.0));
        _1810 = dot(vec3(isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1801) ? 0.0 : (isnan(0.0) ? _1801 : max(0.0, _1801))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1810 = 1.0;
    }
    float _1814 = (_1810 * cbModelParam._m0[1u].x) + (_1799 * (1.0 - cbModelParam._m0[1u].x));
    float _1824 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1825 = isnan(_1824) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1824 : min(cbModelParam._m0[25u].z, _1824));
    float _1906;
    float _1908;
    float _1910;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1873 = fma(_1046, cbModelParam._m0[13u].z, fma(_1042, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1038)) + cbModelParam._m0[13u].w;
        float _1877 = fma(_1046, cbModelParam._m0[14u].z, fma(_1042, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1038)) + cbModelParam._m0[14u].w;
        float _1881 = fma(_1046, cbModelParam._m0[15u].z, fma(_1042, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1038)) + cbModelParam._m0[15u].w;
        float _1884 = fma(_984, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _982));
        float _1887 = fma(_984, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _982));
        float _1890 = fma(_984, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _982));
        float _1918;
        if (_1884 > 0.0)
        {
            _1918 = abs((1.0 - _1873) / _1884);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1873 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1918 = frontier_phi_17_15_ladder;
        }
        float _2142;
        if (_1887 > 0.0)
        {
            _2142 = abs((1.0 - _1877) / _1887);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1877 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2142 = frontier_phi_26_22_ladder;
        }
        float _2399;
        if (_1890 > 0.0)
        {
            _2399 = abs((1.0 - _1881) / _1890);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1881 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2399 = frontier_phi_38_33_ladder;
        }
        float _2401 = isnan(_2142) ? _1918 : (isnan(_1918) ? _2142 : min(_1918, _2142));
        float _2402 = isnan(_2399) ? _2401 : (isnan(_2401) ? _2399 : min(_2401, _2399));
        float _2406 = (_2402 * _1884) + _1873;
        float _2407 = (_2402 * _1887) + _1877;
        float _2408 = (_2402 * _1890) + _1881;
        float _2409 = _2402 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2409;
        float _2413 = _2409 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 > _2413) || ((_2407 < _2411) || ((_2406 < _2411) || (_2406 > _2413))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2536 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2408, cbModelParam._m0[9u].z, fma(_2407, cbModelParam._m0[9u].y, _2406 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2408, cbModelParam._m0[10u].z, fma(_2407, cbModelParam._m0[10u].y, _2406 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2408, cbModelParam._m0[11u].z, fma(_2407, cbModelParam._m0[11u].y, _2406 * cbModelParam._m0[11u].x))), _1825);
            frontier_phi_16_38_ladder = _2536.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2536.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2536.x * cbModelParam._m0[1u].y;
        }
        _1906 = frontier_phi_16_38_ladder_2;
        _1908 = frontier_phi_16_38_ladder_1;
        _1910 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1894 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_982, _983, _984), _1825);
        _1906 = _1894.x * cbModelParam._m0[1u].y;
        _1908 = _1894.y * cbModelParam._m0[1u].y;
        _1910 = _1894.z * cbModelParam._m0[1u].y;
    }
    float _1914 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1914 : min(cbModelParam._m0[25u].w, _1914));
    float _2005;
    float _2007;
    float _2009;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1969 = fma(_1046, cbModelParam._m0[21u].z, fma(_1042, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1038)) + cbModelParam._m0[21u].w;
        float _1973 = fma(_1046, cbModelParam._m0[22u].z, fma(_1042, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1038)) + cbModelParam._m0[22u].w;
        float _1977 = fma(_1046, cbModelParam._m0[23u].z, fma(_1042, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1038)) + cbModelParam._m0[23u].w;
        float _1980 = fma(_984, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _982));
        float _1983 = fma(_984, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _982));
        float _1986 = fma(_984, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _982));
        float _2147;
        if (_1980 > 0.0)
        {
            _2147 = abs((1.0 - _1969) / _1980);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1969 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2147 = frontier_phi_28_24_ladder;
        }
        float _2426;
        if (_1983 > 0.0)
        {
            _2426 = abs((1.0 - _1973) / _1983);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1973 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2426 = frontier_phi_40_35_ladder;
        }
        float _2639;
        if (_1986 > 0.0)
        {
            _2639 = abs((1.0 - _1977) / _1986);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1977 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2639 = frontier_phi_49_46_ladder;
        }
        float _2641 = isnan(_2426) ? _2147 : (isnan(_2147) ? _2426 : min(_2147, _2426));
        float _2642 = isnan(_2639) ? _2641 : (isnan(_2641) ? _2639 : min(_2641, _2639));
        float _2646 = (_2642 * _1980) + _1969;
        float _2647 = (_2642 * _1983) + _1973;
        float _2648 = (_2642 * _1986) + _1977;
        float _2649 = _2642 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2649;
        float _2652 = _2649 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2648 > _2652) || ((_2648 < _2650) || ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 < _2650) || (_2646 > _2652))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2648, cbModelParam._m0[17u].z, fma(_2647, cbModelParam._m0[17u].y, _2646 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2648, cbModelParam._m0[18u].z, fma(_2647, cbModelParam._m0[18u].y, _2646 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2648, cbModelParam._m0[19u].z, fma(_2647, cbModelParam._m0[19u].y, _2646 * cbModelParam._m0[19u].x))), _1915);
            frontier_phi_25_49_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _2005 = frontier_phi_25_49_ladder_2;
        _2007 = frontier_phi_25_49_ladder_1;
        _2009 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1989 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_982, _983, _984), _1915);
        _2005 = _1989.x * cbModelParam._m0[1u].z;
        _2007 = _1989.y * cbModelParam._m0[1u].z;
        _2009 = _1989.z * cbModelParam._m0[1u].z;
    }
    float _2022 = (((_1009 * _958) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2005 - _1906)) + _1906);
    float _2024 = (((_1009 * _960) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1009 * _961) + _1010) * _974) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2029 = fma(_2026, cbSceneParam._m0[89u].z, fma(_2024, cbSceneParam._m0[89u].y, _2022 * cbSceneParam._m0[89u].x));
    float _2032 = fma(_2026, cbSceneParam._m0[90u].z, fma(_2024, cbSceneParam._m0[90u].y, _2022 * cbSceneParam._m0[90u].x));
    float _2035 = fma(_2026, cbSceneParam._m0[91u].z, fma(_2024, cbSceneParam._m0[91u].y, _2022 * cbSceneParam._m0[91u].x));
    vec4 _2043 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_896, _897));
    float _2045 = _2043.w;
    float _2057 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2045);
    float _2058 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2045);
    float _2059 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2045);
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_274 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2073 = _974 + (-1.0);
    float _2078 = (cbLight._m0[_2066].x * _2073) + 1.0;
    float _2079 = (cbLight._m0[_2066].y * _2073) + 1.0;
    float _2080 = (cbLight._m0[_2066].z * _2073) + 1.0;
    float _2081 = (cbLight._m0[_2066].w * _2073) + 1.0;
    uint _2082 = _2065 + 5u;
    float _2088 = isnan(1.0) ? _2079 : (isnan(_2079) ? 1.0 : min(_2079, 1.0));
    uint _2092 = _2065 + 4u;
    float _2101 = isnan(1.0) ? _2078 : (isnan(_2078) ? 1.0 : min(_2078, 1.0));
    uint _2105 = _2065 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_796, _797, _798));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_796, _797, _798));
    float _4371 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4382 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2082].x * _2088) * _2126) + (((cbLight._m0[_2092].x * _2057) * _2101) * _2124);
    float _2134 = ((_2088 * cbLight._m0[_2082].y) * _2126) + (((cbLight._m0[_2092].y * _2058) * _2101) * _2124);
    float _2135 = ((_2088 * cbLight._m0[_2082].z) * _2126) + (((cbLight._m0[_2092].z * _2059) * _2101) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2065 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2141)
    {
        _2152 = _2133;
        _2154 = _2134;
        _2156 = _2135;
    }
    else
    {
        uint _2160 = _2065 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_2065 + 2u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4393 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2179 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2133;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2134;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2135;
    }
    bool _2159 = _2139.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2159)
    {
        _2197 = _2152;
        _2199 = _2154;
        _2201 = _2156;
    }
    else
    {
        uint _2370 = _2065 + 7u;
        float _2386 = (dot(vec3(cbLight._m0[_2065 + 3u].xyz), vec3(_796, _797, _798)) * 0.5) + 0.5;
        float _2387 = _2386 * _2386;
        float _4409 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2388 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2389 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2197 = (((cbLight._m0[_2370].x * 0.3183098733425140380859375) * _2388) * _2389) + _2152;
        _2199 = (((cbLight._m0[_2370].y * 0.3183098733425140380859375) * _2388) * _2389) + _2154;
        _2201 = (((cbLight._m0[_2370].z * 0.3183098733425140380859375) * _2388) * _2389) + _2156;
    }
    uint _2204 = _2065 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _799) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2065].x + _876;
    float _2220 = cbLight._m0[_2065].y + _877;
    float _2221 = cbLight._m0[_2065].z + _878;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2065].xyz));
    float _4425 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _4436 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _2233 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2234 = dot(vec3(_796, _797, _798), vec3(_2226, _2227, _2228));
    float _4447 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2226, _2227, _2228));
    float _4458 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0);
    float _2255 = 0.959999978542327880859375 - _955;
    float _2257 = 0.959999978542327880859375 - _956;
    float _2258 = 0.959999978542327880859375 - _957;
    float _2265 = 1.0 - _2218;
    float _2276 = (0.5 / (((_2233 * ((_2232 * _2265) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2265) + _2218) * _2232))) * _2232;
    float _4469 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2292 = _2065 + 9u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _799) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2105].x + _876;
    float _2306 = cbLight._m0[_2105].y + _877;
    float _2307 = cbLight._m0[_2105].z + _878;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2105].xyz));
    float _4480 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2319 = dot(vec3(_796, _797, _798), vec3(_2312, _2313, _2314));
    float _4491 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2322 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
    float _2323 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2312, _2313, _2314));
    float _4502 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _2327 = _2304 * _2304;
    float _2331 = ((_2322 * _2322) * (_2327 + (-1.0))) + 1.0;
    float _2338 = exp2(log2(1.0 - (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0)))) * 5.0);
    float _2345 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2233 * ((_2318 * _2345) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2345) + _2304) * _2318))) * _2318;
    float _4513 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0))) * (_2327 / ((_2331 * _2331) * 3.141590118408203125));
    float _2367 = (((((_2338 * _2255) + _958) * cbLight._m0[_2292].x) * _2357) * _2088) + ((((cbLight._m0[_2204].x * _2057) * ((_2254 * _2255) + _958)) * _2278) * _2101);
    float _2368 = (((((_2338 * _2257) + _960) * cbLight._m0[_2292].y) * _2357) * _2088) + ((((cbLight._m0[_2204].y * _2058) * ((_2254 * _2257) + _960)) * _2278) * _2101);
    float _2369 = (((((_2338 * _2258) + _961) * cbLight._m0[_2292].z) * _2357) * _2088) + ((((cbLight._m0[_2204].z * _2059) * ((_2254 * _2258) + _961)) * _2278) * _2101);
    float _2431;
    float _2433;
    float _2435;
    if (_2141)
    {
        _2431 = _2367;
        _2433 = _2368;
        _2435 = _2369;
    }
    else
    {
        uint _2437 = _2065 + 2u;
        uint _2441 = _2065 + 10u;
        float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2437].w)) * _799) * 0.949999988079071044921875);
        float _2456 = _2455 * _2455;
        float _2457 = cbLight._m0[_2437].x + _876;
        float _2458 = cbLight._m0[_2437].y + _877;
        float _2459 = cbLight._m0[_2437].z + _878;
        float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
        float _2464 = _2463 * _2457;
        float _2465 = _2463 * _2458;
        float _2466 = _2463 * _2459;
        float _2467 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2437].xyz));
        float _4524 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
        float _2470 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2471 = dot(vec3(_796, _797, _798), vec3(_2464, _2465, _2466));
        float _4535 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2474 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _2475 = dot(vec3(cbLight._m0[_2437].xyz), vec3(_2464, _2465, _2466));
        float _4546 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2479 = _2456 * _2456;
        float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
        float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0)))) * 5.0);
        float _2497 = 1.0 - _2456;
        float _2507 = (0.5 / (((_2233 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2497) + _2456) * _2470))) * _2470;
        float _4557 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2509 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
        float _2510 = isnan(1.0) ? _2080 : (isnan(_2080) ? 1.0 : min(_2080, 1.0));
        _2431 = (((((_2490 * _2255) + _958) * cbLight._m0[_2441].x) * _2509) * _2510) + _2367;
        _2433 = (((((_2490 * _2257) + _960) * cbLight._m0[_2441].y) * _2509) * _2510) + _2368;
        _2435 = (((((_2490 * _2258) + _961) * cbLight._m0[_2441].z) * _2509) * _2510) + _2369;
    }
    float _2545;
    float _2547;
    float _2549;
    if (_2159)
    {
        _2545 = _2431;
        _2547 = _2433;
        _2549 = _2435;
    }
    else
    {
        uint _2556 = _2065 + 3u;
        uint _2560 = _2065 + 11u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _799) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _876;
        float _2577 = cbLight._m0[_2556].y + _877;
        float _2578 = cbLight._m0[_2556].z + _878;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2556].xyz));
        float _4573 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2590 = dot(vec3(_796, _797, _798), vec3(_2583, _2584, _2585));
        float _4584 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4595 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2233 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2616) + _2575) * _2589))) * _2589;
        float _4606 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
        _2545 = (((((_2609 * _2255) + _958) * cbLight._m0[_2560].x) * _2628) * _2629) + _2431;
        _2547 = (((((_2609 * _2257) + _960) * cbLight._m0[_2560].y) * _2628) * _2629) + _2433;
        _2549 = (((((_2609 * _2258) + _961) * cbLight._m0[_2560].z) * _2628) * _2629) + _2435;
    }
    float _2764;
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    if (_2063.y == 0u)
    {
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2705 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2704;
        float _2706 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2704;
        float _2707 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2704;
        uvec4 _2719 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2720 = _2719.x;
        uint _2731 = uint((float(_2719.y) * floor(float(uint(cbSceneParam._m0[85u].y * _897) / _2720))) + floor(float(uint(cbSceneParam._m0[85u].x * _896) / _2720)));
        float _2741 = (log2(_2707 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2742 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        uint _2745 = uint(isnan(14.0) ? _2742 : (isnan(_2742) ? 14.0 : min(_2742, 14.0)));
        uvec4 _2750 = texelFetch(g_lightClusterGridBuffer, int(((_2745 << 2u) + (_2731 << 6u)) >> 2u));
        uint _2751 = _2750.x;
        uint _2752 = _2719.z;
        float _2852;
        float _2854;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        if (((((1u << ((_2752 >> 4u) & 15u)) + 4294967295u) & _2751) == 0u) || ((_2752 & 240u) == 0u))
        {
            _2852 = 0.0;
            _2854 = 0.0;
            _2856 = 0.0;
            _2858 = 0.0;
            _2860 = 0.0;
            _2862 = 0.0;
        }
        else
        {
            float _2853;
            float _2855;
            float _2857;
            float _2859;
            float _2861;
            float _2863;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            float _3008 = 0.0;
            float _3009 = 0.0;
            float _3010 = 0.0;
            uint _3011 = 0u;
            uint _3020;
            bool _3021;
            for (;;)
            {
                _3020 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3011 << 2u)) >> 2u)).x;
                _3021 = _3020 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3021)
                {
                    frontier_phi_66_pred = _3005;
                    frontier_phi_66_pred_1 = _3010;
                    frontier_phi_66_pred_2 = _3009;
                    frontier_phi_66_pred_3 = _3008;
                    frontier_phi_66_pred_4 = _3007;
                    frontier_phi_66_pred_5 = _3006;
                }
                else
                {
                    float _3150;
                    float _3151;
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    uint _3156;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3008;
                    _3154 = _3009;
                    _3155 = _3010;
                    _3156 = _3020;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    for (;;)
                    {
                        uint _3160 = uint(findLSB(_3156)) + (_3011 << 5u);
                        uint _3157 = (_3156 + 4294967295u) & _3156;
                        uint _3162 = _3160 * 48u;
                        vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3162)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3162 + 3u)).x));
                        uint _3182 = (_3160 * 48u) + 4u;
                        vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3201 = (_3160 * 48u) + 8u;
                        vec3 _3212 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3201)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3201 + 2u)).x));
                        float _3216 = _3176.x - _2705;
                        float _3217 = _3176.y - _2706;
                        float _3218 = _3176.z - _2707;
                        float _3219 = dot(vec3(_3216, _3217, _3218), vec3(_3216, _3217, _3218));
                        float _3222 = inversesqrt(_3219);
                        float _3223 = _3222 * _3216;
                        float _3224 = _3222 * _3217;
                        float _3225 = _3222 * _3218;
                        float _3226 = dot(vec3(_915, _918, _921), vec3(_3223, _3224, _3225));
                        float _3231 = 1.0 - (_3219 * _3176.w);
                        float _4632 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3232 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3233 = sqrt(_3219) * _3195.w;
                        float _3236 = 1.39999997615814208984375 / (_3233 + 1.39999997615814208984375);
                        float _3237 = _3236 * _3236;
                        float _3240 = ((1.0 - _3237) * _3226) + _3237;
                        float _3243 = _3233 * _3233;
                        float _3247 = ((isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0))) * _3232) / ((_3243 * 0.699999988079071044921875) + 1.0);
                        float _3251 = (-0.0) - _2705;
                        float _3252 = (-0.0) - _2706;
                        float _3253 = (-0.0) - _2707;
                        float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                        float _3258 = _3257 * _3251;
                        float _3259 = _3257 * _3252;
                        float _3260 = _3257 * _3253;
                        float _3268 = exp2(log2(1.0 / ((_3243 * 3.5) + 5.0)) * 0.25);
                        float _3269 = 1.0 - _990;
                        float _3276 = sqrt(1.0 - ((1.0 - (_3269 * _3269)) * (1.0 - (_3268 * _3268))));
                        float _3277 = _3276 * _3276;
                        float _3278 = _3277 * _3277;
                        float _3279 = _3258 + _3223;
                        float _3280 = _3259 + _3224;
                        float _3281 = _3260 + _3225;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3289 = dot(vec3(_915, _918, _921), vec3(_3258, _3259, _3260));
                        float _4648 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                        float _3292 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3293 = dot(vec3(_915, _918, _921), vec3(_3285 * _3279, _3285 * _3280, _3285 * _3281));
                        float _4659 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                        float _3296 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3300 = ((_3296 * _3296) * (_3278 + (-1.0))) + 1.0;
                        float _3301 = _3236 * _3277;
                        float _3302 = _3301 * _3301;
                        float _3305 = ((1.0 - _3302) * _3226) + _3302;
                        float _4670 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
                        float _3307 = 1.0 - _3277;
                        float _3317 = (0.5 / (((_3306 * ((_3292 * _3307) + _3277)) + 9.9999999392252902907785028219223e-09) + (((_3306 * _3307) + _3277) * _3292))) * _3306;
                        float _4681 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                        float _3328 = (((_3278 * 3.1415927410125732421875) * (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) / ((_3300 * _3300) * ((_3243 * 2.1991131305694580078125) + 3.141590118408203125))) * _3232;
                        _3080 = (_3247 * _3195.x) + _3153;
                        _3081 = (_3247 * _3195.y) + _3154;
                        _3082 = (_3247 * _3195.z) + _3155;
                        _3077 = (_3328 * _3212.x) + _3150;
                        _3078 = (_3328 * _3212.y) + _3151;
                        _3079 = (_3328 * _3212.z) + _3152;
                        if (_3157 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3080;
                            _3154 = _3081;
                            _3155 = _3082;
                            _3156 = _3157;
                        }
                    }
                    frontier_phi_66_pred = _3077;
                    frontier_phi_66_pred_1 = _3082;
                    frontier_phi_66_pred_2 = _3081;
                    frontier_phi_66_pred_3 = _3080;
                    frontier_phi_66_pred_4 = _3079;
                    frontier_phi_66_pred_5 = _3078;
                }
                _2853 = frontier_phi_66_pred;
                _2863 = frontier_phi_66_pred_1;
                _2861 = frontier_phi_66_pred_2;
                _2859 = frontier_phi_66_pred_3;
                _2857 = frontier_phi_66_pred_4;
                _2855 = frontier_phi_66_pred_5;
                uint _3012 = _3011 + 1u;
                if (_3012 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3005 = _2853;
                    _3006 = _2855;
                    _3007 = _2857;
                    _3008 = _2859;
                    _3009 = _2861;
                    _3010 = _2863;
                    _3011 = _3012;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2852 = _2853;
            _2854 = _2855;
            _2856 = _2857;
            _2858 = _2859;
            _2860 = _2861;
            _2862 = _2863;
        }
        uvec4 _2866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2867 = _2866.z;
        uint _2869 = (_2867 >> 8u) & 15u;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((4294967295u << _2869) & _2751) == 0u)
        {
            _2973 = _2852;
            _2975 = _2854;
            _2977 = _2856;
            _2979 = _2858;
            _2981 = _2860;
            _2983 = _2862;
        }
        else
        {
            float _2998 = inversesqrt(dot(vec3(_2705, _2706, _2707), vec3(_2705, _2706, _2707)));
            float _2999 = _2998 * _2705;
            float _3000 = _2998 * _2706;
            float _3001 = _2998 * _2707;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2869 < ((_2867 >> 12u) & 15u))
            {
                float _2974;
                float _2976;
                float _2978;
                float _2980;
                float _2982;
                float _2984;
                float _3133 = _2852;
                float _3134 = _2854;
                float _3135 = _2856;
                float _3136 = _2858;
                float _3137 = _2860;
                float _3138 = _2862;
                uint _3139 = _2869;
                uint _3148;
                bool _3149;
                for (;;)
                {
                    _3148 = texelFetch(g_lightClassification, int((((_2745 << 5u) + (_2731 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                    _3149 = _3148 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3149)
                    {
                        frontier_phi_77_pred = _3138;
                        frontier_phi_77_pred_1 = _3137;
                        frontier_phi_77_pred_2 = _3136;
                        frontier_phi_77_pred_3 = _3135;
                        frontier_phi_77_pred_4 = _3134;
                        frontier_phi_77_pred_5 = _3133;
                    }
                    else
                    {
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3345;
                        float _3346;
                        float _3347;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        float _3358 = _3136;
                        float _3359 = _3137;
                        float _3360 = _3138;
                        uint _3361 = _3148;
                        uint _3362;
                        vec4 _3387;
                        float _3388;
                        vec4 _3403;
                        vec3 _3415;
                        vec4 _3430;
                        vec4 _3445;
                        float _3491;
                        bool _3492;
                        for (;;)
                        {
                            uint _3372 = ((_3139 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3361));
                            _3362 = (_3361 + 4294967295u) & _3361;
                            uint _3374 = _3372 * 40u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            _3388 = _3387.w;
                            uint _3390 = (_3372 * 40u) + 4u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3405 = (_3372 * 40u) + 8u;
                            _3415 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x));
                            uint _3417 = (_3372 * 40u) + 16u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3372 * 40u) + 20u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3372 * 40u) + 24u;
                            vec4 _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3466 = (_3372 * 40u) + 28u;
                            vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3466)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3466 + 3u)).x));
                            _3491 = fma(_2707, _3479.z, fma(_2706, _3479.y, _3479.x * _2705)) + _3479.w;
                            _3492 = !((fma(_2707, _3460.z, fma(_2706, _3460.y, _3460.x * _2705)) + _3460.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3492)
                            {
                                float _3519 = _3387.x - _2705;
                                float _3520 = _3387.y - _2706;
                                float _3521 = _3387.z - _2707;
                                float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                                float _3525 = inversesqrt(_3522);
                                float _3526 = _3525 * _3519;
                                float _3527 = _3525 * _3520;
                                float _3528 = _3525 * _3521;
                                float _3532 = 1.0 - (_3522 / (_3388 * _3388));
                                float _4692 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3537 = sqrt(_3522) * _3403.w;
                                float _3539 = 1.39999997615814208984375 / (_3537 + 1.39999997615814208984375);
                                float _3540 = _3539 * _3539;
                                float _3543 = ((1.0 - _3540) * dot(vec3(_3526, _3527, _3528), vec3(_915, _918, _921))) + _3540;
                                float _3546 = _3537 * _3537;
                                float _3550 = (fma(_2707, _3430.z, fma(_2706, _3430.y, _3430.x * _2705)) + _3430.w) / _3491;
                                float _3551 = (fma(_2707, _3445.z, fma(_2706, _3445.y, _3445.x * _2705)) + _3445.w) / _3491;
                                float _3555 = 1.0 - dot(vec2(_3550, _3551), vec2(_3550, _3551));
                                float _4708 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3556 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3557 = _3556 * (((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3533) / ((_3546 * 0.699999988079071044921875) + 1.0));
                                float _3569 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                                float _3570 = 1.0 - _990;
                                float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                                float _3578 = _3577 * _3577;
                                float _3579 = _3578 * _3578;
                                float _3580 = _3526 - _2999;
                                float _3581 = _3527 - _3000;
                                float _3582 = _3528 - _3001;
                                float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                                float _3590 = dot(vec3(_915, _918, _921), vec3((-0.0) - _2999, (-0.0) - _3000, (-0.0) - _3001));
                                float _4719 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                                float _3593 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3594 = dot(vec3(_915, _918, _921), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                                float _4730 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                                float _3597 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                                float _3602 = _3539 * _3578;
                                float _3603 = _3602 * _3602;
                                float _3609 = ((1.0 - _3603) * dot(vec3(_915, _918, _921), vec3(_3526, _3527, _3528))) + _3603;
                                float _4741 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3610 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                                float _3611 = 1.0 - _3578;
                                float _3621 = (0.5 / (((_3610 * ((_3593 * _3611) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3578) * _3593))) * _3610;
                                float _4752 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                                float _3631 = (_3556 * _3533) * (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) / ((_3601 * _3601) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3557 * _3403.y;
                                frontier_phi_83_pred_1 = _3557 * _3403.x;
                                frontier_phi_83_pred_2 = _3631 * _3415.z;
                                frontier_phi_83_pred_3 = _3631 * _3415.y;
                                frontier_phi_83_pred_4 = _3631 * _3415.x;
                                frontier_phi_83_pred_5 = _3557 * _3403.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3639 = frontier_phi_83_pred;
                            _3638 = frontier_phi_83_pred_1;
                            _3637 = frontier_phi_83_pred_2;
                            _3636 = frontier_phi_83_pred_3;
                            _3635 = frontier_phi_83_pred_4;
                            _3640 = frontier_phi_83_pred_5;
                            _3345 = _3638 + _3358;
                            _3346 = _3639 + _3359;
                            _3347 = _3640 + _3360;
                            _3342 = _3635 + _3355;
                            _3343 = _3636 + _3356;
                            _3344 = _3637 + _3357;
                            if (_3362 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3345;
                                _3359 = _3346;
                                _3360 = _3347;
                                _3361 = _3362;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3347;
                        frontier_phi_77_pred_1 = _3346;
                        frontier_phi_77_pred_2 = _3345;
                        frontier_phi_77_pred_3 = _3344;
                        frontier_phi_77_pred_4 = _3343;
                        frontier_phi_77_pred_5 = _3342;
                    }
                    _2984 = frontier_phi_77_pred;
                    _2982 = frontier_phi_77_pred_1;
                    _2980 = frontier_phi_77_pred_2;
                    _2978 = frontier_phi_77_pred_3;
                    _2976 = frontier_phi_77_pred_4;
                    _2974 = frontier_phi_77_pred_5;
                    uint _3140 = _3139 + 1u;
                    if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3133 = _2974;
                        _3134 = _2976;
                        _3135 = _2978;
                        _3136 = _2980;
                        _3137 = _2982;
                        _3138 = _2984;
                        _3139 = _3140;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2978;
                frontier_phi_58_59_ladder_1 = _2984;
                frontier_phi_58_59_ladder_2 = _2982;
                frontier_phi_58_59_ladder_3 = _2980;
                frontier_phi_58_59_ladder_4 = _2976;
                frontier_phi_58_59_ladder_5 = _2974;
            }
            else
            {
                frontier_phi_58_59_ladder = _2856;
                frontier_phi_58_59_ladder_1 = _2862;
                frontier_phi_58_59_ladder_2 = _2860;
                frontier_phi_58_59_ladder_3 = _2858;
                frontier_phi_58_59_ladder_4 = _2854;
                frontier_phi_58_59_ladder_5 = _2852;
            }
            _2973 = frontier_phi_58_59_ladder_5;
            _2975 = frontier_phi_58_59_ladder_4;
            _2977 = frontier_phi_58_59_ladder;
            _2979 = frontier_phi_58_59_ladder_3;
            _2981 = frontier_phi_58_59_ladder_2;
            _2983 = frontier_phi_58_59_ladder_1;
        }
        float _2988 = isnan(1.0) ? _974 : (isnan(_974) ? 1.0 : min(_974, 1.0));
        _2764 = (_2988 * _2979) + _2197;
        _2766 = (_2988 * _2981) + _2199;
        _2768 = (_2988 * _2983) + _2201;
        _2770 = ((_2973 * _958) * _2988) + _2545;
        _2772 = ((_2975 * _960) * _2988) + _2547;
        _2774 = ((_2977 * _961) * _2988) + _2549;
    }
    else
    {
        _2764 = _2197;
        _2766 = _2199;
        _2768 = _2201;
        _2770 = _2545;
        _2772 = _2547;
        _2774 = _2549;
    }
    float _4768 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _4779 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _4790 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _2791 = ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2764 + ((isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0))) * _974))) + ((_2770 + ((isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2792 = ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2766 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _974))) + ((_2772 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    float _2793 = ((isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * (_2768 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _974))) + ((_2774 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1814)) * cbPerFrame._m0[3u].x);
    uint _2794 = _274 + 6u;
    float _2802 = _896 / cbSceneParam._m0[86u].x;
    float _2803 = _897 / cbSceneParam._m0[86u].y;
    vec4 _2817 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2819 = _2817.x;
    float _2820 = _2817.y;
    float _2821 = _2817.z;
    float _2822 = _2817.w;
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2877 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2878 = _2877 / _818;
        float _2889 = _2878 * _869;
        float _2890 = _870 * _2878;
        float _2891 = (-0.0) - _2890;
        float _2893 = _2878 * _871;
        float _2895 = (cbSceneParam._m0[77u].w * _2891) / _2877;
        float _2896 = _2895 + cbSceneParam._m0[79u].w;
        float _2897 = cbSceneParam._m0[79u].w - _2890;
        float _2903 = sqrt(((_2889 * _2889) + (_2890 * _2890)) + (_2893 * _2893));
        float _2906 = (1.0 - (cbSceneParam._m0[77u].w / _2877)) * _2903;
        float _2911 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2913 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3090;
        if (abs((_2891 - _2895) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3090 = ((((_2896 > 0.0) ? exp2(_2911 * _2896) : (2.0 - exp2(_2913 * _2896))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2906;
        }
        else
        {
            float _3034 = 1.0 / cbSceneParam._m0[80u].x;
            float _3035 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : max(_2896, _2897));
            float _3036 = isnan(_2897) ? _2896 : (isnan(_2896) ? _2897 : min(_2896, _2897));
            float _3045 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : min(_3035, 0.0));
            float _3046 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : min(_3036, 0.0));
            _3090 = ((abs(_2903 / _2891) * cbSceneParam._m0[80u].y) * ((((_3045 - _3046) * 2.0) - ((exp2(_2911 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)))) - exp2(_2911 * (isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))))) * _3034)) - ((exp2(_2913 * _3045) - exp2(_2913 * _3046)) * _3034))) + (_2906 * cbSceneParam._m0[80u].z);
        }
        vec4 _3092 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2802, _2803, 1.0), 0.0);
        float _3101 = exp2((_3090 * (-1.44269502162933349609375)) * (1.0 - _3092.w));
        float _3102 = log2(_3101);
        float _3118 = log2(_2822);
        _2915 = (exp2(_3118 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].x)) * _3092.x) / cbSceneParam._m0[78u].x)) + _2819;
        _2917 = (exp2(_3118 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].y)) * _3092.y) / cbSceneParam._m0[78u].y)) + _2820;
        _2919 = (exp2(_3118 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3102 * cbSceneParam._m0[78u].z)) * _3092.z) / cbSceneParam._m0[78u].z)) + _2821;
        _2921 = _3101 * _2822;
    }
    else
    {
        _2915 = _2819;
        _2917 = _2820;
        _2919 = _2821;
        _2921 = _2822;
    }
    bool _3128;
    vec4 _2931;
    vec4 _2953;
    float _2955;
    float _2959;
    float _2960;
    float _2961;
    float _2962;
    bool _2972;
    for (;;)
    {
        _2931 = cbMatDynParam._m0[0u];
        float _2933 = roundEven(_2931.y);
        bool _2934 = _2933 == 3.0;
        float _2935 = log2(_2921);
        float _2942 = exp2(_2935 * cbSceneParam._m0[78u].x) * _2791;
        float _2943 = exp2(_2935 * cbSceneParam._m0[78u].y) * _2792;
        float _2944 = exp2(_2935 * cbSceneParam._m0[78u].z) * _2793;
        float _2951 = _885 + (-0.5);
        _2953 = cbMtdParam._m0[1u];
        _2955 = _2953.y * _2951;
        float _2958 = (_2933 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2959 = _2958 * (_2934 ? _2942 : (_2942 + (cbSceneParam._m0[72u].w * _2915)));
        _2960 = _2958 * (_2934 ? _2943 : (_2943 + (cbSceneParam._m0[72u].w * _2917)));
        _2961 = _2958 * (_2934 ? _2944 : (_2944 + (cbSceneParam._m0[72u].w * _2919)));
        _2962 = _2951 * 0.999000012874603271484375;
        _2972 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2972)
        {
            if ((cbInstanceData._m0[_274 + 7u].x + _2962) < 0.5)
            {
                _3128 = true;
                break;
            }
        }
        uint _3069 = _934 + uint(_2931.w);
        if ((cbInstanceData._m0[_3069].w < 1.0) && ((cbInstanceData._m0[_3069].w + _2962) < 0.5))
        {
            _3128 = true;
            break;
        }
        if ((_2955 + 1.0) < _2953.x)
        {
            _3128 = true;
            break;
        }
        _3128 = false;
        break;
    }
    float _3333;
    if (_3128)
    {
        discard_state = true;
        _3333 = 0.0;
    }
    else
    {
        _3333 = cbInstanceData._m0[_2794].w;
    }
    SV_Target.x = _2959;
    SV_Target.y = _2960;
    SV_Target.z = _2961;
    SV_Target.w = _3333;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2794].w;
    discard_exit();
}


