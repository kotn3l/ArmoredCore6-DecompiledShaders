#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1660;
float _4037;
float _4038;
float _4039;
float _4040;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _243 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _244 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _245 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _251 = inversesqrt(dot(vec3(_243, _244, _245), vec3(_243, _244, _245)));
    float _252 = _251 * _243;
    float _253 = _251 * _244;
    float _254 = _251 * _245;
    float _258 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = _258 * NORMAL.x;
    float _260 = _258 * NORMAL.y;
    float _261 = _258 * NORMAL.z;
    float _265 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _266 = _265 * TANGENT.x;
    float _267 = _265 * TANGENT.y;
    float _268 = _265 * TANGENT.z;
    uint _271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _276 = _271 + 1u;
    uint _280 = _271 + 2u;
    float _289 = sqrt(((cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x) + (cbInstanceData._m0[_271].x * cbInstanceData._m0[_271].x)) + (cbInstanceData._m0[_280].x * cbInstanceData._m0[_280].x));
    float _290 = _289 * TEXCOORD.z;
    float _291 = _289 * TEXCOORD.w;
    vec4 _310 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _339 = _334.x * cbMtdParam._m0[11u].x;
    float _340 = _334.y * cbMtdParam._m0[11u].y;
    float _341 = _334.z * cbMtdParam._m0[11u].z;
    vec4 _360 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _290) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _291) + cbTextureTilingScale._m0[5u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _420 = _418.x;
    float _432 = dot(vec4(_420, _418.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _449 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _379.x) * 2.0) - ((((_420 - _432) * cbMtdParam._m0[23u].w) + _432) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4049 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _450 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _457 = (_450 * ((_360.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _458 = (_450 * ((_360.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _459 = (_450 * ((_360.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _476 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _290) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _291) + cbTextureTilingScale._m0[3u].w));
    vec4 _496 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _498 = _496.x;
    float _508 = dot(vec4(_498, _496.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _522 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _379.y) * 2.0) - ((((_498 - _508) * cbMtdParam._m0[23u].w) + _508) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4060 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _523 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _530 = (_523 * ((_476.x * cbMtdParam._m0[13u].x) - _457)) + _457;
    float _531 = (_523 * ((_476.y * cbMtdParam._m0[13u].y) - _458)) + _458;
    float _532 = (_523 * ((_476.z * cbMtdParam._m0[13u].z) - _459)) + _459;
    vec4 _551 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _290) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _291) + cbTextureTilingScale._m0[24u].w));
    vec4 _568 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _570 = _568.x;
    float _580 = dot(vec4(_570, _568.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _592 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _379.z) * 2.0) - ((((_570 - _580) * cbMtdParam._m0[23u].w) + _580) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4071 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _593 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _606 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _310.x) * ((_593 * ((_551.x * cbMtdParam._m0[14u].x) - _530)) + _530);
    float _609 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _310.y) * ((_593 * ((_551.y * cbMtdParam._m0[14u].y) - _531)) + _531);
    float _612 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _310.z) * ((_593 * ((_551.z * cbMtdParam._m0[14u].z) - _532)) + _532);
    vec4 _630 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _290) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _291) + cbTextureTilingScale._m0[4u].w));
    vec4 _647 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _651 = _647.z;
    float _658 = ((_630.x - _649) * _450) + _649;
    float _659 = ((_630.y - _650) * _450) + _650;
    float _660 = ((_630.z - _651) * _450) + _651;
    vec4 _672 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _290) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _291) + cbTextureTilingScale._m0[2u].w));
    float _683 = ((_672.x - _658) * _523) + _658;
    float _684 = ((_672.y - _659) * _523) + _659;
    float _685 = ((_672.z - _660) * _523) + _660;
    vec4 _697 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _290) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _291) + cbTextureTilingScale._m0[23u].w));
    float _710 = ((_697.z - _685) * _593) + _685;
    float _713 = ((((_697.x - _683) * _593) + _683) * 2.0) + (-1.0);
    float _715 = ((((_697.y - _684) * _593) + _684) * 2.0) + (-1.0);
    float _716 = dot(vec2(_713, _715), vec2(_713, _715));
    float _4082 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _721 = sqrt(1.0 - (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))));
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _747 = (((_735.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _713;
    float _748 = (((_735.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _751 = fma(_721, _259, fma(_748, _266, _747 * _252));
    float _754 = fma(_721, _260, fma(_748, _267, _747 * _253));
    float _757 = fma(_721, _261, fma(_748, _268, _747 * _254));
    float _761 = inversesqrt(dot(vec3(_751, _754, _757), vec3(_751, _754, _757)));
    vec4 _788 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _290) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _291) + cbTextureTilingScale._m0[11u].w));
    float _790 = _788.x;
    float _791 = 1.0 - _790;
    float _799 = (cbMtdParam._m0[19u].x + dot(vec4(_761 * _751, _761 * _754, _761 * _757, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_790 - _791) * cbMtdParam._m0[24u].z) + _791) * cbMtdParam._m0[21u].z);
    float _4093 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _800 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _802 = (-0.0) - cbMtdParam._m0[24u].x;
    float _804 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _805 = isnan(1.0) ? _804 : (isnan(_804) ? 1.0 : min(_804, 1.0));
    float _812 = _800 - ((_800 * TEXCOORD_8.x) * _805);
    float _813 = _800 - ((_800 * TEXCOORD_8.y) * _805);
    float _814 = _800 - ((_800 * TEXCOORD_8.z) * _805);
    float _821 = (_812 * (cbMtdParam._m0[17u].x - _606)) + _606;
    float _822 = (_813 * (cbMtdParam._m0[17u].y - _609)) + _609;
    float _823 = (_814 * (cbMtdParam._m0[17u].z - _612)) + _612;
    vec4 _835 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _290) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _291) + cbTextureTilingScale._m0[19u].w));
    float _837 = _835.x;
    float _838 = 1.0 - _837;
    float _864 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_837 - _838) * cbMtdParam._m0[24u].w) + _838) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4114 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _865 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    float _873 = ((((cbMtdParam._m0[10u].x - _821) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _865) + _821;
    float _874 = ((((cbMtdParam._m0[10u].y - _822) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _865) + _822;
    float _875 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _823)) * _865) + _823;
    vec4 _901 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _903 = _901.x;
    float _920 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _290) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _291) + cbTextureTilingScale._m0[9u].w)).x - _903) * _450) + _903;
    float _937 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _290) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _291) + cbTextureTilingScale._m0[21u].w)).x - _920) * _523) + _920;
    float _954 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _290) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _291) + cbTextureTilingScale._m0[10u].w)).x - _937) * _593) + _937;
    float _958 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _954) * cbMtdParam._m0[19u].z) + _954;
    float _960 = _958 - (_958 * _812);
    float _962 = _960 - (_960 * _865);
    float _966 = (cbMtdParam._m0[19u].w * (_735.z - _710)) + _710;
    vec4 _982 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _290) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _291) + cbTextureTilingScale._m0[15u].w));
    float _989 = (_982.x * 2.0) + (-1.0);
    float _990 = (_982.y * 2.0) + (-1.0);
    float _991 = dot(vec2(_989, _990), vec2(_989, _990));
    float _4125 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _999 = ((_982.z - _966) * _812) + _966;
    float _1002 = ((cbMtdParam._m0[23u].x - _999) * _865) + _999;
    vec4 _1025 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _290) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _291) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1031 = (_1025.x * 2.0) + (-1.0);
    float _1032 = (_1025.y * 2.0) + (-1.0);
    float _1033 = dot(vec2(_1031, _1032), vec2(_1031, _1032));
    float _4136 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _1048 = ((sqrt(1.0 - (isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0)))) - _721) * _814) + _721;
    float _1051 = (((_989 - _747) * _812) + _747) + (cbMtdParam._m0[21u].x * _747);
    float _1052 = (((_990 - _748) * _813) + _748) + (cbMtdParam._m0[21u].x * _748);
    float _1063 = (((_1031 - _1051) + (_1051 * cbMtdParam._m0[22u].z)) * _865) + _1051;
    float _1064 = (((_1032 - _1052) + (_1052 * cbMtdParam._m0[22u].z)) * _865) + _1052;
    float _1065 = (_865 * (sqrt(1.0 - (isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0)))) - _1048)) + _1048;
    float _1067 = cbMtdParam._m0[22u].x + _735.w;
    float _1070 = fma(_1065, _259, fma(_1064, _266, _1063 * _252));
    float _1073 = fma(_1065, _260, fma(_1064, _267, _1063 * _253));
    float _1076 = fma(_1065, _261, fma(_1064, _268, _1063 * _254));
    float _1080 = inversesqrt(dot(vec3(_1070, _1073, _1076), vec3(_1070, _1073, _1076)));
    float _1081 = _1080 * _1070;
    float _1082 = _1080 * _1073;
    float _1083 = _1080 * _1076;
    float _4147 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
    float _1084 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _4169 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _4180 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4191 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4202 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _1089 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _1103 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1153 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1143);
    float _1154 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1143);
    float _1155 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1143);
    float _1159 = inversesqrt(dot(vec3(_1153, _1154, _1155), vec3(_1153, _1154, _1155)));
    float _1160 = _1153 * _1159;
    float _1161 = _1154 * _1159;
    float _1162 = _1155 * _1159;
    vec4 _1167 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1169 = _1167.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1341 = sqrt(((_1153 * _1153) + (_1154 * _1154)) + (_1155 * _1155));
        float _1347 = (cbMatDynParam._m0[5u].x * _1341) + cbMatDynParam._m0[5u].y;
        float _4213 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1352 = (cbMatDynParam._m0[5u].z * _1341) + cbMatDynParam._m0[5u].w;
        float _4224 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0))) - _1348)) + _1348) < ((_1169 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1180 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1181 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1199 = fma(_1083, cbSceneParam._m0[5u].z, fma(_1082, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1081));
    float _1202 = fma(_1083, cbSceneParam._m0[6u].z, fma(_1082, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1081));
    float _1205 = fma(_1083, cbSceneParam._m0[7u].z, fma(_1082, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1081));
    uint _1218 = _271 + 9u;
    uint _1219 = _1218 + uint(cbMatDynParam._m0[0u].w);
    float _1225 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) * cbInstanceData._m0[_1219].x;
    float _1226 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * cbInstanceData._m0[_1219].y;
    float _1227 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)))) * cbInstanceData._m0[_1219].z;
    float _4235 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _1228 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _4246 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _1229 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
    float _4257 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1230 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
    float _1231 = 1.0 - _1089;
    float _1232 = _1228 * _1231;
    float _1233 = _1229 * _1231;
    float _1234 = _1230 * _1231;
    float _1239 = (_1228 + (-0.039999999105930328369140625)) * _1089;
    float _1240 = (_1229 + (-0.039999999105930328369140625)) * _1089;
    float _1241 = (_1230 + (-0.039999999105930328369140625)) * _1089;
    float _1242 = _1239 + 0.039999999105930328369140625;
    float _1244 = _1240 + 0.039999999105930328369140625;
    float _1245 = _1241 + 0.039999999105930328369140625;
    vec4 _1254 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1180, cbSceneParam._m0[86u].y * _1181));
    float _1258 = ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * TEXCOORD_5.w) * _1254.x;
    float _1259 = dot(vec3(_1081, _1082, _1083), vec3(_1160, _1161, _1162));
    float _1262 = _1259 * 2.0;
    float _1266 = (_1262 * _1081) - _1160;
    float _1267 = (_1262 * _1082) - _1161;
    float _1268 = (_1262 * _1083) - _1162;
    float _1272 = abs(dot(vec3(_1160, _1161, _1162), vec3(_1081, _1082, _1083)));
    float _4268 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1274 = sqrt(_1084);
    float _1287 = exp2((_1274 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1274 * 3.0));
    float _1293 = (1.0 - _1287) * ((_1274 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1294 = _1287 * _1274;
    float _1322 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1326 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1330 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1659;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1384 = fma(_1330, cbModelParam._m0[26u].z, fma(_1326, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1322));
        float _1388 = fma(_1330, cbModelParam._m0[27u].z, fma(_1326, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1322));
        float _1392 = fma(_1330, cbModelParam._m0[28u].z, fma(_1326, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1322));
        float _1417 = _1322 + _1081;
        float _1418 = _1326 + _1082;
        float _1419 = _1330 + _1083;
        float _1429 = fma(_1419, cbModelParam._m0[26u].z, fma(_1418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1417)) - _1384;
        float _1430 = fma(_1419, cbModelParam._m0[27u].z, fma(_1418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1417)) - _1388;
        float _1431 = fma(_1419, cbModelParam._m0[28u].z, fma(_1418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1417)) - _1392;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1448 = ((_1435 * _1429) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1384 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1430) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1388 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1450 = ((_1435 * _1431) / cbModelParam._m0[34u].z) + ((((((_1392 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1453 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1460 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1467 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1448, _1449, _1450), 0.0);
        float _1487 = exp2((_1453.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1453.x + (-0.5));
        float _1489 = _1487 * (_1453.y + (-0.5));
        float _1490 = _1487 * (_1453.z + (-0.5));
        float _1497 = exp2((_1460.w + (-0.5)) * 20.0) * 2.0;
        float _1498 = _1497 * (_1460.x + (-0.5));
        float _1499 = _1497 * (_1460.y + (-0.5));
        float _1500 = _1497 * (_1460.z + (-0.5));
        float _1507 = exp2((_1467.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1467.x + (-0.5));
        float _1509 = _1507 * (_1467.y + (-0.5));
        float _1510 = _1507 * (_1467.z + (-0.5));
        float _1517 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1474.x + (-0.5));
        float _1519 = _1517 * (_1474.y + (-0.5));
        float _1520 = _1517 * (_1474.z + (-0.5));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = _1488 * 0.5;
        float _1525 = _1498 * 0.5;
        float _1526 = _1508 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1541 = (dot(vec3(_1081, _1082, _1083), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4294 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1551 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4305 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4316 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_1553 + 1.0))) + _1558) * _1521;
        float _1568 = _1489 * 0.5;
        float _1569 = _1499 * 0.5;
        float _1570 = _1509 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_1081, _1082, _1083), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4327 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4338 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4349 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0))) * (_1595 + 1.0))) + _1600) * _1522;
        float _1610 = _1490 * 0.5;
        float _1611 = _1500 * 0.5;
        float _1612 = _1510 * 0.5;
        float _1613 = dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612));
        float _1618 = (_1613 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1613);
        float _1626 = (dot(vec3(_1081, _1082, _1083), vec3(_1618 * _1610, _1618 * _1611, _1618 * _1612)) + 1.0) * 0.5;
        float _4360 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1635 = sqrt(((_1611 * _1611) + (_1610 * _1610)) + (_1612 * _1612)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4371 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _1637 = _1636 * 2.0;
        float _1641 = (1.0 - _1636) / (_1636 + 1.0);
        float _4382 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1651 = ((((1.0 - _1642) * (_1637 + 2.0)) * exp2(log2(isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_1637 + 1.0))) + _1642) * _1523;
        _1659 = _1490;
        _1661 = _1489;
        _1662 = _1488;
        _1663 = _1500;
        _1664 = _1499;
        _1665 = _1498;
        _1666 = _1510;
        _1667 = _1509;
        _1668 = _1508;
        _1669 = _1523;
        _1670 = _1522;
        _1671 = _1521;
        _1672 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1673 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
        _1674 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)));
    }
    else
    {
        _1659 = _1660;
        _1661 = _1660;
        _1662 = _1660;
        _1663 = _1660;
        _1664 = _1660;
        _1665 = _1660;
        _1666 = _1660;
        _1667 = _1660;
        _1668 = _1660;
        _1669 = _1660;
        _1670 = _1660;
        _1671 = _1660;
        _1672 = 0.0;
        _1673 = 0.0;
        _1674 = 0.0;
    }
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1700 = fma(_1330, cbModelParam._m0[30u].z, fma(_1326, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1322));
        float _1704 = fma(_1330, cbModelParam._m0[31u].z, fma(_1326, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1322));
        float _1708 = fma(_1330, cbModelParam._m0[32u].z, fma(_1326, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1322));
        float _1731 = _1322 + _1081;
        float _1732 = _1326 + _1082;
        float _1733 = _1330 + _1083;
        float _1743 = fma(_1733, cbModelParam._m0[30u].z, fma(_1732, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1731)) - _1700;
        float _1744 = fma(_1733, cbModelParam._m0[31u].z, fma(_1732, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1731)) - _1704;
        float _1745 = fma(_1733, cbModelParam._m0[32u].z, fma(_1732, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1731)) - _1708;
        float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
        float _1762 = ((_1749 * _1743) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1700 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1763 = ((_1749 * _1744) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1704 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1764 = ((_1749 * _1745) / cbModelParam._m0[35u].z) + ((((((_1708 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1762, _1763, _1764), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1762, _1763, _1764), 0.0);
        vec4 _1780 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1762, _1763, _1764), 0.0);
        vec4 _1787 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1762, _1763, _1764), 0.0);
        float _1799 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1800 = _1799 * (_1766.x + (-0.5));
        float _1801 = _1799 * (_1766.y + (-0.5));
        float _1802 = _1799 * (_1766.z + (-0.5));
        float _1809 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1810 = _1809 * (_1773.x + (-0.5));
        float _1811 = _1809 * (_1773.y + (-0.5));
        float _1812 = _1809 * (_1773.z + (-0.5));
        float _1819 = exp2((_1780.w + (-0.5)) * 20.0) * 2.0;
        float _1820 = _1819 * (_1780.x + (-0.5));
        float _1821 = _1819 * (_1780.y + (-0.5));
        float _1822 = _1819 * (_1780.z + (-0.5));
        float _1829 = exp2((_1787.w + (-0.5)) * 20.0) * 2.0;
        float _1830 = _1829 * (_1787.x + (-0.5));
        float _1831 = _1829 * (_1787.y + (-0.5));
        float _1832 = _1829 * (_1787.z + (-0.5));
        float _1833 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
        float _1834 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1835 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1836 = _1800 * 0.5;
        float _1837 = _1810 * 0.5;
        float _1838 = _1820 * 0.5;
        float _1839 = dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838));
        float _1844 = (_1839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1839);
        float _1852 = (dot(vec3(_1081, _1082, _1083), vec3(_1844 * _1836, _1844 * _1837, _1844 * _1838)) + 1.0) * 0.5;
        float _4423 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1861 = sqrt(((_1837 * _1837) + (_1836 * _1836)) + (_1838 * _1838)) / (_1833 + 9.9999997473787516355514526367188e-06);
        float _4434 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
        float _1863 = _1862 * 2.0;
        float _1867 = (1.0 - _1862) / (_1862 + 1.0);
        float _4445 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
        float _1868 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _1877 = ((((1.0 - _1868) * (_1863 + 2.0)) * exp2(log2(isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0))) * (_1863 + 1.0))) + _1868) * _1833;
        float _1878 = _1801 * 0.5;
        float _1879 = _1811 * 0.5;
        float _1880 = _1821 * 0.5;
        float _1881 = dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880));
        float _1886 = (_1881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1881);
        float _1894 = (dot(vec3(_1081, _1082, _1083), vec3(_1886 * _1878, _1886 * _1879, _1886 * _1880)) + 1.0) * 0.5;
        float _4456 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1903 = sqrt(((_1879 * _1879) + (_1878 * _1878)) + (_1880 * _1880)) / (_1834 + 9.9999997473787516355514526367188e-06);
        float _4467 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
        float _1904 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _1905 = _1904 * 2.0;
        float _1909 = (1.0 - _1904) / (_1904 + 1.0);
        float _4478 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1910 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _1919 = ((((1.0 - _1910) * (_1905 + 2.0)) * exp2(log2(isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0))) * (_1905 + 1.0))) + _1910) * _1834;
        float _1920 = _1802 * 0.5;
        float _1921 = _1812 * 0.5;
        float _1922 = _1822 * 0.5;
        float _1923 = dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922));
        float _1928 = (_1923 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1923);
        float _1936 = (dot(vec3(_1081, _1082, _1083), vec3(_1928 * _1920, _1928 * _1921, _1928 * _1922)) + 1.0) * 0.5;
        float _4489 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
        float _1945 = sqrt(((_1921 * _1921) + (_1920 * _1920)) + (_1922 * _1922)) / (_1835 + 9.9999997473787516355514526367188e-06);
        float _4500 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1946 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _1947 = _1946 * 2.0;
        float _1951 = (1.0 - _1946) / (_1946 + 1.0);
        float _4511 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _1961 = ((((1.0 - _1952) * (_1947 + 2.0)) * exp2(log2(isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_1947 + 1.0))) + _1952) * _1835;
        _1969 = _1802;
        _1970 = _1801;
        _1971 = _1800;
        _1972 = _1812;
        _1973 = _1811;
        _1974 = _1810;
        _1975 = _1822;
        _1976 = _1821;
        _1977 = _1820;
        _1978 = _1835;
        _1979 = _1834;
        _1980 = _1833;
        _1981 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)));
        _1982 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0)));
        _1983 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)));
    }
    else
    {
        _1969 = _1660;
        _1970 = _1660;
        _1971 = _1660;
        _1972 = _1660;
        _1973 = _1660;
        _1974 = _1660;
        _1975 = _1660;
        _1976 = _1660;
        _1977 = _1660;
        _1978 = _1660;
        _1979 = _1660;
        _1980 = _1660;
        _1981 = 0.0;
        _1982 = 0.0;
        _1983 = 0.0;
    }
    float _1993 = (cbModelParam._m0[1u].x * (_1981 - _1672)) + _1672;
    float _1994 = (cbModelParam._m0[1u].x * (_1982 - _1673)) + _1673;
    float _1995 = (cbModelParam._m0[1u].x * (_1983 - _1674)) + _1674;
    float _2016 = fma(_1995, cbSceneParam._m0[89u].z, fma(_1994, cbSceneParam._m0[89u].y, _1993 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_1995, cbSceneParam._m0[90u].z, fma(_1994, cbSceneParam._m0[90u].y, _1993 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_1995, cbSceneParam._m0[91u].z, fma(_1994, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1993));
    float _2037 = _1266 * 0.5;
    float _2038 = _1267 * 0.5;
    float _2039 = _1268 * 0.5;
    float _2040 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1971, _1974, _1977, _1980));
    float _2043 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1970, _1973, _1976, _1979));
    float _2046 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1969, _1972, _1975, _1978));
    float _2080;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2053 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1659, _1663, _1666, _1669));
        float _2057 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1661, _1664, _1667, _1670));
        float _2061 = dot(vec4(_2037, _2038, _2039, 1.0), vec4(_1662, _1665, _1668, _1671));
        float _2068 = dot(vec4(cbModelParam._m0[39u]), vec4(_2037, _2038, _2039, 1.0));
        _2080 = dot(vec3(isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)), isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0)), isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2068) ? 0.0 : (isnan(0.0) ? _2068 : max(0.0, _2068))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2080 = 1.0;
    }
    float _2091;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2082 = dot(vec4(cbModelParam._m0[40u]), vec4(_2037, _2038, _2039, 1.0));
        _2091 = dot(vec3(isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0)), isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)), isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2082) ? 0.0 : (isnan(0.0) ? _2082 : max(0.0, _2082))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2091 = 1.0;
    }
    float _2095 = (_2091 * cbModelParam._m0[1u].x) + (_2080 * (1.0 - cbModelParam._m0[1u].x));
    float _2105 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1084);
    float _2106 = isnan(_2105) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2105 : min(cbModelParam._m0[25u].z, _2105));
    float _2186;
    float _2188;
    float _2190;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2153 = fma(_1330, cbModelParam._m0[13u].z, fma(_1326, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1322)) + cbModelParam._m0[13u].w;
        float _2157 = fma(_1330, cbModelParam._m0[14u].z, fma(_1326, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1322)) + cbModelParam._m0[14u].w;
        float _2161 = fma(_1330, cbModelParam._m0[15u].z, fma(_1326, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1322)) + cbModelParam._m0[15u].w;
        float _2164 = fma(_1268, cbModelParam._m0[13u].z, fma(_1267, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1266));
        float _2167 = fma(_1268, cbModelParam._m0[14u].z, fma(_1267, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1266));
        float _2170 = fma(_1268, cbModelParam._m0[15u].z, fma(_1267, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1266));
        float _2198;
        if (_2164 > 0.0)
        {
            _2198 = abs((1.0 - _2153) / _2164);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2153 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2198 = frontier_phi_17_15_ladder;
        }
        float _2401;
        if (_2167 > 0.0)
        {
            _2401 = abs((1.0 - _2157) / _2167);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2157 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2401 = frontier_phi_26_22_ladder;
        }
        float _2655;
        if (_2170 > 0.0)
        {
            _2655 = abs((1.0 - _2161) / _2170);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2161 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2655 = frontier_phi_38_33_ladder;
        }
        float _2657 = isnan(_2401) ? _2198 : (isnan(_2198) ? _2401 : min(_2198, _2401));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _2164) + _2153;
        float _2663 = (_2658 * _2167) + _2157;
        float _2664 = (_2658 * _2170) + _2161;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2667 = (-1.0) - _2665;
        float _2669 = _2665 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2664 > _2669) || ((_2664 < _2667) || ((_2663 > _2669) || ((_2663 < _2667) || ((_2662 < _2667) || (_2662 > _2669))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2792 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2664, cbModelParam._m0[9u].z, fma(_2663, cbModelParam._m0[9u].y, _2662 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2664, cbModelParam._m0[10u].z, fma(_2663, cbModelParam._m0[10u].y, _2662 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2664, cbModelParam._m0[11u].z, fma(_2663, cbModelParam._m0[11u].y, _2662 * cbModelParam._m0[11u].x))), _2106);
            frontier_phi_16_38_ladder = _2792.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2792.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2792.x * cbModelParam._m0[1u].y;
        }
        _2186 = frontier_phi_16_38_ladder_2;
        _2188 = frontier_phi_16_38_ladder_1;
        _2190 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2174 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1266, _1267, _1268), _2106);
        _2186 = _2174.x * cbModelParam._m0[1u].y;
        _2188 = _2174.y * cbModelParam._m0[1u].y;
        _2190 = _2174.z * cbModelParam._m0[1u].y;
    }
    float _2194 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1084);
    float _2195 = isnan(_2194) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2194 : min(cbModelParam._m0[25u].w, _2194));
    float _2285;
    float _2287;
    float _2289;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2249 = fma(_1330, cbModelParam._m0[21u].z, fma(_1326, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1322)) + cbModelParam._m0[21u].w;
        float _2253 = fma(_1330, cbModelParam._m0[22u].z, fma(_1326, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1322)) + cbModelParam._m0[22u].w;
        float _2257 = fma(_1330, cbModelParam._m0[23u].z, fma(_1326, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1322)) + cbModelParam._m0[23u].w;
        float _2260 = fma(_1268, cbModelParam._m0[21u].z, fma(_1267, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1266));
        float _2263 = fma(_1268, cbModelParam._m0[22u].z, fma(_1267, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1266));
        float _2266 = fma(_1268, cbModelParam._m0[23u].z, fma(_1267, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1266));
        float _2406;
        if (_2260 > 0.0)
        {
            _2406 = abs((1.0 - _2249) / _2260);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2249 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2406 = frontier_phi_28_24_ladder;
        }
        float _2682;
        if (_2263 > 0.0)
        {
            _2682 = abs((1.0 - _2253) / _2263);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2263 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2253 + 1.0) / _2263);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2682 = frontier_phi_40_35_ladder;
        }
        float _2895;
        if (_2266 > 0.0)
        {
            _2895 = abs((1.0 - _2257) / _2266);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2266 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2257 + 1.0) / _2266);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2895 = frontier_phi_49_46_ladder;
        }
        float _2897 = isnan(_2682) ? _2406 : (isnan(_2406) ? _2682 : min(_2406, _2682));
        float _2898 = isnan(_2895) ? _2897 : (isnan(_2897) ? _2895 : min(_2897, _2895));
        float _2902 = (_2898 * _2260) + _2249;
        float _2903 = (_2898 * _2263) + _2253;
        float _2904 = (_2898 * _2266) + _2257;
        float _2905 = _2898 * 9.9999997473787516355514526367188e-05;
        float _2906 = (-1.0) - _2905;
        float _2908 = _2905 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2904 > _2908) || ((_2904 < _2906) || ((_2903 > _2908) || ((_2903 < _2906) || ((_2902 < _2906) || (_2902 > _2908))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3103 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2904, cbModelParam._m0[17u].z, fma(_2903, cbModelParam._m0[17u].y, _2902 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2904, cbModelParam._m0[18u].z, fma(_2903, cbModelParam._m0[18u].y, _2902 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2904, cbModelParam._m0[19u].z, fma(_2903, cbModelParam._m0[19u].y, _2902 * cbModelParam._m0[19u].x))), _2195);
            frontier_phi_25_49_ladder = _3103.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3103.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3103.x * cbModelParam._m0[1u].z;
        }
        _2285 = frontier_phi_25_49_ladder_2;
        _2287 = frontier_phi_25_49_ladder_1;
        _2289 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2269 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1266, _1267, _1268), _2195);
        _2285 = _2269.x * cbModelParam._m0[1u].z;
        _2287 = _2269.y * cbModelParam._m0[1u].z;
        _2289 = _2269.z * cbModelParam._m0[1u].z;
    }
    float _2302 = (((_1293 * _1242) + _1294) * _1258) * ((cbModelParam._m0[1u].w * (_2285 - _2186)) + _2186);
    float _2304 = (((_1293 * _1244) + _1294) * _1258) * ((cbModelParam._m0[1u].w * (_2287 - _2188)) + _2188);
    float _2306 = (((_1293 * _1245) + _1294) * _1258) * ((cbModelParam._m0[1u].w * (_2289 - _2190)) + _2190);
    float _2309 = fma(_2306, cbSceneParam._m0[89u].z, fma(_2304, cbSceneParam._m0[89u].y, _2302 * cbSceneParam._m0[89u].x));
    float _2312 = fma(_2306, cbSceneParam._m0[90u].z, fma(_2304, cbSceneParam._m0[90u].y, _2302 * cbSceneParam._m0[90u].x));
    float _2315 = fma(_2306, cbSceneParam._m0[91u].z, fma(_2304, cbSceneParam._m0[91u].y, _2302 * cbSceneParam._m0[91u].x));
    uvec4 _2325 = floatBitsToUint(cbInstanceData._m0[_271 + 5u]);
    uint _2327 = _2325.x * 14u;
    uint _2328 = _2327 + 13u;
    float _2335 = _1258 + (-1.0);
    float _2340 = (cbLight._m0[_2328].x * _2335) + 1.0;
    float _2341 = (cbLight._m0[_2328].y * _2335) + 1.0;
    float _2342 = (cbLight._m0[_2328].z * _2335) + 1.0;
    float _2343 = (cbLight._m0[_2328].w * _2335) + 1.0;
    uint _2344 = _2327 + 5u;
    float _2350 = isnan(1.0) ? _2341 : (isnan(_2341) ? 1.0 : min(_2341, 1.0));
    uint _2354 = _2327 + 4u;
    float _2360 = isnan(1.0) ? _2340 : (isnan(_2340) ? 1.0 : min(_2340, 1.0));
    uint _2364 = _2327 | 1u;
    float _2375 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_1081, _1082, _1083));
    float _2378 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_1081, _1082, _1083));
    float _4647 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _4658 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2383 = (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) * 0.3183098733425140380859375;
    float _2385 = (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * 0.3183098733425140380859375;
    float _2392 = ((cbLight._m0[_2344].x * _2350) * _2385) + ((cbLight._m0[_2354].x * _2360) * _2383);
    float _2393 = ((_2350 * cbLight._m0[_2344].y) * _2385) + ((_2360 * cbLight._m0[_2354].y) * _2383);
    float _2394 = ((_2350 * cbLight._m0[_2344].z) * _2385) + ((_2360 * cbLight._m0[_2354].z) * _2383);
    uvec4 _2398 = floatBitsToUint(cbLight._m0[_2327 + 12u]);
    bool _2400 = _2398.x == 0u;
    float _2411;
    float _2413;
    float _2415;
    if (_2400)
    {
        _2411 = _2392;
        _2413 = _2393;
        _2415 = _2394;
    }
    else
    {
        uint _2419 = _2327 + 6u;
        float _2435 = (dot(vec3(cbLight._m0[_2327 + 2u].xyz), vec3(_1081, _1082, _1083)) * 0.5) + 0.5;
        float _2436 = _2435 * _2435;
        float _4669 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2437 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2438 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2411 = (((cbLight._m0[_2419].x * 0.3183098733425140380859375) * _2437) * _2438) + _2392;
        _2413 = (((cbLight._m0[_2419].y * 0.3183098733425140380859375) * _2437) * _2438) + _2393;
        _2415 = (((cbLight._m0[_2419].z * 0.3183098733425140380859375) * _2437) * _2438) + _2394;
    }
    bool _2418 = _2398.y == 0u;
    float _2456;
    float _2458;
    float _2460;
    if (_2418)
    {
        _2456 = _2411;
        _2458 = _2413;
        _2460 = _2415;
    }
    else
    {
        uint _2626 = _2327 + 7u;
        float _2642 = (dot(vec3(cbLight._m0[_2327 + 3u].xyz), vec3(_1081, _1082, _1083)) * 0.5) + 0.5;
        float _2643 = _2642 * _2642;
        float _4685 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2644 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2645 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2456 = (((cbLight._m0[_2626].x * 0.3183098733425140380859375) * _2644) * _2645) + _2411;
        _2458 = (((cbLight._m0[_2626].y * 0.3183098733425140380859375) * _2644) * _2645) + _2413;
        _2460 = (((cbLight._m0[_2626].z * 0.3183098733425140380859375) * _2644) * _2645) + _2415;
    }
    uint _2463 = _2327 + 8u;
    float _2476 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _1084) * 0.949999988079071044921875);
    float _2477 = _2476 * _2476;
    float _2478 = cbLight._m0[_2327].x + _1160;
    float _2479 = cbLight._m0[_2327].y + _1161;
    float _2480 = cbLight._m0[_2327].z + _1162;
    float _2484 = inversesqrt(dot(vec3(_2478, _2479, _2480), vec3(_2478, _2479, _2480)));
    float _2485 = _2484 * _2478;
    float _2486 = _2484 * _2479;
    float _2487 = _2484 * _2480;
    float _2488 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2327].xyz));
    float _4701 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2491 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
    float _4712 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _2492 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    float _2493 = dot(vec3(_1081, _1082, _1083), vec3(_2485, _2486, _2487));
    float _4723 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2496 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
    float _2497 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2485, _2486, _2487));
    float _4734 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2501 = _2477 * _2477;
    float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
    float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0)))) * 5.0);
    float _2514 = 0.959999978542327880859375 - _1239;
    float _2516 = 0.959999978542327880859375 - _1240;
    float _2517 = 0.959999978542327880859375 - _1241;
    float _2524 = 1.0 - _2477;
    float _2535 = (0.5 / (((_2492 * ((_2491 * _2524) + _2477)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2524) + _2477) * _2491))) * _2491;
    float _4745 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2537 = (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
    uint _2548 = _2327 + 9u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2364].w)) * _1084) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2364].x + _1160;
    float _2562 = cbLight._m0[_2364].y + _1161;
    float _2563 = cbLight._m0[_2364].z + _1162;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2364].xyz));
    float _4756 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
    float _2575 = dot(vec3(_1081, _1082, _1083), vec3(_2568, _2569, _2570));
    float _4767 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
    float _2579 = dot(vec3(cbLight._m0[_2364].xyz), vec3(_2568, _2569, _2570));
    float _4778 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2583 = _2560 * _2560;
    float _2587 = ((_2578 * _2578) * (_2583 + (-1.0))) + 1.0;
    float _2594 = exp2(log2(1.0 - (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) * 5.0);
    float _2601 = 1.0 - _2560;
    float _2611 = (0.5 / (((_2492 * ((_2574 * _2601) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2601) + _2560) * _2574))) * _2574;
    float _4789 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0))) * (_2583 / ((_2587 * _2587) * 3.141590118408203125));
    float _2623 = (((((_2594 * _2514) + _1242) * cbLight._m0[_2548].x) * _2613) * _2350) + (((((_2513 * _2514) + _1242) * cbLight._m0[_2463].x) * _2537) * _2360);
    float _2624 = (((((_2594 * _2516) + _1244) * cbLight._m0[_2548].y) * _2613) * _2350) + (((((_2513 * _2516) + _1244) * cbLight._m0[_2463].y) * _2537) * _2360);
    float _2625 = (((((_2594 * _2517) + _1245) * cbLight._m0[_2548].z) * _2613) * _2350) + (((((_2513 * _2517) + _1245) * cbLight._m0[_2463].z) * _2537) * _2360);
    float _2687;
    float _2689;
    float _2691;
    if (_2400)
    {
        _2687 = _2623;
        _2689 = _2624;
        _2691 = _2625;
    }
    else
    {
        uint _2693 = _2327 + 2u;
        uint _2697 = _2327 + 10u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _1084) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _1160;
        float _2714 = cbLight._m0[_2693].y + _1161;
        float _2715 = cbLight._m0[_2693].z + _1162;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2693].xyz));
        float _4800 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0));
        float _2727 = dot(vec3(_1081, _1082, _1083), vec3(_2720, _2721, _2722));
        float _4811 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4822 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0)))) * 5.0);
        float _2753 = 1.0 - _2712;
        float _2763 = (0.5 / (((_2492 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2753) + _2712) * _2726))) * _2726;
        float _4833 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2342 : (isnan(_2342) ? 1.0 : min(_2342, 1.0));
        _2687 = (((((_2746 * _2514) + _1242) * cbLight._m0[_2697].x) * _2765) * _2766) + _2623;
        _2689 = (((((_2746 * _2516) + _1244) * cbLight._m0[_2697].y) * _2765) * _2766) + _2624;
        _2691 = (((((_2746 * _2517) + _1245) * cbLight._m0[_2697].z) * _2765) * _2766) + _2625;
    }
    float _2801;
    float _2803;
    float _2805;
    if (_2418)
    {
        _2801 = _2687;
        _2803 = _2689;
        _2805 = _2691;
    }
    else
    {
        uint _2812 = _2327 + 3u;
        uint _2816 = _2327 + 11u;
        float _2830 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2812].w)) * _1084) * 0.949999988079071044921875);
        float _2831 = _2830 * _2830;
        float _2832 = cbLight._m0[_2812].x + _1160;
        float _2833 = cbLight._m0[_2812].y + _1161;
        float _2834 = cbLight._m0[_2812].z + _1162;
        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
        float _2839 = _2838 * _2832;
        float _2840 = _2838 * _2833;
        float _2841 = _2838 * _2834;
        float _2842 = dot(vec3(_1081, _1082, _1083), vec3(cbLight._m0[_2812].xyz));
        float _4849 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2845 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
        float _2846 = dot(vec3(_1081, _1082, _1083), vec3(_2839, _2840, _2841));
        float _4860 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
        float _2850 = dot(vec3(cbLight._m0[_2812].xyz), vec3(_2839, _2840, _2841));
        float _4871 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2854 = _2831 * _2831;
        float _2858 = ((_2849 * _2849) * (_2854 + (-1.0))) + 1.0;
        float _2865 = exp2(log2(1.0 - (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) * 5.0);
        float _2872 = 1.0 - _2831;
        float _2882 = (0.5 / (((_2492 * ((_2845 * _2872) + _2831)) + 9.9999999392252902907785028219223e-09) + (((_2492 * _2872) + _2831) * _2845))) * _2845;
        float _4882 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        float _2884 = (isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2854 / ((_2858 * _2858) * 3.141590118408203125));
        float _2885 = isnan(1.0) ? _2343 : (isnan(_2343) ? 1.0 : min(_2343, 1.0));
        _2801 = (((((_2865 * _2514) + _1242) * cbLight._m0[_2816].x) * _2884) * _2885) + _2687;
        _2803 = (((((_2865 * _2516) + _1244) * cbLight._m0[_2816].y) * _2884) * _2885) + _2689;
        _2805 = (((((_2865 * _2517) + _1245) * cbLight._m0[_2816].z) * _2884) * _2885) + _2691;
    }
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_2325.y == 0u)
    {
        float _2960 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2961 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2960;
        float _2962 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2960;
        float _2963 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2960;
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1181) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _1180) / _2976)));
        float _2997 = (log2(_2963 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
            _3118 = 0.0;
        }
        else
        {
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3119;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3276)
                {
                    frontier_phi_66_pred = _3260;
                    frontier_phi_66_pred_1 = _3265;
                    frontier_phi_66_pred_2 = _3264;
                    frontier_phi_66_pred_3 = _3263;
                    frontier_phi_66_pred_4 = _3262;
                    frontier_phi_66_pred_5 = _3261;
                }
                else
                {
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    float _3410;
                    uint _3411;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3265;
                    _3411 = _3275;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    float _3337;
                    for (;;)
                    {
                        uint _3415 = uint(findLSB(_3411)) + (_3266 << 5u);
                        uint _3412 = (_3411 + 4294967295u) & _3411;
                        uint _3417 = _3415 * 48u;
                        vec4 _3431 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 3u)).x));
                        uint _3437 = (_3415 * 48u) + 4u;
                        vec4 _3450 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3437)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3437 + 3u)).x));
                        uint _3456 = (_3415 * 48u) + 8u;
                        vec3 _3467 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3456)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3456 + 2u)).x));
                        float _3471 = _3431.x - _2961;
                        float _3472 = _3431.y - _2962;
                        float _3473 = _3431.z - _2963;
                        float _3474 = dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473));
                        float _3477 = inversesqrt(_3474);
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3481 = dot(vec3(_1199, _1202, _1205), vec3(_3478, _3479, _3480));
                        float _3486 = 1.0 - (_3474 * _3431.w);
                        float _4908 = isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0));
                        float _3487 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3488 = sqrt(_3474) * _3450.w;
                        float _3491 = 1.39999997615814208984375 / (_3488 + 1.39999997615814208984375);
                        float _3492 = _3491 * _3491;
                        float _3495 = ((1.0 - _3492) * _3481) + _3492;
                        float _3498 = _3488 * _3488;
                        float _3502 = ((isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0))) * _3487) / ((_3498 * 0.699999988079071044921875) + 1.0);
                        float _3506 = (-0.0) - _2961;
                        float _3507 = (-0.0) - _2962;
                        float _3508 = (-0.0) - _2963;
                        float _3512 = inversesqrt(dot(vec3(_3506, _3507, _3508), vec3(_3506, _3507, _3508)));
                        float _3513 = _3512 * _3506;
                        float _3514 = _3512 * _3507;
                        float _3515 = _3512 * _3508;
                        float _3523 = exp2(log2(1.0 / ((_3498 * 3.5) + 5.0)) * 0.25);
                        float _3524 = 1.0 - _1274;
                        float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                        float _3532 = _3531 * _3531;
                        float _3533 = _3532 * _3532;
                        float _3534 = _3513 + _3478;
                        float _3535 = _3514 + _3479;
                        float _3536 = _3515 + _3480;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3544 = dot(vec3(_1199, _1202, _1205), vec3(_3513, _3514, _3515));
                        float _4924 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                        float _3547 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3548 = dot(vec3(_1199, _1202, _1205), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                        float _4935 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                        float _3551 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                        float _3556 = _3491 * _3532;
                        float _3557 = _3556 * _3556;
                        float _3560 = ((1.0 - _3557) * _3481) + _3557;
                        float _4946 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                        float _3561 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                        float _3562 = 1.0 - _3532;
                        float _3572 = (0.5 / (((_3561 * ((_3547 * _3562) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3561 * _3562) + _3532) * _3547))) * _3561;
                        float _4957 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3583 = (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0)))) / ((_3555 * _3555) * ((_3498 * 2.1991131305694580078125) + 3.141590118408203125))) * _3487;
                        _3335 = (_3502 * _3450.x) + _3408;
                        _3336 = (_3502 * _3450.y) + _3409;
                        _3337 = (_3502 * _3450.z) + _3410;
                        _3332 = (_3583 * _3467.x) + _3405;
                        _3333 = (_3583 * _3467.y) + _3406;
                        _3334 = (_3583 * _3467.z) + _3407;
                        if (_3412 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3337;
                            _3411 = _3412;
                        }
                    }
                    frontier_phi_66_pred = _3332;
                    frontier_phi_66_pred_1 = _3337;
                    frontier_phi_66_pred_2 = _3336;
                    frontier_phi_66_pred_3 = _3335;
                    frontier_phi_66_pred_4 = _3334;
                    frontier_phi_66_pred_5 = _3333;
                }
                _3109 = frontier_phi_66_pred;
                _3119 = frontier_phi_66_pred_1;
                _3117 = frontier_phi_66_pred_2;
                _3115 = frontier_phi_66_pred_3;
                _3113 = frontier_phi_66_pred_4;
                _3111 = frontier_phi_66_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3109;
                    _3261 = _3111;
                    _3262 = _3113;
                    _3263 = _3115;
                    _3264 = _3117;
                    _3265 = _3119;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
            _3118 = _3119;
        }
        uvec4 _3122 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3123 = _3122.z;
        uint _3125 = (_3123 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3125) & _3007) == 0u)
        {
            _3228 = _3108;
            _3230 = _3110;
            _3232 = _3112;
            _3234 = _3114;
            _3236 = _3116;
            _3238 = _3118;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
            float _3254 = _3253 * _2961;
            float _3255 = _3253 * _2962;
            float _3256 = _3253 * _2963;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3125 < ((_3123 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3388 = _3108;
                float _3389 = _3110;
                float _3390 = _3112;
                float _3391 = _3114;
                float _3392 = _3116;
                float _3393 = _3118;
                uint _3394 = _3125;
                uint _3403;
                bool _3404;
                for (;;)
                {
                    _3403 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3394 << 2u)) >> 2u)).x;
                    _3404 = _3403 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3404)
                    {
                        frontier_phi_77_pred = _3393;
                        frontier_phi_77_pred_1 = _3392;
                        frontier_phi_77_pred_2 = _3391;
                        frontier_phi_77_pred_3 = _3390;
                        frontier_phi_77_pred_4 = _3389;
                        frontier_phi_77_pred_5 = _3388;
                    }
                    else
                    {
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3610 = _3388;
                        float _3611 = _3389;
                        float _3612 = _3390;
                        float _3613 = _3391;
                        float _3614 = _3392;
                        float _3615 = _3393;
                        uint _3616 = _3403;
                        uint _3617;
                        vec4 _3642;
                        float _3643;
                        vec4 _3658;
                        vec3 _3670;
                        vec4 _3685;
                        vec4 _3700;
                        float _3746;
                        bool _3747;
                        for (;;)
                        {
                            uint _3627 = ((_3394 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3616));
                            _3617 = (_3616 + 4294967295u) & _3616;
                            uint _3629 = _3627 * 40u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            _3643 = _3642.w;
                            uint _3645 = (_3627 * 40u) + 4u;
                            _3658 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3645)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3645 + 3u)).x));
                            uint _3660 = (_3627 * 40u) + 8u;
                            _3670 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3660)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3660 + 2u)).x));
                            uint _3672 = (_3627 * 40u) + 16u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3687 = (_3627 * 40u) + 20u;
                            _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            uint _3702 = (_3627 * 40u) + 24u;
                            vec4 _3715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3702 + 3u)).x));
                            uint _3721 = (_3627 * 40u) + 28u;
                            vec4 _3734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3721 + 3u)).x));
                            _3746 = fma(_2963, _3734.z, fma(_2962, _3734.y, _3734.x * _2961)) + _3734.w;
                            _3747 = !((fma(_2963, _3715.z, fma(_2962, _3715.y, _3715.x * _2961)) + _3715.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3747)
                            {
                                float _3774 = _3642.x - _2961;
                                float _3775 = _3642.y - _2962;
                                float _3776 = _3642.z - _2963;
                                float _3777 = dot(vec3(_3774, _3775, _3776), vec3(_3774, _3775, _3776));
                                float _3780 = inversesqrt(_3777);
                                float _3781 = _3780 * _3774;
                                float _3782 = _3780 * _3775;
                                float _3783 = _3780 * _3776;
                                float _3787 = 1.0 - (_3777 / (_3643 * _3643));
                                float _4968 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3788 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3792 = sqrt(_3777) * _3658.w;
                                float _3794 = 1.39999997615814208984375 / (_3792 + 1.39999997615814208984375);
                                float _3795 = _3794 * _3794;
                                float _3798 = ((1.0 - _3795) * dot(vec3(_3781, _3782, _3783), vec3(_1199, _1202, _1205))) + _3795;
                                float _3801 = _3792 * _3792;
                                float _3805 = (fma(_2963, _3685.z, fma(_2962, _3685.y, _3685.x * _2961)) + _3685.w) / _3746;
                                float _3806 = (fma(_2963, _3700.z, fma(_2962, _3700.y, _3700.x * _2961)) + _3700.w) / _3746;
                                float _3810 = 1.0 - dot(vec2(_3805, _3806), vec2(_3805, _3806));
                                float _4984 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3811 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3812 = _3811 * (((isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0))) * _3788) / ((_3801 * 0.699999988079071044921875) + 1.0));
                                float _3824 = exp2(log2(1.0 / ((_3801 * 3.5) + 5.0)) * 0.25);
                                float _3825 = 1.0 - _1274;
                                float _3832 = sqrt(1.0 - ((1.0 - (_3825 * _3825)) * (1.0 - (_3824 * _3824))));
                                float _3833 = _3832 * _3832;
                                float _3834 = _3833 * _3833;
                                float _3835 = _3781 - _3254;
                                float _3836 = _3782 - _3255;
                                float _3837 = _3783 - _3256;
                                float _3841 = inversesqrt(dot(vec3(_3835, _3836, _3837), vec3(_3835, _3836, _3837)));
                                float _3845 = dot(vec3(_1199, _1202, _1205), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _4995 = isnan(0.0) ? _3845 : (isnan(_3845) ? 0.0 : max(_3845, 0.0));
                                float _3848 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3849 = dot(vec3(_1199, _1202, _1205), vec3(_3841 * _3835, _3841 * _3836, _3841 * _3837));
                                float _5006 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3852 = isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0));
                                float _3856 = ((_3852 * _3852) * (_3834 + (-1.0))) + 1.0;
                                float _3857 = _3794 * _3833;
                                float _3858 = _3857 * _3857;
                                float _3864 = ((1.0 - _3858) * dot(vec3(_1199, _1202, _1205), vec3(_3781, _3782, _3783))) + _3858;
                                float _5017 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
                                float _3866 = 1.0 - _3833;
                                float _3876 = (0.5 / (((_3865 * ((_3848 * _3866) + _3833)) + 9.9999999392252902907785028219223e-09) + (((_3865 * _3866) + _3833) * _3848))) * _3865;
                                float _5028 = isnan(0.0) ? _3876 : (isnan(_3876) ? 0.0 : max(_3876, 0.0));
                                float _3886 = (_3811 * _3788) * (((_3834 * 3.1415927410125732421875) * (isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0)))) / ((_3856 * _3856) * ((_3801 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3812 * _3658.y;
                                frontier_phi_83_pred_1 = _3812 * _3658.x;
                                frontier_phi_83_pred_2 = _3886 * _3670.z;
                                frontier_phi_83_pred_3 = _3886 * _3670.y;
                                frontier_phi_83_pred_4 = _3886 * _3670.x;
                                frontier_phi_83_pred_5 = _3812 * _3658.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3894 = frontier_phi_83_pred;
                            _3893 = frontier_phi_83_pred_1;
                            _3892 = frontier_phi_83_pred_2;
                            _3891 = frontier_phi_83_pred_3;
                            _3890 = frontier_phi_83_pred_4;
                            _3895 = frontier_phi_83_pred_5;
                            _3600 = _3893 + _3613;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            if (_3617 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3617;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3602;
                        frontier_phi_77_pred_1 = _3601;
                        frontier_phi_77_pred_2 = _3600;
                        frontier_phi_77_pred_3 = _3599;
                        frontier_phi_77_pred_4 = _3598;
                        frontier_phi_77_pred_5 = _3597;
                    }
                    _3239 = frontier_phi_77_pred;
                    _3237 = frontier_phi_77_pred_1;
                    _3235 = frontier_phi_77_pred_2;
                    _3233 = frontier_phi_77_pred_3;
                    _3231 = frontier_phi_77_pred_4;
                    _3229 = frontier_phi_77_pred_5;
                    uint _3395 = _3394 + 1u;
                    if (_3395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3388 = _3229;
                        _3389 = _3231;
                        _3390 = _3233;
                        _3391 = _3235;
                        _3392 = _3237;
                        _3393 = _3239;
                        _3394 = _3395;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3233;
                frontier_phi_58_59_ladder_1 = _3239;
                frontier_phi_58_59_ladder_2 = _3237;
                frontier_phi_58_59_ladder_3 = _3235;
                frontier_phi_58_59_ladder_4 = _3231;
                frontier_phi_58_59_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_58_59_ladder = _3112;
                frontier_phi_58_59_ladder_1 = _3118;
                frontier_phi_58_59_ladder_2 = _3116;
                frontier_phi_58_59_ladder_3 = _3114;
                frontier_phi_58_59_ladder_4 = _3110;
                frontier_phi_58_59_ladder_5 = _3108;
            }
            _3228 = frontier_phi_58_59_ladder_5;
            _3230 = frontier_phi_58_59_ladder_4;
            _3232 = frontier_phi_58_59_ladder;
            _3234 = frontier_phi_58_59_ladder_3;
            _3236 = frontier_phi_58_59_ladder_2;
            _3238 = frontier_phi_58_59_ladder_1;
        }
        float _3243 = isnan(1.0) ? _1258 : (isnan(_1258) ? 1.0 : min(_1258, 1.0));
        _3020 = (_3243 * _3234) + _2456;
        _3022 = (_3243 * _3236) + _2458;
        _3024 = (_3243 * _3238) + _2460;
        _3026 = ((_3228 * _1242) * _3243) + _2801;
        _3028 = ((_3230 * _1244) * _3243) + _2803;
        _3030 = ((_3232 * _1245) * _3243) + _2805;
    }
    else
    {
        _3020 = _2456;
        _3022 = _2458;
        _3024 = _2460;
        _3026 = _2801;
        _3028 = _2803;
        _3030 = _2805;
    }
    float _5044 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _5055 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _5066 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _3047 = ((isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0))) * (_3020 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1258))) + ((_3026 + ((isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))) * _2095)) * cbPerFrame._m0[3u].x);
    float _3048 = ((isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0))) * (_3022 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1258))) + ((_3028 + ((isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0))) * _2095)) * cbPerFrame._m0[3u].x);
    float _3049 = ((isnan(1.0) ? _5066 : (isnan(_5066) ? 1.0 : min(_5066, 1.0))) * (_3024 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1258))) + ((_3030 + ((isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0))) * _2095)) * cbPerFrame._m0[3u].x);
    uint _3050 = _271 + 6u;
    float _3058 = _1180 / cbSceneParam._m0[86u].x;
    float _3059 = _1181 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _1103 : (isnan(_1103) ? cbSceneParam._m0[77u].w : min(_1103, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3170;
    float _3172;
    float _3174;
    float _3176;
    if (_1103 > cbSceneParam._m0[78u].w)
    {
        float _3133 = isnan(_1103) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1103 : min(cbSceneParam._m0[80u].w, _1103));
        float _3134 = _3133 / _1103;
        float _3145 = _3134 * _1153;
        float _3146 = _1154 * _3134;
        float _3147 = (-0.0) - _3146;
        float _3148 = _3134 * _1155;
        float _3150 = (cbSceneParam._m0[77u].w * _3147) / _3133;
        float _3151 = _3150 + cbSceneParam._m0[79u].w;
        float _3152 = cbSceneParam._m0[79u].w - _3146;
        float _3158 = sqrt(((_3145 * _3145) + (_3146 * _3146)) + (_3148 * _3148));
        float _3161 = (1.0 - (cbSceneParam._m0[77u].w / _3133)) * _3158;
        float _3166 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3168 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3345;
        if (abs((_3147 - _3150) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3345 = ((((_3151 > 0.0) ? exp2(_3166 * _3151) : (2.0 - exp2(_3168 * _3151))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3161;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : max(_3151, _3152));
            float _3291 = isnan(_3152) ? _3151 : (isnan(_3151) ? _3152 : min(_3151, _3152));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3345 = ((abs(_3158 / _3147) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3166 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3166 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3168 * _3300) - exp2(_3168 * _3301)) * _3289))) + (_3161 * cbSceneParam._m0[80u].z);
        }
        vec4 _3347 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3356 = exp2((_3345 * (-1.44269502162933349609375)) * (1.0 - _3347.w));
        float _3357 = log2(_3356);
        float _3373 = log2(_3078);
        _3170 = (exp2(_3373 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].x)) * _3347.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3172 = (exp2(_3373 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].y)) * _3347.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3174 = (exp2(_3373 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3357 * cbSceneParam._m0[78u].z)) * _3347.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3176 = _3356 * _3078;
    }
    else
    {
        _3170 = _3075;
        _3172 = _3076;
        _3174 = _3077;
        _3176 = _3078;
    }
    bool _3383;
    vec4 _3186;
    vec4 _3208;
    float _3210;
    float _3214;
    float _3215;
    float _3216;
    float _3217;
    bool _3227;
    for (;;)
    {
        _3186 = cbMatDynParam._m0[0u];
        float _3188 = roundEven(_3186.y);
        bool _3189 = _3188 == 3.0;
        float _3190 = log2(_3176);
        float _3197 = exp2(_3190 * cbSceneParam._m0[78u].x) * _3047;
        float _3198 = exp2(_3190 * cbSceneParam._m0[78u].y) * _3048;
        float _3199 = exp2(_3190 * cbSceneParam._m0[78u].z) * _3049;
        float _3206 = _1169 + (-0.5);
        _3208 = cbMtdParam._m0[1u];
        _3210 = _3208.y * _3206;
        float _3213 = (_3188 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3214 = _3213 * (_3189 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3170)));
        _3215 = _3213 * (_3189 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3172)));
        _3216 = _3213 * (_3189 ? _3199 : (_3199 + (cbSceneParam._m0[72u].w * _3174)));
        _3217 = _3206 * 0.999000012874603271484375;
        _3227 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3227)
        {
            if ((cbInstanceData._m0[_271 + 7u].x + _3217) < 0.5)
            {
                _3383 = true;
                break;
            }
        }
        uint _3324 = _1218 + uint(_3186.w);
        if ((cbInstanceData._m0[_3324].w < 1.0) && ((cbInstanceData._m0[_3324].w + _3217) < 0.5))
        {
            _3383 = true;
            break;
        }
        if ((_3210 + 1.0) < _3208.x)
        {
            _3383 = true;
            break;
        }
        _3383 = false;
        break;
    }
    float _3588;
    if (_3383)
    {
        discard_state = true;
        _3588 = 0.0;
    }
    else
    {
        _3588 = cbInstanceData._m0[_3050].w;
    }
    SV_Target.x = _3214;
    SV_Target.y = _3215;
    SV_Target.z = _3216;
    SV_Target.w = _3588;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
    discard_exit();
}


