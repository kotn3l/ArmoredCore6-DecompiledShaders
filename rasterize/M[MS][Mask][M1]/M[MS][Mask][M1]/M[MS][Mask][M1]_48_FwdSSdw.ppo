#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1454;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _245 = _244 * _236;
    float _246 = _244 * _237;
    float _247 = _244 * _238;
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = _251 * NORMAL.x;
    float _253 = _251 * NORMAL.y;
    float _254 = _251 * NORMAL.z;
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = _258 * TANGENT.x;
    float _260 = _258 * TANGENT.y;
    float _261 = _258 * TANGENT.z;
    float _270 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _272 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3802 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _3813 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _3824 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    uint _283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _288 = _283 + 1u;
    uint _292 = _283 + 2u;
    float _301 = sqrt(((cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x) + (cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x)) + (cbInstanceData._m0[_292].x * cbInstanceData._m0[_292].x));
    float _302 = _301 * TEXCOORD.z;
    float _303 = _301 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _302) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _303) + cbTextureTilingScale._m0[13u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _302) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _303) + cbTextureTilingScale._m0[5u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3835 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    float _453 = (_446 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _454 = (_446 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _455 = (_446 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    float _459 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _316.x) * _453;
    float _462 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _316.y) * _454;
    float _465 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _316.z) * _455;
    float _472 = ((_453 - _459) * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) + _459;
    float _473 = ((_454 - _462) * (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) + _462;
    float _474 = ((_455 - _465) * (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0)))) + _465;
    vec4 _493 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _302) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _303) + cbTextureTilingScale._m0[14u].w));
    vec4 _513 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _302) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _303) + cbTextureTilingScale._m0[20u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _302) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _303) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _570 = ((_540.z - _561) * _446) + _561;
    float _573 = ((((_540.x - _559) * _446) + _559) * 2.0) + (-1.0);
    float _574 = ((((_540.y - _560) * _446) + _560) * 2.0) + (-1.0);
    float _575 = dot(vec2(_573, _574), vec2(_573, _574));
    float _3846 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _580 = sqrt(1.0 - (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _612 = (_573 + ((((_513.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_600.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _613 = (_574 + ((((_513.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_600.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _616 = fma(_580, _252, fma(_613, _259, _612 * _245));
    float _619 = fma(_580, _253, fma(_613, _260, _612 * _246));
    float _622 = fma(_580, _254, fma(_613, _261, _612 * _247));
    float _626 = inversesqrt(dot(vec3(_616, _619, _622), vec3(_616, _619, _622)));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _302) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _303) + cbTextureTilingScale._m0[11u].w));
    float _655 = _653.x;
    float _656 = 1.0 - _655;
    float _665 = (cbMtdParam._m0[19u].x + dot(vec4(_626 * _616, _626 * _619, _626 * _622, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_655 - _656) * cbMtdParam._m0[24u].z) + _656) * cbMtdParam._m0[21u].z);
    float _3857 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
    float _666 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _668 = (-0.0) - cbMtdParam._m0[24u].x;
    float _670 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _671 = isnan(1.0) ? _670 : (isnan(_670) ? 1.0 : min(_670, 1.0));
    float _678 = _666 - ((_666 * TEXCOORD_8.x) * _671);
    float _679 = _666 - ((_666 * TEXCOORD_8.y) * _671);
    float _680 = _666 - ((_666 * TEXCOORD_8.z) * _671);
    float _687 = (_678 * ((_493.x * cbMtdParam._m0[18u].x) - _472)) + _472;
    float _688 = (_679 * ((_493.y * cbMtdParam._m0[18u].y) - _473)) + _473;
    float _689 = (_680 * ((_493.z * cbMtdParam._m0[18u].z) - _474)) + _474;
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _302) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _303) + cbTextureTilingScale._m0[19u].w));
    float _703 = _701.x;
    float _704 = 1.0 - _703;
    float _730 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_703 - _704) * cbMtdParam._m0[24u].w) + _704) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3878 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _731 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _739 = ((((cbMtdParam._m0[10u].x - _687) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _731) + _687;
    float _740 = ((((cbMtdParam._m0[10u].y - _688) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _731) + _688;
    float _741 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _689)) * _731) + _689;
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _769 = _767.x;
    float _787 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _302) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _303) + cbTextureTilingScale._m0[9u].w)).x - _769) * _446) + _769;
    float _791 = ((_753.x - _787) * cbMtdParam._m0[19u].z) + _787;
    float _793 = _791 - (_791 * _678);
    float _795 = _793 - (_793 * _731);
    float _800 = (((_513.z - _570) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _570;
    float _804 = ((_600.z - _800) * cbMtdParam._m0[19u].w) + _800;
    vec4 _818 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _302) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _303) + cbTextureTilingScale._m0[15u].w));
    float _825 = (_818.x * 2.0) + (-1.0);
    float _826 = (_818.y * 2.0) + (-1.0);
    float _827 = dot(vec2(_825, _826), vec2(_825, _826));
    float _3889 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _835 = ((_818.z - _804) * _678) + _804;
    float _838 = ((cbMtdParam._m0[23u].x - _835) * _731) + _835;
    vec4 _859 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _302) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _303) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _865 = (_859.x * 2.0) + (-1.0);
    float _866 = (_859.y * 2.0) + (-1.0);
    float _867 = dot(vec2(_865, _866), vec2(_865, _866));
    float _3900 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _882 = ((sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _580) * _680) + _580;
    float _885 = (((_825 - _612) * _678) + _612) + (cbMtdParam._m0[21u].x * _612);
    float _886 = (((_826 - _613) * _679) + _613) + (cbMtdParam._m0[21u].x * _613);
    float _897 = (((_865 - _885) + (_885 * cbMtdParam._m0[22u].z)) * _731) + _885;
    float _898 = (((_866 - _886) + (_886 * cbMtdParam._m0[22u].z)) * _731) + _886;
    float _899 = (_731 * (sqrt(1.0 - (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) - _882)) + _882;
    float _901 = cbMtdParam._m0[22u].x + _600.w;
    float _904 = fma(_899, _252, fma(_898, _259, _897 * _245));
    float _907 = fma(_899, _253, fma(_898, _260, _897 * _246));
    float _910 = fma(_899, _254, fma(_898, _261, _897 * _247));
    float _914 = inversesqrt(dot(vec3(_904, _907, _910), vec3(_904, _907, _910)));
    float _915 = _914 * _904;
    float _916 = _914 * _907;
    float _917 = _914 * _910;
    float _3911 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _918 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _3933 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3944 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _3955 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _3966 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _923 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _937 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _987 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _977);
    float _988 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _977);
    float _989 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _977);
    float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
    float _994 = _987 * _993;
    float _995 = _988 * _993;
    float _996 = _989 * _993;
    float _1002 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1003 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1021 = fma(_917, cbSceneParam._m0[5u].z, fma(_916, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _915));
    float _1024 = fma(_917, cbSceneParam._m0[6u].z, fma(_916, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _915));
    float _1027 = fma(_917, cbSceneParam._m0[7u].z, fma(_916, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _915));
    uint _1041 = (_283 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1047 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1041].x;
    float _1048 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_1041].y;
    float _1049 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * cbInstanceData._m0[_1041].z;
    float _3977 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _1050 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _1051 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _3999 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _1052 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1053 = 1.0 - _923;
    float _1054 = _1050 * _1053;
    float _1055 = _1051 * _1053;
    float _1056 = _1052 * _1053;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _923;
    float _1062 = (_1051 + (-0.039999999105930328369140625)) * _923;
    float _1063 = (_1052 + (-0.039999999105930328369140625)) * _923;
    float _1064 = _1061 + 0.039999999105930328369140625;
    float _1066 = _1062 + 0.039999999105930328369140625;
    float _1067 = _1063 + 0.039999999105930328369140625;
    vec4 _1076 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1002, cbSceneParam._m0[86u].y * _1003));
    float _1080 = ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * TEXCOORD_5.w) * _1076.x;
    float _1081 = dot(vec3(_915, _916, _917), vec3(_994, _995, _996));
    float _1084 = _1081 * 2.0;
    float _1088 = (_1084 * _915) - _994;
    float _1089 = (_1084 * _916) - _995;
    float _1090 = (_1084 * _917) - _996;
    float _1094 = abs(dot(vec3(_994, _995, _996), vec3(_915, _916, _917)));
    float _4010 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1096 = sqrt(_918);
    float _1109 = exp2((_1096 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1096 * 3.0));
    float _1115 = (1.0 - _1109) * ((_1096 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1116 = _1109 * _1096;
    float _1144 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1148 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1152 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1453;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1178 = fma(_1152, cbModelParam._m0[26u].z, fma(_1148, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1144));
        float _1182 = fma(_1152, cbModelParam._m0[27u].z, fma(_1148, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1144));
        float _1186 = fma(_1152, cbModelParam._m0[28u].z, fma(_1148, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1144));
        float _1211 = _1144 + _915;
        float _1212 = _1148 + _916;
        float _1213 = _1152 + _917;
        float _1223 = fma(_1213, cbModelParam._m0[26u].z, fma(_1212, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211)) - _1178;
        float _1224 = fma(_1213, cbModelParam._m0[27u].z, fma(_1212, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211)) - _1182;
        float _1225 = fma(_1213, cbModelParam._m0[28u].z, fma(_1212, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211)) - _1186;
        float _1229 = inversesqrt(dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225)));
        float _1242 = ((_1229 * _1223) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1178 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1229 * _1224) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1182 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1244 = ((_1229 * _1225) / cbModelParam._m0[34u].z) + ((((((_1186 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1242, _1243, _1244), 0.0);
        float _1281 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1247.x + (-0.5));
        float _1283 = _1281 * (_1247.y + (-0.5));
        float _1284 = _1281 * (_1247.z + (-0.5));
        float _1291 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1254.x + (-0.5));
        float _1293 = _1291 * (_1254.y + (-0.5));
        float _1294 = _1291 * (_1254.z + (-0.5));
        float _1301 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1261.x + (-0.5));
        float _1303 = _1301 * (_1261.y + (-0.5));
        float _1304 = _1301 * (_1261.z + (-0.5));
        float _1311 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1268.x + (-0.5));
        float _1313 = _1311 * (_1268.y + (-0.5));
        float _1314 = _1311 * (_1268.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1335 = (dot(vec3(_915, _916, _917), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1345 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _4058 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1347 + 1.0))) + _1352) * _1315;
        float _1362 = _1283 * 0.5;
        float _1363 = _1293 * 0.5;
        float _1364 = _1303 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_915, _916, _917), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _4091 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1389 + 1.0))) + _1394) * _1316;
        float _1404 = _1284 * 0.5;
        float _1405 = _1294 * 0.5;
        float _1406 = _1304 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_915, _916, _917), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _4102 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _4113 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _4124 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (_1431 + 1.0))) + _1436) * _1317;
        _1453 = _1284;
        _1455 = _1283;
        _1456 = _1282;
        _1457 = _1294;
        _1458 = _1293;
        _1459 = _1292;
        _1460 = _1304;
        _1461 = _1303;
        _1462 = _1302;
        _1463 = _1317;
        _1464 = _1316;
        _1465 = _1315;
        _1466 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1467 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1468 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _1454;
        _1455 = _1454;
        _1456 = _1454;
        _1457 = _1454;
        _1458 = _1454;
        _1459 = _1454;
        _1460 = _1454;
        _1461 = _1454;
        _1462 = _1454;
        _1463 = _1454;
        _1464 = _1454;
        _1465 = _1454;
        _1466 = 0.0;
        _1467 = 0.0;
        _1468 = 0.0;
    }
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1493 = fma(_1152, cbModelParam._m0[30u].z, fma(_1148, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1144));
        float _1497 = fma(_1152, cbModelParam._m0[31u].z, fma(_1148, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1144));
        float _1501 = fma(_1152, cbModelParam._m0[32u].z, fma(_1148, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1144));
        float _1524 = _1144 + _915;
        float _1525 = _1148 + _916;
        float _1526 = _1152 + _917;
        float _1536 = fma(_1526, cbModelParam._m0[30u].z, fma(_1525, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1524)) - _1493;
        float _1537 = fma(_1526, cbModelParam._m0[31u].z, fma(_1525, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1524)) - _1497;
        float _1538 = fma(_1526, cbModelParam._m0[32u].z, fma(_1525, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1524)) - _1501;
        float _1542 = inversesqrt(dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538)));
        float _1555 = ((_1542 * _1536) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1493 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1556 = ((_1542 * _1537) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1497 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1557 = ((_1542 * _1538) / cbModelParam._m0[35u].z) + ((((((_1501 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1555, _1556, _1557), 0.0);
        float _1592 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1559.x + (-0.5));
        float _1594 = _1592 * (_1559.y + (-0.5));
        float _1595 = _1592 * (_1559.z + (-0.5));
        float _1602 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1603 = _1602 * (_1566.x + (-0.5));
        float _1604 = _1602 * (_1566.y + (-0.5));
        float _1605 = _1602 * (_1566.z + (-0.5));
        float _1612 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1573.x + (-0.5));
        float _1614 = _1612 * (_1573.y + (-0.5));
        float _1615 = _1612 * (_1573.z + (-0.5));
        float _1622 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1580.x + (-0.5));
        float _1624 = _1622 * (_1580.y + (-0.5));
        float _1625 = _1622 * (_1580.z + (-0.5));
        float _1626 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1627 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1628 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1629 = _1593 * 0.5;
        float _1630 = _1603 * 0.5;
        float _1631 = _1613 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_915, _916, _917), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1626 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4187 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1656 + 1.0))) + _1661) * _1626;
        float _1671 = _1594 * 0.5;
        float _1672 = _1604 * 0.5;
        float _1673 = _1614 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_915, _916, _917), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1627 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4220 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1698 + 1.0))) + _1703) * _1627;
        float _1713 = _1595 * 0.5;
        float _1714 = _1605 * 0.5;
        float _1715 = _1615 * 0.5;
        float _1716 = dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715));
        float _1721 = (_1716 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1716);
        float _1729 = (dot(vec3(_915, _916, _917), vec3(_1721 * _1713, _1721 * _1714, _1721 * _1715)) + 1.0) * 0.5;
        float _4231 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1738 = sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715)) / (_1628 + 9.9999997473787516355514526367188e-06);
        float _4242 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1739 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1740 = _1739 * 2.0;
        float _1744 = (1.0 - _1739) / (_1739 + 1.0);
        float _4253 = isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0));
        float _1745 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1754 = ((((1.0 - _1745) * (_1740 + 2.0)) * exp2(log2(isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (_1740 + 1.0))) + _1745) * _1628;
        _1762 = _1595;
        _1763 = _1594;
        _1764 = _1593;
        _1765 = _1605;
        _1766 = _1604;
        _1767 = _1603;
        _1768 = _1615;
        _1769 = _1614;
        _1770 = _1613;
        _1771 = _1628;
        _1772 = _1627;
        _1773 = _1626;
        _1774 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1775 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
        _1776 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)));
    }
    else
    {
        _1762 = _1454;
        _1763 = _1454;
        _1764 = _1454;
        _1765 = _1454;
        _1766 = _1454;
        _1767 = _1454;
        _1768 = _1454;
        _1769 = _1454;
        _1770 = _1454;
        _1771 = _1454;
        _1772 = _1454;
        _1773 = _1454;
        _1774 = 0.0;
        _1775 = 0.0;
        _1776 = 0.0;
    }
    float _1786 = (cbModelParam._m0[1u].x * (_1774 - _1466)) + _1466;
    float _1787 = (cbModelParam._m0[1u].x * (_1775 - _1467)) + _1467;
    float _1788 = (cbModelParam._m0[1u].x * (_1776 - _1468)) + _1468;
    float _1809 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1812 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1815 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1786));
    float _1830 = _1088 * 0.5;
    float _1831 = _1089 * 0.5;
    float _1832 = _1090 * 0.5;
    float _1833 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1764, _1767, _1770, _1773));
    float _1836 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1763, _1766, _1769, _1772));
    float _1839 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1762, _1765, _1768, _1771));
    float _1873;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1846 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1453, _1457, _1460, _1463));
        float _1850 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1455, _1458, _1461, _1464));
        float _1854 = dot(vec4(_1830, _1831, _1832, 1.0), vec4(_1456, _1459, _1462, _1465));
        float _1861 = dot(vec4(cbModelParam._m0[39u]), vec4(_1830, _1831, _1832, 1.0));
        _1873 = dot(vec3(isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1861) ? 0.0 : (isnan(0.0) ? _1861 : max(0.0, _1861))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1873 = 1.0;
    }
    float _1884;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1875 = dot(vec4(cbModelParam._m0[40u]), vec4(_1830, _1831, _1832, 1.0));
        _1884 = dot(vec3(isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)), isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0)), isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1884 = 1.0;
    }
    float _1888 = (_1884 * cbModelParam._m0[1u].x) + (_1873 * (1.0 - cbModelParam._m0[1u].x));
    float _1898 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _918);
    float _1899 = isnan(_1898) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1898 : min(cbModelParam._m0[25u].z, _1898));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1946 = fma(_1152, cbModelParam._m0[13u].z, fma(_1148, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1144)) + cbModelParam._m0[13u].w;
        float _1950 = fma(_1152, cbModelParam._m0[14u].z, fma(_1148, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1144)) + cbModelParam._m0[14u].w;
        float _1954 = fma(_1152, cbModelParam._m0[15u].z, fma(_1148, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1144)) + cbModelParam._m0[15u].w;
        float _1957 = fma(_1090, cbModelParam._m0[13u].z, fma(_1089, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1088));
        float _1960 = fma(_1090, cbModelParam._m0[14u].z, fma(_1089, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1088));
        float _1963 = fma(_1090, cbModelParam._m0[15u].z, fma(_1089, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1088));
        float _1991;
        if (_1957 > 0.0)
        {
            _1991 = abs((1.0 - _1946) / _1957);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1946 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1991 = frontier_phi_14_12_ladder;
        }
        float _2214;
        if (_1960 > 0.0)
        {
            _2214 = abs((1.0 - _1950) / _1960);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1950 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2214 = frontier_phi_23_19_ladder;
        }
        float _2471;
        if (_1963 > 0.0)
        {
            _2471 = abs((1.0 - _1954) / _1963);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1954 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2471 = frontier_phi_35_30_ladder;
        }
        float _2473 = isnan(_2214) ? _1991 : (isnan(_1991) ? _2214 : min(_1991, _2214));
        float _2474 = isnan(_2471) ? _2473 : (isnan(_2473) ? _2471 : min(_2473, _2471));
        float _2478 = (_2474 * _1957) + _1946;
        float _2479 = (_2474 * _1960) + _1950;
        float _2480 = (_2474 * _1963) + _1954;
        float _2481 = _2474 * 9.9999997473787516355514526367188e-05;
        float _2483 = (-1.0) - _2481;
        float _2485 = _2481 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2480 > _2485) || ((_2480 < _2483) || ((_2479 > _2485) || ((_2479 < _2483) || ((_2478 < _2483) || (_2478 > _2485))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2480, cbModelParam._m0[9u].z, fma(_2479, cbModelParam._m0[9u].y, _2478 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2480, cbModelParam._m0[10u].z, fma(_2479, cbModelParam._m0[10u].y, _2478 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2480, cbModelParam._m0[11u].z, fma(_2479, cbModelParam._m0[11u].y, _2478 * cbModelParam._m0[11u].x))), _1899);
            frontier_phi_13_35_ladder = _2608.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2608.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2608.x * cbModelParam._m0[1u].y;
        }
        _1979 = frontier_phi_13_35_ladder_2;
        _1981 = frontier_phi_13_35_ladder_1;
        _1983 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1088, _1089, _1090), _1899);
        _1979 = _1967.x * cbModelParam._m0[1u].y;
        _1981 = _1967.y * cbModelParam._m0[1u].y;
        _1983 = _1967.z * cbModelParam._m0[1u].y;
    }
    float _1987 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _918);
    float _1988 = isnan(_1987) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1987 : min(cbModelParam._m0[25u].w, _1987));
    float _2077;
    float _2079;
    float _2081;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2041 = fma(_1152, cbModelParam._m0[21u].z, fma(_1148, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1144)) + cbModelParam._m0[21u].w;
        float _2045 = fma(_1152, cbModelParam._m0[22u].z, fma(_1148, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1144)) + cbModelParam._m0[22u].w;
        float _2049 = fma(_1152, cbModelParam._m0[23u].z, fma(_1148, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1144)) + cbModelParam._m0[23u].w;
        float _2052 = fma(_1090, cbModelParam._m0[21u].z, fma(_1089, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1088));
        float _2055 = fma(_1090, cbModelParam._m0[22u].z, fma(_1089, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1088));
        float _2058 = fma(_1090, cbModelParam._m0[23u].z, fma(_1089, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1088));
        float _2219;
        if (_2052 > 0.0)
        {
            _2219 = abs((1.0 - _2041) / _2052);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2041 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2219 = frontier_phi_25_21_ladder;
        }
        float _2498;
        if (_2055 > 0.0)
        {
            _2498 = abs((1.0 - _2045) / _2055);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2045 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2498 = frontier_phi_37_32_ladder;
        }
        float _2711;
        if (_2058 > 0.0)
        {
            _2711 = abs((1.0 - _2049) / _2058);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2058 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2049 + 1.0) / _2058);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2711 = frontier_phi_46_43_ladder;
        }
        float _2713 = isnan(_2498) ? _2219 : (isnan(_2219) ? _2498 : min(_2219, _2498));
        float _2714 = isnan(_2711) ? _2713 : (isnan(_2713) ? _2711 : min(_2713, _2711));
        float _2718 = (_2714 * _2052) + _2041;
        float _2719 = (_2714 * _2055) + _2045;
        float _2720 = (_2714 * _2058) + _2049;
        float _2721 = _2714 * 9.9999997473787516355514526367188e-05;
        float _2722 = (-1.0) - _2721;
        float _2724 = _2721 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2720 > _2724) || ((_2720 < _2722) || ((_2719 > _2724) || ((_2719 < _2722) || ((_2718 < _2722) || (_2718 > _2724))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2720, cbModelParam._m0[17u].z, fma(_2719, cbModelParam._m0[17u].y, _2718 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2720, cbModelParam._m0[18u].z, fma(_2719, cbModelParam._m0[18u].y, _2718 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2720, cbModelParam._m0[19u].z, fma(_2719, cbModelParam._m0[19u].y, _2718 * cbModelParam._m0[19u].x))), _1988);
            frontier_phi_22_46_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _2077 = frontier_phi_22_46_ladder_2;
        _2079 = frontier_phi_22_46_ladder_1;
        _2081 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2061 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1088, _1089, _1090), _1988);
        _2077 = _2061.x * cbModelParam._m0[1u].z;
        _2079 = _2061.y * cbModelParam._m0[1u].z;
        _2081 = _2061.z * cbModelParam._m0[1u].z;
    }
    float _2094 = (((_1115 * _1064) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2077 - _1979)) + _1979);
    float _2096 = (((_1115 * _1066) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2079 - _1981)) + _1981);
    float _2098 = (((_1115 * _1067) + _1116) * _1080) * ((cbModelParam._m0[1u].w * (_2081 - _1983)) + _1983);
    float _2101 = fma(_2098, cbSceneParam._m0[89u].z, fma(_2096, cbSceneParam._m0[89u].y, _2094 * cbSceneParam._m0[89u].x));
    float _2104 = fma(_2098, cbSceneParam._m0[90u].z, fma(_2096, cbSceneParam._m0[90u].y, _2094 * cbSceneParam._m0[90u].x));
    float _2107 = fma(_2098, cbSceneParam._m0[91u].z, fma(_2096, cbSceneParam._m0[91u].y, _2094 * cbSceneParam._m0[91u].x));
    vec4 _2115 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1002, _1003));
    float _2117 = _2115.w;
    float _2129 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2117);
    float _2130 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2117);
    float _2131 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2117);
    uvec4 _2135 = floatBitsToUint(cbInstanceData._m0[_283 + 5u]);
    uint _2137 = _2135.x * 14u;
    uint _2138 = _2137 + 13u;
    float _2145 = _1080 + (-1.0);
    float _2150 = (cbLight._m0[_2138].x * _2145) + 1.0;
    float _2151 = (cbLight._m0[_2138].y * _2145) + 1.0;
    float _2152 = (cbLight._m0[_2138].z * _2145) + 1.0;
    float _2153 = (cbLight._m0[_2138].w * _2145) + 1.0;
    uint _2154 = _2137 + 5u;
    float _2160 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2164 = _2137 + 4u;
    float _2173 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2177 = _2137 | 1u;
    float _2188 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_915, _916, _917));
    float _2191 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_915, _916, _917));
    float _4389 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _4400 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2196 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2198 = (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.3183098733425140380859375;
    float _2205 = ((cbLight._m0[_2154].x * _2160) * _2198) + (((cbLight._m0[_2164].x * _2129) * _2173) * _2196);
    float _2206 = ((_2160 * cbLight._m0[_2154].y) * _2198) + (((cbLight._m0[_2164].y * _2130) * _2173) * _2196);
    float _2207 = ((_2160 * cbLight._m0[_2154].z) * _2198) + (((cbLight._m0[_2164].z * _2131) * _2173) * _2196);
    uvec4 _2211 = floatBitsToUint(cbLight._m0[_2137 + 12u]);
    bool _2213 = _2211.x == 0u;
    float _2224;
    float _2226;
    float _2228;
    if (_2213)
    {
        _2224 = _2205;
        _2226 = _2206;
        _2228 = _2207;
    }
    else
    {
        uint _2232 = _2137 + 6u;
        float _2248 = (dot(vec3(cbLight._m0[_2137 + 2u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2249 = _2248 * _2248;
        float _4411 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
        float _2250 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _2251 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2224 = (((cbLight._m0[_2232].x * 0.3183098733425140380859375) * _2250) * _2251) + _2205;
        _2226 = (((cbLight._m0[_2232].y * 0.3183098733425140380859375) * _2250) * _2251) + _2206;
        _2228 = (((cbLight._m0[_2232].z * 0.3183098733425140380859375) * _2250) * _2251) + _2207;
    }
    bool _2231 = _2211.y == 0u;
    float _2269;
    float _2271;
    float _2273;
    if (_2231)
    {
        _2269 = _2224;
        _2271 = _2226;
        _2273 = _2228;
    }
    else
    {
        uint _2442 = _2137 + 7u;
        float _2458 = (dot(vec3(cbLight._m0[_2137 + 3u].xyz), vec3(_915, _916, _917)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4427 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _2461 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2269 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2224;
        _2271 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2226;
        _2273 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2228;
    }
    uint _2276 = _2137 + 8u;
    float _2289 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2137].w)) * _918) * 0.949999988079071044921875);
    float _2290 = _2289 * _2289;
    float _2291 = cbLight._m0[_2137].x + _994;
    float _2292 = cbLight._m0[_2137].y + _995;
    float _2293 = cbLight._m0[_2137].z + _996;
    float _2297 = inversesqrt(dot(vec3(_2291, _2292, _2293), vec3(_2291, _2292, _2293)));
    float _2298 = _2297 * _2291;
    float _2299 = _2297 * _2292;
    float _2300 = _2297 * _2293;
    float _2301 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2137].xyz));
    float _4443 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _4454 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
    float _2305 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2306 = dot(vec3(_915, _916, _917), vec3(_2298, _2299, _2300));
    float _4465 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2309 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
    float _2310 = dot(vec3(cbLight._m0[_2137].xyz), vec3(_2298, _2299, _2300));
    float _4476 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
    float _2314 = _2290 * _2290;
    float _2318 = ((_2309 * _2309) * (_2314 + (-1.0))) + 1.0;
    float _2326 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
    float _2327 = 0.959999978542327880859375 - _1061;
    float _2329 = 0.959999978542327880859375 - _1062;
    float _2330 = 0.959999978542327880859375 - _1063;
    float _2337 = 1.0 - _2290;
    float _2348 = (0.5 / (((_2305 * ((_2304 * _2337) + _2290)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2337) + _2290) * _2304))) * _2304;
    float _4487 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2350 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2314 / ((_2318 * _2318) * 3.141590118408203125));
    uint _2364 = _2137 + 9u;
    float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _918) * 0.949999988079071044921875);
    float _2376 = _2375 * _2375;
    float _2377 = cbLight._m0[_2177].x + _994;
    float _2378 = cbLight._m0[_2177].y + _995;
    float _2379 = cbLight._m0[_2177].z + _996;
    float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
    float _2384 = _2383 * _2377;
    float _2385 = _2383 * _2378;
    float _2386 = _2383 * _2379;
    float _2387 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2177].xyz));
    float _4498 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2390 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2391 = dot(vec3(_915, _916, _917), vec3(_2384, _2385, _2386));
    float _4509 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
    float _2395 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2384, _2385, _2386));
    float _4520 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2399 = _2376 * _2376;
    float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
    float _2410 = exp2(log2(1.0 - (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) * 5.0);
    float _2417 = 1.0 - _2376;
    float _2427 = (0.5 / (((_2305 * ((_2390 * _2417) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2417) + _2376) * _2390))) * _2390;
    float _4531 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
    float _2439 = (((((_2410 * _2327) + _1064) * cbLight._m0[_2364].x) * _2429) * _2160) + ((((cbLight._m0[_2276].x * _2129) * ((_2326 * _2327) + _1064)) * _2350) * _2173);
    float _2440 = (((((_2410 * _2329) + _1066) * cbLight._m0[_2364].y) * _2429) * _2160) + ((((cbLight._m0[_2276].y * _2130) * ((_2326 * _2329) + _1066)) * _2350) * _2173);
    float _2441 = (((((_2410 * _2330) + _1067) * cbLight._m0[_2364].z) * _2429) * _2160) + ((((cbLight._m0[_2276].z * _2131) * ((_2326 * _2330) + _1067)) * _2350) * _2173);
    float _2503;
    float _2505;
    float _2507;
    if (_2213)
    {
        _2503 = _2439;
        _2505 = _2440;
        _2507 = _2441;
    }
    else
    {
        uint _2509 = _2137 + 2u;
        uint _2513 = _2137 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _918) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _994;
        float _2530 = cbLight._m0[_2509].y + _995;
        float _2531 = cbLight._m0[_2509].z + _996;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2509].xyz));
        float _4542 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2543 = dot(vec3(_915, _916, _917), vec3(_2536, _2537, _2538));
        float _4553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4564 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2305 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2569) + _2528) * _2542))) * _2542;
        float _4575 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2503 = (((((_2562 * _2327) + _1064) * cbLight._m0[_2513].x) * _2581) * _2582) + _2439;
        _2505 = (((((_2562 * _2329) + _1066) * cbLight._m0[_2513].y) * _2581) * _2582) + _2440;
        _2507 = (((((_2562 * _2330) + _1067) * cbLight._m0[_2513].z) * _2581) * _2582) + _2441;
    }
    float _2617;
    float _2619;
    float _2621;
    if (_2231)
    {
        _2617 = _2503;
        _2619 = _2505;
        _2621 = _2507;
    }
    else
    {
        uint _2628 = _2137 + 3u;
        uint _2632 = _2137 + 11u;
        float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2628].w)) * _918) * 0.949999988079071044921875);
        float _2647 = _2646 * _2646;
        float _2648 = cbLight._m0[_2628].x + _994;
        float _2649 = cbLight._m0[_2628].y + _995;
        float _2650 = cbLight._m0[_2628].z + _996;
        float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
        float _2655 = _2654 * _2648;
        float _2656 = _2654 * _2649;
        float _2657 = _2654 * _2650;
        float _2658 = dot(vec3(_915, _916, _917), vec3(cbLight._m0[_2628].xyz));
        float _4591 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2662 = dot(vec3(_915, _916, _917), vec3(_2655, _2656, _2657));
        float _4602 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _2666 = dot(vec3(cbLight._m0[_2628].xyz), vec3(_2655, _2656, _2657));
        float _4613 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2670 = _2647 * _2647;
        float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
        float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) * 5.0);
        float _2688 = 1.0 - _2647;
        float _2698 = (0.5 / (((_2305 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2305 * _2688) + _2647) * _2661))) * _2661;
        float _4624 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2617 = (((((_2681 * _2327) + _1064) * cbLight._m0[_2632].x) * _2700) * _2701) + _2503;
        _2619 = (((((_2681 * _2329) + _1066) * cbLight._m0[_2632].y) * _2700) * _2701) + _2505;
        _2621 = (((((_2681 * _2330) + _1067) * cbLight._m0[_2632].z) * _2700) * _2701) + _2507;
    }
    float _2836;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    float _2846;
    if (_2135.y == 0u)
    {
        float _2776 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2777 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2776;
        float _2778 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2776;
        float _2779 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2776;
        uvec4 _2791 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2792 = _2791.x;
        uint _2803 = uint((float(_2791.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1003) / _2792))) + floor(float(uint(cbSceneParam._m0[85u].x * _1002) / _2792)));
        float _2813 = (log2(_2779 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2814 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
        uint _2817 = uint(isnan(14.0) ? _2814 : (isnan(_2814) ? 14.0 : min(_2814, 14.0)));
        uvec4 _2822 = texelFetch(g_lightClusterGridBuffer, int(((_2817 << 2u) + (_2803 << 6u)) >> 2u));
        uint _2823 = _2822.x;
        uint _2824 = _2791.z;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2824 >> 4u) & 15u)) + 4294967295u) & _2823) == 0u) || ((_2824 & 240u) == 0u))
        {
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            float _3072 = 0.0;
            float _3073 = 0.0;
            uint _3074 = 0u;
            uint _3083;
            bool _3084;
            for (;;)
            {
                _3083 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3074 << 2u)) >> 2u)).x;
                _3084 = _3083 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3084)
                {
                    frontier_phi_61_pred = _3068;
                    frontier_phi_61_pred_1 = _3073;
                    frontier_phi_61_pred_2 = _3072;
                    frontier_phi_61_pred_3 = _3071;
                    frontier_phi_61_pred_4 = _3070;
                    frontier_phi_61_pred_5 = _3069;
                }
                else
                {
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    float _3196;
                    float _3197;
                    uint _3198;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3072;
                    _3197 = _3073;
                    _3198 = _3083;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    float _3128;
                    float _3129;
                    for (;;)
                    {
                        uint _3202 = uint(findLSB(_3198)) + (_3074 << 5u);
                        uint _3199 = (_3198 + 4294967295u) & _3198;
                        uint _3204 = _3202 * 48u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3204)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3204 + 3u)).x));
                        uint _3224 = (_3202 * 48u) + 4u;
                        vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 3u)).x));
                        uint _3243 = (_3202 * 48u) + 8u;
                        vec3 _3254 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3243)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3243 + 2u)).x));
                        float _3258 = _3218.x - _2777;
                        float _3259 = _3218.y - _2778;
                        float _3260 = _3218.z - _2779;
                        float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                        float _3264 = inversesqrt(_3261);
                        float _3265 = _3264 * _3258;
                        float _3266 = _3264 * _3259;
                        float _3267 = _3264 * _3260;
                        float _3268 = dot(vec3(_1021, _1024, _1027), vec3(_3265, _3266, _3267));
                        float _3273 = 1.0 - (_3261 * _3218.w);
                        float _4650 = isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0));
                        float _3274 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3275 = sqrt(_3261) * _3237.w;
                        float _3278 = 1.39999997615814208984375 / (_3275 + 1.39999997615814208984375);
                        float _3279 = _3278 * _3278;
                        float _3282 = ((1.0 - _3279) * _3268) + _3279;
                        float _3285 = _3275 * _3275;
                        float _3289 = ((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3274) / ((_3285 * 0.699999988079071044921875) + 1.0);
                        float _3293 = (-0.0) - _2777;
                        float _3294 = (-0.0) - _2778;
                        float _3295 = (-0.0) - _2779;
                        float _3299 = inversesqrt(dot(vec3(_3293, _3294, _3295), vec3(_3293, _3294, _3295)));
                        float _3300 = _3299 * _3293;
                        float _3301 = _3299 * _3294;
                        float _3302 = _3299 * _3295;
                        float _3310 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                        float _3311 = 1.0 - _1096;
                        float _3318 = sqrt(1.0 - ((1.0 - (_3311 * _3311)) * (1.0 - (_3310 * _3310))));
                        float _3319 = _3318 * _3318;
                        float _3320 = _3319 * _3319;
                        float _3321 = _3300 + _3265;
                        float _3322 = _3301 + _3266;
                        float _3323 = _3302 + _3267;
                        float _3327 = inversesqrt(dot(vec3(_3321, _3322, _3323), vec3(_3321, _3322, _3323)));
                        float _3331 = dot(vec3(_1021, _1024, _1027), vec3(_3300, _3301, _3302));
                        float _4666 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
                        float _3334 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3335 = dot(vec3(_1021, _1024, _1027), vec3(_3327 * _3321, _3327 * _3322, _3327 * _3323));
                        float _4677 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3338 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3342 = ((_3338 * _3338) * (_3320 + (-1.0))) + 1.0;
                        float _3343 = _3278 * _3319;
                        float _3344 = _3343 * _3343;
                        float _3347 = ((1.0 - _3344) * _3268) + _3344;
                        float _4688 = isnan(0.0) ? _3347 : (isnan(_3347) ? 0.0 : max(_3347, 0.0));
                        float _3348 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                        float _3349 = 1.0 - _3319;
                        float _3359 = (0.5 / (((_3348 * ((_3334 * _3349) + _3319)) + 9.9999999392252902907785028219223e-09) + (((_3348 * _3349) + _3319) * _3334))) * _3348;
                        float _4699 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3370 = (((_3320 * 3.1415927410125732421875) * (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0)))) / ((_3342 * _3342) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125))) * _3274;
                        _3127 = (_3289 * _3237.x) + _3195;
                        _3128 = (_3289 * _3237.y) + _3196;
                        _3129 = (_3289 * _3237.z) + _3197;
                        _3124 = (_3370 * _3254.x) + _3192;
                        _3125 = (_3370 * _3254.y) + _3193;
                        _3126 = (_3370 * _3254.z) + _3194;
                        if (_3199 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3128;
                            _3197 = _3129;
                            _3198 = _3199;
                        }
                    }
                    frontier_phi_61_pred = _3124;
                    frontier_phi_61_pred_1 = _3129;
                    frontier_phi_61_pred_2 = _3128;
                    frontier_phi_61_pred_3 = _3127;
                    frontier_phi_61_pred_4 = _3126;
                    frontier_phi_61_pred_5 = _3125;
                }
                _2925 = frontier_phi_61_pred;
                _2935 = frontier_phi_61_pred_1;
                _2933 = frontier_phi_61_pred_2;
                _2931 = frontier_phi_61_pred_3;
                _2929 = frontier_phi_61_pred_4;
                _2927 = frontier_phi_61_pred_5;
                uint _3075 = _3074 + 1u;
                if (_3075 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3068 = _2925;
                    _3069 = _2927;
                    _3070 = _2929;
                    _3071 = _2931;
                    _3072 = _2933;
                    _3073 = _2935;
                    _3074 = _3075;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        float _3046;
        if (((4294967295u << _2941) & _2823) == 0u)
        {
            _3036 = _2924;
            _3038 = _2926;
            _3040 = _2928;
            _3042 = _2930;
            _3044 = _2932;
            _3046 = _2934;
        }
        else
        {
            float _3061 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
            float _3062 = _3061 * _2777;
            float _3063 = _3061 * _2778;
            float _3064 = _3061 * _2779;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3047;
                float _3175 = _2924;
                float _3176 = _2926;
                float _3177 = _2928;
                float _3178 = _2930;
                float _3179 = _2932;
                float _3180 = _2934;
                uint _3181 = _2941;
                uint _3190;
                bool _3191;
                for (;;)
                {
                    _3190 = texelFetch(g_lightClassification, int((((_2817 << 5u) + (_2803 << 9u)) + (_3181 << 2u)) >> 2u)).x;
                    _3191 = _3190 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3191)
                    {
                        frontier_phi_67_pred = _3178;
                        frontier_phi_67_pred_1 = _3179;
                        frontier_phi_67_pred_2 = _3180;
                        frontier_phi_67_pred_3 = _3177;
                        frontier_phi_67_pred_4 = _3176;
                        frontier_phi_67_pred_5 = _3175;
                    }
                    else
                    {
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3380;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3673;
                        float _3388 = _3175;
                        float _3389 = _3176;
                        float _3390 = _3177;
                        float _3391 = _3178;
                        float _3392 = _3179;
                        float _3393 = _3180;
                        uint _3394 = _3190;
                        uint _3395;
                        vec4 _3420;
                        float _3421;
                        vec4 _3436;
                        vec3 _3448;
                        vec4 _3463;
                        vec4 _3478;
                        float _3524;
                        bool _3525;
                        for (;;)
                        {
                            uint _3405 = ((_3181 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3394));
                            _3395 = (_3394 + 4294967295u) & _3394;
                            uint _3407 = _3405 * 40u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            _3421 = _3420.w;
                            uint _3423 = (_3405 * 40u) + 4u;
                            _3436 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3423)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3423 + 3u)).x));
                            uint _3438 = (_3405 * 40u) + 8u;
                            _3448 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x));
                            uint _3450 = (_3405 * 40u) + 16u;
                            _3463 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3450)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3450 + 3u)).x));
                            uint _3465 = (_3405 * 40u) + 20u;
                            _3478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3465 + 3u)).x));
                            uint _3480 = (_3405 * 40u) + 24u;
                            vec4 _3493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3480 + 3u)).x));
                            uint _3499 = (_3405 * 40u) + 28u;
                            vec4 _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            _3524 = fma(_2779, _3512.z, fma(_2778, _3512.y, _3512.x * _2777)) + _3512.w;
                            _3525 = !((fma(_2779, _3493.z, fma(_2778, _3493.y, _3493.x * _2777)) + _3493.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3525)
                            {
                                float _3552 = _3420.x - _2777;
                                float _3553 = _3420.y - _2778;
                                float _3554 = _3420.z - _2779;
                                float _3555 = dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554));
                                float _3558 = inversesqrt(_3555);
                                float _3559 = _3558 * _3552;
                                float _3560 = _3558 * _3553;
                                float _3561 = _3558 * _3554;
                                float _3565 = 1.0 - (_3555 / (_3421 * _3421));
                                float _4710 = isnan(0.0) ? _3565 : (isnan(_3565) ? 0.0 : max(_3565, 0.0));
                                float _3566 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3570 = sqrt(_3555) * _3436.w;
                                float _3572 = 1.39999997615814208984375 / (_3570 + 1.39999997615814208984375);
                                float _3573 = _3572 * _3572;
                                float _3576 = ((1.0 - _3573) * dot(vec3(_3559, _3560, _3561), vec3(_1021, _1024, _1027))) + _3573;
                                float _3579 = _3570 * _3570;
                                float _3583 = (fma(_2779, _3463.z, fma(_2778, _3463.y, _3463.x * _2777)) + _3463.w) / _3524;
                                float _3584 = (fma(_2779, _3478.z, fma(_2778, _3478.y, _3478.x * _2777)) + _3478.w) / _3524;
                                float _3588 = 1.0 - dot(vec2(_3583, _3584), vec2(_3583, _3584));
                                float _4726 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3589 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3590 = _3589 * (((isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0))) * _3566) / ((_3579 * 0.699999988079071044921875) + 1.0));
                                float _3602 = exp2(log2(1.0 / ((_3579 * 3.5) + 5.0)) * 0.25);
                                float _3603 = 1.0 - _1096;
                                float _3610 = sqrt(1.0 - ((1.0 - (_3603 * _3603)) * (1.0 - (_3602 * _3602))));
                                float _3611 = _3610 * _3610;
                                float _3612 = _3611 * _3611;
                                float _3613 = _3559 - _3062;
                                float _3614 = _3560 - _3063;
                                float _3615 = _3561 - _3064;
                                float _3619 = inversesqrt(dot(vec3(_3613, _3614, _3615), vec3(_3613, _3614, _3615)));
                                float _3623 = dot(vec3(_1021, _1024, _1027), vec3((-0.0) - _3062, (-0.0) - _3063, (-0.0) - _3064));
                                float _4737 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3627 = dot(vec3(_1021, _1024, _1027), vec3(_3619 * _3613, _3619 * _3614, _3619 * _3615));
                                float _4748 = isnan(0.0) ? _3627 : (isnan(_3627) ? 0.0 : max(_3627, 0.0));
                                float _3630 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3634 = ((_3630 * _3630) * (_3612 + (-1.0))) + 1.0;
                                float _3635 = _3572 * _3611;
                                float _3636 = _3635 * _3635;
                                float _3642 = ((1.0 - _3636) * dot(vec3(_1021, _1024, _1027), vec3(_3559, _3560, _3561))) + _3636;
                                float _4759 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
                                float _3644 = 1.0 - _3611;
                                float _3654 = (0.5 / (((_3643 * ((_3626 * _3644) + _3611)) + 9.9999999392252902907785028219223e-09) + (((_3643 * _3644) + _3611) * _3626))) * _3643;
                                float _4770 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3664 = (_3589 * _3566) * (((_3612 * 3.1415927410125732421875) * (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) / ((_3634 * _3634) * ((_3579 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3664 * _3448.x;
                                frontier_phi_73_pred_1 = _3664 * _3448.y;
                                frontier_phi_73_pred_2 = _3590 * _3436.z;
                                frontier_phi_73_pred_3 = _3590 * _3436.y;
                                frontier_phi_73_pred_4 = _3590 * _3436.x;
                                frontier_phi_73_pred_5 = _3664 * _3448.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3668 = frontier_phi_73_pred;
                            _3669 = frontier_phi_73_pred_1;
                            _3673 = frontier_phi_73_pred_2;
                            _3672 = frontier_phi_73_pred_3;
                            _3671 = frontier_phi_73_pred_4;
                            _3670 = frontier_phi_73_pred_5;
                            _3378 = _3671 + _3391;
                            _3379 = _3672 + _3392;
                            _3380 = _3673 + _3393;
                            _3375 = _3668 + _3388;
                            _3376 = _3669 + _3389;
                            _3377 = _3670 + _3390;
                            if (_3395 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3378;
                                _3392 = _3379;
                                _3393 = _3380;
                                _3394 = _3395;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3378;
                        frontier_phi_67_pred_1 = _3379;
                        frontier_phi_67_pred_2 = _3380;
                        frontier_phi_67_pred_3 = _3377;
                        frontier_phi_67_pred_4 = _3376;
                        frontier_phi_67_pred_5 = _3375;
                    }
                    _3043 = frontier_phi_67_pred;
                    _3045 = frontier_phi_67_pred_1;
                    _3047 = frontier_phi_67_pred_2;
                    _3041 = frontier_phi_67_pred_3;
                    _3039 = frontier_phi_67_pred_4;
                    _3037 = frontier_phi_67_pred_5;
                    uint _3182 = _3181 + 1u;
                    if (_3182 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3175 = _3037;
                        _3176 = _3039;
                        _3177 = _3041;
                        _3178 = _3043;
                        _3179 = _3045;
                        _3180 = _3047;
                        _3181 = _3182;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3045;
                frontier_phi_55_56_ladder_1 = _3047;
                frontier_phi_55_56_ladder_2 = _3043;
                frontier_phi_55_56_ladder_3 = _3041;
                frontier_phi_55_56_ladder_4 = _3039;
                frontier_phi_55_56_ladder_5 = _3037;
            }
            else
            {
                frontier_phi_55_56_ladder = _2932;
                frontier_phi_55_56_ladder_1 = _2934;
                frontier_phi_55_56_ladder_2 = _2930;
                frontier_phi_55_56_ladder_3 = _2928;
                frontier_phi_55_56_ladder_4 = _2926;
                frontier_phi_55_56_ladder_5 = _2924;
            }
            _3036 = frontier_phi_55_56_ladder_5;
            _3038 = frontier_phi_55_56_ladder_4;
            _3040 = frontier_phi_55_56_ladder_3;
            _3042 = frontier_phi_55_56_ladder_2;
            _3044 = frontier_phi_55_56_ladder;
            _3046 = frontier_phi_55_56_ladder_1;
        }
        float _3051 = isnan(1.0) ? _1080 : (isnan(_1080) ? 1.0 : min(_1080, 1.0));
        _2836 = (_3051 * _3042) + _2269;
        _2838 = (_3051 * _3044) + _2271;
        _2840 = (_3051 * _3046) + _2273;
        _2842 = ((_3036 * _1064) * _3051) + _2617;
        _2844 = ((_3038 * _1066) * _3051) + _2619;
        _2846 = ((_3040 * _1067) * _3051) + _2621;
    }
    else
    {
        _2836 = _2269;
        _2838 = _2271;
        _2840 = _2273;
        _2842 = _2617;
        _2844 = _2619;
        _2846 = _2621;
    }
    float _4786 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _4797 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
    float _4808 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    uint _2866 = _283 + 6u;
    float _2874 = _1002 / cbSceneParam._m0[86u].x;
    float _2875 = _1003 / cbSceneParam._m0[86u].y;
    vec4 _2889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, (log2((isnan(cbSceneParam._m0[77u].w) ? _937 : (isnan(_937) ? cbSceneParam._m0[77u].w : min(_937, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2891 = _2889.x;
    float _2892 = _2889.y;
    float _2893 = _2889.z;
    float _2894 = _2889.w;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_937 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_937) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _937 : min(cbSceneParam._m0[80u].w, _937));
        float _2950 = _2949 / _937;
        float _2961 = _2950 * _987;
        float _2962 = _988 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2964 = _2950 * _989;
        float _2966 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2967 = _2966 + cbSceneParam._m0[79u].w;
        float _2968 = cbSceneParam._m0[79u].w - _2962;
        float _2974 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2964 * _2964));
        float _2977 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2974;
        float _2982 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2984 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3137;
        if (abs((_2963 - _2966) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3137 = ((((_2967 > 0.0) ? exp2(_2982 * _2967) : (2.0 - exp2(_2984 * _2967))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2977;
        }
        else
        {
            float _3097 = 1.0 / cbSceneParam._m0[80u].x;
            float _3098 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : max(_2967, _2968));
            float _3099 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : min(_2967, _2968));
            float _3108 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : min(_3098, 0.0));
            float _3109 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : min(_3099, 0.0));
            _3137 = ((abs(_2974 / _2963) * cbSceneParam._m0[80u].y) * ((((_3108 - _3109) * 2.0) - ((exp2(_2982 * (isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0)))) - exp2(_2982 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0))))) * _3097)) - ((exp2(_2984 * _3108) - exp2(_2984 * _3109)) * _3097))) + (_2977 * cbSceneParam._m0[80u].z);
        }
        vec4 _3139 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, 1.0), 0.0);
        float _3148 = exp2((_3137 * (-1.44269502162933349609375)) * (1.0 - _3139.w));
        float _3149 = log2(_3148);
        float _3165 = log2(_2894);
        _2986 = (exp2(_3165 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].x)) * _3139.x) / cbSceneParam._m0[78u].x)) + _2891;
        _2988 = (exp2(_3165 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].y)) * _3139.y) / cbSceneParam._m0[78u].y)) + _2892;
        _2990 = (exp2(_3165 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3149 * cbSceneParam._m0[78u].z)) * _3139.z) / cbSceneParam._m0[78u].z)) + _2893;
        _2992 = _3148 * _2894;
    }
    else
    {
        _2986 = _2891;
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
    }
    float _3004 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3005 = _3004 == 3.0;
    float _3006 = log2(_2992);
    float _3013 = exp2(_3006 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2836 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1080))) + ((_2842 + ((isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3014 = exp2(_3006 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2838 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1080))) + ((_2844 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3015 = exp2(_3006 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2840 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1080))) + ((_2846 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1888)) * cbPerFrame._m0[3u].x));
    float _3024 = (_3004 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3024 * (_3005 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.y = _3024 * (_3005 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.z = _3024 * (_3005 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.w = cbInstanceData._m0[_2866].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2866].w;
}


