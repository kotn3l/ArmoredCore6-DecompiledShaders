#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1721;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _252 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _253 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _254 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _260 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _261 = _260 * _252;
    float _262 = _260 * _253;
    float _263 = _260 * _254;
    float _267 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = _267 * NORMAL.x;
    float _269 = _267 * NORMAL.y;
    float _270 = _267 * NORMAL.z;
    float _274 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = _274 * TANGENT.x;
    float _276 = _274 * TANGENT.y;
    float _277 = _274 * TANGENT.z;
    float _286 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _288 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _289 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4067 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _4078 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _4089 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _318) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _319) + cbTextureTilingScale._m0[13u].w));
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _361 = _356.x * cbMtdParam._m0[11u].x;
    float _362 = _356.y * cbMtdParam._m0[11u].y;
    float _363 = _356.z * cbMtdParam._m0[11u].z;
    vec4 _382 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    vec4 _401 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _436 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _438 = _436.x;
    float _450 = dot(vec4(_438, _436.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _467 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _401.x) * 2.0) - ((((_438 - _450) * cbMtdParam._m0[23u].w) + _450) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4100 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _468 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _475 = (_468 * ((_382.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _476 = (_468 * ((_382.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _477 = (_468 * ((_382.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _318) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _319) + cbTextureTilingScale._m0[3u].w));
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _516 = _514.x;
    float _526 = dot(vec4(_516, _514.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _540 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _401.y) * 2.0) - ((((_516 - _526) * cbMtdParam._m0[23u].w) + _526) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4111 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _541 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _548 = (_541 * ((_494.x * cbMtdParam._m0[13u].x) - _475)) + _475;
    float _549 = (_541 * ((_494.y * cbMtdParam._m0[13u].y) - _476)) + _476;
    float _550 = (_541 * ((_494.z * cbMtdParam._m0[13u].z) - _477)) + _477;
    vec4 _569 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _318) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _319) + cbTextureTilingScale._m0[24u].w));
    vec4 _586 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _588 = _586.x;
    float _598 = dot(vec4(_588, _586.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _610 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _401.z) * 2.0) - ((((_588 - _598) * cbMtdParam._m0[23u].w) + _598) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4122 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _611 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _618 = (_611 * ((_569.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _619 = (_611 * ((_569.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _620 = (_611 * ((_569.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _624 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _332.x) * _618;
    float _627 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _332.y) * _619;
    float _630 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _332.z) * _620;
    float _637 = ((_618 - _624) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) + _624;
    float _638 = ((_619 - _627) * (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) + _627;
    float _639 = ((_620 - _630) * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) + _630;
    vec4 _657 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _318) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _319) + cbTextureTilingScale._m0[14u].w));
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _318) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _319) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _318) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _319) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _468) + _720;
    float _730 = ((_701.y - _721) * _468) + _721;
    float _731 = ((_701.z - _722) * _468) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _318) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _319) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _541) + _729;
    float _755 = ((_743.y - _730) * _541) + _730;
    float _756 = ((_743.z - _731) * _541) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _318) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _319) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _611) + _756;
    float _784 = ((((_768.x - _754) * _611) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _611) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4133 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _821 = (_784 + ((((_676.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _822 = (_785 + ((((_676.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _825 = fma(_791, _268, fma(_822, _275, _821 * _261));
    float _828 = fma(_791, _269, fma(_822, _276, _821 * _262));
    float _831 = fma(_791, _270, fma(_822, _277, _821 * _263));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _318) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _319) + cbTextureTilingScale._m0[11u].w));
    float _864 = _862.x;
    float _865 = 1.0 - _864;
    float _873 = (cbMtdParam._m0[19u].x + dot(vec4(_835 * _825, _835 * _828, _835 * _831, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_864 - _865) * cbMtdParam._m0[24u].z) + _865) * cbMtdParam._m0[21u].z);
    float _4144 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _876 = (-0.0) - cbMtdParam._m0[24u].x;
    float _878 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _878 : (isnan(_878) ? 1.0 : min(_878, 1.0));
    float _886 = _874 - ((_874 * TEXCOORD_8.x) * _879);
    float _887 = _874 - ((_874 * TEXCOORD_8.y) * _879);
    float _888 = _874 - ((_874 * TEXCOORD_8.z) * _879);
    float _895 = (_886 * ((_657.x * cbMtdParam._m0[18u].x) - _637)) + _637;
    float _896 = (_887 * ((_657.y * cbMtdParam._m0[18u].y) - _638)) + _638;
    float _897 = (_888 * ((_657.z * cbMtdParam._m0[18u].z) - _639)) + _639;
    float _912 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _913 = _912 * TEXCOORD.z;
    float _914 = _912 * TEXCOORD.w;
    vec4 _926 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _913) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _914) + cbTextureTilingScale._m0[19u].w));
    float _928 = _926.x;
    float _929 = 1.0 - _928;
    float _955 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_928 - _929) * cbMtdParam._m0[24u].w) + _929) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4165 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _956 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _964 = ((((cbMtdParam._m0[10u].x - _895) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _956) + _895;
    float _965 = ((((cbMtdParam._m0[10u].y - _896) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _956) + _896;
    float _966 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _897)) * _956) + _897;
    vec4 _992 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _994 = _992.x;
    float _1012 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w)).x - _994) * _468) + _994;
    float _1029 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _318) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _319) + cbTextureTilingScale._m0[21u].w)).x - _1012) * _541) + _1012;
    float _1046 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _318) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _319) + cbTextureTilingScale._m0[10u].w)).x - _1029) * _611) + _1029;
    float _1052 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _1046) * cbMtdParam._m0[19u].z) + _1046;
    float _1054 = _1052 - (_1052 * _886);
    float _1056 = _1054 - (_1054 * _956);
    float _1063 = (((_676.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _1067 = ((_809.z - _1063) * cbMtdParam._m0[19u].w) + _1063;
    vec4 _1083 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _318) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _319) + cbTextureTilingScale._m0[15u].w));
    float _1090 = (_1083.x * 2.0) + (-1.0);
    float _1091 = (_1083.y * 2.0) + (-1.0);
    float _1092 = dot(vec2(_1090, _1091), vec2(_1090, _1091));
    float _4176 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1100 = ((_1083.z - _1067) * _886) + _1067;
    float _1103 = ((cbMtdParam._m0[23u].x - _1100) * _956) + _1100;
    vec4 _1126 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _913) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _914) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1132 = (_1126.x * 2.0) + (-1.0);
    float _1133 = (_1126.y * 2.0) + (-1.0);
    float _1134 = dot(vec2(_1132, _1133), vec2(_1132, _1133));
    float _4187 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _1149 = ((sqrt(1.0 - (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) - _791) * _888) + _791;
    float _1152 = (((_1090 - _821) * _886) + _821) + (cbMtdParam._m0[21u].x * _821);
    float _1153 = (((_1091 - _822) * _887) + _822) + (cbMtdParam._m0[21u].x * _822);
    float _1164 = (((_1132 - _1152) + (_1152 * cbMtdParam._m0[22u].z)) * _956) + _1152;
    float _1165 = (((_1133 - _1153) + (_1153 * cbMtdParam._m0[22u].z)) * _956) + _1153;
    float _1166 = (_956 * (sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) - _1149)) + _1149;
    float _1168 = cbMtdParam._m0[22u].x + _809.w;
    float _1171 = fma(_1166, _268, fma(_1165, _275, _1164 * _261));
    float _1174 = fma(_1166, _269, fma(_1165, _276, _1164 * _262));
    float _1177 = fma(_1166, _270, fma(_1165, _277, _1164 * _263));
    float _1181 = inversesqrt(dot(vec3(_1171, _1174, _1177), vec3(_1171, _1174, _1177)));
    float _1182 = _1181 * _1171;
    float _1183 = _1181 * _1174;
    float _1184 = _1181 * _1177;
    float _4198 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1185 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _4220 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _4231 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _4242 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4253 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _1190 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
    float _1204 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1244);
    float _1255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1244);
    float _1256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1244);
    float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
    float _1261 = _1254 * _1260;
    float _1262 = _1255 * _1260;
    float _1263 = _1256 * _1260;
    float _1269 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1270 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1288 = fma(_1184, cbSceneParam._m0[5u].z, fma(_1183, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1182));
    float _1291 = fma(_1184, cbSceneParam._m0[6u].z, fma(_1183, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1182));
    float _1294 = fma(_1184, cbSceneParam._m0[7u].z, fma(_1183, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1182));
    uint _1308 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1314 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_1308].x;
    float _1315 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_1308].y;
    float _1316 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_1308].z;
    float _4264 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _1317 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _4275 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1318 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _1319 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _1320 = 1.0 - _1190;
    float _1321 = _1317 * _1320;
    float _1322 = _1318 * _1320;
    float _1323 = _1319 * _1320;
    float _1328 = (_1317 + (-0.039999999105930328369140625)) * _1190;
    float _1329 = (_1318 + (-0.039999999105930328369140625)) * _1190;
    float _1330 = (_1319 + (-0.039999999105930328369140625)) * _1190;
    float _1331 = _1328 + 0.039999999105930328369140625;
    float _1333 = _1329 + 0.039999999105930328369140625;
    float _1334 = _1330 + 0.039999999105930328369140625;
    vec4 _1343 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1269, cbSceneParam._m0[86u].y * _1270));
    float _1347 = ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * TEXCOORD_5.w) * _1343.x;
    float _1348 = dot(vec3(_1182, _1183, _1184), vec3(_1261, _1262, _1263));
    float _1351 = _1348 * 2.0;
    float _1355 = (_1351 * _1182) - _1261;
    float _1356 = (_1351 * _1183) - _1262;
    float _1357 = (_1351 * _1184) - _1263;
    float _1361 = abs(dot(vec3(_1261, _1262, _1263), vec3(_1182, _1183, _1184)));
    float _4297 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1363 = sqrt(_1185);
    float _1376 = exp2((_1363 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1363 * 3.0));
    float _1382 = (1.0 - _1376) * ((_1363 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1383 = _1376 * _1363;
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1415 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1720;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1445 = fma(_1419, cbModelParam._m0[26u].z, fma(_1415, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1411));
        float _1449 = fma(_1419, cbModelParam._m0[27u].z, fma(_1415, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1411));
        float _1453 = fma(_1419, cbModelParam._m0[28u].z, fma(_1415, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1411));
        float _1478 = _1411 + _1182;
        float _1479 = _1415 + _1183;
        float _1480 = _1419 + _1184;
        float _1490 = fma(_1480, cbModelParam._m0[26u].z, fma(_1479, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1478)) - _1445;
        float _1491 = fma(_1480, cbModelParam._m0[27u].z, fma(_1479, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1478)) - _1449;
        float _1492 = fma(_1480, cbModelParam._m0[28u].z, fma(_1479, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1478)) - _1453;
        float _1496 = inversesqrt(dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492)));
        float _1509 = ((_1496 * _1490) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1445 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1510 = ((_1496 * _1491) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1449 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1511 = ((_1496 * _1492) / cbModelParam._m0[34u].z) + ((((((_1453 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1514 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1521 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1528 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        vec4 _1535 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1509, _1510, _1511), 0.0);
        float _1548 = exp2((_1514.w + (-0.5)) * 20.0) * 2.0;
        float _1549 = _1548 * (_1514.x + (-0.5));
        float _1550 = _1548 * (_1514.y + (-0.5));
        float _1551 = _1548 * (_1514.z + (-0.5));
        float _1558 = exp2((_1521.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1521.x + (-0.5));
        float _1560 = _1558 * (_1521.y + (-0.5));
        float _1561 = _1558 * (_1521.z + (-0.5));
        float _1568 = exp2((_1528.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1528.x + (-0.5));
        float _1570 = _1568 * (_1528.y + (-0.5));
        float _1571 = _1568 * (_1528.z + (-0.5));
        float _1578 = exp2((_1535.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1535.x + (-0.5));
        float _1580 = _1578 * (_1535.y + (-0.5));
        float _1581 = _1578 * (_1535.z + (-0.5));
        float _1582 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1583 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1584 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1585 = _1549 * 0.5;
        float _1586 = _1559 * 0.5;
        float _1587 = _1569 * 0.5;
        float _1588 = dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587));
        float _1593 = (_1588 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1588);
        float _1602 = (dot(vec3(_1182, _1183, _1184), vec3(_1593 * _1585, _1593 * _1586, _1593 * _1587)) + 1.0) * 0.5;
        float _4323 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1612 = sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587)) / (_1582 + 9.9999997473787516355514526367188e-06);
        float _4334 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4345 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_1614 + 1.0))) + _1619) * _1582;
        float _1629 = _1550 * 0.5;
        float _1630 = _1560 * 0.5;
        float _1631 = _1570 * 0.5;
        float _1632 = dot(vec3(_1629, _1630, _1631), vec3(_1629, _1630, _1631));
        float _1637 = (_1632 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1632);
        float _1645 = (dot(vec3(_1182, _1183, _1184), vec3(_1637 * _1629, _1637 * _1630, _1637 * _1631)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1654 = sqrt(((_1630 * _1630) + (_1629 * _1629)) + (_1631 * _1631)) / (_1583 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1655 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1656 = _1655 * 2.0;
        float _1660 = (1.0 - _1655) / (_1655 + 1.0);
        float _4378 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
        float _1661 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1670 = ((((1.0 - _1661) * (_1656 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1656 + 1.0))) + _1661) * _1583;
        float _1671 = _1551 * 0.5;
        float _1672 = _1561 * 0.5;
        float _1673 = _1571 * 0.5;
        float _1674 = dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673));
        float _1679 = (_1674 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1674);
        float _1687 = (dot(vec3(_1182, _1183, _1184), vec3(_1679 * _1671, _1679 * _1672, _1679 * _1673)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1696 = sqrt(((_1672 * _1672) + (_1671 * _1671)) + (_1673 * _1673)) / (_1584 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
        float _1697 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1698 = _1697 * 2.0;
        float _1702 = (1.0 - _1697) / (_1697 + 1.0);
        float _4411 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1703 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1712 = ((((1.0 - _1703) * (_1698 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1698 + 1.0))) + _1703) * _1584;
        _1720 = _1551;
        _1722 = _1550;
        _1723 = _1549;
        _1724 = _1561;
        _1725 = _1560;
        _1726 = _1559;
        _1727 = _1571;
        _1728 = _1570;
        _1729 = _1569;
        _1730 = _1584;
        _1731 = _1583;
        _1732 = _1582;
        _1733 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
        _1734 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0)));
        _1735 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)));
    }
    else
    {
        _1720 = _1721;
        _1722 = _1721;
        _1723 = _1721;
        _1724 = _1721;
        _1725 = _1721;
        _1726 = _1721;
        _1727 = _1721;
        _1728 = _1721;
        _1729 = _1721;
        _1730 = _1721;
        _1731 = _1721;
        _1732 = _1721;
        _1733 = 0.0;
        _1734 = 0.0;
        _1735 = 0.0;
    }
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    float _2031;
    float _2032;
    float _2033;
    float _2034;
    float _2035;
    float _2036;
    float _2037;
    float _2038;
    float _2039;
    float _2040;
    float _2041;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1758 = fma(_1419, cbModelParam._m0[30u].z, fma(_1415, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1411));
        float _1762 = fma(_1419, cbModelParam._m0[31u].z, fma(_1415, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1411));
        float _1766 = fma(_1419, cbModelParam._m0[32u].z, fma(_1415, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1411));
        float _1789 = _1411 + _1182;
        float _1790 = _1415 + _1183;
        float _1791 = _1419 + _1184;
        float _1801 = fma(_1791, cbModelParam._m0[30u].z, fma(_1790, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1789)) - _1758;
        float _1802 = fma(_1791, cbModelParam._m0[31u].z, fma(_1790, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1789)) - _1762;
        float _1803 = fma(_1791, cbModelParam._m0[32u].z, fma(_1790, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1789)) - _1766;
        float _1807 = inversesqrt(dot(vec3(_1801, _1802, _1803), vec3(_1801, _1802, _1803)));
        float _1820 = ((_1807 * _1801) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1758 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1821 = ((_1807 * _1802) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1762 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1822 = ((_1807 * _1803) / cbModelParam._m0[35u].z) + ((((((_1766 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        vec4 _1845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1820, _1821, _1822), 0.0);
        float _1857 = exp2((_1824.w + (-0.5)) * 20.0) * 2.0;
        float _1858 = _1857 * (_1824.x + (-0.5));
        float _1859 = _1857 * (_1824.y + (-0.5));
        float _1860 = _1857 * (_1824.z + (-0.5));
        float _1867 = exp2((_1831.w + (-0.5)) * 20.0) * 2.0;
        float _1868 = _1867 * (_1831.x + (-0.5));
        float _1869 = _1867 * (_1831.y + (-0.5));
        float _1870 = _1867 * (_1831.z + (-0.5));
        float _1877 = exp2((_1838.w + (-0.5)) * 20.0) * 2.0;
        float _1878 = _1877 * (_1838.x + (-0.5));
        float _1879 = _1877 * (_1838.y + (-0.5));
        float _1880 = _1877 * (_1838.z + (-0.5));
        float _1887 = exp2((_1845.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1845.x + (-0.5));
        float _1889 = _1887 * (_1845.y + (-0.5));
        float _1890 = _1887 * (_1845.z + (-0.5));
        float _1891 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
        float _1892 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1893 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
        float _1894 = _1858 * 0.5;
        float _1895 = _1868 * 0.5;
        float _1896 = _1878 * 0.5;
        float _1897 = dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896));
        float _1902 = (_1897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1897);
        float _1910 = (dot(vec3(_1182, _1183, _1184), vec3(_1902 * _1894, _1902 * _1895, _1902 * _1896)) + 1.0) * 0.5;
        float _4452 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1919 = sqrt(((_1895 * _1895) + (_1894 * _1894)) + (_1896 * _1896)) / (_1891 + 9.9999997473787516355514526367188e-06);
        float _4463 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1920 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1921 = _1920 * 2.0;
        float _1925 = (1.0 - _1920) / (_1920 + 1.0);
        float _4474 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1935 = ((((1.0 - _1926) * (_1921 + 2.0)) * exp2(log2(isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_1921 + 1.0))) + _1926) * _1891;
        float _1936 = _1859 * 0.5;
        float _1937 = _1869 * 0.5;
        float _1938 = _1879 * 0.5;
        float _1939 = dot(vec3(_1936, _1937, _1938), vec3(_1936, _1937, _1938));
        float _1944 = (_1939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1939);
        float _1952 = (dot(vec3(_1182, _1183, _1184), vec3(_1944 * _1936, _1944 * _1937, _1944 * _1938)) + 1.0) * 0.5;
        float _4485 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1961 = sqrt(((_1937 * _1937) + (_1936 * _1936)) + (_1938 * _1938)) / (_1892 + 9.9999997473787516355514526367188e-06);
        float _4496 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1963 = _1962 * 2.0;
        float _1967 = (1.0 - _1962) / (_1962 + 1.0);
        float _4507 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1968 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1977 = ((((1.0 - _1968) * (_1963 + 2.0)) * exp2(log2(isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_1963 + 1.0))) + _1968) * _1892;
        float _1978 = _1860 * 0.5;
        float _1979 = _1870 * 0.5;
        float _1980 = _1880 * 0.5;
        float _1981 = dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980));
        float _1986 = (_1981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1981);
        float _1994 = (dot(vec3(_1182, _1183, _1184), vec3(_1986 * _1978, _1986 * _1979, _1986 * _1980)) + 1.0) * 0.5;
        float _4518 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _2003 = sqrt(((_1979 * _1979) + (_1978 * _1978)) + (_1980 * _1980)) / (_1893 + 9.9999997473787516355514526367188e-06);
        float _4529 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2005 = _2004 * 2.0;
        float _2009 = (1.0 - _2004) / (_2004 + 1.0);
        float _4540 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
        float _2010 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2019 = ((((1.0 - _2010) * (_2005 + 2.0)) * exp2(log2(isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2005 + 1.0))) + _2010) * _1893;
        _2027 = _1860;
        _2028 = _1859;
        _2029 = _1858;
        _2030 = _1870;
        _2031 = _1869;
        _2032 = _1868;
        _2033 = _1880;
        _2034 = _1879;
        _2035 = _1878;
        _2036 = _1893;
        _2037 = _1892;
        _2038 = _1891;
        _2039 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)));
        _2040 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0)));
        _2041 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0)));
    }
    else
    {
        _2027 = _1721;
        _2028 = _1721;
        _2029 = _1721;
        _2030 = _1721;
        _2031 = _1721;
        _2032 = _1721;
        _2033 = _1721;
        _2034 = _1721;
        _2035 = _1721;
        _2036 = _1721;
        _2037 = _1721;
        _2038 = _1721;
        _2039 = 0.0;
        _2040 = 0.0;
        _2041 = 0.0;
    }
    float _2051 = (cbModelParam._m0[1u].x * (_2039 - _1733)) + _1733;
    float _2052 = (cbModelParam._m0[1u].x * (_2040 - _1734)) + _1734;
    float _2053 = (cbModelParam._m0[1u].x * (_2041 - _1735)) + _1735;
    float _2074 = fma(_2053, cbSceneParam._m0[89u].z, fma(_2052, cbSceneParam._m0[89u].y, _2051 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2053, cbSceneParam._m0[90u].z, fma(_2052, cbSceneParam._m0[90u].y, _2051 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2053, cbSceneParam._m0[91u].z, fma(_2052, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2051));
    float _2095 = _1355 * 0.5;
    float _2096 = _1356 * 0.5;
    float _2097 = _1357 * 0.5;
    float _2098 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_2029, _2032, _2035, _2038));
    float _2101 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_2028, _2031, _2034, _2037));
    float _2104 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_2027, _2030, _2033, _2036));
    float _2138;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2111 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_1720, _1724, _1727, _1730));
        float _2115 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_1722, _1725, _1728, _1731));
        float _2119 = dot(vec4(_2095, _2096, _2097, 1.0), vec4(_1723, _1726, _1729, _1732));
        float _2126 = dot(vec4(cbModelParam._m0[39u]), vec4(_2095, _2096, _2097, 1.0));
        _2138 = dot(vec3(isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0)), isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0)), isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2126) ? 0.0 : (isnan(0.0) ? _2126 : max(0.0, _2126))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2138 = 1.0;
    }
    float _2149;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2140 = dot(vec4(cbModelParam._m0[40u]), vec4(_2095, _2096, _2097, 1.0));
        _2149 = dot(vec3(isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)), isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0)), isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2140) ? 0.0 : (isnan(0.0) ? _2140 : max(0.0, _2140))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2149 = 1.0;
    }
    float _2153 = (_2149 * cbModelParam._m0[1u].x) + (_2138 * (1.0 - cbModelParam._m0[1u].x));
    float _2163 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1185);
    float _2164 = isnan(_2163) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2163 : min(cbModelParam._m0[25u].z, _2163));
    float _2244;
    float _2246;
    float _2248;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2211 = fma(_1419, cbModelParam._m0[13u].z, fma(_1415, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1411)) + cbModelParam._m0[13u].w;
        float _2215 = fma(_1419, cbModelParam._m0[14u].z, fma(_1415, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1411)) + cbModelParam._m0[14u].w;
        float _2219 = fma(_1419, cbModelParam._m0[15u].z, fma(_1415, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1411)) + cbModelParam._m0[15u].w;
        float _2222 = fma(_1357, cbModelParam._m0[13u].z, fma(_1356, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1355));
        float _2225 = fma(_1357, cbModelParam._m0[14u].z, fma(_1356, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1355));
        float _2228 = fma(_1357, cbModelParam._m0[15u].z, fma(_1356, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1355));
        float _2256;
        if (_2222 > 0.0)
        {
            _2256 = abs((1.0 - _2211) / _2222);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2222 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2211 + 1.0) / _2222);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2256 = frontier_phi_14_12_ladder;
        }
        float _2479;
        if (_2225 > 0.0)
        {
            _2479 = abs((1.0 - _2215) / _2225);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2225 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2215 + 1.0) / _2225);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2479 = frontier_phi_23_19_ladder;
        }
        float _2736;
        if (_2228 > 0.0)
        {
            _2736 = abs((1.0 - _2219) / _2228);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2228 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2219 + 1.0) / _2228);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2736 = frontier_phi_35_30_ladder;
        }
        float _2738 = isnan(_2479) ? _2256 : (isnan(_2256) ? _2479 : min(_2256, _2479));
        float _2739 = isnan(_2736) ? _2738 : (isnan(_2738) ? _2736 : min(_2738, _2736));
        float _2743 = (_2739 * _2222) + _2211;
        float _2744 = (_2739 * _2225) + _2215;
        float _2745 = (_2739 * _2228) + _2219;
        float _2746 = _2739 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2746;
        float _2750 = _2746 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 > _2750) || ((_2744 < _2748) || ((_2743 < _2748) || (_2743 > _2750))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2745, cbModelParam._m0[9u].z, fma(_2744, cbModelParam._m0[9u].y, _2743 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2745, cbModelParam._m0[10u].z, fma(_2744, cbModelParam._m0[10u].y, _2743 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2745, cbModelParam._m0[11u].z, fma(_2744, cbModelParam._m0[11u].y, _2743 * cbModelParam._m0[11u].x))), _2164);
            frontier_phi_13_35_ladder = _2873.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2873.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2873.x * cbModelParam._m0[1u].y;
        }
        _2244 = frontier_phi_13_35_ladder_2;
        _2246 = frontier_phi_13_35_ladder_1;
        _2248 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2232 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1355, _1356, _1357), _2164);
        _2244 = _2232.x * cbModelParam._m0[1u].y;
        _2246 = _2232.y * cbModelParam._m0[1u].y;
        _2248 = _2232.z * cbModelParam._m0[1u].y;
    }
    float _2252 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1185);
    float _2253 = isnan(_2252) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2252 : min(cbModelParam._m0[25u].w, _2252));
    float _2342;
    float _2344;
    float _2346;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2306 = fma(_1419, cbModelParam._m0[21u].z, fma(_1415, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1411)) + cbModelParam._m0[21u].w;
        float _2310 = fma(_1419, cbModelParam._m0[22u].z, fma(_1415, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1411)) + cbModelParam._m0[22u].w;
        float _2314 = fma(_1419, cbModelParam._m0[23u].z, fma(_1415, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1411)) + cbModelParam._m0[23u].w;
        float _2317 = fma(_1357, cbModelParam._m0[21u].z, fma(_1356, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1355));
        float _2320 = fma(_1357, cbModelParam._m0[22u].z, fma(_1356, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1355));
        float _2323 = fma(_1357, cbModelParam._m0[23u].z, fma(_1356, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1355));
        float _2484;
        if (_2317 > 0.0)
        {
            _2484 = abs((1.0 - _2306) / _2317);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2317 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2306 + 1.0) / _2317);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2484 = frontier_phi_25_21_ladder;
        }
        float _2763;
        if (_2320 > 0.0)
        {
            _2763 = abs((1.0 - _2310) / _2320);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2320 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2310 + 1.0) / _2320);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2763 = frontier_phi_37_32_ladder;
        }
        float _2976;
        if (_2323 > 0.0)
        {
            _2976 = abs((1.0 - _2314) / _2323);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2323 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2314 + 1.0) / _2323);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2976 = frontier_phi_46_43_ladder;
        }
        float _2978 = isnan(_2763) ? _2484 : (isnan(_2484) ? _2763 : min(_2484, _2763));
        float _2979 = isnan(_2976) ? _2978 : (isnan(_2978) ? _2976 : min(_2978, _2976));
        float _2983 = (_2979 * _2317) + _2306;
        float _2984 = (_2979 * _2320) + _2310;
        float _2985 = (_2979 * _2323) + _2314;
        float _2986 = _2979 * 9.9999997473787516355514526367188e-05;
        float _2987 = (-1.0) - _2986;
        float _2989 = _2986 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2985 > _2989) || ((_2985 < _2987) || ((_2984 > _2989) || ((_2984 < _2987) || ((_2983 < _2987) || (_2983 > _2989))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3184 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2985, cbModelParam._m0[17u].z, fma(_2984, cbModelParam._m0[17u].y, _2983 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2985, cbModelParam._m0[18u].z, fma(_2984, cbModelParam._m0[18u].y, _2983 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2985, cbModelParam._m0[19u].z, fma(_2984, cbModelParam._m0[19u].y, _2983 * cbModelParam._m0[19u].x))), _2253);
            frontier_phi_22_46_ladder = _3184.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3184.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3184.x * cbModelParam._m0[1u].z;
        }
        _2342 = frontier_phi_22_46_ladder_2;
        _2344 = frontier_phi_22_46_ladder_1;
        _2346 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2326 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1355, _1356, _1357), _2253);
        _2342 = _2326.x * cbModelParam._m0[1u].z;
        _2344 = _2326.y * cbModelParam._m0[1u].z;
        _2346 = _2326.z * cbModelParam._m0[1u].z;
    }
    float _2359 = (((_1382 * _1331) + _1383) * _1347) * ((cbModelParam._m0[1u].w * (_2342 - _2244)) + _2244);
    float _2361 = (((_1382 * _1333) + _1383) * _1347) * ((cbModelParam._m0[1u].w * (_2344 - _2246)) + _2246);
    float _2363 = (((_1382 * _1334) + _1383) * _1347) * ((cbModelParam._m0[1u].w * (_2346 - _2248)) + _2248);
    float _2366 = fma(_2363, cbSceneParam._m0[89u].z, fma(_2361, cbSceneParam._m0[89u].y, _2359 * cbSceneParam._m0[89u].x));
    float _2369 = fma(_2363, cbSceneParam._m0[90u].z, fma(_2361, cbSceneParam._m0[90u].y, _2359 * cbSceneParam._m0[90u].x));
    float _2372 = fma(_2363, cbSceneParam._m0[91u].z, fma(_2361, cbSceneParam._m0[91u].y, _2359 * cbSceneParam._m0[91u].x));
    vec4 _2380 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1269, _1270));
    float _2382 = _2380.w;
    float _2394 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2382);
    float _2395 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2382);
    float _2396 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2382);
    uvec4 _2400 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _2402 = _2400.x * 14u;
    uint _2403 = _2402 + 13u;
    float _2410 = _1347 + (-1.0);
    float _2415 = (cbLight._m0[_2403].x * _2410) + 1.0;
    float _2416 = (cbLight._m0[_2403].y * _2410) + 1.0;
    float _2417 = (cbLight._m0[_2403].z * _2410) + 1.0;
    float _2418 = (cbLight._m0[_2403].w * _2410) + 1.0;
    uint _2419 = _2402 + 5u;
    float _2425 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2429 = _2402 + 4u;
    float _2438 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
    uint _2442 = _2402 | 1u;
    float _2453 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_1182, _1183, _1184));
    float _2456 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_1182, _1183, _1184));
    float _4676 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _4687 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2461 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * 0.3183098733425140380859375;
    float _2463 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * 0.3183098733425140380859375;
    float _2470 = ((cbLight._m0[_2419].x * _2425) * _2463) + (((cbLight._m0[_2429].x * _2394) * _2438) * _2461);
    float _2471 = ((_2425 * cbLight._m0[_2419].y) * _2463) + (((cbLight._m0[_2429].y * _2395) * _2438) * _2461);
    float _2472 = ((_2425 * cbLight._m0[_2419].z) * _2463) + (((cbLight._m0[_2429].z * _2396) * _2438) * _2461);
    uvec4 _2476 = floatBitsToUint(cbLight._m0[_2402 + 12u]);
    bool _2478 = _2476.x == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2478)
    {
        _2489 = _2470;
        _2491 = _2471;
        _2493 = _2472;
    }
    else
    {
        uint _2497 = _2402 + 6u;
        float _2513 = (dot(vec3(cbLight._m0[_2402 + 2u].xyz), vec3(_1182, _1183, _1184)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4698 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2516 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2489 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2470;
        _2491 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2471;
        _2493 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2472;
    }
    bool _2496 = _2476.y == 0u;
    float _2534;
    float _2536;
    float _2538;
    if (_2496)
    {
        _2534 = _2489;
        _2536 = _2491;
        _2538 = _2493;
    }
    else
    {
        uint _2707 = _2402 + 7u;
        float _2723 = (dot(vec3(cbLight._m0[_2402 + 3u].xyz), vec3(_1182, _1183, _1184)) * 0.5) + 0.5;
        float _2724 = _2723 * _2723;
        float _4714 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        float _2725 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
        float _2726 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2534 = (((cbLight._m0[_2707].x * 0.3183098733425140380859375) * _2725) * _2726) + _2489;
        _2536 = (((cbLight._m0[_2707].y * 0.3183098733425140380859375) * _2725) * _2726) + _2491;
        _2538 = (((cbLight._m0[_2707].z * 0.3183098733425140380859375) * _2725) * _2726) + _2493;
    }
    uint _2541 = _2402 + 8u;
    float _2554 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _1185) * 0.949999988079071044921875);
    float _2555 = _2554 * _2554;
    float _2556 = cbLight._m0[_2402].x + _1261;
    float _2557 = cbLight._m0[_2402].y + _1262;
    float _2558 = cbLight._m0[_2402].z + _1263;
    float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
    float _2563 = _2562 * _2556;
    float _2564 = _2562 * _2557;
    float _2565 = _2562 * _2558;
    float _2566 = dot(vec3(_1182, _1183, _1184), vec3(cbLight._m0[_2402].xyz));
    float _4730 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2569 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _4741 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
    float _2570 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2571 = dot(vec3(_1182, _1183, _1184), vec3(_2563, _2564, _2565));
    float _4752 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2575 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2563, _2564, _2565));
    float _4763 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2579 = _2555 * _2555;
    float _2583 = ((_2574 * _2574) * (_2579 + (-1.0))) + 1.0;
    float _2591 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2592 = 0.959999978542327880859375 - _1328;
    float _2594 = 0.959999978542327880859375 - _1329;
    float _2595 = 0.959999978542327880859375 - _1330;
    float _2602 = 1.0 - _2555;
    float _2613 = (0.5 / (((_2570 * ((_2569 * _2602) + _2555)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2602) + _2555) * _2569))) * _2569;
    float _4774 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2615 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2579 / ((_2583 * _2583) * 3.141590118408203125));
    uint _2629 = _2402 + 9u;
    float _2640 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _1185) * 0.949999988079071044921875);
    float _2641 = _2640 * _2640;
    float _2642 = cbLight._m0[_2442].x + _1261;
    float _2643 = cbLight._m0[_2442].y + _1262;
    float _2644 = cbLight._m0[_2442].z + _1263;
    float _2648 = inversesqrt(dot(vec3(_2642, _2643, _2644), vec3(_2642, _2643, _2644)));
    float _2649 = _2648 * _2642;
    float _2650 = _2648 * _2643;
    float _2651 = _2648 * _2644;
    float _2652 = dot(vec3(_1182, _1183, _1184), vec3(cbLight._m0[_2442].xyz));
    float _4785 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2655 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2656 = dot(vec3(_1182, _1183, _1184), vec3(_2649, _2650, _2651));
    float _4796 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
    float _2659 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2660 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2649, _2650, _2651));
    float _4807 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2664 = _2641 * _2641;
    float _2668 = ((_2659 * _2659) * (_2664 + (-1.0))) + 1.0;
    float _2675 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
    float _2682 = 1.0 - _2641;
    float _2692 = (0.5 / (((_2570 * ((_2655 * _2682) + _2641)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2682) + _2641) * _2655))) * _2655;
    float _4818 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2694 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2664 / ((_2668 * _2668) * 3.141590118408203125));
    float _2704 = (((((_2675 * _2592) + _1331) * cbLight._m0[_2629].x) * _2694) * _2425) + ((((cbLight._m0[_2541].x * _2394) * ((_2591 * _2592) + _1331)) * _2615) * _2438);
    float _2705 = (((((_2675 * _2594) + _1333) * cbLight._m0[_2629].y) * _2694) * _2425) + ((((cbLight._m0[_2541].y * _2395) * ((_2591 * _2594) + _1333)) * _2615) * _2438);
    float _2706 = (((((_2675 * _2595) + _1334) * cbLight._m0[_2629].z) * _2694) * _2425) + ((((cbLight._m0[_2541].z * _2396) * ((_2591 * _2595) + _1334)) * _2615) * _2438);
    float _2768;
    float _2770;
    float _2772;
    if (_2478)
    {
        _2768 = _2704;
        _2770 = _2705;
        _2772 = _2706;
    }
    else
    {
        uint _2774 = _2402 + 2u;
        uint _2778 = _2402 + 10u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _1185) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _1261;
        float _2795 = cbLight._m0[_2774].y + _1262;
        float _2796 = cbLight._m0[_2774].z + _1263;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_1182, _1183, _1184), vec3(cbLight._m0[_2774].xyz));
        float _4829 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2808 = dot(vec3(_1182, _1183, _1184), vec3(_2801, _2802, _2803));
        float _4840 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4851 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0)))) * 5.0);
        float _2834 = 1.0 - _2793;
        float _2844 = (0.5 / (((_2570 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2834) + _2793) * _2807))) * _2807;
        float _4862 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2768 = (((((_2827 * _2592) + _1331) * cbLight._m0[_2778].x) * _2846) * _2847) + _2704;
        _2770 = (((((_2827 * _2594) + _1333) * cbLight._m0[_2778].y) * _2846) * _2847) + _2705;
        _2772 = (((((_2827 * _2595) + _1334) * cbLight._m0[_2778].z) * _2846) * _2847) + _2706;
    }
    float _2882;
    float _2884;
    float _2886;
    if (_2496)
    {
        _2882 = _2768;
        _2884 = _2770;
        _2886 = _2772;
    }
    else
    {
        uint _2893 = _2402 + 3u;
        uint _2897 = _2402 + 11u;
        float _2911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2893].w)) * _1185) * 0.949999988079071044921875);
        float _2912 = _2911 * _2911;
        float _2913 = cbLight._m0[_2893].x + _1261;
        float _2914 = cbLight._m0[_2893].y + _1262;
        float _2915 = cbLight._m0[_2893].z + _1263;
        float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
        float _2920 = _2919 * _2913;
        float _2921 = _2919 * _2914;
        float _2922 = _2919 * _2915;
        float _2923 = dot(vec3(_1182, _1183, _1184), vec3(cbLight._m0[_2893].xyz));
        float _4878 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2927 = dot(vec3(_1182, _1183, _1184), vec3(_2920, _2921, _2922));
        float _4889 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2930 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2931 = dot(vec3(cbLight._m0[_2893].xyz), vec3(_2920, _2921, _2922));
        float _4900 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2935 = _2912 * _2912;
        float _2939 = ((_2930 * _2930) * (_2935 + (-1.0))) + 1.0;
        float _2946 = exp2(log2(1.0 - (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) * 5.0);
        float _2953 = 1.0 - _2912;
        float _2963 = (0.5 / (((_2570 * ((_2926 * _2953) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2570 * _2953) + _2912) * _2926))) * _2926;
        float _4911 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2965 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2935 / ((_2939 * _2939) * 3.141590118408203125));
        float _2966 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2882 = (((((_2946 * _2592) + _1331) * cbLight._m0[_2897].x) * _2965) * _2966) + _2768;
        _2884 = (((((_2946 * _2594) + _1333) * cbLight._m0[_2897].y) * _2965) * _2966) + _2770;
        _2886 = (((((_2946 * _2595) + _1334) * cbLight._m0[_2897].z) * _2965) * _2966) + _2772;
    }
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_2400.y == 0u)
    {
        float _3041 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3042 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3041;
        float _3043 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3041;
        float _3044 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3041;
        uvec4 _3056 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3057 = _3056.x;
        uint _3068 = uint((float(_3056.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1270) / _3057))) + floor(float(uint(cbSceneParam._m0[85u].x * _1269) / _3057)));
        float _3078 = (log2(_3044 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3079 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
        uint _3082 = uint(isnan(14.0) ? _3079 : (isnan(_3079) ? 14.0 : min(_3079, 14.0)));
        uvec4 _3087 = texelFetch(g_lightClusterGridBuffer, int(((_3082 << 2u) + (_3068 << 6u)) >> 2u));
        uint _3088 = _3087.x;
        uint _3089 = _3056.z;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((((1u << ((_3089 >> 4u) & 15u)) + 4294967295u) & _3088) == 0u) || ((_3089 & 240u) == 0u))
        {
            _3189 = 0.0;
            _3191 = 0.0;
            _3193 = 0.0;
            _3195 = 0.0;
            _3197 = 0.0;
            _3199 = 0.0;
        }
        else
        {
            float _3190;
            float _3192;
            float _3194;
            float _3196;
            float _3198;
            float _3200;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            uint _3339 = 0u;
            uint _3348;
            bool _3349;
            for (;;)
            {
                _3348 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                _3349 = _3348 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3349)
                {
                    frontier_phi_61_pred = _3333;
                    frontier_phi_61_pred_1 = _3338;
                    frontier_phi_61_pred_2 = _3337;
                    frontier_phi_61_pred_3 = _3336;
                    frontier_phi_61_pred_4 = _3335;
                    frontier_phi_61_pred_5 = _3334;
                }
                else
                {
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    uint _3463;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3337;
                    _3462 = _3338;
                    _3463 = _3348;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    for (;;)
                    {
                        uint _3467 = uint(findLSB(_3463)) + (_3339 << 5u);
                        uint _3464 = (_3463 + 4294967295u) & _3463;
                        uint _3469 = _3467 * 48u;
                        vec4 _3483 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3489 = (_3467 * 48u) + 4u;
                        vec4 _3502 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3508 = (_3467 * 48u) + 8u;
                        vec3 _3519 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3508)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3508 + 2u)).x));
                        float _3523 = _3483.x - _3042;
                        float _3524 = _3483.y - _3043;
                        float _3525 = _3483.z - _3044;
                        float _3526 = dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525));
                        float _3529 = inversesqrt(_3526);
                        float _3530 = _3529 * _3523;
                        float _3531 = _3529 * _3524;
                        float _3532 = _3529 * _3525;
                        float _3533 = dot(vec3(_1288, _1291, _1294), vec3(_3530, _3531, _3532));
                        float _3538 = 1.0 - (_3526 * _3483.w);
                        float _4937 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3539 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3540 = sqrt(_3526) * _3502.w;
                        float _3543 = 1.39999997615814208984375 / (_3540 + 1.39999997615814208984375);
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3533) + _3544;
                        float _3550 = _3540 * _3540;
                        float _3554 = ((isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * _3539) / ((_3550 * 0.699999988079071044921875) + 1.0);
                        float _3558 = (-0.0) - _3042;
                        float _3559 = (-0.0) - _3043;
                        float _3560 = (-0.0) - _3044;
                        float _3564 = inversesqrt(dot(vec3(_3558, _3559, _3560), vec3(_3558, _3559, _3560)));
                        float _3565 = _3564 * _3558;
                        float _3566 = _3564 * _3559;
                        float _3567 = _3564 * _3560;
                        float _3575 = exp2(log2(1.0 / ((_3550 * 3.5) + 5.0)) * 0.25);
                        float _3576 = 1.0 - _1363;
                        float _3583 = sqrt(1.0 - ((1.0 - (_3576 * _3576)) * (1.0 - (_3575 * _3575))));
                        float _3584 = _3583 * _3583;
                        float _3585 = _3584 * _3584;
                        float _3586 = _3565 + _3530;
                        float _3587 = _3566 + _3531;
                        float _3588 = _3567 + _3532;
                        float _3592 = inversesqrt(dot(vec3(_3586, _3587, _3588), vec3(_3586, _3587, _3588)));
                        float _3596 = dot(vec3(_1288, _1291, _1294), vec3(_3565, _3566, _3567));
                        float _4953 = isnan(0.0) ? _3596 : (isnan(_3596) ? 0.0 : max(_3596, 0.0));
                        float _3599 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3600 = dot(vec3(_1288, _1291, _1294), vec3(_3592 * _3586, _3592 * _3587, _3592 * _3588));
                        float _4964 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3603 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3607 = ((_3603 * _3603) * (_3585 + (-1.0))) + 1.0;
                        float _3608 = _3543 * _3584;
                        float _3609 = _3608 * _3608;
                        float _3612 = ((1.0 - _3609) * _3533) + _3609;
                        float _4975 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                        float _3613 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3614 = 1.0 - _3584;
                        float _3624 = (0.5 / (((_3613 * ((_3599 * _3614) + _3584)) + 9.9999999392252902907785028219223e-09) + (((_3613 * _3614) + _3584) * _3599))) * _3613;
                        float _4986 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3635 = (((_3585 * 3.1415927410125732421875) * (isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0)))) / ((_3607 * _3607) * ((_3550 * 2.1991131305694580078125) + 3.141590118408203125))) * _3539;
                        _3392 = (_3554 * _3502.x) + _3460;
                        _3393 = (_3554 * _3502.y) + _3461;
                        _3394 = (_3554 * _3502.z) + _3462;
                        _3389 = (_3635 * _3519.x) + _3457;
                        _3390 = (_3635 * _3519.y) + _3458;
                        _3391 = (_3635 * _3519.z) + _3459;
                        if (_3464 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3393;
                            _3462 = _3394;
                            _3463 = _3464;
                        }
                    }
                    frontier_phi_61_pred = _3389;
                    frontier_phi_61_pred_1 = _3394;
                    frontier_phi_61_pred_2 = _3393;
                    frontier_phi_61_pred_3 = _3392;
                    frontier_phi_61_pred_4 = _3391;
                    frontier_phi_61_pred_5 = _3390;
                }
                _3190 = frontier_phi_61_pred;
                _3200 = frontier_phi_61_pred_1;
                _3198 = frontier_phi_61_pred_2;
                _3196 = frontier_phi_61_pred_3;
                _3194 = frontier_phi_61_pred_4;
                _3192 = frontier_phi_61_pred_5;
                uint _3340 = _3339 + 1u;
                if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3333 = _3190;
                    _3334 = _3192;
                    _3335 = _3194;
                    _3336 = _3196;
                    _3337 = _3198;
                    _3338 = _3200;
                    _3339 = _3340;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3189 = _3190;
            _3191 = _3192;
            _3193 = _3194;
            _3195 = _3196;
            _3197 = _3198;
            _3199 = _3200;
        }
        uvec4 _3203 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3204 = _3203.z;
        uint _3206 = (_3204 >> 8u) & 15u;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        if (((4294967295u << _3206) & _3088) == 0u)
        {
            _3301 = _3189;
            _3303 = _3191;
            _3305 = _3193;
            _3307 = _3195;
            _3309 = _3197;
            _3311 = _3199;
        }
        else
        {
            float _3326 = inversesqrt(dot(vec3(_3042, _3043, _3044), vec3(_3042, _3043, _3044)));
            float _3327 = _3326 * _3042;
            float _3328 = _3326 * _3043;
            float _3329 = _3326 * _3044;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3206 < ((_3204 >> 12u) & 15u))
            {
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3440 = _3189;
                float _3441 = _3191;
                float _3442 = _3193;
                float _3443 = _3195;
                float _3444 = _3197;
                float _3445 = _3199;
                uint _3446 = _3206;
                uint _3455;
                bool _3456;
                for (;;)
                {
                    _3455 = texelFetch(g_lightClassification, int((((_3082 << 5u) + (_3068 << 9u)) + (_3446 << 2u)) >> 2u)).x;
                    _3456 = _3455 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3456)
                    {
                        frontier_phi_67_pred = _3443;
                        frontier_phi_67_pred_1 = _3444;
                        frontier_phi_67_pred_2 = _3445;
                        frontier_phi_67_pred_3 = _3442;
                        frontier_phi_67_pred_4 = _3441;
                        frontier_phi_67_pred_5 = _3440;
                    }
                    else
                    {
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3653 = _3440;
                        float _3654 = _3441;
                        float _3655 = _3442;
                        float _3656 = _3443;
                        float _3657 = _3444;
                        float _3658 = _3445;
                        uint _3659 = _3455;
                        uint _3660;
                        vec4 _3685;
                        float _3686;
                        vec4 _3701;
                        vec3 _3713;
                        vec4 _3728;
                        vec4 _3743;
                        float _3789;
                        bool _3790;
                        for (;;)
                        {
                            uint _3670 = ((_3446 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3659));
                            _3660 = (_3659 + 4294967295u) & _3659;
                            uint _3672 = _3670 * 40u;
                            _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3686 = _3685.w;
                            uint _3688 = (_3670 * 40u) + 4u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3670 * 40u) + 8u;
                            _3713 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x));
                            uint _3715 = (_3670 * 40u) + 16u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3670 * 40u) + 20u;
                            _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3745 = (_3670 * 40u) + 24u;
                            vec4 _3758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3745 + 3u)).x));
                            uint _3764 = (_3670 * 40u) + 28u;
                            vec4 _3777 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3764)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3764 + 3u)).x));
                            _3789 = fma(_3044, _3777.z, fma(_3043, _3777.y, _3777.x * _3042)) + _3777.w;
                            _3790 = !((fma(_3044, _3758.z, fma(_3043, _3758.y, _3758.x * _3042)) + _3758.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3790)
                            {
                                float _3817 = _3685.x - _3042;
                                float _3818 = _3685.y - _3043;
                                float _3819 = _3685.z - _3044;
                                float _3820 = dot(vec3(_3817, _3818, _3819), vec3(_3817, _3818, _3819));
                                float _3823 = inversesqrt(_3820);
                                float _3824 = _3823 * _3817;
                                float _3825 = _3823 * _3818;
                                float _3826 = _3823 * _3819;
                                float _3830 = 1.0 - (_3820 / (_3686 * _3686));
                                float _4997 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3835 = sqrt(_3820) * _3701.w;
                                float _3837 = 1.39999997615814208984375 / (_3835 + 1.39999997615814208984375);
                                float _3838 = _3837 * _3837;
                                float _3841 = ((1.0 - _3838) * dot(vec3(_3824, _3825, _3826), vec3(_1288, _1291, _1294))) + _3838;
                                float _3844 = _3835 * _3835;
                                float _3848 = (fma(_3044, _3728.z, fma(_3043, _3728.y, _3728.x * _3042)) + _3728.w) / _3789;
                                float _3849 = (fma(_3044, _3743.z, fma(_3043, _3743.y, _3743.x * _3042)) + _3743.w) / _3789;
                                float _3853 = 1.0 - dot(vec2(_3848, _3849), vec2(_3848, _3849));
                                float _5013 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                                float _3854 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3855 = _3854 * (((isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0))) * _3831) / ((_3844 * 0.699999988079071044921875) + 1.0));
                                float _3867 = exp2(log2(1.0 / ((_3844 * 3.5) + 5.0)) * 0.25);
                                float _3868 = 1.0 - _1363;
                                float _3875 = sqrt(1.0 - ((1.0 - (_3868 * _3868)) * (1.0 - (_3867 * _3867))));
                                float _3876 = _3875 * _3875;
                                float _3877 = _3876 * _3876;
                                float _3878 = _3824 - _3327;
                                float _3879 = _3825 - _3328;
                                float _3880 = _3826 - _3329;
                                float _3884 = inversesqrt(dot(vec3(_3878, _3879, _3880), vec3(_3878, _3879, _3880)));
                                float _3888 = dot(vec3(_1288, _1291, _1294), vec3((-0.0) - _3327, (-0.0) - _3328, (-0.0) - _3329));
                                float _5024 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3892 = dot(vec3(_1288, _1291, _1294), vec3(_3884 * _3878, _3884 * _3879, _3884 * _3880));
                                float _5035 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3895 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3899 = ((_3895 * _3895) * (_3877 + (-1.0))) + 1.0;
                                float _3900 = _3837 * _3876;
                                float _3901 = _3900 * _3900;
                                float _3907 = ((1.0 - _3901) * dot(vec3(_1288, _1291, _1294), vec3(_3824, _3825, _3826))) + _3901;
                                float _5046 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3909 = 1.0 - _3876;
                                float _3919 = (0.5 / (((_3908 * ((_3891 * _3909) + _3876)) + 9.9999999392252902907785028219223e-09) + (((_3908 * _3909) + _3876) * _3891))) * _3908;
                                float _5057 = isnan(0.0) ? _3919 : (isnan(_3919) ? 0.0 : max(_3919, 0.0));
                                float _3929 = (_3854 * _3831) * (((_3877 * 3.1415927410125732421875) * (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) / ((_3899 * _3899) * ((_3844 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3929 * _3713.x;
                                frontier_phi_73_pred_1 = _3929 * _3713.y;
                                frontier_phi_73_pred_2 = _3855 * _3701.z;
                                frontier_phi_73_pred_3 = _3855 * _3701.y;
                                frontier_phi_73_pred_4 = _3855 * _3701.x;
                                frontier_phi_73_pred_5 = _3929 * _3713.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3933 = frontier_phi_73_pred;
                            _3934 = frontier_phi_73_pred_1;
                            _3938 = frontier_phi_73_pred_2;
                            _3937 = frontier_phi_73_pred_3;
                            _3936 = frontier_phi_73_pred_4;
                            _3935 = frontier_phi_73_pred_5;
                            _3643 = _3936 + _3656;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3640 = _3933 + _3653;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            if (_3660 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3660;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3643;
                        frontier_phi_67_pred_1 = _3644;
                        frontier_phi_67_pred_2 = _3645;
                        frontier_phi_67_pred_3 = _3642;
                        frontier_phi_67_pred_4 = _3641;
                        frontier_phi_67_pred_5 = _3640;
                    }
                    _3308 = frontier_phi_67_pred;
                    _3310 = frontier_phi_67_pred_1;
                    _3312 = frontier_phi_67_pred_2;
                    _3306 = frontier_phi_67_pred_3;
                    _3304 = frontier_phi_67_pred_4;
                    _3302 = frontier_phi_67_pred_5;
                    uint _3447 = _3446 + 1u;
                    if (_3447 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3440 = _3302;
                        _3441 = _3304;
                        _3442 = _3306;
                        _3443 = _3308;
                        _3444 = _3310;
                        _3445 = _3312;
                        _3446 = _3447;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3310;
                frontier_phi_55_56_ladder_1 = _3312;
                frontier_phi_55_56_ladder_2 = _3308;
                frontier_phi_55_56_ladder_3 = _3306;
                frontier_phi_55_56_ladder_4 = _3304;
                frontier_phi_55_56_ladder_5 = _3302;
            }
            else
            {
                frontier_phi_55_56_ladder = _3197;
                frontier_phi_55_56_ladder_1 = _3199;
                frontier_phi_55_56_ladder_2 = _3195;
                frontier_phi_55_56_ladder_3 = _3193;
                frontier_phi_55_56_ladder_4 = _3191;
                frontier_phi_55_56_ladder_5 = _3189;
            }
            _3301 = frontier_phi_55_56_ladder_5;
            _3303 = frontier_phi_55_56_ladder_4;
            _3305 = frontier_phi_55_56_ladder_3;
            _3307 = frontier_phi_55_56_ladder_2;
            _3309 = frontier_phi_55_56_ladder;
            _3311 = frontier_phi_55_56_ladder_1;
        }
        float _3316 = isnan(1.0) ? _1347 : (isnan(_1347) ? 1.0 : min(_1347, 1.0));
        _3101 = (_3316 * _3307) + _2534;
        _3103 = (_3316 * _3309) + _2536;
        _3105 = (_3316 * _3311) + _2538;
        _3107 = ((_3301 * _1331) * _3316) + _2882;
        _3109 = ((_3303 * _1333) * _3316) + _2884;
        _3111 = ((_3305 * _1334) * _3316) + _2886;
    }
    else
    {
        _3101 = _2534;
        _3103 = _2536;
        _3105 = _2538;
        _3107 = _2882;
        _3109 = _2884;
        _3111 = _2886;
    }
    float _5073 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _5084 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _5095 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
    uint _3131 = _299 + 6u;
    float _3139 = _1269 / cbSceneParam._m0[86u].x;
    float _3140 = _1270 / cbSceneParam._m0[86u].y;
    vec4 _3154 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, (log2((isnan(cbSceneParam._m0[77u].w) ? _1204 : (isnan(_1204) ? cbSceneParam._m0[77u].w : min(_1204, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3156 = _3154.x;
    float _3157 = _3154.y;
    float _3158 = _3154.z;
    float _3159 = _3154.w;
    float _3251;
    float _3253;
    float _3255;
    float _3257;
    if (_1204 > cbSceneParam._m0[78u].w)
    {
        float _3214 = isnan(_1204) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1204 : min(cbSceneParam._m0[80u].w, _1204));
        float _3215 = _3214 / _1204;
        float _3226 = _3215 * _1254;
        float _3227 = _1255 * _3215;
        float _3228 = (-0.0) - _3227;
        float _3229 = _3215 * _1256;
        float _3231 = (cbSceneParam._m0[77u].w * _3228) / _3214;
        float _3232 = _3231 + cbSceneParam._m0[79u].w;
        float _3233 = cbSceneParam._m0[79u].w - _3227;
        float _3239 = sqrt(((_3226 * _3226) + (_3227 * _3227)) + (_3229 * _3229));
        float _3242 = (1.0 - (cbSceneParam._m0[77u].w / _3214)) * _3239;
        float _3247 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3249 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3402;
        if (abs((_3228 - _3231) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3402 = ((((_3232 > 0.0) ? exp2(_3247 * _3232) : (2.0 - exp2(_3249 * _3232))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3242;
        }
        else
        {
            float _3362 = 1.0 / cbSceneParam._m0[80u].x;
            float _3363 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : max(_3232, _3233));
            float _3364 = isnan(_3233) ? _3232 : (isnan(_3232) ? _3233 : min(_3232, _3233));
            float _3373 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : min(_3363, 0.0));
            float _3374 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : min(_3364, 0.0));
            _3402 = ((abs(_3239 / _3228) * cbSceneParam._m0[80u].y) * ((((_3373 - _3374) * 2.0) - ((exp2(_3247 * (isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0)))) - exp2(_3247 * (isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))))) * _3362)) - ((exp2(_3249 * _3373) - exp2(_3249 * _3374)) * _3362))) + (_3242 * cbSceneParam._m0[80u].z);
        }
        vec4 _3404 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3139, _3140, 1.0), 0.0);
        float _3413 = exp2((_3402 * (-1.44269502162933349609375)) * (1.0 - _3404.w));
        float _3414 = log2(_3413);
        float _3430 = log2(_3159);
        _3251 = (exp2(_3430 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].x)) * _3404.x) / cbSceneParam._m0[78u].x)) + _3156;
        _3253 = (exp2(_3430 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].y)) * _3404.y) / cbSceneParam._m0[78u].y)) + _3157;
        _3255 = (exp2(_3430 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3414 * cbSceneParam._m0[78u].z)) * _3404.z) / cbSceneParam._m0[78u].z)) + _3158;
        _3257 = _3413 * _3159;
    }
    else
    {
        _3251 = _3156;
        _3253 = _3157;
        _3255 = _3158;
        _3257 = _3159;
    }
    float _3269 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3270 = _3269 == 3.0;
    float _3271 = log2(_3257);
    float _3278 = exp2(_3271 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3101 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1347))) + ((_3107 + ((isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0))) * _2153)) * cbPerFrame._m0[3u].x));
    float _3279 = exp2(_3271 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3103 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1347))) + ((_3109 + ((isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0))) * _2153)) * cbPerFrame._m0[3u].x));
    float _3280 = exp2(_3271 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3105 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1347))) + ((_3111 + ((isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0))) * _2153)) * cbPerFrame._m0[3u].x));
    float _3289 = (_3269 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3289 * (_3270 ? _3278 : (_3278 + (cbSceneParam._m0[72u].w * _3251)));
    SV_Target.y = _3289 * (_3270 ? _3279 : (_3279 + (cbSceneParam._m0[72u].w * _3253)));
    SV_Target.z = _3289 * (_3270 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3255)));
    SV_Target.w = cbInstanceData._m0[_3131].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3131].w;
}


