#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1433;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _252 = uint(roundEven(NORMAL.w)) * 13u;
    uint _258 = _252 + 1u;
    uint _262 = _252 + 2u;
    float _271 = sqrt(((cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x) + (cbInstanceData._m0[_252].x * cbInstanceData._m0[_252].x)) + (cbInstanceData._m0[_262].x * cbInstanceData._m0[_262].x));
    float _272 = _271 * TEXCOORD.z;
    float _273 = _271 * TEXCOORD.w;
    vec4 _293 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _299 = _293.x * cbMtdParam._m0[11u].x;
    float _300 = _293.y * cbMtdParam._m0[11u].y;
    float _301 = _293.z * cbMtdParam._m0[11u].z;
    vec4 _320 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _272) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _273) + cbTextureTilingScale._m0[5u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _379 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _381 = _379.x;
    float _393 = dot(vec4(_381, _379.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _410 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _340.x) * 2.0) - ((((_381 - _393) * cbMtdParam._m0[23u].w) + _393) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3757 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _418 = (_411 * ((_320.x * cbMtdParam._m0[12u].x) - _299)) + _299;
    float _419 = (_411 * ((_320.y * cbMtdParam._m0[12u].y) - _300)) + _300;
    float _420 = (_411 * ((_320.z * cbMtdParam._m0[12u].z) - _301)) + _301;
    vec4 _437 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _272) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _273) + cbTextureTilingScale._m0[3u].w));
    vec4 _457 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _459 = _457.x;
    float _469 = dot(vec4(_459, _457.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _483 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _340.y) * 2.0) - ((((_459 - _469) * cbMtdParam._m0[23u].w) + _469) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3768 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _484 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
    float _491 = (_484 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418;
    float _492 = (_484 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419;
    float _493 = (_484 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420;
    vec4 _512 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _272) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _273) + cbTextureTilingScale._m0[24u].w));
    vec4 _529 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _531 = _529.x;
    float _541 = dot(vec4(_531, _529.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _553 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _340.z) * 2.0) - ((((_531 - _541) * cbMtdParam._m0[23u].w) + _541) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3779 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
    float _554 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
    float _561 = (_554 * ((_512.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _562 = (_554 * ((_512.y * cbMtdParam._m0[14u].y) - _492)) + _492;
    float _563 = (_554 * ((_512.z * cbMtdParam._m0[14u].z) - _493)) + _493;
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _272) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _273) + cbTextureTilingScale._m0[4u].w));
    vec4 _598 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _600 = _598.x;
    float _601 = _598.y;
    float _602 = _598.z;
    float _609 = ((_581.x - _600) * _411) + _600;
    float _610 = ((_581.y - _601) * _411) + _601;
    float _611 = ((_581.z - _602) * _411) + _602;
    vec4 _623 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _272) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _273) + cbTextureTilingScale._m0[2u].w));
    float _634 = ((_623.x - _609) * _484) + _609;
    float _635 = ((_623.y - _610) * _484) + _610;
    float _636 = ((_623.z - _611) * _484) + _611;
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _272) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _273) + cbTextureTilingScale._m0[23u].w));
    float _661 = ((_648.z - _636) * _554) + _636;
    float _664 = ((((_648.x - _634) * _554) + _634) * 2.0) + (-1.0);
    float _666 = ((((_648.y - _635) * _554) + _635) * 2.0) + (-1.0);
    float _667 = dot(vec2(_664, _666), vec2(_664, _666));
    float _3790 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))));
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _272) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _273) + cbTextureTilingScale._m0[11u].w));
    float _713 = _711.x;
    float _714 = 1.0 - _713;
    float _729 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_713 - _714) * cbMtdParam._m0[24u].z) + _714) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3801 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _730 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _737 = (_730 * (cbMtdParam._m0[17u].x - _561)) + _561;
    float _738 = (_730 * (cbMtdParam._m0[17u].y - _562)) + _562;
    float _739 = (_730 * (cbMtdParam._m0[17u].z - _563)) + _563;
    vec4 _765 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _767 = _765.x;
    float _785 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _272) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _273) + cbTextureTilingScale._m0[9u].w)).x - _767) * _411) + _767;
    float _802 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _272) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _273) + cbTextureTilingScale._m0[21u].w)).x - _785) * _484) + _785;
    float _820 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _272) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _273) + cbTextureTilingScale._m0[10u].w)).x - _802) * _554) + _802;
    float _824 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _820) * cbMtdParam._m0[19u].z) + _820;
    float _826 = _824 - (_824 * _730);
    float _830 = (cbMtdParam._m0[19u].w * (_686.z - _661)) + _661;
    vec4 _843 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _272) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _273) + cbTextureTilingScale._m0[15u].w));
    float _850 = (_843.x * 2.0) + (-1.0);
    float _851 = (_843.y * 2.0) + (-1.0);
    float _852 = dot(vec2(_850, _851), vec2(_850, _851));
    float _3812 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
    float _860 = (_730 * (_843.z - _830)) + _830;
    float _863 = (((_686.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _664;
    float _864 = (((_686.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _666;
    float _876 = (((_850 - _863) + (cbMtdParam._m0[21u].x * _863)) * _730) + _863;
    float _877 = (((_851 - _864) + (cbMtdParam._m0[21u].x * _864)) * _730) + _864;
    float _878 = (_730 * (sqrt(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) - _672)) + _672;
    float _880 = cbMtdParam._m0[22u].x + _686.w;
    float _883 = fma(_878, _239 * NORMAL.x, fma(_877, _246 * TANGENT.x, (_232 * _224) * _876));
    float _886 = fma(_878, _239 * NORMAL.y, fma(_877, _246 * TANGENT.y, (_232 * _225) * _876));
    float _889 = fma(_878, _239 * NORMAL.z, fma(_877, _246 * TANGENT.z, (_232 * _226) * _876));
    float _893 = inversesqrt(dot(vec3(_883, _886, _889), vec3(_883, _886, _889)));
    float _894 = _893 * _883;
    float _895 = _893 * _886;
    float _896 = _893 * _889;
    float _3823 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _897 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    float _3834 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _3845 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _3856 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _3867 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3878 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _902 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _916 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _966 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _956);
    float _967 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _956);
    float _968 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _956);
    float _972 = inversesqrt(dot(vec3(_966, _967, _968), vec3(_966, _967, _968)));
    float _973 = _966 * _972;
    float _974 = _967 * _972;
    float _975 = _968 * _972;
    float _981 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _982 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1000 = fma(_896, cbSceneParam._m0[5u].z, fma(_895, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _894));
    float _1003 = fma(_896, cbSceneParam._m0[6u].z, fma(_895, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _894));
    float _1006 = fma(_896, cbSceneParam._m0[7u].z, fma(_895, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _894));
    uint _1020 = (_252 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1026 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_1020].x;
    float _1027 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_1020].y;
    float _1028 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_1020].z;
    float _3889 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _1029 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1030 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
    float _1031 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1032 = 1.0 - _902;
    float _1033 = _1029 * _1032;
    float _1034 = _1030 * _1032;
    float _1035 = _1031 * _1032;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _902;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _902;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _902;
    float _1043 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    vec4 _1055 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _981, cbSceneParam._m0[86u].y * _982));
    float _1059 = ((isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * TEXCOORD_5.w) * _1055.x;
    float _1060 = dot(vec3(_894, _895, _896), vec3(_973, _974, _975));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _894) - _973;
    float _1068 = (_1063 * _895) - _974;
    float _1069 = (_1063 * _896) - _975;
    float _1073 = abs(dot(vec3(_973, _974, _975), vec3(_894, _895, _896)));
    float _3922 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_897);
    float _1088 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1075;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1432;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1157 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1161 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1165 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1190 = _1123 + _894;
        float _1191 = _1127 + _895;
        float _1192 = _1131 + _896;
        float _1202 = fma(_1192, cbModelParam._m0[26u].z, fma(_1191, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1190)) - _1157;
        float _1203 = fma(_1192, cbModelParam._m0[27u].z, fma(_1191, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1190)) - _1161;
        float _1204 = fma(_1192, cbModelParam._m0[28u].z, fma(_1191, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1190)) - _1165;
        float _1208 = inversesqrt(dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204)));
        float _1221 = ((_1208 * _1202) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1157 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1222 = ((_1208 * _1203) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1161 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1223 = ((_1208 * _1204) / cbModelParam._m0[34u].z) + ((((((_1165 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1221, _1222, _1223), 0.0);
        float _1260 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1226.x + (-0.5));
        float _1262 = _1260 * (_1226.y + (-0.5));
        float _1263 = _1260 * (_1226.z + (-0.5));
        float _1270 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1233.x + (-0.5));
        float _1272 = _1270 * (_1233.y + (-0.5));
        float _1273 = _1270 * (_1233.z + (-0.5));
        float _1280 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1240.x + (-0.5));
        float _1282 = _1280 * (_1240.y + (-0.5));
        float _1283 = _1280 * (_1240.z + (-0.5));
        float _1290 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1291 = _1290 * (_1247.x + (-0.5));
        float _1292 = _1290 * (_1247.y + (-0.5));
        float _1293 = _1290 * (_1247.z + (-0.5));
        float _1294 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1295 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1296 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1297 = _1261 * 0.5;
        float _1298 = _1271 * 0.5;
        float _1299 = _1281 * 0.5;
        float _1300 = dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299));
        float _1305 = (_1300 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1300);
        float _1314 = (dot(vec3(_894, _895, _896), vec3(_1305 * _1297, _1305 * _1298, _1305 * _1299)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1324 = sqrt(((_1298 * _1298) + (_1297 * _1297)) + (_1299 * _1299)) / (_1294 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1326 = _1325 * 2.0;
        float _1330 = (1.0 - _1325) / (_1325 + 1.0);
        float _3970 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1340 = ((((1.0 - _1331) * (_1326 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1326 + 1.0))) + _1331) * _1294;
        float _1341 = _1262 * 0.5;
        float _1342 = _1272 * 0.5;
        float _1343 = _1282 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1357 = (dot(vec3(_894, _895, _896), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1366 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1295 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4003 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1368 + 1.0))) + _1373) * _1295;
        float _1383 = _1263 * 0.5;
        float _1384 = _1273 * 0.5;
        float _1385 = _1283 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_894, _895, _896), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1296 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4036 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1410 + 1.0))) + _1415) * _1296;
        _1432 = _1263;
        _1434 = _1262;
        _1435 = _1261;
        _1436 = _1273;
        _1437 = _1272;
        _1438 = _1271;
        _1439 = _1283;
        _1440 = _1282;
        _1441 = _1281;
        _1442 = _1296;
        _1443 = _1295;
        _1444 = _1294;
        _1445 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0)));
        _1446 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1447 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
    }
    else
    {
        _1432 = _1433;
        _1434 = _1433;
        _1435 = _1433;
        _1436 = _1433;
        _1437 = _1433;
        _1438 = _1433;
        _1439 = _1433;
        _1440 = _1433;
        _1441 = _1433;
        _1442 = _1433;
        _1443 = _1433;
        _1444 = _1433;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1470 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1474 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1478 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1501 = _1123 + _894;
        float _1502 = _1127 + _895;
        float _1503 = _1131 + _896;
        float _1513 = fma(_1503, cbModelParam._m0[30u].z, fma(_1502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1501)) - _1470;
        float _1514 = fma(_1503, cbModelParam._m0[31u].z, fma(_1502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1501)) - _1474;
        float _1515 = fma(_1503, cbModelParam._m0[32u].z, fma(_1502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1501)) - _1478;
        float _1519 = inversesqrt(dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515)));
        float _1532 = ((_1519 * _1513) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1470 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1533 = ((_1519 * _1514) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1474 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1534 = ((_1519 * _1515) / cbModelParam._m0[35u].z) + ((((((_1478 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1532, _1533, _1534), 0.0);
        float _1569 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1536.x + (-0.5));
        float _1571 = _1569 * (_1536.y + (-0.5));
        float _1572 = _1569 * (_1536.z + (-0.5));
        float _1579 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1543.x + (-0.5));
        float _1581 = _1579 * (_1543.y + (-0.5));
        float _1582 = _1579 * (_1543.z + (-0.5));
        float _1589 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1550.x + (-0.5));
        float _1591 = _1589 * (_1550.y + (-0.5));
        float _1592 = _1589 * (_1550.z + (-0.5));
        float _1599 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1557.x + (-0.5));
        float _1601 = _1599 * (_1557.y + (-0.5));
        float _1602 = _1599 * (_1557.z + (-0.5));
        float _1603 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1604 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1605 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1606 = _1570 * 0.5;
        float _1607 = _1580 * 0.5;
        float _1608 = _1590 * 0.5;
        float _1609 = dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608));
        float _1614 = (_1609 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1609);
        float _1622 = (dot(vec3(_894, _895, _896), vec3(_1614 * _1606, _1614 * _1607, _1614 * _1608)) + 1.0) * 0.5;
        float _4077 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1631 = sqrt(((_1607 * _1607) + (_1606 * _1606)) + (_1608 * _1608)) / (_1603 + 9.9999997473787516355514526367188e-06);
        float _4088 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1633 = _1632 * 2.0;
        float _1637 = (1.0 - _1632) / (_1632 + 1.0);
        float _4099 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1647 = ((((1.0 - _1638) * (_1633 + 2.0)) * exp2(log2(isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0))) * (_1633 + 1.0))) + _1638) * _1603;
        float _1648 = _1571 * 0.5;
        float _1649 = _1581 * 0.5;
        float _1650 = _1591 * 0.5;
        float _1651 = dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650));
        float _1656 = (_1651 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1651);
        float _1664 = (dot(vec3(_894, _895, _896), vec3(_1656 * _1648, _1656 * _1649, _1656 * _1650)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1673 = sqrt(((_1649 * _1649) + (_1648 * _1648)) + (_1650 * _1650)) / (_1604 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1675 = _1674 * 2.0;
        float _1679 = (1.0 - _1674) / (_1674 + 1.0);
        float _4132 = isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0));
        float _1680 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1689 = ((((1.0 - _1680) * (_1675 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1675 + 1.0))) + _1680) * _1604;
        float _1690 = _1572 * 0.5;
        float _1691 = _1582 * 0.5;
        float _1692 = _1592 * 0.5;
        float _1693 = dot(vec3(_1690, _1691, _1692), vec3(_1690, _1691, _1692));
        float _1698 = (_1693 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1693);
        float _1706 = (dot(vec3(_894, _895, _896), vec3(_1698 * _1690, _1698 * _1691, _1698 * _1692)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1715 = sqrt(((_1691 * _1691) + (_1690 * _1690)) + (_1692 * _1692)) / (_1605 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1716 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1717 = _1716 * 2.0;
        float _1721 = (1.0 - _1716) / (_1716 + 1.0);
        float _4165 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1731 = ((((1.0 - _1722) * (_1717 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1717 + 1.0))) + _1722) * _1605;
        _1739 = _1572;
        _1740 = _1571;
        _1741 = _1570;
        _1742 = _1582;
        _1743 = _1581;
        _1744 = _1580;
        _1745 = _1592;
        _1746 = _1591;
        _1747 = _1590;
        _1748 = _1605;
        _1749 = _1604;
        _1750 = _1603;
        _1751 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0)));
        _1752 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)));
        _1753 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0)));
    }
    else
    {
        _1739 = _1433;
        _1740 = _1433;
        _1741 = _1433;
        _1742 = _1433;
        _1743 = _1433;
        _1744 = _1433;
        _1745 = _1433;
        _1746 = _1433;
        _1747 = _1433;
        _1748 = _1433;
        _1749 = _1433;
        _1750 = _1433;
        _1751 = 0.0;
        _1752 = 0.0;
        _1753 = 0.0;
    }
    float _1763 = (cbModelParam._m0[1u].x * (_1751 - _1445)) + _1445;
    float _1764 = (cbModelParam._m0[1u].x * (_1752 - _1446)) + _1446;
    float _1765 = (cbModelParam._m0[1u].x * (_1753 - _1447)) + _1447;
    float _1786 = fma(_1765, cbSceneParam._m0[89u].z, fma(_1764, cbSceneParam._m0[89u].y, _1763 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1765, cbSceneParam._m0[90u].z, fma(_1764, cbSceneParam._m0[90u].y, _1763 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1765, cbSceneParam._m0[91u].z, fma(_1764, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1763));
    float _1807 = _1067 * 0.5;
    float _1808 = _1068 * 0.5;
    float _1809 = _1069 * 0.5;
    float _1810 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1741, _1744, _1747, _1750));
    float _1813 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1740, _1743, _1746, _1749));
    float _1816 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1739, _1742, _1745, _1748));
    float _1850;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1823 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1432, _1436, _1439, _1442));
        float _1827 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1434, _1437, _1440, _1443));
        float _1831 = dot(vec4(_1807, _1808, _1809, 1.0), vec4(_1435, _1438, _1441, _1444));
        float _1838 = dot(vec4(cbModelParam._m0[39u]), vec4(_1807, _1808, _1809, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0)), isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)), isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1838) ? 0.0 : (isnan(0.0) ? _1838 : max(0.0, _1838))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1861;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1852 = dot(vec4(cbModelParam._m0[40u]), vec4(_1807, _1808, _1809, 1.0));
        _1861 = dot(vec3(isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0)), isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1852) ? 0.0 : (isnan(0.0) ? _1852 : max(0.0, _1852))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1861 = 1.0;
    }
    float _1865 = (_1861 * cbModelParam._m0[1u].x) + (_1850 * (1.0 - cbModelParam._m0[1u].x));
    float _1875 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _897);
    float _1876 = isnan(_1875) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1875 : min(cbModelParam._m0[25u].z, _1875));
    float _1956;
    float _1958;
    float _1960;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1923 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1927 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1931 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1934 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1937 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1940 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1968;
        if (_1934 > 0.0)
        {
            _1968 = abs((1.0 - _1923) / _1934);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1923 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1968 = frontier_phi_14_12_ladder;
        }
        float _2171;
        if (_1937 > 0.0)
        {
            _2171 = abs((1.0 - _1927) / _1937);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1937 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1927 + 1.0) / _1937);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2171 = frontier_phi_23_19_ladder;
        }
        float _2425;
        if (_1940 > 0.0)
        {
            _2425 = abs((1.0 - _1931) / _1940);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1940 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1931 + 1.0) / _1940);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2425 = frontier_phi_35_30_ladder;
        }
        float _2427 = isnan(_2171) ? _1968 : (isnan(_1968) ? _2171 : min(_1968, _2171));
        float _2428 = isnan(_2425) ? _2427 : (isnan(_2427) ? _2425 : min(_2427, _2425));
        float _2432 = (_2428 * _1934) + _1923;
        float _2433 = (_2428 * _1937) + _1927;
        float _2434 = (_2428 * _1940) + _1931;
        float _2435 = _2428 * 9.9999997473787516355514526367188e-05;
        float _2437 = (-1.0) - _2435;
        float _2439 = _2435 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2434 > _2439) || ((_2434 < _2437) || ((_2433 > _2439) || ((_2433 < _2437) || ((_2432 < _2437) || (_2432 > _2439))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2562 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2434, cbModelParam._m0[9u].z, fma(_2433, cbModelParam._m0[9u].y, _2432 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2434, cbModelParam._m0[10u].z, fma(_2433, cbModelParam._m0[10u].y, _2432 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2434, cbModelParam._m0[11u].z, fma(_2433, cbModelParam._m0[11u].y, _2432 * cbModelParam._m0[11u].x))), _1876);
            frontier_phi_13_35_ladder = _2562.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2562.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2562.x * cbModelParam._m0[1u].y;
        }
        _1956 = frontier_phi_13_35_ladder_2;
        _1958 = frontier_phi_13_35_ladder_1;
        _1960 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1944 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1876);
        _1956 = _1944.x * cbModelParam._m0[1u].y;
        _1958 = _1944.y * cbModelParam._m0[1u].y;
        _1960 = _1944.z * cbModelParam._m0[1u].y;
    }
    float _1964 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _897);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1964 : min(cbModelParam._m0[25u].w, _1964));
    float _2055;
    float _2057;
    float _2059;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2019 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2023 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2027 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2030 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2033 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2036 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2176;
        if (_2030 > 0.0)
        {
            _2176 = abs((1.0 - _2019) / _2030);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2019 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2176 = frontier_phi_25_21_ladder;
        }
        float _2452;
        if (_2033 > 0.0)
        {
            _2452 = abs((1.0 - _2023) / _2033);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2023 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2452 = frontier_phi_37_32_ladder;
        }
        float _2665;
        if (_2036 > 0.0)
        {
            _2665 = abs((1.0 - _2027) / _2036);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2027 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2665 = frontier_phi_46_43_ladder;
        }
        float _2667 = isnan(_2452) ? _2176 : (isnan(_2176) ? _2452 : min(_2176, _2452));
        float _2668 = isnan(_2665) ? _2667 : (isnan(_2667) ? _2665 : min(_2667, _2665));
        float _2672 = (_2668 * _2030) + _2019;
        float _2673 = (_2668 * _2033) + _2023;
        float _2674 = (_2668 * _2036) + _2027;
        float _2675 = _2668 * 9.9999997473787516355514526367188e-05;
        float _2676 = (-1.0) - _2675;
        float _2678 = _2675 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2674 > _2678) || ((_2674 < _2676) || ((_2673 > _2678) || ((_2673 < _2676) || ((_2672 < _2676) || (_2672 > _2678))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2674, cbModelParam._m0[17u].z, fma(_2673, cbModelParam._m0[17u].y, _2672 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2674, cbModelParam._m0[18u].z, fma(_2673, cbModelParam._m0[18u].y, _2672 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2674, cbModelParam._m0[19u].z, fma(_2673, cbModelParam._m0[19u].y, _2672 * cbModelParam._m0[19u].x))), _1965);
            frontier_phi_22_46_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _2055 = frontier_phi_22_46_ladder_2;
        _2057 = frontier_phi_22_46_ladder_1;
        _2059 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2039 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1965);
        _2055 = _2039.x * cbModelParam._m0[1u].z;
        _2057 = _2039.y * cbModelParam._m0[1u].z;
        _2059 = _2039.z * cbModelParam._m0[1u].z;
    }
    float _2072 = (((_1094 * _1043) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2055 - _1956)) + _1956);
    float _2074 = (((_1094 * _1045) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2057 - _1958)) + _1958);
    float _2076 = (((_1094 * _1046) + _1095) * _1059) * ((cbModelParam._m0[1u].w * (_2059 - _1960)) + _1960);
    float _2079 = fma(_2076, cbSceneParam._m0[89u].z, fma(_2074, cbSceneParam._m0[89u].y, _2072 * cbSceneParam._m0[89u].x));
    float _2082 = fma(_2076, cbSceneParam._m0[90u].z, fma(_2074, cbSceneParam._m0[90u].y, _2072 * cbSceneParam._m0[90u].x));
    float _2085 = fma(_2076, cbSceneParam._m0[91u].z, fma(_2074, cbSceneParam._m0[91u].y, _2072 * cbSceneParam._m0[91u].x));
    uvec4 _2095 = floatBitsToUint(cbInstanceData._m0[_252 + 5u]);
    uint _2097 = _2095.x * 14u;
    uint _2098 = _2097 + 13u;
    float _2105 = _1059 + (-1.0);
    float _2110 = (cbLight._m0[_2098].x * _2105) + 1.0;
    float _2111 = (cbLight._m0[_2098].y * _2105) + 1.0;
    float _2112 = (cbLight._m0[_2098].z * _2105) + 1.0;
    float _2113 = (cbLight._m0[_2098].w * _2105) + 1.0;
    uint _2114 = _2097 + 5u;
    float _2120 = isnan(1.0) ? _2111 : (isnan(_2111) ? 1.0 : min(_2111, 1.0));
    uint _2124 = _2097 + 4u;
    float _2130 = isnan(1.0) ? _2110 : (isnan(_2110) ? 1.0 : min(_2110, 1.0));
    uint _2134 = _2097 | 1u;
    float _2145 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_894, _895, _896));
    float _2148 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_894, _895, _896));
    float _4301 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _4312 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2153 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * 0.3183098733425140380859375;
    float _2155 = (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * 0.3183098733425140380859375;
    float _2162 = ((cbLight._m0[_2114].x * _2120) * _2155) + ((cbLight._m0[_2124].x * _2130) * _2153);
    float _2163 = ((_2120 * cbLight._m0[_2114].y) * _2155) + ((_2130 * cbLight._m0[_2124].y) * _2153);
    float _2164 = ((_2120 * cbLight._m0[_2114].z) * _2155) + ((_2130 * cbLight._m0[_2124].z) * _2153);
    uvec4 _2168 = floatBitsToUint(cbLight._m0[_2097 + 12u]);
    bool _2170 = _2168.x == 0u;
    float _2181;
    float _2183;
    float _2185;
    if (_2170)
    {
        _2181 = _2162;
        _2183 = _2163;
        _2185 = _2164;
    }
    else
    {
        uint _2189 = _2097 + 6u;
        float _2205 = (dot(vec3(cbLight._m0[_2097 + 2u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2206 = _2205 * _2205;
        float _4323 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2207 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2208 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2181 = (((cbLight._m0[_2189].x * 0.3183098733425140380859375) * _2207) * _2208) + _2162;
        _2183 = (((cbLight._m0[_2189].y * 0.3183098733425140380859375) * _2207) * _2208) + _2163;
        _2185 = (((cbLight._m0[_2189].z * 0.3183098733425140380859375) * _2207) * _2208) + _2164;
    }
    bool _2188 = _2168.y == 0u;
    float _2226;
    float _2228;
    float _2230;
    if (_2188)
    {
        _2226 = _2181;
        _2228 = _2183;
        _2230 = _2185;
    }
    else
    {
        uint _2396 = _2097 + 7u;
        float _2412 = (dot(vec3(cbLight._m0[_2097 + 3u].xyz), vec3(_894, _895, _896)) * 0.5) + 0.5;
        float _2413 = _2412 * _2412;
        float _4339 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2414 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _2415 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2226 = (((cbLight._m0[_2396].x * 0.3183098733425140380859375) * _2414) * _2415) + _2181;
        _2228 = (((cbLight._m0[_2396].y * 0.3183098733425140380859375) * _2414) * _2415) + _2183;
        _2230 = (((cbLight._m0[_2396].z * 0.3183098733425140380859375) * _2414) * _2415) + _2185;
    }
    uint _2233 = _2097 + 8u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2097].w)) * _897) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2097].x + _973;
    float _2249 = cbLight._m0[_2097].y + _974;
    float _2250 = cbLight._m0[_2097].z + _975;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2097].xyz));
    float _4355 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _4366 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2262 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2263 = dot(vec3(_894, _895, _896), vec3(_2255, _2256, _2257));
    float _4377 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2097].xyz), vec3(_2255, _2256, _2257));
    float _4388 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2247 * _2247;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2283 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
    float _2284 = 0.959999978542327880859375 - _1040;
    float _2286 = 0.959999978542327880859375 - _1041;
    float _2287 = 0.959999978542327880859375 - _1042;
    float _2294 = 1.0 - _2247;
    float _2305 = (0.5 / (((_2262 * ((_2261 * _2294) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2294) + _2247) * _2261))) * _2261;
    float _4399 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    uint _2318 = _2097 + 9u;
    float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _897) * 0.949999988079071044921875);
    float _2330 = _2329 * _2329;
    float _2331 = cbLight._m0[_2134].x + _973;
    float _2332 = cbLight._m0[_2134].y + _974;
    float _2333 = cbLight._m0[_2134].z + _975;
    float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
    float _2338 = _2337 * _2331;
    float _2339 = _2337 * _2332;
    float _2340 = _2337 * _2333;
    float _2341 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2134].xyz));
    float _4410 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2344 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
    float _2345 = dot(vec3(_894, _895, _896), vec3(_2338, _2339, _2340));
    float _4421 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2348 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
    float _2349 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2338, _2339, _2340));
    float _4432 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = _2330 * _2330;
    float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
    float _2364 = exp2(log2(1.0 - (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0)))) * 5.0);
    float _2371 = 1.0 - _2330;
    float _2381 = (0.5 / (((_2262 * ((_2344 * _2371) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2371) + _2330) * _2344))) * _2344;
    float _4443 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2383 = (isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
    float _2393 = (((((_2364 * _2284) + _1043) * cbLight._m0[_2318].x) * _2383) * _2120) + (((((_2283 * _2284) + _1043) * cbLight._m0[_2233].x) * _2307) * _2130);
    float _2394 = (((((_2364 * _2286) + _1045) * cbLight._m0[_2318].y) * _2383) * _2120) + (((((_2283 * _2286) + _1045) * cbLight._m0[_2233].y) * _2307) * _2130);
    float _2395 = (((((_2364 * _2287) + _1046) * cbLight._m0[_2318].z) * _2383) * _2120) + (((((_2283 * _2287) + _1046) * cbLight._m0[_2233].z) * _2307) * _2130);
    float _2457;
    float _2459;
    float _2461;
    if (_2170)
    {
        _2457 = _2393;
        _2459 = _2394;
        _2461 = _2395;
    }
    else
    {
        uint _2463 = _2097 + 2u;
        uint _2467 = _2097 + 10u;
        float _2481 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2463].w)) * _897) * 0.949999988079071044921875);
        float _2482 = _2481 * _2481;
        float _2483 = cbLight._m0[_2463].x + _973;
        float _2484 = cbLight._m0[_2463].y + _974;
        float _2485 = cbLight._m0[_2463].z + _975;
        float _2489 = inversesqrt(dot(vec3(_2483, _2484, _2485), vec3(_2483, _2484, _2485)));
        float _2490 = _2489 * _2483;
        float _2491 = _2489 * _2484;
        float _2492 = _2489 * _2485;
        float _2493 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2463].xyz));
        float _4454 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _2497 = dot(vec3(_894, _895, _896), vec3(_2490, _2491, _2492));
        float _4465 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2500 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
        float _2501 = dot(vec3(cbLight._m0[_2463].xyz), vec3(_2490, _2491, _2492));
        float _4476 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2505 = _2482 * _2482;
        float _2509 = ((_2500 * _2500) * (_2505 + (-1.0))) + 1.0;
        float _2516 = exp2(log2(1.0 - (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) * 5.0);
        float _2523 = 1.0 - _2482;
        float _2533 = (0.5 / (((_2262 * ((_2496 * _2523) + _2482)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2523) + _2482) * _2496))) * _2496;
        float _4487 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2535 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * (_2505 / ((_2509 * _2509) * 3.141590118408203125));
        float _2536 = isnan(1.0) ? _2112 : (isnan(_2112) ? 1.0 : min(_2112, 1.0));
        _2457 = (((((_2516 * _2284) + _1043) * cbLight._m0[_2467].x) * _2535) * _2536) + _2393;
        _2459 = (((((_2516 * _2286) + _1045) * cbLight._m0[_2467].y) * _2535) * _2536) + _2394;
        _2461 = (((((_2516 * _2287) + _1046) * cbLight._m0[_2467].z) * _2535) * _2536) + _2395;
    }
    float _2571;
    float _2573;
    float _2575;
    if (_2188)
    {
        _2571 = _2457;
        _2573 = _2459;
        _2575 = _2461;
    }
    else
    {
        uint _2582 = _2097 + 3u;
        uint _2586 = _2097 + 11u;
        float _2600 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2582].w)) * _897) * 0.949999988079071044921875);
        float _2601 = _2600 * _2600;
        float _2602 = cbLight._m0[_2582].x + _973;
        float _2603 = cbLight._m0[_2582].y + _974;
        float _2604 = cbLight._m0[_2582].z + _975;
        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
        float _2609 = _2608 * _2602;
        float _2610 = _2608 * _2603;
        float _2611 = _2608 * _2604;
        float _2612 = dot(vec3(_894, _895, _896), vec3(cbLight._m0[_2582].xyz));
        float _4503 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _2616 = dot(vec3(_894, _895, _896), vec3(_2609, _2610, _2611));
        float _4514 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2619 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2620 = dot(vec3(cbLight._m0[_2582].xyz), vec3(_2609, _2610, _2611));
        float _4525 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
        float _2624 = _2601 * _2601;
        float _2628 = ((_2619 * _2619) * (_2624 + (-1.0))) + 1.0;
        float _2635 = exp2(log2(1.0 - (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0)))) * 5.0);
        float _2642 = 1.0 - _2601;
        float _2652 = (0.5 / (((_2262 * ((_2615 * _2642) + _2601)) + 9.9999999392252902907785028219223e-09) + (((_2262 * _2642) + _2601) * _2615))) * _2615;
        float _4536 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
        float _2654 = (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2624 / ((_2628 * _2628) * 3.141590118408203125));
        float _2655 = isnan(1.0) ? _2113 : (isnan(_2113) ? 1.0 : min(_2113, 1.0));
        _2571 = (((((_2635 * _2284) + _1043) * cbLight._m0[_2586].x) * _2654) * _2655) + _2457;
        _2573 = (((((_2635 * _2286) + _1045) * cbLight._m0[_2586].y) * _2654) * _2655) + _2459;
        _2575 = (((((_2635 * _2287) + _1046) * cbLight._m0[_2586].z) * _2654) * _2655) + _2461;
    }
    float _2790;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    float _2800;
    if (_2095.y == 0u)
    {
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2731 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2730;
        float _2732 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2730;
        float _2733 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2730;
        uvec4 _2745 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2746 = _2745.x;
        uint _2757 = uint((float(_2745.y) * floor(float(uint(cbSceneParam._m0[85u].y * _982) / _2746))) + floor(float(uint(cbSceneParam._m0[85u].x * _981) / _2746)));
        float _2767 = (log2(_2733 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2768 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        uint _2771 = uint(isnan(14.0) ? _2768 : (isnan(_2768) ? 14.0 : min(_2768, 14.0)));
        uvec4 _2776 = texelFetch(g_lightClusterGridBuffer, int(((_2771 << 2u) + (_2757 << 6u)) >> 2u));
        uint _2777 = _2776.x;
        uint _2778 = _2745.z;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        if (((((1u << ((_2778 >> 4u) & 15u)) + 4294967295u) & _2777) == 0u) || ((_2778 & 240u) == 0u))
        {
            _2878 = 0.0;
            _2880 = 0.0;
            _2882 = 0.0;
            _2884 = 0.0;
            _2886 = 0.0;
            _2888 = 0.0;
        }
        else
        {
            float _2879;
            float _2881;
            float _2883;
            float _2885;
            float _2887;
            float _2889;
            float _3023 = 0.0;
            float _3024 = 0.0;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            uint _3029 = 0u;
            uint _3038;
            bool _3039;
            for (;;)
            {
                _3038 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                _3039 = _3038 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3039)
                {
                    frontier_phi_61_pred = _3023;
                    frontier_phi_61_pred_1 = _3028;
                    frontier_phi_61_pred_2 = _3027;
                    frontier_phi_61_pred_3 = _3026;
                    frontier_phi_61_pred_4 = _3025;
                    frontier_phi_61_pred_5 = _3024;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3023;
                    _3148 = _3024;
                    _3149 = _3025;
                    _3150 = _3026;
                    _3151 = _3027;
                    _3152 = _3028;
                    _3153 = _3038;
                    float _3079;
                    float _3080;
                    float _3081;
                    float _3082;
                    float _3083;
                    float _3084;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3029 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _2731;
                        float _3214 = _3173.y - _2732;
                        float _3215 = _3173.z - _2733;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_1000, _1003, _1006), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4562 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _2731;
                        float _3249 = (-0.0) - _2732;
                        float _3250 = (-0.0) - _2733;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3265 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _1075;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_1000, _1003, _1006), vec3(_3255, _3256, _3257));
                        float _4578 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                        float _3290 = dot(vec3(_1000, _1003, _1006), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4589 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3233 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3223) + _3299;
                        float _4600 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4611 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3297 * _3297) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3082 = (_3244 * _3192.x) + _3150;
                        _3083 = (_3244 * _3192.y) + _3151;
                        _3084 = (_3244 * _3192.z) + _3152;
                        _3079 = (_3325 * _3209.x) + _3147;
                        _3080 = (_3325 * _3209.y) + _3148;
                        _3081 = (_3325 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3079;
                            _3148 = _3080;
                            _3149 = _3081;
                            _3150 = _3082;
                            _3151 = _3083;
                            _3152 = _3084;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_61_pred = _3079;
                    frontier_phi_61_pred_1 = _3084;
                    frontier_phi_61_pred_2 = _3083;
                    frontier_phi_61_pred_3 = _3082;
                    frontier_phi_61_pred_4 = _3081;
                    frontier_phi_61_pred_5 = _3080;
                }
                _2879 = frontier_phi_61_pred;
                _2889 = frontier_phi_61_pred_1;
                _2887 = frontier_phi_61_pred_2;
                _2885 = frontier_phi_61_pred_3;
                _2883 = frontier_phi_61_pred_4;
                _2881 = frontier_phi_61_pred_5;
                uint _3030 = _3029 + 1u;
                if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3023 = _2879;
                    _3024 = _2881;
                    _3025 = _2883;
                    _3026 = _2885;
                    _3027 = _2887;
                    _3028 = _2889;
                    _3029 = _3030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2878 = _2879;
            _2880 = _2881;
            _2882 = _2883;
            _2884 = _2885;
            _2886 = _2887;
            _2888 = _2889;
        }
        uvec4 _2892 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2893 = _2892.z;
        uint _2895 = (_2893 >> 8u) & 15u;
        float _2991;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        if (((4294967295u << _2895) & _2777) == 0u)
        {
            _2991 = _2878;
            _2993 = _2880;
            _2995 = _2882;
            _2997 = _2884;
            _2999 = _2886;
            _3001 = _2888;
        }
        else
        {
            float _3016 = inversesqrt(dot(vec3(_2731, _2732, _2733), vec3(_2731, _2732, _2733)));
            float _3017 = _3016 * _2731;
            float _3018 = _3016 * _2732;
            float _3019 = _3016 * _2733;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2895 < ((_2893 >> 12u) & 15u))
            {
                float _2992;
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3130 = _2878;
                float _3131 = _2880;
                float _3132 = _2882;
                float _3133 = _2884;
                float _3134 = _2886;
                float _3135 = _2888;
                uint _3136 = _2895;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2771 << 5u) + (_2757 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3146)
                    {
                        frontier_phi_67_pred = _3133;
                        frontier_phi_67_pred_1 = _3134;
                        frontier_phi_67_pred_2 = _3135;
                        frontier_phi_67_pred_3 = _3132;
                        frontier_phi_67_pred_4 = _3131;
                        frontier_phi_67_pred_5 = _3130;
                    }
                    else
                    {
                        float _3330;
                        float _3331;
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3343 = _3130;
                        float _3344 = _3131;
                        float _3345 = _3132;
                        float _3346 = _3133;
                        float _3347 = _3134;
                        float _3348 = _3135;
                        uint _3349 = _3145;
                        uint _3350;
                        vec4 _3375;
                        float _3376;
                        vec4 _3391;
                        vec3 _3403;
                        vec4 _3418;
                        vec4 _3433;
                        float _3479;
                        bool _3480;
                        for (;;)
                        {
                            uint _3360 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3349));
                            _3350 = (_3349 + 4294967295u) & _3349;
                            uint _3362 = _3360 * 40u;
                            _3375 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3362)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3362 + 3u)).x));
                            _3376 = _3375.w;
                            uint _3378 = (_3360 * 40u) + 4u;
                            _3391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3378 + 3u)).x));
                            uint _3393 = (_3360 * 40u) + 8u;
                            _3403 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x));
                            uint _3405 = (_3360 * 40u) + 16u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3420 = (_3360 * 40u) + 20u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3360 * 40u) + 24u;
                            vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 3u)).x));
                            uint _3454 = (_3360 * 40u) + 28u;
                            vec4 _3467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3454 + 3u)).x));
                            _3479 = fma(_2733, _3467.z, fma(_2732, _3467.y, _3467.x * _2731)) + _3467.w;
                            _3480 = !((fma(_2733, _3448.z, fma(_2732, _3448.y, _3448.x * _2731)) + _3448.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3480)
                            {
                                float _3507 = _3375.x - _2731;
                                float _3508 = _3375.y - _2732;
                                float _3509 = _3375.z - _2733;
                                float _3510 = dot(vec3(_3507, _3508, _3509), vec3(_3507, _3508, _3509));
                                float _3513 = inversesqrt(_3510);
                                float _3514 = _3513 * _3507;
                                float _3515 = _3513 * _3508;
                                float _3516 = _3513 * _3509;
                                float _3520 = 1.0 - (_3510 / (_3376 * _3376));
                                float _4622 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                                float _3525 = sqrt(_3510) * _3391.w;
                                float _3527 = 1.39999997615814208984375 / (_3525 + 1.39999997615814208984375);
                                float _3528 = _3527 * _3527;
                                float _3531 = ((1.0 - _3528) * dot(vec3(_3514, _3515, _3516), vec3(_1000, _1003, _1006))) + _3528;
                                float _3534 = _3525 * _3525;
                                float _3538 = (fma(_2733, _3418.z, fma(_2732, _3418.y, _3418.x * _2731)) + _3418.w) / _3479;
                                float _3539 = (fma(_2733, _3433.z, fma(_2732, _3433.y, _3433.x * _2731)) + _3433.w) / _3479;
                                float _3543 = 1.0 - dot(vec2(_3538, _3539), vec2(_3538, _3539));
                                float _4638 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                                float _3544 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
                                float _3545 = _3544 * (((isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0))) * _3521) / ((_3534 * 0.699999988079071044921875) + 1.0));
                                float _3557 = exp2(log2(1.0 / ((_3534 * 3.5) + 5.0)) * 0.25);
                                float _3558 = 1.0 - _1075;
                                float _3565 = sqrt(1.0 - ((1.0 - (_3558 * _3558)) * (1.0 - (_3557 * _3557))));
                                float _3566 = _3565 * _3565;
                                float _3567 = _3566 * _3566;
                                float _3568 = _3514 - _3017;
                                float _3569 = _3515 - _3018;
                                float _3570 = _3516 - _3019;
                                float _3574 = inversesqrt(dot(vec3(_3568, _3569, _3570), vec3(_3568, _3569, _3570)));
                                float _3578 = dot(vec3(_1000, _1003, _1006), vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019));
                                float _4649 = isnan(0.0) ? _3578 : (isnan(_3578) ? 0.0 : max(_3578, 0.0));
                                float _3581 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                                float _3582 = dot(vec3(_1000, _1003, _1006), vec3(_3574 * _3568, _3574 * _3569, _3574 * _3570));
                                float _4660 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                                float _3585 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                                float _3589 = ((_3585 * _3585) * (_3567 + (-1.0))) + 1.0;
                                float _3590 = _3527 * _3566;
                                float _3591 = _3590 * _3590;
                                float _3597 = ((1.0 - _3591) * dot(vec3(_1000, _1003, _1006), vec3(_3514, _3515, _3516))) + _3591;
                                float _4671 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3599 = 1.0 - _3566;
                                float _3609 = (0.5 / (((_3598 * ((_3581 * _3599) + _3566)) + 9.9999999392252902907785028219223e-09) + (((_3598 * _3599) + _3566) * _3581))) * _3598;
                                float _4682 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                                float _3619 = (_3544 * _3521) * (((_3567 * 3.1415927410125732421875) * (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) / ((_3589 * _3589) * ((_3534 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3619 * _3403.x;
                                frontier_phi_73_pred_1 = _3619 * _3403.y;
                                frontier_phi_73_pred_2 = _3545 * _3391.z;
                                frontier_phi_73_pred_3 = _3545 * _3391.y;
                                frontier_phi_73_pred_4 = _3545 * _3391.x;
                                frontier_phi_73_pred_5 = _3619 * _3403.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3623 = frontier_phi_73_pred;
                            _3624 = frontier_phi_73_pred_1;
                            _3628 = frontier_phi_73_pred_2;
                            _3627 = frontier_phi_73_pred_3;
                            _3626 = frontier_phi_73_pred_4;
                            _3625 = frontier_phi_73_pred_5;
                            _3333 = _3626 + _3346;
                            _3334 = _3627 + _3347;
                            _3335 = _3628 + _3348;
                            _3330 = _3623 + _3343;
                            _3331 = _3624 + _3344;
                            _3332 = _3625 + _3345;
                            if (_3350 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3343 = _3330;
                                _3344 = _3331;
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3350;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3333;
                        frontier_phi_67_pred_1 = _3334;
                        frontier_phi_67_pred_2 = _3335;
                        frontier_phi_67_pred_3 = _3332;
                        frontier_phi_67_pred_4 = _3331;
                        frontier_phi_67_pred_5 = _3330;
                    }
                    _2998 = frontier_phi_67_pred;
                    _3000 = frontier_phi_67_pred_1;
                    _3002 = frontier_phi_67_pred_2;
                    _2996 = frontier_phi_67_pred_3;
                    _2994 = frontier_phi_67_pred_4;
                    _2992 = frontier_phi_67_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2992;
                        _3131 = _2994;
                        _3132 = _2996;
                        _3133 = _2998;
                        _3134 = _3000;
                        _3135 = _3002;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3000;
                frontier_phi_55_56_ladder_1 = _3002;
                frontier_phi_55_56_ladder_2 = _2998;
                frontier_phi_55_56_ladder_3 = _2996;
                frontier_phi_55_56_ladder_4 = _2994;
                frontier_phi_55_56_ladder_5 = _2992;
            }
            else
            {
                frontier_phi_55_56_ladder = _2886;
                frontier_phi_55_56_ladder_1 = _2888;
                frontier_phi_55_56_ladder_2 = _2884;
                frontier_phi_55_56_ladder_3 = _2882;
                frontier_phi_55_56_ladder_4 = _2880;
                frontier_phi_55_56_ladder_5 = _2878;
            }
            _2991 = frontier_phi_55_56_ladder_5;
            _2993 = frontier_phi_55_56_ladder_4;
            _2995 = frontier_phi_55_56_ladder_3;
            _2997 = frontier_phi_55_56_ladder_2;
            _2999 = frontier_phi_55_56_ladder;
            _3001 = frontier_phi_55_56_ladder_1;
        }
        float _3006 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2790 = (_3006 * _2997) + _2226;
        _2792 = (_3006 * _2999) + _2228;
        _2794 = (_3006 * _3001) + _2230;
        _2796 = ((_2991 * _1043) * _3006) + _2571;
        _2798 = ((_2993 * _1045) * _3006) + _2573;
        _2800 = ((_2995 * _1046) * _3006) + _2575;
    }
    else
    {
        _2790 = _2226;
        _2792 = _2228;
        _2794 = _2230;
        _2796 = _2571;
        _2798 = _2573;
        _2800 = _2575;
    }
    float _4698 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4709 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4720 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    uint _2820 = _252 + 6u;
    float _2828 = _981 / cbSceneParam._m0[86u].x;
    float _2829 = _982 / cbSceneParam._m0[86u].y;
    vec4 _2843 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, (log2((isnan(cbSceneParam._m0[77u].w) ? _916 : (isnan(_916) ? cbSceneParam._m0[77u].w : min(_916, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2845 = _2843.x;
    float _2846 = _2843.y;
    float _2847 = _2843.z;
    float _2848 = _2843.w;
    float _2941;
    float _2943;
    float _2945;
    float _2947;
    if (_916 > cbSceneParam._m0[78u].w)
    {
        float _2903 = isnan(_916) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _916 : min(cbSceneParam._m0[80u].w, _916));
        float _2904 = _2903 / _916;
        float _2915 = _2904 * _966;
        float _2916 = _967 * _2904;
        float _2917 = (-0.0) - _2916;
        float _2919 = _2904 * _968;
        float _2921 = (cbSceneParam._m0[77u].w * _2917) / _2903;
        float _2922 = _2921 + cbSceneParam._m0[79u].w;
        float _2923 = cbSceneParam._m0[79u].w - _2916;
        float _2929 = sqrt(((_2915 * _2915) + (_2916 * _2916)) + (_2919 * _2919));
        float _2932 = (1.0 - (cbSceneParam._m0[77u].w / _2903)) * _2929;
        float _2937 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2939 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3092;
        if (abs((_2917 - _2921) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3092 = ((((_2922 > 0.0) ? exp2(_2937 * _2922) : (2.0 - exp2(_2939 * _2922))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2932;
        }
        else
        {
            float _3052 = 1.0 / cbSceneParam._m0[80u].x;
            float _3053 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : max(_2922, _2923));
            float _3054 = isnan(_2923) ? _2922 : (isnan(_2922) ? _2923 : min(_2922, _2923));
            float _3063 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : min(_3053, 0.0));
            float _3064 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : min(_3054, 0.0));
            _3092 = ((abs(_2929 / _2917) * cbSceneParam._m0[80u].y) * ((((_3063 - _3064) * 2.0) - ((exp2(_2937 * (isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0)))) - exp2(_2937 * (isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))))) * _3052)) - ((exp2(_2939 * _3063) - exp2(_2939 * _3064)) * _3052))) + (_2932 * cbSceneParam._m0[80u].z);
        }
        vec4 _3094 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2828, _2829, 1.0), 0.0);
        float _3103 = exp2((_3092 * (-1.44269502162933349609375)) * (1.0 - _3094.w));
        float _3104 = log2(_3103);
        float _3120 = log2(_2848);
        _2941 = (exp2(_3120 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].x)) * _3094.x) / cbSceneParam._m0[78u].x)) + _2845;
        _2943 = (exp2(_3120 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].y)) * _3094.y) / cbSceneParam._m0[78u].y)) + _2846;
        _2945 = (exp2(_3120 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3104 * cbSceneParam._m0[78u].z)) * _3094.z) / cbSceneParam._m0[78u].z)) + _2847;
        _2947 = _3103 * _2848;
    }
    else
    {
        _2941 = _2845;
        _2943 = _2846;
        _2945 = _2847;
        _2947 = _2848;
    }
    float _2959 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2960 = _2959 == 3.0;
    float _2961 = log2(_2947);
    float _2968 = exp2(_2961 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2790 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1059))) + ((_2796 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _2969 = exp2(_2961 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2792 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1059))) + ((_2798 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _2970 = exp2(_2961 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2794 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1059))) + ((_2800 + ((isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))) * _1865)) * cbPerFrame._m0[3u].x));
    float _2979 = (_2959 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2979 * (_2960 ? _2968 : (_2968 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.y = _2979 * (_2960 ? _2969 : (_2969 + (cbSceneParam._m0[72u].w * _2943)));
    SV_Target.z = _2979 * (_2960 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2945)));
    SV_Target.w = cbInstanceData._m0[_2820].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2820].w;
}


