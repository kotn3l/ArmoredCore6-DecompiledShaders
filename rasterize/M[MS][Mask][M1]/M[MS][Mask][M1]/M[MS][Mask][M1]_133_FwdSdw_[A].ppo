#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1598;
float _4258;
float _4259;
float _4260;
float _4261;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _284 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4270 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _4281 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _4292 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    uint _294 = uint(roundEven(NORMAL.w)) * 13u;
    uint _299 = _294 + 1u;
    uint _303 = _294 + 2u;
    float _312 = sqrt(((cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x) + (cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x)) + (cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x));
    float _313 = _312 * TEXCOORD.z;
    float _314 = _312 * TEXCOORD.w;
    vec4 _327 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _313) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _314) + cbTextureTilingScale._m0[13u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _356 = _351.x * cbMtdParam._m0[11u].x;
    float _357 = _351.y * cbMtdParam._m0[11u].y;
    float _358 = _351.z * cbMtdParam._m0[11u].z;
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _313) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _314) + cbTextureTilingScale._m0[5u].w));
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _431 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _433 = _431.x;
    float _445 = dot(vec4(_433, _431.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _462 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _396.x) * 2.0) - ((((_433 - _445) * cbMtdParam._m0[23u].w) + _445) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4303 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _470 = (_463 * ((_377.x * cbMtdParam._m0[12u].x) - _356)) + _356;
    float _471 = (_463 * ((_377.y * cbMtdParam._m0[12u].y) - _357)) + _357;
    float _472 = (_463 * ((_377.z * cbMtdParam._m0[12u].z) - _358)) + _358;
    vec4 _489 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _313) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _314) + cbTextureTilingScale._m0[3u].w));
    vec4 _509 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _511 = _509.x;
    float _521 = dot(vec4(_511, _509.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _535 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _396.y) * 2.0) - ((((_511 - _521) * cbMtdParam._m0[23u].w) + _521) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4314 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _543 = (_536 * ((_489.x * cbMtdParam._m0[13u].x) - _470)) + _470;
    float _544 = (_536 * ((_489.y * cbMtdParam._m0[13u].y) - _471)) + _471;
    float _545 = (_536 * ((_489.z * cbMtdParam._m0[13u].z) - _472)) + _472;
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _313) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _314) + cbTextureTilingScale._m0[24u].w));
    vec4 _581 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _583 = _581.x;
    float _593 = dot(vec4(_583, _581.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _605 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _396.z) * 2.0) - ((((_583 - _593) * cbMtdParam._m0[23u].w) + _593) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4325 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _606 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _613 = (_606 * ((_564.x * cbMtdParam._m0[14u].x) - _543)) + _543;
    float _614 = (_606 * ((_564.y * cbMtdParam._m0[14u].y) - _544)) + _544;
    float _615 = (_606 * ((_564.z * cbMtdParam._m0[14u].z) - _545)) + _545;
    float _619 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _327.x) * _613;
    float _622 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _327.y) * _614;
    float _625 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _327.z) * _615;
    float _632 = ((_613 - _619) * (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) + _619;
    float _633 = ((_614 - _622) * (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) + _622;
    float _634 = ((_615 - _625) * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) + _625;
    vec4 _652 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _313) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _314) + cbTextureTilingScale._m0[14u].w));
    vec4 _671 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _313) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _314) + cbTextureTilingScale._m0[20u].w));
    vec4 _694 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _313) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _314) + cbTextureTilingScale._m0[4u].w));
    vec4 _711 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _713 = _711.x;
    float _714 = _711.y;
    float _715 = _711.z;
    float _722 = ((_694.x - _713) * _463) + _713;
    float _723 = ((_694.y - _714) * _463) + _714;
    float _724 = ((_694.z - _715) * _463) + _715;
    vec4 _736 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _313) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _314) + cbTextureTilingScale._m0[2u].w));
    float _747 = ((_736.x - _722) * _536) + _722;
    float _748 = ((_736.y - _723) * _536) + _723;
    float _749 = ((_736.z - _724) * _536) + _724;
    vec4 _761 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _313) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _314) + cbTextureTilingScale._m0[23u].w));
    float _774 = ((_761.z - _749) * _606) + _749;
    float _777 = ((((_761.x - _747) * _606) + _747) * 2.0) + (-1.0);
    float _778 = ((((_761.y - _748) * _606) + _748) * 2.0) + (-1.0);
    float _779 = dot(vec2(_777, _778), vec2(_777, _778));
    float _4336 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _784 = sqrt(1.0 - (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))));
    vec4 _798 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _823 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _313) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _314) + cbTextureTilingScale._m0[11u].w));
    float _825 = _823.x;
    float _826 = 1.0 - _825;
    float _841 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_825 - _826) * cbMtdParam._m0[24u].z) + _826) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4347 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _842 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _849 = (_842 * ((_652.x * cbMtdParam._m0[18u].x) - _632)) + _632;
    float _850 = (_842 * ((_652.y * cbMtdParam._m0[18u].y) - _633)) + _633;
    float _851 = (_842 * ((_652.z * cbMtdParam._m0[18u].z) - _634)) + _634;
    vec4 _877 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _879 = _877.x;
    float _897 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _313) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _314) + cbTextureTilingScale._m0[9u].w)).x - _879) * _463) + _879;
    float _914 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _313) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _314) + cbTextureTilingScale._m0[21u].w)).x - _897) * _536) + _897;
    float _932 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _313) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _314) + cbTextureTilingScale._m0[10u].w)).x - _914) * _606) + _914;
    float _936 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _932) * cbMtdParam._m0[19u].z) + _932;
    float _938 = _936 - (_936 * _842);
    float _943 = (((_671.z - _774) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _774;
    float _947 = ((_798.z - _943) * cbMtdParam._m0[19u].w) + _943;
    vec4 _960 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _313) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _314) + cbTextureTilingScale._m0[15u].w));
    float _967 = (_960.x * 2.0) + (-1.0);
    float _968 = (_960.y * 2.0) + (-1.0);
    float _969 = dot(vec2(_967, _968), vec2(_967, _968));
    float _4358 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _977 = (_842 * (_960.z - _947)) + _947;
    float _986 = (_777 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_671.x * 2.0) + (-1.0)))) + (((_798.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _987 = (_778 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_671.y * 2.0) + (-1.0)))) + (((_798.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _999 = (((_967 - _986) + (cbMtdParam._m0[21u].x * _986)) * _842) + _986;
    float _1000 = (((_968 - _987) + (cbMtdParam._m0[21u].x * _987)) * _842) + _987;
    float _1001 = (_842 * (sqrt(1.0 - (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) - _784)) + _784;
    float _1005 = cbMtdParam._m0[22u].x + _798.w;
    float _1008 = fma(_1001, _260 * NORMAL.x, fma(_1000, _267 * TANGENT.x, (_253 * _245) * _999));
    float _1011 = fma(_1001, _260 * NORMAL.y, fma(_1000, _267 * TANGENT.y, (_253 * _246) * _999));
    float _1014 = fma(_1001, _260 * NORMAL.z, fma(_1000, _267 * TANGENT.z, (_253 * _247) * _999));
    float _1018 = inversesqrt(dot(vec3(_1008, _1011, _1014), vec3(_1008, _1011, _1014)));
    float _1019 = _1018 * _1008;
    float _1020 = _1018 * _1011;
    float _1021 = _1018 * _1014;
    float _4369 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _1022 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
    float _4391 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4402 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4413 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    float _4424 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _1027 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _1041 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1081 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1091 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1081);
    float _1092 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1081);
    float _1093 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1081);
    float _1097 = inversesqrt(dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093)));
    float _1098 = _1091 * _1097;
    float _1099 = _1092 * _1097;
    float _1100 = _1093 * _1097;
    vec4 _1105 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1107 = _1105.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1279 = sqrt(((_1091 * _1091) + (_1092 * _1092)) + (_1093 * _1093));
        float _1285 = (cbMatDynParam._m0[5u].x * _1279) + cbMatDynParam._m0[5u].y;
        float _4435 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1290 = (cbMatDynParam._m0[5u].z * _1279) + cbMatDynParam._m0[5u].w;
        float _4446 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) - _1286)) + _1286) < ((_1107 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1118 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1119 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1137 = fma(_1021, cbSceneParam._m0[5u].z, fma(_1020, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1019));
    float _1140 = fma(_1021, cbSceneParam._m0[6u].z, fma(_1020, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1019));
    float _1143 = fma(_1021, cbSceneParam._m0[7u].z, fma(_1020, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1019));
    uint _1156 = _294 + 9u;
    uint _1157 = _1156 + uint(cbMatDynParam._m0[0u].w);
    float _1163 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0)))) * cbInstanceData._m0[_1157].x;
    float _1164 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * cbInstanceData._m0[_1157].y;
    float _1165 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * cbInstanceData._m0[_1157].z;
    float _4457 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1166 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
    float _4468 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
    float _1167 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1168 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _1169 = 1.0 - _1027;
    float _1170 = _1166 * _1169;
    float _1171 = _1167 * _1169;
    float _1172 = _1168 * _1169;
    float _1177 = (_1166 + (-0.039999999105930328369140625)) * _1027;
    float _1178 = (_1167 + (-0.039999999105930328369140625)) * _1027;
    float _1179 = (_1168 + (-0.039999999105930328369140625)) * _1027;
    float _1180 = _1177 + 0.039999999105930328369140625;
    float _1182 = _1178 + 0.039999999105930328369140625;
    float _1183 = _1179 + 0.039999999105930328369140625;
    vec4 _1192 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1118, cbSceneParam._m0[86u].y * _1119));
    float _1196 = ((isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))) * TEXCOORD_5.w) * _1192.x;
    float _1197 = dot(vec3(_1019, _1020, _1021), vec3(_1098, _1099, _1100));
    float _1200 = _1197 * 2.0;
    float _1204 = (_1200 * _1019) - _1098;
    float _1205 = (_1200 * _1020) - _1099;
    float _1206 = (_1200 * _1021) - _1100;
    float _1210 = abs(dot(vec3(_1098, _1099, _1100), vec3(_1019, _1020, _1021)));
    float _4490 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _1212 = sqrt(_1022);
    float _1225 = exp2((_1212 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1212 * 3.0));
    float _1231 = (1.0 - _1225) * ((_1212 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1232 = _1225 * _1212;
    float _1260 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1264 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1268 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1597;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1322 = fma(_1268, cbModelParam._m0[26u].z, fma(_1264, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1260));
        float _1326 = fma(_1268, cbModelParam._m0[27u].z, fma(_1264, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1260));
        float _1330 = fma(_1268, cbModelParam._m0[28u].z, fma(_1264, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1260));
        float _1355 = _1260 + _1019;
        float _1356 = _1264 + _1020;
        float _1357 = _1268 + _1021;
        float _1367 = fma(_1357, cbModelParam._m0[26u].z, fma(_1356, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1355)) - _1322;
        float _1368 = fma(_1357, cbModelParam._m0[27u].z, fma(_1356, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1355)) - _1326;
        float _1369 = fma(_1357, cbModelParam._m0[28u].z, fma(_1356, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1355)) - _1330;
        float _1373 = inversesqrt(dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369)));
        float _1386 = ((_1373 * _1367) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1322 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1387 = ((_1373 * _1368) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1326 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1388 = ((_1373 * _1369) / cbModelParam._m0[34u].z) + ((((((_1330 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1386, _1387, _1388), 0.0);
        float _1425 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1391.x + (-0.5));
        float _1427 = _1425 * (_1391.y + (-0.5));
        float _1428 = _1425 * (_1391.z + (-0.5));
        float _1435 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1398.x + (-0.5));
        float _1437 = _1435 * (_1398.y + (-0.5));
        float _1438 = _1435 * (_1398.z + (-0.5));
        float _1445 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1405.x + (-0.5));
        float _1447 = _1445 * (_1405.y + (-0.5));
        float _1448 = _1445 * (_1405.z + (-0.5));
        float _1455 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1412.x + (-0.5));
        float _1457 = _1455 * (_1412.y + (-0.5));
        float _1458 = _1455 * (_1412.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1479 = (dot(vec3(_1019, _1020, _1021), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _4516 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1489 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _4527 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1490 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
        float _1491 = _1490 * 2.0;
        float _1495 = (1.0 - _1490) / (_1490 + 1.0);
        float _4538 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1505 = ((((1.0 - _1496) * (_1491 + 2.0)) * exp2(log2(isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0))) * (_1491 + 1.0))) + _1496) * _1459;
        float _1506 = _1427 * 0.5;
        float _1507 = _1437 * 0.5;
        float _1508 = _1447 * 0.5;
        float _1509 = dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508));
        float _1514 = (_1509 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1509);
        float _1522 = (dot(vec3(_1019, _1020, _1021), vec3(_1514 * _1506, _1514 * _1507, _1514 * _1508)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1531 = sqrt(((_1507 * _1507) + (_1506 * _1506)) + (_1508 * _1508)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1532 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1533 = _1532 * 2.0;
        float _1537 = (1.0 - _1532) / (_1532 + 1.0);
        float _4571 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1547 = ((((1.0 - _1538) * (_1533 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1533 + 1.0))) + _1538) * _1460;
        float _1548 = _1428 * 0.5;
        float _1549 = _1438 * 0.5;
        float _1550 = _1448 * 0.5;
        float _1551 = dot(vec3(_1548, _1549, _1550), vec3(_1548, _1549, _1550));
        float _1556 = (_1551 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1551);
        float _1564 = (dot(vec3(_1019, _1020, _1021), vec3(_1556 * _1548, _1556 * _1549, _1556 * _1550)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1573 = sqrt(((_1549 * _1549) + (_1548 * _1548)) + (_1550 * _1550)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1575 = _1574 * 2.0;
        float _1579 = (1.0 - _1574) / (_1574 + 1.0);
        float _4604 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1589 = ((((1.0 - _1580) * (_1575 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1575 + 1.0))) + _1580) * _1461;
        _1597 = _1428;
        _1599 = _1427;
        _1600 = _1426;
        _1601 = _1438;
        _1602 = _1437;
        _1603 = _1436;
        _1604 = _1448;
        _1605 = _1447;
        _1606 = _1446;
        _1607 = _1461;
        _1608 = _1460;
        _1609 = _1459;
        _1610 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)));
        _1611 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0)));
        _1612 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0)));
    }
    else
    {
        _1597 = _1598;
        _1599 = _1598;
        _1600 = _1598;
        _1601 = _1598;
        _1602 = _1598;
        _1603 = _1598;
        _1604 = _1598;
        _1605 = _1598;
        _1606 = _1598;
        _1607 = _1598;
        _1608 = _1598;
        _1609 = _1598;
        _1610 = 0.0;
        _1611 = 0.0;
        _1612 = 0.0;
    }
    float _1907;
    float _1908;
    float _1909;
    float _1910;
    float _1911;
    float _1912;
    float _1913;
    float _1914;
    float _1915;
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1638 = fma(_1268, cbModelParam._m0[30u].z, fma(_1264, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260));
        float _1642 = fma(_1268, cbModelParam._m0[31u].z, fma(_1264, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260));
        float _1646 = fma(_1268, cbModelParam._m0[32u].z, fma(_1264, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260));
        float _1669 = _1260 + _1019;
        float _1670 = _1264 + _1020;
        float _1671 = _1268 + _1021;
        float _1681 = fma(_1671, cbModelParam._m0[30u].z, fma(_1670, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1669)) - _1638;
        float _1682 = fma(_1671, cbModelParam._m0[31u].z, fma(_1670, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1669)) - _1642;
        float _1683 = fma(_1671, cbModelParam._m0[32u].z, fma(_1670, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1669)) - _1646;
        float _1687 = inversesqrt(dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683)));
        float _1700 = ((_1687 * _1681) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1638 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1701 = ((_1687 * _1682) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1642 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1702 = ((_1687 * _1683) / cbModelParam._m0[35u].z) + ((((((_1646 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1704 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1711 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1718 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        vec4 _1725 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1700, _1701, _1702), 0.0);
        float _1737 = exp2((_1704.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1704.x + (-0.5));
        float _1739 = _1737 * (_1704.y + (-0.5));
        float _1740 = _1737 * (_1704.z + (-0.5));
        float _1747 = exp2((_1711.w + (-0.5)) * 20.0) * 2.0;
        float _1748 = _1747 * (_1711.x + (-0.5));
        float _1749 = _1747 * (_1711.y + (-0.5));
        float _1750 = _1747 * (_1711.z + (-0.5));
        float _1757 = exp2((_1718.w + (-0.5)) * 20.0) * 2.0;
        float _1758 = _1757 * (_1718.x + (-0.5));
        float _1759 = _1757 * (_1718.y + (-0.5));
        float _1760 = _1757 * (_1718.z + (-0.5));
        float _1767 = exp2((_1725.w + (-0.5)) * 20.0) * 2.0;
        float _1768 = _1767 * (_1725.x + (-0.5));
        float _1769 = _1767 * (_1725.y + (-0.5));
        float _1770 = _1767 * (_1725.z + (-0.5));
        float _1771 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1772 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1774 = _1738 * 0.5;
        float _1775 = _1748 * 0.5;
        float _1776 = _1758 * 0.5;
        float _1777 = dot(vec3(_1774, _1775, _1776), vec3(_1774, _1775, _1776));
        float _1782 = (_1777 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1777);
        float _1790 = (dot(vec3(_1019, _1020, _1021), vec3(_1782 * _1774, _1782 * _1775, _1782 * _1776)) + 1.0) * 0.5;
        float _4645 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1799 = sqrt(((_1775 * _1775) + (_1774 * _1774)) + (_1776 * _1776)) / (_1771 + 9.9999997473787516355514526367188e-06);
        float _4656 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
        float _1801 = _1800 * 2.0;
        float _1805 = (1.0 - _1800) / (_1800 + 1.0);
        float _4667 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1815 = ((((1.0 - _1806) * (_1801 + 2.0)) * exp2(log2(isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_1801 + 1.0))) + _1806) * _1771;
        float _1816 = _1739 * 0.5;
        float _1817 = _1749 * 0.5;
        float _1818 = _1759 * 0.5;
        float _1819 = dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818));
        float _1824 = (_1819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1819);
        float _1832 = (dot(vec3(_1019, _1020, _1021), vec3(_1824 * _1816, _1824 * _1817, _1824 * _1818)) + 1.0) * 0.5;
        float _4678 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1841 = sqrt(((_1817 * _1817) + (_1816 * _1816)) + (_1818 * _1818)) / (_1772 + 9.9999997473787516355514526367188e-06);
        float _4689 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1842 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _1843 = _1842 * 2.0;
        float _1847 = (1.0 - _1842) / (_1842 + 1.0);
        float _4700 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _1857 = ((((1.0 - _1848) * (_1843 + 2.0)) * exp2(log2(isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0))) * (_1843 + 1.0))) + _1848) * _1772;
        float _1858 = _1740 * 0.5;
        float _1859 = _1750 * 0.5;
        float _1860 = _1760 * 0.5;
        float _1861 = dot(vec3(_1858, _1859, _1860), vec3(_1858, _1859, _1860));
        float _1866 = (_1861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1861);
        float _1874 = (dot(vec3(_1019, _1020, _1021), vec3(_1866 * _1858, _1866 * _1859, _1866 * _1860)) + 1.0) * 0.5;
        float _4711 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1883 = sqrt(((_1859 * _1859) + (_1858 * _1858)) + (_1860 * _1860)) / (_1773 + 9.9999997473787516355514526367188e-06);
        float _4722 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1884 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
        float _1885 = _1884 * 2.0;
        float _1889 = (1.0 - _1884) / (_1884 + 1.0);
        float _4733 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1890 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1899 = ((((1.0 - _1890) * (_1885 + 2.0)) * exp2(log2(isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_1885 + 1.0))) + _1890) * _1773;
        _1907 = _1740;
        _1908 = _1739;
        _1909 = _1738;
        _1910 = _1750;
        _1911 = _1749;
        _1912 = _1748;
        _1913 = _1760;
        _1914 = _1759;
        _1915 = _1758;
        _1916 = _1773;
        _1917 = _1772;
        _1918 = _1771;
        _1919 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0)));
        _1920 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)));
        _1921 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)));
    }
    else
    {
        _1907 = _1598;
        _1908 = _1598;
        _1909 = _1598;
        _1910 = _1598;
        _1911 = _1598;
        _1912 = _1598;
        _1913 = _1598;
        _1914 = _1598;
        _1915 = _1598;
        _1916 = _1598;
        _1917 = _1598;
        _1918 = _1598;
        _1919 = 0.0;
        _1920 = 0.0;
        _1921 = 0.0;
    }
    float _1931 = (cbModelParam._m0[1u].x * (_1919 - _1610)) + _1610;
    float _1932 = (cbModelParam._m0[1u].x * (_1920 - _1611)) + _1611;
    float _1933 = (cbModelParam._m0[1u].x * (_1921 - _1612)) + _1612;
    float _1954 = fma(_1933, cbSceneParam._m0[89u].z, fma(_1932, cbSceneParam._m0[89u].y, _1931 * cbSceneParam._m0[89u].x));
    float _1957 = fma(_1933, cbSceneParam._m0[90u].z, fma(_1932, cbSceneParam._m0[90u].y, _1931 * cbSceneParam._m0[90u].x));
    float _1960 = fma(_1933, cbSceneParam._m0[91u].z, fma(_1932, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1931));
    float _1975 = _1204 * 0.5;
    float _1976 = _1205 * 0.5;
    float _1977 = _1206 * 0.5;
    float _1978 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1909, _1912, _1915, _1918));
    float _1981 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1908, _1911, _1914, _1917));
    float _1984 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1907, _1910, _1913, _1916));
    float _2018;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1991 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1597, _1601, _1604, _1607));
        float _1995 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1599, _1602, _1605, _1608));
        float _1999 = dot(vec4(_1975, _1976, _1977, 1.0), vec4(_1600, _1603, _1606, _1609));
        float _2006 = dot(vec4(cbModelParam._m0[39u]), vec4(_1975, _1976, _1977, 1.0));
        _2018 = dot(vec3(isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2006) ? 0.0 : (isnan(0.0) ? _2006 : max(0.0, _2006))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2018 = 1.0;
    }
    float _2029;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2020 = dot(vec4(cbModelParam._m0[40u]), vec4(_1975, _1976, _1977, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0)), isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)), isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2020) ? 0.0 : (isnan(0.0) ? _2020 : max(0.0, _2020))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2033 = (_2029 * cbModelParam._m0[1u].x) + (_2018 * (1.0 - cbModelParam._m0[1u].x));
    float _2043 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1022);
    float _2044 = isnan(_2043) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2043 : min(cbModelParam._m0[25u].z, _2043));
    float _2124;
    float _2126;
    float _2128;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2091 = fma(_1268, cbModelParam._m0[13u].z, fma(_1264, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1260)) + cbModelParam._m0[13u].w;
        float _2095 = fma(_1268, cbModelParam._m0[14u].z, fma(_1264, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1260)) + cbModelParam._m0[14u].w;
        float _2099 = fma(_1268, cbModelParam._m0[15u].z, fma(_1264, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1260)) + cbModelParam._m0[15u].w;
        float _2102 = fma(_1206, cbModelParam._m0[13u].z, fma(_1205, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1204));
        float _2105 = fma(_1206, cbModelParam._m0[14u].z, fma(_1205, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1204));
        float _2108 = fma(_1206, cbModelParam._m0[15u].z, fma(_1205, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1204));
        float _2136;
        if (_2102 > 0.0)
        {
            _2136 = abs((1.0 - _2091) / _2102);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2102 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2091 + 1.0) / _2102);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2136 = frontier_phi_17_15_ladder;
        }
        float _2307;
        if (_2105 > 0.0)
        {
            _2307 = abs((1.0 - _2095) / _2105);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2105 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2095 + 1.0) / _2105);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2307 = frontier_phi_26_22_ladder;
        }
        float _2602;
        if (_2108 > 0.0)
        {
            _2602 = abs((1.0 - _2099) / _2108);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2108 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2099 + 1.0) / _2108);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2602 = frontier_phi_38_33_ladder;
        }
        float _2604 = isnan(_2307) ? _2136 : (isnan(_2136) ? _2307 : min(_2136, _2307));
        float _2605 = isnan(_2602) ? _2604 : (isnan(_2604) ? _2602 : min(_2604, _2602));
        float _2609 = (_2605 * _2102) + _2091;
        float _2610 = (_2605 * _2105) + _2095;
        float _2611 = (_2605 * _2108) + _2099;
        float _2612 = _2605 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2612;
        float _2616 = _2612 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 > _2616) || ((_2610 < _2614) || ((_2609 < _2614) || (_2609 > _2616))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2611, cbModelParam._m0[9u].z, fma(_2610, cbModelParam._m0[9u].y, _2609 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2611, cbModelParam._m0[10u].z, fma(_2610, cbModelParam._m0[10u].y, _2609 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2611, cbModelParam._m0[11u].z, fma(_2610, cbModelParam._m0[11u].y, _2609 * cbModelParam._m0[11u].x))), _2044);
            frontier_phi_16_38_ladder = _2756.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2756.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2756.x * cbModelParam._m0[1u].y;
        }
        _2124 = frontier_phi_16_38_ladder_2;
        _2126 = frontier_phi_16_38_ladder_1;
        _2128 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2112 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1204, _1205, _1206), _2044);
        _2124 = _2112.x * cbModelParam._m0[1u].y;
        _2126 = _2112.y * cbModelParam._m0[1u].y;
        _2128 = _2112.z * cbModelParam._m0[1u].y;
    }
    float _2132 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1022);
    float _2133 = isnan(_2132) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2132 : min(cbModelParam._m0[25u].w, _2132));
    float _2222;
    float _2224;
    float _2226;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2186 = fma(_1268, cbModelParam._m0[21u].z, fma(_1264, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1260)) + cbModelParam._m0[21u].w;
        float _2190 = fma(_1268, cbModelParam._m0[22u].z, fma(_1264, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1260)) + cbModelParam._m0[22u].w;
        float _2194 = fma(_1268, cbModelParam._m0[23u].z, fma(_1264, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1260)) + cbModelParam._m0[23u].w;
        float _2197 = fma(_1206, cbModelParam._m0[21u].z, fma(_1205, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1204));
        float _2200 = fma(_1206, cbModelParam._m0[22u].z, fma(_1205, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1204));
        float _2203 = fma(_1206, cbModelParam._m0[23u].z, fma(_1205, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1204));
        float _2312;
        if (_2197 > 0.0)
        {
            _2312 = abs((1.0 - _2186) / _2197);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2197 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2186 + 1.0) / _2197);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2312 = frontier_phi_28_24_ladder;
        }
        float _2629;
        if (_2200 > 0.0)
        {
            _2629 = abs((1.0 - _2190) / _2200);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2200 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2190 + 1.0) / _2200);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2629 = frontier_phi_40_35_ladder;
        }
        float _2967;
        if (_2203 > 0.0)
        {
            _2967 = abs((1.0 - _2194) / _2203);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2194 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2967 = frontier_phi_50_47_ladder;
        }
        float _2969 = isnan(_2629) ? _2312 : (isnan(_2312) ? _2629 : min(_2312, _2629));
        float _2970 = isnan(_2967) ? _2969 : (isnan(_2969) ? _2967 : min(_2969, _2967));
        float _2974 = (_2970 * _2197) + _2186;
        float _2975 = (_2970 * _2200) + _2190;
        float _2976 = (_2970 * _2203) + _2194;
        float _2977 = _2970 * 9.9999997473787516355514526367188e-05;
        float _2978 = (-1.0) - _2977;
        float _2980 = _2977 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2976 > _2980) || ((_2976 < _2978) || ((_2975 > _2980) || ((_2975 < _2978) || ((_2974 < _2978) || (_2974 > _2980))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3098 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2976, cbModelParam._m0[17u].z, fma(_2975, cbModelParam._m0[17u].y, _2974 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2976, cbModelParam._m0[18u].z, fma(_2975, cbModelParam._m0[18u].y, _2974 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2976, cbModelParam._m0[19u].z, fma(_2975, cbModelParam._m0[19u].y, _2974 * cbModelParam._m0[19u].x))), _2133);
            frontier_phi_25_50_ladder = _3098.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3098.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3098.x * cbModelParam._m0[1u].z;
        }
        _2222 = frontier_phi_25_50_ladder_2;
        _2224 = frontier_phi_25_50_ladder_1;
        _2226 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2206 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1204, _1205, _1206), _2133);
        _2222 = _2206.x * cbModelParam._m0[1u].z;
        _2224 = _2206.y * cbModelParam._m0[1u].z;
        _2226 = _2206.z * cbModelParam._m0[1u].z;
    }
    float _2239 = (((_1231 * _1180) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2222 - _2124)) + _2124);
    float _2241 = (((_1231 * _1182) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2224 - _2126)) + _2126);
    float _2243 = (((_1231 * _1183) + _1232) * _1196) * ((cbModelParam._m0[1u].w * (_2226 - _2128)) + _2128);
    float _2246 = fma(_2243, cbSceneParam._m0[89u].z, fma(_2241, cbSceneParam._m0[89u].y, _2239 * cbSceneParam._m0[89u].x));
    float _2249 = fma(_2243, cbSceneParam._m0[90u].z, fma(_2241, cbSceneParam._m0[90u].y, _2239 * cbSceneParam._m0[90u].x));
    float _2252 = fma(_2243, cbSceneParam._m0[91u].z, fma(_2241, cbSceneParam._m0[91u].y, _2239 * cbSceneParam._m0[91u].x));
    float _2286 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2290 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2294 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2298 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2299 = _2286 / _2298;
    float _2300 = _2290 / _2298;
    float _2301 = _2294 / _2298;
    float _2448;
    float _2449;
    float _2450;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2328 = ((uint(_2301 > cbSceneParam._m0[59u].y) + uint(_2301 > cbSceneParam._m0[59u].x)) + uint(_2301 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2329 = _2328 + 43u;
        uint _2337 = _2328 + 44u;
        uint _2345 = _2328 + 45u;
        uint _2353 = _2328 + 46u;
        float _2364 = fma(_2298, cbSceneParam._m0[_2329].w, fma(_2294, cbSceneParam._m0[_2329].z, fma(_2290, cbSceneParam._m0[_2329].y, _2286 * cbSceneParam._m0[_2329].x)));
        float _2368 = fma(_2298, cbSceneParam._m0[_2337].w, fma(_2294, cbSceneParam._m0[_2337].z, fma(_2290, cbSceneParam._m0[_2337].y, _2286 * cbSceneParam._m0[_2337].x)));
        float _2376 = fma(_2298, cbSceneParam._m0[_2353].w, fma(_2294, cbSceneParam._m0[_2353].z, fma(_2290, cbSceneParam._m0[_2353].y, _2286 * cbSceneParam._m0[_2353].x)));
        float _2381 = cbSceneParam._m0[33u].z * _2376;
        float _2383 = cbSceneParam._m0[33u].w * _2376;
        float _2386 = fma(_2298, cbSceneParam._m0[_2345].w, fma(_2294, cbSceneParam._m0[_2345].z, fma(_2290, cbSceneParam._m0[_2345].y, _2286 * cbSceneParam._m0[_2345].x))) / _2376;
        float _2434 = (cbSceneParam._m0[33u].x - sqrt(((_2300 * _2300) + (_2299 * _2299)) + (_2301 * _2301))) * cbSceneParam._m0[33u].y;
        float _4859 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
        float _2441 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2381 + _2364) / _2376, (_2383 + _2368) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2383 + _2364) / _2376, (_2368 - _2381) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2364 - _2381) / _2376, (_2368 - _2383) / _2376), _2386), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2364 - _2383) / _2376, (_2381 + _2368) / _2376), _2386), 0.0)).x), vec4(0.25)));
        _2448 = 1.0 - (_2441 * cbSceneParam._m0[34u].x);
        _2449 = 1.0 - (_2441 * cbSceneParam._m0[34u].y);
        _2450 = 1.0 - (_2441 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2448 = 1.0;
        _2449 = 1.0;
        _2450 = 1.0;
    }
    float _2514;
    float _2516;
    float _2518;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2502 = fma(_2298, cbSceneParam._m0[63u].w, fma(_2294, cbSceneParam._m0[63u].z, fma(_2290, cbSceneParam._m0[63u].y, _2286 * cbSceneParam._m0[63u].x)));
        float _2503 = fma(_2298, cbSceneParam._m0[60u].w, fma(_2294, cbSceneParam._m0[60u].z, fma(_2290, cbSceneParam._m0[60u].y, _2286 * cbSceneParam._m0[60u].x))) / _2502;
        float _2504 = fma(_2298, cbSceneParam._m0[61u].w, fma(_2294, cbSceneParam._m0[61u].z, fma(_2290, cbSceneParam._m0[61u].y, _2286 * cbSceneParam._m0[61u].x))) / _2502;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2503 >= cbSceneParam._m0[64u].x) && (_2504 >= cbSceneParam._m0[64u].y)) && (_2503 <= cbSceneParam._m0[64u].z)) && (_2504 <= cbSceneParam._m0[64u].w))
        {
            float _2642 = fma(_2298, cbSceneParam._m0[62u].w, fma(_2294, cbSceneParam._m0[62u].z, fma(_2290, cbSceneParam._m0[62u].y, _2286 * cbSceneParam._m0[62u].x))) / _2502;
            float _2646 = isnan(cbSceneParam._m0[41u].w) ? _2642 : (isnan(_2642) ? cbSceneParam._m0[41u].w : max(_2642, cbSceneParam._m0[41u].w));
            float _2689 = (cbSceneParam._m0[33u].x - sqrt(((_2300 * _2300) + (_2299 * _2299)) + (_2301 * _2301))) * cbSceneParam._m0[33u].y;
            float _4875 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
            float _2696 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2503, cbSceneParam._m0[33u].w + _2504), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2503, _2504 - cbSceneParam._m0[33u].z), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2503 - cbSceneParam._m0[33u].z, _2504 - cbSceneParam._m0[33u].w), _2646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2503 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2504), _2646), 0.0)).x), vec4(0.25)));
            float _2700 = 1.0 - (_2696 * cbSceneParam._m0[34u].x);
            float _2701 = 1.0 - (_2696 * cbSceneParam._m0[34u].y);
            float _2702 = 1.0 - (_2696 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2702) ? _2450 : (isnan(_2450) ? _2702 : min(_2450, _2702));
            frontier_phi_37_36_ladder_1 = isnan(_2701) ? _2449 : (isnan(_2449) ? _2701 : min(_2449, _2701));
            frontier_phi_37_36_ladder_2 = isnan(_2700) ? _2448 : (isnan(_2448) ? _2700 : min(_2448, _2700));
        }
        else
        {
            frontier_phi_37_36_ladder = _2450;
            frontier_phi_37_36_ladder_1 = _2449;
            frontier_phi_37_36_ladder_2 = _2448;
        }
        _2514 = frontier_phi_37_36_ladder_2;
        _2516 = frontier_phi_37_36_ladder_1;
        _2518 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2514 = _2448;
        _2516 = _2449;
        _2518 = _2450;
    }
    uvec4 _2523 = floatBitsToUint(cbInstanceData._m0[_294 + 5u]);
    uint _2525 = _2523.x * 14u;
    uint _2526 = _2525 + 13u;
    float _2533 = _1196 + (-1.0);
    float _2538 = (cbLight._m0[_2526].x * _2533) + 1.0;
    float _2539 = (cbLight._m0[_2526].y * _2533) + 1.0;
    float _2540 = (cbLight._m0[_2526].z * _2533) + 1.0;
    float _2541 = (cbLight._m0[_2526].w * _2533) + 1.0;
    uint _2542 = _2525 + 5u;
    float _2548 = isnan(1.0) ? _2539 : (isnan(_2539) ? 1.0 : min(_2539, 1.0));
    uint _2552 = _2525 + 4u;
    float _2561 = isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0));
    uint _2565 = _2525 | 1u;
    float _2576 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_1019, _1020, _1021));
    float _2579 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_1019, _1020, _1021));
    float _4911 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _4922 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2584 = (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * 0.3183098733425140380859375;
    float _2586 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * 0.3183098733425140380859375;
    float _2593 = ((cbLight._m0[_2542].x * _2548) * _2586) + (((cbLight._m0[_2552].x * _2514) * _2561) * _2584);
    float _2594 = ((_2548 * cbLight._m0[_2542].y) * _2586) + (((cbLight._m0[_2552].y * _2516) * _2561) * _2584);
    float _2595 = ((_2548 * cbLight._m0[_2542].z) * _2586) + (((cbLight._m0[_2552].z * _2518) * _2561) * _2584);
    uvec4 _2599 = floatBitsToUint(cbLight._m0[_2525 + 12u]);
    bool _2601 = _2599.x == 0u;
    float _2703;
    float _2705;
    float _2707;
    if (_2601)
    {
        _2703 = _2593;
        _2705 = _2594;
        _2707 = _2595;
    }
    else
    {
        uint _2711 = _2525 + 6u;
        float _2727 = (dot(vec3(cbLight._m0[_2525 + 2u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2728 = _2727 * _2727;
        float _4933 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
        float _2729 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
        float _2730 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _2703 = (((cbLight._m0[_2711].x * 0.3183098733425140380859375) * _2729) * _2730) + _2593;
        _2705 = (((cbLight._m0[_2711].y * 0.3183098733425140380859375) * _2729) * _2730) + _2594;
        _2707 = (((cbLight._m0[_2711].z * 0.3183098733425140380859375) * _2729) * _2730) + _2595;
    }
    bool _2710 = _2599.y == 0u;
    float _2765;
    float _2767;
    float _2769;
    if (_2710)
    {
        _2765 = _2703;
        _2767 = _2705;
        _2769 = _2707;
    }
    else
    {
        uint _2938 = _2525 + 7u;
        float _2954 = (dot(vec3(cbLight._m0[_2525 + 3u].xyz), vec3(_1019, _1020, _1021)) * 0.5) + 0.5;
        float _2955 = _2954 * _2954;
        float _4949 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2956 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
        float _2957 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _2765 = (((cbLight._m0[_2938].x * 0.3183098733425140380859375) * _2956) * _2957) + _2703;
        _2767 = (((cbLight._m0[_2938].y * 0.3183098733425140380859375) * _2956) * _2957) + _2705;
        _2769 = (((cbLight._m0[_2938].z * 0.3183098733425140380859375) * _2956) * _2957) + _2707;
    }
    uint _2772 = _2525 + 8u;
    float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _1022) * 0.949999988079071044921875);
    float _2786 = _2785 * _2785;
    float _2787 = cbLight._m0[_2525].x + _1098;
    float _2788 = cbLight._m0[_2525].y + _1099;
    float _2789 = cbLight._m0[_2525].z + _1100;
    float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
    float _2794 = _2793 * _2787;
    float _2795 = _2793 * _2788;
    float _2796 = _2793 * _2789;
    float _2797 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2525].xyz));
    float _4965 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
    float _2800 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
    float _4976 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _2801 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
    float _2802 = dot(vec3(_1019, _1020, _1021), vec3(_2794, _2795, _2796));
    float _4987 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2805 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
    float _2806 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2794, _2795, _2796));
    float _4998 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2810 = _2786 * _2786;
    float _2814 = ((_2805 * _2805) * (_2810 + (-1.0))) + 1.0;
    float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) * 5.0);
    float _2823 = 0.959999978542327880859375 - _1177;
    float _2825 = 0.959999978542327880859375 - _1178;
    float _2826 = 0.959999978542327880859375 - _1179;
    float _2833 = 1.0 - _2786;
    float _2844 = (0.5 / (((_2801 * ((_2800 * _2833) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2833) + _2786) * _2800))) * _2800;
    float _5009 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
    float _2846 = (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2810 / ((_2814 * _2814) * 3.141590118408203125));
    uint _2860 = _2525 + 9u;
    float _2871 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _1022) * 0.949999988079071044921875);
    float _2872 = _2871 * _2871;
    float _2873 = cbLight._m0[_2565].x + _1098;
    float _2874 = cbLight._m0[_2565].y + _1099;
    float _2875 = cbLight._m0[_2565].z + _1100;
    float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
    float _2880 = _2879 * _2873;
    float _2881 = _2879 * _2874;
    float _2882 = _2879 * _2875;
    float _2883 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2565].xyz));
    float _5020 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
    float _2886 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
    float _2887 = dot(vec3(_1019, _1020, _1021), vec3(_2880, _2881, _2882));
    float _5031 = isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0));
    float _2890 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    float _2891 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2880, _2881, _2882));
    float _5042 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
    float _2895 = _2872 * _2872;
    float _2899 = ((_2890 * _2890) * (_2895 + (-1.0))) + 1.0;
    float _2906 = exp2(log2(1.0 - (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0)))) * 5.0);
    float _2913 = 1.0 - _2872;
    float _2923 = (0.5 / (((_2801 * ((_2886 * _2913) + _2872)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _2913) + _2872) * _2886))) * _2886;
    float _5053 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
    float _2925 = (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_2895 / ((_2899 * _2899) * 3.141590118408203125));
    float _2935 = (((((_2906 * _2823) + _1180) * cbLight._m0[_2860].x) * _2925) * _2548) + ((((cbLight._m0[_2772].x * _2514) * ((_2822 * _2823) + _1180)) * _2846) * _2561);
    float _2936 = (((((_2906 * _2825) + _1182) * cbLight._m0[_2860].y) * _2925) * _2548) + ((((cbLight._m0[_2772].y * _2516) * ((_2822 * _2825) + _1182)) * _2846) * _2561);
    float _2937 = (((((_2906 * _2826) + _1183) * cbLight._m0[_2860].z) * _2925) * _2548) + ((((cbLight._m0[_2772].z * _2518) * ((_2822 * _2826) + _1183)) * _2846) * _2561);
    float _2993;
    float _2995;
    float _2997;
    if (_2601)
    {
        _2993 = _2935;
        _2995 = _2936;
        _2997 = _2937;
    }
    else
    {
        uint _2999 = _2525 + 2u;
        uint _3003 = _2525 + 10u;
        float _3017 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2999].w)) * _1022) * 0.949999988079071044921875);
        float _3018 = _3017 * _3017;
        float _3019 = cbLight._m0[_2999].x + _1098;
        float _3020 = cbLight._m0[_2999].y + _1099;
        float _3021 = cbLight._m0[_2999].z + _1100;
        float _3025 = inversesqrt(dot(vec3(_3019, _3020, _3021), vec3(_3019, _3020, _3021)));
        float _3026 = _3025 * _3019;
        float _3027 = _3025 * _3020;
        float _3028 = _3025 * _3021;
        float _3029 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_2999].xyz));
        float _5064 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0));
        float _3033 = dot(vec3(_1019, _1020, _1021), vec3(_3026, _3027, _3028));
        float _5075 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3036 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
        float _3037 = dot(vec3(cbLight._m0[_2999].xyz), vec3(_3026, _3027, _3028));
        float _5086 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
        float _3041 = _3018 * _3018;
        float _3045 = ((_3036 * _3036) * (_3041 + (-1.0))) + 1.0;
        float _3052 = exp2(log2(1.0 - (isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0)))) * 5.0);
        float _3059 = 1.0 - _3018;
        float _3069 = (0.5 / (((_2801 * ((_3032 * _3059) + _3018)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _3059) + _3018) * _3032))) * _3032;
        float _5097 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3071 = (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0))) * (_3041 / ((_3045 * _3045) * 3.141590118408203125));
        float _3072 = isnan(1.0) ? _2540 : (isnan(_2540) ? 1.0 : min(_2540, 1.0));
        _2993 = (((((_3052 * _2823) + _1180) * cbLight._m0[_3003].x) * _3071) * _3072) + _2935;
        _2995 = (((((_3052 * _2825) + _1182) * cbLight._m0[_3003].y) * _3071) * _3072) + _2936;
        _2997 = (((((_3052 * _2826) + _1183) * cbLight._m0[_3003].z) * _3071) * _3072) + _2937;
    }
    float _3103;
    float _3105;
    float _3107;
    if (_2710)
    {
        _3103 = _2993;
        _3105 = _2995;
        _3107 = _2997;
    }
    else
    {
        uint _3114 = _2525 + 3u;
        uint _3118 = _2525 + 11u;
        float _3132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3114].w)) * _1022) * 0.949999988079071044921875);
        float _3133 = _3132 * _3132;
        float _3134 = cbLight._m0[_3114].x + _1098;
        float _3135 = cbLight._m0[_3114].y + _1099;
        float _3136 = cbLight._m0[_3114].z + _1100;
        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
        float _3141 = _3140 * _3134;
        float _3142 = _3140 * _3135;
        float _3143 = _3140 * _3136;
        float _3144 = dot(vec3(_1019, _1020, _1021), vec3(cbLight._m0[_3114].xyz));
        float _5113 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
        float _3147 = isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0));
        float _3148 = dot(vec3(_1019, _1020, _1021), vec3(_3141, _3142, _3143));
        float _5124 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
        float _3151 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
        float _3152 = dot(vec3(cbLight._m0[_3114].xyz), vec3(_3141, _3142, _3143));
        float _5135 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
        float _3156 = _3133 * _3133;
        float _3160 = ((_3151 * _3151) * (_3156 + (-1.0))) + 1.0;
        float _3167 = exp2(log2(1.0 - (isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0)))) * 5.0);
        float _3174 = 1.0 - _3133;
        float _3184 = (0.5 / (((_2801 * ((_3147 * _3174) + _3133)) + 9.9999999392252902907785028219223e-09) + (((_2801 * _3174) + _3133) * _3147))) * _3147;
        float _5146 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3186 = (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0))) * (_3156 / ((_3160 * _3160) * 3.141590118408203125));
        float _3187 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
        _3103 = (((((_3167 * _2823) + _1180) * cbLight._m0[_3118].x) * _3186) * _3187) + _2993;
        _3105 = (((((_3167 * _2825) + _1182) * cbLight._m0[_3118].y) * _3186) * _3187) + _2995;
        _3107 = (((((_3167 * _2826) + _1183) * cbLight._m0[_3118].z) * _3186) * _3187) + _2997;
    }
    float _3253;
    float _3255;
    float _3257;
    float _3259;
    float _3261;
    float _3263;
    if (_2523.y == 0u)
    {
        uvec4 _3208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3209 = _3208.x;
        uint _3220 = uint((float(_3208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1119) / _3209))) + floor(float(uint(cbSceneParam._m0[85u].x * _1118) / _3209)));
        float _3230 = (log2(_2301 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3231 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
        uint _3234 = uint(isnan(14.0) ? _3231 : (isnan(_3231) ? 14.0 : min(_3231, 14.0)));
        uvec4 _3239 = texelFetch(g_lightClusterGridBuffer, int(((_3234 << 2u) + (_3220 << 6u)) >> 2u));
        uint _3240 = _3239.x;
        uint _3241 = _3208.z;
        float _3320;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        if (((((1u << ((_3241 >> 4u) & 15u)) + 4294967295u) & _3240) == 0u) || ((_3241 & 240u) == 0u))
        {
            _3320 = 0.0;
            _3322 = 0.0;
            _3324 = 0.0;
            _3326 = 0.0;
            _3328 = 0.0;
            _3330 = 0.0;
        }
        else
        {
            float _3321;
            float _3323;
            float _3325;
            float _3327;
            float _3329;
            float _3331;
            float _3473 = 0.0;
            float _3474 = 0.0;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            uint _3479 = 0u;
            uint _3488;
            bool _3489;
            for (;;)
            {
                _3488 = texelFetch(g_lightClassification, int((((_3234 << 5u) + (_3220 << 9u)) + (_3479 << 2u)) >> 2u)).x;
                _3489 = _3488 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3489)
                {
                    frontier_phi_71_pred = _3478;
                    frontier_phi_71_pred_1 = _3477;
                    frontier_phi_71_pred_2 = _3476;
                    frontier_phi_71_pred_3 = _3475;
                    frontier_phi_71_pred_4 = _3474;
                    frontier_phi_71_pred_5 = _3473;
                }
                else
                {
                    float _3618;
                    float _3619;
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    uint _3624;
                    _3618 = _3473;
                    _3619 = _3474;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3488;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    for (;;)
                    {
                        uint _3628 = uint(findLSB(_3624)) + (_3479 << 5u);
                        uint _3625 = (_3624 + 4294967295u) & _3624;
                        uint _3630 = _3628 * 48u;
                        vec4 _3644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3630)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3630 + 3u)).x));
                        uint _3650 = (_3628 * 48u) + 4u;
                        vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3650)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3650 + 3u)).x));
                        uint _3669 = (_3628 * 48u) + 8u;
                        vec3 _3680 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3669)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3669 + 2u)).x));
                        float _3684 = _3644.x - _2299;
                        float _3685 = _3644.y - _2300;
                        float _3686 = _3644.z - _2301;
                        float _3687 = dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686));
                        float _3690 = inversesqrt(_3687);
                        float _3691 = _3690 * _3684;
                        float _3692 = _3690 * _3685;
                        float _3693 = _3690 * _3686;
                        float _3694 = dot(vec3(_1137, _1140, _1143), vec3(_3691, _3692, _3693));
                        float _3699 = 1.0 - (_3687 * _3644.w);
                        float _5172 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                        float _3700 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                        float _3701 = sqrt(_3687) * _3663.w;
                        float _3704 = 1.39999997615814208984375 / (_3701 + 1.39999997615814208984375);
                        float _3705 = _3704 * _3704;
                        float _3708 = ((1.0 - _3705) * _3694) + _3705;
                        float _3711 = _3701 * _3701;
                        float _3715 = ((isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0))) * _3700) / ((_3711 * 0.699999988079071044921875) + 1.0);
                        float _3719 = (-0.0) - _2299;
                        float _3720 = (-0.0) - _2300;
                        float _3721 = (-0.0) - _2301;
                        float _3725 = inversesqrt(dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721)));
                        float _3726 = _3725 * _3719;
                        float _3727 = _3725 * _3720;
                        float _3728 = _3725 * _3721;
                        float _3735 = exp2(log2(1.0 / ((_3711 * 3.5) + 5.0)) * 0.25);
                        float _3736 = 1.0 - _1212;
                        float _3743 = sqrt(1.0 - ((1.0 - (_3736 * _3736)) * (1.0 - (_3735 * _3735))));
                        float _3744 = _3743 * _3743;
                        float _3745 = _3744 * _3744;
                        float _3746 = _3726 + _3691;
                        float _3747 = _3727 + _3692;
                        float _3748 = _3728 + _3693;
                        float _3752 = inversesqrt(dot(vec3(_3746, _3747, _3748), vec3(_3746, _3747, _3748)));
                        float _3756 = dot(vec3(_1137, _1140, _1143), vec3(_3726, _3727, _3728));
                        float _5188 = isnan(0.0) ? _3756 : (isnan(_3756) ? 0.0 : max(_3756, 0.0));
                        float _3759 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
                        float _3760 = dot(vec3(_1137, _1140, _1143), vec3(_3752 * _3746, _3752 * _3747, _3752 * _3748));
                        float _5199 = isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0));
                        float _3763 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                        float _3767 = ((_3763 * _3763) * (_3745 + (-1.0))) + 1.0;
                        float _3768 = _3704 * _3744;
                        float _3769 = _3768 * _3768;
                        float _3772 = ((1.0 - _3769) * _3694) + _3769;
                        float _5210 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                        float _3773 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                        float _3774 = 1.0 - _3744;
                        float _3784 = (0.5 / (((_3773 * ((_3759 * _3774) + _3744)) + 9.9999999392252902907785028219223e-09) + (((_3773 * _3774) + _3744) * _3759))) * _3773;
                        float _5221 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                        float _3795 = (((_3745 * 3.1415927410125732421875) * (isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0)))) / ((_3767 * _3767) * ((_3711 * 2.1991131305694580078125) + 3.141590118408203125))) * _3700;
                        _3548 = (_3715 * _3663.x) + _3621;
                        _3549 = (_3715 * _3663.y) + _3622;
                        _3550 = (_3715 * _3663.z) + _3623;
                        _3545 = (_3795 * _3680.x) + _3618;
                        _3546 = (_3795 * _3680.y) + _3619;
                        _3547 = (_3795 * _3680.z) + _3620;
                        if (_3625 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3618 = _3545;
                            _3619 = _3546;
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3625;
                        }
                    }
                    frontier_phi_71_pred = _3550;
                    frontier_phi_71_pred_1 = _3549;
                    frontier_phi_71_pred_2 = _3548;
                    frontier_phi_71_pred_3 = _3547;
                    frontier_phi_71_pred_4 = _3546;
                    frontier_phi_71_pred_5 = _3545;
                }
                _3331 = frontier_phi_71_pred;
                _3329 = frontier_phi_71_pred_1;
                _3327 = frontier_phi_71_pred_2;
                _3325 = frontier_phi_71_pred_3;
                _3323 = frontier_phi_71_pred_4;
                _3321 = frontier_phi_71_pred_5;
                uint _3480 = _3479 + 1u;
                if (_3480 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3473 = _3321;
                    _3474 = _3323;
                    _3475 = _3325;
                    _3476 = _3327;
                    _3477 = _3329;
                    _3478 = _3331;
                    _3479 = _3480;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3320 = _3321;
            _3322 = _3323;
            _3324 = _3325;
            _3326 = _3327;
            _3328 = _3329;
            _3330 = _3331;
        }
        uvec4 _3334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3335 = _3334.z;
        uint _3337 = (_3335 >> 8u) & 15u;
        float _3441;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        if (((4294967295u << _3337) & _3240) == 0u)
        {
            _3441 = _3320;
            _3443 = _3322;
            _3445 = _3324;
            _3447 = _3326;
            _3449 = _3328;
            _3451 = _3330;
        }
        else
        {
            float _3466 = inversesqrt(dot(vec3(_2299, _2300, _2301), vec3(_2299, _2300, _2301)));
            float _3467 = _3466 * _2299;
            float _3468 = _3466 * _2300;
            float _3469 = _3466 * _2301;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3337 < ((_3335 >> 12u) & 15u))
            {
                float _3442;
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3601 = _3320;
                float _3602 = _3322;
                float _3603 = _3324;
                float _3604 = _3326;
                float _3605 = _3328;
                float _3606 = _3330;
                uint _3607 = _3337;
                uint _3616;
                bool _3617;
                for (;;)
                {
                    _3616 = texelFetch(g_lightClassification, int((((_3234 << 5u) + (_3220 << 9u)) + (_3607 << 2u)) >> 2u)).x;
                    _3617 = _3616 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3617)
                    {
                        frontier_phi_82_pred = _3606;
                        frontier_phi_82_pred_1 = _3605;
                        frontier_phi_82_pred_2 = _3604;
                        frontier_phi_82_pred_3 = _3603;
                        frontier_phi_82_pred_4 = _3602;
                        frontier_phi_82_pred_5 = _3601;
                    }
                    else
                    {
                        float _3809;
                        float _3810;
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _4102;
                        float _4103;
                        float _4104;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _3822 = _3601;
                        float _3823 = _3602;
                        float _3824 = _3603;
                        float _3825 = _3604;
                        float _3826 = _3605;
                        float _3827 = _3606;
                        uint _3828 = _3616;
                        uint _3829;
                        vec4 _3854;
                        float _3855;
                        vec4 _3870;
                        vec3 _3882;
                        vec4 _3897;
                        vec4 _3912;
                        float _3958;
                        bool _3959;
                        for (;;)
                        {
                            uint _3839 = ((_3607 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3828));
                            _3829 = (_3828 + 4294967295u) & _3828;
                            uint _3841 = _3839 * 40u;
                            _3854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 3u)).x));
                            _3855 = _3854.w;
                            uint _3857 = (_3839 * 40u) + 4u;
                            _3870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3857 + 3u)).x));
                            uint _3872 = (_3839 * 40u) + 8u;
                            _3882 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3872 + 2u)).x));
                            uint _3884 = (_3839 * 40u) + 16u;
                            _3897 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3884 + 3u)).x));
                            uint _3899 = (_3839 * 40u) + 20u;
                            _3912 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3899)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3899 + 3u)).x));
                            uint _3914 = (_3839 * 40u) + 24u;
                            vec4 _3927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3914 + 3u)).x));
                            uint _3933 = (_3839 * 40u) + 28u;
                            vec4 _3946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3933 + 3u)).x));
                            _3958 = fma(_2301, _3946.z, fma(_2300, _3946.y, _3946.x * _2299)) + _3946.w;
                            _3959 = !((fma(_2301, _3927.z, fma(_2300, _3927.y, _3927.x * _2299)) + _3927.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3959)
                            {
                                float _3986 = _3854.x - _2299;
                                float _3987 = _3854.y - _2300;
                                float _3988 = _3854.z - _2301;
                                float _3989 = dot(vec3(_3986, _3987, _3988), vec3(_3986, _3987, _3988));
                                float _3992 = inversesqrt(_3989);
                                float _3993 = _3992 * _3986;
                                float _3994 = _3992 * _3987;
                                float _3995 = _3992 * _3988;
                                float _3999 = 1.0 - (_3989 / (_3855 * _3855));
                                float _5232 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4000 = isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0));
                                float _4004 = sqrt(_3989) * _3870.w;
                                float _4006 = 1.39999997615814208984375 / (_4004 + 1.39999997615814208984375);
                                float _4007 = _4006 * _4006;
                                float _4010 = ((1.0 - _4007) * dot(vec3(_3993, _3994, _3995), vec3(_1137, _1140, _1143))) + _4007;
                                float _4013 = _4004 * _4004;
                                float _4017 = (fma(_2301, _3897.z, fma(_2300, _3897.y, _3897.x * _2299)) + _3897.w) / _3958;
                                float _4018 = (fma(_2301, _3912.z, fma(_2300, _3912.y, _3912.x * _2299)) + _3912.w) / _3958;
                                float _4022 = 1.0 - dot(vec2(_4017, _4018), vec2(_4017, _4018));
                                float _5248 = isnan(0.0) ? _4022 : (isnan(_4022) ? 0.0 : max(_4022, 0.0));
                                float _4023 = isnan(1.0) ? _5248 : (isnan(_5248) ? 1.0 : min(_5248, 1.0));
                                float _4024 = _4023 * (((isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0))) * _4000) / ((_4013 * 0.699999988079071044921875) + 1.0));
                                float _4036 = exp2(log2(1.0 / ((_4013 * 3.5) + 5.0)) * 0.25);
                                float _4037 = 1.0 - _1212;
                                float _4044 = sqrt(1.0 - ((1.0 - (_4037 * _4037)) * (1.0 - (_4036 * _4036))));
                                float _4045 = _4044 * _4044;
                                float _4046 = _4045 * _4045;
                                float _4047 = _3993 - _3467;
                                float _4048 = _3994 - _3468;
                                float _4049 = _3995 - _3469;
                                float _4053 = inversesqrt(dot(vec3(_4047, _4048, _4049), vec3(_4047, _4048, _4049)));
                                float _4057 = dot(vec3(_1137, _1140, _1143), vec3((-0.0) - _3467, (-0.0) - _3468, (-0.0) - _3469));
                                float _5259 = isnan(0.0) ? _4057 : (isnan(_4057) ? 0.0 : max(_4057, 0.0));
                                float _4060 = isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0));
                                float _4061 = dot(vec3(_1137, _1140, _1143), vec3(_4053 * _4047, _4053 * _4048, _4053 * _4049));
                                float _5270 = isnan(0.0) ? _4061 : (isnan(_4061) ? 0.0 : max(_4061, 0.0));
                                float _4064 = isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0));
                                float _4068 = ((_4064 * _4064) * (_4046 + (-1.0))) + 1.0;
                                float _4069 = _4006 * _4045;
                                float _4070 = _4069 * _4069;
                                float _4076 = ((1.0 - _4070) * dot(vec3(_1137, _1140, _1143), vec3(_3993, _3994, _3995))) + _4070;
                                float _5281 = isnan(0.0) ? _4076 : (isnan(_4076) ? 0.0 : max(_4076, 0.0));
                                float _4077 = isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0));
                                float _4078 = 1.0 - _4045;
                                float _4088 = (0.5 / (((_4077 * ((_4060 * _4078) + _4045)) + 9.9999999392252902907785028219223e-09) + (((_4077 * _4078) + _4045) * _4060))) * _4077;
                                float _5292 = isnan(0.0) ? _4088 : (isnan(_4088) ? 0.0 : max(_4088, 0.0));
                                float _4098 = (_4023 * _4000) * (((_4046 * 3.1415927410125732421875) * (isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0)))) / ((_4068 * _4068) * ((_4013 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4024 * _3870.z;
                                frontier_phi_88_pred_1 = _4024 * _3870.y;
                                frontier_phi_88_pred_2 = _4024 * _3870.x;
                                frontier_phi_88_pred_3 = _4098 * _3882.z;
                                frontier_phi_88_pred_4 = _4098 * _3882.y;
                                frontier_phi_88_pred_5 = _4098 * _3882.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4107 = frontier_phi_88_pred;
                            _4106 = frontier_phi_88_pred_1;
                            _4105 = frontier_phi_88_pred_2;
                            _4104 = frontier_phi_88_pred_3;
                            _4103 = frontier_phi_88_pred_4;
                            _4102 = frontier_phi_88_pred_5;
                            _3812 = _4105 + _3825;
                            _3813 = _4106 + _3826;
                            _3814 = _4107 + _3827;
                            _3809 = _4102 + _3822;
                            _3810 = _4103 + _3823;
                            _3811 = _4104 + _3824;
                            if (_3829 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3822 = _3809;
                                _3823 = _3810;
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3829;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3814;
                        frontier_phi_82_pred_1 = _3813;
                        frontier_phi_82_pred_2 = _3812;
                        frontier_phi_82_pred_3 = _3811;
                        frontier_phi_82_pred_4 = _3810;
                        frontier_phi_82_pred_5 = _3809;
                    }
                    _3452 = frontier_phi_82_pred;
                    _3450 = frontier_phi_82_pred_1;
                    _3448 = frontier_phi_82_pred_2;
                    _3446 = frontier_phi_82_pred_3;
                    _3444 = frontier_phi_82_pred_4;
                    _3442 = frontier_phi_82_pred_5;
                    uint _3608 = _3607 + 1u;
                    if (_3608 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3601 = _3442;
                        _3602 = _3444;
                        _3603 = _3446;
                        _3604 = _3448;
                        _3605 = _3450;
                        _3606 = _3452;
                        _3607 = _3608;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3448;
                frontier_phi_63_64_ladder_1 = _3452;
                frontier_phi_63_64_ladder_2 = _3450;
                frontier_phi_63_64_ladder_3 = _3446;
                frontier_phi_63_64_ladder_4 = _3444;
                frontier_phi_63_64_ladder_5 = _3442;
            }
            else
            {
                frontier_phi_63_64_ladder = _3326;
                frontier_phi_63_64_ladder_1 = _3330;
                frontier_phi_63_64_ladder_2 = _3328;
                frontier_phi_63_64_ladder_3 = _3324;
                frontier_phi_63_64_ladder_4 = _3322;
                frontier_phi_63_64_ladder_5 = _3320;
            }
            _3441 = frontier_phi_63_64_ladder_5;
            _3443 = frontier_phi_63_64_ladder_4;
            _3445 = frontier_phi_63_64_ladder_3;
            _3447 = frontier_phi_63_64_ladder;
            _3449 = frontier_phi_63_64_ladder_2;
            _3451 = frontier_phi_63_64_ladder_1;
        }
        float _3456 = isnan(1.0) ? _1196 : (isnan(_1196) ? 1.0 : min(_1196, 1.0));
        _3253 = (_3456 * _3447) + _2765;
        _3255 = (_3456 * _3449) + _2767;
        _3257 = (_3456 * _3451) + _2769;
        _3259 = ((_3441 * _1180) * _3456) + _3103;
        _3261 = ((_3443 * _1182) * _3456) + _3105;
        _3263 = ((_3445 * _1183) * _3456) + _3107;
    }
    else
    {
        _3253 = _2765;
        _3255 = _2767;
        _3257 = _2769;
        _3259 = _3103;
        _3261 = _3105;
        _3263 = _3107;
    }
    float _5308 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _5319 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _5330 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _3280 = ((isnan(1.0) ? _5308 : (isnan(_5308) ? 1.0 : min(_5308, 1.0))) * (_3253 + ((isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0))) * _1196))) + ((_3259 + ((isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0))) * _2033)) * cbPerFrame._m0[3u].x);
    float _3281 = ((isnan(1.0) ? _5319 : (isnan(_5319) ? 1.0 : min(_5319, 1.0))) * (_3255 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1196))) + ((_3261 + ((isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0))) * _2033)) * cbPerFrame._m0[3u].x);
    float _3282 = ((isnan(1.0) ? _5330 : (isnan(_5330) ? 1.0 : min(_5330, 1.0))) * (_3257 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1196))) + ((_3263 + ((isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0))) * _2033)) * cbPerFrame._m0[3u].x);
    uint _3283 = _294 + 6u;
    float _3291 = _1118 / cbSceneParam._m0[86u].x;
    float _3292 = _1119 / cbSceneParam._m0[86u].y;
    vec4 _3306 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3291, _3292, (log2((isnan(cbSceneParam._m0[77u].w) ? _1041 : (isnan(_1041) ? cbSceneParam._m0[77u].w : min(_1041, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3308 = _3306.x;
    float _3309 = _3306.y;
    float _3310 = _3306.z;
    float _3311 = _3306.w;
    float _3383;
    float _3385;
    float _3387;
    float _3389;
    if (_1041 > cbSceneParam._m0[78u].w)
    {
        float _3345 = isnan(_1041) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1041 : min(cbSceneParam._m0[80u].w, _1041));
        float _3346 = _3345 / _1041;
        float _3357 = _3346 * _1091;
        float _3358 = _1092 * _3346;
        float _3359 = (-0.0) - _3358;
        float _3361 = _3346 * _1093;
        float _3363 = (cbSceneParam._m0[77u].w * _3359) / _3345;
        float _3364 = _3363 + cbSceneParam._m0[79u].w;
        float _3365 = cbSceneParam._m0[79u].w - _3358;
        float _3371 = sqrt(((_3357 * _3357) + (_3358 * _3358)) + (_3361 * _3361));
        float _3374 = (1.0 - (cbSceneParam._m0[77u].w / _3345)) * _3371;
        float _3379 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3381 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3558;
        if (abs((_3359 - _3363) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3558 = ((((_3364 > 0.0) ? exp2(_3379 * _3364) : (2.0 - exp2(_3381 * _3364))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3374;
        }
        else
        {
            float _3502 = 1.0 / cbSceneParam._m0[80u].x;
            float _3503 = isnan(_3365) ? _3364 : (isnan(_3364) ? _3365 : max(_3364, _3365));
            float _3504 = isnan(_3365) ? _3364 : (isnan(_3364) ? _3365 : min(_3364, _3365));
            float _3513 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : min(_3503, 0.0));
            float _3514 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : min(_3504, 0.0));
            _3558 = ((abs(_3371 / _3359) * cbSceneParam._m0[80u].y) * ((((_3513 - _3514) * 2.0) - ((exp2(_3379 * (isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0)))) - exp2(_3379 * (isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0))))) * _3502)) - ((exp2(_3381 * _3513) - exp2(_3381 * _3514)) * _3502))) + (_3374 * cbSceneParam._m0[80u].z);
        }
        vec4 _3560 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3291, _3292, 1.0), 0.0);
        float _3569 = exp2((_3558 * (-1.44269502162933349609375)) * (1.0 - _3560.w));
        float _3570 = log2(_3569);
        float _3586 = log2(_3311);
        _3383 = (exp2(_3586 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].x)) * _3560.x) / cbSceneParam._m0[78u].x)) + _3308;
        _3385 = (exp2(_3586 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].y)) * _3560.y) / cbSceneParam._m0[78u].y)) + _3309;
        _3387 = (exp2(_3586 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3570 * cbSceneParam._m0[78u].z)) * _3560.z) / cbSceneParam._m0[78u].z)) + _3310;
        _3389 = _3569 * _3311;
    }
    else
    {
        _3383 = _3308;
        _3385 = _3309;
        _3387 = _3310;
        _3389 = _3311;
    }
    bool _3596;
    vec4 _3399;
    vec4 _3421;
    float _3423;
    float _3427;
    float _3428;
    float _3429;
    float _3430;
    bool _3440;
    for (;;)
    {
        _3399 = cbMatDynParam._m0[0u];
        float _3401 = roundEven(_3399.y);
        bool _3402 = _3401 == 3.0;
        float _3403 = log2(_3389);
        float _3410 = exp2(_3403 * cbSceneParam._m0[78u].x) * _3280;
        float _3411 = exp2(_3403 * cbSceneParam._m0[78u].y) * _3281;
        float _3412 = exp2(_3403 * cbSceneParam._m0[78u].z) * _3282;
        float _3419 = _1107 + (-0.5);
        _3421 = cbMtdParam._m0[1u];
        _3423 = _3421.y * _3419;
        float _3426 = (_3401 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3427 = _3426 * (_3402 ? _3410 : (_3410 + (cbSceneParam._m0[72u].w * _3383)));
        _3428 = _3426 * (_3402 ? _3411 : (_3411 + (cbSceneParam._m0[72u].w * _3385)));
        _3429 = _3426 * (_3402 ? _3412 : (_3412 + (cbSceneParam._m0[72u].w * _3387)));
        _3430 = _3419 * 0.999000012874603271484375;
        _3440 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3440)
        {
            if ((cbInstanceData._m0[_294 + 7u].x + _3430) < 0.5)
            {
                _3596 = true;
                break;
            }
        }
        uint _3537 = _1156 + uint(_3399.w);
        if ((cbInstanceData._m0[_3537].w < 1.0) && ((cbInstanceData._m0[_3537].w + _3430) < 0.5))
        {
            _3596 = true;
            break;
        }
        if ((_3423 + 1.0) < _3421.x)
        {
            _3596 = true;
            break;
        }
        _3596 = false;
        break;
    }
    float _3800;
    if (_3596)
    {
        discard_state = true;
        _3800 = 0.0;
    }
    else
    {
        _3800 = cbInstanceData._m0[_3283].w;
    }
    SV_Target.x = _3427;
    SV_Target.y = _3428;
    SV_Target.z = _3429;
    SV_Target.w = _3800;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3283].w;
    discard_exit();
}


