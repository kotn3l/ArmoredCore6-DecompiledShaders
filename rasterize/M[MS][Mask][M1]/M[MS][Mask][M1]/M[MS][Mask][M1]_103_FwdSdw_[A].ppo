#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1477;
float _4139;
float _4140;
float _4141;
float _4142;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _273 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4151 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _4162 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4173 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    uint _286 = uint(roundEven(NORMAL.w)) * 13u;
    uint _291 = _286 + 1u;
    uint _295 = _286 + 2u;
    float _304 = sqrt(((cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x)) + (cbInstanceData._m0[_295].x * cbInstanceData._m0[_295].x));
    float _305 = _304 * TEXCOORD.z;
    float _306 = _304 * TEXCOORD.w;
    vec4 _319 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _305) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _306) + cbTextureTilingScale._m0[13u].w));
    vec4 _343 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = _343.x * cbMtdParam._m0[11u].x;
    float _349 = _343.y * cbMtdParam._m0[11u].y;
    float _350 = _343.z * cbMtdParam._m0[11u].z;
    vec4 _369 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _305) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _306) + cbTextureTilingScale._m0[5u].w));
    vec4 _388 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _423 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _425 = _423.x;
    float _437 = dot(vec4(_425, _423.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _454 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _388.x) * 2.0) - ((((_425 - _437) * cbMtdParam._m0[23u].w) + _437) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4184 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _462 = (_455 * ((_369.x * cbMtdParam._m0[12u].x) - _348)) + _348;
    float _463 = (_455 * ((_369.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _464 = (_455 * ((_369.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _481 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _305) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _306) + cbTextureTilingScale._m0[3u].w));
    vec4 _501 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _503 = _501.x;
    float _513 = dot(vec4(_503, _501.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _527 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _388.y) * 2.0) - ((((_503 - _513) * cbMtdParam._m0[23u].w) + _513) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4195 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _528 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _535 = (_528 * ((_481.x * cbMtdParam._m0[13u].x) - _462)) + _462;
    float _536 = (_528 * ((_481.y * cbMtdParam._m0[13u].y) - _463)) + _463;
    float _537 = (_528 * ((_481.z * cbMtdParam._m0[13u].z) - _464)) + _464;
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _305) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _306) + cbTextureTilingScale._m0[24u].w));
    vec4 _573 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _575 = _573.x;
    float _585 = dot(vec4(_575, _573.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _597 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _388.z) * 2.0) - ((((_575 - _585) * cbMtdParam._m0[23u].w) + _585) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4206 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _598 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _605 = (_598 * ((_556.x * cbMtdParam._m0[14u].x) - _535)) + _535;
    float _606 = (_598 * ((_556.y * cbMtdParam._m0[14u].y) - _536)) + _536;
    float _607 = (_598 * ((_556.z * cbMtdParam._m0[14u].z) - _537)) + _537;
    float _611 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _319.x) * _605;
    float _614 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _319.y) * _606;
    float _617 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _319.z) * _607;
    float _624 = ((_605 - _611) * (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) + _611;
    float _625 = ((_606 - _614) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) + _614;
    float _626 = ((_607 - _617) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _617;
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _305) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _306) + cbTextureTilingScale._m0[20u].w));
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _305) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _306) + cbTextureTilingScale._m0[4u].w));
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _680 = _678.x;
    float _681 = _678.y;
    float _682 = _678.z;
    float _689 = ((_661.x - _680) * _455) + _680;
    float _690 = ((_661.y - _681) * _455) + _681;
    float _691 = ((_661.z - _682) * _455) + _682;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _305) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _306) + cbTextureTilingScale._m0[2u].w));
    float _714 = ((_703.x - _689) * _528) + _689;
    float _715 = ((_703.y - _690) * _528) + _690;
    float _716 = ((_703.z - _691) * _528) + _691;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _305) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _306) + cbTextureTilingScale._m0[23u].w));
    float _741 = ((_728.z - _716) * _598) + _716;
    float _744 = ((((_728.x - _714) * _598) + _714) * 2.0) + (-1.0);
    float _745 = ((((_728.y - _715) * _598) + _715) * 2.0) + (-1.0);
    float _746 = dot(vec2(_744, _745), vec2(_744, _745));
    float _4217 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _751 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _783 = (_744 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_638.x * 2.0) + (-1.0)))) + (((_771.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _784 = (_745 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_638.y * 2.0) + (-1.0)))) + (((_771.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _810 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _812 = _810.x;
    float _830 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _305) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _306) + cbTextureTilingScale._m0[9u].w)).x - _812) * _455) + _812;
    float _848 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _305) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _306) + cbTextureTilingScale._m0[21u].w)).x - _830) * _528) + _830;
    float _866 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _305) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _306) + cbTextureTilingScale._m0[10u].w)).x - _848) * _598) + _848;
    float _870 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _866) * cbMtdParam._m0[19u].z) + _866;
    float _875 = (((_638.z - _741) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _741;
    float _879 = ((_771.z - _875) * cbMtdParam._m0[19u].w) + _875;
    float _883 = cbMtdParam._m0[22u].x + _771.w;
    float _886 = fma(_751, _252 * NORMAL.x, fma(_784, _259 * TANGENT.x, (_245 * _237) * _783));
    float _889 = fma(_751, _252 * NORMAL.y, fma(_784, _259 * TANGENT.y, (_245 * _238) * _783));
    float _892 = fma(_751, _252 * NORMAL.z, fma(_784, _259 * TANGENT.z, (_245 * _239) * _783));
    float _896 = inversesqrt(dot(vec3(_886, _889, _892), vec3(_886, _889, _892)));
    float _897 = _896 * _886;
    float _898 = _896 * _889;
    float _899 = _896 * _892;
    float _4228 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _900 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4250 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _4261 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _4272 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _4283 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _905 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _919 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _959 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _969 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _959);
    float _970 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _959);
    float _971 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _959);
    float _975 = inversesqrt(dot(vec3(_969, _970, _971), vec3(_969, _970, _971)));
    float _976 = _969 * _975;
    float _977 = _970 * _975;
    float _978 = _971 * _975;
    vec4 _983 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _985 = _983.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1157 = sqrt(((_969 * _969) + (_970 * _970)) + (_971 * _971));
        float _1163 = (cbMatDynParam._m0[5u].x * _1157) + cbMatDynParam._m0[5u].y;
        float _4294 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1168 = (cbMatDynParam._m0[5u].z * _1157) + cbMatDynParam._m0[5u].w;
        float _4305 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) - _1164)) + _1164) < ((_985 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _996 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _997 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1015 = fma(_899, cbSceneParam._m0[5u].z, fma(_898, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _897));
    float _1018 = fma(_899, cbSceneParam._m0[6u].z, fma(_898, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _897));
    float _1021 = fma(_899, cbSceneParam._m0[7u].z, fma(_898, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _897));
    uint _1034 = _286 + 9u;
    uint _1035 = _1034 + uint(cbMatDynParam._m0[0u].w);
    float _1041 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0)))) * cbInstanceData._m0[_1035].x;
    float _1042 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * cbInstanceData._m0[_1035].y;
    float _1043 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) * cbInstanceData._m0[_1035].z;
    float _4316 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
    float _1044 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
    float _4327 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
    float _1045 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
    float _1046 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _1047 = 1.0 - _905;
    float _1048 = _1044 * _1047;
    float _1049 = _1045 * _1047;
    float _1050 = _1046 * _1047;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _905;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _905;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _905;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _996, cbSceneParam._m0[86u].y * _997));
    float _1074 = ((isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * TEXCOORD_5.w) * _1070.x;
    float _1075 = dot(vec3(_897, _898, _899), vec3(_976, _977, _978));
    float _1078 = _1075 * 2.0;
    float _1082 = (_1078 * _897) - _976;
    float _1083 = (_1078 * _898) - _977;
    float _1084 = (_1078 * _899) - _978;
    float _1088 = abs(dot(vec3(_976, _977, _978), vec3(_897, _898, _899)));
    float _4349 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1090 = sqrt(_900);
    float _1103 = exp2((_1090 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1090 * 3.0));
    float _1109 = (1.0 - _1103) * ((_1090 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1110 = _1103 * _1090;
    float _1138 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1142 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1146 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1476;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1201 = fma(_1146, cbModelParam._m0[26u].z, fma(_1142, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1138));
        float _1205 = fma(_1146, cbModelParam._m0[27u].z, fma(_1142, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1138));
        float _1209 = fma(_1146, cbModelParam._m0[28u].z, fma(_1142, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1138));
        float _1234 = _1138 + _897;
        float _1235 = _1142 + _898;
        float _1236 = _1146 + _899;
        float _1246 = fma(_1236, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1234)) - _1201;
        float _1247 = fma(_1236, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1234)) - _1205;
        float _1248 = fma(_1236, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1234)) - _1209;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1201 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1205 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[34u].z) + ((((((_1209 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1304 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1270.x + (-0.5));
        float _1306 = _1304 * (_1270.y + (-0.5));
        float _1307 = _1304 * (_1270.z + (-0.5));
        float _1314 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1277.x + (-0.5));
        float _1316 = _1314 * (_1277.y + (-0.5));
        float _1317 = _1314 * (_1277.z + (-0.5));
        float _1324 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1284.x + (-0.5));
        float _1326 = _1324 * (_1284.y + (-0.5));
        float _1327 = _1324 * (_1284.z + (-0.5));
        float _1334 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1291.x + (-0.5));
        float _1336 = _1334 * (_1291.y + (-0.5));
        float _1337 = _1334 * (_1291.z + (-0.5));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = _1305 * 0.5;
        float _1342 = _1315 * 0.5;
        float _1343 = _1325 * 0.5;
        float _1344 = dot(vec3(_1341, _1342, _1343), vec3(_1341, _1342, _1343));
        float _1349 = (_1344 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1344);
        float _1358 = (dot(vec3(_897, _898, _899), vec3(_1349 * _1341, _1349 * _1342, _1349 * _1343)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1368 = sqrt(((_1342 * _1342) + (_1341 * _1341)) + (_1343 * _1343)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _4397 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1370 + 1.0))) + _1375) * _1338;
        float _1385 = _1306 * 0.5;
        float _1386 = _1316 * 0.5;
        float _1387 = _1326 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_897, _898, _899), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _4430 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1412 + 1.0))) + _1417) * _1339;
        float _1427 = _1307 * 0.5;
        float _1428 = _1317 * 0.5;
        float _1429 = _1327 * 0.5;
        float _1430 = dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429));
        float _1435 = (_1430 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1430);
        float _1443 = (dot(vec3(_897, _898, _899), vec3(_1435 * _1427, _1435 * _1428, _1435 * _1429)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1452 = sqrt(((_1428 * _1428) + (_1427 * _1427)) + (_1429 * _1429)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1454 = _1453 * 2.0;
        float _1458 = (1.0 - _1453) / (_1453 + 1.0);
        float _4463 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1468 = ((((1.0 - _1459) * (_1454 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1454 + 1.0))) + _1459) * _1340;
        _1476 = _1307;
        _1478 = _1306;
        _1479 = _1305;
        _1480 = _1317;
        _1481 = _1316;
        _1482 = _1315;
        _1483 = _1327;
        _1484 = _1326;
        _1485 = _1325;
        _1486 = _1340;
        _1487 = _1339;
        _1488 = _1338;
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1490 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
        _1491 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)));
    }
    else
    {
        _1476 = _1477;
        _1478 = _1477;
        _1479 = _1477;
        _1480 = _1477;
        _1481 = _1477;
        _1482 = _1477;
        _1483 = _1477;
        _1484 = _1477;
        _1485 = _1477;
        _1486 = _1477;
        _1487 = _1477;
        _1488 = _1477;
        _1489 = 0.0;
        _1490 = 0.0;
        _1491 = 0.0;
    }
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1517 = fma(_1146, cbModelParam._m0[30u].z, fma(_1142, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138));
        float _1521 = fma(_1146, cbModelParam._m0[31u].z, fma(_1142, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138));
        float _1525 = fma(_1146, cbModelParam._m0[32u].z, fma(_1142, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138));
        float _1548 = _1138 + _897;
        float _1549 = _1142 + _898;
        float _1550 = _1146 + _899;
        float _1560 = fma(_1550, cbModelParam._m0[30u].z, fma(_1549, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1548)) - _1517;
        float _1561 = fma(_1550, cbModelParam._m0[31u].z, fma(_1549, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1548)) - _1521;
        float _1562 = fma(_1550, cbModelParam._m0[32u].z, fma(_1549, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1548)) - _1525;
        float _1566 = inversesqrt(dot(vec3(_1560, _1561, _1562), vec3(_1560, _1561, _1562)));
        float _1579 = ((_1566 * _1560) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1517 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1580 = ((_1566 * _1561) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1521 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1581 = ((_1566 * _1562) / cbModelParam._m0[35u].z) + ((((((_1525 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1583 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1590 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1597 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1579, _1580, _1581), 0.0);
        float _1616 = exp2((_1583.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1583.x + (-0.5));
        float _1618 = _1616 * (_1583.y + (-0.5));
        float _1619 = _1616 * (_1583.z + (-0.5));
        float _1626 = exp2((_1590.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1590.x + (-0.5));
        float _1628 = _1626 * (_1590.y + (-0.5));
        float _1629 = _1626 * (_1590.z + (-0.5));
        float _1636 = exp2((_1597.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1597.x + (-0.5));
        float _1638 = _1636 * (_1597.y + (-0.5));
        float _1639 = _1636 * (_1597.z + (-0.5));
        float _1646 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1647 = _1646 * (_1604.x + (-0.5));
        float _1648 = _1646 * (_1604.y + (-0.5));
        float _1649 = _1646 * (_1604.z + (-0.5));
        float _1650 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1651 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1652 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1653 = _1617 * 0.5;
        float _1654 = _1627 * 0.5;
        float _1655 = _1637 * 0.5;
        float _1656 = dot(vec3(_1653, _1654, _1655), vec3(_1653, _1654, _1655));
        float _1661 = (_1656 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1656);
        float _1669 = (dot(vec3(_897, _898, _899), vec3(_1661 * _1653, _1661 * _1654, _1661 * _1655)) + 1.0) * 0.5;
        float _4504 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1678 = sqrt(((_1654 * _1654) + (_1653 * _1653)) + (_1655 * _1655)) / (_1650 + 9.9999997473787516355514526367188e-06);
        float _4515 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _1680 = _1679 * 2.0;
        float _1684 = (1.0 - _1679) / (_1679 + 1.0);
        float _4526 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1685 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1694 = ((((1.0 - _1685) * (_1680 + 2.0)) * exp2(log2(isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_1680 + 1.0))) + _1685) * _1650;
        float _1695 = _1618 * 0.5;
        float _1696 = _1628 * 0.5;
        float _1697 = _1638 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_897, _898, _899), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4537 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1651 + 9.9999997473787516355514526367188e-06);
        float _4548 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4559 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0))) * (_1722 + 1.0))) + _1727) * _1651;
        float _1737 = _1619 * 0.5;
        float _1738 = _1629 * 0.5;
        float _1739 = _1639 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_897, _898, _899), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4570 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1652 + 9.9999997473787516355514526367188e-06);
        float _4581 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4592 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (_1764 + 1.0))) + _1769) * _1652;
        _1786 = _1619;
        _1787 = _1618;
        _1788 = _1617;
        _1789 = _1629;
        _1790 = _1628;
        _1791 = _1627;
        _1792 = _1639;
        _1793 = _1638;
        _1794 = _1637;
        _1795 = _1652;
        _1796 = _1651;
        _1797 = _1650;
        _1798 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)));
        _1799 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1800 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
    }
    else
    {
        _1786 = _1477;
        _1787 = _1477;
        _1788 = _1477;
        _1789 = _1477;
        _1790 = _1477;
        _1791 = _1477;
        _1792 = _1477;
        _1793 = _1477;
        _1794 = _1477;
        _1795 = _1477;
        _1796 = _1477;
        _1797 = _1477;
        _1798 = 0.0;
        _1799 = 0.0;
        _1800 = 0.0;
    }
    float _1810 = (cbModelParam._m0[1u].x * (_1798 - _1489)) + _1489;
    float _1811 = (cbModelParam._m0[1u].x * (_1799 - _1490)) + _1490;
    float _1812 = (cbModelParam._m0[1u].x * (_1800 - _1491)) + _1491;
    float _1833 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1836 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1839 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1810));
    float _1854 = _1082 * 0.5;
    float _1855 = _1083 * 0.5;
    float _1856 = _1084 * 0.5;
    float _1857 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1788, _1791, _1794, _1797));
    float _1860 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1787, _1790, _1793, _1796));
    float _1863 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1786, _1789, _1792, _1795));
    float _1897;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1870 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1476, _1480, _1483, _1486));
        float _1874 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1478, _1481, _1484, _1487));
        float _1878 = dot(vec4(_1854, _1855, _1856, 1.0), vec4(_1479, _1482, _1485, _1488));
        float _1885 = dot(vec4(cbModelParam._m0[39u]), vec4(_1854, _1855, _1856, 1.0));
        _1897 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)), isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1885) ? 0.0 : (isnan(0.0) ? _1885 : max(0.0, _1885))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1897 = 1.0;
    }
    float _1908;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1899 = dot(vec4(cbModelParam._m0[40u]), vec4(_1854, _1855, _1856, 1.0));
        _1908 = dot(vec3(isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0)), isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1899) ? 0.0 : (isnan(0.0) ? _1899 : max(0.0, _1899))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1908 = 1.0;
    }
    float _1912 = (_1908 * cbModelParam._m0[1u].x) + (_1897 * (1.0 - cbModelParam._m0[1u].x));
    float _1922 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _900);
    float _1923 = isnan(_1922) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1922 : min(cbModelParam._m0[25u].z, _1922));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1971 = fma(_1146, cbModelParam._m0[13u].z, fma(_1142, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138)) + cbModelParam._m0[13u].w;
        float _1975 = fma(_1146, cbModelParam._m0[14u].z, fma(_1142, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138)) + cbModelParam._m0[14u].w;
        float _1979 = fma(_1146, cbModelParam._m0[15u].z, fma(_1142, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138)) + cbModelParam._m0[15u].w;
        float _1982 = fma(_1084, cbModelParam._m0[13u].z, fma(_1083, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1082));
        float _1985 = fma(_1084, cbModelParam._m0[14u].z, fma(_1083, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1082));
        float _1988 = fma(_1084, cbModelParam._m0[15u].z, fma(_1083, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1082));
        float _2016;
        if (_1982 > 0.0)
        {
            _2016 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2016 = frontier_phi_17_15_ladder;
        }
        float _2188;
        if (_1985 > 0.0)
        {
            _2188 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2188 = frontier_phi_26_22_ladder;
        }
        float _2483;
        if (_1988 > 0.0)
        {
            _2483 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2483 = frontier_phi_38_33_ladder;
        }
        float _2485 = isnan(_2188) ? _2016 : (isnan(_2016) ? _2188 : min(_2016, _2188));
        float _2486 = isnan(_2483) ? _2485 : (isnan(_2485) ? _2483 : min(_2485, _2483));
        float _2490 = (_2486 * _1982) + _1971;
        float _2491 = (_2486 * _1985) + _1975;
        float _2492 = (_2486 * _1988) + _1979;
        float _2493 = _2486 * 9.9999997473787516355514526367188e-05;
        float _2495 = (-1.0) - _2493;
        float _2497 = _2493 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2492 > _2497) || ((_2492 < _2495) || ((_2491 > _2497) || ((_2491 < _2495) || ((_2490 < _2495) || (_2490 > _2497))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2492, cbModelParam._m0[9u].z, fma(_2491, cbModelParam._m0[9u].y, _2490 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2492, cbModelParam._m0[10u].z, fma(_2491, cbModelParam._m0[10u].y, _2490 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2492, cbModelParam._m0[11u].z, fma(_2491, cbModelParam._m0[11u].y, _2490 * cbModelParam._m0[11u].x))), _1923);
            frontier_phi_16_38_ladder = _2637.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2637.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2637.x * cbModelParam._m0[1u].y;
        }
        _2004 = frontier_phi_16_38_ladder_2;
        _2006 = frontier_phi_16_38_ladder_1;
        _2008 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1082, _1083, _1084), _1923);
        _2004 = _1992.x * cbModelParam._m0[1u].y;
        _2006 = _1992.y * cbModelParam._m0[1u].y;
        _2008 = _1992.z * cbModelParam._m0[1u].y;
    }
    float _2012 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _900);
    float _2013 = isnan(_2012) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2012 : min(cbModelParam._m0[25u].w, _2012));
    float _2103;
    float _2105;
    float _2107;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2067 = fma(_1146, cbModelParam._m0[21u].z, fma(_1142, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138)) + cbModelParam._m0[21u].w;
        float _2071 = fma(_1146, cbModelParam._m0[22u].z, fma(_1142, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138)) + cbModelParam._m0[22u].w;
        float _2075 = fma(_1146, cbModelParam._m0[23u].z, fma(_1142, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138)) + cbModelParam._m0[23u].w;
        float _2078 = fma(_1084, cbModelParam._m0[21u].z, fma(_1083, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1082));
        float _2081 = fma(_1084, cbModelParam._m0[22u].z, fma(_1083, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1082));
        float _2084 = fma(_1084, cbModelParam._m0[23u].z, fma(_1083, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1082));
        float _2193;
        if (_2078 > 0.0)
        {
            _2193 = abs((1.0 - _2067) / _2078);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2067 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2193 = frontier_phi_28_24_ladder;
        }
        float _2510;
        if (_2081 > 0.0)
        {
            _2510 = abs((1.0 - _2071) / _2081);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2071 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2510 = frontier_phi_40_35_ladder;
        }
        float _2848;
        if (_2084 > 0.0)
        {
            _2848 = abs((1.0 - _2075) / _2084);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2084 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2075 + 1.0) / _2084);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2848 = frontier_phi_50_47_ladder;
        }
        float _2850 = isnan(_2510) ? _2193 : (isnan(_2193) ? _2510 : min(_2193, _2510));
        float _2851 = isnan(_2848) ? _2850 : (isnan(_2850) ? _2848 : min(_2850, _2848));
        float _2855 = (_2851 * _2078) + _2067;
        float _2856 = (_2851 * _2081) + _2071;
        float _2857 = (_2851 * _2084) + _2075;
        float _2858 = _2851 * 9.9999997473787516355514526367188e-05;
        float _2859 = (-1.0) - _2858;
        float _2861 = _2858 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2857 > _2861) || ((_2857 < _2859) || ((_2856 > _2861) || ((_2856 < _2859) || ((_2855 < _2859) || (_2855 > _2861))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2979 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2857, cbModelParam._m0[17u].z, fma(_2856, cbModelParam._m0[17u].y, _2855 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2857, cbModelParam._m0[18u].z, fma(_2856, cbModelParam._m0[18u].y, _2855 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2857, cbModelParam._m0[19u].z, fma(_2856, cbModelParam._m0[19u].y, _2855 * cbModelParam._m0[19u].x))), _2013);
            frontier_phi_25_50_ladder = _2979.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2979.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2979.x * cbModelParam._m0[1u].z;
        }
        _2103 = frontier_phi_25_50_ladder_2;
        _2105 = frontier_phi_25_50_ladder_1;
        _2107 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2087 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1082, _1083, _1084), _2013);
        _2103 = _2087.x * cbModelParam._m0[1u].z;
        _2105 = _2087.y * cbModelParam._m0[1u].z;
        _2107 = _2087.z * cbModelParam._m0[1u].z;
    }
    float _2120 = (((_1109 * _1058) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2103 - _2004)) + _2004);
    float _2122 = (((_1109 * _1060) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2105 - _2006)) + _2006);
    float _2124 = (((_1109 * _1061) + _1110) * _1074) * ((cbModelParam._m0[1u].w * (_2107 - _2008)) + _2008);
    float _2127 = fma(_2124, cbSceneParam._m0[89u].z, fma(_2122, cbSceneParam._m0[89u].y, _2120 * cbSceneParam._m0[89u].x));
    float _2130 = fma(_2124, cbSceneParam._m0[90u].z, fma(_2122, cbSceneParam._m0[90u].y, _2120 * cbSceneParam._m0[90u].x));
    float _2133 = fma(_2124, cbSceneParam._m0[91u].z, fma(_2122, cbSceneParam._m0[91u].y, _2120 * cbSceneParam._m0[91u].x));
    float _2167 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2171 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2175 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2179 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2180 = _2167 / _2179;
    float _2181 = _2171 / _2179;
    float _2182 = _2175 / _2179;
    float _2329;
    float _2330;
    float _2331;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2209 = ((uint(_2182 > cbSceneParam._m0[59u].y) + uint(_2182 > cbSceneParam._m0[59u].x)) + uint(_2182 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2210 = _2209 + 43u;
        uint _2218 = _2209 + 44u;
        uint _2226 = _2209 + 45u;
        uint _2234 = _2209 + 46u;
        float _2245 = fma(_2179, cbSceneParam._m0[_2210].w, fma(_2175, cbSceneParam._m0[_2210].z, fma(_2171, cbSceneParam._m0[_2210].y, _2167 * cbSceneParam._m0[_2210].x)));
        float _2249 = fma(_2179, cbSceneParam._m0[_2218].w, fma(_2175, cbSceneParam._m0[_2218].z, fma(_2171, cbSceneParam._m0[_2218].y, _2167 * cbSceneParam._m0[_2218].x)));
        float _2257 = fma(_2179, cbSceneParam._m0[_2234].w, fma(_2175, cbSceneParam._m0[_2234].z, fma(_2171, cbSceneParam._m0[_2234].y, _2167 * cbSceneParam._m0[_2234].x)));
        float _2262 = cbSceneParam._m0[33u].z * _2257;
        float _2264 = cbSceneParam._m0[33u].w * _2257;
        float _2267 = fma(_2179, cbSceneParam._m0[_2226].w, fma(_2175, cbSceneParam._m0[_2226].z, fma(_2171, cbSceneParam._m0[_2226].y, _2167 * cbSceneParam._m0[_2226].x))) / _2257;
        float _2315 = (cbSceneParam._m0[33u].x - sqrt(((_2181 * _2181) + (_2180 * _2180)) + (_2182 * _2182))) * cbSceneParam._m0[33u].y;
        float _4718 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
        float _2322 = (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2262 + _2245) / _2257, (_2264 + _2249) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2264 + _2245) / _2257, (_2249 - _2262) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 - _2262) / _2257, (_2249 - _2264) / _2257), _2267), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 - _2264) / _2257, (_2262 + _2249) / _2257), _2267), 0.0)).x), vec4(0.25)));
        _2329 = 1.0 - (_2322 * cbSceneParam._m0[34u].x);
        _2330 = 1.0 - (_2322 * cbSceneParam._m0[34u].y);
        _2331 = 1.0 - (_2322 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2329 = 1.0;
        _2330 = 1.0;
        _2331 = 1.0;
    }
    float _2395;
    float _2397;
    float _2399;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2383 = fma(_2179, cbSceneParam._m0[63u].w, fma(_2175, cbSceneParam._m0[63u].z, fma(_2171, cbSceneParam._m0[63u].y, _2167 * cbSceneParam._m0[63u].x)));
        float _2384 = fma(_2179, cbSceneParam._m0[60u].w, fma(_2175, cbSceneParam._m0[60u].z, fma(_2171, cbSceneParam._m0[60u].y, _2167 * cbSceneParam._m0[60u].x))) / _2383;
        float _2385 = fma(_2179, cbSceneParam._m0[61u].w, fma(_2175, cbSceneParam._m0[61u].z, fma(_2171, cbSceneParam._m0[61u].y, _2167 * cbSceneParam._m0[61u].x))) / _2383;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2384 >= cbSceneParam._m0[64u].x) && (_2385 >= cbSceneParam._m0[64u].y)) && (_2384 <= cbSceneParam._m0[64u].z)) && (_2385 <= cbSceneParam._m0[64u].w))
        {
            float _2523 = fma(_2179, cbSceneParam._m0[62u].w, fma(_2175, cbSceneParam._m0[62u].z, fma(_2171, cbSceneParam._m0[62u].y, _2167 * cbSceneParam._m0[62u].x))) / _2383;
            float _2527 = isnan(cbSceneParam._m0[41u].w) ? _2523 : (isnan(_2523) ? cbSceneParam._m0[41u].w : max(_2523, cbSceneParam._m0[41u].w));
            float _2570 = (cbSceneParam._m0[33u].x - sqrt(((_2181 * _2181) + (_2180 * _2180)) + (_2182 * _2182))) * cbSceneParam._m0[33u].y;
            float _4734 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
            float _2577 = (isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2384, cbSceneParam._m0[33u].w + _2385), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2384, _2385 - cbSceneParam._m0[33u].z), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2384 - cbSceneParam._m0[33u].z, _2385 - cbSceneParam._m0[33u].w), _2527), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2384 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2385), _2527), 0.0)).x), vec4(0.25)));
            float _2581 = 1.0 - (_2577 * cbSceneParam._m0[34u].x);
            float _2582 = 1.0 - (_2577 * cbSceneParam._m0[34u].y);
            float _2583 = 1.0 - (_2577 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2583) ? _2331 : (isnan(_2331) ? _2583 : min(_2331, _2583));
            frontier_phi_37_36_ladder_1 = isnan(_2582) ? _2330 : (isnan(_2330) ? _2582 : min(_2330, _2582));
            frontier_phi_37_36_ladder_2 = isnan(_2581) ? _2329 : (isnan(_2329) ? _2581 : min(_2329, _2581));
        }
        else
        {
            frontier_phi_37_36_ladder = _2331;
            frontier_phi_37_36_ladder_1 = _2330;
            frontier_phi_37_36_ladder_2 = _2329;
        }
        _2395 = frontier_phi_37_36_ladder_2;
        _2397 = frontier_phi_37_36_ladder_1;
        _2399 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2395 = _2329;
        _2397 = _2330;
        _2399 = _2331;
    }
    uvec4 _2404 = floatBitsToUint(cbInstanceData._m0[_286 + 5u]);
    uint _2406 = _2404.x * 14u;
    uint _2407 = _2406 + 13u;
    float _2414 = _1074 + (-1.0);
    float _2419 = (cbLight._m0[_2407].x * _2414) + 1.0;
    float _2420 = (cbLight._m0[_2407].y * _2414) + 1.0;
    float _2421 = (cbLight._m0[_2407].z * _2414) + 1.0;
    float _2422 = (cbLight._m0[_2407].w * _2414) + 1.0;
    uint _2423 = _2406 + 5u;
    float _2429 = isnan(1.0) ? _2420 : (isnan(_2420) ? 1.0 : min(_2420, 1.0));
    uint _2433 = _2406 + 4u;
    float _2442 = isnan(1.0) ? _2419 : (isnan(_2419) ? 1.0 : min(_2419, 1.0));
    uint _2446 = _2406 | 1u;
    float _2457 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_897, _898, _899));
    float _2460 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_897, _898, _899));
    float _4770 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _4781 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2465 = (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * 0.3183098733425140380859375;
    float _2467 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * 0.3183098733425140380859375;
    float _2474 = ((cbLight._m0[_2423].x * _2429) * _2467) + (((cbLight._m0[_2433].x * _2395) * _2442) * _2465);
    float _2475 = ((_2429 * cbLight._m0[_2423].y) * _2467) + (((cbLight._m0[_2433].y * _2397) * _2442) * _2465);
    float _2476 = ((_2429 * cbLight._m0[_2423].z) * _2467) + (((cbLight._m0[_2433].z * _2399) * _2442) * _2465);
    uvec4 _2480 = floatBitsToUint(cbLight._m0[_2406 + 12u]);
    bool _2482 = _2480.x == 0u;
    float _2584;
    float _2586;
    float _2588;
    if (_2482)
    {
        _2584 = _2474;
        _2586 = _2475;
        _2588 = _2476;
    }
    else
    {
        uint _2592 = _2406 + 6u;
        float _2608 = (dot(vec3(cbLight._m0[_2406 + 2u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2609 = _2608 * _2608;
        float _4792 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2610 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2611 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2584 = (((cbLight._m0[_2592].x * 0.3183098733425140380859375) * _2610) * _2611) + _2474;
        _2586 = (((cbLight._m0[_2592].y * 0.3183098733425140380859375) * _2610) * _2611) + _2475;
        _2588 = (((cbLight._m0[_2592].z * 0.3183098733425140380859375) * _2610) * _2611) + _2476;
    }
    bool _2591 = _2480.y == 0u;
    float _2646;
    float _2648;
    float _2650;
    if (_2591)
    {
        _2646 = _2584;
        _2648 = _2586;
        _2650 = _2588;
    }
    else
    {
        uint _2819 = _2406 + 7u;
        float _2835 = (dot(vec3(cbLight._m0[_2406 + 3u].xyz), vec3(_897, _898, _899)) * 0.5) + 0.5;
        float _2836 = _2835 * _2835;
        float _4808 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2837 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2838 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2646 = (((cbLight._m0[_2819].x * 0.3183098733425140380859375) * _2837) * _2838) + _2584;
        _2648 = (((cbLight._m0[_2819].y * 0.3183098733425140380859375) * _2837) * _2838) + _2586;
        _2650 = (((cbLight._m0[_2819].z * 0.3183098733425140380859375) * _2837) * _2838) + _2588;
    }
    uint _2653 = _2406 + 8u;
    float _2666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _900) * 0.949999988079071044921875);
    float _2667 = _2666 * _2666;
    float _2668 = cbLight._m0[_2406].x + _976;
    float _2669 = cbLight._m0[_2406].y + _977;
    float _2670 = cbLight._m0[_2406].z + _978;
    float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
    float _2675 = _2674 * _2668;
    float _2676 = _2674 * _2669;
    float _2677 = _2674 * _2670;
    float _2678 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2406].xyz));
    float _4824 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
    float _2681 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
    float _4835 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2682 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
    float _2683 = dot(vec3(_897, _898, _899), vec3(_2675, _2676, _2677));
    float _4846 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2686 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
    float _2687 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2675, _2676, _2677));
    float _4857 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
    float _2691 = _2667 * _2667;
    float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
    float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
    float _2704 = 0.959999978542327880859375 - _1055;
    float _2706 = 0.959999978542327880859375 - _1056;
    float _2707 = 0.959999978542327880859375 - _1057;
    float _2714 = 1.0 - _2667;
    float _2725 = (0.5 / (((_2682 * ((_2681 * _2714) + _2667)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2714) + _2667) * _2681))) * _2681;
    float _4868 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2727 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
    uint _2741 = _2406 + 9u;
    float _2752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _900) * 0.949999988079071044921875);
    float _2753 = _2752 * _2752;
    float _2754 = cbLight._m0[_2446].x + _976;
    float _2755 = cbLight._m0[_2446].y + _977;
    float _2756 = cbLight._m0[_2446].z + _978;
    float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
    float _2761 = _2760 * _2754;
    float _2762 = _2760 * _2755;
    float _2763 = _2760 * _2756;
    float _2764 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2446].xyz));
    float _4879 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
    float _2768 = dot(vec3(_897, _898, _899), vec3(_2761, _2762, _2763));
    float _4890 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2771 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
    float _2772 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2761, _2762, _2763));
    float _4901 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2776 = _2753 * _2753;
    float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
    float _2787 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
    float _2794 = 1.0 - _2753;
    float _2804 = (0.5 / (((_2682 * ((_2767 * _2794) + _2753)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2794) + _2753) * _2767))) * _2767;
    float _4912 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
    float _2806 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
    float _2816 = (((((_2787 * _2704) + _1058) * cbLight._m0[_2741].x) * _2806) * _2429) + ((((cbLight._m0[_2653].x * _2395) * ((_2703 * _2704) + _1058)) * _2727) * _2442);
    float _2817 = (((((_2787 * _2706) + _1060) * cbLight._m0[_2741].y) * _2806) * _2429) + ((((cbLight._m0[_2653].y * _2397) * ((_2703 * _2706) + _1060)) * _2727) * _2442);
    float _2818 = (((((_2787 * _2707) + _1061) * cbLight._m0[_2741].z) * _2806) * _2429) + ((((cbLight._m0[_2653].z * _2399) * ((_2703 * _2707) + _1061)) * _2727) * _2442);
    float _2874;
    float _2876;
    float _2878;
    if (_2482)
    {
        _2874 = _2816;
        _2876 = _2817;
        _2878 = _2818;
    }
    else
    {
        uint _2880 = _2406 + 2u;
        uint _2884 = _2406 + 10u;
        float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2880].w)) * _900) * 0.949999988079071044921875);
        float _2899 = _2898 * _2898;
        float _2900 = cbLight._m0[_2880].x + _976;
        float _2901 = cbLight._m0[_2880].y + _977;
        float _2902 = cbLight._m0[_2880].z + _978;
        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
        float _2907 = _2906 * _2900;
        float _2908 = _2906 * _2901;
        float _2909 = _2906 * _2902;
        float _2910 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2880].xyz));
        float _4923 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2914 = dot(vec3(_897, _898, _899), vec3(_2907, _2908, _2909));
        float _4934 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
        float _2918 = dot(vec3(cbLight._m0[_2880].xyz), vec3(_2907, _2908, _2909));
        float _4945 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2922 = _2899 * _2899;
        float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
        float _2933 = exp2(log2(1.0 - (isnan(1.0) ? _4945 : (isnan(_4945) ? 1.0 : min(_4945, 1.0)))) * 5.0);
        float _2940 = 1.0 - _2899;
        float _2950 = (0.5 / (((_2682 * ((_2913 * _2940) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _2940) + _2899) * _2913))) * _2913;
        float _4956 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2952 = (isnan(1.0) ? _4956 : (isnan(_4956) ? 1.0 : min(_4956, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
        float _2953 = isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0));
        _2874 = (((((_2933 * _2704) + _1058) * cbLight._m0[_2884].x) * _2952) * _2953) + _2816;
        _2876 = (((((_2933 * _2706) + _1060) * cbLight._m0[_2884].y) * _2952) * _2953) + _2817;
        _2878 = (((((_2933 * _2707) + _1061) * cbLight._m0[_2884].z) * _2952) * _2953) + _2818;
    }
    float _2984;
    float _2986;
    float _2988;
    if (_2591)
    {
        _2984 = _2874;
        _2986 = _2876;
        _2988 = _2878;
    }
    else
    {
        uint _2995 = _2406 + 3u;
        uint _2999 = _2406 + 11u;
        float _3013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2995].w)) * _900) * 0.949999988079071044921875);
        float _3014 = _3013 * _3013;
        float _3015 = cbLight._m0[_2995].x + _976;
        float _3016 = cbLight._m0[_2995].y + _977;
        float _3017 = cbLight._m0[_2995].z + _978;
        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
        float _3022 = _3021 * _3015;
        float _3023 = _3021 * _3016;
        float _3024 = _3021 * _3017;
        float _3025 = dot(vec3(_897, _898, _899), vec3(cbLight._m0[_2995].xyz));
        float _4972 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _3029 = dot(vec3(_897, _898, _899), vec3(_3022, _3023, _3024));
        float _4983 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3032 = isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0));
        float _3033 = dot(vec3(cbLight._m0[_2995].xyz), vec3(_3022, _3023, _3024));
        float _4994 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
        float _3037 = _3014 * _3014;
        float _3041 = ((_3032 * _3032) * (_3037 + (-1.0))) + 1.0;
        float _3048 = exp2(log2(1.0 - (isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0)))) * 5.0);
        float _3055 = 1.0 - _3014;
        float _3065 = (0.5 / (((_2682 * ((_3028 * _3055) + _3014)) + 9.9999999392252902907785028219223e-09) + (((_2682 * _3055) + _3014) * _3028))) * _3028;
        float _5005 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        float _3067 = (isnan(1.0) ? _5005 : (isnan(_5005) ? 1.0 : min(_5005, 1.0))) * (_3037 / ((_3041 * _3041) * 3.141590118408203125));
        float _3068 = isnan(1.0) ? _2422 : (isnan(_2422) ? 1.0 : min(_2422, 1.0));
        _2984 = (((((_3048 * _2704) + _1058) * cbLight._m0[_2999].x) * _3067) * _3068) + _2874;
        _2986 = (((((_3048 * _2706) + _1060) * cbLight._m0[_2999].y) * _3067) * _3068) + _2876;
        _2988 = (((((_3048 * _2707) + _1061) * cbLight._m0[_2999].z) * _3067) * _3068) + _2878;
    }
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    float _3142;
    float _3144;
    if (_2404.y == 0u)
    {
        uvec4 _3089 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3090 = _3089.x;
        uint _3101 = uint((float(_3089.y) * floor(float(uint(cbSceneParam._m0[85u].y * _997) / _3090))) + floor(float(uint(cbSceneParam._m0[85u].x * _996) / _3090)));
        float _3111 = (log2(_2182 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3112 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
        uint _3115 = uint(isnan(14.0) ? _3112 : (isnan(_3112) ? 14.0 : min(_3112, 14.0)));
        uvec4 _3120 = texelFetch(g_lightClusterGridBuffer, int(((_3115 << 2u) + (_3101 << 6u)) >> 2u));
        uint _3121 = _3120.x;
        uint _3122 = _3089.z;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((((1u << ((_3122 >> 4u) & 15u)) + 4294967295u) & _3121) == 0u) || ((_3122 & 240u) == 0u))
        {
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
        }
        else
        {
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            uint _3360 = 0u;
            uint _3369;
            bool _3370;
            for (;;)
            {
                _3369 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3360 << 2u)) >> 2u)).x;
                _3370 = _3369 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3370)
                {
                    frontier_phi_71_pred = _3359;
                    frontier_phi_71_pred_1 = _3358;
                    frontier_phi_71_pred_2 = _3357;
                    frontier_phi_71_pred_3 = _3356;
                    frontier_phi_71_pred_4 = _3355;
                    frontier_phi_71_pred_5 = _3354;
                }
                else
                {
                    float _3499;
                    float _3500;
                    float _3501;
                    float _3502;
                    float _3503;
                    float _3504;
                    uint _3505;
                    _3499 = _3354;
                    _3500 = _3355;
                    _3501 = _3356;
                    _3502 = _3357;
                    _3503 = _3358;
                    _3504 = _3359;
                    _3505 = _3369;
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    for (;;)
                    {
                        uint _3509 = uint(findLSB(_3505)) + (_3360 << 5u);
                        uint _3506 = (_3505 + 4294967295u) & _3505;
                        uint _3511 = _3509 * 48u;
                        vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3511)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3511 + 3u)).x));
                        uint _3531 = (_3509 * 48u) + 4u;
                        vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3531)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3531 + 3u)).x));
                        uint _3550 = (_3509 * 48u) + 8u;
                        vec3 _3561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3550)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3550 + 2u)).x));
                        float _3565 = _3525.x - _2180;
                        float _3566 = _3525.y - _2181;
                        float _3567 = _3525.z - _2182;
                        float _3568 = dot(vec3(_3565, _3566, _3567), vec3(_3565, _3566, _3567));
                        float _3571 = inversesqrt(_3568);
                        float _3572 = _3571 * _3565;
                        float _3573 = _3571 * _3566;
                        float _3574 = _3571 * _3567;
                        float _3575 = dot(vec3(_1015, _1018, _1021), vec3(_3572, _3573, _3574));
                        float _3580 = 1.0 - (_3568 * _3525.w);
                        float _5031 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                        float _3582 = sqrt(_3568) * _3544.w;
                        float _3585 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                        float _3586 = _3585 * _3585;
                        float _3589 = ((1.0 - _3586) * _3575) + _3586;
                        float _3592 = _3582 * _3582;
                        float _3596 = ((isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0))) * _3581) / ((_3592 * 0.699999988079071044921875) + 1.0);
                        float _3600 = (-0.0) - _2180;
                        float _3601 = (-0.0) - _2181;
                        float _3602 = (-0.0) - _2182;
                        float _3606 = inversesqrt(dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602)));
                        float _3607 = _3606 * _3600;
                        float _3608 = _3606 * _3601;
                        float _3609 = _3606 * _3602;
                        float _3616 = exp2(log2(1.0 / ((_3592 * 3.5) + 5.0)) * 0.25);
                        float _3617 = 1.0 - _1090;
                        float _3624 = sqrt(1.0 - ((1.0 - (_3617 * _3617)) * (1.0 - (_3616 * _3616))));
                        float _3625 = _3624 * _3624;
                        float _3626 = _3625 * _3625;
                        float _3627 = _3607 + _3572;
                        float _3628 = _3608 + _3573;
                        float _3629 = _3609 + _3574;
                        float _3633 = inversesqrt(dot(vec3(_3627, _3628, _3629), vec3(_3627, _3628, _3629)));
                        float _3637 = dot(vec3(_1015, _1018, _1021), vec3(_3607, _3608, _3609));
                        float _5047 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                        float _3640 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3641 = dot(vec3(_1015, _1018, _1021), vec3(_3633 * _3627, _3633 * _3628, _3633 * _3629));
                        float _5058 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                        float _3644 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                        float _3648 = ((_3644 * _3644) * (_3626 + (-1.0))) + 1.0;
                        float _3649 = _3585 * _3625;
                        float _3650 = _3649 * _3649;
                        float _3653 = ((1.0 - _3650) * _3575) + _3650;
                        float _5069 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                        float _3654 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
                        float _3655 = 1.0 - _3625;
                        float _3665 = (0.5 / (((_3654 * ((_3640 * _3655) + _3625)) + 9.9999999392252902907785028219223e-09) + (((_3654 * _3655) + _3625) * _3640))) * _3654;
                        float _5080 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                        float _3676 = (((_3626 * 3.1415927410125732421875) * (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) / ((_3648 * _3648) * ((_3592 * 2.1991131305694580078125) + 3.141590118408203125))) * _3581;
                        _3429 = (_3596 * _3544.x) + _3502;
                        _3430 = (_3596 * _3544.y) + _3503;
                        _3431 = (_3596 * _3544.z) + _3504;
                        _3426 = (_3676 * _3561.x) + _3499;
                        _3427 = (_3676 * _3561.y) + _3500;
                        _3428 = (_3676 * _3561.z) + _3501;
                        if (_3506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3499 = _3426;
                            _3500 = _3427;
                            _3501 = _3428;
                            _3502 = _3429;
                            _3503 = _3430;
                            _3504 = _3431;
                            _3505 = _3506;
                        }
                    }
                    frontier_phi_71_pred = _3431;
                    frontier_phi_71_pred_1 = _3430;
                    frontier_phi_71_pred_2 = _3429;
                    frontier_phi_71_pred_3 = _3428;
                    frontier_phi_71_pred_4 = _3427;
                    frontier_phi_71_pred_5 = _3426;
                }
                _3212 = frontier_phi_71_pred;
                _3210 = frontier_phi_71_pred_1;
                _3208 = frontier_phi_71_pred_2;
                _3206 = frontier_phi_71_pred_3;
                _3204 = frontier_phi_71_pred_4;
                _3202 = frontier_phi_71_pred_5;
                uint _3361 = _3360 + 1u;
                if (_3361 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3354 = _3202;
                    _3355 = _3204;
                    _3356 = _3206;
                    _3357 = _3208;
                    _3358 = _3210;
                    _3359 = _3212;
                    _3360 = _3361;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
        }
        uvec4 _3215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3216 = _3215.z;
        uint _3218 = (_3216 >> 8u) & 15u;
        float _3322;
        float _3324;
        float _3326;
        float _3328;
        float _3330;
        float _3332;
        if (((4294967295u << _3218) & _3121) == 0u)
        {
            _3322 = _3201;
            _3324 = _3203;
            _3326 = _3205;
            _3328 = _3207;
            _3330 = _3209;
            _3332 = _3211;
        }
        else
        {
            float _3347 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
            float _3348 = _3347 * _2180;
            float _3349 = _3347 * _2181;
            float _3350 = _3347 * _2182;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3218 < ((_3216 >> 12u) & 15u))
            {
                float _3323;
                float _3325;
                float _3327;
                float _3329;
                float _3331;
                float _3333;
                float _3482 = _3201;
                float _3483 = _3203;
                float _3484 = _3205;
                float _3485 = _3207;
                float _3486 = _3209;
                float _3487 = _3211;
                uint _3488 = _3218;
                uint _3497;
                bool _3498;
                for (;;)
                {
                    _3497 = texelFetch(g_lightClassification, int((((_3115 << 5u) + (_3101 << 9u)) + (_3488 << 2u)) >> 2u)).x;
                    _3498 = _3497 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3498)
                    {
                        frontier_phi_82_pred = _3487;
                        frontier_phi_82_pred_1 = _3486;
                        frontier_phi_82_pred_2 = _3485;
                        frontier_phi_82_pred_3 = _3484;
                        frontier_phi_82_pred_4 = _3483;
                        frontier_phi_82_pred_5 = _3482;
                    }
                    else
                    {
                        float _3690;
                        float _3691;
                        float _3692;
                        float _3693;
                        float _3694;
                        float _3695;
                        float _3983;
                        float _3984;
                        float _3985;
                        float _3986;
                        float _3987;
                        float _3988;
                        float _3703 = _3482;
                        float _3704 = _3483;
                        float _3705 = _3484;
                        float _3706 = _3485;
                        float _3707 = _3486;
                        float _3708 = _3487;
                        uint _3709 = _3497;
                        uint _3710;
                        vec4 _3735;
                        float _3736;
                        vec4 _3751;
                        vec3 _3763;
                        vec4 _3778;
                        vec4 _3793;
                        float _3839;
                        bool _3840;
                        for (;;)
                        {
                            uint _3720 = ((_3488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3709));
                            _3710 = (_3709 + 4294967295u) & _3709;
                            uint _3722 = _3720 * 40u;
                            _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3736 = _3735.w;
                            uint _3738 = (_3720 * 40u) + 4u;
                            _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3753 = (_3720 * 40u) + 8u;
                            _3763 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x));
                            uint _3765 = (_3720 * 40u) + 16u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3720 * 40u) + 20u;
                            _3793 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 3u)).x));
                            uint _3795 = (_3720 * 40u) + 24u;
                            vec4 _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3814 = (_3720 * 40u) + 28u;
                            vec4 _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            _3839 = fma(_2182, _3827.z, fma(_2181, _3827.y, _3827.x * _2180)) + _3827.w;
                            _3840 = !((fma(_2182, _3808.z, fma(_2181, _3808.y, _3808.x * _2180)) + _3808.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3840)
                            {
                                float _3867 = _3735.x - _2180;
                                float _3868 = _3735.y - _2181;
                                float _3869 = _3735.z - _2182;
                                float _3870 = dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869));
                                float _3873 = inversesqrt(_3870);
                                float _3874 = _3873 * _3867;
                                float _3875 = _3873 * _3868;
                                float _3876 = _3873 * _3869;
                                float _3880 = 1.0 - (_3870 / (_3736 * _3736));
                                float _5091 = isnan(0.0) ? _3880 : (isnan(_3880) ? 0.0 : max(_3880, 0.0));
                                float _3881 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
                                float _3885 = sqrt(_3870) * _3751.w;
                                float _3887 = 1.39999997615814208984375 / (_3885 + 1.39999997615814208984375);
                                float _3888 = _3887 * _3887;
                                float _3891 = ((1.0 - _3888) * dot(vec3(_3874, _3875, _3876), vec3(_1015, _1018, _1021))) + _3888;
                                float _3894 = _3885 * _3885;
                                float _3898 = (fma(_2182, _3778.z, fma(_2181, _3778.y, _3778.x * _2180)) + _3778.w) / _3839;
                                float _3899 = (fma(_2182, _3793.z, fma(_2181, _3793.y, _3793.x * _2180)) + _3793.w) / _3839;
                                float _3903 = 1.0 - dot(vec2(_3898, _3899), vec2(_3898, _3899));
                                float _5107 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3905 = _3904 * (((isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0))) * _3881) / ((_3894 * 0.699999988079071044921875) + 1.0));
                                float _3917 = exp2(log2(1.0 / ((_3894 * 3.5) + 5.0)) * 0.25);
                                float _3918 = 1.0 - _1090;
                                float _3925 = sqrt(1.0 - ((1.0 - (_3918 * _3918)) * (1.0 - (_3917 * _3917))));
                                float _3926 = _3925 * _3925;
                                float _3927 = _3926 * _3926;
                                float _3928 = _3874 - _3348;
                                float _3929 = _3875 - _3349;
                                float _3930 = _3876 - _3350;
                                float _3934 = inversesqrt(dot(vec3(_3928, _3929, _3930), vec3(_3928, _3929, _3930)));
                                float _3938 = dot(vec3(_1015, _1018, _1021), vec3((-0.0) - _3348, (-0.0) - _3349, (-0.0) - _3350));
                                float _5118 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3941 = isnan(1.0) ? _5118 : (isnan(_5118) ? 1.0 : min(_5118, 1.0));
                                float _3942 = dot(vec3(_1015, _1018, _1021), vec3(_3934 * _3928, _3934 * _3929, _3934 * _3930));
                                float _5129 = isnan(0.0) ? _3942 : (isnan(_3942) ? 0.0 : max(_3942, 0.0));
                                float _3945 = isnan(1.0) ? _5129 : (isnan(_5129) ? 1.0 : min(_5129, 1.0));
                                float _3949 = ((_3945 * _3945) * (_3927 + (-1.0))) + 1.0;
                                float _3950 = _3887 * _3926;
                                float _3951 = _3950 * _3950;
                                float _3957 = ((1.0 - _3951) * dot(vec3(_1015, _1018, _1021), vec3(_3874, _3875, _3876))) + _3951;
                                float _5140 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3958 = isnan(1.0) ? _5140 : (isnan(_5140) ? 1.0 : min(_5140, 1.0));
                                float _3959 = 1.0 - _3926;
                                float _3969 = (0.5 / (((_3958 * ((_3941 * _3959) + _3926)) + 9.9999999392252902907785028219223e-09) + (((_3958 * _3959) + _3926) * _3941))) * _3958;
                                float _5151 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3979 = (_3904 * _3881) * (((_3927 * 3.1415927410125732421875) * (isnan(1.0) ? _5151 : (isnan(_5151) ? 1.0 : min(_5151, 1.0)))) / ((_3949 * _3949) * ((_3894 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3905 * _3751.z;
                                frontier_phi_88_pred_1 = _3905 * _3751.y;
                                frontier_phi_88_pred_2 = _3905 * _3751.x;
                                frontier_phi_88_pred_3 = _3979 * _3763.z;
                                frontier_phi_88_pred_4 = _3979 * _3763.y;
                                frontier_phi_88_pred_5 = _3979 * _3763.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3988 = frontier_phi_88_pred;
                            _3987 = frontier_phi_88_pred_1;
                            _3986 = frontier_phi_88_pred_2;
                            _3985 = frontier_phi_88_pred_3;
                            _3984 = frontier_phi_88_pred_4;
                            _3983 = frontier_phi_88_pred_5;
                            _3693 = _3986 + _3706;
                            _3694 = _3987 + _3707;
                            _3695 = _3988 + _3708;
                            _3690 = _3983 + _3703;
                            _3691 = _3984 + _3704;
                            _3692 = _3985 + _3705;
                            if (_3710 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3703 = _3690;
                                _3704 = _3691;
                                _3705 = _3692;
                                _3706 = _3693;
                                _3707 = _3694;
                                _3708 = _3695;
                                _3709 = _3710;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3695;
                        frontier_phi_82_pred_1 = _3694;
                        frontier_phi_82_pred_2 = _3693;
                        frontier_phi_82_pred_3 = _3692;
                        frontier_phi_82_pred_4 = _3691;
                        frontier_phi_82_pred_5 = _3690;
                    }
                    _3333 = frontier_phi_82_pred;
                    _3331 = frontier_phi_82_pred_1;
                    _3329 = frontier_phi_82_pred_2;
                    _3327 = frontier_phi_82_pred_3;
                    _3325 = frontier_phi_82_pred_4;
                    _3323 = frontier_phi_82_pred_5;
                    uint _3489 = _3488 + 1u;
                    if (_3489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3482 = _3323;
                        _3483 = _3325;
                        _3484 = _3327;
                        _3485 = _3329;
                        _3486 = _3331;
                        _3487 = _3333;
                        _3488 = _3489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3329;
                frontier_phi_63_64_ladder_1 = _3333;
                frontier_phi_63_64_ladder_2 = _3331;
                frontier_phi_63_64_ladder_3 = _3327;
                frontier_phi_63_64_ladder_4 = _3325;
                frontier_phi_63_64_ladder_5 = _3323;
            }
            else
            {
                frontier_phi_63_64_ladder = _3207;
                frontier_phi_63_64_ladder_1 = _3211;
                frontier_phi_63_64_ladder_2 = _3209;
                frontier_phi_63_64_ladder_3 = _3205;
                frontier_phi_63_64_ladder_4 = _3203;
                frontier_phi_63_64_ladder_5 = _3201;
            }
            _3322 = frontier_phi_63_64_ladder_5;
            _3324 = frontier_phi_63_64_ladder_4;
            _3326 = frontier_phi_63_64_ladder_3;
            _3328 = frontier_phi_63_64_ladder;
            _3330 = frontier_phi_63_64_ladder_2;
            _3332 = frontier_phi_63_64_ladder_1;
        }
        float _3337 = isnan(1.0) ? _1074 : (isnan(_1074) ? 1.0 : min(_1074, 1.0));
        _3134 = (_3337 * _3328) + _2646;
        _3136 = (_3337 * _3330) + _2648;
        _3138 = (_3337 * _3332) + _2650;
        _3140 = ((_3322 * _1058) * _3337) + _2984;
        _3142 = ((_3324 * _1060) * _3337) + _2986;
        _3144 = ((_3326 * _1061) * _3337) + _2988;
    }
    else
    {
        _3134 = _2646;
        _3136 = _2648;
        _3138 = _2650;
        _3140 = _2984;
        _3142 = _2986;
        _3144 = _2988;
    }
    float _5167 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _5178 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _5189 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _3161 = ((isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0))) * (_3134 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1074))) + ((_3140 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _3162 = ((isnan(1.0) ? _5178 : (isnan(_5178) ? 1.0 : min(_5178, 1.0))) * (_3136 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1074))) + ((_3142 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    float _3163 = ((isnan(1.0) ? _5189 : (isnan(_5189) ? 1.0 : min(_5189, 1.0))) * (_3138 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1074))) + ((_3144 + ((isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0))) * _1912)) * cbPerFrame._m0[3u].x);
    uint _3164 = _286 + 6u;
    float _3172 = _996 / cbSceneParam._m0[86u].x;
    float _3173 = _997 / cbSceneParam._m0[86u].y;
    vec4 _3187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, (log2((isnan(cbSceneParam._m0[77u].w) ? _919 : (isnan(_919) ? cbSceneParam._m0[77u].w : min(_919, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3189 = _3187.x;
    float _3190 = _3187.y;
    float _3191 = _3187.z;
    float _3192 = _3187.w;
    float _3264;
    float _3266;
    float _3268;
    float _3270;
    if (_919 > cbSceneParam._m0[78u].w)
    {
        float _3226 = isnan(_919) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _919 : min(cbSceneParam._m0[80u].w, _919));
        float _3227 = _3226 / _919;
        float _3238 = _3227 * _969;
        float _3239 = _970 * _3227;
        float _3240 = (-0.0) - _3239;
        float _3242 = _3227 * _971;
        float _3244 = (cbSceneParam._m0[77u].w * _3240) / _3226;
        float _3245 = _3244 + cbSceneParam._m0[79u].w;
        float _3246 = cbSceneParam._m0[79u].w - _3239;
        float _3252 = sqrt(((_3238 * _3238) + (_3239 * _3239)) + (_3242 * _3242));
        float _3255 = (1.0 - (cbSceneParam._m0[77u].w / _3226)) * _3252;
        float _3260 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3262 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3439;
        if (abs((_3240 - _3244) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3439 = ((((_3245 > 0.0) ? exp2(_3260 * _3245) : (2.0 - exp2(_3262 * _3245))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3255;
        }
        else
        {
            float _3383 = 1.0 / cbSceneParam._m0[80u].x;
            float _3384 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : max(_3245, _3246));
            float _3385 = isnan(_3246) ? _3245 : (isnan(_3245) ? _3246 : min(_3245, _3246));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            float _3395 = isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : min(_3385, 0.0));
            _3439 = ((abs(_3252 / _3240) * cbSceneParam._m0[80u].y) * ((((_3394 - _3395) * 2.0) - ((exp2(_3260 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0)))) - exp2(_3260 * (isnan(0.0) ? _3385 : (isnan(_3385) ? 0.0 : max(_3385, 0.0))))) * _3383)) - ((exp2(_3262 * _3394) - exp2(_3262 * _3395)) * _3383))) + (_3255 * cbSceneParam._m0[80u].z);
        }
        vec4 _3441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3172, _3173, 1.0), 0.0);
        float _3450 = exp2((_3439 * (-1.44269502162933349609375)) * (1.0 - _3441.w));
        float _3451 = log2(_3450);
        float _3467 = log2(_3192);
        _3264 = (exp2(_3467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].x)) * _3441.x) / cbSceneParam._m0[78u].x)) + _3189;
        _3266 = (exp2(_3467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].y)) * _3441.y) / cbSceneParam._m0[78u].y)) + _3190;
        _3268 = (exp2(_3467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3451 * cbSceneParam._m0[78u].z)) * _3441.z) / cbSceneParam._m0[78u].z)) + _3191;
        _3270 = _3450 * _3192;
    }
    else
    {
        _3264 = _3189;
        _3266 = _3190;
        _3268 = _3191;
        _3270 = _3192;
    }
    bool _3477;
    vec4 _3280;
    vec4 _3302;
    float _3304;
    float _3308;
    float _3309;
    float _3310;
    float _3311;
    bool _3321;
    for (;;)
    {
        _3280 = cbMatDynParam._m0[0u];
        float _3282 = roundEven(_3280.y);
        bool _3283 = _3282 == 3.0;
        float _3284 = log2(_3270);
        float _3291 = exp2(_3284 * cbSceneParam._m0[78u].x) * _3161;
        float _3292 = exp2(_3284 * cbSceneParam._m0[78u].y) * _3162;
        float _3293 = exp2(_3284 * cbSceneParam._m0[78u].z) * _3163;
        float _3300 = _985 + (-0.5);
        _3302 = cbMtdParam._m0[1u];
        _3304 = _3302.y * _3300;
        float _3307 = (_3282 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3308 = _3307 * (_3283 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3264)));
        _3309 = _3307 * (_3283 ? _3292 : (_3292 + (cbSceneParam._m0[72u].w * _3266)));
        _3310 = _3307 * (_3283 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3268)));
        _3311 = _3300 * 0.999000012874603271484375;
        _3321 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3321)
        {
            if ((cbInstanceData._m0[_286 + 7u].x + _3311) < 0.5)
            {
                _3477 = true;
                break;
            }
        }
        uint _3418 = _1034 + uint(_3280.w);
        if ((cbInstanceData._m0[_3418].w < 1.0) && ((cbInstanceData._m0[_3418].w + _3311) < 0.5))
        {
            _3477 = true;
            break;
        }
        if ((_3304 + 1.0) < _3302.x)
        {
            _3477 = true;
            break;
        }
        _3477 = false;
        break;
    }
    float _3681;
    if (_3477)
    {
        discard_state = true;
        _3681 = 0.0;
    }
    else
    {
        _3681 = cbInstanceData._m0[_3164].w;
    }
    SV_Target.x = _3308;
    SV_Target.y = _3309;
    SV_Target.z = _3310;
    SV_Target.w = _3681;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3164].w;
    discard_exit();
}


