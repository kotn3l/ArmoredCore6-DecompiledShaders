#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1662;
float _4063;
float _4064;
float _4065;
float _4066;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _245 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _246 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _247 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _253 = inversesqrt(dot(vec3(_245, _246, _247), vec3(_245, _246, _247)));
    float _254 = _253 * _245;
    float _255 = _253 * _246;
    float _256 = _253 * _247;
    float _260 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = _260 * NORMAL.x;
    float _262 = _260 * NORMAL.y;
    float _263 = _260 * NORMAL.z;
    float _267 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _268 = _267 * TANGENT.x;
    float _269 = _267 * TANGENT.y;
    float _270 = _267 * TANGENT.z;
    uint _273 = uint(roundEven(NORMAL.w)) * 13u;
    uint _278 = _273 + 1u;
    uint _282 = _273 + 2u;
    float _291 = sqrt(((cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x) + (cbInstanceData._m0[_273].x * cbInstanceData._m0[_273].x)) + (cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x));
    float _292 = _291 * TEXCOORD.z;
    float _293 = _291 * TEXCOORD.w;
    vec4 _312 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _336 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = _336.x * cbMtdParam._m0[11u].x;
    float _342 = _336.y * cbMtdParam._m0[11u].y;
    float _343 = _336.z * cbMtdParam._m0[11u].z;
    vec4 _362 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _292) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _293) + cbTextureTilingScale._m0[5u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _381.x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4075 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _459 = (_452 * ((_362.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _460 = (_452 * ((_362.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _461 = (_452 * ((_362.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _478 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _292) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _293) + cbTextureTilingScale._m0[3u].w));
    vec4 _498 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _500 = _498.x;
    float _510 = dot(vec4(_500, _498.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _524 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _381.y) * 2.0) - ((((_500 - _510) * cbMtdParam._m0[23u].w) + _510) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4086 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _525 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _532 = (_525 * ((_478.x * cbMtdParam._m0[13u].x) - _459)) + _459;
    float _533 = (_525 * ((_478.y * cbMtdParam._m0[13u].y) - _460)) + _460;
    float _534 = (_525 * ((_478.z * cbMtdParam._m0[13u].z) - _461)) + _461;
    vec4 _553 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _292) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _293) + cbTextureTilingScale._m0[24u].w));
    vec4 _570 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _572 = _570.x;
    float _582 = dot(vec4(_572, _570.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _594 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _381.z) * 2.0) - ((((_572 - _582) * cbMtdParam._m0[23u].w) + _582) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4097 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _595 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _608 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _312.x) * ((_595 * ((_553.x * cbMtdParam._m0[14u].x) - _532)) + _532);
    float _611 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _312.y) * ((_595 * ((_553.y * cbMtdParam._m0[14u].y) - _533)) + _533);
    float _614 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _312.z) * ((_595 * ((_553.z * cbMtdParam._m0[14u].z) - _534)) + _534);
    vec4 _632 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _292) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _293) + cbTextureTilingScale._m0[4u].w));
    vec4 _649 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _653 = _649.z;
    float _660 = ((_632.x - _651) * _452) + _651;
    float _661 = ((_632.y - _652) * _452) + _652;
    float _662 = ((_632.z - _653) * _452) + _653;
    vec4 _674 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _292) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _293) + cbTextureTilingScale._m0[2u].w));
    float _685 = ((_674.x - _660) * _525) + _660;
    float _686 = ((_674.y - _661) * _525) + _661;
    float _687 = ((_674.z - _662) * _525) + _662;
    vec4 _699 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _292) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _293) + cbTextureTilingScale._m0[23u].w));
    float _712 = ((_699.z - _687) * _595) + _687;
    float _715 = ((((_699.x - _685) * _595) + _685) * 2.0) + (-1.0);
    float _717 = ((((_699.y - _686) * _595) + _686) * 2.0) + (-1.0);
    float _718 = dot(vec2(_715, _717), vec2(_715, _717));
    float _4108 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _723 = sqrt(1.0 - (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))));
    vec4 _737 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _749 = (((_737.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _715;
    float _750 = (((_737.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _717;
    float _753 = fma(_723, _261, fma(_750, _268, _749 * _254));
    float _756 = fma(_723, _262, fma(_750, _269, _749 * _255));
    float _759 = fma(_723, _263, fma(_750, _270, _749 * _256));
    float _763 = inversesqrt(dot(vec3(_753, _756, _759), vec3(_753, _756, _759)));
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _292) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _293) + cbTextureTilingScale._m0[11u].w));
    float _792 = _790.x;
    float _793 = 1.0 - _792;
    float _801 = (cbMtdParam._m0[19u].x + dot(vec4(_763 * _753, _763 * _756, _763 * _759, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_792 - _793) * cbMtdParam._m0[24u].z) + _793) * cbMtdParam._m0[21u].z);
    float _4119 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _802 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _804 = (-0.0) - cbMtdParam._m0[24u].x;
    float _806 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _806 : (isnan(_806) ? 1.0 : min(_806, 1.0));
    float _814 = _802 - ((_802 * TEXCOORD_8.x) * _807);
    float _815 = _802 - ((_802 * TEXCOORD_8.y) * _807);
    float _816 = _802 - ((_802 * TEXCOORD_8.z) * _807);
    float _823 = (_814 * (cbMtdParam._m0[17u].x - _608)) + _608;
    float _824 = (_815 * (cbMtdParam._m0[17u].y - _611)) + _611;
    float _825 = (_816 * (cbMtdParam._m0[17u].z - _614)) + _614;
    vec4 _837 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _292) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _293) + cbTextureTilingScale._m0[19u].w));
    float _839 = _837.x;
    float _840 = 1.0 - _839;
    float _866 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_839 - _840) * cbMtdParam._m0[24u].w) + _840) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4140 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _867 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _875 = ((((cbMtdParam._m0[10u].x - _823) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _867) + _823;
    float _876 = ((((cbMtdParam._m0[10u].y - _824) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _867) + _824;
    float _877 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _825)) * _867) + _825;
    vec4 _903 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _905 = _903.x;
    float _922 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _292) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _293) + cbTextureTilingScale._m0[9u].w)).x - _905) * _452) + _905;
    float _939 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _292) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _293) + cbTextureTilingScale._m0[21u].w)).x - _922) * _525) + _922;
    float _956 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _292) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _293) + cbTextureTilingScale._m0[10u].w)).x - _939) * _595) + _939;
    float _960 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _956) * cbMtdParam._m0[19u].z) + _956;
    float _962 = _960 - (_960 * _814);
    float _964 = _962 - (_962 * _867);
    float _968 = (cbMtdParam._m0[19u].w * (_737.z - _712)) + _712;
    vec4 _984 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _292) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _293) + cbTextureTilingScale._m0[15u].w));
    float _991 = (_984.x * 2.0) + (-1.0);
    float _992 = (_984.y * 2.0) + (-1.0);
    float _993 = dot(vec2(_991, _992), vec2(_991, _992));
    float _4151 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _1001 = ((_984.z - _968) * _814) + _968;
    float _1004 = ((cbMtdParam._m0[23u].x - _1001) * _867) + _1001;
    vec4 _1027 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _292) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _293) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1033 = (_1027.x * 2.0) + (-1.0);
    float _1034 = (_1027.y * 2.0) + (-1.0);
    float _1035 = dot(vec2(_1033, _1034), vec2(_1033, _1034));
    float _4162 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1050 = ((sqrt(1.0 - (isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0)))) - _723) * _816) + _723;
    float _1053 = (((_991 - _749) * _814) + _749) + (cbMtdParam._m0[21u].x * _749);
    float _1054 = (((_992 - _750) * _815) + _750) + (cbMtdParam._m0[21u].x * _750);
    float _1065 = (((_1033 - _1053) + (_1053 * cbMtdParam._m0[22u].z)) * _867) + _1053;
    float _1066 = (((_1034 - _1054) + (_1054 * cbMtdParam._m0[22u].z)) * _867) + _1054;
    float _1067 = (_867 * (sqrt(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) - _1050)) + _1050;
    float _1069 = cbMtdParam._m0[22u].x + _737.w;
    float _1072 = fma(_1067, _261, fma(_1066, _268, _1065 * _254));
    float _1075 = fma(_1067, _262, fma(_1066, _269, _1065 * _255));
    float _1078 = fma(_1067, _263, fma(_1066, _270, _1065 * _256));
    float _1082 = inversesqrt(dot(vec3(_1072, _1075, _1078), vec3(_1072, _1075, _1078)));
    float _1083 = _1082 * _1072;
    float _1084 = _1082 * _1075;
    float _1085 = _1082 * _1078;
    float _4173 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
    float _1086 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _4184 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4195 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4206 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _4217 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _4228 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _1091 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _1105 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1155 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1145);
    float _1156 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1145);
    float _1157 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1145);
    float _1161 = inversesqrt(dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157)));
    float _1162 = _1155 * _1161;
    float _1163 = _1156 * _1161;
    float _1164 = _1157 * _1161;
    vec4 _1169 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1171 = _1169.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1343 = sqrt(((_1155 * _1155) + (_1156 * _1156)) + (_1157 * _1157));
        float _1349 = (cbMatDynParam._m0[5u].x * _1343) + cbMatDynParam._m0[5u].y;
        float _4239 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1354 = (cbMatDynParam._m0[5u].z * _1343) + cbMatDynParam._m0[5u].w;
        float _4250 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) - _1350)) + _1350) < ((_1171 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1182 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1183 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1201 = fma(_1085, cbSceneParam._m0[5u].z, fma(_1084, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1083));
    float _1204 = fma(_1085, cbSceneParam._m0[6u].z, fma(_1084, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1083));
    float _1207 = fma(_1085, cbSceneParam._m0[7u].z, fma(_1084, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1083));
    uint _1220 = _273 + 9u;
    uint _1221 = _1220 + uint(cbMatDynParam._m0[0u].w);
    float _1227 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) * cbInstanceData._m0[_1221].x;
    float _1228 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0)))) * cbInstanceData._m0[_1221].y;
    float _1229 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * cbInstanceData._m0[_1221].z;
    float _4261 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
    float _1230 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
    float _4272 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
    float _1231 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1232 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _1233 = 1.0 - _1091;
    float _1234 = _1230 * _1233;
    float _1235 = _1231 * _1233;
    float _1236 = _1232 * _1233;
    float _1241 = (_1230 + (-0.039999999105930328369140625)) * _1091;
    float _1242 = (_1231 + (-0.039999999105930328369140625)) * _1091;
    float _1243 = (_1232 + (-0.039999999105930328369140625)) * _1091;
    float _1244 = _1241 + 0.039999999105930328369140625;
    float _1246 = _1242 + 0.039999999105930328369140625;
    float _1247 = _1243 + 0.039999999105930328369140625;
    vec4 _1256 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1182, cbSceneParam._m0[86u].y * _1183));
    float _1260 = ((isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * TEXCOORD_5.w) * _1256.x;
    float _1261 = dot(vec3(_1083, _1084, _1085), vec3(_1162, _1163, _1164));
    float _1264 = _1261 * 2.0;
    float _1268 = (_1264 * _1083) - _1162;
    float _1269 = (_1264 * _1084) - _1163;
    float _1270 = (_1264 * _1085) - _1164;
    float _1274 = abs(dot(vec3(_1162, _1163, _1164), vec3(_1083, _1084, _1085)));
    float _4294 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _1276 = sqrt(_1086);
    float _1289 = exp2((_1276 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1276 * 3.0));
    float _1295 = (1.0 - _1289) * ((_1276 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1296 = _1289 * _1276;
    float _1324 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1328 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1332 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1661;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1386 = fma(_1332, cbModelParam._m0[26u].z, fma(_1328, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1324));
        float _1390 = fma(_1332, cbModelParam._m0[27u].z, fma(_1328, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1324));
        float _1394 = fma(_1332, cbModelParam._m0[28u].z, fma(_1328, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1324));
        float _1419 = _1324 + _1083;
        float _1420 = _1328 + _1084;
        float _1421 = _1332 + _1085;
        float _1431 = fma(_1421, cbModelParam._m0[26u].z, fma(_1420, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1419)) - _1386;
        float _1432 = fma(_1421, cbModelParam._m0[27u].z, fma(_1420, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1419)) - _1390;
        float _1433 = fma(_1421, cbModelParam._m0[28u].z, fma(_1420, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1419)) - _1394;
        float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
        float _1450 = ((_1437 * _1431) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1386 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1451 = ((_1437 * _1432) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1390 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1437 * _1433) / cbModelParam._m0[34u].z) + ((((((_1394 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1450, _1451, _1452), 0.0);
        float _1489 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1455.x + (-0.5));
        float _1491 = _1489 * (_1455.y + (-0.5));
        float _1492 = _1489 * (_1455.z + (-0.5));
        float _1499 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1500 = _1499 * (_1462.x + (-0.5));
        float _1501 = _1499 * (_1462.y + (-0.5));
        float _1502 = _1499 * (_1462.z + (-0.5));
        float _1509 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1469.x + (-0.5));
        float _1511 = _1509 * (_1469.y + (-0.5));
        float _1512 = _1509 * (_1469.z + (-0.5));
        float _1519 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1476.x + (-0.5));
        float _1521 = _1519 * (_1476.y + (-0.5));
        float _1522 = _1519 * (_1476.z + (-0.5));
        float _1523 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = _1490 * 0.5;
        float _1527 = _1500 * 0.5;
        float _1528 = _1510 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1543 = (dot(vec3(_1083, _1084, _1085), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4320 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1553 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1523 + 9.9999997473787516355514526367188e-06);
        float _4331 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4342 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_1555 + 1.0))) + _1560) * _1523;
        float _1570 = _1491 * 0.5;
        float _1571 = _1501 * 0.5;
        float _1572 = _1511 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_1083, _1084, _1085), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4353 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4364 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4375 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_1597 + 1.0))) + _1602) * _1524;
        float _1612 = _1492 * 0.5;
        float _1613 = _1502 * 0.5;
        float _1614 = _1512 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1628 = (dot(vec3(_1083, _1084, _1085), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4386 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1637 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4397 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1638 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1639 = _1638 * 2.0;
        float _1643 = (1.0 - _1638) / (_1638 + 1.0);
        float _4408 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1653 = ((((1.0 - _1644) * (_1639 + 2.0)) * exp2(log2(isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_1639 + 1.0))) + _1644) * _1525;
        _1661 = _1492;
        _1663 = _1491;
        _1664 = _1490;
        _1665 = _1502;
        _1666 = _1501;
        _1667 = _1500;
        _1668 = _1512;
        _1669 = _1511;
        _1670 = _1510;
        _1671 = _1525;
        _1672 = _1524;
        _1673 = _1523;
        _1674 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1675 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
        _1676 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)));
    }
    else
    {
        _1661 = _1662;
        _1663 = _1662;
        _1664 = _1662;
        _1665 = _1662;
        _1666 = _1662;
        _1667 = _1662;
        _1668 = _1662;
        _1669 = _1662;
        _1670 = _1662;
        _1671 = _1662;
        _1672 = _1662;
        _1673 = _1662;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    float _1985;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1702 = fma(_1332, cbModelParam._m0[30u].z, fma(_1328, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1324));
        float _1706 = fma(_1332, cbModelParam._m0[31u].z, fma(_1328, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1324));
        float _1710 = fma(_1332, cbModelParam._m0[32u].z, fma(_1328, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1324));
        float _1733 = _1324 + _1083;
        float _1734 = _1328 + _1084;
        float _1735 = _1332 + _1085;
        float _1745 = fma(_1735, cbModelParam._m0[30u].z, fma(_1734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1733)) - _1702;
        float _1746 = fma(_1735, cbModelParam._m0[31u].z, fma(_1734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1733)) - _1706;
        float _1747 = fma(_1735, cbModelParam._m0[32u].z, fma(_1734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1733)) - _1710;
        float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
        float _1764 = ((_1751 * _1745) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1702 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1765 = ((_1751 * _1746) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1706 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1766 = ((_1751 * _1747) / cbModelParam._m0[35u].z) + ((((((_1710 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1764, _1765, _1766), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1764, _1765, _1766), 0.0);
        vec4 _1782 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1764, _1765, _1766), 0.0);
        vec4 _1789 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1764, _1765, _1766), 0.0);
        float _1801 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1802 = _1801 * (_1768.x + (-0.5));
        float _1803 = _1801 * (_1768.y + (-0.5));
        float _1804 = _1801 * (_1768.z + (-0.5));
        float _1811 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1812 = _1811 * (_1775.x + (-0.5));
        float _1813 = _1811 * (_1775.y + (-0.5));
        float _1814 = _1811 * (_1775.z + (-0.5));
        float _1821 = exp2((_1782.w + (-0.5)) * 20.0) * 2.0;
        float _1822 = _1821 * (_1782.x + (-0.5));
        float _1823 = _1821 * (_1782.y + (-0.5));
        float _1824 = _1821 * (_1782.z + (-0.5));
        float _1831 = exp2((_1789.w + (-0.5)) * 20.0) * 2.0;
        float _1832 = _1831 * (_1789.x + (-0.5));
        float _1833 = _1831 * (_1789.y + (-0.5));
        float _1834 = _1831 * (_1789.z + (-0.5));
        float _1835 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1836 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1837 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1838 = _1802 * 0.5;
        float _1839 = _1812 * 0.5;
        float _1840 = _1822 * 0.5;
        float _1841 = dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840));
        float _1846 = (_1841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1841);
        float _1854 = (dot(vec3(_1083, _1084, _1085), vec3(_1846 * _1838, _1846 * _1839, _1846 * _1840)) + 1.0) * 0.5;
        float _4449 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840)) / (_1835 + 9.9999997473787516355514526367188e-06);
        float _4460 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1865 = _1864 * 2.0;
        float _1869 = (1.0 - _1864) / (_1864 + 1.0);
        float _4471 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _1879 = ((((1.0 - _1870) * (_1865 + 2.0)) * exp2(log2(isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_1865 + 1.0))) + _1870) * _1835;
        float _1880 = _1803 * 0.5;
        float _1881 = _1813 * 0.5;
        float _1882 = _1823 * 0.5;
        float _1883 = dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882));
        float _1888 = (_1883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1883);
        float _1896 = (dot(vec3(_1083, _1084, _1085), vec3(_1888 * _1880, _1888 * _1881, _1888 * _1882)) + 1.0) * 0.5;
        float _4482 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1905 = sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882)) / (_1836 + 9.9999997473787516355514526367188e-06);
        float _4493 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _1907 = _1906 * 2.0;
        float _1911 = (1.0 - _1906) / (_1906 + 1.0);
        float _4504 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _1921 = ((((1.0 - _1912) * (_1907 + 2.0)) * exp2(log2(isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0))) * (_1907 + 1.0))) + _1912) * _1836;
        float _1922 = _1804 * 0.5;
        float _1923 = _1814 * 0.5;
        float _1924 = _1824 * 0.5;
        float _1925 = dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924));
        float _1930 = (_1925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1925);
        float _1938 = (dot(vec3(_1083, _1084, _1085), vec3(_1930 * _1922, _1930 * _1923, _1930 * _1924)) + 1.0) * 0.5;
        float _4515 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1947 = sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924)) / (_1837 + 9.9999997473787516355514526367188e-06);
        float _4526 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _1949 = _1948 * 2.0;
        float _1953 = (1.0 - _1948) / (_1948 + 1.0);
        float _4537 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
        float _1963 = ((((1.0 - _1954) * (_1949 + 2.0)) * exp2(log2(isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_1949 + 1.0))) + _1954) * _1837;
        _1971 = _1804;
        _1972 = _1803;
        _1973 = _1802;
        _1974 = _1814;
        _1975 = _1813;
        _1976 = _1812;
        _1977 = _1824;
        _1978 = _1823;
        _1979 = _1822;
        _1980 = _1837;
        _1981 = _1836;
        _1982 = _1835;
        _1983 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)));
        _1984 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)));
        _1985 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
    }
    else
    {
        _1971 = _1662;
        _1972 = _1662;
        _1973 = _1662;
        _1974 = _1662;
        _1975 = _1662;
        _1976 = _1662;
        _1977 = _1662;
        _1978 = _1662;
        _1979 = _1662;
        _1980 = _1662;
        _1981 = _1662;
        _1982 = _1662;
        _1983 = 0.0;
        _1984 = 0.0;
        _1985 = 0.0;
    }
    float _1995 = (cbModelParam._m0[1u].x * (_1983 - _1674)) + _1674;
    float _1996 = (cbModelParam._m0[1u].x * (_1984 - _1675)) + _1675;
    float _1997 = (cbModelParam._m0[1u].x * (_1985 - _1676)) + _1676;
    float _2018 = fma(_1997, cbSceneParam._m0[89u].z, fma(_1996, cbSceneParam._m0[89u].y, _1995 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_1997, cbSceneParam._m0[90u].z, fma(_1996, cbSceneParam._m0[90u].y, _1995 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_1997, cbSceneParam._m0[91u].z, fma(_1996, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1995));
    float _2039 = _1268 * 0.5;
    float _2040 = _1269 * 0.5;
    float _2041 = _1270 * 0.5;
    float _2042 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1973, _1976, _1979, _1982));
    float _2045 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1972, _1975, _1978, _1981));
    float _2048 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1971, _1974, _1977, _1980));
    float _2082;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2055 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1661, _1665, _1668, _1671));
        float _2059 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1663, _1666, _1669, _1672));
        float _2063 = dot(vec4(_2039, _2040, _2041, 1.0), vec4(_1664, _1667, _1670, _1673));
        float _2070 = dot(vec4(cbModelParam._m0[39u]), vec4(_2039, _2040, _2041, 1.0));
        _2082 = dot(vec3(isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0)), isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0)), isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2070) ? 0.0 : (isnan(0.0) ? _2070 : max(0.0, _2070))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2082 = 1.0;
    }
    float _2093;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2084 = dot(vec4(cbModelParam._m0[40u]), vec4(_2039, _2040, _2041, 1.0));
        _2093 = dot(vec3(isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2084) ? 0.0 : (isnan(0.0) ? _2084 : max(0.0, _2084))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2093 = 1.0;
    }
    float _2097 = (_2093 * cbModelParam._m0[1u].x) + (_2082 * (1.0 - cbModelParam._m0[1u].x));
    float _2107 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1086);
    float _2108 = isnan(_2107) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2107 : min(cbModelParam._m0[25u].z, _2107));
    float _2188;
    float _2190;
    float _2192;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2155 = fma(_1332, cbModelParam._m0[13u].z, fma(_1328, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1324)) + cbModelParam._m0[13u].w;
        float _2159 = fma(_1332, cbModelParam._m0[14u].z, fma(_1328, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1324)) + cbModelParam._m0[14u].w;
        float _2163 = fma(_1332, cbModelParam._m0[15u].z, fma(_1328, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1324)) + cbModelParam._m0[15u].w;
        float _2166 = fma(_1270, cbModelParam._m0[13u].z, fma(_1269, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1268));
        float _2169 = fma(_1270, cbModelParam._m0[14u].z, fma(_1269, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1268));
        float _2172 = fma(_1270, cbModelParam._m0[15u].z, fma(_1269, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1268));
        float _2200;
        if (_2166 > 0.0)
        {
            _2200 = abs((1.0 - _2155) / _2166);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2155 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2200 = frontier_phi_17_15_ladder;
        }
        float _2424;
        if (_2169 > 0.0)
        {
            _2424 = abs((1.0 - _2159) / _2169);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2159 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2424 = frontier_phi_26_22_ladder;
        }
        float _2681;
        if (_2172 > 0.0)
        {
            _2681 = abs((1.0 - _2163) / _2172);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2163 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2681 = frontier_phi_38_33_ladder;
        }
        float _2683 = isnan(_2424) ? _2200 : (isnan(_2200) ? _2424 : min(_2200, _2424));
        float _2684 = isnan(_2681) ? _2683 : (isnan(_2683) ? _2681 : min(_2683, _2681));
        float _2688 = (_2684 * _2166) + _2155;
        float _2689 = (_2684 * _2169) + _2159;
        float _2690 = (_2684 * _2172) + _2163;
        float _2691 = _2684 * 9.9999997473787516355514526367188e-05;
        float _2693 = (-1.0) - _2691;
        float _2695 = _2691 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2690 > _2695) || ((_2690 < _2693) || ((_2689 > _2695) || ((_2689 < _2693) || ((_2688 < _2693) || (_2688 > _2695))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2690, cbModelParam._m0[9u].z, fma(_2689, cbModelParam._m0[9u].y, _2688 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2690, cbModelParam._m0[10u].z, fma(_2689, cbModelParam._m0[10u].y, _2688 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2690, cbModelParam._m0[11u].z, fma(_2689, cbModelParam._m0[11u].y, _2688 * cbModelParam._m0[11u].x))), _2108);
            frontier_phi_16_38_ladder = _2818.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2818.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2818.x * cbModelParam._m0[1u].y;
        }
        _2188 = frontier_phi_16_38_ladder_2;
        _2190 = frontier_phi_16_38_ladder_1;
        _2192 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2176 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1268, _1269, _1270), _2108);
        _2188 = _2176.x * cbModelParam._m0[1u].y;
        _2190 = _2176.y * cbModelParam._m0[1u].y;
        _2192 = _2176.z * cbModelParam._m0[1u].y;
    }
    float _2196 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1086);
    float _2197 = isnan(_2196) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2196 : min(cbModelParam._m0[25u].w, _2196));
    float _2287;
    float _2289;
    float _2291;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2251 = fma(_1332, cbModelParam._m0[21u].z, fma(_1328, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1324)) + cbModelParam._m0[21u].w;
        float _2255 = fma(_1332, cbModelParam._m0[22u].z, fma(_1328, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1324)) + cbModelParam._m0[22u].w;
        float _2259 = fma(_1332, cbModelParam._m0[23u].z, fma(_1328, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1324)) + cbModelParam._m0[23u].w;
        float _2262 = fma(_1270, cbModelParam._m0[21u].z, fma(_1269, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1268));
        float _2265 = fma(_1270, cbModelParam._m0[22u].z, fma(_1269, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1268));
        float _2268 = fma(_1270, cbModelParam._m0[23u].z, fma(_1269, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1268));
        float _2429;
        if (_2262 > 0.0)
        {
            _2429 = abs((1.0 - _2251) / _2262);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2262 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2251 + 1.0) / _2262);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2429 = frontier_phi_28_24_ladder;
        }
        float _2708;
        if (_2265 > 0.0)
        {
            _2708 = abs((1.0 - _2255) / _2265);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2265 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2255 + 1.0) / _2265);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2708 = frontier_phi_40_35_ladder;
        }
        float _2921;
        if (_2268 > 0.0)
        {
            _2921 = abs((1.0 - _2259) / _2268);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2268 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2259 + 1.0) / _2268);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2921 = frontier_phi_49_46_ladder;
        }
        float _2923 = isnan(_2708) ? _2429 : (isnan(_2429) ? _2708 : min(_2429, _2708));
        float _2924 = isnan(_2921) ? _2923 : (isnan(_2923) ? _2921 : min(_2923, _2921));
        float _2928 = (_2924 * _2262) + _2251;
        float _2929 = (_2924 * _2265) + _2255;
        float _2930 = (_2924 * _2268) + _2259;
        float _2931 = _2924 * 9.9999997473787516355514526367188e-05;
        float _2932 = (-1.0) - _2931;
        float _2934 = _2931 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2930 > _2934) || ((_2930 < _2932) || ((_2929 > _2934) || ((_2929 < _2932) || ((_2928 < _2932) || (_2928 > _2934))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3129 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2930, cbModelParam._m0[17u].z, fma(_2929, cbModelParam._m0[17u].y, _2928 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2930, cbModelParam._m0[18u].z, fma(_2929, cbModelParam._m0[18u].y, _2928 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2930, cbModelParam._m0[19u].z, fma(_2929, cbModelParam._m0[19u].y, _2928 * cbModelParam._m0[19u].x))), _2197);
            frontier_phi_25_49_ladder = _3129.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3129.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3129.x * cbModelParam._m0[1u].z;
        }
        _2287 = frontier_phi_25_49_ladder_2;
        _2289 = frontier_phi_25_49_ladder_1;
        _2291 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2271 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1268, _1269, _1270), _2197);
        _2287 = _2271.x * cbModelParam._m0[1u].z;
        _2289 = _2271.y * cbModelParam._m0[1u].z;
        _2291 = _2271.z * cbModelParam._m0[1u].z;
    }
    float _2304 = (((_1295 * _1244) + _1296) * _1260) * ((cbModelParam._m0[1u].w * (_2287 - _2188)) + _2188);
    float _2306 = (((_1295 * _1246) + _1296) * _1260) * ((cbModelParam._m0[1u].w * (_2289 - _2190)) + _2190);
    float _2308 = (((_1295 * _1247) + _1296) * _1260) * ((cbModelParam._m0[1u].w * (_2291 - _2192)) + _2192);
    float _2311 = fma(_2308, cbSceneParam._m0[89u].z, fma(_2306, cbSceneParam._m0[89u].y, _2304 * cbSceneParam._m0[89u].x));
    float _2314 = fma(_2308, cbSceneParam._m0[90u].z, fma(_2306, cbSceneParam._m0[90u].y, _2304 * cbSceneParam._m0[90u].x));
    float _2317 = fma(_2308, cbSceneParam._m0[91u].z, fma(_2306, cbSceneParam._m0[91u].y, _2304 * cbSceneParam._m0[91u].x));
    vec4 _2325 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1182, _1183));
    float _2327 = _2325.w;
    float _2339 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2327);
    float _2340 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2327);
    float _2341 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2327);
    uvec4 _2345 = floatBitsToUint(cbInstanceData._m0[_273 + 5u]);
    uint _2347 = _2345.x * 14u;
    uint _2348 = _2347 + 13u;
    float _2355 = _1260 + (-1.0);
    float _2360 = (cbLight._m0[_2348].x * _2355) + 1.0;
    float _2361 = (cbLight._m0[_2348].y * _2355) + 1.0;
    float _2362 = (cbLight._m0[_2348].z * _2355) + 1.0;
    float _2363 = (cbLight._m0[_2348].w * _2355) + 1.0;
    uint _2364 = _2347 + 5u;
    float _2370 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    uint _2374 = _2347 + 4u;
    float _2383 = isnan(1.0) ? _2360 : (isnan(_2360) ? 1.0 : min(_2360, 1.0));
    uint _2387 = _2347 | 1u;
    float _2398 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_1083, _1084, _1085));
    float _2401 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_1083, _1084, _1085));
    float _4673 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _4684 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2406 = (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * 0.3183098733425140380859375;
    float _2408 = (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * 0.3183098733425140380859375;
    float _2415 = ((cbLight._m0[_2364].x * _2370) * _2408) + (((cbLight._m0[_2374].x * _2339) * _2383) * _2406);
    float _2416 = ((_2370 * cbLight._m0[_2364].y) * _2408) + (((cbLight._m0[_2374].y * _2340) * _2383) * _2406);
    float _2417 = ((_2370 * cbLight._m0[_2364].z) * _2408) + (((cbLight._m0[_2374].z * _2341) * _2383) * _2406);
    uvec4 _2421 = floatBitsToUint(cbLight._m0[_2347 + 12u]);
    bool _2423 = _2421.x == 0u;
    float _2434;
    float _2436;
    float _2438;
    if (_2423)
    {
        _2434 = _2415;
        _2436 = _2416;
        _2438 = _2417;
    }
    else
    {
        uint _2442 = _2347 + 6u;
        float _2458 = (dot(vec3(cbLight._m0[_2347 + 2u].xyz), vec3(_1083, _1084, _1085)) * 0.5) + 0.5;
        float _2459 = _2458 * _2458;
        float _4695 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2460 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2461 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2434 = (((cbLight._m0[_2442].x * 0.3183098733425140380859375) * _2460) * _2461) + _2415;
        _2436 = (((cbLight._m0[_2442].y * 0.3183098733425140380859375) * _2460) * _2461) + _2416;
        _2438 = (((cbLight._m0[_2442].z * 0.3183098733425140380859375) * _2460) * _2461) + _2417;
    }
    bool _2441 = _2421.y == 0u;
    float _2479;
    float _2481;
    float _2483;
    if (_2441)
    {
        _2479 = _2434;
        _2481 = _2436;
        _2483 = _2438;
    }
    else
    {
        uint _2652 = _2347 + 7u;
        float _2668 = (dot(vec3(cbLight._m0[_2347 + 3u].xyz), vec3(_1083, _1084, _1085)) * 0.5) + 0.5;
        float _2669 = _2668 * _2668;
        float _4711 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2670 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2671 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2479 = (((cbLight._m0[_2652].x * 0.3183098733425140380859375) * _2670) * _2671) + _2434;
        _2481 = (((cbLight._m0[_2652].y * 0.3183098733425140380859375) * _2670) * _2671) + _2436;
        _2483 = (((cbLight._m0[_2652].z * 0.3183098733425140380859375) * _2670) * _2671) + _2438;
    }
    uint _2486 = _2347 + 8u;
    float _2499 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _1086) * 0.949999988079071044921875);
    float _2500 = _2499 * _2499;
    float _2501 = cbLight._m0[_2347].x + _1162;
    float _2502 = cbLight._m0[_2347].y + _1163;
    float _2503 = cbLight._m0[_2347].z + _1164;
    float _2507 = inversesqrt(dot(vec3(_2501, _2502, _2503), vec3(_2501, _2502, _2503)));
    float _2508 = _2507 * _2501;
    float _2509 = _2507 * _2502;
    float _2510 = _2507 * _2503;
    float _2511 = dot(vec3(_1083, _1084, _1085), vec3(cbLight._m0[_2347].xyz));
    float _4727 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2514 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
    float _4738 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _2515 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
    float _2516 = dot(vec3(_1083, _1084, _1085), vec3(_2508, _2509, _2510));
    float _4749 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
    float _2519 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2520 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2508, _2509, _2510));
    float _4760 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2524 = _2500 * _2500;
    float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
    float _2536 = exp2(log2(1.0 - (isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0)))) * 5.0);
    float _2537 = 0.959999978542327880859375 - _1241;
    float _2539 = 0.959999978542327880859375 - _1242;
    float _2540 = 0.959999978542327880859375 - _1243;
    float _2547 = 1.0 - _2500;
    float _2558 = (0.5 / (((_2515 * ((_2514 * _2547) + _2500)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2547) + _2500) * _2514))) * _2514;
    float _4771 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2560 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
    uint _2574 = _2347 + 9u;
    float _2585 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _1086) * 0.949999988079071044921875);
    float _2586 = _2585 * _2585;
    float _2587 = cbLight._m0[_2387].x + _1162;
    float _2588 = cbLight._m0[_2387].y + _1163;
    float _2589 = cbLight._m0[_2387].z + _1164;
    float _2593 = inversesqrt(dot(vec3(_2587, _2588, _2589), vec3(_2587, _2588, _2589)));
    float _2594 = _2593 * _2587;
    float _2595 = _2593 * _2588;
    float _2596 = _2593 * _2589;
    float _2597 = dot(vec3(_1083, _1084, _1085), vec3(cbLight._m0[_2387].xyz));
    float _4782 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
    float _2600 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
    float _2601 = dot(vec3(_1083, _1084, _1085), vec3(_2594, _2595, _2596));
    float _4793 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2604 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
    float _2605 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2594, _2595, _2596));
    float _4804 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2609 = _2586 * _2586;
    float _2613 = ((_2604 * _2604) * (_2609 + (-1.0))) + 1.0;
    float _2620 = exp2(log2(1.0 - (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) * 5.0);
    float _2627 = 1.0 - _2586;
    float _2637 = (0.5 / (((_2515 * ((_2600 * _2627) + _2586)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2627) + _2586) * _2600))) * _2600;
    float _4815 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
    float _2639 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_2609 / ((_2613 * _2613) * 3.141590118408203125));
    float _2649 = (((((_2620 * _2537) + _1244) * cbLight._m0[_2574].x) * _2639) * _2370) + ((((cbLight._m0[_2486].x * _2339) * ((_2536 * _2537) + _1244)) * _2560) * _2383);
    float _2650 = (((((_2620 * _2539) + _1246) * cbLight._m0[_2574].y) * _2639) * _2370) + ((((cbLight._m0[_2486].y * _2340) * ((_2536 * _2539) + _1246)) * _2560) * _2383);
    float _2651 = (((((_2620 * _2540) + _1247) * cbLight._m0[_2574].z) * _2639) * _2370) + ((((cbLight._m0[_2486].z * _2341) * ((_2536 * _2540) + _1247)) * _2560) * _2383);
    float _2713;
    float _2715;
    float _2717;
    if (_2423)
    {
        _2713 = _2649;
        _2715 = _2650;
        _2717 = _2651;
    }
    else
    {
        uint _2719 = _2347 + 2u;
        uint _2723 = _2347 + 10u;
        float _2737 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2719].w)) * _1086) * 0.949999988079071044921875);
        float _2738 = _2737 * _2737;
        float _2739 = cbLight._m0[_2719].x + _1162;
        float _2740 = cbLight._m0[_2719].y + _1163;
        float _2741 = cbLight._m0[_2719].z + _1164;
        float _2745 = inversesqrt(dot(vec3(_2739, _2740, _2741), vec3(_2739, _2740, _2741)));
        float _2746 = _2745 * _2739;
        float _2747 = _2745 * _2740;
        float _2748 = _2745 * _2741;
        float _2749 = dot(vec3(_1083, _1084, _1085), vec3(cbLight._m0[_2719].xyz));
        float _4826 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
        float _2752 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _2753 = dot(vec3(_1083, _1084, _1085), vec3(_2746, _2747, _2748));
        float _4837 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2756 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2757 = dot(vec3(cbLight._m0[_2719].xyz), vec3(_2746, _2747, _2748));
        float _4848 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2761 = _2738 * _2738;
        float _2765 = ((_2756 * _2756) * (_2761 + (-1.0))) + 1.0;
        float _2772 = exp2(log2(1.0 - (isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0)))) * 5.0);
        float _2779 = 1.0 - _2738;
        float _2789 = (0.5 / (((_2515 * ((_2752 * _2779) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2779) + _2738) * _2752))) * _2752;
        float _4859 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
        float _2791 = (isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0))) * (_2761 / ((_2765 * _2765) * 3.141590118408203125));
        float _2792 = isnan(1.0) ? _2362 : (isnan(_2362) ? 1.0 : min(_2362, 1.0));
        _2713 = (((((_2772 * _2537) + _1244) * cbLight._m0[_2723].x) * _2791) * _2792) + _2649;
        _2715 = (((((_2772 * _2539) + _1246) * cbLight._m0[_2723].y) * _2791) * _2792) + _2650;
        _2717 = (((((_2772 * _2540) + _1247) * cbLight._m0[_2723].z) * _2791) * _2792) + _2651;
    }
    float _2827;
    float _2829;
    float _2831;
    if (_2441)
    {
        _2827 = _2713;
        _2829 = _2715;
        _2831 = _2717;
    }
    else
    {
        uint _2838 = _2347 + 3u;
        uint _2842 = _2347 + 11u;
        float _2856 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2838].w)) * _1086) * 0.949999988079071044921875);
        float _2857 = _2856 * _2856;
        float _2858 = cbLight._m0[_2838].x + _1162;
        float _2859 = cbLight._m0[_2838].y + _1163;
        float _2860 = cbLight._m0[_2838].z + _1164;
        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
        float _2865 = _2864 * _2858;
        float _2866 = _2864 * _2859;
        float _2867 = _2864 * _2860;
        float _2868 = dot(vec3(_1083, _1084, _1085), vec3(cbLight._m0[_2838].xyz));
        float _4875 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
        float _2871 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
        float _2872 = dot(vec3(_1083, _1084, _1085), vec3(_2865, _2866, _2867));
        float _4886 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
        float _2876 = dot(vec3(cbLight._m0[_2838].xyz), vec3(_2865, _2866, _2867));
        float _4897 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2880 = _2857 * _2857;
        float _2884 = ((_2875 * _2875) * (_2880 + (-1.0))) + 1.0;
        float _2891 = exp2(log2(1.0 - (isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0)))) * 5.0);
        float _2898 = 1.0 - _2857;
        float _2908 = (0.5 / (((_2515 * ((_2871 * _2898) + _2857)) + 9.9999999392252902907785028219223e-09) + (((_2515 * _2898) + _2857) * _2871))) * _2871;
        float _4908 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2910 = (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2880 / ((_2884 * _2884) * 3.141590118408203125));
        float _2911 = isnan(1.0) ? _2363 : (isnan(_2363) ? 1.0 : min(_2363, 1.0));
        _2827 = (((((_2891 * _2537) + _1244) * cbLight._m0[_2842].x) * _2910) * _2911) + _2713;
        _2829 = (((((_2891 * _2539) + _1246) * cbLight._m0[_2842].y) * _2910) * _2911) + _2715;
        _2831 = (((((_2891 * _2540) + _1247) * cbLight._m0[_2842].z) * _2910) * _2911) + _2717;
    }
    float _3046;
    float _3048;
    float _3050;
    float _3052;
    float _3054;
    float _3056;
    if (_2345.y == 0u)
    {
        float _2986 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2987 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2986;
        float _2988 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2986;
        float _2989 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2986;
        uvec4 _3001 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3002 = _3001.x;
        uint _3013 = uint((float(_3001.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1183) / _3002))) + floor(float(uint(cbSceneParam._m0[85u].x * _1182) / _3002)));
        float _3023 = (log2(_2989 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3024 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        uint _3027 = uint(isnan(14.0) ? _3024 : (isnan(_3024) ? 14.0 : min(_3024, 14.0)));
        uvec4 _3032 = texelFetch(g_lightClusterGridBuffer, int(((_3027 << 2u) + (_3013 << 6u)) >> 2u));
        uint _3033 = _3032.x;
        uint _3034 = _3001.z;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        if (((((1u << ((_3034 >> 4u) & 15u)) + 4294967295u) & _3033) == 0u) || ((_3034 & 240u) == 0u))
        {
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
            _3140 = 0.0;
            _3142 = 0.0;
            _3144 = 0.0;
        }
        else
        {
            float _3135;
            float _3137;
            float _3139;
            float _3141;
            float _3143;
            float _3145;
            float _3286 = 0.0;
            float _3287 = 0.0;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            uint _3292 = 0u;
            uint _3301;
            bool _3302;
            for (;;)
            {
                _3301 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3292 << 2u)) >> 2u)).x;
                _3302 = _3301 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3302)
                {
                    frontier_phi_66_pred = _3286;
                    frontier_phi_66_pred_1 = _3291;
                    frontier_phi_66_pred_2 = _3290;
                    frontier_phi_66_pred_3 = _3289;
                    frontier_phi_66_pred_4 = _3288;
                    frontier_phi_66_pred_5 = _3287;
                }
                else
                {
                    float _3431;
                    float _3432;
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    uint _3437;
                    _3431 = _3286;
                    _3432 = _3287;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3301;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    for (;;)
                    {
                        uint _3441 = uint(findLSB(_3437)) + (_3292 << 5u);
                        uint _3438 = (_3437 + 4294967295u) & _3437;
                        uint _3443 = _3441 * 48u;
                        vec4 _3457 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3443)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3443 + 3u)).x));
                        uint _3463 = (_3441 * 48u) + 4u;
                        vec4 _3476 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3482 = (_3441 * 48u) + 8u;
                        vec3 _3493 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3482)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3482 + 2u)).x));
                        float _3497 = _3457.x - _2987;
                        float _3498 = _3457.y - _2988;
                        float _3499 = _3457.z - _2989;
                        float _3500 = dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499));
                        float _3503 = inversesqrt(_3500);
                        float _3504 = _3503 * _3497;
                        float _3505 = _3503 * _3498;
                        float _3506 = _3503 * _3499;
                        float _3507 = dot(vec3(_1201, _1204, _1207), vec3(_3504, _3505, _3506));
                        float _3512 = 1.0 - (_3500 * _3457.w);
                        float _4934 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                        float _3513 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
                        float _3514 = sqrt(_3500) * _3476.w;
                        float _3517 = 1.39999997615814208984375 / (_3514 + 1.39999997615814208984375);
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3507) + _3518;
                        float _3524 = _3514 * _3514;
                        float _3528 = ((isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0))) * _3513) / ((_3524 * 0.699999988079071044921875) + 1.0);
                        float _3532 = (-0.0) - _2987;
                        float _3533 = (-0.0) - _2988;
                        float _3534 = (-0.0) - _2989;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3539 = _3538 * _3532;
                        float _3540 = _3538 * _3533;
                        float _3541 = _3538 * _3534;
                        float _3549 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                        float _3550 = 1.0 - _1276;
                        float _3557 = sqrt(1.0 - ((1.0 - (_3550 * _3550)) * (1.0 - (_3549 * _3549))));
                        float _3558 = _3557 * _3557;
                        float _3559 = _3558 * _3558;
                        float _3560 = _3539 + _3504;
                        float _3561 = _3540 + _3505;
                        float _3562 = _3541 + _3506;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3570 = dot(vec3(_1201, _1204, _1207), vec3(_3539, _3540, _3541));
                        float _4950 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3573 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
                        float _3574 = dot(vec3(_1201, _1204, _1207), vec3(_3566 * _3560, _3566 * _3561, _3566 * _3562));
                        float _4961 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                        float _3577 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                        float _3581 = ((_3577 * _3577) * (_3559 + (-1.0))) + 1.0;
                        float _3582 = _3517 * _3558;
                        float _3583 = _3582 * _3582;
                        float _3586 = ((1.0 - _3583) * _3507) + _3583;
                        float _4972 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                        float _3587 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
                        float _3588 = 1.0 - _3558;
                        float _3598 = (0.5 / (((_3587 * ((_3573 * _3588) + _3558)) + 9.9999999392252902907785028219223e-09) + (((_3587 * _3588) + _3558) * _3573))) * _3587;
                        float _4983 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3609 = (((_3559 * 3.1415927410125732421875) * (isnan(1.0) ? _4983 : (isnan(_4983) ? 1.0 : min(_4983, 1.0)))) / ((_3581 * _3581) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125))) * _3513;
                        _3361 = (_3528 * _3476.x) + _3434;
                        _3362 = (_3528 * _3476.y) + _3435;
                        _3363 = (_3528 * _3476.z) + _3436;
                        _3358 = (_3609 * _3493.x) + _3431;
                        _3359 = (_3609 * _3493.y) + _3432;
                        _3360 = (_3609 * _3493.z) + _3433;
                        if (_3438 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3431 = _3358;
                            _3432 = _3359;
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3438;
                        }
                    }
                    frontier_phi_66_pred = _3358;
                    frontier_phi_66_pred_1 = _3363;
                    frontier_phi_66_pred_2 = _3362;
                    frontier_phi_66_pred_3 = _3361;
                    frontier_phi_66_pred_4 = _3360;
                    frontier_phi_66_pred_5 = _3359;
                }
                _3135 = frontier_phi_66_pred;
                _3145 = frontier_phi_66_pred_1;
                _3143 = frontier_phi_66_pred_2;
                _3141 = frontier_phi_66_pred_3;
                _3139 = frontier_phi_66_pred_4;
                _3137 = frontier_phi_66_pred_5;
                uint _3293 = _3292 + 1u;
                if (_3293 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3286 = _3135;
                    _3287 = _3137;
                    _3288 = _3139;
                    _3289 = _3141;
                    _3290 = _3143;
                    _3291 = _3145;
                    _3292 = _3293;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
            _3140 = _3141;
            _3142 = _3143;
            _3144 = _3145;
        }
        uvec4 _3148 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3149 = _3148.z;
        uint _3151 = (_3149 >> 8u) & 15u;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        if (((4294967295u << _3151) & _3033) == 0u)
        {
            _3254 = _3134;
            _3256 = _3136;
            _3258 = _3138;
            _3260 = _3140;
            _3262 = _3142;
            _3264 = _3144;
        }
        else
        {
            float _3279 = inversesqrt(dot(vec3(_2987, _2988, _2989), vec3(_2987, _2988, _2989)));
            float _3280 = _3279 * _2987;
            float _3281 = _3279 * _2988;
            float _3282 = _3279 * _2989;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3151 < ((_3149 >> 12u) & 15u))
            {
                float _3255;
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3414 = _3134;
                float _3415 = _3136;
                float _3416 = _3138;
                float _3417 = _3140;
                float _3418 = _3142;
                float _3419 = _3144;
                uint _3420 = _3151;
                uint _3429;
                bool _3430;
                for (;;)
                {
                    _3429 = texelFetch(g_lightClassification, int((((_3027 << 5u) + (_3013 << 9u)) + (_3420 << 2u)) >> 2u)).x;
                    _3430 = _3429 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3430)
                    {
                        frontier_phi_77_pred = _3419;
                        frontier_phi_77_pred_1 = _3418;
                        frontier_phi_77_pred_2 = _3417;
                        frontier_phi_77_pred_3 = _3416;
                        frontier_phi_77_pred_4 = _3415;
                        frontier_phi_77_pred_5 = _3414;
                    }
                    else
                    {
                        float _3623;
                        float _3624;
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3916;
                        float _3917;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3636 = _3414;
                        float _3637 = _3415;
                        float _3638 = _3416;
                        float _3639 = _3417;
                        float _3640 = _3418;
                        float _3641 = _3419;
                        uint _3642 = _3429;
                        uint _3643;
                        vec4 _3668;
                        float _3669;
                        vec4 _3684;
                        vec3 _3696;
                        vec4 _3711;
                        vec4 _3726;
                        float _3772;
                        bool _3773;
                        for (;;)
                        {
                            uint _3653 = ((_3420 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3642));
                            _3643 = (_3642 + 4294967295u) & _3642;
                            uint _3655 = _3653 * 40u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            _3669 = _3668.w;
                            uint _3671 = (_3653 * 40u) + 4u;
                            _3684 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3671)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3671 + 3u)).x));
                            uint _3686 = (_3653 * 40u) + 8u;
                            _3696 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x));
                            uint _3698 = (_3653 * 40u) + 16u;
                            _3711 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 3u)).x));
                            uint _3713 = (_3653 * 40u) + 20u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3653 * 40u) + 24u;
                            vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3747 = (_3653 * 40u) + 28u;
                            vec4 _3760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3747 + 3u)).x));
                            _3772 = fma(_2989, _3760.z, fma(_2988, _3760.y, _3760.x * _2987)) + _3760.w;
                            _3773 = !((fma(_2989, _3741.z, fma(_2988, _3741.y, _3741.x * _2987)) + _3741.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3773)
                            {
                                float _3800 = _3668.x - _2987;
                                float _3801 = _3668.y - _2988;
                                float _3802 = _3668.z - _2989;
                                float _3803 = dot(vec3(_3800, _3801, _3802), vec3(_3800, _3801, _3802));
                                float _3806 = inversesqrt(_3803);
                                float _3807 = _3806 * _3800;
                                float _3808 = _3806 * _3801;
                                float _3809 = _3806 * _3802;
                                float _3813 = 1.0 - (_3803 / (_3669 * _3669));
                                float _4994 = isnan(0.0) ? _3813 : (isnan(_3813) ? 0.0 : max(_3813, 0.0));
                                float _3814 = isnan(1.0) ? _4994 : (isnan(_4994) ? 1.0 : min(_4994, 1.0));
                                float _3818 = sqrt(_3803) * _3684.w;
                                float _3820 = 1.39999997615814208984375 / (_3818 + 1.39999997615814208984375);
                                float _3821 = _3820 * _3820;
                                float _3824 = ((1.0 - _3821) * dot(vec3(_3807, _3808, _3809), vec3(_1201, _1204, _1207))) + _3821;
                                float _3827 = _3818 * _3818;
                                float _3831 = (fma(_2989, _3711.z, fma(_2988, _3711.y, _3711.x * _2987)) + _3711.w) / _3772;
                                float _3832 = (fma(_2989, _3726.z, fma(_2988, _3726.y, _3726.x * _2987)) + _3726.w) / _3772;
                                float _3836 = 1.0 - dot(vec2(_3831, _3832), vec2(_3831, _3832));
                                float _5010 = isnan(0.0) ? _3836 : (isnan(_3836) ? 0.0 : max(_3836, 0.0));
                                float _3837 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3838 = _3837 * (((isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0))) * _3814) / ((_3827 * 0.699999988079071044921875) + 1.0));
                                float _3850 = exp2(log2(1.0 / ((_3827 * 3.5) + 5.0)) * 0.25);
                                float _3851 = 1.0 - _1276;
                                float _3858 = sqrt(1.0 - ((1.0 - (_3851 * _3851)) * (1.0 - (_3850 * _3850))));
                                float _3859 = _3858 * _3858;
                                float _3860 = _3859 * _3859;
                                float _3861 = _3807 - _3280;
                                float _3862 = _3808 - _3281;
                                float _3863 = _3809 - _3282;
                                float _3867 = inversesqrt(dot(vec3(_3861, _3862, _3863), vec3(_3861, _3862, _3863)));
                                float _3871 = dot(vec3(_1201, _1204, _1207), vec3((-0.0) - _3280, (-0.0) - _3281, (-0.0) - _3282));
                                float _5021 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3874 = isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0));
                                float _3875 = dot(vec3(_1201, _1204, _1207), vec3(_3867 * _3861, _3867 * _3862, _3867 * _3863));
                                float _5032 = isnan(0.0) ? _3875 : (isnan(_3875) ? 0.0 : max(_3875, 0.0));
                                float _3878 = isnan(1.0) ? _5032 : (isnan(_5032) ? 1.0 : min(_5032, 1.0));
                                float _3882 = ((_3878 * _3878) * (_3860 + (-1.0))) + 1.0;
                                float _3883 = _3820 * _3859;
                                float _3884 = _3883 * _3883;
                                float _3890 = ((1.0 - _3884) * dot(vec3(_1201, _1204, _1207), vec3(_3807, _3808, _3809))) + _3884;
                                float _5043 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3891 = isnan(1.0) ? _5043 : (isnan(_5043) ? 1.0 : min(_5043, 1.0));
                                float _3892 = 1.0 - _3859;
                                float _3902 = (0.5 / (((_3891 * ((_3874 * _3892) + _3859)) + 9.9999999392252902907785028219223e-09) + (((_3891 * _3892) + _3859) * _3874))) * _3891;
                                float _5054 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3912 = (_3837 * _3814) * (((_3860 * 3.1415927410125732421875) * (isnan(1.0) ? _5054 : (isnan(_5054) ? 1.0 : min(_5054, 1.0)))) / ((_3882 * _3882) * ((_3827 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3838 * _3684.y;
                                frontier_phi_83_pred_1 = _3838 * _3684.x;
                                frontier_phi_83_pred_2 = _3912 * _3696.z;
                                frontier_phi_83_pred_3 = _3912 * _3696.y;
                                frontier_phi_83_pred_4 = _3912 * _3696.x;
                                frontier_phi_83_pred_5 = _3838 * _3684.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3920 = frontier_phi_83_pred;
                            _3919 = frontier_phi_83_pred_1;
                            _3918 = frontier_phi_83_pred_2;
                            _3917 = frontier_phi_83_pred_3;
                            _3916 = frontier_phi_83_pred_4;
                            _3921 = frontier_phi_83_pred_5;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            _3628 = _3921 + _3641;
                            _3623 = _3916 + _3636;
                            _3624 = _3917 + _3637;
                            _3625 = _3918 + _3638;
                            if (_3643 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3636 = _3623;
                                _3637 = _3624;
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3643;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3628;
                        frontier_phi_77_pred_1 = _3627;
                        frontier_phi_77_pred_2 = _3626;
                        frontier_phi_77_pred_3 = _3625;
                        frontier_phi_77_pred_4 = _3624;
                        frontier_phi_77_pred_5 = _3623;
                    }
                    _3265 = frontier_phi_77_pred;
                    _3263 = frontier_phi_77_pred_1;
                    _3261 = frontier_phi_77_pred_2;
                    _3259 = frontier_phi_77_pred_3;
                    _3257 = frontier_phi_77_pred_4;
                    _3255 = frontier_phi_77_pred_5;
                    uint _3421 = _3420 + 1u;
                    if (_3421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3414 = _3255;
                        _3415 = _3257;
                        _3416 = _3259;
                        _3417 = _3261;
                        _3418 = _3263;
                        _3419 = _3265;
                        _3420 = _3421;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3259;
                frontier_phi_58_59_ladder_1 = _3265;
                frontier_phi_58_59_ladder_2 = _3263;
                frontier_phi_58_59_ladder_3 = _3261;
                frontier_phi_58_59_ladder_4 = _3257;
                frontier_phi_58_59_ladder_5 = _3255;
            }
            else
            {
                frontier_phi_58_59_ladder = _3138;
                frontier_phi_58_59_ladder_1 = _3144;
                frontier_phi_58_59_ladder_2 = _3142;
                frontier_phi_58_59_ladder_3 = _3140;
                frontier_phi_58_59_ladder_4 = _3136;
                frontier_phi_58_59_ladder_5 = _3134;
            }
            _3254 = frontier_phi_58_59_ladder_5;
            _3256 = frontier_phi_58_59_ladder_4;
            _3258 = frontier_phi_58_59_ladder;
            _3260 = frontier_phi_58_59_ladder_3;
            _3262 = frontier_phi_58_59_ladder_2;
            _3264 = frontier_phi_58_59_ladder_1;
        }
        float _3269 = isnan(1.0) ? _1260 : (isnan(_1260) ? 1.0 : min(_1260, 1.0));
        _3046 = (_3269 * _3260) + _2479;
        _3048 = (_3269 * _3262) + _2481;
        _3050 = (_3269 * _3264) + _2483;
        _3052 = ((_3254 * _1244) * _3269) + _2827;
        _3054 = ((_3256 * _1246) * _3269) + _2829;
        _3056 = ((_3258 * _1247) * _3269) + _2831;
    }
    else
    {
        _3046 = _2479;
        _3048 = _2481;
        _3050 = _2483;
        _3052 = _2827;
        _3054 = _2829;
        _3056 = _2831;
    }
    float _5070 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _5081 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _5092 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _3073 = ((isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0))) * (_3046 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1260))) + ((_3052 + ((isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0))) * _2097)) * cbPerFrame._m0[3u].x);
    float _3074 = ((isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0))) * (_3048 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1260))) + ((_3054 + ((isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0))) * _2097)) * cbPerFrame._m0[3u].x);
    float _3075 = ((isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_3050 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1260))) + ((_3056 + ((isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0))) * _2097)) * cbPerFrame._m0[3u].x);
    uint _3076 = _273 + 6u;
    float _3084 = _1182 / cbSceneParam._m0[86u].x;
    float _3085 = _1183 / cbSceneParam._m0[86u].y;
    vec4 _3099 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, (log2((isnan(cbSceneParam._m0[77u].w) ? _1105 : (isnan(_1105) ? cbSceneParam._m0[77u].w : min(_1105, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3101 = _3099.x;
    float _3102 = _3099.y;
    float _3103 = _3099.z;
    float _3104 = _3099.w;
    float _3196;
    float _3198;
    float _3200;
    float _3202;
    if (_1105 > cbSceneParam._m0[78u].w)
    {
        float _3159 = isnan(_1105) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1105 : min(cbSceneParam._m0[80u].w, _1105));
        float _3160 = _3159 / _1105;
        float _3171 = _3160 * _1155;
        float _3172 = _1156 * _3160;
        float _3173 = (-0.0) - _3172;
        float _3174 = _3160 * _1157;
        float _3176 = (cbSceneParam._m0[77u].w * _3173) / _3159;
        float _3177 = _3176 + cbSceneParam._m0[79u].w;
        float _3178 = cbSceneParam._m0[79u].w - _3172;
        float _3184 = sqrt(((_3171 * _3171) + (_3172 * _3172)) + (_3174 * _3174));
        float _3187 = (1.0 - (cbSceneParam._m0[77u].w / _3159)) * _3184;
        float _3192 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3194 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3371;
        if (abs((_3173 - _3176) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3371 = ((((_3177 > 0.0) ? exp2(_3192 * _3177) : (2.0 - exp2(_3194 * _3177))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3187;
        }
        else
        {
            float _3315 = 1.0 / cbSceneParam._m0[80u].x;
            float _3316 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : max(_3177, _3178));
            float _3317 = isnan(_3178) ? _3177 : (isnan(_3177) ? _3178 : min(_3177, _3178));
            float _3326 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : min(_3316, 0.0));
            float _3327 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : min(_3317, 0.0));
            _3371 = ((abs(_3184 / _3173) * cbSceneParam._m0[80u].y) * ((((_3326 - _3327) * 2.0) - ((exp2(_3192 * (isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0)))) - exp2(_3192 * (isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0))))) * _3315)) - ((exp2(_3194 * _3326) - exp2(_3194 * _3327)) * _3315))) + (_3187 * cbSceneParam._m0[80u].z);
        }
        vec4 _3373 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3084, _3085, 1.0), 0.0);
        float _3382 = exp2((_3371 * (-1.44269502162933349609375)) * (1.0 - _3373.w));
        float _3383 = log2(_3382);
        float _3399 = log2(_3104);
        _3196 = (exp2(_3399 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].x)) * _3373.x) / cbSceneParam._m0[78u].x)) + _3101;
        _3198 = (exp2(_3399 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].y)) * _3373.y) / cbSceneParam._m0[78u].y)) + _3102;
        _3200 = (exp2(_3399 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3383 * cbSceneParam._m0[78u].z)) * _3373.z) / cbSceneParam._m0[78u].z)) + _3103;
        _3202 = _3382 * _3104;
    }
    else
    {
        _3196 = _3101;
        _3198 = _3102;
        _3200 = _3103;
        _3202 = _3104;
    }
    bool _3409;
    vec4 _3212;
    vec4 _3234;
    float _3236;
    float _3240;
    float _3241;
    float _3242;
    float _3243;
    bool _3253;
    for (;;)
    {
        _3212 = cbMatDynParam._m0[0u];
        float _3214 = roundEven(_3212.y);
        bool _3215 = _3214 == 3.0;
        float _3216 = log2(_3202);
        float _3223 = exp2(_3216 * cbSceneParam._m0[78u].x) * _3073;
        float _3224 = exp2(_3216 * cbSceneParam._m0[78u].y) * _3074;
        float _3225 = exp2(_3216 * cbSceneParam._m0[78u].z) * _3075;
        float _3232 = _1171 + (-0.5);
        _3234 = cbMtdParam._m0[1u];
        _3236 = _3234.y * _3232;
        float _3239 = (_3214 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3240 = _3239 * (_3215 ? _3223 : (_3223 + (cbSceneParam._m0[72u].w * _3196)));
        _3241 = _3239 * (_3215 ? _3224 : (_3224 + (cbSceneParam._m0[72u].w * _3198)));
        _3242 = _3239 * (_3215 ? _3225 : (_3225 + (cbSceneParam._m0[72u].w * _3200)));
        _3243 = _3232 * 0.999000012874603271484375;
        _3253 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3253)
        {
            if ((cbInstanceData._m0[_273 + 7u].x + _3243) < 0.5)
            {
                _3409 = true;
                break;
            }
        }
        uint _3350 = _1220 + uint(_3212.w);
        if ((cbInstanceData._m0[_3350].w < 1.0) && ((cbInstanceData._m0[_3350].w + _3243) < 0.5))
        {
            _3409 = true;
            break;
        }
        if ((_3236 + 1.0) < _3234.x)
        {
            _3409 = true;
            break;
        }
        _3409 = false;
        break;
    }
    float _3614;
    if (_3409)
    {
        discard_state = true;
        _3614 = 0.0;
    }
    else
    {
        _3614 = cbInstanceData._m0[_3076].w;
    }
    SV_Target.x = _3240;
    SV_Target.y = _3241;
    SV_Target.z = _3242;
    SV_Target.w = _3614;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3076].w;
    discard_exit();
}


