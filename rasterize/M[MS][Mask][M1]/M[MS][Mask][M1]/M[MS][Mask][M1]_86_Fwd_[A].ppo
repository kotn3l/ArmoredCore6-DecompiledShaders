#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1497;
float _3875;
float _3876;
float _3877;
float _3878;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _305 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _311 = _305.x * cbMtdParam._m0[11u].x;
    float _312 = _305.y * cbMtdParam._m0[11u].y;
    float _313 = _305.z * cbMtdParam._m0[11u].z;
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _351 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _387 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _389 = _387.x;
    float _401 = dot(vec4(_389, _387.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _418 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _351.x) * 2.0) - ((((_389 - _401) * cbMtdParam._m0[23u].w) + _401) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3887 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _426 = (_419 * ((_332.x * cbMtdParam._m0[12u].x) - _311)) + _311;
    float _427 = (_419 * ((_332.y * cbMtdParam._m0[12u].y) - _312)) + _312;
    float _428 = (_419 * ((_332.z * cbMtdParam._m0[12u].z) - _313)) + _313;
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _467 = _465.x;
    float _477 = dot(vec4(_467, _465.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _491 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _351.y) * 2.0) - ((((_467 - _477) * cbMtdParam._m0[23u].w) + _477) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3898 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _492 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _499 = (_492 * ((_445.x * cbMtdParam._m0[13u].x) - _426)) + _426;
    float _500 = (_492 * ((_445.y * cbMtdParam._m0[13u].y) - _427)) + _427;
    float _501 = (_492 * ((_445.z * cbMtdParam._m0[13u].z) - _428)) + _428;
    vec4 _520 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _284) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _285) + cbTextureTilingScale._m0[14u].w));
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _559 = _557.x;
    float _560 = _557.y;
    float _561 = _557.z;
    float _568 = ((_540.x - _559) * _419) + _559;
    float _569 = ((_540.y - _560) * _419) + _560;
    float _570 = ((_540.z - _561) * _419) + _561;
    vec4 _582 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _595 = ((_582.z - _570) * _492) + _570;
    float _598 = ((((_582.x - _568) * _492) + _568) * 2.0) + (-1.0);
    float _600 = ((((_582.y - _569) * _492) + _569) * 2.0) + (-1.0);
    float _601 = dot(vec2(_598, _600), vec2(_598, _600));
    float _3909 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _606 = sqrt(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))));
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _284) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _285) + cbTextureTilingScale._m0[11u].w));
    float _647 = _645.x;
    float _648 = 1.0 - _647;
    float _657 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _660 = ((isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : min(_657, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _669 = (_660 - ((((((_647 - _648) * cbMtdParam._m0[24u].z) + _648) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _660))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3930 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _670 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _677 = (_670 * ((_520.x * cbMtdParam._m0[18u].x) - _499)) + _499;
    float _678 = (_670 * ((_520.y * cbMtdParam._m0[18u].y) - _500)) + _500;
    float _679 = (_670 * ((_520.z * cbMtdParam._m0[18u].z) - _501)) + _501;
    vec4 _691 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _693 = _691.x;
    float _694 = 1.0 - _693;
    float _719 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_693 - _694) * cbMtdParam._m0[24u].w) + _694) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3941 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _720 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _728 = ((((cbMtdParam._m0[10u].x - _677) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _720) + _677;
    float _729 = ((((cbMtdParam._m0[10u].y - _678) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _720) + _678;
    float _730 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _679)) * _720) + _679;
    vec4 _756 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _758 = _756.x;
    float _776 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _758) * _419) + _758;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _776) * _492) + _776;
    float _797 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _793) * cbMtdParam._m0[19u].z) + _793;
    float _799 = _797 - (_797 * _670);
    float _801 = _799 - (_799 * _720);
    float _805 = (cbMtdParam._m0[19u].w * (_620.z - _595)) + _595;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _284) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _285) + cbTextureTilingScale._m0[15u].w));
    float _826 = (_819.x * 2.0) + (-1.0);
    float _827 = (_819.y * 2.0) + (-1.0);
    float _828 = dot(vec2(_826, _827), vec2(_826, _827));
    float _3952 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _836 = (_670 * (_819.z - _805)) + _805;
    float _839 = ((cbMtdParam._m0[23u].x - _836) * _720) + _836;
    vec4 _858 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _864 = (_858.x * 2.0) + (-1.0);
    float _865 = (_858.y * 2.0) + (-1.0);
    float _866 = dot(vec2(_864, _865), vec2(_864, _865));
    float _3963 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _874 = (((_620.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _598;
    float _875 = (((_620.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _600;
    float _887 = (((_826 - _874) + (cbMtdParam._m0[21u].x * _874)) * _670) + _874;
    float _888 = (((_827 - _875) + (cbMtdParam._m0[21u].x * _875)) * _670) + _875;
    float _889 = (_670 * (sqrt(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) - _606)) + _606;
    float _900 = (((_864 - _887) + (_887 * cbMtdParam._m0[22u].z)) * _720) + _887;
    float _901 = (((_865 - _888) + (_888 * cbMtdParam._m0[22u].z)) * _720) + _888;
    float _902 = ((sqrt(1.0 - (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0)))) - _889) * _720) + _889;
    float _904 = cbMtdParam._m0[22u].x + _620.w;
    float _907 = fma(_902, _252 * NORMAL.x, fma(_901, _259 * TANGENT.x, (_245 * _237) * _900));
    float _910 = fma(_902, _252 * NORMAL.y, fma(_901, _259 * TANGENT.y, (_245 * _238) * _900));
    float _913 = fma(_902, _252 * NORMAL.z, fma(_901, _259 * TANGENT.z, (_245 * _239) * _900));
    float _917 = inversesqrt(dot(vec3(_907, _910, _913), vec3(_907, _910, _913)));
    float _918 = _917 * _907;
    float _919 = _917 * _910;
    float _920 = _917 * _913;
    float _3974 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _921 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _3996 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4007 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4018 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4029 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _926 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _940 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _980 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _990 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _980);
    float _991 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _980);
    float _992 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _980);
    float _996 = inversesqrt(dot(vec3(_990, _991, _992), vec3(_990, _991, _992)));
    float _997 = _990 * _996;
    float _998 = _991 * _996;
    float _999 = _992 * _996;
    vec4 _1004 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1006 = _1004.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1178 = sqrt(((_990 * _990) + (_991 * _991)) + (_992 * _992));
        float _1184 = (cbMatDynParam._m0[5u].x * _1178) + cbMatDynParam._m0[5u].y;
        float _4040 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1185 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
        float _1189 = (cbMatDynParam._m0[5u].z * _1178) + cbMatDynParam._m0[5u].w;
        float _4051 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) - _1185)) + _1185) < ((_1006 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1017 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1018 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1036 = fma(_920, cbSceneParam._m0[5u].z, fma(_919, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _918));
    float _1039 = fma(_920, cbSceneParam._m0[6u].z, fma(_919, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _918));
    float _1042 = fma(_920, cbSceneParam._m0[7u].z, fma(_919, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _918));
    uint _1055 = _265 + 9u;
    uint _1056 = _1055 + uint(cbMatDynParam._m0[0u].w);
    float _1062 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * cbInstanceData._m0[_1056].x;
    float _1063 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * cbInstanceData._m0[_1056].y;
    float _1064 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0)))) * cbInstanceData._m0[_1056].z;
    float _4062 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _1065 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _4073 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _1068 = 1.0 - _926;
    float _1069 = _1065 * _1068;
    float _1070 = _1066 * _1068;
    float _1071 = _1067 * _1068;
    float _1076 = (_1065 + (-0.039999999105930328369140625)) * _926;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _926;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _926;
    float _1079 = _1076 + 0.039999999105930328369140625;
    float _1081 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    vec4 _1091 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1017, cbSceneParam._m0[86u].y * _1018));
    float _1095 = ((isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * TEXCOORD_5.w) * _1091.x;
    float _1096 = dot(vec3(_918, _919, _920), vec3(_997, _998, _999));
    float _1099 = _1096 * 2.0;
    float _1103 = (_1099 * _918) - _997;
    float _1104 = (_1099 * _919) - _998;
    float _1105 = (_1099 * _920) - _999;
    float _1109 = abs(dot(vec3(_997, _998, _999), vec3(_918, _919, _920)));
    float _4095 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1111 = sqrt(_921);
    float _1124 = exp2((_1111 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1111 * 3.0));
    float _1130 = (1.0 - _1124) * ((_1111 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1131 = _1124 * _1111;
    float _1159 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1496;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1221 = fma(_1167, cbModelParam._m0[26u].z, fma(_1163, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1159));
        float _1225 = fma(_1167, cbModelParam._m0[27u].z, fma(_1163, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1159));
        float _1229 = fma(_1167, cbModelParam._m0[28u].z, fma(_1163, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1159));
        float _1254 = _1159 + _918;
        float _1255 = _1163 + _919;
        float _1256 = _1167 + _920;
        float _1266 = fma(_1256, cbModelParam._m0[26u].z, fma(_1255, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1254)) - _1221;
        float _1267 = fma(_1256, cbModelParam._m0[27u].z, fma(_1255, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1254)) - _1225;
        float _1268 = fma(_1256, cbModelParam._m0[28u].z, fma(_1255, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1254)) - _1229;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1221 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1225 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[34u].z) + ((((((_1229 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1324 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1290.x + (-0.5));
        float _1326 = _1324 * (_1290.y + (-0.5));
        float _1327 = _1324 * (_1290.z + (-0.5));
        float _1334 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1297.x + (-0.5));
        float _1336 = _1334 * (_1297.y + (-0.5));
        float _1337 = _1334 * (_1297.z + (-0.5));
        float _1344 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1304.x + (-0.5));
        float _1346 = _1344 * (_1304.y + (-0.5));
        float _1347 = _1344 * (_1304.z + (-0.5));
        float _1354 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1311.x + (-0.5));
        float _1356 = _1354 * (_1311.y + (-0.5));
        float _1357 = _1354 * (_1311.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1378 = (dot(vec3(_918, _919, _920), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1388 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _4143 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1390 + 1.0))) + _1395) * _1358;
        float _1405 = _1326 * 0.5;
        float _1406 = _1336 * 0.5;
        float _1407 = _1346 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_918, _919, _920), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _4176 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1432 + 1.0))) + _1437) * _1359;
        float _1447 = _1327 * 0.5;
        float _1448 = _1337 * 0.5;
        float _1449 = _1347 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_918, _919, _920), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4209 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1474 + 1.0))) + _1479) * _1360;
        _1496 = _1327;
        _1498 = _1326;
        _1499 = _1325;
        _1500 = _1337;
        _1501 = _1336;
        _1502 = _1335;
        _1503 = _1347;
        _1504 = _1346;
        _1505 = _1345;
        _1506 = _1360;
        _1507 = _1359;
        _1508 = _1358;
        _1509 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1510 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1511 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1497;
        _1498 = _1497;
        _1499 = _1497;
        _1500 = _1497;
        _1501 = _1497;
        _1502 = _1497;
        _1503 = _1497;
        _1504 = _1497;
        _1505 = _1497;
        _1506 = _1497;
        _1507 = _1497;
        _1508 = _1497;
        _1509 = 0.0;
        _1510 = 0.0;
        _1511 = 0.0;
    }
    float _1807;
    float _1808;
    float _1809;
    float _1810;
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1538 = fma(_1167, cbModelParam._m0[30u].z, fma(_1163, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159));
        float _1542 = fma(_1167, cbModelParam._m0[31u].z, fma(_1163, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159));
        float _1546 = fma(_1167, cbModelParam._m0[32u].z, fma(_1163, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159));
        float _1569 = _1159 + _918;
        float _1570 = _1163 + _919;
        float _1571 = _1167 + _920;
        float _1581 = fma(_1571, cbModelParam._m0[30u].z, fma(_1570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1569)) - _1538;
        float _1582 = fma(_1571, cbModelParam._m0[31u].z, fma(_1570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1569)) - _1542;
        float _1583 = fma(_1571, cbModelParam._m0[32u].z, fma(_1570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1569)) - _1546;
        float _1587 = inversesqrt(dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583)));
        float _1600 = ((_1587 * _1581) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1538 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1601 = ((_1587 * _1582) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1542 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1602 = ((_1587 * _1583) / cbModelParam._m0[35u].z) + ((((((_1546 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1604 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1611 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1600, _1601, _1602), 0.0);
        float _1637 = exp2((_1604.w + (-0.5)) * 20.0) * 2.0;
        float _1638 = _1637 * (_1604.x + (-0.5));
        float _1639 = _1637 * (_1604.y + (-0.5));
        float _1640 = _1637 * (_1604.z + (-0.5));
        float _1647 = exp2((_1611.w + (-0.5)) * 20.0) * 2.0;
        float _1648 = _1647 * (_1611.x + (-0.5));
        float _1649 = _1647 * (_1611.y + (-0.5));
        float _1650 = _1647 * (_1611.z + (-0.5));
        float _1657 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1658 = _1657 * (_1618.x + (-0.5));
        float _1659 = _1657 * (_1618.y + (-0.5));
        float _1660 = _1657 * (_1618.z + (-0.5));
        float _1667 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1668 = _1667 * (_1625.x + (-0.5));
        float _1669 = _1667 * (_1625.y + (-0.5));
        float _1670 = _1667 * (_1625.z + (-0.5));
        float _1671 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1672 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1673 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1674 = _1638 * 0.5;
        float _1675 = _1648 * 0.5;
        float _1676 = _1658 * 0.5;
        float _1677 = dot(vec3(_1674, _1675, _1676), vec3(_1674, _1675, _1676));
        float _1682 = (_1677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1677);
        float _1690 = (dot(vec3(_918, _919, _920), vec3(_1682 * _1674, _1682 * _1675, _1682 * _1676)) + 1.0) * 0.5;
        float _4250 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1699 = sqrt(((_1675 * _1675) + (_1674 * _1674)) + (_1676 * _1676)) / (_1671 + 9.9999997473787516355514526367188e-06);
        float _4261 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1700 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
        float _1701 = _1700 * 2.0;
        float _1705 = (1.0 - _1700) / (_1700 + 1.0);
        float _4272 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1706 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
        float _1715 = ((((1.0 - _1706) * (_1701 + 2.0)) * exp2(log2(isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0))) * (_1701 + 1.0))) + _1706) * _1671;
        float _1716 = _1639 * 0.5;
        float _1717 = _1649 * 0.5;
        float _1718 = _1659 * 0.5;
        float _1719 = dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718));
        float _1724 = (_1719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1719);
        float _1732 = (dot(vec3(_918, _919, _920), vec3(_1724 * _1716, _1724 * _1717, _1724 * _1718)) + 1.0) * 0.5;
        float _4283 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1741 = sqrt(((_1717 * _1717) + (_1716 * _1716)) + (_1718 * _1718)) / (_1672 + 9.9999997473787516355514526367188e-06);
        float _4294 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
        float _1743 = _1742 * 2.0;
        float _1747 = (1.0 - _1742) / (_1742 + 1.0);
        float _4305 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1748 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _1757 = ((((1.0 - _1748) * (_1743 + 2.0)) * exp2(log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_1743 + 1.0))) + _1748) * _1672;
        float _1758 = _1640 * 0.5;
        float _1759 = _1650 * 0.5;
        float _1760 = _1660 * 0.5;
        float _1761 = dot(vec3(_1758, _1759, _1760), vec3(_1758, _1759, _1760));
        float _1766 = (_1761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1761);
        float _1774 = (dot(vec3(_918, _919, _920), vec3(_1766 * _1758, _1766 * _1759, _1766 * _1760)) + 1.0) * 0.5;
        float _4316 = isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0));
        float _1783 = sqrt(((_1759 * _1759) + (_1758 * _1758)) + (_1760 * _1760)) / (_1673 + 9.9999997473787516355514526367188e-06);
        float _4327 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1785 = _1784 * 2.0;
        float _1789 = (1.0 - _1784) / (_1784 + 1.0);
        float _4338 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1790 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
        float _1799 = ((((1.0 - _1790) * (_1785 + 2.0)) * exp2(log2(isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_1785 + 1.0))) + _1790) * _1673;
        _1807 = _1640;
        _1808 = _1639;
        _1809 = _1638;
        _1810 = _1650;
        _1811 = _1649;
        _1812 = _1648;
        _1813 = _1660;
        _1814 = _1659;
        _1815 = _1658;
        _1816 = _1673;
        _1817 = _1672;
        _1818 = _1671;
        _1819 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)));
        _1820 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)));
        _1821 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)));
    }
    else
    {
        _1807 = _1497;
        _1808 = _1497;
        _1809 = _1497;
        _1810 = _1497;
        _1811 = _1497;
        _1812 = _1497;
        _1813 = _1497;
        _1814 = _1497;
        _1815 = _1497;
        _1816 = _1497;
        _1817 = _1497;
        _1818 = _1497;
        _1819 = 0.0;
        _1820 = 0.0;
        _1821 = 0.0;
    }
    float _1831 = (cbModelParam._m0[1u].x * (_1819 - _1509)) + _1509;
    float _1832 = (cbModelParam._m0[1u].x * (_1820 - _1510)) + _1510;
    float _1833 = (cbModelParam._m0[1u].x * (_1821 - _1511)) + _1511;
    float _1854 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1857 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1860 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1831));
    float _1875 = _1103 * 0.5;
    float _1876 = _1104 * 0.5;
    float _1877 = _1105 * 0.5;
    float _1878 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1809, _1812, _1815, _1818));
    float _1881 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1808, _1811, _1814, _1817));
    float _1884 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1807, _1810, _1813, _1816));
    float _1918;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1891 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1496, _1500, _1503, _1506));
        float _1895 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1498, _1501, _1504, _1507));
        float _1899 = dot(vec4(_1875, _1876, _1877, 1.0), vec4(_1499, _1502, _1505, _1508));
        float _1906 = dot(vec4(cbModelParam._m0[39u]), vec4(_1875, _1876, _1877, 1.0));
        _1918 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1906) ? 0.0 : (isnan(0.0) ? _1906 : max(0.0, _1906))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1918 = 1.0;
    }
    float _1929;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1920 = dot(vec4(cbModelParam._m0[40u]), vec4(_1875, _1876, _1877, 1.0));
        _1929 = dot(vec3(isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)), isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0)), isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1929 = 1.0;
    }
    float _1933 = (_1929 * cbModelParam._m0[1u].x) + (_1918 * (1.0 - cbModelParam._m0[1u].x));
    float _1943 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _921);
    float _1944 = isnan(_1943) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1943 : min(cbModelParam._m0[25u].z, _1943));
    float _2024;
    float _2026;
    float _2028;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1991 = fma(_1167, cbModelParam._m0[13u].z, fma(_1163, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159)) + cbModelParam._m0[13u].w;
        float _1995 = fma(_1167, cbModelParam._m0[14u].z, fma(_1163, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159)) + cbModelParam._m0[14u].w;
        float _1999 = fma(_1167, cbModelParam._m0[15u].z, fma(_1163, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159)) + cbModelParam._m0[15u].w;
        float _2002 = fma(_1105, cbModelParam._m0[13u].z, fma(_1104, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1103));
        float _2005 = fma(_1105, cbModelParam._m0[14u].z, fma(_1104, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1103));
        float _2008 = fma(_1105, cbModelParam._m0[15u].z, fma(_1104, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1103));
        float _2036;
        if (_2002 > 0.0)
        {
            _2036 = abs((1.0 - _1991) / _2002);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2002 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1991 + 1.0) / _2002);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2036 = frontier_phi_17_15_ladder;
        }
        float _2238;
        if (_2005 > 0.0)
        {
            _2238 = abs((1.0 - _1995) / _2005);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1995 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2238 = frontier_phi_26_22_ladder;
        }
        float _2492;
        if (_2008 > 0.0)
        {
            _2492 = abs((1.0 - _1999) / _2008);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1999 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2492 = frontier_phi_38_33_ladder;
        }
        float _2494 = isnan(_2238) ? _2036 : (isnan(_2036) ? _2238 : min(_2036, _2238));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _2002) + _1991;
        float _2500 = (_2495 * _2005) + _1995;
        float _2501 = (_2495 * _2008) + _1999;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2502;
        float _2506 = _2502 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 > _2506) || ((_2500 < _2504) || ((_2499 < _2504) || (_2499 > _2506))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2501, cbModelParam._m0[9u].z, fma(_2500, cbModelParam._m0[9u].y, _2499 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2501, cbModelParam._m0[10u].z, fma(_2500, cbModelParam._m0[10u].y, _2499 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2501, cbModelParam._m0[11u].z, fma(_2500, cbModelParam._m0[11u].y, _2499 * cbModelParam._m0[11u].x))), _1944);
            frontier_phi_16_38_ladder = _2629.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2629.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2629.x * cbModelParam._m0[1u].y;
        }
        _2024 = frontier_phi_16_38_ladder_2;
        _2026 = frontier_phi_16_38_ladder_1;
        _2028 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1103, _1104, _1105), _1944);
        _2024 = _2012.x * cbModelParam._m0[1u].y;
        _2026 = _2012.y * cbModelParam._m0[1u].y;
        _2028 = _2012.z * cbModelParam._m0[1u].y;
    }
    float _2032 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _921);
    float _2033 = isnan(_2032) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2032 : min(cbModelParam._m0[25u].w, _2032));
    float _2122;
    float _2124;
    float _2126;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2086 = fma(_1167, cbModelParam._m0[21u].z, fma(_1163, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159)) + cbModelParam._m0[21u].w;
        float _2090 = fma(_1167, cbModelParam._m0[22u].z, fma(_1163, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159)) + cbModelParam._m0[22u].w;
        float _2094 = fma(_1167, cbModelParam._m0[23u].z, fma(_1163, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159)) + cbModelParam._m0[23u].w;
        float _2097 = fma(_1105, cbModelParam._m0[21u].z, fma(_1104, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1103));
        float _2100 = fma(_1105, cbModelParam._m0[22u].z, fma(_1104, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1103));
        float _2103 = fma(_1105, cbModelParam._m0[23u].z, fma(_1104, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1103));
        float _2243;
        if (_2097 > 0.0)
        {
            _2243 = abs((1.0 - _2086) / _2097);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2097 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2086 + 1.0) / _2097);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2243 = frontier_phi_28_24_ladder;
        }
        float _2519;
        if (_2100 > 0.0)
        {
            _2519 = abs((1.0 - _2090) / _2100);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2100 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2090 + 1.0) / _2100);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2519 = frontier_phi_40_35_ladder;
        }
        float _2732;
        if (_2103 > 0.0)
        {
            _2732 = abs((1.0 - _2094) / _2103);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2103 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2094 + 1.0) / _2103);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2732 = frontier_phi_49_46_ladder;
        }
        float _2734 = isnan(_2519) ? _2243 : (isnan(_2243) ? _2519 : min(_2243, _2519));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _2097) + _2086;
        float _2740 = (_2735 * _2100) + _2090;
        float _2741 = (_2735 * _2103) + _2094;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2940 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _2033);
            frontier_phi_25_49_ladder = _2940.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2940.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2940.x * cbModelParam._m0[1u].z;
        }
        _2122 = frontier_phi_25_49_ladder_2;
        _2124 = frontier_phi_25_49_ladder_1;
        _2126 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1103, _1104, _1105), _2033);
        _2122 = _2106.x * cbModelParam._m0[1u].z;
        _2124 = _2106.y * cbModelParam._m0[1u].z;
        _2126 = _2106.z * cbModelParam._m0[1u].z;
    }
    float _2139 = (((_1130 * _1079) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2122 - _2024)) + _2024);
    float _2141 = (((_1130 * _1081) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2124 - _2026)) + _2026);
    float _2143 = (((_1130 * _1082) + _1131) * _1095) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2146 = fma(_2143, cbSceneParam._m0[89u].z, fma(_2141, cbSceneParam._m0[89u].y, _2139 * cbSceneParam._m0[89u].x));
    float _2149 = fma(_2143, cbSceneParam._m0[90u].z, fma(_2141, cbSceneParam._m0[90u].y, _2139 * cbSceneParam._m0[90u].x));
    float _2152 = fma(_2143, cbSceneParam._m0[91u].z, fma(_2141, cbSceneParam._m0[91u].y, _2139 * cbSceneParam._m0[91u].x));
    uvec4 _2162 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2164 = _2162.x * 14u;
    uint _2165 = _2164 + 13u;
    float _2172 = _1095 + (-1.0);
    float _2177 = (cbLight._m0[_2165].x * _2172) + 1.0;
    float _2178 = (cbLight._m0[_2165].y * _2172) + 1.0;
    float _2179 = (cbLight._m0[_2165].z * _2172) + 1.0;
    float _2180 = (cbLight._m0[_2165].w * _2172) + 1.0;
    uint _2181 = _2164 + 5u;
    float _2187 = isnan(1.0) ? _2178 : (isnan(_2178) ? 1.0 : min(_2178, 1.0));
    uint _2191 = _2164 + 4u;
    float _2197 = isnan(1.0) ? _2177 : (isnan(_2177) ? 1.0 : min(_2177, 1.0));
    uint _2201 = _2164 | 1u;
    float _2212 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_918, _919, _920));
    float _2215 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_918, _919, _920));
    float _4474 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _4485 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2220 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2222 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2229 = ((cbLight._m0[_2181].x * _2187) * _2222) + ((cbLight._m0[_2191].x * _2197) * _2220);
    float _2230 = ((_2187 * cbLight._m0[_2181].y) * _2222) + ((_2197 * cbLight._m0[_2191].y) * _2220);
    float _2231 = ((_2187 * cbLight._m0[_2181].z) * _2222) + ((_2197 * cbLight._m0[_2191].z) * _2220);
    uvec4 _2235 = floatBitsToUint(cbLight._m0[_2164 + 12u]);
    bool _2237 = _2235.x == 0u;
    float _2248;
    float _2250;
    float _2252;
    if (_2237)
    {
        _2248 = _2229;
        _2250 = _2230;
        _2252 = _2231;
    }
    else
    {
        uint _2256 = _2164 + 6u;
        float _2272 = (dot(vec3(cbLight._m0[_2164 + 2u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2273 = _2272 * _2272;
        float _4496 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
        float _2274 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2275 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2248 = (((cbLight._m0[_2256].x * 0.3183098733425140380859375) * _2274) * _2275) + _2229;
        _2250 = (((cbLight._m0[_2256].y * 0.3183098733425140380859375) * _2274) * _2275) + _2230;
        _2252 = (((cbLight._m0[_2256].z * 0.3183098733425140380859375) * _2274) * _2275) + _2231;
    }
    bool _2255 = _2235.y == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2255)
    {
        _2293 = _2248;
        _2295 = _2250;
        _2297 = _2252;
    }
    else
    {
        uint _2463 = _2164 + 7u;
        float _2479 = (dot(vec3(cbLight._m0[_2164 + 3u].xyz), vec3(_918, _919, _920)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4512 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2482 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2293 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2248;
        _2295 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2250;
        _2297 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2252;
    }
    uint _2300 = _2164 + 8u;
    float _2313 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2164].w)) * _921) * 0.949999988079071044921875);
    float _2314 = _2313 * _2313;
    float _2315 = cbLight._m0[_2164].x + _997;
    float _2316 = cbLight._m0[_2164].y + _998;
    float _2317 = cbLight._m0[_2164].z + _999;
    float _2321 = inversesqrt(dot(vec3(_2315, _2316, _2317), vec3(_2315, _2316, _2317)));
    float _2322 = _2321 * _2315;
    float _2323 = _2321 * _2316;
    float _2324 = _2321 * _2317;
    float _2325 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2164].xyz));
    float _4528 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _2329 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2330 = dot(vec3(_918, _919, _920), vec3(_2322, _2323, _2324));
    float _4550 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2334 = dot(vec3(cbLight._m0[_2164].xyz), vec3(_2322, _2323, _2324));
    float _4561 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2338 = _2314 * _2314;
    float _2342 = ((_2333 * _2333) * (_2338 + (-1.0))) + 1.0;
    float _2350 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2351 = 0.959999978542327880859375 - _1076;
    float _2353 = 0.959999978542327880859375 - _1077;
    float _2354 = 0.959999978542327880859375 - _1078;
    float _2361 = 1.0 - _2314;
    float _2372 = (0.5 / (((_2329 * ((_2328 * _2361) + _2314)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2361) + _2314) * _2328))) * _2328;
    float _4572 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2338 / ((_2342 * _2342) * 3.141590118408203125));
    uint _2385 = _2164 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _921) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2201].x + _997;
    float _2399 = cbLight._m0[_2201].y + _998;
    float _2400 = cbLight._m0[_2201].z + _999;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2201].xyz));
    float _4583 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2412 = dot(vec3(_918, _919, _920), vec3(_2405, _2406, _2407));
    float _4594 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2405, _2406, _2407));
    float _4605 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2438 = 1.0 - _2397;
    float _2448 = (0.5 / (((_2329 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2438) + _2397) * _2411))) * _2411;
    float _4616 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2460 = (((((_2431 * _2351) + _1079) * cbLight._m0[_2385].x) * _2450) * _2187) + (((((_2350 * _2351) + _1079) * cbLight._m0[_2300].x) * _2374) * _2197);
    float _2461 = (((((_2431 * _2353) + _1081) * cbLight._m0[_2385].y) * _2450) * _2187) + (((((_2350 * _2353) + _1081) * cbLight._m0[_2300].y) * _2374) * _2197);
    float _2462 = (((((_2431 * _2354) + _1082) * cbLight._m0[_2385].z) * _2450) * _2187) + (((((_2350 * _2354) + _1082) * cbLight._m0[_2300].z) * _2374) * _2197);
    float _2524;
    float _2526;
    float _2528;
    if (_2237)
    {
        _2524 = _2460;
        _2526 = _2461;
        _2528 = _2462;
    }
    else
    {
        uint _2530 = _2164 + 2u;
        uint _2534 = _2164 + 10u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _921) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _997;
        float _2551 = cbLight._m0[_2530].y + _998;
        float _2552 = cbLight._m0[_2530].z + _999;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2530].xyz));
        float _4627 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2564 = dot(vec3(_918, _919, _920), vec3(_2557, _2558, _2559));
        float _4638 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4649 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2329 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2590) + _2549) * _2563))) * _2563;
        float _4660 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
        _2524 = (((((_2583 * _2351) + _1079) * cbLight._m0[_2534].x) * _2602) * _2603) + _2460;
        _2526 = (((((_2583 * _2353) + _1081) * cbLight._m0[_2534].y) * _2602) * _2603) + _2461;
        _2528 = (((((_2583 * _2354) + _1082) * cbLight._m0[_2534].z) * _2602) * _2603) + _2462;
    }
    float _2638;
    float _2640;
    float _2642;
    if (_2255)
    {
        _2638 = _2524;
        _2640 = _2526;
        _2642 = _2528;
    }
    else
    {
        uint _2649 = _2164 + 3u;
        uint _2653 = _2164 + 11u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _921) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _997;
        float _2670 = cbLight._m0[_2649].y + _998;
        float _2671 = cbLight._m0[_2649].z + _999;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_918, _919, _920), vec3(cbLight._m0[_2649].xyz));
        float _4676 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2683 = dot(vec3(_918, _919, _920), vec3(_2676, _2677, _2678));
        float _4687 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4698 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2329 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2329 * _2709) + _2668) * _2682))) * _2682;
        float _4709 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
        _2638 = (((((_2702 * _2351) + _1079) * cbLight._m0[_2653].x) * _2721) * _2722) + _2524;
        _2640 = (((((_2702 * _2353) + _1081) * cbLight._m0[_2653].y) * _2721) * _2722) + _2526;
        _2642 = (((((_2702 * _2354) + _1082) * cbLight._m0[_2653].z) * _2721) * _2722) + _2528;
    }
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_2162.y == 0u)
    {
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2797;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2797;
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2797;
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.x;
        uint _2824 = uint((float(_2812.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1018) / _2813))) + floor(float(uint(cbSceneParam._m0[85u].x * _1017) / _2813)));
        float _2834 = (log2(_2800 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2835 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        uint _2838 = uint(isnan(14.0) ? _2835 : (isnan(_2835) ? 14.0 : min(_2835, 14.0)));
        uvec4 _2843 = texelFetch(g_lightClusterGridBuffer, int(((_2838 << 2u) + (_2824 << 6u)) >> 2u));
        uint _2844 = _2843.x;
        uint _2845 = _2812.z;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((((1u << ((_2845 >> 4u) & 15u)) + 4294967295u) & _2844) == 0u) || ((_2845 & 240u) == 0u))
        {
            _2945 = 0.0;
            _2947 = 0.0;
            _2949 = 0.0;
            _2951 = 0.0;
            _2953 = 0.0;
            _2955 = 0.0;
        }
        else
        {
            float _2946;
            float _2948;
            float _2950;
            float _2952;
            float _2954;
            float _2956;
            float _3098 = 0.0;
            float _3099 = 0.0;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            uint _3104 = 0u;
            uint _3113;
            bool _3114;
            for (;;)
            {
                _3113 = texelFetch(g_lightClassification, int((((_2838 << 5u) + (_2824 << 9u)) + (_3104 << 2u)) >> 2u)).x;
                _3114 = _3113 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3114)
                {
                    frontier_phi_66_pred = _3098;
                    frontier_phi_66_pred_1 = _3103;
                    frontier_phi_66_pred_2 = _3102;
                    frontier_phi_66_pred_3 = _3101;
                    frontier_phi_66_pred_4 = _3100;
                    frontier_phi_66_pred_5 = _3099;
                }
                else
                {
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    uint _3249;
                    _3243 = _3098;
                    _3244 = _3099;
                    _3245 = _3100;
                    _3246 = _3101;
                    _3247 = _3102;
                    _3248 = _3103;
                    _3249 = _3113;
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    for (;;)
                    {
                        uint _3253 = uint(findLSB(_3249)) + (_3104 << 5u);
                        uint _3250 = (_3249 + 4294967295u) & _3249;
                        uint _3255 = _3253 * 48u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3255)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3255 + 3u)).x));
                        uint _3275 = (_3253 * 48u) + 4u;
                        vec4 _3288 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 3u)).x));
                        uint _3294 = (_3253 * 48u) + 8u;
                        vec3 _3305 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3294)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3294 + 2u)).x));
                        float _3309 = _3269.x - _2798;
                        float _3310 = _3269.y - _2799;
                        float _3311 = _3269.z - _2800;
                        float _3312 = dot(vec3(_3309, _3310, _3311), vec3(_3309, _3310, _3311));
                        float _3315 = inversesqrt(_3312);
                        float _3316 = _3315 * _3309;
                        float _3317 = _3315 * _3310;
                        float _3318 = _3315 * _3311;
                        float _3319 = dot(vec3(_1036, _1039, _1042), vec3(_3316, _3317, _3318));
                        float _3324 = 1.0 - (_3312 * _3269.w);
                        float _4735 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3326 = sqrt(_3312) * _3288.w;
                        float _3329 = 1.39999997615814208984375 / (_3326 + 1.39999997615814208984375);
                        float _3330 = _3329 * _3329;
                        float _3333 = ((1.0 - _3330) * _3319) + _3330;
                        float _3336 = _3326 * _3326;
                        float _3340 = ((isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0))) * _3325) / ((_3336 * 0.699999988079071044921875) + 1.0);
                        float _3344 = (-0.0) - _2798;
                        float _3345 = (-0.0) - _2799;
                        float _3346 = (-0.0) - _2800;
                        float _3350 = inversesqrt(dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346)));
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3361 = exp2(log2(1.0 / ((_3336 * 3.5) + 5.0)) * 0.25);
                        float _3362 = 1.0 - _1111;
                        float _3369 = sqrt(1.0 - ((1.0 - (_3362 * _3362)) * (1.0 - (_3361 * _3361))));
                        float _3370 = _3369 * _3369;
                        float _3371 = _3370 * _3370;
                        float _3372 = _3351 + _3316;
                        float _3373 = _3352 + _3317;
                        float _3374 = _3353 + _3318;
                        float _3378 = inversesqrt(dot(vec3(_3372, _3373, _3374), vec3(_3372, _3373, _3374)));
                        float _3382 = dot(vec3(_1036, _1039, _1042), vec3(_3351, _3352, _3353));
                        float _4751 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3385 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3386 = dot(vec3(_1036, _1039, _1042), vec3(_3378 * _3372, _3378 * _3373, _3378 * _3374));
                        float _4762 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                        float _3389 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3393 = ((_3389 * _3389) * (_3371 + (-1.0))) + 1.0;
                        float _3394 = _3329 * _3370;
                        float _3395 = _3394 * _3394;
                        float _3398 = ((1.0 - _3395) * _3319) + _3395;
                        float _4773 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3400 = 1.0 - _3370;
                        float _3410 = (0.5 / (((_3399 * ((_3385 * _3400) + _3370)) + 9.9999999392252902907785028219223e-09) + (((_3399 * _3400) + _3370) * _3385))) * _3399;
                        float _4784 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                        float _3421 = (((_3371 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3393 * _3393) * ((_3336 * 2.1991131305694580078125) + 3.141590118408203125))) * _3325;
                        _3173 = (_3340 * _3288.x) + _3246;
                        _3174 = (_3340 * _3288.y) + _3247;
                        _3175 = (_3340 * _3288.z) + _3248;
                        _3170 = (_3421 * _3305.x) + _3243;
                        _3171 = (_3421 * _3305.y) + _3244;
                        _3172 = (_3421 * _3305.z) + _3245;
                        if (_3250 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3243 = _3170;
                            _3244 = _3171;
                            _3245 = _3172;
                            _3246 = _3173;
                            _3247 = _3174;
                            _3248 = _3175;
                            _3249 = _3250;
                        }
                    }
                    frontier_phi_66_pred = _3170;
                    frontier_phi_66_pred_1 = _3175;
                    frontier_phi_66_pred_2 = _3174;
                    frontier_phi_66_pred_3 = _3173;
                    frontier_phi_66_pred_4 = _3172;
                    frontier_phi_66_pred_5 = _3171;
                }
                _2946 = frontier_phi_66_pred;
                _2956 = frontier_phi_66_pred_1;
                _2954 = frontier_phi_66_pred_2;
                _2952 = frontier_phi_66_pred_3;
                _2950 = frontier_phi_66_pred_4;
                _2948 = frontier_phi_66_pred_5;
                uint _3105 = _3104 + 1u;
                if (_3105 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3098 = _2946;
                    _3099 = _2948;
                    _3100 = _2950;
                    _3101 = _2952;
                    _3102 = _2954;
                    _3103 = _2956;
                    _3104 = _3105;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2945 = _2946;
            _2947 = _2948;
            _2949 = _2950;
            _2951 = _2952;
            _2953 = _2954;
            _2955 = _2956;
        }
        uvec4 _2959 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2960 = _2959.z;
        uint _2962 = (_2960 >> 8u) & 15u;
        float _3066;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        if (((4294967295u << _2962) & _2844) == 0u)
        {
            _3066 = _2945;
            _3068 = _2947;
            _3070 = _2949;
            _3072 = _2951;
            _3074 = _2953;
            _3076 = _2955;
        }
        else
        {
            float _3091 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
            float _3092 = _3091 * _2798;
            float _3093 = _3091 * _2799;
            float _3094 = _3091 * _2800;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2962 < ((_2960 >> 12u) & 15u))
            {
                float _3067;
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3226 = _2945;
                float _3227 = _2947;
                float _3228 = _2949;
                float _3229 = _2951;
                float _3230 = _2953;
                float _3231 = _2955;
                uint _3232 = _2962;
                uint _3241;
                bool _3242;
                for (;;)
                {
                    _3241 = texelFetch(g_lightClassification, int((((_2838 << 5u) + (_2824 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                    _3242 = _3241 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3242)
                    {
                        frontier_phi_77_pred = _3231;
                        frontier_phi_77_pred_1 = _3230;
                        frontier_phi_77_pred_2 = _3229;
                        frontier_phi_77_pred_3 = _3228;
                        frontier_phi_77_pred_4 = _3227;
                        frontier_phi_77_pred_5 = _3226;
                    }
                    else
                    {
                        float _3435;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3448 = _3226;
                        float _3449 = _3227;
                        float _3450 = _3228;
                        float _3451 = _3229;
                        float _3452 = _3230;
                        float _3453 = _3231;
                        uint _3454 = _3241;
                        uint _3455;
                        vec4 _3480;
                        float _3481;
                        vec4 _3496;
                        vec3 _3508;
                        vec4 _3523;
                        vec4 _3538;
                        float _3584;
                        bool _3585;
                        for (;;)
                        {
                            uint _3465 = ((_3232 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3454));
                            _3455 = (_3454 + 4294967295u) & _3454;
                            uint _3467 = _3465 * 40u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            _3481 = _3480.w;
                            uint _3483 = (_3465 * 40u) + 4u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            uint _3498 = (_3465 * 40u) + 8u;
                            _3508 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x));
                            uint _3510 = (_3465 * 40u) + 16u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3525 = (_3465 * 40u) + 20u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3465 * 40u) + 24u;
                            vec4 _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3559 = (_3465 * 40u) + 28u;
                            vec4 _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            _3584 = fma(_2800, _3572.z, fma(_2799, _3572.y, _3572.x * _2798)) + _3572.w;
                            _3585 = !((fma(_2800, _3553.z, fma(_2799, _3553.y, _3553.x * _2798)) + _3553.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3585)
                            {
                                float _3612 = _3480.x - _2798;
                                float _3613 = _3480.y - _2799;
                                float _3614 = _3480.z - _2800;
                                float _3615 = dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614));
                                float _3618 = inversesqrt(_3615);
                                float _3619 = _3618 * _3612;
                                float _3620 = _3618 * _3613;
                                float _3621 = _3618 * _3614;
                                float _3625 = 1.0 - (_3615 / (_3481 * _3481));
                                float _4795 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                                float _3626 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3630 = sqrt(_3615) * _3496.w;
                                float _3632 = 1.39999997615814208984375 / (_3630 + 1.39999997615814208984375);
                                float _3633 = _3632 * _3632;
                                float _3636 = ((1.0 - _3633) * dot(vec3(_3619, _3620, _3621), vec3(_1036, _1039, _1042))) + _3633;
                                float _3639 = _3630 * _3630;
                                float _3643 = (fma(_2800, _3523.z, fma(_2799, _3523.y, _3523.x * _2798)) + _3523.w) / _3584;
                                float _3644 = (fma(_2800, _3538.z, fma(_2799, _3538.y, _3538.x * _2798)) + _3538.w) / _3584;
                                float _3648 = 1.0 - dot(vec2(_3643, _3644), vec2(_3643, _3644));
                                float _4811 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                                float _3649 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3650 = _3649 * (((isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0))) * _3626) / ((_3639 * 0.699999988079071044921875) + 1.0));
                                float _3662 = exp2(log2(1.0 / ((_3639 * 3.5) + 5.0)) * 0.25);
                                float _3663 = 1.0 - _1111;
                                float _3670 = sqrt(1.0 - ((1.0 - (_3663 * _3663)) * (1.0 - (_3662 * _3662))));
                                float _3671 = _3670 * _3670;
                                float _3672 = _3671 * _3671;
                                float _3673 = _3619 - _3092;
                                float _3674 = _3620 - _3093;
                                float _3675 = _3621 - _3094;
                                float _3679 = inversesqrt(dot(vec3(_3673, _3674, _3675), vec3(_3673, _3674, _3675)));
                                float _3683 = dot(vec3(_1036, _1039, _1042), vec3((-0.0) - _3092, (-0.0) - _3093, (-0.0) - _3094));
                                float _4822 = isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0));
                                float _3686 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3687 = dot(vec3(_1036, _1039, _1042), vec3(_3679 * _3673, _3679 * _3674, _3679 * _3675));
                                float _4833 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3690 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3694 = ((_3690 * _3690) * (_3672 + (-1.0))) + 1.0;
                                float _3695 = _3632 * _3671;
                                float _3696 = _3695 * _3695;
                                float _3702 = ((1.0 - _3696) * dot(vec3(_1036, _1039, _1042), vec3(_3619, _3620, _3621))) + _3696;
                                float _4844 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                                float _3703 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3704 = 1.0 - _3671;
                                float _3714 = (0.5 / (((_3703 * ((_3686 * _3704) + _3671)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3671) * _3686))) * _3703;
                                float _4855 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3724 = (_3649 * _3626) * (((_3672 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3694 * _3694) * ((_3639 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3650 * _3496.y;
                                frontier_phi_83_pred_1 = _3650 * _3496.x;
                                frontier_phi_83_pred_2 = _3724 * _3508.z;
                                frontier_phi_83_pred_3 = _3724 * _3508.y;
                                frontier_phi_83_pred_4 = _3724 * _3508.x;
                                frontier_phi_83_pred_5 = _3650 * _3496.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3732 = frontier_phi_83_pred;
                            _3731 = frontier_phi_83_pred_1;
                            _3730 = frontier_phi_83_pred_2;
                            _3729 = frontier_phi_83_pred_3;
                            _3728 = frontier_phi_83_pred_4;
                            _3733 = frontier_phi_83_pred_5;
                            _3438 = _3731 + _3451;
                            _3439 = _3732 + _3452;
                            _3440 = _3733 + _3453;
                            _3435 = _3728 + _3448;
                            _3436 = _3729 + _3449;
                            _3437 = _3730 + _3450;
                            if (_3455 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3448 = _3435;
                                _3449 = _3436;
                                _3450 = _3437;
                                _3451 = _3438;
                                _3452 = _3439;
                                _3453 = _3440;
                                _3454 = _3455;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3440;
                        frontier_phi_77_pred_1 = _3439;
                        frontier_phi_77_pred_2 = _3438;
                        frontier_phi_77_pred_3 = _3437;
                        frontier_phi_77_pred_4 = _3436;
                        frontier_phi_77_pred_5 = _3435;
                    }
                    _3077 = frontier_phi_77_pred;
                    _3075 = frontier_phi_77_pred_1;
                    _3073 = frontier_phi_77_pred_2;
                    _3071 = frontier_phi_77_pred_3;
                    _3069 = frontier_phi_77_pred_4;
                    _3067 = frontier_phi_77_pred_5;
                    uint _3233 = _3232 + 1u;
                    if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3226 = _3067;
                        _3227 = _3069;
                        _3228 = _3071;
                        _3229 = _3073;
                        _3230 = _3075;
                        _3231 = _3077;
                        _3232 = _3233;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3071;
                frontier_phi_58_59_ladder_1 = _3077;
                frontier_phi_58_59_ladder_2 = _3075;
                frontier_phi_58_59_ladder_3 = _3073;
                frontier_phi_58_59_ladder_4 = _3069;
                frontier_phi_58_59_ladder_5 = _3067;
            }
            else
            {
                frontier_phi_58_59_ladder = _2949;
                frontier_phi_58_59_ladder_1 = _2955;
                frontier_phi_58_59_ladder_2 = _2953;
                frontier_phi_58_59_ladder_3 = _2951;
                frontier_phi_58_59_ladder_4 = _2947;
                frontier_phi_58_59_ladder_5 = _2945;
            }
            _3066 = frontier_phi_58_59_ladder_5;
            _3068 = frontier_phi_58_59_ladder_4;
            _3070 = frontier_phi_58_59_ladder;
            _3072 = frontier_phi_58_59_ladder_3;
            _3074 = frontier_phi_58_59_ladder_2;
            _3076 = frontier_phi_58_59_ladder_1;
        }
        float _3081 = isnan(1.0) ? _1095 : (isnan(_1095) ? 1.0 : min(_1095, 1.0));
        _2857 = (_3081 * _3072) + _2293;
        _2859 = (_3081 * _3074) + _2295;
        _2861 = (_3081 * _3076) + _2297;
        _2863 = ((_3066 * _1079) * _3081) + _2638;
        _2865 = ((_3068 * _1081) * _3081) + _2640;
        _2867 = ((_3070 * _1082) * _3081) + _2642;
    }
    else
    {
        _2857 = _2293;
        _2859 = _2295;
        _2861 = _2297;
        _2863 = _2638;
        _2865 = _2640;
        _2867 = _2642;
    }
    float _4871 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _4882 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _4893 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _2884 = ((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2857 + ((isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))) * _1095))) + ((_2863 + ((isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2885 = ((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2859 + ((isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))) * _1095))) + ((_2865 + ((isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    float _2886 = ((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2861 + ((isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))) * _1095))) + ((_2867 + ((isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0))) * _1933)) * cbPerFrame._m0[3u].x);
    uint _2887 = _265 + 6u;
    float _2895 = _1017 / cbSceneParam._m0[86u].x;
    float _2896 = _1018 / cbSceneParam._m0[86u].y;
    vec4 _2910 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2895, _2896, (log2((isnan(cbSceneParam._m0[77u].w) ? _940 : (isnan(_940) ? cbSceneParam._m0[77u].w : min(_940, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2912 = _2910.x;
    float _2913 = _2910.y;
    float _2914 = _2910.z;
    float _2915 = _2910.w;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_940 > cbSceneParam._m0[78u].w)
    {
        float _2970 = isnan(_940) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _940 : min(cbSceneParam._m0[80u].w, _940));
        float _2971 = _2970 / _940;
        float _2982 = _2971 * _990;
        float _2983 = _991 * _2971;
        float _2984 = (-0.0) - _2983;
        float _2986 = _2971 * _992;
        float _2988 = (cbSceneParam._m0[77u].w * _2984) / _2970;
        float _2989 = _2988 + cbSceneParam._m0[79u].w;
        float _2990 = cbSceneParam._m0[79u].w - _2983;
        float _2996 = sqrt(((_2982 * _2982) + (_2983 * _2983)) + (_2986 * _2986));
        float _2999 = (1.0 - (cbSceneParam._m0[77u].w / _2970)) * _2996;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3006 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3183;
        if (abs((_2984 - _2988) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3183 = ((((_2989 > 0.0) ? exp2(_3004 * _2989) : (2.0 - exp2(_3006 * _2989))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2999;
        }
        else
        {
            float _3127 = 1.0 / cbSceneParam._m0[80u].x;
            float _3128 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : max(_2989, _2990));
            float _3129 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : min(_2989, _2990));
            float _3138 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : min(_3128, 0.0));
            float _3139 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : min(_3129, 0.0));
            _3183 = ((abs(_2996 / _2984) * cbSceneParam._m0[80u].y) * ((((_3138 - _3139) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0))))) * _3127)) - ((exp2(_3006 * _3138) - exp2(_3006 * _3139)) * _3127))) + (_2999 * cbSceneParam._m0[80u].z);
        }
        vec4 _3185 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2895, _2896, 1.0), 0.0);
        float _3194 = exp2((_3183 * (-1.44269502162933349609375)) * (1.0 - _3185.w));
        float _3195 = log2(_3194);
        float _3211 = log2(_2915);
        _3008 = (exp2(_3211 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].x)) * _3185.x) / cbSceneParam._m0[78u].x)) + _2912;
        _3010 = (exp2(_3211 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].y)) * _3185.y) / cbSceneParam._m0[78u].y)) + _2913;
        _3012 = (exp2(_3211 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3195 * cbSceneParam._m0[78u].z)) * _3185.z) / cbSceneParam._m0[78u].z)) + _2914;
        _3014 = _3194 * _2915;
    }
    else
    {
        _3008 = _2912;
        _3010 = _2913;
        _3012 = _2914;
        _3014 = _2915;
    }
    bool _3221;
    vec4 _3024;
    vec4 _3046;
    float _3048;
    float _3052;
    float _3053;
    float _3054;
    float _3055;
    bool _3065;
    for (;;)
    {
        _3024 = cbMatDynParam._m0[0u];
        float _3026 = roundEven(_3024.y);
        bool _3027 = _3026 == 3.0;
        float _3028 = log2(_3014);
        float _3035 = exp2(_3028 * cbSceneParam._m0[78u].x) * _2884;
        float _3036 = exp2(_3028 * cbSceneParam._m0[78u].y) * _2885;
        float _3037 = exp2(_3028 * cbSceneParam._m0[78u].z) * _2886;
        float _3044 = _1006 + (-0.5);
        _3046 = cbMtdParam._m0[1u];
        _3048 = _3046.y * _3044;
        float _3051 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3052 = _3051 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3008)));
        _3053 = _3051 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3010)));
        _3054 = _3051 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3012)));
        _3055 = _3044 * 0.999000012874603271484375;
        _3065 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3065)
        {
            if ((cbInstanceData._m0[_265 + 7u].x + _3055) < 0.5)
            {
                _3221 = true;
                break;
            }
        }
        uint _3162 = _1055 + uint(_3024.w);
        if ((cbInstanceData._m0[_3162].w < 1.0) && ((cbInstanceData._m0[_3162].w + _3055) < 0.5))
        {
            _3221 = true;
            break;
        }
        if ((_3048 + 1.0) < _3046.x)
        {
            _3221 = true;
            break;
        }
        _3221 = false;
        break;
    }
    float _3426;
    if (_3221)
    {
        discard_state = true;
        _3426 = 0.0;
    }
    else
    {
        _3426 = cbInstanceData._m0[_2887].w;
    }
    SV_Target.x = _3052;
    SV_Target.y = _3053;
    SV_Target.z = _3054;
    SV_Target.w = _3426;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2887].w;
    discard_exit();
}


