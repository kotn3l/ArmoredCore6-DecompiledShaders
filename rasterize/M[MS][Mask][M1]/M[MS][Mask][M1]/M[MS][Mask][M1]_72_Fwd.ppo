#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1359;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _216 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _217 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _218 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _224 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _225 = _224 * _216;
    float _226 = _224 * _217;
    float _227 = _224 * _218;
    float _231 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _232 = _231 * NORMAL.x;
    float _233 = _231 * NORMAL.y;
    float _234 = _231 * NORMAL.z;
    float _238 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _239 = _238 * TANGENT.x;
    float _240 = _238 * TANGENT.y;
    float _241 = _238 * TANGENT.z;
    uint _244 = uint(roundEven(NORMAL.w)) * 13u;
    uint _250 = _244 + 1u;
    uint _254 = _244 + 2u;
    float _263 = sqrt(((cbInstanceData._m0[_250].x * cbInstanceData._m0[_250].x) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x)) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x));
    float _264 = _263 * TEXCOORD.z;
    float _265 = _263 * TEXCOORD.w;
    vec4 _284 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _313 = _308.x * cbMtdParam._m0[11u].x;
    float _314 = _308.y * cbMtdParam._m0[11u].y;
    float _315 = _308.z * cbMtdParam._m0[11u].z;
    vec4 _334 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _264) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _392 = _390.x;
    float _404 = dot(vec4(_392, _390.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _421 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _354.x) * 2.0) - ((((_392 - _404) * cbMtdParam._m0[23u].w) + _404) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3685 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _422 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _429 = (_422 * ((_334.x * cbMtdParam._m0[12u].x) - _313)) + _313;
    float _430 = (_422 * ((_334.y * cbMtdParam._m0[12u].y) - _314)) + _314;
    float _431 = (_422 * ((_334.z * cbMtdParam._m0[12u].z) - _315)) + _315;
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _264) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _265) + cbTextureTilingScale._m0[3u].w));
    vec4 _468 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _470 = _468.x;
    float _480 = dot(vec4(_470, _468.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _494 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _354.y) * 2.0) - ((((_470 - _480) * cbMtdParam._m0[23u].w) + _480) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3696 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _495 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _508 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _284.x) * ((_495 * ((_448.x * cbMtdParam._m0[13u].x) - _429)) + _429);
    float _511 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _284.y) * ((_495 * ((_448.y * cbMtdParam._m0[13u].y) - _430)) + _430);
    float _514 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _284.z) * ((_495 * ((_448.z * cbMtdParam._m0[13u].z) - _431)) + _431);
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _264) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _265) + cbTextureTilingScale._m0[4u].w));
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _551 = _549.x;
    float _552 = _549.y;
    float _553 = _549.z;
    float _560 = ((_532.x - _551) * _422) + _551;
    float _561 = ((_532.y - _552) * _422) + _552;
    float _562 = ((_532.z - _553) * _422) + _553;
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _264) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _587 = ((_574.z - _562) * _495) + _562;
    float _590 = ((((_574.x - _560) * _495) + _560) * 2.0) + (-1.0);
    float _592 = ((((_574.y - _561) * _495) + _561) * 2.0) + (-1.0);
    float _593 = dot(vec2(_590, _592), vec2(_590, _592));
    float _3707 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _598 = sqrt(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0))));
    vec4 _612 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _624 = (((_612.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _590;
    float _625 = (((_612.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _592;
    float _628 = fma(_598, _232, fma(_625, _239, _624 * _225));
    float _631 = fma(_598, _233, fma(_625, _240, _624 * _226));
    float _634 = fma(_598, _234, fma(_625, _241, _624 * _227));
    float _638 = inversesqrt(dot(vec3(_628, _631, _634), vec3(_628, _631, _634)));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _264) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _667 = _665.x;
    float _668 = 1.0 - _667;
    float _677 = (cbMtdParam._m0[19u].x + dot(vec4(_638 * _628, _638 * _631, _638 * _634, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_667 - _668) * cbMtdParam._m0[24u].z) + _668) * cbMtdParam._m0[21u].z);
    float _3718 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _678 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
    float _685 = (_678 * (cbMtdParam._m0[17u].x - _508)) + _508;
    float _686 = (_678 * (cbMtdParam._m0[17u].y - _511)) + _511;
    float _687 = (_678 * (cbMtdParam._m0[17u].z - _514)) + _514;
    vec4 _713 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _715 = _713.x;
    float _732 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _264) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w)).x - _715) * _422) + _715;
    float _749 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _264) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _265) + cbTextureTilingScale._m0[21u].w)).x - _732) * _495) + _732;
    float _753 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _749) * cbMtdParam._m0[19u].z) + _749;
    float _755 = _753 - (_753 * _678);
    float _759 = (cbMtdParam._m0[19u].w * (_612.z - _587)) + _587;
    vec4 _772 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _264) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _265) + cbTextureTilingScale._m0[15u].w));
    float _779 = (_772.x * 2.0) + (-1.0);
    float _780 = (_772.y * 2.0) + (-1.0);
    float _781 = dot(vec2(_779, _780), vec2(_779, _780));
    float _3729 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _789 = ((_772.z - _759) * _678) + _759;
    float _799 = ((sqrt(1.0 - (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0)))) - _598) * _678) + _598;
    float _802 = (((_779 - _624) * _678) + _624) + (cbMtdParam._m0[21u].x * _624);
    float _803 = (((_780 - _625) * _678) + _625) + (cbMtdParam._m0[21u].x * _625);
    float _805 = cbMtdParam._m0[22u].x + _612.w;
    float _808 = fma(_799, _232, fma(_803, _239, _802 * _225));
    float _811 = fma(_799, _233, fma(_803, _240, _802 * _226));
    float _814 = fma(_799, _234, fma(_803, _241, _802 * _227));
    float _818 = inversesqrt(dot(vec3(_808, _811, _814), vec3(_808, _811, _814)));
    float _819 = _818 * _808;
    float _820 = _818 * _811;
    float _821 = _818 * _814;
    float _3740 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _822 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _3751 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _3762 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3773 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _3784 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _3795 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _827 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _892 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _882);
    float _893 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _882);
    float _894 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _882);
    float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
    float _899 = _892 * _898;
    float _900 = _893 * _898;
    float _901 = _894 * _898;
    float _907 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _908 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _926 = fma(_821, cbSceneParam._m0[5u].z, fma(_820, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _819));
    float _929 = fma(_821, cbSceneParam._m0[6u].z, fma(_820, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _819));
    float _932 = fma(_821, cbSceneParam._m0[7u].z, fma(_820, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _819));
    uint _946 = (_244 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _952 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_946].x;
    float _953 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0)))) * cbInstanceData._m0[_946].y;
    float _954 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0)))) * cbInstanceData._m0[_946].z;
    float _3806 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _956 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _957 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _958 = 1.0 - _827;
    float _959 = _955 * _958;
    float _960 = _956 * _958;
    float _961 = _957 * _958;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _827;
    float _967 = (_956 + (-0.039999999105930328369140625)) * _827;
    float _968 = (_957 + (-0.039999999105930328369140625)) * _827;
    float _969 = _966 + 0.039999999105930328369140625;
    float _971 = _967 + 0.039999999105930328369140625;
    float _972 = _968 + 0.039999999105930328369140625;
    vec4 _981 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _907, cbSceneParam._m0[86u].y * _908));
    float _985 = ((isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * TEXCOORD_5.w) * _981.x;
    float _986 = dot(vec3(_819, _820, _821), vec3(_899, _900, _901));
    float _989 = _986 * 2.0;
    float _993 = (_989 * _819) - _899;
    float _994 = (_989 * _820) - _900;
    float _995 = (_989 * _821) - _901;
    float _999 = abs(dot(vec3(_899, _900, _901), vec3(_819, _820, _821)));
    float _3839 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1001 = sqrt(_822);
    float _1014 = exp2((_1001 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1001 * 3.0));
    float _1020 = (1.0 - _1014) * ((_1001 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1021 = _1014 * _1001;
    float _1049 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1053 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1057 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1358;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1083 = fma(_1057, cbModelParam._m0[26u].z, fma(_1053, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049));
        float _1087 = fma(_1057, cbModelParam._m0[27u].z, fma(_1053, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049));
        float _1091 = fma(_1057, cbModelParam._m0[28u].z, fma(_1053, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049));
        float _1116 = _1049 + _819;
        float _1117 = _1053 + _820;
        float _1118 = _1057 + _821;
        float _1128 = fma(_1118, cbModelParam._m0[26u].z, fma(_1117, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1116)) - _1083;
        float _1129 = fma(_1118, cbModelParam._m0[27u].z, fma(_1117, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1116)) - _1087;
        float _1130 = fma(_1118, cbModelParam._m0[28u].z, fma(_1117, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1116)) - _1091;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1083 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1087 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[34u].z) + ((((((_1091 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1152 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1186 = exp2((_1152.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1152.x + (-0.5));
        float _1188 = _1186 * (_1152.y + (-0.5));
        float _1189 = _1186 * (_1152.z + (-0.5));
        float _1196 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1159.x + (-0.5));
        float _1198 = _1196 * (_1159.y + (-0.5));
        float _1199 = _1196 * (_1159.z + (-0.5));
        float _1206 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1166.x + (-0.5));
        float _1208 = _1206 * (_1166.y + (-0.5));
        float _1209 = _1206 * (_1166.z + (-0.5));
        float _1216 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1173.x + (-0.5));
        float _1218 = _1216 * (_1173.y + (-0.5));
        float _1219 = _1216 * (_1173.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1240 = (dot(vec3(_819, _820, _821), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1250 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3887 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1252 + 1.0))) + _1257) * _1220;
        float _1267 = _1188 * 0.5;
        float _1268 = _1198 * 0.5;
        float _1269 = _1208 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_819, _820, _821), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3920 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1294 + 1.0))) + _1299) * _1221;
        float _1309 = _1189 * 0.5;
        float _1310 = _1199 * 0.5;
        float _1311 = _1209 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_819, _820, _821), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3953 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1336 + 1.0))) + _1341) * _1222;
        _1358 = _1189;
        _1360 = _1188;
        _1361 = _1187;
        _1362 = _1199;
        _1363 = _1198;
        _1364 = _1197;
        _1365 = _1209;
        _1366 = _1208;
        _1367 = _1207;
        _1368 = _1222;
        _1369 = _1221;
        _1370 = _1220;
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1372 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1373 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1359;
        _1360 = _1359;
        _1361 = _1359;
        _1362 = _1359;
        _1363 = _1359;
        _1364 = _1359;
        _1365 = _1359;
        _1366 = _1359;
        _1367 = _1359;
        _1368 = _1359;
        _1369 = _1359;
        _1370 = _1359;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1057, cbModelParam._m0[30u].z, fma(_1053, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049));
        float _1401 = fma(_1057, cbModelParam._m0[31u].z, fma(_1053, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049));
        float _1405 = fma(_1057, cbModelParam._m0[32u].z, fma(_1053, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049));
        float _1428 = _1049 + _819;
        float _1429 = _1053 + _820;
        float _1430 = _1057 + _821;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_819, _820, _821), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4016 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_819, _820, _821), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4049 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_819, _820, _821), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4082 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1359;
        _1667 = _1359;
        _1668 = _1359;
        _1669 = _1359;
        _1670 = _1359;
        _1671 = _1359;
        _1672 = _1359;
        _1673 = _1359;
        _1674 = _1359;
        _1675 = _1359;
        _1676 = _1359;
        _1677 = _1359;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1371)) + _1371;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1372)) + _1372;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1373)) + _1373;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _993 * 0.5;
    float _1735 = _994 * 0.5;
    float _1736 = _995 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1362, _1365, _1368));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1360, _1363, _1366, _1369));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1361, _1364, _1367, _1370));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _822);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1884;
    float _1886;
    float _1888;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1851 = fma(_1057, cbModelParam._m0[13u].z, fma(_1053, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1049)) + cbModelParam._m0[13u].w;
        float _1855 = fma(_1057, cbModelParam._m0[14u].z, fma(_1053, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1049)) + cbModelParam._m0[14u].w;
        float _1859 = fma(_1057, cbModelParam._m0[15u].z, fma(_1053, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1049)) + cbModelParam._m0[15u].w;
        float _1862 = fma(_995, cbModelParam._m0[13u].z, fma(_994, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _993));
        float _1865 = fma(_995, cbModelParam._m0[14u].z, fma(_994, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _993));
        float _1868 = fma(_995, cbModelParam._m0[15u].z, fma(_994, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _993));
        float _1896;
        if (_1862 > 0.0)
        {
            _1896 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1896 = frontier_phi_14_12_ladder;
        }
        float _2099;
        if (_1865 > 0.0)
        {
            _2099 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2099 = frontier_phi_23_19_ladder;
        }
        float _2353;
        if (_1868 > 0.0)
        {
            _2353 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2353 = frontier_phi_35_30_ladder;
        }
        float _2355 = isnan(_2099) ? _1896 : (isnan(_1896) ? _2099 : min(_1896, _2099));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1862) + _1851;
        float _2361 = (_2356 * _1865) + _1855;
        float _2362 = (_2356 * _1868) + _1859;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2365 = (-1.0) - _2363;
        float _2367 = _2363 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2362 > _2367) || ((_2362 < _2365) || ((_2361 > _2367) || ((_2361 < _2365) || ((_2360 < _2365) || (_2360 > _2367))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2490 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2362, cbModelParam._m0[9u].z, fma(_2361, cbModelParam._m0[9u].y, _2360 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2362, cbModelParam._m0[10u].z, fma(_2361, cbModelParam._m0[10u].y, _2360 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2362, cbModelParam._m0[11u].z, fma(_2361, cbModelParam._m0[11u].y, _2360 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2490.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2490.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2490.x * cbModelParam._m0[1u].y;
        }
        _1884 = frontier_phi_13_35_ladder_2;
        _1886 = frontier_phi_13_35_ladder_1;
        _1888 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_993, _994, _995), _1803);
        _1884 = _1872.x * cbModelParam._m0[1u].y;
        _1886 = _1872.y * cbModelParam._m0[1u].y;
        _1888 = _1872.z * cbModelParam._m0[1u].y;
    }
    float _1892 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _822);
    float _1893 = isnan(_1892) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1892 : min(cbModelParam._m0[25u].w, _1892));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1057, cbModelParam._m0[21u].z, fma(_1053, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1049)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1057, cbModelParam._m0[22u].z, fma(_1053, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1049)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1057, cbModelParam._m0[23u].z, fma(_1053, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1049)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_995, cbModelParam._m0[21u].z, fma(_994, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _993));
        float _1961 = fma(_995, cbModelParam._m0[22u].z, fma(_994, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _993));
        float _1964 = fma(_995, cbModelParam._m0[23u].z, fma(_994, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _993));
        float _2104;
        if (_1958 > 0.0)
        {
            _2104 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2104 = frontier_phi_25_21_ladder;
        }
        float _2380;
        if (_1961 > 0.0)
        {
            _2380 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2380 = frontier_phi_37_32_ladder;
        }
        float _2593;
        if (_1964 > 0.0)
        {
            _2593 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2593 = frontier_phi_46_43_ladder;
        }
        float _2595 = isnan(_2380) ? _2104 : (isnan(_2104) ? _2380 : min(_2104, _2380));
        float _2596 = isnan(_2593) ? _2595 : (isnan(_2595) ? _2593 : min(_2595, _2593));
        float _2600 = (_2596 * _1958) + _1947;
        float _2601 = (_2596 * _1961) + _1951;
        float _2602 = (_2596 * _1964) + _1955;
        float _2603 = _2596 * 9.9999997473787516355514526367188e-05;
        float _2604 = (-1.0) - _2603;
        float _2606 = _2603 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2602 > _2606) || ((_2602 < _2604) || ((_2601 > _2606) || ((_2601 < _2604) || ((_2600 < _2604) || (_2600 > _2606))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2801 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2602, cbModelParam._m0[17u].z, fma(_2601, cbModelParam._m0[17u].y, _2600 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2602, cbModelParam._m0[18u].z, fma(_2601, cbModelParam._m0[18u].y, _2600 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2602, cbModelParam._m0[19u].z, fma(_2601, cbModelParam._m0[19u].y, _2600 * cbModelParam._m0[19u].x))), _1893);
            frontier_phi_22_46_ladder = _2801.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2801.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2801.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_22_46_ladder_2;
        _1985 = frontier_phi_22_46_ladder_1;
        _1987 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_993, _994, _995), _1893);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _2000 = (((_1020 * _969) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1983 - _1884)) + _1884);
    float _2002 = (((_1020 * _971) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1985 - _1886)) + _1886);
    float _2004 = (((_1020 * _972) + _1021) * _985) * ((cbModelParam._m0[1u].w * (_1987 - _1888)) + _1888);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    uvec4 _2023 = floatBitsToUint(cbInstanceData._m0[_244 + 5u]);
    uint _2025 = _2023.x * 14u;
    uint _2026 = _2025 + 13u;
    float _2033 = _985 + (-1.0);
    float _2038 = (cbLight._m0[_2026].x * _2033) + 1.0;
    float _2039 = (cbLight._m0[_2026].y * _2033) + 1.0;
    float _2040 = (cbLight._m0[_2026].z * _2033) + 1.0;
    float _2041 = (cbLight._m0[_2026].w * _2033) + 1.0;
    uint _2042 = _2025 + 5u;
    float _2048 = isnan(1.0) ? _2039 : (isnan(_2039) ? 1.0 : min(_2039, 1.0));
    uint _2052 = _2025 + 4u;
    float _2058 = isnan(1.0) ? _2038 : (isnan(_2038) ? 1.0 : min(_2038, 1.0));
    uint _2062 = _2025 | 1u;
    float _2073 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_819, _820, _821));
    float _2076 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_819, _820, _821));
    float _4218 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _4229 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2081 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2083 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2090 = ((cbLight._m0[_2042].x * _2048) * _2083) + ((cbLight._m0[_2052].x * _2058) * _2081);
    float _2091 = ((_2048 * cbLight._m0[_2042].y) * _2083) + ((_2058 * cbLight._m0[_2052].y) * _2081);
    float _2092 = ((_2048 * cbLight._m0[_2042].z) * _2083) + ((_2058 * cbLight._m0[_2052].z) * _2081);
    uvec4 _2096 = floatBitsToUint(cbLight._m0[_2025 + 12u]);
    bool _2098 = _2096.x == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2098)
    {
        _2109 = _2090;
        _2111 = _2091;
        _2113 = _2092;
    }
    else
    {
        uint _2117 = _2025 + 6u;
        float _2133 = (dot(vec3(cbLight._m0[_2025 + 2u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2134 = _2133 * _2133;
        float _4240 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2135 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2136 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2109 = (((cbLight._m0[_2117].x * 0.3183098733425140380859375) * _2135) * _2136) + _2090;
        _2111 = (((cbLight._m0[_2117].y * 0.3183098733425140380859375) * _2135) * _2136) + _2091;
        _2113 = (((cbLight._m0[_2117].z * 0.3183098733425140380859375) * _2135) * _2136) + _2092;
    }
    bool _2116 = _2096.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2116)
    {
        _2154 = _2109;
        _2156 = _2111;
        _2158 = _2113;
    }
    else
    {
        uint _2324 = _2025 + 7u;
        float _2340 = (dot(vec3(cbLight._m0[_2025 + 3u].xyz), vec3(_819, _820, _821)) * 0.5) + 0.5;
        float _2341 = _2340 * _2340;
        float _4256 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2342 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2343 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2154 = (((cbLight._m0[_2324].x * 0.3183098733425140380859375) * _2342) * _2343) + _2109;
        _2156 = (((cbLight._m0[_2324].y * 0.3183098733425140380859375) * _2342) * _2343) + _2111;
        _2158 = (((cbLight._m0[_2324].z * 0.3183098733425140380859375) * _2342) * _2343) + _2113;
    }
    uint _2161 = _2025 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _822) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_2025].x + _899;
    float _2177 = cbLight._m0[_2025].y + _900;
    float _2178 = cbLight._m0[_2025].z + _901;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2025].xyz));
    float _4272 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _2190 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2191 = dot(vec3(_819, _820, _821), vec3(_2183, _2184, _2185));
    float _4294 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2183, _2184, _2185));
    float _4305 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _966;
    float _2214 = 0.959999978542327880859375 - _967;
    float _2215 = 0.959999978542327880859375 - _968;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4316 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2246 = _2025 + 9u;
    float _2257 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _822) * 0.949999988079071044921875);
    float _2258 = _2257 * _2257;
    float _2259 = cbLight._m0[_2062].x + _899;
    float _2260 = cbLight._m0[_2062].y + _900;
    float _2261 = cbLight._m0[_2062].z + _901;
    float _2265 = inversesqrt(dot(vec3(_2259, _2260, _2261), vec3(_2259, _2260, _2261)));
    float _2266 = _2265 * _2259;
    float _2267 = _2265 * _2260;
    float _2268 = _2265 * _2261;
    float _2269 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2062].xyz));
    float _4327 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2273 = dot(vec3(_819, _820, _821), vec3(_2266, _2267, _2268));
    float _4338 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2266, _2267, _2268));
    float _4349 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2258 * _2258;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2292 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2299 = 1.0 - _2258;
    float _2309 = (0.5 / (((_2190 * ((_2272 * _2299) + _2258)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2299) + _2258) * _2272))) * _2272;
    float _4360 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2311 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    float _2321 = (((((_2292 * _2212) + _969) * cbLight._m0[_2246].x) * _2311) * _2048) + (((((_2211 * _2212) + _969) * cbLight._m0[_2161].x) * _2235) * _2058);
    float _2322 = (((((_2292 * _2214) + _971) * cbLight._m0[_2246].y) * _2311) * _2048) + (((((_2211 * _2214) + _971) * cbLight._m0[_2161].y) * _2235) * _2058);
    float _2323 = (((((_2292 * _2215) + _972) * cbLight._m0[_2246].z) * _2311) * _2048) + (((((_2211 * _2215) + _972) * cbLight._m0[_2161].z) * _2235) * _2058);
    float _2385;
    float _2387;
    float _2389;
    if (_2098)
    {
        _2385 = _2321;
        _2387 = _2322;
        _2389 = _2323;
    }
    else
    {
        uint _2391 = _2025 + 2u;
        uint _2395 = _2025 + 10u;
        float _2409 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2391].w)) * _822) * 0.949999988079071044921875);
        float _2410 = _2409 * _2409;
        float _2411 = cbLight._m0[_2391].x + _899;
        float _2412 = cbLight._m0[_2391].y + _900;
        float _2413 = cbLight._m0[_2391].z + _901;
        float _2417 = inversesqrt(dot(vec3(_2411, _2412, _2413), vec3(_2411, _2412, _2413)));
        float _2418 = _2417 * _2411;
        float _2419 = _2417 * _2412;
        float _2420 = _2417 * _2413;
        float _2421 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2391].xyz));
        float _4371 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2425 = dot(vec3(_819, _820, _821), vec3(_2418, _2419, _2420));
        float _4382 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2428 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2429 = dot(vec3(cbLight._m0[_2391].xyz), vec3(_2418, _2419, _2420));
        float _4393 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2433 = _2410 * _2410;
        float _2437 = ((_2428 * _2428) * (_2433 + (-1.0))) + 1.0;
        float _2444 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2451 = 1.0 - _2410;
        float _2461 = (0.5 / (((_2190 * ((_2424 * _2451) + _2410)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2451) + _2410) * _2424))) * _2424;
        float _4404 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2463 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2433 / ((_2437 * _2437) * 3.141590118408203125));
        float _2464 = isnan(1.0) ? _2040 : (isnan(_2040) ? 1.0 : min(_2040, 1.0));
        _2385 = (((((_2444 * _2212) + _969) * cbLight._m0[_2395].x) * _2463) * _2464) + _2321;
        _2387 = (((((_2444 * _2214) + _971) * cbLight._m0[_2395].y) * _2463) * _2464) + _2322;
        _2389 = (((((_2444 * _2215) + _972) * cbLight._m0[_2395].z) * _2463) * _2464) + _2323;
    }
    float _2499;
    float _2501;
    float _2503;
    if (_2116)
    {
        _2499 = _2385;
        _2501 = _2387;
        _2503 = _2389;
    }
    else
    {
        uint _2510 = _2025 + 3u;
        uint _2514 = _2025 + 11u;
        float _2528 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2510].w)) * _822) * 0.949999988079071044921875);
        float _2529 = _2528 * _2528;
        float _2530 = cbLight._m0[_2510].x + _899;
        float _2531 = cbLight._m0[_2510].y + _900;
        float _2532 = cbLight._m0[_2510].z + _901;
        float _2536 = inversesqrt(dot(vec3(_2530, _2531, _2532), vec3(_2530, _2531, _2532)));
        float _2537 = _2536 * _2530;
        float _2538 = _2536 * _2531;
        float _2539 = _2536 * _2532;
        float _2540 = dot(vec3(_819, _820, _821), vec3(cbLight._m0[_2510].xyz));
        float _4420 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2544 = dot(vec3(_819, _820, _821), vec3(_2537, _2538, _2539));
        float _4431 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2547 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2548 = dot(vec3(cbLight._m0[_2510].xyz), vec3(_2537, _2538, _2539));
        float _4442 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        float _2552 = _2529 * _2529;
        float _2556 = ((_2547 * _2547) * (_2552 + (-1.0))) + 1.0;
        float _2563 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2570 = 1.0 - _2529;
        float _2580 = (0.5 / (((_2190 * ((_2543 * _2570) + _2529)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2570) + _2529) * _2543))) * _2543;
        float _4453 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2582 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2552 / ((_2556 * _2556) * 3.141590118408203125));
        float _2583 = isnan(1.0) ? _2041 : (isnan(_2041) ? 1.0 : min(_2041, 1.0));
        _2499 = (((((_2563 * _2212) + _969) * cbLight._m0[_2514].x) * _2582) * _2583) + _2385;
        _2501 = (((((_2563 * _2214) + _971) * cbLight._m0[_2514].y) * _2582) * _2583) + _2387;
        _2503 = (((((_2563 * _2215) + _972) * cbLight._m0[_2514].z) * _2582) * _2583) + _2389;
    }
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_2023.y == 0u)
    {
        float _2658 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2659 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2658;
        float _2660 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2658;
        float _2661 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2658;
        uvec4 _2673 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2674 = _2673.x;
        uint _2685 = uint((float(_2673.y) * floor(float(uint(cbSceneParam._m0[85u].y * _908) / _2674))) + floor(float(uint(cbSceneParam._m0[85u].x * _907) / _2674)));
        float _2695 = (log2(_2661 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2696 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        uint _2699 = uint(isnan(14.0) ? _2696 : (isnan(_2696) ? 14.0 : min(_2696, 14.0)));
        uvec4 _2704 = texelFetch(g_lightClusterGridBuffer, int(((_2699 << 2u) + (_2685 << 6u)) >> 2u));
        uint _2705 = _2704.x;
        uint _2706 = _2673.z;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        float _2816;
        if (((((1u << ((_2706 >> 4u) & 15u)) + 4294967295u) & _2705) == 0u) || ((_2706 & 240u) == 0u))
        {
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
            _2814 = 0.0;
            _2816 = 0.0;
        }
        else
        {
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2815;
            float _2817;
            float _2951 = 0.0;
            float _2952 = 0.0;
            float _2953 = 0.0;
            float _2954 = 0.0;
            float _2955 = 0.0;
            float _2956 = 0.0;
            uint _2957 = 0u;
            uint _2966;
            bool _2967;
            for (;;)
            {
                _2966 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_2957 << 2u)) >> 2u)).x;
                _2967 = _2966 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2967)
                {
                    frontier_phi_61_pred = _2951;
                    frontier_phi_61_pred_1 = _2956;
                    frontier_phi_61_pred_2 = _2955;
                    frontier_phi_61_pred_3 = _2954;
                    frontier_phi_61_pred_4 = _2953;
                    frontier_phi_61_pred_5 = _2952;
                }
                else
                {
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    float _3080;
                    uint _3081;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2953;
                    _3078 = _2954;
                    _3079 = _2955;
                    _3080 = _2956;
                    _3081 = _2966;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    for (;;)
                    {
                        uint _3085 = uint(findLSB(_3081)) + (_2957 << 5u);
                        uint _3082 = (_3081 + 4294967295u) & _3081;
                        uint _3087 = _3085 * 48u;
                        vec4 _3101 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3087)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3087 + 3u)).x));
                        uint _3107 = (_3085 * 48u) + 4u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3107)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3107 + 3u)).x));
                        uint _3126 = (_3085 * 48u) + 8u;
                        vec3 _3137 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x));
                        float _3141 = _3101.x - _2659;
                        float _3142 = _3101.y - _2660;
                        float _3143 = _3101.z - _2661;
                        float _3144 = dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143));
                        float _3147 = inversesqrt(_3144);
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3151 = dot(vec3(_926, _929, _932), vec3(_3148, _3149, _3150));
                        float _3156 = 1.0 - (_3144 * _3101.w);
                        float _4479 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3157 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3158 = sqrt(_3144) * _3120.w;
                        float _3161 = 1.39999997615814208984375 / (_3158 + 1.39999997615814208984375);
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3151) + _3162;
                        float _3168 = _3158 * _3158;
                        float _3172 = ((isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0))) * _3157) / ((_3168 * 0.699999988079071044921875) + 1.0);
                        float _3176 = (-0.0) - _2659;
                        float _3177 = (-0.0) - _2660;
                        float _3178 = (-0.0) - _2661;
                        float _3182 = inversesqrt(dot(vec3(_3176, _3177, _3178), vec3(_3176, _3177, _3178)));
                        float _3183 = _3182 * _3176;
                        float _3184 = _3182 * _3177;
                        float _3185 = _3182 * _3178;
                        float _3193 = exp2(log2(1.0 / ((_3168 * 3.5) + 5.0)) * 0.25);
                        float _3194 = 1.0 - _1001;
                        float _3201 = sqrt(1.0 - ((1.0 - (_3194 * _3194)) * (1.0 - (_3193 * _3193))));
                        float _3202 = _3201 * _3201;
                        float _3203 = _3202 * _3202;
                        float _3204 = _3183 + _3148;
                        float _3205 = _3184 + _3149;
                        float _3206 = _3185 + _3150;
                        float _3210 = inversesqrt(dot(vec3(_3204, _3205, _3206), vec3(_3204, _3205, _3206)));
                        float _3214 = dot(vec3(_926, _929, _932), vec3(_3183, _3184, _3185));
                        float _4495 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3218 = dot(vec3(_926, _929, _932), vec3(_3210 * _3204, _3210 * _3205, _3210 * _3206));
                        float _4506 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0));
                        float _3221 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3225 = ((_3221 * _3221) * (_3203 + (-1.0))) + 1.0;
                        float _3226 = _3161 * _3202;
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3151) + _3227;
                        float _4517 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                        float _3231 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3232 = 1.0 - _3202;
                        float _3242 = (0.5 / (((_3231 * ((_3217 * _3232) + _3202)) + 9.9999999392252902907785028219223e-09) + (((_3231 * _3232) + _3202) * _3217))) * _3231;
                        float _4528 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                        float _3253 = (((_3203 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3225 * _3225) * ((_3168 * 2.1991131305694580078125) + 3.141590118408203125))) * _3157;
                        _3010 = (_3172 * _3120.x) + _3078;
                        _3011 = (_3172 * _3120.y) + _3079;
                        _3012 = (_3172 * _3120.z) + _3080;
                        _3007 = (_3253 * _3137.x) + _3075;
                        _3008 = (_3253 * _3137.y) + _3076;
                        _3009 = (_3253 * _3137.z) + _3077;
                        if (_3082 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3009;
                            _3078 = _3010;
                            _3079 = _3011;
                            _3080 = _3012;
                            _3081 = _3082;
                        }
                    }
                    frontier_phi_61_pred = _3007;
                    frontier_phi_61_pred_1 = _3012;
                    frontier_phi_61_pred_2 = _3011;
                    frontier_phi_61_pred_3 = _3010;
                    frontier_phi_61_pred_4 = _3009;
                    frontier_phi_61_pred_5 = _3008;
                }
                _2807 = frontier_phi_61_pred;
                _2817 = frontier_phi_61_pred_1;
                _2815 = frontier_phi_61_pred_2;
                _2813 = frontier_phi_61_pred_3;
                _2811 = frontier_phi_61_pred_4;
                _2809 = frontier_phi_61_pred_5;
                uint _2958 = _2957 + 1u;
                if (_2958 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2951 = _2807;
                    _2952 = _2809;
                    _2953 = _2811;
                    _2954 = _2813;
                    _2955 = _2815;
                    _2956 = _2817;
                    _2957 = _2958;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
            _2814 = _2815;
            _2816 = _2817;
        }
        uvec4 _2820 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2821 = _2820.z;
        uint _2823 = (_2821 >> 8u) & 15u;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        float _2927;
        float _2929;
        if (((4294967295u << _2823) & _2705) == 0u)
        {
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
            _2927 = _2814;
            _2929 = _2816;
        }
        else
        {
            float _2944 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
            float _2945 = _2944 * _2659;
            float _2946 = _2944 * _2660;
            float _2947 = _2944 * _2661;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2823 < ((_2821 >> 12u) & 15u))
            {
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _2928;
                float _2930;
                float _3058 = _2806;
                float _3059 = _2808;
                float _3060 = _2810;
                float _3061 = _2812;
                float _3062 = _2814;
                float _3063 = _2816;
                uint _3064 = _2823;
                uint _3073;
                bool _3074;
                for (;;)
                {
                    _3073 = texelFetch(g_lightClassification, int((((_2699 << 5u) + (_2685 << 9u)) + (_3064 << 2u)) >> 2u)).x;
                    _3074 = _3073 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3074)
                    {
                        frontier_phi_67_pred = _3061;
                        frontier_phi_67_pred_1 = _3062;
                        frontier_phi_67_pred_2 = _3063;
                        frontier_phi_67_pred_3 = _3060;
                        frontier_phi_67_pred_4 = _3059;
                        frontier_phi_67_pred_5 = _3058;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        float _3273 = _3060;
                        float _3274 = _3061;
                        float _3275 = _3062;
                        float _3276 = _3063;
                        uint _3277 = _3073;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3361;
                        float _3407;
                        bool _3408;
                        for (;;)
                        {
                            uint _3288 = ((_3064 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3288 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3363 = (_3288 * 40u) + 24u;
                            vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3363)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3363 + 3u)).x));
                            uint _3382 = (_3288 * 40u) + 28u;
                            vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            _3407 = fma(_2661, _3395.z, fma(_2660, _3395.y, _3395.x * _2659)) + _3395.w;
                            _3408 = !((fma(_2661, _3376.z, fma(_2660, _3376.y, _3376.x * _2659)) + _3376.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3408)
                            {
                                float _3435 = _3303.x - _2659;
                                float _3436 = _3303.y - _2660;
                                float _3437 = _3303.z - _2661;
                                float _3438 = dot(vec3(_3435, _3436, _3437), vec3(_3435, _3436, _3437));
                                float _3441 = inversesqrt(_3438);
                                float _3442 = _3441 * _3435;
                                float _3443 = _3441 * _3436;
                                float _3444 = _3441 * _3437;
                                float _3448 = 1.0 - (_3438 / (_3304 * _3304));
                                float _4539 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                                float _3449 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3453 = sqrt(_3438) * _3319.w;
                                float _3455 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                                float _3456 = _3455 * _3455;
                                float _3459 = ((1.0 - _3456) * dot(vec3(_3442, _3443, _3444), vec3(_926, _929, _932))) + _3456;
                                float _3462 = _3453 * _3453;
                                float _3466 = (fma(_2661, _3346.z, fma(_2660, _3346.y, _3346.x * _2659)) + _3346.w) / _3407;
                                float _3467 = (fma(_2661, _3361.z, fma(_2660, _3361.y, _3361.x * _2659)) + _3361.w) / _3407;
                                float _3471 = 1.0 - dot(vec2(_3466, _3467), vec2(_3466, _3467));
                                float _4555 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3473 = _3472 * (((isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0))) * _3449) / ((_3462 * 0.699999988079071044921875) + 1.0));
                                float _3485 = exp2(log2(1.0 / ((_3462 * 3.5) + 5.0)) * 0.25);
                                float _3486 = 1.0 - _1001;
                                float _3493 = sqrt(1.0 - ((1.0 - (_3486 * _3486)) * (1.0 - (_3485 * _3485))));
                                float _3494 = _3493 * _3493;
                                float _3495 = _3494 * _3494;
                                float _3496 = _3442 - _2945;
                                float _3497 = _3443 - _2946;
                                float _3498 = _3444 - _2947;
                                float _3502 = inversesqrt(dot(vec3(_3496, _3497, _3498), vec3(_3496, _3497, _3498)));
                                float _3506 = dot(vec3(_926, _929, _932), vec3((-0.0) - _2945, (-0.0) - _2946, (-0.0) - _2947));
                                float _4566 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0));
                                float _3509 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3510 = dot(vec3(_926, _929, _932), vec3(_3502 * _3496, _3502 * _3497, _3502 * _3498));
                                float _4577 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3513 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3517 = ((_3513 * _3513) * (_3495 + (-1.0))) + 1.0;
                                float _3518 = _3455 * _3494;
                                float _3519 = _3518 * _3518;
                                float _3525 = ((1.0 - _3519) * dot(vec3(_926, _929, _932), vec3(_3442, _3443, _3444))) + _3519;
                                float _4588 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                                float _3526 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3527 = 1.0 - _3494;
                                float _3537 = (0.5 / (((_3526 * ((_3509 * _3527) + _3494)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3494) * _3509))) * _3526;
                                float _4599 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3547 = (_3472 * _3449) * (((_3495 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3517 * _3517) * ((_3462 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3547 * _3331.x;
                                frontier_phi_73_pred_1 = _3547 * _3331.y;
                                frontier_phi_73_pred_2 = _3473 * _3319.z;
                                frontier_phi_73_pred_3 = _3473 * _3319.y;
                                frontier_phi_73_pred_4 = _3473 * _3319.x;
                                frontier_phi_73_pred_5 = _3547 * _3331.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3551 = frontier_phi_73_pred;
                            _3552 = frontier_phi_73_pred_1;
                            _3556 = frontier_phi_73_pred_2;
                            _3555 = frontier_phi_73_pred_3;
                            _3554 = frontier_phi_73_pred_4;
                            _3553 = frontier_phi_73_pred_5;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            _3263 = _3556 + _3276;
                            _3258 = _3551 + _3271;
                            _3259 = _3552 + _3272;
                            _3260 = _3553 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3261;
                        frontier_phi_67_pred_1 = _3262;
                        frontier_phi_67_pred_2 = _3263;
                        frontier_phi_67_pred_3 = _3260;
                        frontier_phi_67_pred_4 = _3259;
                        frontier_phi_67_pred_5 = _3258;
                    }
                    _2926 = frontier_phi_67_pred;
                    _2928 = frontier_phi_67_pred_1;
                    _2930 = frontier_phi_67_pred_2;
                    _2924 = frontier_phi_67_pred_3;
                    _2922 = frontier_phi_67_pred_4;
                    _2920 = frontier_phi_67_pred_5;
                    uint _3065 = _3064 + 1u;
                    if (_3065 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3058 = _2920;
                        _3059 = _2922;
                        _3060 = _2924;
                        _3061 = _2926;
                        _3062 = _2928;
                        _3063 = _2930;
                        _3064 = _3065;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2928;
                frontier_phi_55_56_ladder_1 = _2930;
                frontier_phi_55_56_ladder_2 = _2926;
                frontier_phi_55_56_ladder_3 = _2924;
                frontier_phi_55_56_ladder_4 = _2922;
                frontier_phi_55_56_ladder_5 = _2920;
            }
            else
            {
                frontier_phi_55_56_ladder = _2814;
                frontier_phi_55_56_ladder_1 = _2816;
                frontier_phi_55_56_ladder_2 = _2812;
                frontier_phi_55_56_ladder_3 = _2810;
                frontier_phi_55_56_ladder_4 = _2808;
                frontier_phi_55_56_ladder_5 = _2806;
            }
            _2919 = frontier_phi_55_56_ladder_5;
            _2921 = frontier_phi_55_56_ladder_4;
            _2923 = frontier_phi_55_56_ladder_3;
            _2925 = frontier_phi_55_56_ladder_2;
            _2927 = frontier_phi_55_56_ladder;
            _2929 = frontier_phi_55_56_ladder_1;
        }
        float _2934 = isnan(1.0) ? _985 : (isnan(_985) ? 1.0 : min(_985, 1.0));
        _2718 = (_2934 * _2925) + _2154;
        _2720 = (_2934 * _2927) + _2156;
        _2722 = (_2934 * _2929) + _2158;
        _2724 = ((_2919 * _969) * _2934) + _2499;
        _2726 = ((_2921 * _971) * _2934) + _2501;
        _2728 = ((_2923 * _972) * _2934) + _2503;
    }
    else
    {
        _2718 = _2154;
        _2720 = _2156;
        _2722 = _2158;
        _2724 = _2499;
        _2726 = _2501;
        _2728 = _2503;
    }
    float _4615 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _4626 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _4637 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    uint _2748 = _244 + 6u;
    float _2756 = _907 / cbSceneParam._m0[86u].x;
    float _2757 = _908 / cbSceneParam._m0[86u].y;
    vec4 _2771 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2773 = _2771.x;
    float _2774 = _2771.y;
    float _2775 = _2771.z;
    float _2776 = _2771.w;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2831 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2832 = _2831 / _841;
        float _2843 = _2832 * _892;
        float _2844 = _893 * _2832;
        float _2845 = (-0.0) - _2844;
        float _2847 = _2832 * _894;
        float _2849 = (cbSceneParam._m0[77u].w * _2845) / _2831;
        float _2850 = _2849 + cbSceneParam._m0[79u].w;
        float _2851 = cbSceneParam._m0[79u].w - _2844;
        float _2857 = sqrt(((_2843 * _2843) + (_2844 * _2844)) + (_2847 * _2847));
        float _2860 = (1.0 - (cbSceneParam._m0[77u].w / _2831)) * _2857;
        float _2865 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2867 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3020;
        if (abs((_2845 - _2849) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3020 = ((((_2850 > 0.0) ? exp2(_2865 * _2850) : (2.0 - exp2(_2867 * _2850))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2860;
        }
        else
        {
            float _2980 = 1.0 / cbSceneParam._m0[80u].x;
            float _2981 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : max(_2850, _2851));
            float _2982 = isnan(_2851) ? _2850 : (isnan(_2850) ? _2851 : min(_2850, _2851));
            float _2991 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : min(_2981, 0.0));
            float _2992 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : min(_2982, 0.0));
            _3020 = ((abs(_2857 / _2845) * cbSceneParam._m0[80u].y) * ((((_2991 - _2992) * 2.0) - ((exp2(_2865 * (isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0)))) - exp2(_2865 * (isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0))))) * _2980)) - ((exp2(_2867 * _2991) - exp2(_2867 * _2992)) * _2980))) + (_2860 * cbSceneParam._m0[80u].z);
        }
        vec4 _3022 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2756, _2757, 1.0), 0.0);
        float _3031 = exp2((_3020 * (-1.44269502162933349609375)) * (1.0 - _3022.w));
        float _3032 = log2(_3031);
        float _3048 = log2(_2776);
        _2869 = (exp2(_3048 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].x)) * _3022.x) / cbSceneParam._m0[78u].x)) + _2773;
        _2871 = (exp2(_3048 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].y)) * _3022.y) / cbSceneParam._m0[78u].y)) + _2774;
        _2873 = (exp2(_3048 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3032 * cbSceneParam._m0[78u].z)) * _3022.z) / cbSceneParam._m0[78u].z)) + _2775;
        _2875 = _3031 * _2776;
    }
    else
    {
        _2869 = _2773;
        _2871 = _2774;
        _2873 = _2775;
        _2875 = _2776;
    }
    float _2887 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2888 = _2887 == 3.0;
    float _2889 = log2(_2875);
    float _2896 = exp2(_2889 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2718 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _985))) + ((_2724 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2897 = exp2(_2889 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2720 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _985))) + ((_2726 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2898 = exp2(_2889 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2722 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _985))) + ((_2728 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _2907 = (_2887 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2907 * (_2888 ? _2896 : (_2896 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.y = _2907 * (_2888 ? _2897 : (_2897 + (cbSceneParam._m0[72u].w * _2871)));
    SV_Target.z = _2907 * (_2888 ? _2898 : (_2898 + (cbSceneParam._m0[72u].w * _2873)));
    SV_Target.w = cbInstanceData._m0[_2748].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2748].w;
}


