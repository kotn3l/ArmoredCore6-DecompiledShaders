#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1527;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _272 = _267 + 1u;
    uint _276 = _267 + 2u;
    float _285 = sqrt(((cbInstanceData._m0[_272].x * cbInstanceData._m0[_272].x) + (cbInstanceData._m0[_267].x * cbInstanceData._m0[_267].x)) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x));
    float _286 = _285 * TEXCOORD.z;
    float _287 = _285 * TEXCOORD.w;
    vec4 _306 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _330 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _335 = _330.x * cbMtdParam._m0[11u].x;
    float _336 = _330.y * cbMtdParam._m0[11u].y;
    float _337 = _330.z * cbMtdParam._m0[11u].z;
    vec4 _356 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _286) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _287) + cbTextureTilingScale._m0[5u].w));
    vec4 _375 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _414 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _416 = _414.x;
    float _428 = dot(vec4(_416, _414.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _445 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _375.x) * 2.0) - ((((_416 - _428) * cbMtdParam._m0[23u].w) + _428) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3918 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _446 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _453 = (_446 * ((_356.x * cbMtdParam._m0[12u].x) - _335)) + _335;
    float _454 = (_446 * ((_356.y * cbMtdParam._m0[12u].y) - _336)) + _336;
    float _455 = (_446 * ((_356.z * cbMtdParam._m0[12u].z) - _337)) + _337;
    vec4 _472 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _286) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _287) + cbTextureTilingScale._m0[3u].w));
    vec4 _492 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _494 = _492.x;
    float _504 = dot(vec4(_494, _492.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _518 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _375.y) * 2.0) - ((((_494 - _504) * cbMtdParam._m0[23u].w) + _504) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _519 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _526 = (_519 * ((_472.x * cbMtdParam._m0[13u].x) - _453)) + _453;
    float _527 = (_519 * ((_472.y * cbMtdParam._m0[13u].y) - _454)) + _454;
    float _528 = (_519 * ((_472.z * cbMtdParam._m0[13u].z) - _455)) + _455;
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _286) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _287) + cbTextureTilingScale._m0[24u].w));
    vec4 _564 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _566 = _564.x;
    float _576 = dot(vec4(_566, _564.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _588 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _375.z) * 2.0) - ((((_566 - _576) * cbMtdParam._m0[23u].w) + _576) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3940 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _589 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _602 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _306.x) * ((_589 * ((_547.x * cbMtdParam._m0[14u].x) - _526)) + _526);
    float _605 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _306.y) * ((_589 * ((_547.y * cbMtdParam._m0[14u].y) - _527)) + _527);
    float _608 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _306.z) * ((_589 * ((_547.z * cbMtdParam._m0[14u].z) - _528)) + _528);
    vec4 _621 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _286) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _287) + cbTextureTilingScale._m0[4u].w));
    vec4 _638 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _640 = _638.x;
    float _641 = _638.y;
    float _642 = _638.z;
    float _649 = ((_621.x - _640) * _446) + _640;
    float _650 = ((_621.y - _641) * _446) + _641;
    float _651 = ((_621.z - _642) * _446) + _642;
    vec4 _663 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _286) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _287) + cbTextureTilingScale._m0[2u].w));
    float _674 = ((_663.x - _649) * _519) + _649;
    float _675 = ((_663.y - _650) * _519) + _650;
    float _676 = ((_663.z - _651) * _519) + _651;
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _286) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _287) + cbTextureTilingScale._m0[23u].w));
    float _701 = ((_688.z - _676) * _589) + _676;
    float _704 = ((((_688.x - _674) * _589) + _674) * 2.0) + (-1.0);
    float _706 = ((((_688.y - _675) * _589) + _675) * 2.0) + (-1.0);
    float _707 = dot(vec2(_704, _706), vec2(_704, _706));
    float _3951 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _712 = sqrt(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0))));
    vec4 _726 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _738 = (((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _739 = (((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _706;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _286) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _287) + cbTextureTilingScale._m0[19u].w));
    float _753 = _751.x;
    float _754 = 1.0 - _753;
    float _782 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_753 - _754) * cbMtdParam._m0[24u].w) + _754) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3962 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _783 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _791 = ((((cbMtdParam._m0[10u].x - _602) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _783) + _602;
    float _792 = ((((cbMtdParam._m0[10u].y - _605) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _783) + _605;
    float _793 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _608)) * _783) + _608;
    vec4 _819 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _821 = _819.x;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _286) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _287) + cbTextureTilingScale._m0[9u].w)).x - _821) * _446) + _821;
    float _856 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _286) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _287) + cbTextureTilingScale._m0[21u].w)).x - _838) * _519) + _838;
    float _873 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _286) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _287) + cbTextureTilingScale._m0[10u].w)).x - _856) * _589) + _856;
    float _877 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _873) * cbMtdParam._m0[19u].z) + _873;
    float _879 = _877 - (_877 * _783);
    float _883 = (cbMtdParam._m0[19u].w * (_726.z - _701)) + _701;
    float _887 = ((cbMtdParam._m0[23u].x - _883) * _783) + _883;
    vec4 _906 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _286) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _287) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _912 = (_906.x * 2.0) + (-1.0);
    float _913 = (_906.y * 2.0) + (-1.0);
    float _914 = dot(vec2(_912, _913), vec2(_912, _913));
    float _3973 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _930 = (_783 * (((cbMtdParam._m0[22u].z * _738) - _738) + _912)) + _738;
    float _931 = (_783 * (((cbMtdParam._m0[22u].z * _739) - _739) + _913)) + _739;
    float _932 = (_783 * (sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) - _712)) + _712;
    float _934 = cbMtdParam._m0[22u].x + _726.w;
    float _937 = fma(_932, _254 * NORMAL.x, fma(_931, _261 * TANGENT.x, (_247 * _239) * _930));
    float _940 = fma(_932, _254 * NORMAL.y, fma(_931, _261 * TANGENT.y, (_247 * _240) * _930));
    float _943 = fma(_932, _254 * NORMAL.z, fma(_931, _261 * TANGENT.z, (_247 * _241) * _930));
    float _947 = inversesqrt(dot(vec3(_937, _940, _943), vec3(_937, _940, _943)));
    float _948 = _947 * _937;
    float _949 = _947 * _940;
    float _950 = _947 * _943;
    float _3984 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _951 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _3995 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _4006 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _4017 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    float _4028 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
    float _4039 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _956 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
    float _970 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1020 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1010);
    float _1021 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1010);
    float _1022 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1010);
    float _1026 = inversesqrt(dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022)));
    float _1027 = _1020 * _1026;
    float _1028 = _1021 * _1026;
    float _1029 = _1022 * _1026;
    vec4 _1034 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1036 = _1034.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1208 = sqrt(((_1020 * _1020) + (_1021 * _1021)) + (_1022 * _1022));
        float _1214 = (cbMatDynParam._m0[5u].x * _1208) + cbMatDynParam._m0[5u].y;
        float _4050 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1219 = (cbMatDynParam._m0[5u].z * _1208) + cbMatDynParam._m0[5u].w;
        float _4061 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0))) - _1215)) + _1215) < ((_1036 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1047 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1048 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1066 = fma(_950, cbSceneParam._m0[5u].z, fma(_949, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _948));
    float _1069 = fma(_950, cbSceneParam._m0[6u].z, fma(_949, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _948));
    float _1072 = fma(_950, cbSceneParam._m0[7u].z, fma(_949, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _948));
    uint _1085 = _267 + 9u;
    uint _1086 = _1085 + uint(cbMatDynParam._m0[0u].w);
    float _1092 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0)))) * cbInstanceData._m0[_1086].x;
    float _1093 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1086].y;
    float _1094 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1086].z;
    float _4072 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _1098 = 1.0 - _956;
    float _1099 = _1095 * _1098;
    float _1100 = _1096 * _1098;
    float _1101 = _1097 * _1098;
    float _1106 = (_1095 + (-0.039999999105930328369140625)) * _956;
    float _1107 = (_1096 + (-0.039999999105930328369140625)) * _956;
    float _1108 = (_1097 + (-0.039999999105930328369140625)) * _956;
    float _1109 = _1106 + 0.039999999105930328369140625;
    float _1111 = _1107 + 0.039999999105930328369140625;
    float _1112 = _1108 + 0.039999999105930328369140625;
    vec4 _1121 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1047, cbSceneParam._m0[86u].y * _1048));
    float _1125 = ((isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * TEXCOORD_5.w) * _1121.x;
    float _1126 = dot(vec3(_948, _949, _950), vec3(_1027, _1028, _1029));
    float _1129 = _1126 * 2.0;
    float _1133 = (_1129 * _948) - _1027;
    float _1134 = (_1129 * _949) - _1028;
    float _1135 = (_1129 * _950) - _1029;
    float _1139 = abs(dot(vec3(_1027, _1028, _1029), vec3(_948, _949, _950)));
    float _4105 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
    float _1141 = sqrt(_951);
    float _1154 = exp2((_1141 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1141 * 3.0));
    float _1160 = (1.0 - _1154) * ((_1141 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1161 = _1154 * _1141;
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1197 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1526;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1251 = fma(_1197, cbModelParam._m0[26u].z, fma(_1193, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1189));
        float _1255 = fma(_1197, cbModelParam._m0[27u].z, fma(_1193, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1189));
        float _1259 = fma(_1197, cbModelParam._m0[28u].z, fma(_1193, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1189));
        float _1284 = _1189 + _948;
        float _1285 = _1193 + _949;
        float _1286 = _1197 + _950;
        float _1296 = fma(_1286, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1284)) - _1251;
        float _1297 = fma(_1286, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1284)) - _1255;
        float _1298 = fma(_1286, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1284)) - _1259;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1315 = ((_1302 * _1296) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1251 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1297) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1255 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1302 * _1298) / cbModelParam._m0[34u].z) + ((((((_1259 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1315, _1316, _1317), 0.0);
        float _1354 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1320.x + (-0.5));
        float _1356 = _1354 * (_1320.y + (-0.5));
        float _1357 = _1354 * (_1320.z + (-0.5));
        float _1364 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1327.x + (-0.5));
        float _1366 = _1364 * (_1327.y + (-0.5));
        float _1367 = _1364 * (_1327.z + (-0.5));
        float _1374 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1334.x + (-0.5));
        float _1376 = _1374 * (_1334.y + (-0.5));
        float _1377 = _1374 * (_1334.z + (-0.5));
        float _1384 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1341.x + (-0.5));
        float _1386 = _1384 * (_1341.y + (-0.5));
        float _1387 = _1384 * (_1341.z + (-0.5));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = _1355 * 0.5;
        float _1392 = _1365 * 0.5;
        float _1393 = _1375 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1408 = (dot(vec3(_948, _949, _950), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _4131 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1418 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4142 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4153 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_1420 + 1.0))) + _1425) * _1388;
        float _1435 = _1356 * 0.5;
        float _1436 = _1366 * 0.5;
        float _1437 = _1376 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_948, _949, _950), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4186 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1462 + 1.0))) + _1467) * _1389;
        float _1477 = _1357 * 0.5;
        float _1478 = _1367 * 0.5;
        float _1479 = _1377 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_948, _949, _950), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _4219 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1504 + 1.0))) + _1509) * _1390;
        _1526 = _1357;
        _1528 = _1356;
        _1529 = _1355;
        _1530 = _1367;
        _1531 = _1366;
        _1532 = _1365;
        _1533 = _1377;
        _1534 = _1376;
        _1535 = _1375;
        _1536 = _1390;
        _1537 = _1389;
        _1538 = _1388;
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1541 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
    }
    else
    {
        _1526 = _1527;
        _1528 = _1527;
        _1529 = _1527;
        _1530 = _1527;
        _1531 = _1527;
        _1532 = _1527;
        _1533 = _1527;
        _1534 = _1527;
        _1535 = _1527;
        _1536 = _1527;
        _1537 = _1527;
        _1538 = _1527;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1567 = fma(_1197, cbModelParam._m0[30u].z, fma(_1193, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1189));
        float _1571 = fma(_1197, cbModelParam._m0[31u].z, fma(_1193, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1189));
        float _1575 = fma(_1197, cbModelParam._m0[32u].z, fma(_1193, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1189));
        float _1598 = _1189 + _948;
        float _1599 = _1193 + _949;
        float _1600 = _1197 + _950;
        float _1610 = fma(_1600, cbModelParam._m0[30u].z, fma(_1599, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1598)) - _1567;
        float _1611 = fma(_1600, cbModelParam._m0[31u].z, fma(_1599, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1598)) - _1571;
        float _1612 = fma(_1600, cbModelParam._m0[32u].z, fma(_1599, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1598)) - _1575;
        float _1616 = inversesqrt(dot(vec3(_1610, _1611, _1612), vec3(_1610, _1611, _1612)));
        float _1629 = ((_1616 * _1610) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1567 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1630 = ((_1616 * _1611) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1571 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1631 = ((_1616 * _1612) / cbModelParam._m0[35u].z) + ((((((_1575 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1629, _1630, _1631), 0.0);
        float _1666 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1633.x + (-0.5));
        float _1668 = _1666 * (_1633.y + (-0.5));
        float _1669 = _1666 * (_1633.z + (-0.5));
        float _1676 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1640.x + (-0.5));
        float _1678 = _1676 * (_1640.y + (-0.5));
        float _1679 = _1676 * (_1640.z + (-0.5));
        float _1686 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1647.x + (-0.5));
        float _1688 = _1686 * (_1647.y + (-0.5));
        float _1689 = _1686 * (_1647.z + (-0.5));
        float _1696 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1697 = _1696 * (_1654.x + (-0.5));
        float _1698 = _1696 * (_1654.y + (-0.5));
        float _1699 = _1696 * (_1654.z + (-0.5));
        float _1700 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1701 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
        float _1702 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1703 = _1667 * 0.5;
        float _1704 = _1677 * 0.5;
        float _1705 = _1687 * 0.5;
        float _1706 = dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705));
        float _1711 = (_1706 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1706);
        float _1719 = (dot(vec3(_948, _949, _950), vec3(_1711 * _1703, _1711 * _1704, _1711 * _1705)) + 1.0) * 0.5;
        float _4260 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1728 = sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705)) / (_1700 + 9.9999997473787516355514526367188e-06);
        float _4271 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1730 = _1729 * 2.0;
        float _1734 = (1.0 - _1729) / (_1729 + 1.0);
        float _4282 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1744 = ((((1.0 - _1735) * (_1730 + 2.0)) * exp2(log2(isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_1730 + 1.0))) + _1735) * _1700;
        float _1745 = _1668 * 0.5;
        float _1746 = _1678 * 0.5;
        float _1747 = _1688 * 0.5;
        float _1748 = dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747));
        float _1753 = (_1748 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1748);
        float _1761 = (dot(vec3(_948, _949, _950), vec3(_1753 * _1745, _1753 * _1746, _1753 * _1747)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1770 = sqrt(((_1746 * _1746) + (_1745 * _1745)) + (_1747 * _1747)) / (_1701 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1772 = _1771 * 2.0;
        float _1776 = (1.0 - _1771) / (_1771 + 1.0);
        float _4315 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1786 = ((((1.0 - _1777) * (_1772 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1772 + 1.0))) + _1777) * _1701;
        float _1787 = _1669 * 0.5;
        float _1788 = _1679 * 0.5;
        float _1789 = _1689 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_948, _949, _950), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1702 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4348 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1814 + 1.0))) + _1819) * _1702;
        _1836 = _1669;
        _1837 = _1668;
        _1838 = _1667;
        _1839 = _1679;
        _1840 = _1678;
        _1841 = _1677;
        _1842 = _1689;
        _1843 = _1688;
        _1844 = _1687;
        _1845 = _1702;
        _1846 = _1701;
        _1847 = _1700;
        _1848 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0)));
        _1849 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0)));
        _1850 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
    }
    else
    {
        _1836 = _1527;
        _1837 = _1527;
        _1838 = _1527;
        _1839 = _1527;
        _1840 = _1527;
        _1841 = _1527;
        _1842 = _1527;
        _1843 = _1527;
        _1844 = _1527;
        _1845 = _1527;
        _1846 = _1527;
        _1847 = _1527;
        _1848 = 0.0;
        _1849 = 0.0;
        _1850 = 0.0;
    }
    float _1860 = (cbModelParam._m0[1u].x * (_1848 - _1539)) + _1539;
    float _1861 = (cbModelParam._m0[1u].x * (_1849 - _1540)) + _1540;
    float _1862 = (cbModelParam._m0[1u].x * (_1850 - _1541)) + _1541;
    float _1883 = fma(_1862, cbSceneParam._m0[89u].z, fma(_1861, cbSceneParam._m0[89u].y, _1860 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1862, cbSceneParam._m0[90u].z, fma(_1861, cbSceneParam._m0[90u].y, _1860 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1862, cbSceneParam._m0[91u].z, fma(_1861, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1860));
    float _1904 = _1133 * 0.5;
    float _1905 = _1134 * 0.5;
    float _1906 = _1135 * 0.5;
    float _1907 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1838, _1841, _1844, _1847));
    float _1910 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1837, _1840, _1843, _1846));
    float _1913 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1836, _1839, _1842, _1845));
    float _1947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1920 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1526, _1530, _1533, _1536));
        float _1924 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1928 = dot(vec4(_1904, _1905, _1906, 1.0), vec4(_1529, _1532, _1535, _1538));
        float _1935 = dot(vec4(cbModelParam._m0[39u]), vec4(_1904, _1905, _1906, 1.0));
        _1947 = dot(vec3(isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0)), isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1947 = 1.0;
    }
    float _1958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1949 = dot(vec4(cbModelParam._m0[40u]), vec4(_1904, _1905, _1906, 1.0));
        _1958 = dot(vec3(isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1949) ? 0.0 : (isnan(0.0) ? _1949 : max(0.0, _1949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1958 = 1.0;
    }
    float _1962 = (_1958 * cbModelParam._m0[1u].x) + (_1947 * (1.0 - cbModelParam._m0[1u].x));
    float _1972 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _951);
    float _1973 = isnan(_1972) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1972 : min(cbModelParam._m0[25u].z, _1972));
    float _2054;
    float _2056;
    float _2058;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2021 = fma(_1197, cbModelParam._m0[13u].z, fma(_1193, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1189)) + cbModelParam._m0[13u].w;
        float _2025 = fma(_1197, cbModelParam._m0[14u].z, fma(_1193, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1189)) + cbModelParam._m0[14u].w;
        float _2029 = fma(_1197, cbModelParam._m0[15u].z, fma(_1193, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1189)) + cbModelParam._m0[15u].w;
        float _2032 = fma(_1135, cbModelParam._m0[13u].z, fma(_1134, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133));
        float _2035 = fma(_1135, cbModelParam._m0[14u].z, fma(_1134, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133));
        float _2038 = fma(_1135, cbModelParam._m0[15u].z, fma(_1134, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133));
        float _2066;
        if (_2032 > 0.0)
        {
            _2066 = abs((1.0 - _2021) / _2032);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2032 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2021 + 1.0) / _2032);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2066 = frontier_phi_17_15_ladder;
        }
        float _2269;
        if (_2035 > 0.0)
        {
            _2269 = abs((1.0 - _2025) / _2035);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2035 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2025 + 1.0) / _2035);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2269 = frontier_phi_26_22_ladder;
        }
        float _2523;
        if (_2038 > 0.0)
        {
            _2523 = abs((1.0 - _2029) / _2038);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2029 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2523 = frontier_phi_38_33_ladder;
        }
        float _2525 = isnan(_2269) ? _2066 : (isnan(_2066) ? _2269 : min(_2066, _2269));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _2032) + _2021;
        float _2531 = (_2526 * _2035) + _2025;
        float _2532 = (_2526 * _2038) + _2029;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2533;
        float _2537 = _2533 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 > _2537) || ((_2531 < _2535) || ((_2530 < _2535) || (_2530 > _2537))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2532, cbModelParam._m0[9u].z, fma(_2531, cbModelParam._m0[9u].y, _2530 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2532, cbModelParam._m0[10u].z, fma(_2531, cbModelParam._m0[10u].y, _2530 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2532, cbModelParam._m0[11u].z, fma(_2531, cbModelParam._m0[11u].y, _2530 * cbModelParam._m0[11u].x))), _1973);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2054 = frontier_phi_16_38_ladder_2;
        _2056 = frontier_phi_16_38_ladder_1;
        _2058 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2042 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1133, _1134, _1135), _1973);
        _2054 = _2042.x * cbModelParam._m0[1u].y;
        _2056 = _2042.y * cbModelParam._m0[1u].y;
        _2058 = _2042.z * cbModelParam._m0[1u].y;
    }
    float _2062 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _951);
    float _2063 = isnan(_2062) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2062 : min(cbModelParam._m0[25u].w, _2062));
    float _2153;
    float _2155;
    float _2157;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2117 = fma(_1197, cbModelParam._m0[21u].z, fma(_1193, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1189)) + cbModelParam._m0[21u].w;
        float _2121 = fma(_1197, cbModelParam._m0[22u].z, fma(_1193, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1189)) + cbModelParam._m0[22u].w;
        float _2125 = fma(_1197, cbModelParam._m0[23u].z, fma(_1193, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1189)) + cbModelParam._m0[23u].w;
        float _2128 = fma(_1135, cbModelParam._m0[21u].z, fma(_1134, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133));
        float _2131 = fma(_1135, cbModelParam._m0[22u].z, fma(_1134, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133));
        float _2134 = fma(_1135, cbModelParam._m0[23u].z, fma(_1134, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133));
        float _2274;
        if (_2128 > 0.0)
        {
            _2274 = abs((1.0 - _2117) / _2128);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2128 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2117 + 1.0) / _2128);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2274 = frontier_phi_28_24_ladder;
        }
        float _2550;
        if (_2131 > 0.0)
        {
            _2550 = abs((1.0 - _2121) / _2131);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2121 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2550 = frontier_phi_40_35_ladder;
        }
        float _2763;
        if (_2134 > 0.0)
        {
            _2763 = abs((1.0 - _2125) / _2134);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2125 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2763 = frontier_phi_49_46_ladder;
        }
        float _2765 = isnan(_2550) ? _2274 : (isnan(_2274) ? _2550 : min(_2274, _2550));
        float _2766 = isnan(_2763) ? _2765 : (isnan(_2765) ? _2763 : min(_2765, _2763));
        float _2770 = (_2766 * _2128) + _2117;
        float _2771 = (_2766 * _2131) + _2121;
        float _2772 = (_2766 * _2134) + _2125;
        float _2773 = _2766 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2773;
        float _2776 = _2773 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2772 > _2776) || ((_2772 < _2774) || ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 < _2774) || (_2770 > _2776))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2772, cbModelParam._m0[17u].z, fma(_2771, cbModelParam._m0[17u].y, _2770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2772, cbModelParam._m0[18u].z, fma(_2771, cbModelParam._m0[18u].y, _2770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2772, cbModelParam._m0[19u].z, fma(_2771, cbModelParam._m0[19u].y, _2770 * cbModelParam._m0[19u].x))), _2063);
            frontier_phi_25_49_ladder = _2971.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2971.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2971.x * cbModelParam._m0[1u].z;
        }
        _2153 = frontier_phi_25_49_ladder_2;
        _2155 = frontier_phi_25_49_ladder_1;
        _2157 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2137 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1133, _1134, _1135), _2063);
        _2153 = _2137.x * cbModelParam._m0[1u].z;
        _2155 = _2137.y * cbModelParam._m0[1u].z;
        _2157 = _2137.z * cbModelParam._m0[1u].z;
    }
    float _2170 = (((_1160 * _1109) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2153 - _2054)) + _2054);
    float _2172 = (((_1160 * _1111) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2155 - _2056)) + _2056);
    float _2174 = (((_1160 * _1112) + _1161) * _1125) * ((cbModelParam._m0[1u].w * (_2157 - _2058)) + _2058);
    float _2177 = fma(_2174, cbSceneParam._m0[89u].z, fma(_2172, cbSceneParam._m0[89u].y, _2170 * cbSceneParam._m0[89u].x));
    float _2180 = fma(_2174, cbSceneParam._m0[90u].z, fma(_2172, cbSceneParam._m0[90u].y, _2170 * cbSceneParam._m0[90u].x));
    float _2183 = fma(_2174, cbSceneParam._m0[91u].z, fma(_2172, cbSceneParam._m0[91u].y, _2170 * cbSceneParam._m0[91u].x));
    uvec4 _2193 = floatBitsToUint(cbInstanceData._m0[_267 + 5u]);
    uint _2195 = _2193.x * 14u;
    uint _2196 = _2195 + 13u;
    float _2203 = _1125 + (-1.0);
    float _2208 = (cbLight._m0[_2196].x * _2203) + 1.0;
    float _2209 = (cbLight._m0[_2196].y * _2203) + 1.0;
    float _2210 = (cbLight._m0[_2196].z * _2203) + 1.0;
    float _2211 = (cbLight._m0[_2196].w * _2203) + 1.0;
    uint _2212 = _2195 + 5u;
    float _2218 = isnan(1.0) ? _2209 : (isnan(_2209) ? 1.0 : min(_2209, 1.0));
    uint _2222 = _2195 + 4u;
    float _2228 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
    uint _2232 = _2195 | 1u;
    float _2243 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_948, _949, _950));
    float _2246 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_948, _949, _950));
    float _4484 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _4495 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
    float _2251 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2253 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2260 = ((cbLight._m0[_2212].x * _2218) * _2253) + ((cbLight._m0[_2222].x * _2228) * _2251);
    float _2261 = ((_2218 * cbLight._m0[_2212].y) * _2253) + ((_2228 * cbLight._m0[_2222].y) * _2251);
    float _2262 = ((_2218 * cbLight._m0[_2212].z) * _2253) + ((_2228 * cbLight._m0[_2222].z) * _2251);
    uvec4 _2266 = floatBitsToUint(cbLight._m0[_2195 + 12u]);
    bool _2268 = _2266.x == 0u;
    float _2279;
    float _2281;
    float _2283;
    if (_2268)
    {
        _2279 = _2260;
        _2281 = _2261;
        _2283 = _2262;
    }
    else
    {
        uint _2287 = _2195 + 6u;
        float _2303 = (dot(vec3(cbLight._m0[_2195 + 2u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4506 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2306 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2279 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2260;
        _2281 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2261;
        _2283 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2262;
    }
    bool _2286 = _2266.y == 0u;
    float _2324;
    float _2326;
    float _2328;
    if (_2286)
    {
        _2324 = _2279;
        _2326 = _2281;
        _2328 = _2283;
    }
    else
    {
        uint _2494 = _2195 + 7u;
        float _2510 = (dot(vec3(cbLight._m0[_2195 + 3u].xyz), vec3(_948, _949, _950)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4522 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2513 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2324 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2279;
        _2326 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2281;
        _2328 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2283;
    }
    uint _2331 = _2195 + 8u;
    float _2344 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2195].w)) * _951) * 0.949999988079071044921875);
    float _2345 = _2344 * _2344;
    float _2346 = cbLight._m0[_2195].x + _1027;
    float _2347 = cbLight._m0[_2195].y + _1028;
    float _2348 = cbLight._m0[_2195].z + _1029;
    float _2352 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
    float _2353 = _2352 * _2346;
    float _2354 = _2352 * _2347;
    float _2355 = _2352 * _2348;
    float _2356 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2195].xyz));
    float _4538 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2359 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _4549 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2360 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2361 = dot(vec3(_948, _949, _950), vec3(_2353, _2354, _2355));
    float _4560 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2364 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2365 = dot(vec3(cbLight._m0[_2195].xyz), vec3(_2353, _2354, _2355));
    float _4571 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = _2345 * _2345;
    float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0)))) * 5.0);
    float _2382 = 0.959999978542327880859375 - _1106;
    float _2384 = 0.959999978542327880859375 - _1107;
    float _2385 = 0.959999978542327880859375 - _1108;
    float _2392 = 1.0 - _2345;
    float _2403 = (0.5 / (((_2360 * ((_2359 * _2392) + _2345)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2392) + _2345) * _2359))) * _2359;
    float _4582 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2405 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
    uint _2416 = _2195 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2232].w)) * _951) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2232].x + _1027;
    float _2430 = cbLight._m0[_2232].y + _1028;
    float _2431 = cbLight._m0[_2232].z + _1029;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2232].xyz));
    float _4593 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2443 = dot(vec3(_948, _949, _950), vec3(_2436, _2437, _2438));
    float _4604 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2232].xyz), vec3(_2436, _2437, _2438));
    float _4615 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0)))) * 5.0);
    float _2469 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2360 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2469) + _2428) * _2442))) * _2442;
    float _4626 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2491 = (((((_2462 * _2382) + _1109) * cbLight._m0[_2416].x) * _2481) * _2218) + (((((_2381 * _2382) + _1109) * cbLight._m0[_2331].x) * _2405) * _2228);
    float _2492 = (((((_2462 * _2384) + _1111) * cbLight._m0[_2416].y) * _2481) * _2218) + (((((_2381 * _2384) + _1111) * cbLight._m0[_2331].y) * _2405) * _2228);
    float _2493 = (((((_2462 * _2385) + _1112) * cbLight._m0[_2416].z) * _2481) * _2218) + (((((_2381 * _2385) + _1112) * cbLight._m0[_2331].z) * _2405) * _2228);
    float _2555;
    float _2557;
    float _2559;
    if (_2268)
    {
        _2555 = _2491;
        _2557 = _2492;
        _2559 = _2493;
    }
    else
    {
        uint _2561 = _2195 + 2u;
        uint _2565 = _2195 + 10u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _951) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _1027;
        float _2582 = cbLight._m0[_2561].y + _1028;
        float _2583 = cbLight._m0[_2561].z + _1029;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2561].xyz));
        float _4637 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2595 = dot(vec3(_948, _949, _950), vec3(_2588, _2589, _2590));
        float _4648 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4659 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0)))) * 5.0);
        float _2621 = 1.0 - _2580;
        float _2631 = (0.5 / (((_2360 * ((_2594 * _2621) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2621) + _2580) * _2594))) * _2594;
        float _4670 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2210 : (isnan(_2210) ? 1.0 : min(_2210, 1.0));
        _2555 = (((((_2614 * _2382) + _1109) * cbLight._m0[_2565].x) * _2633) * _2634) + _2491;
        _2557 = (((((_2614 * _2384) + _1111) * cbLight._m0[_2565].y) * _2633) * _2634) + _2492;
        _2559 = (((((_2614 * _2385) + _1112) * cbLight._m0[_2565].z) * _2633) * _2634) + _2493;
    }
    float _2669;
    float _2671;
    float _2673;
    if (_2286)
    {
        _2669 = _2555;
        _2671 = _2557;
        _2673 = _2559;
    }
    else
    {
        uint _2680 = _2195 + 3u;
        uint _2684 = _2195 + 11u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _951) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _1027;
        float _2701 = cbLight._m0[_2680].y + _1028;
        float _2702 = cbLight._m0[_2680].z + _1029;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_948, _949, _950), vec3(cbLight._m0[_2680].xyz));
        float _4686 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2714 = dot(vec3(_948, _949, _950), vec3(_2707, _2708, _2709));
        float _4697 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4708 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2360 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2360 * _2740) + _2699) * _2713))) * _2713;
        float _4719 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2211 : (isnan(_2211) ? 1.0 : min(_2211, 1.0));
        _2669 = (((((_2733 * _2382) + _1109) * cbLight._m0[_2684].x) * _2752) * _2753) + _2555;
        _2671 = (((((_2733 * _2384) + _1111) * cbLight._m0[_2684].y) * _2752) * _2753) + _2557;
        _2673 = (((((_2733 * _2385) + _1112) * cbLight._m0[_2684].z) * _2752) * _2753) + _2559;
    }
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_2193.y == 0u)
    {
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2828;
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2828;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2828;
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.x;
        uint _2855 = uint((float(_2843.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1048) / _2844))) + floor(float(uint(cbSceneParam._m0[85u].x * _1047) / _2844)));
        float _2865 = (log2(_2831 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2866 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        uint _2869 = uint(isnan(14.0) ? _2866 : (isnan(_2866) ? 14.0 : min(_2866, 14.0)));
        uvec4 _2874 = texelFetch(g_lightClusterGridBuffer, int(((_2869 << 2u) + (_2855 << 6u)) >> 2u));
        uint _2875 = _2874.x;
        uint _2876 = _2843.z;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((((1u << ((_2876 >> 4u) & 15u)) + 4294967295u) & _2875) == 0u) || ((_2876 & 240u) == 0u))
        {
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
        }
        else
        {
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3144;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3135 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2829;
                        float _3341 = _3300.y - _2830;
                        float _3342 = _3300.z - _2831;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1066, _1069, _1072), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4745 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2829;
                        float _3376 = (-0.0) - _2830;
                        float _3377 = (-0.0) - _2831;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1141;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1066, _1069, _1072), vec3(_3382, _3383, _3384));
                        float _4761 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3417 = dot(vec3(_1066, _1069, _1072), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4772 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4783 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4794 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3204 = (_3371 * _3319.x) + _3277;
                        _3205 = (_3371 * _3319.y) + _3278;
                        _3206 = (_3371 * _3319.z) + _3279;
                        _3201 = (_3452 * _3336.x) + _3274;
                        _3202 = (_3452 * _3336.y) + _3275;
                        _3203 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                _2977 = frontier_phi_66_pred;
                _2987 = frontier_phi_66_pred_1;
                _2985 = frontier_phi_66_pred_2;
                _2983 = frontier_phi_66_pred_3;
                _2981 = frontier_phi_66_pred_4;
                _2979 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2977;
                    _3130 = _2979;
                    _3131 = _2981;
                    _3132 = _2983;
                    _3133 = _2985;
                    _3134 = _2987;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
        }
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.z;
        uint _2993 = (_2991 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2993) & _2875) == 0u)
        {
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
            float _3123 = _3122 * _2829;
            float _3124 = _3122 * _2830;
            float _3125 = _3122 * _2831;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2993 < ((_2991 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3257 = _2976;
                float _3258 = _2978;
                float _3259 = _2980;
                float _3260 = _2982;
                float _3261 = _2984;
                float _3262 = _2986;
                uint _3263 = _2993;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3273)
                    {
                        frontier_phi_77_pred = _3262;
                        frontier_phi_77_pred_1 = _3261;
                        frontier_phi_77_pred_2 = _3260;
                        frontier_phi_77_pred_3 = _3259;
                        frontier_phi_77_pred_4 = _3258;
                        frontier_phi_77_pred_5 = _3257;
                    }
                    else
                    {
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        uint _3485 = _3272;
                        uint _3486;
                        vec4 _3511;
                        float _3512;
                        vec4 _3527;
                        vec3 _3539;
                        vec4 _3554;
                        vec4 _3569;
                        float _3615;
                        bool _3616;
                        for (;;)
                        {
                            uint _3496 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3485));
                            _3486 = (_3485 + 4294967295u) & _3485;
                            uint _3498 = _3496 * 40u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3512 = _3511.w;
                            uint _3514 = (_3496 * 40u) + 4u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3496 * 40u) + 8u;
                            _3539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x));
                            uint _3541 = (_3496 * 40u) + 16u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3496 * 40u) + 20u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3496 * 40u) + 24u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3590 = (_3496 * 40u) + 28u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3615 = fma(_2831, _3603.z, fma(_2830, _3603.y, _3603.x * _2829)) + _3603.w;
                            _3616 = !((fma(_2831, _3584.z, fma(_2830, _3584.y, _3584.x * _2829)) + _3584.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3616)
                            {
                                float _3643 = _3511.x - _2829;
                                float _3644 = _3511.y - _2830;
                                float _3645 = _3511.z - _2831;
                                float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                                float _3649 = inversesqrt(_3646);
                                float _3650 = _3649 * _3643;
                                float _3651 = _3649 * _3644;
                                float _3652 = _3649 * _3645;
                                float _3656 = 1.0 - (_3646 / (_3512 * _3512));
                                float _4805 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3661 = sqrt(_3646) * _3527.w;
                                float _3663 = 1.39999997615814208984375 / (_3661 + 1.39999997615814208984375);
                                float _3664 = _3663 * _3663;
                                float _3667 = ((1.0 - _3664) * dot(vec3(_3650, _3651, _3652), vec3(_1066, _1069, _1072))) + _3664;
                                float _3670 = _3661 * _3661;
                                float _3674 = (fma(_2831, _3554.z, fma(_2830, _3554.y, _3554.x * _2829)) + _3554.w) / _3615;
                                float _3675 = (fma(_2831, _3569.z, fma(_2830, _3569.y, _3569.x * _2829)) + _3569.w) / _3615;
                                float _3679 = 1.0 - dot(vec2(_3674, _3675), vec2(_3674, _3675));
                                float _4821 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3681 = _3680 * (((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3657) / ((_3670 * 0.699999988079071044921875) + 1.0));
                                float _3693 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                                float _3694 = 1.0 - _1141;
                                float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                                float _3702 = _3701 * _3701;
                                float _3703 = _3702 * _3702;
                                float _3704 = _3650 - _3123;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                                float _3714 = dot(vec3(_1066, _1069, _1072), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4832 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3718 = dot(vec3(_1066, _1069, _1072), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                                float _4843 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                                float _3726 = _3663 * _3702;
                                float _3727 = _3726 * _3726;
                                float _3733 = ((1.0 - _3727) * dot(vec3(_1066, _1069, _1072), vec3(_3650, _3651, _3652))) + _3727;
                                float _4854 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3735 = 1.0 - _3702;
                                float _3745 = (0.5 / (((_3734 * ((_3717 * _3735) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3702) * _3717))) * _3734;
                                float _4865 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3755 = (_3680 * _3657) * (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) / ((_3725 * _3725) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3681 * _3527.y;
                                frontier_phi_83_pred_1 = _3681 * _3527.x;
                                frontier_phi_83_pred_2 = _3755 * _3539.z;
                                frontier_phi_83_pred_3 = _3755 * _3539.y;
                                frontier_phi_83_pred_4 = _3755 * _3539.x;
                                frontier_phi_83_pred_5 = _3681 * _3527.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_83_pred;
                            _3762 = frontier_phi_83_pred_1;
                            _3761 = frontier_phi_83_pred_2;
                            _3760 = frontier_phi_83_pred_3;
                            _3759 = frontier_phi_83_pred_4;
                            _3764 = frontier_phi_83_pred_5;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            if (_3486 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3486;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3471;
                        frontier_phi_77_pred_1 = _3470;
                        frontier_phi_77_pred_2 = _3469;
                        frontier_phi_77_pred_3 = _3468;
                        frontier_phi_77_pred_4 = _3467;
                        frontier_phi_77_pred_5 = _3466;
                    }
                    _3108 = frontier_phi_77_pred;
                    _3106 = frontier_phi_77_pred_1;
                    _3104 = frontier_phi_77_pred_2;
                    _3102 = frontier_phi_77_pred_3;
                    _3100 = frontier_phi_77_pred_4;
                    _3098 = frontier_phi_77_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3098;
                        _3258 = _3100;
                        _3259 = _3102;
                        _3260 = _3104;
                        _3261 = _3106;
                        _3262 = _3108;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3102;
                frontier_phi_58_59_ladder_1 = _3108;
                frontier_phi_58_59_ladder_2 = _3106;
                frontier_phi_58_59_ladder_3 = _3104;
                frontier_phi_58_59_ladder_4 = _3100;
                frontier_phi_58_59_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_58_59_ladder = _2980;
                frontier_phi_58_59_ladder_1 = _2986;
                frontier_phi_58_59_ladder_2 = _2984;
                frontier_phi_58_59_ladder_3 = _2982;
                frontier_phi_58_59_ladder_4 = _2978;
                frontier_phi_58_59_ladder_5 = _2976;
            }
            _3097 = frontier_phi_58_59_ladder_5;
            _3099 = frontier_phi_58_59_ladder_4;
            _3101 = frontier_phi_58_59_ladder;
            _3103 = frontier_phi_58_59_ladder_3;
            _3105 = frontier_phi_58_59_ladder_2;
            _3107 = frontier_phi_58_59_ladder_1;
        }
        float _3112 = isnan(1.0) ? _1125 : (isnan(_1125) ? 1.0 : min(_1125, 1.0));
        _2888 = (_3112 * _3103) + _2324;
        _2890 = (_3112 * _3105) + _2326;
        _2892 = (_3112 * _3107) + _2328;
        _2894 = ((_3097 * _1109) * _3112) + _2669;
        _2896 = ((_3099 * _1111) * _3112) + _2671;
        _2898 = ((_3101 * _1112) * _3112) + _2673;
    }
    else
    {
        _2888 = _2324;
        _2890 = _2326;
        _2892 = _2328;
        _2894 = _2669;
        _2896 = _2671;
        _2898 = _2673;
    }
    float _4881 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _4892 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _4903 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _2915 = ((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2888 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1125))) + ((_2894 + ((isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2916 = ((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2890 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1125))) + ((_2896 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2892 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1125))) + ((_2898 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1962)) * cbPerFrame._m0[3u].x);
    uint _2918 = _267 + 6u;
    float _2926 = _1047 / cbSceneParam._m0[86u].x;
    float _2927 = _1048 / cbSceneParam._m0[86u].y;
    vec4 _2941 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, (log2((isnan(cbSceneParam._m0[77u].w) ? _970 : (isnan(_970) ? cbSceneParam._m0[77u].w : min(_970, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2943 = _2941.x;
    float _2944 = _2941.y;
    float _2945 = _2941.z;
    float _2946 = _2941.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_970 > cbSceneParam._m0[78u].w)
    {
        float _3001 = isnan(_970) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _970 : min(cbSceneParam._m0[80u].w, _970));
        float _3002 = _3001 / _970;
        float _3013 = _3002 * _1020;
        float _3014 = _1021 * _3002;
        float _3015 = (-0.0) - _3014;
        float _3017 = _3002 * _1022;
        float _3019 = (cbSceneParam._m0[77u].w * _3015) / _3001;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3014;
        float _3027 = sqrt(((_3013 * _3013) + (_3014 * _3014)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3001)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3015 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3214 = ((abs(_3027 / _3015) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3037 * _3169) - exp2(_3037 * _3170)) * _3158))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2946);
        _3039 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2943;
        _3041 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2944;
        _3043 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2945;
        _3045 = _3225 * _2946;
    }
    else
    {
        _3039 = _2943;
        _3041 = _2944;
        _3043 = _2945;
        _3045 = _2946;
    }
    bool _3252;
    vec4 _3055;
    vec4 _3077;
    float _3079;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        _3055 = cbMatDynParam._m0[0u];
        float _3057 = roundEven(_3055.y);
        bool _3058 = _3057 == 3.0;
        float _3059 = log2(_3045);
        float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * _2915;
        float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * _2916;
        float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * _2917;
        float _3075 = _1036 + (-0.5);
        _3077 = cbMtdParam._m0[1u];
        _3079 = _3077.y * _3075;
        float _3082 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = _3082 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
        _3085 = _3082 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
        _3086 = _3075 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_267 + 7u].x + _3086) < 0.5)
            {
                _3252 = true;
                break;
            }
        }
        uint _3193 = _1085 + uint(_3055.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3086) < 0.5))
        {
            _3252 = true;
            break;
        }
        if ((_3079 + 1.0) < _3077.x)
        {
            _3252 = true;
            break;
        }
        _3252 = false;
        break;
    }
    float _3457;
    if (_3252)
    {
        discard_state = true;
        _3457 = 0.0;
    }
    else
    {
        _3457 = cbInstanceData._m0[_2918].w;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3457;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2918].w;
    discard_exit();
}


