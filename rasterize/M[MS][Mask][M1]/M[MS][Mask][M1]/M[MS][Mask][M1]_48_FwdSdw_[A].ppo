#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1500;
float _4161;
float _4162;
float _4163;
float _4164;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4173 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4184 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4195 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _346 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = _346.x * cbMtdParam._m0[11u].x;
    float _352 = _346.y * cbMtdParam._m0[11u].y;
    float _353 = _346.z * cbMtdParam._m0[11u].z;
    vec4 _372 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _420 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _422 = _420.x;
    float _434 = dot(vec4(_422, _420.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _451 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_422 - _434) * cbMtdParam._m0[23u].w) + _434) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4206 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _452 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _459 = (_452 * ((_372.x * cbMtdParam._m0[12u].x) - _351)) + _351;
    float _460 = (_452 * ((_372.y * cbMtdParam._m0[12u].y) - _352)) + _352;
    float _461 = (_452 * ((_372.z * cbMtdParam._m0[12u].z) - _353)) + _353;
    float _465 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _459;
    float _468 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _460;
    float _471 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _461;
    float _478 = ((_459 - _465) * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) + _465;
    float _479 = ((_460 - _468) * (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0)))) + _468;
    float _480 = ((_461 - _471) * (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0)))) + _471;
    vec4 _499 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _519 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _546 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _565 = _563.x;
    float _566 = _563.y;
    float _567 = _563.z;
    float _576 = ((_546.z - _567) * _452) + _567;
    float _579 = ((((_546.x - _565) * _452) + _565) * 2.0) + (-1.0);
    float _580 = ((((_546.y - _566) * _452) + _566) * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _4217 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _586 = sqrt(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))));
    vec4 _606 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _618 = (_579 + ((((_519.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_606.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _619 = (_580 + ((((_519.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_606.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _622 = fma(_586, _258, fma(_619, _265, _618 * _251));
    float _625 = fma(_586, _259, fma(_619, _266, _618 * _252));
    float _628 = fma(_586, _260, fma(_619, _267, _618 * _253));
    float _632 = inversesqrt(dot(vec3(_622, _625, _628), vec3(_622, _625, _628)));
    vec4 _659 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _661 = _659.x;
    float _662 = 1.0 - _661;
    float _671 = (cbMtdParam._m0[19u].x + dot(vec4(_632 * _622, _632 * _625, _632 * _628, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_661 - _662) * cbMtdParam._m0[24u].z) + _662) * cbMtdParam._m0[21u].z);
    float _4228 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _672 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _674 = (-0.0) - cbMtdParam._m0[24u].x;
    float _676 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _676 : (isnan(_676) ? 1.0 : min(_676, 1.0));
    float _684 = _672 - ((_672 * TEXCOORD_8.x) * _677);
    float _685 = _672 - ((_672 * TEXCOORD_8.y) * _677);
    float _686 = _672 - ((_672 * TEXCOORD_8.z) * _677);
    float _693 = (_684 * ((_499.x * cbMtdParam._m0[18u].x) - _478)) + _478;
    float _694 = (_685 * ((_499.y * cbMtdParam._m0[18u].y) - _479)) + _479;
    float _695 = (_686 * ((_499.z * cbMtdParam._m0[18u].z) - _480)) + _480;
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _709 = _707.x;
    float _710 = 1.0 - _709;
    float _736 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_709 - _710) * cbMtdParam._m0[24u].w) + _710) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4249 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
    float _745 = ((((cbMtdParam._m0[10u].x - _693) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _737) + _693;
    float _746 = ((((cbMtdParam._m0[10u].y - _694) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _737) + _694;
    float _747 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _695)) * _737) + _695;
    vec4 _759 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _773 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _775 = _773.x;
    float _793 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _775) * _452) + _775;
    float _797 = ((_759.x - _793) * cbMtdParam._m0[19u].z) + _793;
    float _799 = _797 - (_797 * _684);
    float _801 = _799 - (_799 * _737);
    float _806 = (((_519.z - _576) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _576;
    float _810 = ((_606.z - _806) * cbMtdParam._m0[19u].w) + _806;
    vec4 _824 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _831 = (_824.x * 2.0) + (-1.0);
    float _832 = (_824.y * 2.0) + (-1.0);
    float _833 = dot(vec2(_831, _832), vec2(_831, _832));
    float _4260 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _841 = ((_824.z - _810) * _684) + _810;
    float _844 = ((cbMtdParam._m0[23u].x - _841) * _737) + _841;
    vec4 _865 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _871 = (_865.x * 2.0) + (-1.0);
    float _872 = (_865.y * 2.0) + (-1.0);
    float _873 = dot(vec2(_871, _872), vec2(_871, _872));
    float _4271 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _888 = ((sqrt(1.0 - (isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0)))) - _586) * _686) + _586;
    float _891 = (((_831 - _618) * _684) + _618) + (cbMtdParam._m0[21u].x * _618);
    float _892 = (((_832 - _619) * _685) + _619) + (cbMtdParam._m0[21u].x * _619);
    float _903 = (((_871 - _891) + (_891 * cbMtdParam._m0[22u].z)) * _737) + _891;
    float _904 = (((_872 - _892) + (_892 * cbMtdParam._m0[22u].z)) * _737) + _892;
    float _905 = (_737 * (sqrt(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) - _888)) + _888;
    float _907 = cbMtdParam._m0[22u].x + _606.w;
    float _910 = fma(_905, _258, fma(_904, _265, _903 * _251));
    float _913 = fma(_905, _259, fma(_904, _266, _903 * _252));
    float _916 = fma(_905, _260, fma(_904, _267, _903 * _253));
    float _920 = inversesqrt(dot(vec3(_910, _913, _916), vec3(_910, _913, _916)));
    float _921 = _920 * _910;
    float _922 = _920 * _913;
    float _923 = _920 * _916;
    float _4282 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _924 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4304 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4315 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4326 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4337 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _929 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _943 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _993 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _983);
    float _994 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _983);
    float _995 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _983);
    float _999 = inversesqrt(dot(vec3(_993, _994, _995), vec3(_993, _994, _995)));
    float _1000 = _993 * _999;
    float _1001 = _994 * _999;
    float _1002 = _995 * _999;
    vec4 _1007 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1009 = _1007.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1181 = sqrt(((_993 * _993) + (_994 * _994)) + (_995 * _995));
        float _1187 = (cbMatDynParam._m0[5u].x * _1181) + cbMatDynParam._m0[5u].y;
        float _4348 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1192 = (cbMatDynParam._m0[5u].z * _1181) + cbMatDynParam._m0[5u].w;
        float _4359 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) - _1188)) + _1188) < ((_1009 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1020 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1021 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1039 = fma(_923, cbSceneParam._m0[5u].z, fma(_922, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _921));
    float _1042 = fma(_923, cbSceneParam._m0[6u].z, fma(_922, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _921));
    float _1045 = fma(_923, cbSceneParam._m0[7u].z, fma(_922, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _921));
    uint _1058 = _289 + 9u;
    uint _1059 = _1058 + uint(cbMatDynParam._m0[0u].w);
    float _1065 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * cbInstanceData._m0[_1059].x;
    float _1066 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0)))) * cbInstanceData._m0[_1059].y;
    float _1067 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0)))) * cbInstanceData._m0[_1059].z;
    float _4370 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
    float _4381 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _1071 = 1.0 - _929;
    float _1072 = _1068 * _1071;
    float _1073 = _1069 * _1071;
    float _1074 = _1070 * _1071;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _929;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _929;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _929;
    float _1082 = _1079 + 0.039999999105930328369140625;
    float _1084 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    vec4 _1094 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1020, cbSceneParam._m0[86u].y * _1021));
    float _1098 = ((isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * TEXCOORD_5.w) * _1094.x;
    float _1099 = dot(vec3(_921, _922, _923), vec3(_1000, _1001, _1002));
    float _1102 = _1099 * 2.0;
    float _1106 = (_1102 * _921) - _1000;
    float _1107 = (_1102 * _922) - _1001;
    float _1108 = (_1102 * _923) - _1002;
    float _1112 = abs(dot(vec3(_1000, _1001, _1002), vec3(_921, _922, _923)));
    float _4403 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _1114 = sqrt(_924);
    float _1127 = exp2((_1114 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1114 * 3.0));
    float _1133 = (1.0 - _1127) * ((_1114 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1134 = _1127 * _1114;
    float _1162 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1166 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1499;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1224 = fma(_1170, cbModelParam._m0[26u].z, fma(_1166, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1162));
        float _1228 = fma(_1170, cbModelParam._m0[27u].z, fma(_1166, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1162));
        float _1232 = fma(_1170, cbModelParam._m0[28u].z, fma(_1166, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1162));
        float _1257 = _1162 + _921;
        float _1258 = _1166 + _922;
        float _1259 = _1170 + _923;
        float _1269 = fma(_1259, cbModelParam._m0[26u].z, fma(_1258, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1257)) - _1224;
        float _1270 = fma(_1259, cbModelParam._m0[27u].z, fma(_1258, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1257)) - _1228;
        float _1271 = fma(_1259, cbModelParam._m0[28u].z, fma(_1258, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1257)) - _1232;
        float _1275 = inversesqrt(dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271)));
        float _1288 = ((_1275 * _1269) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1224 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1275 * _1270) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1228 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1275 * _1271) / cbModelParam._m0[34u].z) + ((((((_1232 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1288, _1289, _1290), 0.0);
        float _1327 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1293.x + (-0.5));
        float _1329 = _1327 * (_1293.y + (-0.5));
        float _1330 = _1327 * (_1293.z + (-0.5));
        float _1337 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1338 = _1337 * (_1300.x + (-0.5));
        float _1339 = _1337 * (_1300.y + (-0.5));
        float _1340 = _1337 * (_1300.z + (-0.5));
        float _1347 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1307.x + (-0.5));
        float _1349 = _1347 * (_1307.y + (-0.5));
        float _1350 = _1347 * (_1307.z + (-0.5));
        float _1357 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1314.x + (-0.5));
        float _1359 = _1357 * (_1314.y + (-0.5));
        float _1360 = _1357 * (_1314.z + (-0.5));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = _1328 * 0.5;
        float _1365 = _1338 * 0.5;
        float _1366 = _1348 * 0.5;
        float _1367 = dot(vec3(_1364, _1365, _1366), vec3(_1364, _1365, _1366));
        float _1372 = (_1367 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1367);
        float _1381 = (dot(vec3(_921, _922, _923), vec3(_1372 * _1364, _1372 * _1365, _1372 * _1366)) + 1.0) * 0.5;
        float _4429 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1391 = sqrt(((_1365 * _1365) + (_1364 * _1364)) + (_1366 * _1366)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _4440 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4451 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_1393 + 1.0))) + _1398) * _1361;
        float _1408 = _1329 * 0.5;
        float _1409 = _1339 * 0.5;
        float _1410 = _1349 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_921, _922, _923), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _4484 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1435 + 1.0))) + _1440) * _1362;
        float _1450 = _1330 * 0.5;
        float _1451 = _1340 * 0.5;
        float _1452 = _1350 * 0.5;
        float _1453 = dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452));
        float _1458 = (_1453 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1453);
        float _1466 = (dot(vec3(_921, _922, _923), vec3(_1458 * _1450, _1458 * _1451, _1458 * _1452)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1475 = sqrt(((_1451 * _1451) + (_1450 * _1450)) + (_1452 * _1452)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1476 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1477 = _1476 * 2.0;
        float _1481 = (1.0 - _1476) / (_1476 + 1.0);
        float _4517 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1482 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1491 = ((((1.0 - _1482) * (_1477 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1477 + 1.0))) + _1482) * _1363;
        _1499 = _1330;
        _1501 = _1329;
        _1502 = _1328;
        _1503 = _1340;
        _1504 = _1339;
        _1505 = _1338;
        _1506 = _1350;
        _1507 = _1349;
        _1508 = _1348;
        _1509 = _1363;
        _1510 = _1362;
        _1511 = _1361;
        _1512 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)));
    }
    else
    {
        _1499 = _1500;
        _1501 = _1500;
        _1502 = _1500;
        _1503 = _1500;
        _1504 = _1500;
        _1505 = _1500;
        _1506 = _1500;
        _1507 = _1500;
        _1508 = _1500;
        _1509 = _1500;
        _1510 = _1500;
        _1511 = _1500;
        _1512 = 0.0;
        _1513 = 0.0;
        _1514 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1170, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1162));
        float _1546 = fma(_1170, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1162));
        float _1550 = fma(_1170, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1162));
        float _1573 = _1162 + _921;
        float _1574 = _1166 + _922;
        float _1575 = _1170 + _923;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_921, _922, _923), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4558 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4569 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4580 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_921, _922, _923), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4591 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4602 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4613 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_921, _922, _923), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4624 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4635 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4646 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1500;
        _1812 = _1500;
        _1813 = _1500;
        _1814 = _1500;
        _1815 = _1500;
        _1816 = _1500;
        _1817 = _1500;
        _1818 = _1500;
        _1819 = _1500;
        _1820 = _1500;
        _1821 = _1500;
        _1822 = _1500;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1512)) + _1512;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1513)) + _1513;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1514)) + _1514;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1106 * 0.5;
    float _1880 = _1107 * 0.5;
    float _1881 = _1108 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1499, _1503, _1506, _1509));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1501, _1504, _1507, _1510));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _924);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1995 = fma(_1170, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1162)) + cbModelParam._m0[13u].w;
        float _1999 = fma(_1170, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1162)) + cbModelParam._m0[14u].w;
        float _2003 = fma(_1170, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1162)) + cbModelParam._m0[15u].w;
        float _2006 = fma(_1108, cbModelParam._m0[13u].z, fma(_1107, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1106));
        float _2009 = fma(_1108, cbModelParam._m0[14u].z, fma(_1107, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1106));
        float _2012 = fma(_1108, cbModelParam._m0[15u].z, fma(_1107, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1106));
        float _2040;
        if (_2006 > 0.0)
        {
            _2040 = abs((1.0 - _1995) / _2006);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1995 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2040 = frontier_phi_17_15_ladder;
        }
        float _2211;
        if (_2009 > 0.0)
        {
            _2211 = abs((1.0 - _1999) / _2009);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1999 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2211 = frontier_phi_26_22_ladder;
        }
        float _2506;
        if (_2012 > 0.0)
        {
            _2506 = abs((1.0 - _2003) / _2012);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2012 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2003 + 1.0) / _2012);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2506 = frontier_phi_38_33_ladder;
        }
        float _2508 = isnan(_2211) ? _2040 : (isnan(_2040) ? _2211 : min(_2040, _2211));
        float _2509 = isnan(_2506) ? _2508 : (isnan(_2508) ? _2506 : min(_2508, _2506));
        float _2513 = (_2509 * _2006) + _1995;
        float _2514 = (_2509 * _2009) + _1999;
        float _2515 = (_2509 * _2012) + _2003;
        float _2516 = _2509 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2516;
        float _2520 = _2516 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 > _2520) || ((_2514 < _2518) || ((_2513 < _2518) || (_2513 > _2520))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2515, cbModelParam._m0[9u].z, fma(_2514, cbModelParam._m0[9u].y, _2513 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2515, cbModelParam._m0[10u].z, fma(_2514, cbModelParam._m0[10u].y, _2513 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2515, cbModelParam._m0[11u].z, fma(_2514, cbModelParam._m0[11u].y, _2513 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2028 = frontier_phi_16_38_ladder_2;
        _2030 = frontier_phi_16_38_ladder_1;
        _2032 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2016 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1106, _1107, _1108), _1948);
        _2028 = _2016.x * cbModelParam._m0[1u].y;
        _2030 = _2016.y * cbModelParam._m0[1u].y;
        _2032 = _2016.z * cbModelParam._m0[1u].y;
    }
    float _2036 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _924);
    float _2037 = isnan(_2036) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2036 : min(cbModelParam._m0[25u].w, _2036));
    float _2126;
    float _2128;
    float _2130;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2090 = fma(_1170, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1162)) + cbModelParam._m0[21u].w;
        float _2094 = fma(_1170, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1162)) + cbModelParam._m0[22u].w;
        float _2098 = fma(_1170, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1162)) + cbModelParam._m0[23u].w;
        float _2101 = fma(_1108, cbModelParam._m0[21u].z, fma(_1107, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1106));
        float _2104 = fma(_1108, cbModelParam._m0[22u].z, fma(_1107, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1106));
        float _2107 = fma(_1108, cbModelParam._m0[23u].z, fma(_1107, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1106));
        float _2216;
        if (_2101 > 0.0)
        {
            _2216 = abs((1.0 - _2090) / _2101);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2101 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2090 + 1.0) / _2101);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2216 = frontier_phi_28_24_ladder;
        }
        float _2533;
        if (_2104 > 0.0)
        {
            _2533 = abs((1.0 - _2094) / _2104);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2094 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2533 = frontier_phi_40_35_ladder;
        }
        float _2871;
        if (_2107 > 0.0)
        {
            _2871 = abs((1.0 - _2098) / _2107);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2098 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2871 = frontier_phi_50_47_ladder;
        }
        float _2873 = isnan(_2533) ? _2216 : (isnan(_2216) ? _2533 : min(_2216, _2533));
        float _2874 = isnan(_2871) ? _2873 : (isnan(_2873) ? _2871 : min(_2873, _2871));
        float _2878 = (_2874 * _2101) + _2090;
        float _2879 = (_2874 * _2104) + _2094;
        float _2880 = (_2874 * _2107) + _2098;
        float _2881 = _2874 * 9.9999997473787516355514526367188e-05;
        float _2882 = (-1.0) - _2881;
        float _2884 = _2881 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2880 > _2884) || ((_2880 < _2882) || ((_2879 > _2884) || ((_2879 < _2882) || ((_2878 < _2882) || (_2878 > _2884))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3002 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2880, cbModelParam._m0[17u].z, fma(_2879, cbModelParam._m0[17u].y, _2878 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2880, cbModelParam._m0[18u].z, fma(_2879, cbModelParam._m0[18u].y, _2878 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2880, cbModelParam._m0[19u].z, fma(_2879, cbModelParam._m0[19u].y, _2878 * cbModelParam._m0[19u].x))), _2037);
            frontier_phi_25_50_ladder = _3002.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3002.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3002.x * cbModelParam._m0[1u].z;
        }
        _2126 = frontier_phi_25_50_ladder_2;
        _2128 = frontier_phi_25_50_ladder_1;
        _2130 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2110 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1106, _1107, _1108), _2037);
        _2126 = _2110.x * cbModelParam._m0[1u].z;
        _2128 = _2110.y * cbModelParam._m0[1u].z;
        _2130 = _2110.z * cbModelParam._m0[1u].z;
    }
    float _2143 = (((_1133 * _1082) + _1134) * _1098) * ((cbModelParam._m0[1u].w * (_2126 - _2028)) + _2028);
    float _2145 = (((_1133 * _1084) + _1134) * _1098) * ((cbModelParam._m0[1u].w * (_2128 - _2030)) + _2030);
    float _2147 = (((_1133 * _1085) + _1134) * _1098) * ((cbModelParam._m0[1u].w * (_2130 - _2032)) + _2032);
    float _2150 = fma(_2147, cbSceneParam._m0[89u].z, fma(_2145, cbSceneParam._m0[89u].y, _2143 * cbSceneParam._m0[89u].x));
    float _2153 = fma(_2147, cbSceneParam._m0[90u].z, fma(_2145, cbSceneParam._m0[90u].y, _2143 * cbSceneParam._m0[90u].x));
    float _2156 = fma(_2147, cbSceneParam._m0[91u].z, fma(_2145, cbSceneParam._m0[91u].y, _2143 * cbSceneParam._m0[91u].x));
    float _2190 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2198 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2203 = _2190 / _2202;
    float _2204 = _2194 / _2202;
    float _2205 = _2198 / _2202;
    float _2352;
    float _2353;
    float _2354;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2232 = ((uint(_2205 > cbSceneParam._m0[59u].y) + uint(_2205 > cbSceneParam._m0[59u].x)) + uint(_2205 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2233 = _2232 + 43u;
        uint _2241 = _2232 + 44u;
        uint _2249 = _2232 + 45u;
        uint _2257 = _2232 + 46u;
        float _2268 = fma(_2202, cbSceneParam._m0[_2233].w, fma(_2198, cbSceneParam._m0[_2233].z, fma(_2194, cbSceneParam._m0[_2233].y, _2190 * cbSceneParam._m0[_2233].x)));
        float _2272 = fma(_2202, cbSceneParam._m0[_2241].w, fma(_2198, cbSceneParam._m0[_2241].z, fma(_2194, cbSceneParam._m0[_2241].y, _2190 * cbSceneParam._m0[_2241].x)));
        float _2280 = fma(_2202, cbSceneParam._m0[_2257].w, fma(_2198, cbSceneParam._m0[_2257].z, fma(_2194, cbSceneParam._m0[_2257].y, _2190 * cbSceneParam._m0[_2257].x)));
        float _2285 = cbSceneParam._m0[33u].z * _2280;
        float _2287 = cbSceneParam._m0[33u].w * _2280;
        float _2290 = fma(_2202, cbSceneParam._m0[_2249].w, fma(_2198, cbSceneParam._m0[_2249].z, fma(_2194, cbSceneParam._m0[_2249].y, _2190 * cbSceneParam._m0[_2249].x))) / _2280;
        float _2338 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
        float _4772 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2345 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2285 + _2268) / _2280, (_2287 + _2272) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2287 + _2268) / _2280, (_2272 - _2285) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2285) / _2280, (_2272 - _2287) / _2280), _2290), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2268 - _2287) / _2280, (_2285 + _2272) / _2280), _2290), 0.0)).x), vec4(0.25)));
        _2352 = 1.0 - (_2345 * cbSceneParam._m0[34u].x);
        _2353 = 1.0 - (_2345 * cbSceneParam._m0[34u].y);
        _2354 = 1.0 - (_2345 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2352 = 1.0;
        _2353 = 1.0;
        _2354 = 1.0;
    }
    float _2418;
    float _2420;
    float _2422;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2406 = fma(_2202, cbSceneParam._m0[63u].w, fma(_2198, cbSceneParam._m0[63u].z, fma(_2194, cbSceneParam._m0[63u].y, _2190 * cbSceneParam._m0[63u].x)));
        float _2407 = fma(_2202, cbSceneParam._m0[60u].w, fma(_2198, cbSceneParam._m0[60u].z, fma(_2194, cbSceneParam._m0[60u].y, _2190 * cbSceneParam._m0[60u].x))) / _2406;
        float _2408 = fma(_2202, cbSceneParam._m0[61u].w, fma(_2198, cbSceneParam._m0[61u].z, fma(_2194, cbSceneParam._m0[61u].y, _2190 * cbSceneParam._m0[61u].x))) / _2406;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2407 >= cbSceneParam._m0[64u].x) && (_2408 >= cbSceneParam._m0[64u].y)) && (_2407 <= cbSceneParam._m0[64u].z)) && (_2408 <= cbSceneParam._m0[64u].w))
        {
            float _2546 = fma(_2202, cbSceneParam._m0[62u].w, fma(_2198, cbSceneParam._m0[62u].z, fma(_2194, cbSceneParam._m0[62u].y, _2190 * cbSceneParam._m0[62u].x))) / _2406;
            float _2550 = isnan(cbSceneParam._m0[41u].w) ? _2546 : (isnan(_2546) ? cbSceneParam._m0[41u].w : max(_2546, cbSceneParam._m0[41u].w));
            float _2593 = (cbSceneParam._m0[33u].x - sqrt(((_2204 * _2204) + (_2203 * _2203)) + (_2205 * _2205))) * cbSceneParam._m0[33u].y;
            float _4788 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
            float _2600 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2407, cbSceneParam._m0[33u].w + _2408), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2407, _2408 - cbSceneParam._m0[33u].z), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].z, _2408 - cbSceneParam._m0[33u].w), _2550), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2407 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2408), _2550), 0.0)).x), vec4(0.25)));
            float _2604 = 1.0 - (_2600 * cbSceneParam._m0[34u].x);
            float _2605 = 1.0 - (_2600 * cbSceneParam._m0[34u].y);
            float _2606 = 1.0 - (_2600 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2606) ? _2354 : (isnan(_2354) ? _2606 : min(_2354, _2606));
            frontier_phi_37_36_ladder_1 = isnan(_2605) ? _2353 : (isnan(_2353) ? _2605 : min(_2353, _2605));
            frontier_phi_37_36_ladder_2 = isnan(_2604) ? _2352 : (isnan(_2352) ? _2604 : min(_2352, _2604));
        }
        else
        {
            frontier_phi_37_36_ladder = _2354;
            frontier_phi_37_36_ladder_1 = _2353;
            frontier_phi_37_36_ladder_2 = _2352;
        }
        _2418 = frontier_phi_37_36_ladder_2;
        _2420 = frontier_phi_37_36_ladder_1;
        _2422 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2418 = _2352;
        _2420 = _2353;
        _2422 = _2354;
    }
    uvec4 _2427 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2429 = _2427.x * 14u;
    uint _2430 = _2429 + 13u;
    float _2437 = _1098 + (-1.0);
    float _2442 = (cbLight._m0[_2430].x * _2437) + 1.0;
    float _2443 = (cbLight._m0[_2430].y * _2437) + 1.0;
    float _2444 = (cbLight._m0[_2430].z * _2437) + 1.0;
    float _2445 = (cbLight._m0[_2430].w * _2437) + 1.0;
    uint _2446 = _2429 + 5u;
    float _2452 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2456 = _2429 + 4u;
    float _2465 = isnan(1.0) ? _2442 : (isnan(_2442) ? 1.0 : min(_2442, 1.0));
    uint _2469 = _2429 | 1u;
    float _2480 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_921, _922, _923));
    float _2483 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_921, _922, _923));
    float _4824 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _4835 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2488 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * 0.3183098733425140380859375;
    float _2490 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * 0.3183098733425140380859375;
    float _2497 = ((cbLight._m0[_2446].x * _2452) * _2490) + (((cbLight._m0[_2456].x * _2418) * _2465) * _2488);
    float _2498 = ((_2452 * cbLight._m0[_2446].y) * _2490) + (((cbLight._m0[_2456].y * _2420) * _2465) * _2488);
    float _2499 = ((_2452 * cbLight._m0[_2446].z) * _2490) + (((cbLight._m0[_2456].z * _2422) * _2465) * _2488);
    uvec4 _2503 = floatBitsToUint(cbLight._m0[_2429 + 12u]);
    bool _2505 = _2503.x == 0u;
    float _2607;
    float _2609;
    float _2611;
    if (_2505)
    {
        _2607 = _2497;
        _2609 = _2498;
        _2611 = _2499;
    }
    else
    {
        uint _2615 = _2429 + 6u;
        float _2631 = (dot(vec3(cbLight._m0[_2429 + 2u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2632 = _2631 * _2631;
        float _4846 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2633 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2634 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2607 = (((cbLight._m0[_2615].x * 0.3183098733425140380859375) * _2633) * _2634) + _2497;
        _2609 = (((cbLight._m0[_2615].y * 0.3183098733425140380859375) * _2633) * _2634) + _2498;
        _2611 = (((cbLight._m0[_2615].z * 0.3183098733425140380859375) * _2633) * _2634) + _2499;
    }
    bool _2614 = _2503.y == 0u;
    float _2669;
    float _2671;
    float _2673;
    if (_2614)
    {
        _2669 = _2607;
        _2671 = _2609;
        _2673 = _2611;
    }
    else
    {
        uint _2842 = _2429 + 7u;
        float _2858 = (dot(vec3(cbLight._m0[_2429 + 3u].xyz), vec3(_921, _922, _923)) * 0.5) + 0.5;
        float _2859 = _2858 * _2858;
        float _4862 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2860 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2861 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2669 = (((cbLight._m0[_2842].x * 0.3183098733425140380859375) * _2860) * _2861) + _2607;
        _2671 = (((cbLight._m0[_2842].y * 0.3183098733425140380859375) * _2860) * _2861) + _2609;
        _2673 = (((cbLight._m0[_2842].z * 0.3183098733425140380859375) * _2860) * _2861) + _2611;
    }
    uint _2676 = _2429 + 8u;
    float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _924) * 0.949999988079071044921875);
    float _2690 = _2689 * _2689;
    float _2691 = cbLight._m0[_2429].x + _1000;
    float _2692 = cbLight._m0[_2429].y + _1001;
    float _2693 = cbLight._m0[_2429].z + _1002;
    float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
    float _2698 = _2697 * _2691;
    float _2699 = _2697 * _2692;
    float _2700 = _2697 * _2693;
    float _2701 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2429].xyz));
    float _4878 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
    float _2704 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
    float _4889 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _2705 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
    float _2706 = dot(vec3(_921, _922, _923), vec3(_2698, _2699, _2700));
    float _4900 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2709 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
    float _2710 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2698, _2699, _2700));
    float _4911 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2714 = _2690 * _2690;
    float _2718 = ((_2709 * _2709) * (_2714 + (-1.0))) + 1.0;
    float _2726 = exp2(log2(1.0 - (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) * 5.0);
    float _2727 = 0.959999978542327880859375 - _1079;
    float _2729 = 0.959999978542327880859375 - _1080;
    float _2730 = 0.959999978542327880859375 - _1081;
    float _2737 = 1.0 - _2690;
    float _2748 = (0.5 / (((_2705 * ((_2704 * _2737) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2737) + _2690) * _2704))) * _2704;
    float _4922 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
    float _2750 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2714 / ((_2718 * _2718) * 3.141590118408203125));
    uint _2764 = _2429 + 9u;
    float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2469].w)) * _924) * 0.949999988079071044921875);
    float _2776 = _2775 * _2775;
    float _2777 = cbLight._m0[_2469].x + _1000;
    float _2778 = cbLight._m0[_2469].y + _1001;
    float _2779 = cbLight._m0[_2469].z + _1002;
    float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
    float _2784 = _2783 * _2777;
    float _2785 = _2783 * _2778;
    float _2786 = _2783 * _2779;
    float _2787 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2469].xyz));
    float _4933 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
    float _2790 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
    float _2791 = dot(vec3(_921, _922, _923), vec3(_2784, _2785, _2786));
    float _4944 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
    float _2794 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
    float _2795 = dot(vec3(cbLight._m0[_2469].xyz), vec3(_2784, _2785, _2786));
    float _4955 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
    float _2799 = _2776 * _2776;
    float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
    float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0)))) * 5.0);
    float _2817 = 1.0 - _2776;
    float _2827 = (0.5 / (((_2705 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2817) + _2776) * _2790))) * _2790;
    float _4966 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2829 = (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
    float _2839 = (((((_2810 * _2727) + _1082) * cbLight._m0[_2764].x) * _2829) * _2452) + ((((cbLight._m0[_2676].x * _2418) * ((_2726 * _2727) + _1082)) * _2750) * _2465);
    float _2840 = (((((_2810 * _2729) + _1084) * cbLight._m0[_2764].y) * _2829) * _2452) + ((((cbLight._m0[_2676].y * _2420) * ((_2726 * _2729) + _1084)) * _2750) * _2465);
    float _2841 = (((((_2810 * _2730) + _1085) * cbLight._m0[_2764].z) * _2829) * _2452) + ((((cbLight._m0[_2676].z * _2422) * ((_2726 * _2730) + _1085)) * _2750) * _2465);
    float _2897;
    float _2899;
    float _2901;
    if (_2505)
    {
        _2897 = _2839;
        _2899 = _2840;
        _2901 = _2841;
    }
    else
    {
        uint _2903 = _2429 + 2u;
        uint _2907 = _2429 + 10u;
        float _2921 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2903].w)) * _924) * 0.949999988079071044921875);
        float _2922 = _2921 * _2921;
        float _2923 = cbLight._m0[_2903].x + _1000;
        float _2924 = cbLight._m0[_2903].y + _1001;
        float _2925 = cbLight._m0[_2903].z + _1002;
        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
        float _2930 = _2929 * _2923;
        float _2931 = _2929 * _2924;
        float _2932 = _2929 * _2925;
        float _2933 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_2903].xyz));
        float _4977 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
        float _2937 = dot(vec3(_921, _922, _923), vec3(_2930, _2931, _2932));
        float _4988 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2940 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _2941 = dot(vec3(cbLight._m0[_2903].xyz), vec3(_2930, _2931, _2932));
        float _4999 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        float _2945 = _2922 * _2922;
        float _2949 = ((_2940 * _2940) * (_2945 + (-1.0))) + 1.0;
        float _2956 = exp2(log2(1.0 - (isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0)))) * 5.0);
        float _2963 = 1.0 - _2922;
        float _2973 = (0.5 / (((_2705 * ((_2936 * _2963) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _2963) + _2922) * _2936))) * _2936;
        float _5010 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2975 = (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0))) * (_2945 / ((_2949 * _2949) * 3.141590118408203125));
        float _2976 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
        _2897 = (((((_2956 * _2727) + _1082) * cbLight._m0[_2907].x) * _2975) * _2976) + _2839;
        _2899 = (((((_2956 * _2729) + _1084) * cbLight._m0[_2907].y) * _2975) * _2976) + _2840;
        _2901 = (((((_2956 * _2730) + _1085) * cbLight._m0[_2907].z) * _2975) * _2976) + _2841;
    }
    float _3007;
    float _3009;
    float _3011;
    if (_2614)
    {
        _3007 = _2897;
        _3009 = _2899;
        _3011 = _2901;
    }
    else
    {
        uint _3018 = _2429 + 3u;
        uint _3022 = _2429 + 11u;
        float _3036 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3018].w)) * _924) * 0.949999988079071044921875);
        float _3037 = _3036 * _3036;
        float _3038 = cbLight._m0[_3018].x + _1000;
        float _3039 = cbLight._m0[_3018].y + _1001;
        float _3040 = cbLight._m0[_3018].z + _1002;
        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
        float _3045 = _3044 * _3038;
        float _3046 = _3044 * _3039;
        float _3047 = _3044 * _3040;
        float _3048 = dot(vec3(_921, _922, _923), vec3(cbLight._m0[_3018].xyz));
        float _5026 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
        float _3051 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
        float _3052 = dot(vec3(_921, _922, _923), vec3(_3045, _3046, _3047));
        float _5037 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
        float _3055 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
        float _3056 = dot(vec3(cbLight._m0[_3018].xyz), vec3(_3045, _3046, _3047));
        float _5048 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0));
        float _3060 = _3037 * _3037;
        float _3064 = ((_3055 * _3055) * (_3060 + (-1.0))) + 1.0;
        float _3071 = exp2(log2(1.0 - (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0)))) * 5.0);
        float _3078 = 1.0 - _3037;
        float _3088 = (0.5 / (((_2705 * ((_3051 * _3078) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_2705 * _3078) + _3037) * _3051))) * _3051;
        float _5059 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        float _3090 = (isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3060 / ((_3064 * _3064) * 3.141590118408203125));
        float _3091 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _3007 = (((((_3071 * _2727) + _1082) * cbLight._m0[_3022].x) * _3090) * _3091) + _2897;
        _3009 = (((((_3071 * _2729) + _1084) * cbLight._m0[_3022].y) * _3090) * _3091) + _2899;
        _3011 = (((((_3071 * _2730) + _1085) * cbLight._m0[_3022].z) * _3090) * _3091) + _2901;
    }
    float _3157;
    float _3159;
    float _3161;
    float _3163;
    float _3165;
    float _3167;
    if (_2427.y == 0u)
    {
        uvec4 _3112 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3113 = _3112.x;
        uint _3124 = uint((float(_3112.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1021) / _3113))) + floor(float(uint(cbSceneParam._m0[85u].x * _1020) / _3113)));
        float _3134 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3135 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
        uint _3138 = uint(isnan(14.0) ? _3135 : (isnan(_3135) ? 14.0 : min(_3135, 14.0)));
        uvec4 _3143 = texelFetch(g_lightClusterGridBuffer, int(((_3138 << 2u) + (_3124 << 6u)) >> 2u));
        uint _3144 = _3143.x;
        uint _3145 = _3112.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3145 >> 4u) & 15u)) + 4294967295u) & _3144) == 0u) || ((_3145 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3376 = 0.0;
            float _3377 = 0.0;
            float _3378 = 0.0;
            float _3379 = 0.0;
            float _3380 = 0.0;
            float _3381 = 0.0;
            uint _3382 = 0u;
            uint _3391;
            bool _3392;
            for (;;)
            {
                _3391 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3382 << 2u)) >> 2u)).x;
                _3392 = _3391 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3392)
                {
                    frontier_phi_71_pred = _3381;
                    frontier_phi_71_pred_1 = _3380;
                    frontier_phi_71_pred_2 = _3379;
                    frontier_phi_71_pred_3 = _3378;
                    frontier_phi_71_pred_4 = _3377;
                    frontier_phi_71_pred_5 = _3376;
                }
                else
                {
                    float _3521;
                    float _3522;
                    float _3523;
                    float _3524;
                    float _3525;
                    float _3526;
                    uint _3527;
                    _3521 = _3376;
                    _3522 = _3377;
                    _3523 = _3378;
                    _3524 = _3379;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3391;
                    float _3448;
                    float _3449;
                    float _3450;
                    float _3451;
                    float _3452;
                    float _3453;
                    for (;;)
                    {
                        uint _3531 = uint(findLSB(_3527)) + (_3382 << 5u);
                        uint _3528 = (_3527 + 4294967295u) & _3527;
                        uint _3533 = _3531 * 48u;
                        vec4 _3547 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3533)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3533 + 3u)).x));
                        uint _3553 = (_3531 * 48u) + 4u;
                        vec4 _3566 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3553)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3553 + 3u)).x));
                        uint _3572 = (_3531 * 48u) + 8u;
                        vec3 _3583 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3572)).x, texelFetch(g_PointLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3572 + 2u)).x));
                        float _3587 = _3547.x - _2203;
                        float _3588 = _3547.y - _2204;
                        float _3589 = _3547.z - _2205;
                        float _3590 = dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589));
                        float _3593 = inversesqrt(_3590);
                        float _3594 = _3593 * _3587;
                        float _3595 = _3593 * _3588;
                        float _3596 = _3593 * _3589;
                        float _3597 = dot(vec3(_1039, _1042, _1045), vec3(_3594, _3595, _3596));
                        float _3602 = 1.0 - (_3590 * _3547.w);
                        float _5085 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3603 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3604 = sqrt(_3590) * _3566.w;
                        float _3607 = 1.39999997615814208984375 / (_3604 + 1.39999997615814208984375);
                        float _3608 = _3607 * _3607;
                        float _3611 = ((1.0 - _3608) * _3597) + _3608;
                        float _3614 = _3604 * _3604;
                        float _3618 = ((isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0))) * _3603) / ((_3614 * 0.699999988079071044921875) + 1.0);
                        float _3622 = (-0.0) - _2203;
                        float _3623 = (-0.0) - _2204;
                        float _3624 = (-0.0) - _2205;
                        float _3628 = inversesqrt(dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624)));
                        float _3629 = _3628 * _3622;
                        float _3630 = _3628 * _3623;
                        float _3631 = _3628 * _3624;
                        float _3638 = exp2(log2(1.0 / ((_3614 * 3.5) + 5.0)) * 0.25);
                        float _3639 = 1.0 - _1114;
                        float _3646 = sqrt(1.0 - ((1.0 - (_3639 * _3639)) * (1.0 - (_3638 * _3638))));
                        float _3647 = _3646 * _3646;
                        float _3648 = _3647 * _3647;
                        float _3649 = _3629 + _3594;
                        float _3650 = _3630 + _3595;
                        float _3651 = _3631 + _3596;
                        float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                        float _3659 = dot(vec3(_1039, _1042, _1045), vec3(_3629, _3630, _3631));
                        float _5101 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                        float _3662 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
                        float _3663 = dot(vec3(_1039, _1042, _1045), vec3(_3655 * _3649, _3655 * _3650, _3655 * _3651));
                        float _5112 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                        float _3666 = isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0));
                        float _3670 = ((_3666 * _3666) * (_3648 + (-1.0))) + 1.0;
                        float _3671 = _3607 * _3647;
                        float _3672 = _3671 * _3671;
                        float _3675 = ((1.0 - _3672) * _3597) + _3672;
                        float _5123 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                        float _3676 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                        float _3677 = 1.0 - _3647;
                        float _3687 = (0.5 / (((_3676 * ((_3662 * _3677) + _3647)) + 9.9999999392252902907785028219223e-09) + (((_3676 * _3677) + _3647) * _3662))) * _3676;
                        float _5134 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                        float _3698 = (((_3648 * 3.1415927410125732421875) * (isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0)))) / ((_3670 * _3670) * ((_3614 * 2.1991131305694580078125) + 3.141590118408203125))) * _3603;
                        _3451 = (_3618 * _3566.x) + _3524;
                        _3452 = (_3618 * _3566.y) + _3525;
                        _3453 = (_3618 * _3566.z) + _3526;
                        _3448 = (_3698 * _3583.x) + _3521;
                        _3449 = (_3698 * _3583.y) + _3522;
                        _3450 = (_3698 * _3583.z) + _3523;
                        if (_3528 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3521 = _3448;
                            _3522 = _3449;
                            _3523 = _3450;
                            _3524 = _3451;
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3528;
                        }
                    }
                    frontier_phi_71_pred = _3453;
                    frontier_phi_71_pred_1 = _3452;
                    frontier_phi_71_pred_2 = _3451;
                    frontier_phi_71_pred_3 = _3450;
                    frontier_phi_71_pred_4 = _3449;
                    frontier_phi_71_pred_5 = _3448;
                }
                _3235 = frontier_phi_71_pred;
                _3233 = frontier_phi_71_pred_1;
                _3231 = frontier_phi_71_pred_2;
                _3229 = frontier_phi_71_pred_3;
                _3227 = frontier_phi_71_pred_4;
                _3225 = frontier_phi_71_pred_5;
                uint _3383 = _3382 + 1u;
                if (_3383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3376 = _3225;
                    _3377 = _3227;
                    _3378 = _3229;
                    _3379 = _3231;
                    _3380 = _3233;
                    _3381 = _3235;
                    _3382 = _3383;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3344;
        float _3346;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        if (((4294967295u << _3241) & _3144) == 0u)
        {
            _3344 = _3224;
            _3346 = _3226;
            _3348 = _3228;
            _3350 = _3230;
            _3352 = _3232;
            _3354 = _3234;
        }
        else
        {
            float _3369 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _3370 = _3369 * _2203;
            float _3371 = _3369 * _2204;
            float _3372 = _3369 * _2205;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3345;
                float _3347;
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3504 = _3224;
                float _3505 = _3226;
                float _3506 = _3228;
                float _3507 = _3230;
                float _3508 = _3232;
                float _3509 = _3234;
                uint _3510 = _3241;
                uint _3519;
                bool _3520;
                for (;;)
                {
                    _3519 = texelFetch(g_lightClassification, int((((_3138 << 5u) + (_3124 << 9u)) + (_3510 << 2u)) >> 2u)).x;
                    _3520 = _3519 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3520)
                    {
                        frontier_phi_82_pred = _3509;
                        frontier_phi_82_pred_1 = _3508;
                        frontier_phi_82_pred_2 = _3507;
                        frontier_phi_82_pred_3 = _3506;
                        frontier_phi_82_pred_4 = _3505;
                        frontier_phi_82_pred_5 = _3504;
                    }
                    else
                    {
                        float _3712;
                        float _3713;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _4005;
                        float _4006;
                        float _4007;
                        float _4008;
                        float _4009;
                        float _4010;
                        float _3725 = _3504;
                        float _3726 = _3505;
                        float _3727 = _3506;
                        float _3728 = _3507;
                        float _3729 = _3508;
                        float _3730 = _3509;
                        uint _3731 = _3519;
                        uint _3732;
                        vec4 _3757;
                        float _3758;
                        vec4 _3773;
                        vec3 _3785;
                        vec4 _3800;
                        vec4 _3815;
                        float _3861;
                        bool _3862;
                        for (;;)
                        {
                            uint _3742 = ((_3510 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3731));
                            _3732 = (_3731 + 4294967295u) & _3731;
                            uint _3744 = _3742 * 40u;
                            _3757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3744 + 3u)).x));
                            _3758 = _3757.w;
                            uint _3760 = (_3742 * 40u) + 4u;
                            _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            uint _3775 = (_3742 * 40u) + 8u;
                            _3785 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x));
                            uint _3787 = (_3742 * 40u) + 16u;
                            _3800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3787 + 3u)).x));
                            uint _3802 = (_3742 * 40u) + 20u;
                            _3815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 3u)).x));
                            uint _3817 = (_3742 * 40u) + 24u;
                            vec4 _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            uint _3836 = (_3742 * 40u) + 28u;
                            vec4 _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            _3861 = fma(_2205, _3849.z, fma(_2204, _3849.y, _3849.x * _2203)) + _3849.w;
                            _3862 = !((fma(_2205, _3830.z, fma(_2204, _3830.y, _3830.x * _2203)) + _3830.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3862)
                            {
                                float _3889 = _3757.x - _2203;
                                float _3890 = _3757.y - _2204;
                                float _3891 = _3757.z - _2205;
                                float _3892 = dot(vec3(_3889, _3890, _3891), vec3(_3889, _3890, _3891));
                                float _3895 = inversesqrt(_3892);
                                float _3896 = _3895 * _3889;
                                float _3897 = _3895 * _3890;
                                float _3898 = _3895 * _3891;
                                float _3902 = 1.0 - (_3892 / (_3758 * _3758));
                                float _5145 = isnan(0.0) ? _3902 : (isnan(_3902) ? 0.0 : max(_3902, 0.0));
                                float _3903 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3907 = sqrt(_3892) * _3773.w;
                                float _3909 = 1.39999997615814208984375 / (_3907 + 1.39999997615814208984375);
                                float _3910 = _3909 * _3909;
                                float _3913 = ((1.0 - _3910) * dot(vec3(_3896, _3897, _3898), vec3(_1039, _1042, _1045))) + _3910;
                                float _3916 = _3907 * _3907;
                                float _3920 = (fma(_2205, _3800.z, fma(_2204, _3800.y, _3800.x * _2203)) + _3800.w) / _3861;
                                float _3921 = (fma(_2205, _3815.z, fma(_2204, _3815.y, _3815.x * _2203)) + _3815.w) / _3861;
                                float _3925 = 1.0 - dot(vec2(_3920, _3921), vec2(_3920, _3921));
                                float _5161 = isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0));
                                float _3926 = isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0));
                                float _3927 = _3926 * (((isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0))) * _3903) / ((_3916 * 0.699999988079071044921875) + 1.0));
                                float _3939 = exp2(log2(1.0 / ((_3916 * 3.5) + 5.0)) * 0.25);
                                float _3940 = 1.0 - _1114;
                                float _3947 = sqrt(1.0 - ((1.0 - (_3940 * _3940)) * (1.0 - (_3939 * _3939))));
                                float _3948 = _3947 * _3947;
                                float _3949 = _3948 * _3948;
                                float _3950 = _3896 - _3370;
                                float _3951 = _3897 - _3371;
                                float _3952 = _3898 - _3372;
                                float _3956 = inversesqrt(dot(vec3(_3950, _3951, _3952), vec3(_3950, _3951, _3952)));
                                float _3960 = dot(vec3(_1039, _1042, _1045), vec3((-0.0) - _3370, (-0.0) - _3371, (-0.0) - _3372));
                                float _5172 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3963 = isnan(1.0) ? _5172 : (isnan(_5172) ? 1.0 : min(_5172, 1.0));
                                float _3964 = dot(vec3(_1039, _1042, _1045), vec3(_3956 * _3950, _3956 * _3951, _3956 * _3952));
                                float _5183 = isnan(0.0) ? _3964 : (isnan(_3964) ? 0.0 : max(_3964, 0.0));
                                float _3967 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                                float _3971 = ((_3967 * _3967) * (_3949 + (-1.0))) + 1.0;
                                float _3972 = _3909 * _3948;
                                float _3973 = _3972 * _3972;
                                float _3979 = ((1.0 - _3973) * dot(vec3(_1039, _1042, _1045), vec3(_3896, _3897, _3898))) + _3973;
                                float _5194 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3980 = isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0));
                                float _3981 = 1.0 - _3948;
                                float _3991 = (0.5 / (((_3980 * ((_3963 * _3981) + _3948)) + 9.9999999392252902907785028219223e-09) + (((_3980 * _3981) + _3948) * _3963))) * _3980;
                                float _5205 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _4001 = (_3926 * _3903) * (((_3949 * 3.1415927410125732421875) * (isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0)))) / ((_3971 * _3971) * ((_3916 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3927 * _3773.z;
                                frontier_phi_88_pred_1 = _3927 * _3773.y;
                                frontier_phi_88_pred_2 = _3927 * _3773.x;
                                frontier_phi_88_pred_3 = _4001 * _3785.z;
                                frontier_phi_88_pred_4 = _4001 * _3785.y;
                                frontier_phi_88_pred_5 = _4001 * _3785.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4010 = frontier_phi_88_pred;
                            _4009 = frontier_phi_88_pred_1;
                            _4008 = frontier_phi_88_pred_2;
                            _4007 = frontier_phi_88_pred_3;
                            _4006 = frontier_phi_88_pred_4;
                            _4005 = frontier_phi_88_pred_5;
                            _3715 = _4008 + _3728;
                            _3716 = _4009 + _3729;
                            _3717 = _4010 + _3730;
                            _3712 = _4005 + _3725;
                            _3713 = _4006 + _3726;
                            _3714 = _4007 + _3727;
                            if (_3732 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3725 = _3712;
                                _3726 = _3713;
                                _3727 = _3714;
                                _3728 = _3715;
                                _3729 = _3716;
                                _3730 = _3717;
                                _3731 = _3732;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3717;
                        frontier_phi_82_pred_1 = _3716;
                        frontier_phi_82_pred_2 = _3715;
                        frontier_phi_82_pred_3 = _3714;
                        frontier_phi_82_pred_4 = _3713;
                        frontier_phi_82_pred_5 = _3712;
                    }
                    _3355 = frontier_phi_82_pred;
                    _3353 = frontier_phi_82_pred_1;
                    _3351 = frontier_phi_82_pred_2;
                    _3349 = frontier_phi_82_pred_3;
                    _3347 = frontier_phi_82_pred_4;
                    _3345 = frontier_phi_82_pred_5;
                    uint _3511 = _3510 + 1u;
                    if (_3511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3504 = _3345;
                        _3505 = _3347;
                        _3506 = _3349;
                        _3507 = _3351;
                        _3508 = _3353;
                        _3509 = _3355;
                        _3510 = _3511;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3351;
                frontier_phi_63_64_ladder_1 = _3355;
                frontier_phi_63_64_ladder_2 = _3353;
                frontier_phi_63_64_ladder_3 = _3349;
                frontier_phi_63_64_ladder_4 = _3347;
                frontier_phi_63_64_ladder_5 = _3345;
            }
            else
            {
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            _3344 = frontier_phi_63_64_ladder_5;
            _3346 = frontier_phi_63_64_ladder_4;
            _3348 = frontier_phi_63_64_ladder_3;
            _3350 = frontier_phi_63_64_ladder;
            _3352 = frontier_phi_63_64_ladder_2;
            _3354 = frontier_phi_63_64_ladder_1;
        }
        float _3359 = isnan(1.0) ? _1098 : (isnan(_1098) ? 1.0 : min(_1098, 1.0));
        _3157 = (_3359 * _3350) + _2669;
        _3159 = (_3359 * _3352) + _2671;
        _3161 = (_3359 * _3354) + _2673;
        _3163 = ((_3344 * _1082) * _3359) + _3007;
        _3165 = ((_3346 * _1084) * _3359) + _3009;
        _3167 = ((_3348 * _1085) * _3359) + _3011;
    }
    else
    {
        _3157 = _2669;
        _3159 = _2671;
        _3161 = _2673;
        _3163 = _3007;
        _3165 = _3009;
        _3167 = _3011;
    }
    float _5221 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _5232 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _5243 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _3184 = ((isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0))) * (_3157 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1098))) + ((_3163 + ((isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3185 = ((isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0))) * (_3159 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1098))) + ((_3165 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _3186 = ((isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0))) * (_3161 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1098))) + ((_3167 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _3187 = _289 + 6u;
    float _3195 = _1020 / cbSceneParam._m0[86u].x;
    float _3196 = _1021 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _943 : (isnan(_943) ? cbSceneParam._m0[77u].w : min(_943, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    if (_943 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_943) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _943 : min(cbSceneParam._m0[80u].w, _943));
        float _3250 = _3249 / _943;
        float _3261 = _3250 * _993;
        float _3262 = _994 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3264 = _3250 * _995;
        float _3266 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3267 = _3266 + cbSceneParam._m0[79u].w;
        float _3268 = cbSceneParam._m0[79u].w - _3262;
        float _3274 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3264 * _3264));
        float _3277 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3274;
        float _3282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3461;
        if (abs((_3263 - _3266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3461 = ((((_3267 > 0.0) ? exp2(_3282 * _3267) : (2.0 - exp2(_3284 * _3267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3277;
        }
        else
        {
            float _3405 = 1.0 / cbSceneParam._m0[80u].x;
            float _3406 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : max(_3267, _3268));
            float _3407 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : min(_3267, _3268));
            float _3416 = isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : min(_3406, 0.0));
            float _3417 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : min(_3407, 0.0));
            _3461 = ((abs(_3274 / _3263) * cbSceneParam._m0[80u].y) * ((((_3416 - _3417) * 2.0) - ((exp2(_3282 * (isnan(0.0) ? _3406 : (isnan(_3406) ? 0.0 : max(_3406, 0.0)))) - exp2(_3282 * (isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))))) * _3405)) - ((exp2(_3284 * _3416) - exp2(_3284 * _3417)) * _3405))) + (_3277 * cbSceneParam._m0[80u].z);
        }
        vec4 _3463 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3472 = exp2((_3461 * (-1.44269502162933349609375)) * (1.0 - _3463.w));
        float _3473 = log2(_3472);
        float _3489 = log2(_3215);
        _3286 = (exp2(_3489 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3473 * cbSceneParam._m0[78u].x)) * _3463.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3288 = (exp2(_3489 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3473 * cbSceneParam._m0[78u].y)) * _3463.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3290 = (exp2(_3489 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3473 * cbSceneParam._m0[78u].z)) * _3463.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3292 = _3472 * _3215;
    }
    else
    {
        _3286 = _3212;
        _3288 = _3213;
        _3290 = _3214;
        _3292 = _3215;
    }
    bool _3499;
    vec4 _3302;
    vec4 _3324;
    float _3326;
    float _3330;
    float _3331;
    float _3332;
    float _3333;
    bool _3343;
    for (;;)
    {
        _3302 = cbMatDynParam._m0[0u];
        float _3304 = roundEven(_3302.y);
        bool _3305 = _3304 == 3.0;
        float _3306 = log2(_3292);
        float _3313 = exp2(_3306 * cbSceneParam._m0[78u].x) * _3184;
        float _3314 = exp2(_3306 * cbSceneParam._m0[78u].y) * _3185;
        float _3315 = exp2(_3306 * cbSceneParam._m0[78u].z) * _3186;
        float _3322 = _1009 + (-0.5);
        _3324 = cbMtdParam._m0[1u];
        _3326 = _3324.y * _3322;
        float _3329 = (_3304 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3330 = _3329 * (_3305 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3286)));
        _3331 = _3329 * (_3305 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3288)));
        _3332 = _3329 * (_3305 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3290)));
        _3333 = _3322 * 0.999000012874603271484375;
        _3343 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3343)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3333) < 0.5)
            {
                _3499 = true;
                break;
            }
        }
        uint _3440 = _1058 + uint(_3302.w);
        if ((cbInstanceData._m0[_3440].w < 1.0) && ((cbInstanceData._m0[_3440].w + _3333) < 0.5))
        {
            _3499 = true;
            break;
        }
        if ((_3326 + 1.0) < _3324.x)
        {
            _3499 = true;
            break;
        }
        _3499 = false;
        break;
    }
    float _3703;
    if (_3499)
    {
        discard_state = true;
        _3703 = 0.0;
    }
    else
    {
        _3703 = cbInstanceData._m0[_3187].w;
    }
    SV_Target.x = _3330;
    SV_Target.y = _3331;
    SV_Target.z = _3332;
    SV_Target.w = _3703;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
    discard_exit();
}


