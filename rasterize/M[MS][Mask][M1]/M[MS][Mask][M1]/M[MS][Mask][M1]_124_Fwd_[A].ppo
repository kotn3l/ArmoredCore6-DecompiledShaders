#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1620;
float _3998;
float _3999;
float _4000;
float _4001;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _248 = _247 * _239;
    float _249 = _247 * _240;
    float _250 = _247 * _241;
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _255 = _254 * NORMAL.x;
    float _256 = _254 * NORMAL.y;
    float _257 = _254 * NORMAL.z;
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _262 = _261 * TANGENT.x;
    float _263 = _261 * TANGENT.y;
    float _264 = _261 * TANGENT.z;
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4010 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _4021 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _4032 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _344 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _370 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _375 = _370.x * cbMtdParam._m0[11u].x;
    float _376 = _370.y * cbMtdParam._m0[11u].y;
    float _377 = _370.z * cbMtdParam._m0[11u].z;
    vec4 _396 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _415 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _415.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4043 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _489 = (_482 * ((_396.x * cbMtdParam._m0[12u].x) - _375)) + _375;
    float _490 = (_482 * ((_396.y * cbMtdParam._m0[12u].y) - _376)) + _376;
    float _491 = (_482 * ((_396.z * cbMtdParam._m0[12u].z) - _377)) + _377;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _415.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4054 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _562 = (_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489;
    float _563 = (_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490;
    float _564 = (_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491;
    vec4 _583 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _600 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _602 = _600.x;
    float _612 = dot(vec4(_602, _600.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _624 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _415.z) * 2.0) - ((((_602 - _612) * cbMtdParam._m0[23u].w) + _612) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4065 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _625 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _635 = (_344.x * cbMtdParam._m0[9u].x) * ((_625 * ((_583.x * cbMtdParam._m0[14u].x) - _562)) + _562);
    float _636 = (_344.y * cbMtdParam._m0[9u].y) * ((_625 * ((_583.y * cbMtdParam._m0[14u].y) - _563)) + _563);
    float _637 = (_344.z * cbMtdParam._m0[9u].z) * ((_625 * ((_583.z * cbMtdParam._m0[14u].z) - _564)) + _564);
    float _641 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _635;
    float _644 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _636;
    float _647 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _637;
    float _655 = (((_635 - _641) * (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) + _641) * 4.55000019073486328125;
    float _657 = (((_636 - _644) * (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0)))) + _644) * 4.55000019073486328125;
    float _659 = (((_637 - _647) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) + _647) * 4.55000019073486328125;
    vec4 _676 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _701 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _718 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _722 = _718.z;
    float _729 = ((_701.x - _720) * _482) + _720;
    float _730 = ((_701.y - _721) * _482) + _721;
    float _731 = ((_701.z - _722) * _482) + _722;
    vec4 _743 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _754 = ((_743.x - _729) * _555) + _729;
    float _755 = ((_743.y - _730) * _555) + _730;
    float _756 = ((_743.z - _731) * _555) + _731;
    vec4 _768 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _781 = ((_768.z - _756) * _625) + _756;
    float _784 = ((((_768.x - _754) * _625) + _754) * 2.0) + (-1.0);
    float _785 = ((((_768.y - _755) * _625) + _755) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4076 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))));
    vec4 _809 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _821 = (_784 + ((((_676.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_809.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _822 = (_785 + ((((_676.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_809.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _825 = fma(_791, _255, fma(_822, _262, _821 * _248));
    float _828 = fma(_791, _256, fma(_822, _263, _821 * _249));
    float _831 = fma(_791, _257, fma(_822, _264, _821 * _250));
    float _835 = inversesqrt(dot(vec3(_825, _828, _831), vec3(_825, _828, _831)));
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _864 = _862.x;
    float _865 = 1.0 - _864;
    float _873 = (cbMtdParam._m0[19u].x + dot(vec4(_835 * _825, _835 * _828, _835 * _831, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_864 - _865) * cbMtdParam._m0[24u].z) + _865) * cbMtdParam._m0[21u].z);
    float _4087 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _874 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _881 = (_874 * (cbMtdParam._m0[17u].x - _655)) + _655;
    float _882 = (_874 * (cbMtdParam._m0[17u].y - _657)) + _657;
    float _883 = (_874 * (cbMtdParam._m0[17u].z - _659)) + _659;
    vec4 _909 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _911 = _909.x;
    float _928 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _911) * _482) + _911;
    float _945 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _928) * _555) + _928;
    float _963 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _945) * _625) + _945;
    float _967 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _963) * cbMtdParam._m0[19u].z) + _963;
    float _969 = _967 - (_967 * _874);
    float _974 = (((_676.z - _781) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _781;
    float _978 = ((_809.z - _974) * cbMtdParam._m0[19u].w) + _974;
    vec4 _991 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _998 = (_991.x * 2.0) + (-1.0);
    float _999 = (_991.y * 2.0) + (-1.0);
    float _1000 = dot(vec2(_998, _999), vec2(_998, _999));
    float _4098 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
    float _1008 = ((_991.z - _978) * _874) + _978;
    float _1018 = ((sqrt(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) - _791) * _874) + _791;
    float _1021 = (((_998 - _821) * _874) + _821) + (cbMtdParam._m0[21u].x * _821);
    float _1022 = (((_999 - _822) * _874) + _822) + (cbMtdParam._m0[21u].x * _822);
    float _1026 = cbMtdParam._m0[22u].x + _809.w;
    float _1029 = fma(_1018, _255, fma(_1022, _262, _1021 * _248));
    float _1032 = fma(_1018, _256, fma(_1022, _263, _1021 * _249));
    float _1035 = fma(_1018, _257, fma(_1022, _264, _1021 * _250));
    float _1039 = inversesqrt(dot(vec3(_1029, _1032, _1035), vec3(_1029, _1032, _1035)));
    float _1040 = _1039 * _1029;
    float _1041 = _1039 * _1032;
    float _1042 = _1039 * _1035;
    float _4109 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1043 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _4131 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
    float _4142 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _4153 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _4164 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _1048 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1062 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1102 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1112 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1102);
    float _1113 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1102);
    float _1114 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1102);
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1119 = _1112 * _1118;
    float _1120 = _1113 * _1118;
    float _1121 = _1114 * _1118;
    vec4 _1126 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1128 = _1126.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1300 = sqrt(((_1112 * _1112) + (_1113 * _1113)) + (_1114 * _1114));
        float _1306 = (cbMatDynParam._m0[5u].x * _1300) + cbMatDynParam._m0[5u].y;
        float _4175 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1311 = (cbMatDynParam._m0[5u].z * _1300) + cbMatDynParam._m0[5u].w;
        float _4186 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) - _1307)) + _1307) < ((_1128 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1139 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1140 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1158 = fma(_1042, cbSceneParam._m0[5u].z, fma(_1041, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1040));
    float _1161 = fma(_1042, cbSceneParam._m0[6u].z, fma(_1041, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1040));
    float _1164 = fma(_1042, cbSceneParam._m0[7u].z, fma(_1041, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1040));
    uint _1177 = _288 + 9u;
    uint _1178 = _1177 + uint(cbMatDynParam._m0[0u].w);
    float _1184 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0)))) * cbInstanceData._m0[_1178].x;
    float _1185 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * cbInstanceData._m0[_1178].y;
    float _1186 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0)))) * cbInstanceData._m0[_1178].z;
    float _4197 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _4219 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _1190 = 1.0 - _1048;
    float _1191 = _1187 * _1190;
    float _1192 = _1188 * _1190;
    float _1193 = _1189 * _1190;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1048;
    float _1199 = (_1188 + (-0.039999999105930328369140625)) * _1048;
    float _1200 = (_1189 + (-0.039999999105930328369140625)) * _1048;
    float _1201 = _1198 + 0.039999999105930328369140625;
    float _1203 = _1199 + 0.039999999105930328369140625;
    float _1204 = _1200 + 0.039999999105930328369140625;
    vec4 _1213 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1139, cbSceneParam._m0[86u].y * _1140));
    float _1217 = ((isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * TEXCOORD_5.w) * _1213.x;
    float _1218 = dot(vec3(_1040, _1041, _1042), vec3(_1119, _1120, _1121));
    float _1221 = _1218 * 2.0;
    float _1225 = (_1221 * _1040) - _1119;
    float _1226 = (_1221 * _1041) - _1120;
    float _1227 = (_1221 * _1042) - _1121;
    float _1231 = abs(dot(vec3(_1119, _1120, _1121), vec3(_1040, _1041, _1042)));
    float _4230 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1233 = sqrt(_1043);
    float _1246 = exp2((_1233 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1233 * 3.0));
    float _1252 = (1.0 - _1246) * ((_1233 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1253 = _1246 * _1233;
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1289 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1619;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1344 = fma(_1289, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1281));
        float _1348 = fma(_1289, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1281));
        float _1352 = fma(_1289, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1281));
        float _1377 = _1281 + _1040;
        float _1378 = _1285 + _1041;
        float _1379 = _1289 + _1042;
        float _1389 = fma(_1379, cbModelParam._m0[26u].z, fma(_1378, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1377)) - _1344;
        float _1390 = fma(_1379, cbModelParam._m0[27u].z, fma(_1378, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1377)) - _1348;
        float _1391 = fma(_1379, cbModelParam._m0[28u].z, fma(_1378, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1377)) - _1352;
        float _1395 = inversesqrt(dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391)));
        float _1408 = ((_1395 * _1389) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1344 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1409 = ((_1395 * _1390) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1348 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1410 = ((_1395 * _1391) / cbModelParam._m0[34u].z) + ((((((_1352 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1408, _1409, _1410), 0.0);
        float _1447 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1448 = _1447 * (_1413.x + (-0.5));
        float _1449 = _1447 * (_1413.y + (-0.5));
        float _1450 = _1447 * (_1413.z + (-0.5));
        float _1457 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1420.x + (-0.5));
        float _1459 = _1457 * (_1420.y + (-0.5));
        float _1460 = _1457 * (_1420.z + (-0.5));
        float _1467 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1427.x + (-0.5));
        float _1469 = _1467 * (_1427.y + (-0.5));
        float _1470 = _1467 * (_1427.z + (-0.5));
        float _1477 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1434.x + (-0.5));
        float _1479 = _1477 * (_1434.y + (-0.5));
        float _1480 = _1477 * (_1434.z + (-0.5));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = _1448 * 0.5;
        float _1485 = _1458 * 0.5;
        float _1486 = _1468 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1501 = (dot(vec3(_1040, _1041, _1042), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _4256 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1511 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4267 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4278 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * (_1513 + 1.0))) + _1518) * _1481;
        float _1528 = _1449 * 0.5;
        float _1529 = _1459 * 0.5;
        float _1530 = _1469 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_1040, _1041, _1042), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4289 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _4300 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4311 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0))) * (_1555 + 1.0))) + _1560) * _1482;
        float _1570 = _1450 * 0.5;
        float _1571 = _1460 * 0.5;
        float _1572 = _1470 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_1040, _1041, _1042), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4322 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4333 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4344 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0))) * (_1597 + 1.0))) + _1602) * _1483;
        _1619 = _1450;
        _1621 = _1449;
        _1622 = _1448;
        _1623 = _1460;
        _1624 = _1459;
        _1625 = _1458;
        _1626 = _1470;
        _1627 = _1469;
        _1628 = _1468;
        _1629 = _1483;
        _1630 = _1482;
        _1631 = _1481;
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1633 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1634 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1620;
        _1621 = _1620;
        _1622 = _1620;
        _1623 = _1620;
        _1624 = _1620;
        _1625 = _1620;
        _1626 = _1620;
        _1627 = _1620;
        _1628 = _1620;
        _1629 = _1620;
        _1630 = _1620;
        _1631 = _1620;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    float _1937;
    float _1938;
    float _1939;
    float _1940;
    float _1941;
    float _1942;
    float _1943;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1660 = fma(_1289, cbModelParam._m0[30u].z, fma(_1285, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1281));
        float _1664 = fma(_1289, cbModelParam._m0[31u].z, fma(_1285, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1281));
        float _1668 = fma(_1289, cbModelParam._m0[32u].z, fma(_1285, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1281));
        float _1691 = _1281 + _1040;
        float _1692 = _1285 + _1041;
        float _1693 = _1289 + _1042;
        float _1703 = fma(_1693, cbModelParam._m0[30u].z, fma(_1692, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1691)) - _1660;
        float _1704 = fma(_1693, cbModelParam._m0[31u].z, fma(_1692, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1691)) - _1664;
        float _1705 = fma(_1693, cbModelParam._m0[32u].z, fma(_1692, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1691)) - _1668;
        float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
        float _1722 = ((_1709 * _1703) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1660 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1723 = ((_1709 * _1704) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1664 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1724 = ((_1709 * _1705) / cbModelParam._m0[35u].z) + ((((((_1668 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        vec4 _1747 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1722, _1723, _1724), 0.0);
        float _1759 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1760 = _1759 * (_1726.x + (-0.5));
        float _1761 = _1759 * (_1726.y + (-0.5));
        float _1762 = _1759 * (_1726.z + (-0.5));
        float _1769 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1770 = _1769 * (_1733.x + (-0.5));
        float _1771 = _1769 * (_1733.y + (-0.5));
        float _1772 = _1769 * (_1733.z + (-0.5));
        float _1779 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1780 = _1779 * (_1740.x + (-0.5));
        float _1781 = _1779 * (_1740.y + (-0.5));
        float _1782 = _1779 * (_1740.z + (-0.5));
        float _1789 = exp2((_1747.w + (-0.5)) * 20.0) * 2.0;
        float _1790 = _1789 * (_1747.x + (-0.5));
        float _1791 = _1789 * (_1747.y + (-0.5));
        float _1792 = _1789 * (_1747.z + (-0.5));
        float _1793 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
        float _1794 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1795 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1796 = _1760 * 0.5;
        float _1797 = _1770 * 0.5;
        float _1798 = _1780 * 0.5;
        float _1799 = dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798));
        float _1804 = (_1799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1799);
        float _1812 = (dot(vec3(_1040, _1041, _1042), vec3(_1804 * _1796, _1804 * _1797, _1804 * _1798)) + 1.0) * 0.5;
        float _4385 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1821 = sqrt(((_1797 * _1797) + (_1796 * _1796)) + (_1798 * _1798)) / (_1793 + 9.9999997473787516355514526367188e-06);
        float _4396 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _1822 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1823 = _1822 * 2.0;
        float _1827 = (1.0 - _1822) / (_1822 + 1.0);
        float _4407 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1828 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1837 = ((((1.0 - _1828) * (_1823 + 2.0)) * exp2(log2(isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_1823 + 1.0))) + _1828) * _1793;
        float _1838 = _1761 * 0.5;
        float _1839 = _1771 * 0.5;
        float _1840 = _1781 * 0.5;
        float _1841 = dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840));
        float _1846 = (_1841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1841);
        float _1854 = (dot(vec3(_1040, _1041, _1042), vec3(_1846 * _1838, _1846 * _1839, _1846 * _1840)) + 1.0) * 0.5;
        float _4418 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1863 = sqrt(((_1839 * _1839) + (_1838 * _1838)) + (_1840 * _1840)) / (_1794 + 9.9999997473787516355514526367188e-06);
        float _4429 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1865 = _1864 * 2.0;
        float _1869 = (1.0 - _1864) / (_1864 + 1.0);
        float _4440 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1870 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
        float _1879 = ((((1.0 - _1870) * (_1865 + 2.0)) * exp2(log2(isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0))) * (_1865 + 1.0))) + _1870) * _1794;
        float _1880 = _1762 * 0.5;
        float _1881 = _1772 * 0.5;
        float _1882 = _1782 * 0.5;
        float _1883 = dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882));
        float _1888 = (_1883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1883);
        float _1896 = (dot(vec3(_1040, _1041, _1042), vec3(_1888 * _1880, _1888 * _1881, _1888 * _1882)) + 1.0) * 0.5;
        float _4451 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1905 = sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882)) / (_1795 + 9.9999997473787516355514526367188e-06);
        float _4462 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1906 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1907 = _1906 * 2.0;
        float _1911 = (1.0 - _1906) / (_1906 + 1.0);
        float _4473 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
        float _1912 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1921 = ((((1.0 - _1912) * (_1907 + 2.0)) * exp2(log2(isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_1907 + 1.0))) + _1912) * _1795;
        _1929 = _1762;
        _1930 = _1761;
        _1931 = _1760;
        _1932 = _1772;
        _1933 = _1771;
        _1934 = _1770;
        _1935 = _1782;
        _1936 = _1781;
        _1937 = _1780;
        _1938 = _1795;
        _1939 = _1794;
        _1940 = _1793;
        _1941 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)));
        _1942 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)));
        _1943 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0)));
    }
    else
    {
        _1929 = _1620;
        _1930 = _1620;
        _1931 = _1620;
        _1932 = _1620;
        _1933 = _1620;
        _1934 = _1620;
        _1935 = _1620;
        _1936 = _1620;
        _1937 = _1620;
        _1938 = _1620;
        _1939 = _1620;
        _1940 = _1620;
        _1941 = 0.0;
        _1942 = 0.0;
        _1943 = 0.0;
    }
    float _1953 = (cbModelParam._m0[1u].x * (_1941 - _1632)) + _1632;
    float _1954 = (cbModelParam._m0[1u].x * (_1942 - _1633)) + _1633;
    float _1955 = (cbModelParam._m0[1u].x * (_1943 - _1634)) + _1634;
    float _1976 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1979 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1982 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1953));
    float _1997 = _1225 * 0.5;
    float _1998 = _1226 * 0.5;
    float _1999 = _1227 * 0.5;
    float _2000 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1931, _1934, _1937, _1940));
    float _2003 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1930, _1933, _1936, _1939));
    float _2006 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1929, _1932, _1935, _1938));
    float _2040;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2013 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1619, _1623, _1626, _1629));
        float _2017 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1621, _1624, _1627, _1630));
        float _2021 = dot(vec4(_1997, _1998, _1999, 1.0), vec4(_1622, _1625, _1628, _1631));
        float _2028 = dot(vec4(cbModelParam._m0[39u]), vec4(_1997, _1998, _1999, 1.0));
        _2040 = dot(vec3(isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)), isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)), isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2028) ? 0.0 : (isnan(0.0) ? _2028 : max(0.0, _2028))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2040 = 1.0;
    }
    float _2051;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2042 = dot(vec4(cbModelParam._m0[40u]), vec4(_1997, _1998, _1999, 1.0));
        _2051 = dot(vec3(isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0)), isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2042) ? 0.0 : (isnan(0.0) ? _2042 : max(0.0, _2042))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2051 = 1.0;
    }
    float _2055 = (_2051 * cbModelParam._m0[1u].x) + (_2040 * (1.0 - cbModelParam._m0[1u].x));
    float _2065 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1043);
    float _2066 = isnan(_2065) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2065 : min(cbModelParam._m0[25u].z, _2065));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2113 = fma(_1289, cbModelParam._m0[13u].z, fma(_1285, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281)) + cbModelParam._m0[13u].w;
        float _2117 = fma(_1289, cbModelParam._m0[14u].z, fma(_1285, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281)) + cbModelParam._m0[14u].w;
        float _2121 = fma(_1289, cbModelParam._m0[15u].z, fma(_1285, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281)) + cbModelParam._m0[15u].w;
        float _2124 = fma(_1227, cbModelParam._m0[13u].z, fma(_1226, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1225));
        float _2127 = fma(_1227, cbModelParam._m0[14u].z, fma(_1226, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1225));
        float _2130 = fma(_1227, cbModelParam._m0[15u].z, fma(_1226, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1225));
        float _2158;
        if (_2124 > 0.0)
        {
            _2158 = abs((1.0 - _2113) / _2124);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2113 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2158 = frontier_phi_17_15_ladder;
        }
        float _2361;
        if (_2127 > 0.0)
        {
            _2361 = abs((1.0 - _2117) / _2127);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2117 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2361 = frontier_phi_26_22_ladder;
        }
        float _2615;
        if (_2130 > 0.0)
        {
            _2615 = abs((1.0 - _2121) / _2130);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2130 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2121 + 1.0) / _2130);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2615 = frontier_phi_38_33_ladder;
        }
        float _2617 = isnan(_2361) ? _2158 : (isnan(_2158) ? _2361 : min(_2158, _2361));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _2124) + _2113;
        float _2623 = (_2618 * _2127) + _2117;
        float _2624 = (_2618 * _2130) + _2121;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2627 = (-1.0) - _2625;
        float _2629 = _2625 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2624 > _2629) || ((_2624 < _2627) || ((_2623 > _2629) || ((_2623 < _2627) || ((_2622 < _2627) || (_2622 > _2629))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2752 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2624, cbModelParam._m0[9u].z, fma(_2623, cbModelParam._m0[9u].y, _2622 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2624, cbModelParam._m0[10u].z, fma(_2623, cbModelParam._m0[10u].y, _2622 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2624, cbModelParam._m0[11u].z, fma(_2623, cbModelParam._m0[11u].y, _2622 * cbModelParam._m0[11u].x))), _2066);
            frontier_phi_16_38_ladder = _2752.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2752.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2752.x * cbModelParam._m0[1u].y;
        }
        _2146 = frontier_phi_16_38_ladder_2;
        _2148 = frontier_phi_16_38_ladder_1;
        _2150 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2134 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1225, _1226, _1227), _2066);
        _2146 = _2134.x * cbModelParam._m0[1u].y;
        _2148 = _2134.y * cbModelParam._m0[1u].y;
        _2150 = _2134.z * cbModelParam._m0[1u].y;
    }
    float _2154 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1043);
    float _2155 = isnan(_2154) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2154 : min(cbModelParam._m0[25u].w, _2154));
    float _2245;
    float _2247;
    float _2249;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2209 = fma(_1289, cbModelParam._m0[21u].z, fma(_1285, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281)) + cbModelParam._m0[21u].w;
        float _2213 = fma(_1289, cbModelParam._m0[22u].z, fma(_1285, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281)) + cbModelParam._m0[22u].w;
        float _2217 = fma(_1289, cbModelParam._m0[23u].z, fma(_1285, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281)) + cbModelParam._m0[23u].w;
        float _2220 = fma(_1227, cbModelParam._m0[21u].z, fma(_1226, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1225));
        float _2223 = fma(_1227, cbModelParam._m0[22u].z, fma(_1226, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1225));
        float _2226 = fma(_1227, cbModelParam._m0[23u].z, fma(_1226, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1225));
        float _2366;
        if (_2220 > 0.0)
        {
            _2366 = abs((1.0 - _2209) / _2220);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2220 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2209 + 1.0) / _2220);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2366 = frontier_phi_28_24_ladder;
        }
        float _2642;
        if (_2223 > 0.0)
        {
            _2642 = abs((1.0 - _2213) / _2223);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2223 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2213 + 1.0) / _2223);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2642 = frontier_phi_40_35_ladder;
        }
        float _2855;
        if (_2226 > 0.0)
        {
            _2855 = abs((1.0 - _2217) / _2226);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2226 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2217 + 1.0) / _2226);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2855 = frontier_phi_49_46_ladder;
        }
        float _2857 = isnan(_2642) ? _2366 : (isnan(_2366) ? _2642 : min(_2366, _2642));
        float _2858 = isnan(_2855) ? _2857 : (isnan(_2857) ? _2855 : min(_2857, _2855));
        float _2862 = (_2858 * _2220) + _2209;
        float _2863 = (_2858 * _2223) + _2213;
        float _2864 = (_2858 * _2226) + _2217;
        float _2865 = _2858 * 9.9999997473787516355514526367188e-05;
        float _2866 = (-1.0) - _2865;
        float _2868 = _2865 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2864 > _2868) || ((_2864 < _2866) || ((_2863 > _2868) || ((_2863 < _2866) || ((_2862 < _2866) || (_2862 > _2868))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3063 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2864, cbModelParam._m0[17u].z, fma(_2863, cbModelParam._m0[17u].y, _2862 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2864, cbModelParam._m0[18u].z, fma(_2863, cbModelParam._m0[18u].y, _2862 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2864, cbModelParam._m0[19u].z, fma(_2863, cbModelParam._m0[19u].y, _2862 * cbModelParam._m0[19u].x))), _2155);
            frontier_phi_25_49_ladder = _3063.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3063.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3063.x * cbModelParam._m0[1u].z;
        }
        _2245 = frontier_phi_25_49_ladder_2;
        _2247 = frontier_phi_25_49_ladder_1;
        _2249 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2229 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1225, _1226, _1227), _2155);
        _2245 = _2229.x * cbModelParam._m0[1u].z;
        _2247 = _2229.y * cbModelParam._m0[1u].z;
        _2249 = _2229.z * cbModelParam._m0[1u].z;
    }
    float _2262 = (((_1252 * _1201) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2245 - _2146)) + _2146);
    float _2264 = (((_1252 * _1203) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2247 - _2148)) + _2148);
    float _2266 = (((_1252 * _1204) + _1253) * _1217) * ((cbModelParam._m0[1u].w * (_2249 - _2150)) + _2150);
    float _2269 = fma(_2266, cbSceneParam._m0[89u].z, fma(_2264, cbSceneParam._m0[89u].y, _2262 * cbSceneParam._m0[89u].x));
    float _2272 = fma(_2266, cbSceneParam._m0[90u].z, fma(_2264, cbSceneParam._m0[90u].y, _2262 * cbSceneParam._m0[90u].x));
    float _2275 = fma(_2266, cbSceneParam._m0[91u].z, fma(_2264, cbSceneParam._m0[91u].y, _2262 * cbSceneParam._m0[91u].x));
    uvec4 _2285 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2287 = _2285.x * 14u;
    uint _2288 = _2287 + 13u;
    float _2295 = _1217 + (-1.0);
    float _2300 = (cbLight._m0[_2288].x * _2295) + 1.0;
    float _2301 = (cbLight._m0[_2288].y * _2295) + 1.0;
    float _2302 = (cbLight._m0[_2288].z * _2295) + 1.0;
    float _2303 = (cbLight._m0[_2288].w * _2295) + 1.0;
    uint _2304 = _2287 + 5u;
    float _2310 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
    uint _2314 = _2287 + 4u;
    float _2320 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2324 = _2287 | 1u;
    float _2335 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_1040, _1041, _1042));
    float _2338 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_1040, _1041, _1042));
    float _4609 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _4620 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2343 = (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0))) * 0.3183098733425140380859375;
    float _2345 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * 0.3183098733425140380859375;
    float _2352 = ((cbLight._m0[_2304].x * _2310) * _2345) + ((cbLight._m0[_2314].x * _2320) * _2343);
    float _2353 = ((_2310 * cbLight._m0[_2304].y) * _2345) + ((_2320 * cbLight._m0[_2314].y) * _2343);
    float _2354 = ((_2310 * cbLight._m0[_2304].z) * _2345) + ((_2320 * cbLight._m0[_2314].z) * _2343);
    uvec4 _2358 = floatBitsToUint(cbLight._m0[_2287 + 12u]);
    bool _2360 = _2358.x == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2360)
    {
        _2371 = _2352;
        _2373 = _2353;
        _2375 = _2354;
    }
    else
    {
        uint _2379 = _2287 + 6u;
        float _2395 = (dot(vec3(cbLight._m0[_2287 + 2u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4631 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _2398 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2371 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2352;
        _2373 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2353;
        _2375 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2354;
    }
    bool _2378 = _2358.y == 0u;
    float _2416;
    float _2418;
    float _2420;
    if (_2378)
    {
        _2416 = _2371;
        _2418 = _2373;
        _2420 = _2375;
    }
    else
    {
        uint _2586 = _2287 + 7u;
        float _2602 = (dot(vec3(cbLight._m0[_2287 + 3u].xyz), vec3(_1040, _1041, _1042)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4647 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2605 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2416 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2371;
        _2418 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2373;
        _2420 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2375;
    }
    uint _2423 = _2287 + 8u;
    float _2436 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2287].w)) * _1043) * 0.949999988079071044921875);
    float _2437 = _2436 * _2436;
    float _2438 = cbLight._m0[_2287].x + _1119;
    float _2439 = cbLight._m0[_2287].y + _1120;
    float _2440 = cbLight._m0[_2287].z + _1121;
    float _2444 = inversesqrt(dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440)));
    float _2445 = _2444 * _2438;
    float _2446 = _2444 * _2439;
    float _2447 = _2444 * _2440;
    float _2448 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2287].xyz));
    float _4663 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2451 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
    float _4674 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _2452 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
    float _2453 = dot(vec3(_1040, _1041, _1042), vec3(_2445, _2446, _2447));
    float _4685 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2456 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
    float _2457 = dot(vec3(cbLight._m0[_2287].xyz), vec3(_2445, _2446, _2447));
    float _4696 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2461 = _2437 * _2437;
    float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
    float _2473 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
    float _2474 = 0.959999978542327880859375 - _1198;
    float _2476 = 0.959999978542327880859375 - _1199;
    float _2477 = 0.959999978542327880859375 - _1200;
    float _2484 = 1.0 - _2437;
    float _2495 = (0.5 / (((_2452 * ((_2451 * _2484) + _2437)) + 9.9999999392252902907785028219223e-09) + (((_2452 * _2484) + _2437) * _2451))) * _2451;
    float _4707 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2497 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
    uint _2508 = _2287 + 9u;
    float _2519 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2324].w)) * _1043) * 0.949999988079071044921875);
    float _2520 = _2519 * _2519;
    float _2521 = cbLight._m0[_2324].x + _1119;
    float _2522 = cbLight._m0[_2324].y + _1120;
    float _2523 = cbLight._m0[_2324].z + _1121;
    float _2527 = inversesqrt(dot(vec3(_2521, _2522, _2523), vec3(_2521, _2522, _2523)));
    float _2528 = _2527 * _2521;
    float _2529 = _2527 * _2522;
    float _2530 = _2527 * _2523;
    float _2531 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2324].xyz));
    float _4718 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2535 = dot(vec3(_1040, _1041, _1042), vec3(_2528, _2529, _2530));
    float _4729 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2324].xyz), vec3(_2528, _2529, _2530));
    float _4740 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2520 * _2520;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2554 = exp2(log2(1.0 - (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0)))) * 5.0);
    float _2561 = 1.0 - _2520;
    float _2571 = (0.5 / (((_2452 * ((_2534 * _2561) + _2520)) + 9.9999999392252902907785028219223e-09) + (((_2452 * _2561) + _2520) * _2534))) * _2534;
    float _4751 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2573 = (isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    float _2583 = (((((_2554 * _2474) + _1201) * cbLight._m0[_2508].x) * _2573) * _2310) + (((((_2473 * _2474) + _1201) * cbLight._m0[_2423].x) * _2497) * _2320);
    float _2584 = (((((_2554 * _2476) + _1203) * cbLight._m0[_2508].y) * _2573) * _2310) + (((((_2473 * _2476) + _1203) * cbLight._m0[_2423].y) * _2497) * _2320);
    float _2585 = (((((_2554 * _2477) + _1204) * cbLight._m0[_2508].z) * _2573) * _2310) + (((((_2473 * _2477) + _1204) * cbLight._m0[_2423].z) * _2497) * _2320);
    float _2647;
    float _2649;
    float _2651;
    if (_2360)
    {
        _2647 = _2583;
        _2649 = _2584;
        _2651 = _2585;
    }
    else
    {
        uint _2653 = _2287 + 2u;
        uint _2657 = _2287 + 10u;
        float _2671 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2653].w)) * _1043) * 0.949999988079071044921875);
        float _2672 = _2671 * _2671;
        float _2673 = cbLight._m0[_2653].x + _1119;
        float _2674 = cbLight._m0[_2653].y + _1120;
        float _2675 = cbLight._m0[_2653].z + _1121;
        float _2679 = inversesqrt(dot(vec3(_2673, _2674, _2675), vec3(_2673, _2674, _2675)));
        float _2680 = _2679 * _2673;
        float _2681 = _2679 * _2674;
        float _2682 = _2679 * _2675;
        float _2683 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2653].xyz));
        float _4762 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
        float _2687 = dot(vec3(_1040, _1041, _1042), vec3(_2680, _2681, _2682));
        float _4773 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2690 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2691 = dot(vec3(cbLight._m0[_2653].xyz), vec3(_2680, _2681, _2682));
        float _4784 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2695 = _2672 * _2672;
        float _2699 = ((_2690 * _2690) * (_2695 + (-1.0))) + 1.0;
        float _2706 = exp2(log2(1.0 - (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) * 5.0);
        float _2713 = 1.0 - _2672;
        float _2723 = (0.5 / (((_2452 * ((_2686 * _2713) + _2672)) + 9.9999999392252902907785028219223e-09) + (((_2452 * _2713) + _2672) * _2686))) * _2686;
        float _4795 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2725 = (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2695 / ((_2699 * _2699) * 3.141590118408203125));
        float _2726 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2647 = (((((_2706 * _2474) + _1201) * cbLight._m0[_2657].x) * _2725) * _2726) + _2583;
        _2649 = (((((_2706 * _2476) + _1203) * cbLight._m0[_2657].y) * _2725) * _2726) + _2584;
        _2651 = (((((_2706 * _2477) + _1204) * cbLight._m0[_2657].z) * _2725) * _2726) + _2585;
    }
    float _2761;
    float _2763;
    float _2765;
    if (_2378)
    {
        _2761 = _2647;
        _2763 = _2649;
        _2765 = _2651;
    }
    else
    {
        uint _2772 = _2287 + 3u;
        uint _2776 = _2287 + 11u;
        float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2772].w)) * _1043) * 0.949999988079071044921875);
        float _2791 = _2790 * _2790;
        float _2792 = cbLight._m0[_2772].x + _1119;
        float _2793 = cbLight._m0[_2772].y + _1120;
        float _2794 = cbLight._m0[_2772].z + _1121;
        float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
        float _2799 = _2798 * _2792;
        float _2800 = _2798 * _2793;
        float _2801 = _2798 * _2794;
        float _2802 = dot(vec3(_1040, _1041, _1042), vec3(cbLight._m0[_2772].xyz));
        float _4811 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
        float _2805 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
        float _2806 = dot(vec3(_1040, _1041, _1042), vec3(_2799, _2800, _2801));
        float _4822 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
        float _2810 = dot(vec3(cbLight._m0[_2772].xyz), vec3(_2799, _2800, _2801));
        float _4833 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2814 = _2791 * _2791;
        float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
        float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0)))) * 5.0);
        float _2832 = 1.0 - _2791;
        float _2842 = (0.5 / (((_2452 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2452 * _2832) + _2791) * _2805))) * _2805;
        float _4844 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
        float _2844 = (isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
        float _2845 = isnan(1.0) ? _2303 : (isnan(_2303) ? 1.0 : min(_2303, 1.0));
        _2761 = (((((_2825 * _2474) + _1201) * cbLight._m0[_2776].x) * _2844) * _2845) + _2647;
        _2763 = (((((_2825 * _2476) + _1203) * cbLight._m0[_2776].y) * _2844) * _2845) + _2649;
        _2765 = (((((_2825 * _2477) + _1204) * cbLight._m0[_2776].z) * _2844) * _2845) + _2651;
    }
    float _2980;
    float _2982;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_2285.y == 0u)
    {
        float _2920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2920;
        float _2922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2920;
        float _2923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2920;
        uvec4 _2935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2936 = _2935.x;
        uint _2947 = uint((float(_2935.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1140) / _2936))) + floor(float(uint(cbSceneParam._m0[85u].x * _1139) / _2936)));
        float _2957 = (log2(_2923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2958 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
        uint _2961 = uint(isnan(14.0) ? _2958 : (isnan(_2958) ? 14.0 : min(_2958, 14.0)));
        uvec4 _2966 = texelFetch(g_lightClusterGridBuffer, int(((_2961 << 2u) + (_2947 << 6u)) >> 2u));
        uint _2967 = _2966.x;
        uint _2968 = _2935.z;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((((1u << ((_2968 >> 4u) & 15u)) + 4294967295u) & _2967) == 0u) || ((_2968 & 240u) == 0u))
        {
            _3068 = 0.0;
            _3070 = 0.0;
            _3072 = 0.0;
            _3074 = 0.0;
            _3076 = 0.0;
            _3078 = 0.0;
        }
        else
        {
            float _3069;
            float _3071;
            float _3073;
            float _3075;
            float _3077;
            float _3079;
            float _3221 = 0.0;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            uint _3227 = 0u;
            uint _3236;
            bool _3237;
            for (;;)
            {
                _3236 = texelFetch(g_lightClassification, int((((_2961 << 5u) + (_2947 << 9u)) + (_3227 << 2u)) >> 2u)).x;
                _3237 = _3236 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3237)
                {
                    frontier_phi_66_pred = _3221;
                    frontier_phi_66_pred_1 = _3226;
                    frontier_phi_66_pred_2 = _3225;
                    frontier_phi_66_pred_3 = _3224;
                    frontier_phi_66_pred_4 = _3223;
                    frontier_phi_66_pred_5 = _3222;
                }
                else
                {
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    uint _3372;
                    _3366 = _3221;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3236;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    for (;;)
                    {
                        uint _3376 = uint(findLSB(_3372)) + (_3227 << 5u);
                        uint _3373 = (_3372 + 4294967295u) & _3372;
                        uint _3378 = _3376 * 48u;
                        vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3378)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3378 + 3u)).x));
                        uint _3398 = (_3376 * 48u) + 4u;
                        vec4 _3411 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3398)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3398 + 3u)).x));
                        uint _3417 = (_3376 * 48u) + 8u;
                        vec3 _3428 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3417)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3417 + 2u)).x));
                        float _3432 = _3392.x - _2921;
                        float _3433 = _3392.y - _2922;
                        float _3434 = _3392.z - _2923;
                        float _3435 = dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434));
                        float _3438 = inversesqrt(_3435);
                        float _3439 = _3438 * _3432;
                        float _3440 = _3438 * _3433;
                        float _3441 = _3438 * _3434;
                        float _3442 = dot(vec3(_1158, _1161, _1164), vec3(_3439, _3440, _3441));
                        float _3447 = 1.0 - (_3435 * _3392.w);
                        float _4870 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3449 = sqrt(_3435) * _3411.w;
                        float _3452 = 1.39999997615814208984375 / (_3449 + 1.39999997615814208984375);
                        float _3453 = _3452 * _3452;
                        float _3456 = ((1.0 - _3453) * _3442) + _3453;
                        float _3459 = _3449 * _3449;
                        float _3463 = ((isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0))) * _3448) / ((_3459 * 0.699999988079071044921875) + 1.0);
                        float _3467 = (-0.0) - _2921;
                        float _3468 = (-0.0) - _2922;
                        float _3469 = (-0.0) - _2923;
                        float _3473 = inversesqrt(dot(vec3(_3467, _3468, _3469), vec3(_3467, _3468, _3469)));
                        float _3474 = _3473 * _3467;
                        float _3475 = _3473 * _3468;
                        float _3476 = _3473 * _3469;
                        float _3484 = exp2(log2(1.0 / ((_3459 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _1233;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3474 + _3439;
                        float _3496 = _3475 + _3440;
                        float _3497 = _3476 + _3441;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_1158, _1161, _1164), vec3(_3474, _3475, _3476));
                        float _4886 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
                        float _3509 = dot(vec3(_1158, _1161, _1164), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4897 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3452 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3442) + _3518;
                        float _4908 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4919 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0)))) / ((_3516 * _3516) * ((_3459 * 2.1991131305694580078125) + 3.141590118408203125))) * _3448;
                        _3296 = (_3463 * _3411.x) + _3369;
                        _3297 = (_3463 * _3411.y) + _3370;
                        _3298 = (_3463 * _3411.z) + _3371;
                        _3293 = (_3544 * _3428.x) + _3366;
                        _3294 = (_3544 * _3428.y) + _3367;
                        _3295 = (_3544 * _3428.z) + _3368;
                        if (_3373 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3366 = _3293;
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3373;
                        }
                    }
                    frontier_phi_66_pred = _3293;
                    frontier_phi_66_pred_1 = _3298;
                    frontier_phi_66_pred_2 = _3297;
                    frontier_phi_66_pred_3 = _3296;
                    frontier_phi_66_pred_4 = _3295;
                    frontier_phi_66_pred_5 = _3294;
                }
                _3069 = frontier_phi_66_pred;
                _3079 = frontier_phi_66_pred_1;
                _3077 = frontier_phi_66_pred_2;
                _3075 = frontier_phi_66_pred_3;
                _3073 = frontier_phi_66_pred_4;
                _3071 = frontier_phi_66_pred_5;
                uint _3228 = _3227 + 1u;
                if (_3228 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3221 = _3069;
                    _3222 = _3071;
                    _3223 = _3073;
                    _3224 = _3075;
                    _3225 = _3077;
                    _3226 = _3079;
                    _3227 = _3228;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3068 = _3069;
            _3070 = _3071;
            _3072 = _3073;
            _3074 = _3075;
            _3076 = _3077;
            _3078 = _3079;
        }
        uvec4 _3082 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3083 = _3082.z;
        uint _3085 = (_3083 >> 8u) & 15u;
        float _3189;
        float _3191;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        if (((4294967295u << _3085) & _2967) == 0u)
        {
            _3189 = _3068;
            _3191 = _3070;
            _3193 = _3072;
            _3195 = _3074;
            _3197 = _3076;
            _3199 = _3078;
        }
        else
        {
            float _3214 = inversesqrt(dot(vec3(_2921, _2922, _2923), vec3(_2921, _2922, _2923)));
            float _3215 = _3214 * _2921;
            float _3216 = _3214 * _2922;
            float _3217 = _3214 * _2923;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3085 < ((_3083 >> 12u) & 15u))
            {
                float _3190;
                float _3192;
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3349 = _3068;
                float _3350 = _3070;
                float _3351 = _3072;
                float _3352 = _3074;
                float _3353 = _3076;
                float _3354 = _3078;
                uint _3355 = _3085;
                uint _3364;
                bool _3365;
                for (;;)
                {
                    _3364 = texelFetch(g_lightClassification, int((((_2961 << 5u) + (_2947 << 9u)) + (_3355 << 2u)) >> 2u)).x;
                    _3365 = _3364 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3365)
                    {
                        frontier_phi_77_pred = _3354;
                        frontier_phi_77_pred_1 = _3353;
                        frontier_phi_77_pred_2 = _3352;
                        frontier_phi_77_pred_3 = _3351;
                        frontier_phi_77_pred_4 = _3350;
                        frontier_phi_77_pred_5 = _3349;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3571 = _3349;
                        float _3572 = _3350;
                        float _3573 = _3351;
                        float _3574 = _3352;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        uint _3577 = _3364;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3661;
                        float _3707;
                        bool _3708;
                        for (;;)
                        {
                            uint _3588 = ((_3355 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3588 * 40u) + 20u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3663 = (_3588 * 40u) + 24u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            uint _3682 = (_3588 * 40u) + 28u;
                            vec4 _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            _3707 = fma(_2923, _3695.z, fma(_2922, _3695.y, _3695.x * _2921)) + _3695.w;
                            _3708 = !((fma(_2923, _3676.z, fma(_2922, _3676.y, _3676.x * _2921)) + _3676.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3708)
                            {
                                float _3735 = _3603.x - _2921;
                                float _3736 = _3603.y - _2922;
                                float _3737 = _3603.z - _2923;
                                float _3738 = dot(vec3(_3735, _3736, _3737), vec3(_3735, _3736, _3737));
                                float _3741 = inversesqrt(_3738);
                                float _3742 = _3741 * _3735;
                                float _3743 = _3741 * _3736;
                                float _3744 = _3741 * _3737;
                                float _3748 = 1.0 - (_3738 / (_3604 * _3604));
                                float _4930 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3749 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3753 = sqrt(_3738) * _3619.w;
                                float _3755 = 1.39999997615814208984375 / (_3753 + 1.39999997615814208984375);
                                float _3756 = _3755 * _3755;
                                float _3759 = ((1.0 - _3756) * dot(vec3(_3742, _3743, _3744), vec3(_1158, _1161, _1164))) + _3756;
                                float _3762 = _3753 * _3753;
                                float _3766 = (fma(_2923, _3646.z, fma(_2922, _3646.y, _3646.x * _2921)) + _3646.w) / _3707;
                                float _3767 = (fma(_2923, _3661.z, fma(_2922, _3661.y, _3661.x * _2921)) + _3661.w) / _3707;
                                float _3771 = 1.0 - dot(vec2(_3766, _3767), vec2(_3766, _3767));
                                float _4946 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3772 = isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0));
                                float _3773 = _3772 * (((isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0))) * _3749) / ((_3762 * 0.699999988079071044921875) + 1.0));
                                float _3785 = exp2(log2(1.0 / ((_3762 * 3.5) + 5.0)) * 0.25);
                                float _3786 = 1.0 - _1233;
                                float _3793 = sqrt(1.0 - ((1.0 - (_3786 * _3786)) * (1.0 - (_3785 * _3785))));
                                float _3794 = _3793 * _3793;
                                float _3795 = _3794 * _3794;
                                float _3796 = _3742 - _3215;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3802 = inversesqrt(dot(vec3(_3796, _3797, _3798), vec3(_3796, _3797, _3798)));
                                float _3806 = dot(vec3(_1158, _1161, _1164), vec3((-0.0) - _3215, (-0.0) - _3216, (-0.0) - _3217));
                                float _4957 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3809 = isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0));
                                float _3810 = dot(vec3(_1158, _1161, _1164), vec3(_3802 * _3796, _3802 * _3797, _3802 * _3798));
                                float _4968 = isnan(0.0) ? _3810 : (isnan(_3810) ? 0.0 : max(_3810, 0.0));
                                float _3813 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
                                float _3817 = ((_3813 * _3813) * (_3795 + (-1.0))) + 1.0;
                                float _3818 = _3755 * _3794;
                                float _3819 = _3818 * _3818;
                                float _3825 = ((1.0 - _3819) * dot(vec3(_1158, _1161, _1164), vec3(_3742, _3743, _3744))) + _3819;
                                float _4979 = isnan(0.0) ? _3825 : (isnan(_3825) ? 0.0 : max(_3825, 0.0));
                                float _3826 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3827 = 1.0 - _3794;
                                float _3837 = (0.5 / (((_3826 * ((_3809 * _3827) + _3794)) + 9.9999999392252902907785028219223e-09) + (((_3826 * _3827) + _3794) * _3809))) * _3826;
                                float _4990 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3847 = (_3772 * _3749) * (((_3795 * 3.1415927410125732421875) * (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) / ((_3817 * _3817) * ((_3762 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3773 * _3619.y;
                                frontier_phi_83_pred_1 = _3773 * _3619.x;
                                frontier_phi_83_pred_2 = _3847 * _3631.z;
                                frontier_phi_83_pred_3 = _3847 * _3631.y;
                                frontier_phi_83_pred_4 = _3847 * _3631.x;
                                frontier_phi_83_pred_5 = _3773 * _3619.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3855 = frontier_phi_83_pred;
                            _3854 = frontier_phi_83_pred_1;
                            _3853 = frontier_phi_83_pred_2;
                            _3852 = frontier_phi_83_pred_3;
                            _3851 = frontier_phi_83_pred_4;
                            _3856 = frontier_phi_83_pred_5;
                            _3561 = _3854 + _3574;
                            _3562 = _3855 + _3575;
                            _3563 = _3856 + _3576;
                            _3558 = _3851 + _3571;
                            _3559 = _3852 + _3572;
                            _3560 = _3853 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3563;
                        frontier_phi_77_pred_1 = _3562;
                        frontier_phi_77_pred_2 = _3561;
                        frontier_phi_77_pred_3 = _3560;
                        frontier_phi_77_pred_4 = _3559;
                        frontier_phi_77_pred_5 = _3558;
                    }
                    _3200 = frontier_phi_77_pred;
                    _3198 = frontier_phi_77_pred_1;
                    _3196 = frontier_phi_77_pred_2;
                    _3194 = frontier_phi_77_pred_3;
                    _3192 = frontier_phi_77_pred_4;
                    _3190 = frontier_phi_77_pred_5;
                    uint _3356 = _3355 + 1u;
                    if (_3356 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3349 = _3190;
                        _3350 = _3192;
                        _3351 = _3194;
                        _3352 = _3196;
                        _3353 = _3198;
                        _3354 = _3200;
                        _3355 = _3356;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3194;
                frontier_phi_58_59_ladder_1 = _3200;
                frontier_phi_58_59_ladder_2 = _3198;
                frontier_phi_58_59_ladder_3 = _3196;
                frontier_phi_58_59_ladder_4 = _3192;
                frontier_phi_58_59_ladder_5 = _3190;
            }
            else
            {
                frontier_phi_58_59_ladder = _3072;
                frontier_phi_58_59_ladder_1 = _3078;
                frontier_phi_58_59_ladder_2 = _3076;
                frontier_phi_58_59_ladder_3 = _3074;
                frontier_phi_58_59_ladder_4 = _3070;
                frontier_phi_58_59_ladder_5 = _3068;
            }
            _3189 = frontier_phi_58_59_ladder_5;
            _3191 = frontier_phi_58_59_ladder_4;
            _3193 = frontier_phi_58_59_ladder;
            _3195 = frontier_phi_58_59_ladder_3;
            _3197 = frontier_phi_58_59_ladder_2;
            _3199 = frontier_phi_58_59_ladder_1;
        }
        float _3204 = isnan(1.0) ? _1217 : (isnan(_1217) ? 1.0 : min(_1217, 1.0));
        _2980 = (_3204 * _3195) + _2416;
        _2982 = (_3204 * _3197) + _2418;
        _2984 = (_3204 * _3199) + _2420;
        _2986 = ((_3189 * _1201) * _3204) + _2761;
        _2988 = ((_3191 * _1203) * _3204) + _2763;
        _2990 = ((_3193 * _1204) * _3204) + _2765;
    }
    else
    {
        _2980 = _2416;
        _2982 = _2418;
        _2984 = _2420;
        _2986 = _2761;
        _2988 = _2763;
        _2990 = _2765;
    }
    float _5006 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _5017 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _5028 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _3007 = ((isnan(1.0) ? _5006 : (isnan(_5006) ? 1.0 : min(_5006, 1.0))) * (_2980 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1217))) + ((_2986 + ((isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    float _3008 = ((isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0))) * (_2982 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1217))) + ((_2988 + ((isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    float _3009 = ((isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0))) * (_2984 + ((isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0))) * _1217))) + ((_2990 + ((isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0))) * _2055)) * cbPerFrame._m0[3u].x);
    uint _3010 = _288 + 6u;
    float _3018 = _1139 / cbSceneParam._m0[86u].x;
    float _3019 = _1140 / cbSceneParam._m0[86u].y;
    vec4 _3033 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3018, _3019, (log2((isnan(cbSceneParam._m0[77u].w) ? _1062 : (isnan(_1062) ? cbSceneParam._m0[77u].w : min(_1062, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3035 = _3033.x;
    float _3036 = _3033.y;
    float _3037 = _3033.z;
    float _3038 = _3033.w;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_1062 > cbSceneParam._m0[78u].w)
    {
        float _3093 = isnan(_1062) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1062 : min(cbSceneParam._m0[80u].w, _1062));
        float _3094 = _3093 / _1062;
        float _3105 = _3094 * _1112;
        float _3106 = _1113 * _3094;
        float _3107 = (-0.0) - _3106;
        float _3109 = _3094 * _1114;
        float _3111 = (cbSceneParam._m0[77u].w * _3107) / _3093;
        float _3112 = _3111 + cbSceneParam._m0[79u].w;
        float _3113 = cbSceneParam._m0[79u].w - _3106;
        float _3119 = sqrt(((_3105 * _3105) + (_3106 * _3106)) + (_3109 * _3109));
        float _3122 = (1.0 - (cbSceneParam._m0[77u].w / _3093)) * _3119;
        float _3127 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3129 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3306;
        if (abs((_3107 - _3111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3306 = ((((_3112 > 0.0) ? exp2(_3127 * _3112) : (2.0 - exp2(_3129 * _3112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3122;
        }
        else
        {
            float _3250 = 1.0 / cbSceneParam._m0[80u].x;
            float _3251 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : max(_3112, _3113));
            float _3252 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : min(_3112, _3113));
            float _3261 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : min(_3251, 0.0));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            _3306 = ((abs(_3119 / _3107) * cbSceneParam._m0[80u].y) * ((((_3261 - _3262) * 2.0) - ((exp2(_3127 * (isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0)))) - exp2(_3127 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0))))) * _3250)) - ((exp2(_3129 * _3261) - exp2(_3129 * _3262)) * _3250))) + (_3122 * cbSceneParam._m0[80u].z);
        }
        vec4 _3308 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3018, _3019, 1.0), 0.0);
        float _3317 = exp2((_3306 * (-1.44269502162933349609375)) * (1.0 - _3308.w));
        float _3318 = log2(_3317);
        float _3334 = log2(_3038);
        _3131 = (exp2(_3334 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].x)) * _3308.x) / cbSceneParam._m0[78u].x)) + _3035;
        _3133 = (exp2(_3334 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].y)) * _3308.y) / cbSceneParam._m0[78u].y)) + _3036;
        _3135 = (exp2(_3334 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3318 * cbSceneParam._m0[78u].z)) * _3308.z) / cbSceneParam._m0[78u].z)) + _3037;
        _3137 = _3317 * _3038;
    }
    else
    {
        _3131 = _3035;
        _3133 = _3036;
        _3135 = _3037;
        _3137 = _3038;
    }
    bool _3344;
    vec4 _3147;
    vec4 _3169;
    float _3171;
    float _3175;
    float _3176;
    float _3177;
    float _3178;
    bool _3188;
    for (;;)
    {
        _3147 = cbMatDynParam._m0[0u];
        float _3149 = roundEven(_3147.y);
        bool _3150 = _3149 == 3.0;
        float _3151 = log2(_3137);
        float _3158 = exp2(_3151 * cbSceneParam._m0[78u].x) * _3007;
        float _3159 = exp2(_3151 * cbSceneParam._m0[78u].y) * _3008;
        float _3160 = exp2(_3151 * cbSceneParam._m0[78u].z) * _3009;
        float _3167 = _1128 + (-0.5);
        _3169 = cbMtdParam._m0[1u];
        _3171 = _3169.y * _3167;
        float _3174 = (_3149 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3175 = _3174 * (_3150 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3131)));
        _3176 = _3174 * (_3150 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3133)));
        _3177 = _3174 * (_3150 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3135)));
        _3178 = _3167 * 0.999000012874603271484375;
        _3188 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3188)
        {
            if ((cbInstanceData._m0[_288 + 7u].x + _3178) < 0.5)
            {
                _3344 = true;
                break;
            }
        }
        uint _3285 = _1177 + uint(_3147.w);
        if ((cbInstanceData._m0[_3285].w < 1.0) && ((cbInstanceData._m0[_3285].w + _3178) < 0.5))
        {
            _3344 = true;
            break;
        }
        if ((_3171 + 1.0) < _3169.x)
        {
            _3344 = true;
            break;
        }
        _3344 = false;
        break;
    }
    float _3549;
    if (_3344)
    {
        discard_state = true;
        _3549 = 0.0;
    }
    else
    {
        _3549 = cbInstanceData._m0[_3010].w;
    }
    SV_Target.x = _3175;
    SV_Target.y = _3176;
    SV_Target.z = _3177;
    SV_Target.w = _3549;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3010].w;
    discard_exit();
}


