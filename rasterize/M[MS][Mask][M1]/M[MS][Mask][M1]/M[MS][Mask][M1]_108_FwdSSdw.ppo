#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1547;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _246 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _247 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _248 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _254 = inversesqrt(dot(vec3(_246, _247, _248), vec3(_246, _247, _248)));
    float _261 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _268 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _282 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _283 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3896 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3907 = isnan(0.0) ? _282 : (isnan(_282) ? 0.0 : max(_282, 0.0));
    float _3918 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    uint _293 = uint(roundEven(NORMAL.w)) * 13u;
    uint _298 = _293 + 1u;
    uint _302 = _293 + 2u;
    float _311 = sqrt(((cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x) + (cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x)) + (cbInstanceData._m0[_302].x * cbInstanceData._m0[_302].x));
    float _312 = _311 * TEXCOORD.z;
    float _313 = _311 * TEXCOORD.w;
    vec4 _326 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _312) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _313) + cbTextureTilingScale._m0[13u].w));
    vec4 _350 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _355 = _350.x * cbMtdParam._m0[11u].x;
    float _356 = _350.y * cbMtdParam._m0[11u].y;
    float _357 = _350.z * cbMtdParam._m0[11u].z;
    vec4 _376 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _312) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _313) + cbTextureTilingScale._m0[5u].w));
    vec4 _395 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _430 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _432 = _430.x;
    float _444 = dot(vec4(_432, _430.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _461 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _395.x) * 2.0) - ((((_432 - _444) * cbMtdParam._m0[23u].w) + _444) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3929 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _462 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _469 = (_462 * ((_376.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _470 = (_462 * ((_376.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _471 = (_462 * ((_376.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _488 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _312) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _313) + cbTextureTilingScale._m0[3u].w));
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _510 = _508.x;
    float _520 = dot(vec4(_510, _508.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _534 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _395.y) * 2.0) - ((((_510 - _520) * cbMtdParam._m0[23u].w) + _520) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3940 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    float _535 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _542 = (_535 * ((_488.x * cbMtdParam._m0[13u].x) - _469)) + _469;
    float _543 = (_535 * ((_488.y * cbMtdParam._m0[13u].y) - _470)) + _470;
    float _544 = (_535 * ((_488.z * cbMtdParam._m0[13u].z) - _471)) + _471;
    vec4 _563 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _312) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _313) + cbTextureTilingScale._m0[24u].w));
    vec4 _580 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _582 = _580.x;
    float _592 = dot(vec4(_582, _580.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _604 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _395.z) * 2.0) - ((((_582 - _592) * cbMtdParam._m0[23u].w) + _592) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3951 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _605 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _612 = (_605 * ((_563.x * cbMtdParam._m0[14u].x) - _542)) + _542;
    float _613 = (_605 * ((_563.y * cbMtdParam._m0[14u].y) - _543)) + _543;
    float _614 = (_605 * ((_563.z * cbMtdParam._m0[14u].z) - _544)) + _544;
    float _618 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _326.x) * _612;
    float _621 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _326.y) * _613;
    float _624 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _326.z) * _614;
    float _631 = ((_612 - _618) * (isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0)))) + _618;
    float _632 = ((_613 - _621) * (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) + _621;
    float _633 = ((_614 - _624) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _624;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _312) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _313) + cbTextureTilingScale._m0[20u].w));
    vec4 _668 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _312) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _313) + cbTextureTilingScale._m0[4u].w));
    vec4 _685 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _687 = _685.x;
    float _688 = _685.y;
    float _689 = _685.z;
    float _696 = ((_668.x - _687) * _462) + _687;
    float _697 = ((_668.y - _688) * _462) + _688;
    float _698 = ((_668.z - _689) * _462) + _689;
    vec4 _710 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _312) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _313) + cbTextureTilingScale._m0[2u].w));
    float _721 = ((_710.x - _696) * _535) + _696;
    float _722 = ((_710.y - _697) * _535) + _697;
    float _723 = ((_710.z - _698) * _535) + _698;
    vec4 _735 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _312) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _313) + cbTextureTilingScale._m0[23u].w));
    float _748 = ((_735.z - _723) * _605) + _723;
    float _751 = ((((_735.x - _721) * _605) + _721) * 2.0) + (-1.0);
    float _752 = ((((_735.y - _722) * _605) + _722) * 2.0) + (-1.0);
    float _753 = dot(vec2(_751, _752), vec2(_751, _752));
    float _3962 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _758 = sqrt(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
    vec4 _778 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _790 = (_751 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_645.x * 2.0) + (-1.0)))) + (((_778.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _791 = (_752 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_645.y * 2.0) + (-1.0)))) + (((_778.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _312) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _313) + cbTextureTilingScale._m0[19u].w));
    float _805 = _803.x;
    float _806 = 1.0 - _805;
    float _834 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_805 - _806) * cbMtdParam._m0[24u].w) + _806) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3973 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _835 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _843 = ((((cbMtdParam._m0[10u].x - _631) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _835) + _631;
    float _844 = ((((cbMtdParam._m0[10u].y - _632) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _835) + _632;
    float _845 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _633)) * _835) + _633;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _312) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _313) + cbTextureTilingScale._m0[9u].w)).x - _873) * _462) + _873;
    float _909 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _312) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _313) + cbTextureTilingScale._m0[21u].w)).x - _891) * _535) + _891;
    float _926 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _312) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _313) + cbTextureTilingScale._m0[10u].w)).x - _909) * _605) + _909;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _926) * cbMtdParam._m0[19u].z) + _926;
    float _932 = _930 - (_930 * _835);
    float _937 = (((_645.z - _748) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _748;
    float _941 = ((_778.z - _937) * cbMtdParam._m0[19u].w) + _937;
    float _945 = ((cbMtdParam._m0[23u].x - _941) * _835) + _941;
    vec4 _966 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _312) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _313) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _972 = (_966.x * 2.0) + (-1.0);
    float _973 = (_966.y * 2.0) + (-1.0);
    float _974 = dot(vec2(_972, _973), vec2(_972, _973));
    float _3984 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _990 = (_835 * (((cbMtdParam._m0[22u].z * _790) - _790) + _972)) + _790;
    float _991 = (_835 * (((cbMtdParam._m0[22u].z * _791) - _791) + _973)) + _791;
    float _992 = (_835 * (sqrt(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) - _758)) + _758;
    float _994 = cbMtdParam._m0[22u].x + _778.w;
    float _997 = fma(_992, _261 * NORMAL.x, fma(_991, _268 * TANGENT.x, (_254 * _246) * _990));
    float _1000 = fma(_992, _261 * NORMAL.y, fma(_991, _268 * TANGENT.y, (_254 * _247) * _990));
    float _1003 = fma(_992, _261 * NORMAL.z, fma(_991, _268 * TANGENT.z, (_254 * _248) * _990));
    float _1007 = inversesqrt(dot(vec3(_997, _1000, _1003), vec3(_997, _1000, _1003)));
    float _1008 = _1007 * _997;
    float _1009 = _1007 * _1000;
    float _1010 = _1007 * _1003;
    float _3995 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _1011 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _4006 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _4017 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4028 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4039 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4050 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _1016 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _1030 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1080 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1070);
    float _1081 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1070);
    float _1082 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1070);
    float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
    float _1087 = _1080 * _1086;
    float _1088 = _1081 * _1086;
    float _1089 = _1082 * _1086;
    float _1095 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1096 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1114 = fma(_1010, cbSceneParam._m0[5u].z, fma(_1009, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1008));
    float _1117 = fma(_1010, cbSceneParam._m0[6u].z, fma(_1009, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1008));
    float _1120 = fma(_1010, cbSceneParam._m0[7u].z, fma(_1009, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1008));
    uint _1134 = (_293 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1140 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1134].x;
    float _1141 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1134].y;
    float _1142 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1134].z;
    float _4061 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _1143 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _1144 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _4083 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1145 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1146 = 1.0 - _1016;
    float _1147 = _1143 * _1146;
    float _1148 = _1144 * _1146;
    float _1149 = _1145 * _1146;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1016;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1016;
    float _1156 = (_1145 + (-0.039999999105930328369140625)) * _1016;
    float _1157 = _1154 + 0.039999999105930328369140625;
    float _1159 = _1155 + 0.039999999105930328369140625;
    float _1160 = _1156 + 0.039999999105930328369140625;
    vec4 _1169 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1095, cbSceneParam._m0[86u].y * _1096));
    float _1173 = ((isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * TEXCOORD_5.w) * _1169.x;
    float _1174 = dot(vec3(_1008, _1009, _1010), vec3(_1087, _1088, _1089));
    float _1177 = _1174 * 2.0;
    float _1181 = (_1177 * _1008) - _1087;
    float _1182 = (_1177 * _1009) - _1088;
    float _1183 = (_1177 * _1010) - _1089;
    float _1187 = abs(dot(vec3(_1087, _1088, _1089), vec3(_1008, _1009, _1010)));
    float _4094 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1189 = sqrt(_1011);
    float _1202 = exp2((_1189 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1189 * 3.0));
    float _1208 = (1.0 - _1202) * ((_1189 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1209 = _1202 * _1189;
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1245 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1546;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1271 = fma(_1245, cbModelParam._m0[26u].z, fma(_1241, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1237));
        float _1275 = fma(_1245, cbModelParam._m0[27u].z, fma(_1241, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1237));
        float _1279 = fma(_1245, cbModelParam._m0[28u].z, fma(_1241, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1237));
        float _1304 = _1237 + _1008;
        float _1305 = _1241 + _1009;
        float _1306 = _1245 + _1010;
        float _1316 = fma(_1306, cbModelParam._m0[26u].z, fma(_1305, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1304)) - _1271;
        float _1317 = fma(_1306, cbModelParam._m0[27u].z, fma(_1305, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1304)) - _1275;
        float _1318 = fma(_1306, cbModelParam._m0[28u].z, fma(_1305, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1304)) - _1279;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1271 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1275 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[34u].z) + ((((((_1279 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1347 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1354 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1374 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1340.x + (-0.5));
        float _1376 = _1374 * (_1340.y + (-0.5));
        float _1377 = _1374 * (_1340.z + (-0.5));
        float _1384 = exp2((_1347.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1347.x + (-0.5));
        float _1386 = _1384 * (_1347.y + (-0.5));
        float _1387 = _1384 * (_1347.z + (-0.5));
        float _1394 = exp2((_1354.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1354.x + (-0.5));
        float _1396 = _1394 * (_1354.y + (-0.5));
        float _1397 = _1394 * (_1354.z + (-0.5));
        float _1404 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1405 = _1404 * (_1361.x + (-0.5));
        float _1406 = _1404 * (_1361.y + (-0.5));
        float _1407 = _1404 * (_1361.z + (-0.5));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = _1375 * 0.5;
        float _1412 = _1385 * 0.5;
        float _1413 = _1395 * 0.5;
        float _1414 = dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413));
        float _1419 = (_1414 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1414);
        float _1428 = (dot(vec3(_1008, _1009, _1010), vec3(_1419 * _1411, _1419 * _1412, _1419 * _1413)) + 1.0) * 0.5;
        float _4120 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1438 = sqrt(((_1412 * _1412) + (_1411 * _1411)) + (_1413 * _1413)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4131 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4142 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0))) * (_1440 + 1.0))) + _1445) * _1408;
        float _1455 = _1376 * 0.5;
        float _1456 = _1386 * 0.5;
        float _1457 = _1396 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_1008, _1009, _1010), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1409 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4175 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1482 + 1.0))) + _1487) * _1409;
        float _1497 = _1377 * 0.5;
        float _1498 = _1387 * 0.5;
        float _1499 = _1397 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_1008, _1009, _1010), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4208 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1524 + 1.0))) + _1529) * _1410;
        _1546 = _1377;
        _1548 = _1376;
        _1549 = _1375;
        _1550 = _1387;
        _1551 = _1386;
        _1552 = _1385;
        _1553 = _1397;
        _1554 = _1396;
        _1555 = _1395;
        _1556 = _1410;
        _1557 = _1409;
        _1558 = _1408;
        _1559 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1560 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1561 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1547;
        _1548 = _1547;
        _1549 = _1547;
        _1550 = _1547;
        _1551 = _1547;
        _1552 = _1547;
        _1553 = _1547;
        _1554 = _1547;
        _1555 = _1547;
        _1556 = _1547;
        _1557 = _1547;
        _1558 = _1547;
        _1559 = 0.0;
        _1560 = 0.0;
        _1561 = 0.0;
    }
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1584 = fma(_1245, cbModelParam._m0[30u].z, fma(_1241, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237));
        float _1588 = fma(_1245, cbModelParam._m0[31u].z, fma(_1241, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237));
        float _1592 = fma(_1245, cbModelParam._m0[32u].z, fma(_1241, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237));
        float _1615 = _1237 + _1008;
        float _1616 = _1241 + _1009;
        float _1617 = _1245 + _1010;
        float _1627 = fma(_1617, cbModelParam._m0[30u].z, fma(_1616, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1615)) - _1584;
        float _1628 = fma(_1617, cbModelParam._m0[31u].z, fma(_1616, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1615)) - _1588;
        float _1629 = fma(_1617, cbModelParam._m0[32u].z, fma(_1616, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1615)) - _1592;
        float _1633 = inversesqrt(dot(vec3(_1627, _1628, _1629), vec3(_1627, _1628, _1629)));
        float _1646 = ((_1633 * _1627) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1584 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1647 = ((_1633 * _1628) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1588 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1648 = ((_1633 * _1629) / cbModelParam._m0[35u].z) + ((((((_1592 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1650 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1657 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1664 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        vec4 _1671 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1646, _1647, _1648), 0.0);
        float _1683 = exp2((_1650.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1650.x + (-0.5));
        float _1685 = _1683 * (_1650.y + (-0.5));
        float _1686 = _1683 * (_1650.z + (-0.5));
        float _1693 = exp2((_1657.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1657.x + (-0.5));
        float _1695 = _1693 * (_1657.y + (-0.5));
        float _1696 = _1693 * (_1657.z + (-0.5));
        float _1703 = exp2((_1664.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1664.x + (-0.5));
        float _1705 = _1703 * (_1664.y + (-0.5));
        float _1706 = _1703 * (_1664.z + (-0.5));
        float _1713 = exp2((_1671.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1671.x + (-0.5));
        float _1715 = _1713 * (_1671.y + (-0.5));
        float _1716 = _1713 * (_1671.z + (-0.5));
        float _1717 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1718 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
        float _1719 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1720 = _1684 * 0.5;
        float _1721 = _1694 * 0.5;
        float _1722 = _1704 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_1008, _1009, _1010), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4249 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1717 + 9.9999997473787516355514526367188e-06);
        float _4260 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4271 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_1747 + 1.0))) + _1752) * _1717;
        float _1762 = _1685 * 0.5;
        float _1763 = _1695 * 0.5;
        float _1764 = _1705 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_1008, _1009, _1010), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1718 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4304 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1789 + 1.0))) + _1794) * _1718;
        float _1804 = _1686 * 0.5;
        float _1805 = _1696 * 0.5;
        float _1806 = _1706 * 0.5;
        float _1807 = dot(vec3(_1804, _1805, _1806), vec3(_1804, _1805, _1806));
        float _1812 = (_1807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1807);
        float _1820 = (dot(vec3(_1008, _1009, _1010), vec3(_1812 * _1804, _1812 * _1805, _1812 * _1806)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1829 = sqrt(((_1805 * _1805) + (_1804 * _1804)) + (_1806 * _1806)) / (_1719 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1830 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1831 = _1830 * 2.0;
        float _1835 = (1.0 - _1830) / (_1830 + 1.0);
        float _4337 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1845 = ((((1.0 - _1836) * (_1831 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1831 + 1.0))) + _1836) * _1719;
        _1853 = _1686;
        _1854 = _1685;
        _1855 = _1684;
        _1856 = _1696;
        _1857 = _1695;
        _1858 = _1694;
        _1859 = _1706;
        _1860 = _1705;
        _1861 = _1704;
        _1862 = _1719;
        _1863 = _1718;
        _1864 = _1717;
        _1865 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1866 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
        _1867 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)));
    }
    else
    {
        _1853 = _1547;
        _1854 = _1547;
        _1855 = _1547;
        _1856 = _1547;
        _1857 = _1547;
        _1858 = _1547;
        _1859 = _1547;
        _1860 = _1547;
        _1861 = _1547;
        _1862 = _1547;
        _1863 = _1547;
        _1864 = _1547;
        _1865 = 0.0;
        _1866 = 0.0;
        _1867 = 0.0;
    }
    float _1877 = (cbModelParam._m0[1u].x * (_1865 - _1559)) + _1559;
    float _1878 = (cbModelParam._m0[1u].x * (_1866 - _1560)) + _1560;
    float _1879 = (cbModelParam._m0[1u].x * (_1867 - _1561)) + _1561;
    float _1900 = fma(_1879, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1877 * cbSceneParam._m0[89u].x));
    float _1903 = fma(_1879, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1877 * cbSceneParam._m0[90u].x));
    float _1906 = fma(_1879, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1877));
    float _1921 = _1181 * 0.5;
    float _1922 = _1182 * 0.5;
    float _1923 = _1183 * 0.5;
    float _1924 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1855, _1858, _1861, _1864));
    float _1927 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1854, _1857, _1860, _1863));
    float _1930 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1853, _1856, _1859, _1862));
    float _1964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1937 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1546, _1550, _1553, _1556));
        float _1941 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1548, _1551, _1554, _1557));
        float _1945 = dot(vec4(_1921, _1922, _1923, 1.0), vec4(_1549, _1552, _1555, _1558));
        float _1952 = dot(vec4(cbModelParam._m0[39u]), vec4(_1921, _1922, _1923, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1952) ? 0.0 : (isnan(0.0) ? _1952 : max(0.0, _1952))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1966 = dot(vec4(cbModelParam._m0[40u]), vec4(_1921, _1922, _1923, 1.0));
        _1975 = dot(vec3(isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1975 = 1.0;
    }
    float _1979 = (_1975 * cbModelParam._m0[1u].x) + (_1964 * (1.0 - cbModelParam._m0[1u].x));
    float _1989 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1011);
    float _1990 = isnan(_1989) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1989 : min(cbModelParam._m0[25u].z, _1989));
    float _2071;
    float _2073;
    float _2075;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2038 = fma(_1245, cbModelParam._m0[13u].z, fma(_1241, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1237)) + cbModelParam._m0[13u].w;
        float _2042 = fma(_1245, cbModelParam._m0[14u].z, fma(_1241, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1237)) + cbModelParam._m0[14u].w;
        float _2046 = fma(_1245, cbModelParam._m0[15u].z, fma(_1241, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1237)) + cbModelParam._m0[15u].w;
        float _2049 = fma(_1183, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1181));
        float _2052 = fma(_1183, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1181));
        float _2055 = fma(_1183, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1181));
        float _2083;
        if (_2049 > 0.0)
        {
            _2083 = abs((1.0 - _2038) / _2049);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2049 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2038 + 1.0) / _2049);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2083 = frontier_phi_14_12_ladder;
        }
        float _2307;
        if (_2052 > 0.0)
        {
            _2307 = abs((1.0 - _2042) / _2052);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2052 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2042 + 1.0) / _2052);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2307 = frontier_phi_23_19_ladder;
        }
        float _2564;
        if (_2055 > 0.0)
        {
            _2564 = abs((1.0 - _2046) / _2055);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2055 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2046 + 1.0) / _2055);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2564 = frontier_phi_35_30_ladder;
        }
        float _2566 = isnan(_2307) ? _2083 : (isnan(_2083) ? _2307 : min(_2083, _2307));
        float _2567 = isnan(_2564) ? _2566 : (isnan(_2566) ? _2564 : min(_2566, _2564));
        float _2571 = (_2567 * _2049) + _2038;
        float _2572 = (_2567 * _2052) + _2042;
        float _2573 = (_2567 * _2055) + _2046;
        float _2574 = _2567 * 9.9999997473787516355514526367188e-05;
        float _2576 = (-1.0) - _2574;
        float _2578 = _2574 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2573 > _2578) || ((_2573 < _2576) || ((_2572 > _2578) || ((_2572 < _2576) || ((_2571 < _2576) || (_2571 > _2578))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2573, cbModelParam._m0[9u].z, fma(_2572, cbModelParam._m0[9u].y, _2571 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2573, cbModelParam._m0[10u].z, fma(_2572, cbModelParam._m0[10u].y, _2571 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2573, cbModelParam._m0[11u].z, fma(_2572, cbModelParam._m0[11u].y, _2571 * cbModelParam._m0[11u].x))), _1990);
            frontier_phi_13_35_ladder = _2701.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2701.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2701.x * cbModelParam._m0[1u].y;
        }
        _2071 = frontier_phi_13_35_ladder_2;
        _2073 = frontier_phi_13_35_ladder_1;
        _2075 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2059 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1181, _1182, _1183), _1990);
        _2071 = _2059.x * cbModelParam._m0[1u].y;
        _2073 = _2059.y * cbModelParam._m0[1u].y;
        _2075 = _2059.z * cbModelParam._m0[1u].y;
    }
    float _2079 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1011);
    float _2080 = isnan(_2079) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2079 : min(cbModelParam._m0[25u].w, _2079));
    float _2170;
    float _2172;
    float _2174;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2134 = fma(_1245, cbModelParam._m0[21u].z, fma(_1241, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1237)) + cbModelParam._m0[21u].w;
        float _2138 = fma(_1245, cbModelParam._m0[22u].z, fma(_1241, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1237)) + cbModelParam._m0[22u].w;
        float _2142 = fma(_1245, cbModelParam._m0[23u].z, fma(_1241, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1237)) + cbModelParam._m0[23u].w;
        float _2145 = fma(_1183, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1181));
        float _2148 = fma(_1183, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1181));
        float _2151 = fma(_1183, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1181));
        float _2312;
        if (_2145 > 0.0)
        {
            _2312 = abs((1.0 - _2134) / _2145);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2145 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2134 + 1.0) / _2145);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2312 = frontier_phi_25_21_ladder;
        }
        float _2591;
        if (_2148 > 0.0)
        {
            _2591 = abs((1.0 - _2138) / _2148);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2138 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2591 = frontier_phi_37_32_ladder;
        }
        float _2804;
        if (_2151 > 0.0)
        {
            _2804 = abs((1.0 - _2142) / _2151);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2142 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2804 = frontier_phi_46_43_ladder;
        }
        float _2806 = isnan(_2591) ? _2312 : (isnan(_2312) ? _2591 : min(_2312, _2591));
        float _2807 = isnan(_2804) ? _2806 : (isnan(_2806) ? _2804 : min(_2806, _2804));
        float _2811 = (_2807 * _2145) + _2134;
        float _2812 = (_2807 * _2148) + _2138;
        float _2813 = (_2807 * _2151) + _2142;
        float _2814 = _2807 * 9.9999997473787516355514526367188e-05;
        float _2815 = (-1.0) - _2814;
        float _2817 = _2814 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2813 > _2817) || ((_2813 < _2815) || ((_2812 > _2817) || ((_2812 < _2815) || ((_2811 < _2815) || (_2811 > _2817))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2813, cbModelParam._m0[17u].z, fma(_2812, cbModelParam._m0[17u].y, _2811 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2813, cbModelParam._m0[18u].z, fma(_2812, cbModelParam._m0[18u].y, _2811 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2813, cbModelParam._m0[19u].z, fma(_2812, cbModelParam._m0[19u].y, _2811 * cbModelParam._m0[19u].x))), _2080);
            frontier_phi_22_46_ladder = _3012.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3012.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3012.x * cbModelParam._m0[1u].z;
        }
        _2170 = frontier_phi_22_46_ladder_2;
        _2172 = frontier_phi_22_46_ladder_1;
        _2174 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2154 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1181, _1182, _1183), _2080);
        _2170 = _2154.x * cbModelParam._m0[1u].z;
        _2172 = _2154.y * cbModelParam._m0[1u].z;
        _2174 = _2154.z * cbModelParam._m0[1u].z;
    }
    float _2187 = (((_1208 * _1157) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2170 - _2071)) + _2071);
    float _2189 = (((_1208 * _1159) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2172 - _2073)) + _2073);
    float _2191 = (((_1208 * _1160) + _1209) * _1173) * ((cbModelParam._m0[1u].w * (_2174 - _2075)) + _2075);
    float _2194 = fma(_2191, cbSceneParam._m0[89u].z, fma(_2189, cbSceneParam._m0[89u].y, _2187 * cbSceneParam._m0[89u].x));
    float _2197 = fma(_2191, cbSceneParam._m0[90u].z, fma(_2189, cbSceneParam._m0[90u].y, _2187 * cbSceneParam._m0[90u].x));
    float _2200 = fma(_2191, cbSceneParam._m0[91u].z, fma(_2189, cbSceneParam._m0[91u].y, _2187 * cbSceneParam._m0[91u].x));
    vec4 _2208 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1095, _1096));
    float _2210 = _2208.w;
    float _2222 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2210);
    float _2223 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2210);
    float _2224 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2210);
    uvec4 _2228 = floatBitsToUint(cbInstanceData._m0[_293 + 5u]);
    uint _2230 = _2228.x * 14u;
    uint _2231 = _2230 + 13u;
    float _2238 = _1173 + (-1.0);
    float _2243 = (cbLight._m0[_2231].x * _2238) + 1.0;
    float _2244 = (cbLight._m0[_2231].y * _2238) + 1.0;
    float _2245 = (cbLight._m0[_2231].z * _2238) + 1.0;
    float _2246 = (cbLight._m0[_2231].w * _2238) + 1.0;
    uint _2247 = _2230 + 5u;
    float _2253 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
    uint _2257 = _2230 + 4u;
    float _2266 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2270 = _2230 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_1008, _1009, _1010));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_1008, _1009, _1010));
    float _4473 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4484 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2247].x * _2253) * _2291) + (((cbLight._m0[_2257].x * _2222) * _2266) * _2289);
    float _2299 = ((_2253 * cbLight._m0[_2247].y) * _2291) + (((cbLight._m0[_2257].y * _2223) * _2266) * _2289);
    float _2300 = ((_2253 * cbLight._m0[_2247].z) * _2291) + (((cbLight._m0[_2257].z * _2224) * _2266) * _2289);
    uvec4 _2304 = floatBitsToUint(cbLight._m0[_2230 + 12u]);
    bool _2306 = _2304.x == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2306)
    {
        _2317 = _2298;
        _2319 = _2299;
        _2321 = _2300;
    }
    else
    {
        uint _2325 = _2230 + 6u;
        float _2341 = (dot(vec3(cbLight._m0[_2230 + 2u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4495 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
        float _2344 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2317 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2298;
        _2319 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2299;
        _2321 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2300;
    }
    bool _2324 = _2304.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2324)
    {
        _2362 = _2317;
        _2364 = _2319;
        _2366 = _2321;
    }
    else
    {
        uint _2535 = _2230 + 7u;
        float _2551 = (dot(vec3(cbLight._m0[_2230 + 3u].xyz), vec3(_1008, _1009, _1010)) * 0.5) + 0.5;
        float _2552 = _2551 * _2551;
        float _4511 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2553 = isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0));
        float _2554 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2362 = (((cbLight._m0[_2535].x * 0.3183098733425140380859375) * _2553) * _2554) + _2317;
        _2364 = (((cbLight._m0[_2535].y * 0.3183098733425140380859375) * _2553) * _2554) + _2319;
        _2366 = (((cbLight._m0[_2535].z * 0.3183098733425140380859375) * _2553) * _2554) + _2321;
    }
    uint _2369 = _2230 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2230].w)) * _1011) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2230].x + _1087;
    float _2385 = cbLight._m0[_2230].y + _1088;
    float _2386 = cbLight._m0[_2230].z + _1089;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2230].xyz));
    float _4527 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0));
    float _4538 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _2398 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
    float _2399 = dot(vec3(_1008, _1009, _1010), vec3(_2391, _2392, _2393));
    float _4549 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2230].xyz), vec3(_2391, _2392, _2393));
    float _4560 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
    float _2420 = 0.959999978542327880859375 - _1154;
    float _2422 = 0.959999978542327880859375 - _1155;
    float _2423 = 0.959999978542327880859375 - _1156;
    float _2430 = 1.0 - _2383;
    float _2441 = (0.5 / (((_2398 * ((_2397 * _2430) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2430) + _2383) * _2397))) * _2397;
    float _4571 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2457 = _2230 + 9u;
    float _2468 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _1011) * 0.949999988079071044921875);
    float _2469 = _2468 * _2468;
    float _2470 = cbLight._m0[_2270].x + _1087;
    float _2471 = cbLight._m0[_2270].y + _1088;
    float _2472 = cbLight._m0[_2270].z + _1089;
    float _2476 = inversesqrt(dot(vec3(_2470, _2471, _2472), vec3(_2470, _2471, _2472)));
    float _2477 = _2476 * _2470;
    float _2478 = _2476 * _2471;
    float _2479 = _2476 * _2472;
    float _2480 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2270].xyz));
    float _4582 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2483 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2484 = dot(vec3(_1008, _1009, _1010), vec3(_2477, _2478, _2479));
    float _4593 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2487 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
    float _2488 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2477, _2478, _2479));
    float _4604 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2492 = _2469 * _2469;
    float _2496 = ((_2487 * _2487) * (_2492 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0)))) * 5.0);
    float _2510 = 1.0 - _2469;
    float _2520 = (0.5 / (((_2398 * ((_2483 * _2510) + _2469)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2510) + _2469) * _2483))) * _2483;
    float _4615 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
    float _2522 = (isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2492 / ((_2496 * _2496) * 3.141590118408203125));
    float _2532 = (((((_2503 * _2420) + _1157) * cbLight._m0[_2457].x) * _2522) * _2253) + ((((cbLight._m0[_2369].x * _2222) * ((_2419 * _2420) + _1157)) * _2443) * _2266);
    float _2533 = (((((_2503 * _2422) + _1159) * cbLight._m0[_2457].y) * _2522) * _2253) + ((((cbLight._m0[_2369].y * _2223) * ((_2419 * _2422) + _1159)) * _2443) * _2266);
    float _2534 = (((((_2503 * _2423) + _1160) * cbLight._m0[_2457].z) * _2522) * _2253) + ((((cbLight._m0[_2369].z * _2224) * ((_2419 * _2423) + _1160)) * _2443) * _2266);
    float _2596;
    float _2598;
    float _2600;
    if (_2306)
    {
        _2596 = _2532;
        _2598 = _2533;
        _2600 = _2534;
    }
    else
    {
        uint _2602 = _2230 + 2u;
        uint _2606 = _2230 + 10u;
        float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2602].w)) * _1011) * 0.949999988079071044921875);
        float _2621 = _2620 * _2620;
        float _2622 = cbLight._m0[_2602].x + _1087;
        float _2623 = cbLight._m0[_2602].y + _1088;
        float _2624 = cbLight._m0[_2602].z + _1089;
        float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
        float _2629 = _2628 * _2622;
        float _2630 = _2628 * _2623;
        float _2631 = _2628 * _2624;
        float _2632 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2602].xyz));
        float _4626 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        float _2635 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _2636 = dot(vec3(_1008, _1009, _1010), vec3(_2629, _2630, _2631));
        float _4637 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2639 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _2640 = dot(vec3(cbLight._m0[_2602].xyz), vec3(_2629, _2630, _2631));
        float _4648 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2644 = _2621 * _2621;
        float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
        float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) * 5.0);
        float _2662 = 1.0 - _2621;
        float _2672 = (0.5 / (((_2398 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2662) + _2621) * _2635))) * _2635;
        float _4659 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
        float _2674 = (isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
        float _2675 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2596 = (((((_2655 * _2420) + _1157) * cbLight._m0[_2606].x) * _2674) * _2675) + _2532;
        _2598 = (((((_2655 * _2422) + _1159) * cbLight._m0[_2606].y) * _2674) * _2675) + _2533;
        _2600 = (((((_2655 * _2423) + _1160) * cbLight._m0[_2606].z) * _2674) * _2675) + _2534;
    }
    float _2710;
    float _2712;
    float _2714;
    if (_2324)
    {
        _2710 = _2596;
        _2712 = _2598;
        _2714 = _2600;
    }
    else
    {
        uint _2721 = _2230 + 3u;
        uint _2725 = _2230 + 11u;
        float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2721].w)) * _1011) * 0.949999988079071044921875);
        float _2740 = _2739 * _2739;
        float _2741 = cbLight._m0[_2721].x + _1087;
        float _2742 = cbLight._m0[_2721].y + _1088;
        float _2743 = cbLight._m0[_2721].z + _1089;
        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
        float _2748 = _2747 * _2741;
        float _2749 = _2747 * _2742;
        float _2750 = _2747 * _2743;
        float _2751 = dot(vec3(_1008, _1009, _1010), vec3(cbLight._m0[_2721].xyz));
        float _4675 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _2755 = dot(vec3(_1008, _1009, _1010), vec3(_2748, _2749, _2750));
        float _4686 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2759 = dot(vec3(cbLight._m0[_2721].xyz), vec3(_2748, _2749, _2750));
        float _4697 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2763 = _2740 * _2740;
        float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
        float _2774 = exp2(log2(1.0 - (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0)))) * 5.0);
        float _2781 = 1.0 - _2740;
        float _2791 = (0.5 / (((_2398 * ((_2754 * _2781) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2781) + _2740) * _2754))) * _2754;
        float _4708 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2793 = (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
        float _2794 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
        _2710 = (((((_2774 * _2420) + _1157) * cbLight._m0[_2725].x) * _2793) * _2794) + _2596;
        _2712 = (((((_2774 * _2422) + _1159) * cbLight._m0[_2725].y) * _2793) * _2794) + _2598;
        _2714 = (((((_2774 * _2423) + _1160) * cbLight._m0[_2725].z) * _2793) * _2794) + _2600;
    }
    float _2929;
    float _2931;
    float _2933;
    float _2935;
    float _2937;
    float _2939;
    if (_2228.y == 0u)
    {
        float _2869 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2870 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2869;
        float _2871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2869;
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2869;
        uvec4 _2884 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2885 = _2884.x;
        uint _2896 = uint((float(_2884.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1096) / _2885))) + floor(float(uint(cbSceneParam._m0[85u].x * _1095) / _2885)));
        float _2906 = (log2(_2872 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2907 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        uint _2910 = uint(isnan(14.0) ? _2907 : (isnan(_2907) ? 14.0 : min(_2907, 14.0)));
        uvec4 _2915 = texelFetch(g_lightClusterGridBuffer, int(((_2910 << 2u) + (_2896 << 6u)) >> 2u));
        uint _2916 = _2915.x;
        uint _2917 = _2884.z;
        float _3017;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        if (((((1u << ((_2917 >> 4u) & 15u)) + 4294967295u) & _2916) == 0u) || ((_2917 & 240u) == 0u))
        {
            _3017 = 0.0;
            _3019 = 0.0;
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
        }
        else
        {
            float _3018;
            float _3020;
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3162 = 0.0;
            float _3163 = 0.0;
            float _3164 = 0.0;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            uint _3168 = 0u;
            uint _3177;
            bool _3178;
            for (;;)
            {
                _3177 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3168 << 2u)) >> 2u)).x;
                _3178 = _3177 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3178)
                {
                    frontier_phi_61_pred = _3162;
                    frontier_phi_61_pred_1 = _3167;
                    frontier_phi_61_pred_2 = _3166;
                    frontier_phi_61_pred_3 = _3165;
                    frontier_phi_61_pred_4 = _3164;
                    frontier_phi_61_pred_5 = _3163;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3162;
                    _3287 = _3163;
                    _3288 = _3164;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3177;
                    float _3218;
                    float _3219;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3168 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _2870;
                        float _3353 = _3312.y - _2871;
                        float _3354 = _3312.z - _2872;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_1114, _1117, _1120), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4734 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _2870;
                        float _3388 = (-0.0) - _2871;
                        float _3389 = (-0.0) - _2872;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3404 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3405 = 1.0 - _1189;
                        float _3412 = sqrt(1.0 - ((1.0 - (_3405 * _3405)) * (1.0 - (_3404 * _3404))));
                        float _3413 = _3412 * _3412;
                        float _3414 = _3413 * _3413;
                        float _3415 = _3394 + _3359;
                        float _3416 = _3395 + _3360;
                        float _3417 = _3396 + _3361;
                        float _3421 = inversesqrt(dot(vec3(_3415, _3416, _3417), vec3(_3415, _3416, _3417)));
                        float _3425 = dot(vec3(_1114, _1117, _1120), vec3(_3394, _3395, _3396));
                        float _4750 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3428 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
                        float _3429 = dot(vec3(_1114, _1117, _1120), vec3(_3421 * _3415, _3421 * _3416, _3421 * _3417));
                        float _4761 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3436 = ((_3432 * _3432) * (_3414 + (-1.0))) + 1.0;
                        float _3437 = _3372 * _3413;
                        float _3438 = _3437 * _3437;
                        float _3441 = ((1.0 - _3438) * _3362) + _3438;
                        float _4772 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3442 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3443 = 1.0 - _3413;
                        float _3453 = (0.5 / (((_3442 * ((_3428 * _3443) + _3413)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3413) * _3428))) * _3442;
                        float _4783 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3464 = (((_3414 * 3.1415927410125732421875) * (isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0)))) / ((_3436 * _3436) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3221 = (_3383 * _3331.x) + _3289;
                        _3222 = (_3383 * _3331.y) + _3290;
                        _3223 = (_3383 * _3331.z) + _3291;
                        _3218 = (_3464 * _3348.x) + _3286;
                        _3219 = (_3464 * _3348.y) + _3287;
                        _3220 = (_3464 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3218;
                            _3287 = _3219;
                            _3288 = _3220;
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_61_pred = _3218;
                    frontier_phi_61_pred_1 = _3223;
                    frontier_phi_61_pred_2 = _3222;
                    frontier_phi_61_pred_3 = _3221;
                    frontier_phi_61_pred_4 = _3220;
                    frontier_phi_61_pred_5 = _3219;
                }
                _3018 = frontier_phi_61_pred;
                _3028 = frontier_phi_61_pred_1;
                _3026 = frontier_phi_61_pred_2;
                _3024 = frontier_phi_61_pred_3;
                _3022 = frontier_phi_61_pred_4;
                _3020 = frontier_phi_61_pred_5;
                uint _3169 = _3168 + 1u;
                if (_3169 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3162 = _3018;
                    _3163 = _3020;
                    _3164 = _3022;
                    _3165 = _3024;
                    _3166 = _3026;
                    _3167 = _3028;
                    _3168 = _3169;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3017 = _3018;
            _3019 = _3020;
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
        }
        uvec4 _3031 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3032 = _3031.z;
        uint _3034 = (_3032 >> 8u) & 15u;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        float _3140;
        if (((4294967295u << _3034) & _2916) == 0u)
        {
            _3130 = _3017;
            _3132 = _3019;
            _3134 = _3021;
            _3136 = _3023;
            _3138 = _3025;
            _3140 = _3027;
        }
        else
        {
            float _3155 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
            float _3156 = _3155 * _2870;
            float _3157 = _3155 * _2871;
            float _3158 = _3155 * _2872;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3034 < ((_3032 >> 12u) & 15u))
            {
                float _3131;
                float _3133;
                float _3135;
                float _3137;
                float _3139;
                float _3141;
                float _3269 = _3017;
                float _3270 = _3019;
                float _3271 = _3021;
                float _3272 = _3023;
                float _3273 = _3025;
                float _3274 = _3027;
                uint _3275 = _3034;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2910 << 5u) + (_2896 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3285)
                    {
                        frontier_phi_67_pred = _3272;
                        frontier_phi_67_pred_1 = _3273;
                        frontier_phi_67_pred_2 = _3274;
                        frontier_phi_67_pred_3 = _3271;
                        frontier_phi_67_pred_4 = _3270;
                        frontier_phi_67_pred_5 = _3269;
                    }
                    else
                    {
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3482 = _3269;
                        float _3483 = _3270;
                        float _3484 = _3271;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        uint _3488 = _3284;
                        uint _3489;
                        vec4 _3514;
                        float _3515;
                        vec4 _3530;
                        vec3 _3542;
                        vec4 _3557;
                        vec4 _3572;
                        float _3618;
                        bool _3619;
                        for (;;)
                        {
                            uint _3499 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3488));
                            _3489 = (_3488 + 4294967295u) & _3488;
                            uint _3501 = _3499 * 40u;
                            _3514 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3501)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3501 + 3u)).x));
                            _3515 = _3514.w;
                            uint _3517 = (_3499 * 40u) + 4u;
                            _3530 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3517)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3517 + 3u)).x));
                            uint _3532 = (_3499 * 40u) + 8u;
                            _3542 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x));
                            uint _3544 = (_3499 * 40u) + 16u;
                            _3557 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 3u)).x));
                            uint _3559 = (_3499 * 40u) + 20u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3499 * 40u) + 24u;
                            vec4 _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3593 = (_3499 * 40u) + 28u;
                            vec4 _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            _3618 = fma(_2872, _3606.z, fma(_2871, _3606.y, _3606.x * _2870)) + _3606.w;
                            _3619 = !((fma(_2872, _3587.z, fma(_2871, _3587.y, _3587.x * _2870)) + _3587.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3619)
                            {
                                float _3646 = _3514.x - _2870;
                                float _3647 = _3514.y - _2871;
                                float _3648 = _3514.z - _2872;
                                float _3649 = dot(vec3(_3646, _3647, _3648), vec3(_3646, _3647, _3648));
                                float _3652 = inversesqrt(_3649);
                                float _3653 = _3652 * _3646;
                                float _3654 = _3652 * _3647;
                                float _3655 = _3652 * _3648;
                                float _3659 = 1.0 - (_3649 / (_3515 * _3515));
                                float _4794 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3660 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                                float _3664 = sqrt(_3649) * _3530.w;
                                float _3666 = 1.39999997615814208984375 / (_3664 + 1.39999997615814208984375);
                                float _3667 = _3666 * _3666;
                                float _3670 = ((1.0 - _3667) * dot(vec3(_3653, _3654, _3655), vec3(_1114, _1117, _1120))) + _3667;
                                float _3673 = _3664 * _3664;
                                float _3677 = (fma(_2872, _3557.z, fma(_2871, _3557.y, _3557.x * _2870)) + _3557.w) / _3618;
                                float _3678 = (fma(_2872, _3572.z, fma(_2871, _3572.y, _3572.x * _2870)) + _3572.w) / _3618;
                                float _3682 = 1.0 - dot(vec2(_3677, _3678), vec2(_3677, _3678));
                                float _4810 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                                float _3684 = _3683 * (((isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0))) * _3660) / ((_3673 * 0.699999988079071044921875) + 1.0));
                                float _3696 = exp2(log2(1.0 / ((_3673 * 3.5) + 5.0)) * 0.25);
                                float _3697 = 1.0 - _1189;
                                float _3704 = sqrt(1.0 - ((1.0 - (_3697 * _3697)) * (1.0 - (_3696 * _3696))));
                                float _3705 = _3704 * _3704;
                                float _3706 = _3705 * _3705;
                                float _3707 = _3653 - _3156;
                                float _3708 = _3654 - _3157;
                                float _3709 = _3655 - _3158;
                                float _3713 = inversesqrt(dot(vec3(_3707, _3708, _3709), vec3(_3707, _3708, _3709)));
                                float _3717 = dot(vec3(_1114, _1117, _1120), vec3((-0.0) - _3156, (-0.0) - _3157, (-0.0) - _3158));
                                float _4821 = isnan(0.0) ? _3717 : (isnan(_3717) ? 0.0 : max(_3717, 0.0));
                                float _3720 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3721 = dot(vec3(_1114, _1117, _1120), vec3(_3713 * _3707, _3713 * _3708, _3713 * _3709));
                                float _4832 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3728 = ((_3724 * _3724) * (_3706 + (-1.0))) + 1.0;
                                float _3729 = _3666 * _3705;
                                float _3730 = _3729 * _3729;
                                float _3736 = ((1.0 - _3730) * dot(vec3(_1114, _1117, _1120), vec3(_3653, _3654, _3655))) + _3730;
                                float _4843 = isnan(0.0) ? _3736 : (isnan(_3736) ? 0.0 : max(_3736, 0.0));
                                float _3737 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3738 = 1.0 - _3705;
                                float _3748 = (0.5 / (((_3737 * ((_3720 * _3738) + _3705)) + 9.9999999392252902907785028219223e-09) + (((_3737 * _3738) + _3705) * _3720))) * _3737;
                                float _4854 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3758 = (_3683 * _3660) * (((_3706 * 3.1415927410125732421875) * (isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0)))) / ((_3728 * _3728) * ((_3673 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3758 * _3542.x;
                                frontier_phi_73_pred_1 = _3758 * _3542.y;
                                frontier_phi_73_pred_2 = _3684 * _3530.z;
                                frontier_phi_73_pred_3 = _3684 * _3530.y;
                                frontier_phi_73_pred_4 = _3684 * _3530.x;
                                frontier_phi_73_pred_5 = _3758 * _3542.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3762 = frontier_phi_73_pred;
                            _3763 = frontier_phi_73_pred_1;
                            _3767 = frontier_phi_73_pred_2;
                            _3766 = frontier_phi_73_pred_3;
                            _3765 = frontier_phi_73_pred_4;
                            _3764 = frontier_phi_73_pred_5;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            if (_3489 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3489;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3472;
                        frontier_phi_67_pred_1 = _3473;
                        frontier_phi_67_pred_2 = _3474;
                        frontier_phi_67_pred_3 = _3471;
                        frontier_phi_67_pred_4 = _3470;
                        frontier_phi_67_pred_5 = _3469;
                    }
                    _3137 = frontier_phi_67_pred;
                    _3139 = frontier_phi_67_pred_1;
                    _3141 = frontier_phi_67_pred_2;
                    _3135 = frontier_phi_67_pred_3;
                    _3133 = frontier_phi_67_pred_4;
                    _3131 = frontier_phi_67_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3131;
                        _3270 = _3133;
                        _3271 = _3135;
                        _3272 = _3137;
                        _3273 = _3139;
                        _3274 = _3141;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3139;
                frontier_phi_55_56_ladder_1 = _3141;
                frontier_phi_55_56_ladder_2 = _3137;
                frontier_phi_55_56_ladder_3 = _3135;
                frontier_phi_55_56_ladder_4 = _3133;
                frontier_phi_55_56_ladder_5 = _3131;
            }
            else
            {
                frontier_phi_55_56_ladder = _3025;
                frontier_phi_55_56_ladder_1 = _3027;
                frontier_phi_55_56_ladder_2 = _3023;
                frontier_phi_55_56_ladder_3 = _3021;
                frontier_phi_55_56_ladder_4 = _3019;
                frontier_phi_55_56_ladder_5 = _3017;
            }
            _3130 = frontier_phi_55_56_ladder_5;
            _3132 = frontier_phi_55_56_ladder_4;
            _3134 = frontier_phi_55_56_ladder_3;
            _3136 = frontier_phi_55_56_ladder_2;
            _3138 = frontier_phi_55_56_ladder;
            _3140 = frontier_phi_55_56_ladder_1;
        }
        float _3145 = isnan(1.0) ? _1173 : (isnan(_1173) ? 1.0 : min(_1173, 1.0));
        _2929 = (_3145 * _3136) + _2362;
        _2931 = (_3145 * _3138) + _2364;
        _2933 = (_3145 * _3140) + _2366;
        _2935 = ((_3130 * _1157) * _3145) + _2710;
        _2937 = ((_3132 * _1159) * _3145) + _2712;
        _2939 = ((_3134 * _1160) * _3145) + _2714;
    }
    else
    {
        _2929 = _2362;
        _2931 = _2364;
        _2933 = _2366;
        _2935 = _2710;
        _2937 = _2712;
        _2939 = _2714;
    }
    float _4870 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _4881 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _4892 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    uint _2959 = _293 + 6u;
    float _2967 = _1095 / cbSceneParam._m0[86u].x;
    float _2968 = _1096 / cbSceneParam._m0[86u].y;
    vec4 _2982 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, (log2((isnan(cbSceneParam._m0[77u].w) ? _1030 : (isnan(_1030) ? cbSceneParam._m0[77u].w : min(_1030, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2984 = _2982.x;
    float _2985 = _2982.y;
    float _2986 = _2982.z;
    float _2987 = _2982.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_1030 > cbSceneParam._m0[78u].w)
    {
        float _3042 = isnan(_1030) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1030 : min(cbSceneParam._m0[80u].w, _1030));
        float _3043 = _3042 / _1030;
        float _3054 = _3043 * _1080;
        float _3055 = _1081 * _3043;
        float _3056 = (-0.0) - _3055;
        float _3058 = _3043 * _1082;
        float _3060 = (cbSceneParam._m0[77u].w * _3056) / _3042;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3055;
        float _3068 = sqrt(((_3054 * _3054) + (_3055 * _3055)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3042)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3231;
        if (abs((_3056 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3231 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3191 = 1.0 / cbSceneParam._m0[80u].x;
            float _3192 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3193 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3202 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : min(_3192, 0.0));
            float _3203 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : min(_3193, 0.0));
            _3231 = ((abs(_3068 / _3056) * cbSceneParam._m0[80u].y) * ((((_3202 - _3203) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0))))) * _3191)) - ((exp2(_3078 * _3202) - exp2(_3078 * _3203)) * _3191))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3233 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2967, _2968, 1.0), 0.0);
        float _3242 = exp2((_3231 * (-1.44269502162933349609375)) * (1.0 - _3233.w));
        float _3243 = log2(_3242);
        float _3259 = log2(_2987);
        _3080 = (exp2(_3259 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].x)) * _3233.x) / cbSceneParam._m0[78u].x)) + _2984;
        _3082 = (exp2(_3259 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].y)) * _3233.y) / cbSceneParam._m0[78u].y)) + _2985;
        _3084 = (exp2(_3259 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3243 * cbSceneParam._m0[78u].z)) * _3233.z) / cbSceneParam._m0[78u].z)) + _2986;
        _3086 = _3242 * _2987;
    }
    else
    {
        _3080 = _2984;
        _3082 = _2985;
        _3084 = _2986;
        _3086 = _2987;
    }
    float _3098 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3099 = _3098 == 3.0;
    float _3100 = log2(_3086);
    float _3107 = exp2(_3100 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (_2929 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1173))) + ((_2935 + ((isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3108 = exp2(_3100 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0))) * (_2931 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1173))) + ((_2937 + ((isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3109 = exp2(_3100 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2933 + ((isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) * _1173))) + ((_2939 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1979)) * cbPerFrame._m0[3u].x));
    float _3118 = (_3098 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3118 * (_3099 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3080)));
    SV_Target.y = _3118 * (_3099 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.z = _3118 * (_3099 ? _3109 : (_3109 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.w = cbInstanceData._m0[_2959].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2959].w;
}


