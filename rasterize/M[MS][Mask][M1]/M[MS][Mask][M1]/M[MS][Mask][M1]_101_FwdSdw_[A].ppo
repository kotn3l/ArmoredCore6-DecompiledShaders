#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1382;
float _4044;
float _4045;
float _4046;
float _4047;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _254 = uint(roundEven(NORMAL.w)) * 13u;
    uint _260 = _254 + 1u;
    uint _264 = _254 + 2u;
    float _273 = sqrt(((cbInstanceData._m0[_260].x * cbInstanceData._m0[_260].x) + (cbInstanceData._m0[_254].x * cbInstanceData._m0[_254].x)) + (cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x));
    float _274 = _273 * TEXCOORD.z;
    float _275 = _273 * TEXCOORD.w;
    vec4 _295 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _301 = _295.x * cbMtdParam._m0[11u].x;
    float _302 = _295.y * cbMtdParam._m0[11u].y;
    float _303 = _295.z * cbMtdParam._m0[11u].z;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _274) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _275) + cbTextureTilingScale._m0[5u].w));
    vec4 _342 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _381 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _383 = _381.x;
    float _395 = dot(vec4(_383, _381.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _412 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _342.x) * 2.0) - ((((_383 - _395) * cbMtdParam._m0[23u].w) + _395) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4056 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _413 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _420 = (_413 * ((_322.x * cbMtdParam._m0[12u].x) - _301)) + _301;
    float _421 = (_413 * ((_322.y * cbMtdParam._m0[12u].y) - _302)) + _302;
    float _422 = (_413 * ((_322.z * cbMtdParam._m0[12u].z) - _303)) + _303;
    vec4 _439 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _274) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _275) + cbTextureTilingScale._m0[3u].w));
    vec4 _459 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _461 = _459.x;
    float _471 = dot(vec4(_461, _459.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _485 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _342.y) * 2.0) - ((((_461 - _471) * cbMtdParam._m0[23u].w) + _471) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4067 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _486 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _493 = (_486 * ((_439.x * cbMtdParam._m0[13u].x) - _420)) + _420;
    float _494 = (_486 * ((_439.y * cbMtdParam._m0[13u].y) - _421)) + _421;
    float _495 = (_486 * ((_439.z * cbMtdParam._m0[13u].z) - _422)) + _422;
    vec4 _514 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _274) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _275) + cbTextureTilingScale._m0[24u].w));
    vec4 _531 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _533 = _531.x;
    float _543 = dot(vec4(_533, _531.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _555 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _342.z) * 2.0) - ((((_533 - _543) * cbMtdParam._m0[23u].w) + _543) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4078 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _556 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _563 = (_556 * ((_514.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _564 = (_556 * ((_514.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _565 = (_556 * ((_514.z * cbMtdParam._m0[14u].z) - _495)) + _495;
    vec4 _578 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _274) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _275) + cbTextureTilingScale._m0[4u].w));
    vec4 _595 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _597 = _595.x;
    float _598 = _595.y;
    float _599 = _595.z;
    float _606 = ((_578.x - _597) * _413) + _597;
    float _607 = ((_578.y - _598) * _413) + _598;
    float _608 = ((_578.z - _599) * _413) + _599;
    vec4 _620 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _274) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _275) + cbTextureTilingScale._m0[2u].w));
    float _631 = ((_620.x - _606) * _486) + _606;
    float _632 = ((_620.y - _607) * _486) + _607;
    float _633 = ((_620.z - _608) * _486) + _608;
    vec4 _645 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _274) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _275) + cbTextureTilingScale._m0[23u].w));
    float _658 = ((_645.z - _633) * _556) + _633;
    float _661 = ((((_645.x - _631) * _556) + _631) * 2.0) + (-1.0);
    float _663 = ((((_645.y - _632) * _556) + _632) * 2.0) + (-1.0);
    float _664 = dot(vec2(_661, _663), vec2(_661, _663));
    float _4089 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _669 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _695 = (((_683.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _661;
    float _696 = (((_683.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _663;
    vec4 _722 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _724 = _722.x;
    float _742 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _274) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _275) + cbTextureTilingScale._m0[9u].w)).x - _724) * _413) + _724;
    float _760 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _274) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _275) + cbTextureTilingScale._m0[21u].w)).x - _742) * _486) + _742;
    float _778 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _274) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _275) + cbTextureTilingScale._m0[10u].w)).x - _760) * _556) + _760;
    float _782 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _778) * cbMtdParam._m0[19u].z) + _778;
    float _786 = (cbMtdParam._m0[19u].w * (_683.z - _658)) + _658;
    float _788 = cbMtdParam._m0[22u].x + _683.w;
    float _791 = fma(_669, _241 * NORMAL.x, fma(_696, _248 * TANGENT.x, (_234 * _226) * _695));
    float _794 = fma(_669, _241 * NORMAL.y, fma(_696, _248 * TANGENT.y, (_234 * _227) * _695));
    float _797 = fma(_669, _241 * NORMAL.z, fma(_696, _248 * TANGENT.z, (_234 * _228) * _695));
    float _801 = inversesqrt(dot(vec3(_791, _794, _797), vec3(_791, _794, _797)));
    float _802 = _801 * _791;
    float _803 = _801 * _794;
    float _804 = _801 * _797;
    float _4100 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _805 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _4111 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _4122 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4133 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4144 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4155 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _810 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _824 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _864 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _874 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _864);
    float _875 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _864);
    float _876 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _864);
    float _880 = inversesqrt(dot(vec3(_874, _875, _876), vec3(_874, _875, _876)));
    float _881 = _874 * _880;
    float _882 = _875 * _880;
    float _883 = _876 * _880;
    vec4 _888 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _890 = _888.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1062 = sqrt(((_874 * _874) + (_875 * _875)) + (_876 * _876));
        float _1068 = (cbMatDynParam._m0[5u].x * _1062) + cbMatDynParam._m0[5u].y;
        float _4166 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1073 = (cbMatDynParam._m0[5u].z * _1062) + cbMatDynParam._m0[5u].w;
        float _4177 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) - _1069)) + _1069) < ((_890 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _901 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _902 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _920 = fma(_804, cbSceneParam._m0[5u].z, fma(_803, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _802));
    float _923 = fma(_804, cbSceneParam._m0[6u].z, fma(_803, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _802));
    float _926 = fma(_804, cbSceneParam._m0[7u].z, fma(_803, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _802));
    uint _939 = _254 + 9u;
    uint _940 = _939 + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_940].z;
    float _4188 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _952 = 1.0 - _810;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _810;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _810;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _810;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _901, cbSceneParam._m0[86u].y * _902));
    float _979 = ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * TEXCOORD_5.w) * _975.x;
    float _980 = dot(vec3(_802, _803, _804), vec3(_881, _882, _883));
    float _983 = _980 * 2.0;
    float _987 = (_983 * _802) - _881;
    float _988 = (_983 * _803) - _882;
    float _989 = (_983 * _804) - _883;
    float _993 = abs(dot(vec3(_881, _882, _883), vec3(_802, _803, _804)));
    float _4221 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _995 = sqrt(_805);
    float _1008 = exp2((_995 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_995 * 3.0));
    float _1014 = (1.0 - _1008) * ((_995 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1015 = _1008 * _995;
    float _1043 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1047 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1051 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1381;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    float _1394;
    float _1395;
    float _1396;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1106 = fma(_1051, cbModelParam._m0[26u].z, fma(_1047, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1043));
        float _1110 = fma(_1051, cbModelParam._m0[27u].z, fma(_1047, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1043));
        float _1114 = fma(_1051, cbModelParam._m0[28u].z, fma(_1047, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1043));
        float _1139 = _1043 + _802;
        float _1140 = _1047 + _803;
        float _1141 = _1051 + _804;
        float _1151 = fma(_1141, cbModelParam._m0[26u].z, fma(_1140, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139)) - _1106;
        float _1152 = fma(_1141, cbModelParam._m0[27u].z, fma(_1140, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139)) - _1110;
        float _1153 = fma(_1141, cbModelParam._m0[28u].z, fma(_1140, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139)) - _1114;
        float _1157 = inversesqrt(dot(vec3(_1151, _1152, _1153), vec3(_1151, _1152, _1153)));
        float _1170 = ((_1157 * _1151) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1106 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1157 * _1152) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1110 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1157 * _1153) / cbModelParam._m0[34u].z) + ((((((_1114 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1170, _1171, _1172), 0.0);
        float _1209 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1175.x + (-0.5));
        float _1211 = _1209 * (_1175.y + (-0.5));
        float _1212 = _1209 * (_1175.z + (-0.5));
        float _1219 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1182.x + (-0.5));
        float _1221 = _1219 * (_1182.y + (-0.5));
        float _1222 = _1219 * (_1182.z + (-0.5));
        float _1229 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1230 = _1229 * (_1189.x + (-0.5));
        float _1231 = _1229 * (_1189.y + (-0.5));
        float _1232 = _1229 * (_1189.z + (-0.5));
        float _1239 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1240 = _1239 * (_1196.x + (-0.5));
        float _1241 = _1239 * (_1196.y + (-0.5));
        float _1242 = _1239 * (_1196.z + (-0.5));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1246 = _1210 * 0.5;
        float _1247 = _1220 * 0.5;
        float _1248 = _1230 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1263 = (dot(vec3(_802, _803, _804), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1273 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _4269 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1275 + 1.0))) + _1280) * _1243;
        float _1290 = _1211 * 0.5;
        float _1291 = _1221 * 0.5;
        float _1292 = _1231 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1306 = (dot(vec3(_802, _803, _804), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1315 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4302 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1317 + 1.0))) + _1322) * _1244;
        float _1332 = _1212 * 0.5;
        float _1333 = _1222 * 0.5;
        float _1334 = _1232 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_802, _803, _804), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1245 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4335 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1359 + 1.0))) + _1364) * _1245;
        _1381 = _1212;
        _1383 = _1211;
        _1384 = _1210;
        _1385 = _1222;
        _1386 = _1221;
        _1387 = _1220;
        _1388 = _1232;
        _1389 = _1231;
        _1390 = _1230;
        _1391 = _1245;
        _1392 = _1244;
        _1393 = _1243;
        _1394 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
        _1395 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1396 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
    }
    else
    {
        _1381 = _1382;
        _1383 = _1382;
        _1384 = _1382;
        _1385 = _1382;
        _1386 = _1382;
        _1387 = _1382;
        _1388 = _1382;
        _1389 = _1382;
        _1390 = _1382;
        _1391 = _1382;
        _1392 = _1382;
        _1393 = _1382;
        _1394 = 0.0;
        _1395 = 0.0;
        _1396 = 0.0;
    }
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    float _1705;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1422 = fma(_1051, cbModelParam._m0[30u].z, fma(_1047, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1043));
        float _1426 = fma(_1051, cbModelParam._m0[31u].z, fma(_1047, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1043));
        float _1430 = fma(_1051, cbModelParam._m0[32u].z, fma(_1047, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1043));
        float _1453 = _1043 + _802;
        float _1454 = _1047 + _803;
        float _1455 = _1051 + _804;
        float _1465 = fma(_1455, cbModelParam._m0[30u].z, fma(_1454, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1453)) - _1422;
        float _1466 = fma(_1455, cbModelParam._m0[31u].z, fma(_1454, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1453)) - _1426;
        float _1467 = fma(_1455, cbModelParam._m0[32u].z, fma(_1454, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1453)) - _1430;
        float _1471 = inversesqrt(dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467)));
        float _1484 = ((_1471 * _1465) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1422 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1471 * _1466) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1426 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1486 = ((_1471 * _1467) / cbModelParam._m0[35u].z) + ((((((_1430 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1502 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        vec4 _1509 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1484, _1485, _1486), 0.0);
        float _1521 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1522 = _1521 * (_1488.x + (-0.5));
        float _1523 = _1521 * (_1488.y + (-0.5));
        float _1524 = _1521 * (_1488.z + (-0.5));
        float _1531 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1532 = _1531 * (_1495.x + (-0.5));
        float _1533 = _1531 * (_1495.y + (-0.5));
        float _1534 = _1531 * (_1495.z + (-0.5));
        float _1541 = exp2((_1502.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1502.x + (-0.5));
        float _1543 = _1541 * (_1502.y + (-0.5));
        float _1544 = _1541 * (_1502.z + (-0.5));
        float _1551 = exp2((_1509.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1509.x + (-0.5));
        float _1553 = _1551 * (_1509.y + (-0.5));
        float _1554 = _1551 * (_1509.z + (-0.5));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1558 = _1522 * 0.5;
        float _1559 = _1532 * 0.5;
        float _1560 = _1542 * 0.5;
        float _1561 = dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560));
        float _1566 = (_1561 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1561);
        float _1574 = (dot(vec3(_802, _803, _804), vec3(_1566 * _1558, _1566 * _1559, _1566 * _1560)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1583 = sqrt(((_1559 * _1559) + (_1558 * _1558)) + (_1560 * _1560)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1584 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1585 = _1584 * 2.0;
        float _1589 = (1.0 - _1584) / (_1584 + 1.0);
        float _4398 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1599 = ((((1.0 - _1590) * (_1585 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1585 + 1.0))) + _1590) * _1555;
        float _1600 = _1523 * 0.5;
        float _1601 = _1533 * 0.5;
        float _1602 = _1543 * 0.5;
        float _1603 = dot(vec3(_1600, _1601, _1602), vec3(_1600, _1601, _1602));
        float _1608 = (_1603 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1603);
        float _1616 = (dot(vec3(_802, _803, _804), vec3(_1608 * _1600, _1608 * _1601, _1608 * _1602)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1625 = sqrt(((_1601 * _1601) + (_1600 * _1600)) + (_1602 * _1602)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1626 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1627 = _1626 * 2.0;
        float _1631 = (1.0 - _1626) / (_1626 + 1.0);
        float _4431 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1632 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1641 = ((((1.0 - _1632) * (_1627 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1627 + 1.0))) + _1632) * _1556;
        float _1642 = _1524 * 0.5;
        float _1643 = _1534 * 0.5;
        float _1644 = _1544 * 0.5;
        float _1645 = dot(vec3(_1642, _1643, _1644), vec3(_1642, _1643, _1644));
        float _1650 = (_1645 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1645);
        float _1658 = (dot(vec3(_802, _803, _804), vec3(_1650 * _1642, _1650 * _1643, _1650 * _1644)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1667 = sqrt(((_1643 * _1643) + (_1642 * _1642)) + (_1644 * _1644)) / (_1557 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
        float _1668 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1669 = _1668 * 2.0;
        float _1673 = (1.0 - _1668) / (_1668 + 1.0);
        float _4464 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1674 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1683 = ((((1.0 - _1674) * (_1669 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1669 + 1.0))) + _1674) * _1557;
        _1691 = _1524;
        _1692 = _1523;
        _1693 = _1522;
        _1694 = _1534;
        _1695 = _1533;
        _1696 = _1532;
        _1697 = _1544;
        _1698 = _1543;
        _1699 = _1542;
        _1700 = _1557;
        _1701 = _1556;
        _1702 = _1555;
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
        _1705 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)));
    }
    else
    {
        _1691 = _1382;
        _1692 = _1382;
        _1693 = _1382;
        _1694 = _1382;
        _1695 = _1382;
        _1696 = _1382;
        _1697 = _1382;
        _1698 = _1382;
        _1699 = _1382;
        _1700 = _1382;
        _1701 = _1382;
        _1702 = _1382;
        _1703 = 0.0;
        _1704 = 0.0;
        _1705 = 0.0;
    }
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1394)) + _1394;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1395)) + _1395;
    float _1717 = (cbModelParam._m0[1u].x * (_1705 - _1396)) + _1396;
    float _1738 = fma(_1717, cbSceneParam._m0[89u].z, fma(_1716, cbSceneParam._m0[89u].y, _1715 * cbSceneParam._m0[89u].x));
    float _1741 = fma(_1717, cbSceneParam._m0[90u].z, fma(_1716, cbSceneParam._m0[90u].y, _1715 * cbSceneParam._m0[90u].x));
    float _1744 = fma(_1717, cbSceneParam._m0[91u].z, fma(_1716, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1715));
    float _1759 = _987 * 0.5;
    float _1760 = _988 * 0.5;
    float _1761 = _989 * 0.5;
    float _1762 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1693, _1696, _1699, _1702));
    float _1765 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1768 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1802;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1775 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1381, _1385, _1388, _1391));
        float _1779 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1383, _1386, _1389, _1392));
        float _1783 = dot(vec4(_1759, _1760, _1761, 1.0), vec4(_1384, _1387, _1390, _1393));
        float _1790 = dot(vec4(cbModelParam._m0[39u]), vec4(_1759, _1760, _1761, 1.0));
        _1802 = dot(vec3(isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1802 = 1.0;
    }
    float _1813;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1804 = dot(vec4(cbModelParam._m0[40u]), vec4(_1759, _1760, _1761, 1.0));
        _1813 = dot(vec3(isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1804) ? 0.0 : (isnan(0.0) ? _1804 : max(0.0, _1804))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1813 = 1.0;
    }
    float _1817 = (_1813 * cbModelParam._m0[1u].x) + (_1802 * (1.0 - cbModelParam._m0[1u].x));
    float _1827 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _805);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1827 : min(cbModelParam._m0[25u].z, _1827));
    float _1909;
    float _1911;
    float _1913;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1876 = fma(_1051, cbModelParam._m0[13u].z, fma(_1047, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1043)) + cbModelParam._m0[13u].w;
        float _1880 = fma(_1051, cbModelParam._m0[14u].z, fma(_1047, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1043)) + cbModelParam._m0[14u].w;
        float _1884 = fma(_1051, cbModelParam._m0[15u].z, fma(_1047, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1043)) + cbModelParam._m0[15u].w;
        float _1887 = fma(_989, cbModelParam._m0[13u].z, fma(_988, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _987));
        float _1890 = fma(_989, cbModelParam._m0[14u].z, fma(_988, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _987));
        float _1893 = fma(_989, cbModelParam._m0[15u].z, fma(_988, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _987));
        float _1921;
        if (_1887 > 0.0)
        {
            _1921 = abs((1.0 - _1876) / _1887);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1887 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1876 + 1.0) / _1887);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1921 = frontier_phi_17_15_ladder;
        }
        float _2093;
        if (_1890 > 0.0)
        {
            _2093 = abs((1.0 - _1880) / _1890);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1890 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1880 + 1.0) / _1890);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2093 = frontier_phi_26_22_ladder;
        }
        float _2388;
        if (_1893 > 0.0)
        {
            _2388 = abs((1.0 - _1884) / _1893);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1893 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1884 + 1.0) / _1893);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2388 = frontier_phi_38_33_ladder;
        }
        float _2390 = isnan(_2093) ? _1921 : (isnan(_1921) ? _2093 : min(_1921, _2093));
        float _2391 = isnan(_2388) ? _2390 : (isnan(_2390) ? _2388 : min(_2390, _2388));
        float _2395 = (_2391 * _1887) + _1876;
        float _2396 = (_2391 * _1890) + _1880;
        float _2397 = (_2391 * _1893) + _1884;
        float _2398 = _2391 * 9.9999997473787516355514526367188e-05;
        float _2400 = (-1.0) - _2398;
        float _2402 = _2398 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2397 > _2402) || ((_2397 < _2400) || ((_2396 > _2402) || ((_2396 < _2400) || ((_2395 < _2400) || (_2395 > _2402))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2542 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2397, cbModelParam._m0[9u].z, fma(_2396, cbModelParam._m0[9u].y, _2395 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2397, cbModelParam._m0[10u].z, fma(_2396, cbModelParam._m0[10u].y, _2395 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2397, cbModelParam._m0[11u].z, fma(_2396, cbModelParam._m0[11u].y, _2395 * cbModelParam._m0[11u].x))), _1828);
            frontier_phi_16_38_ladder = _2542.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2542.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2542.x * cbModelParam._m0[1u].y;
        }
        _1909 = frontier_phi_16_38_ladder_2;
        _1911 = frontier_phi_16_38_ladder_1;
        _1913 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_987, _988, _989), _1828);
        _1909 = _1897.x * cbModelParam._m0[1u].y;
        _1911 = _1897.y * cbModelParam._m0[1u].y;
        _1913 = _1897.z * cbModelParam._m0[1u].y;
    }
    float _1917 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _805);
    float _1918 = isnan(_1917) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1917 : min(cbModelParam._m0[25u].w, _1917));
    float _2008;
    float _2010;
    float _2012;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1972 = fma(_1051, cbModelParam._m0[21u].z, fma(_1047, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1043)) + cbModelParam._m0[21u].w;
        float _1976 = fma(_1051, cbModelParam._m0[22u].z, fma(_1047, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1043)) + cbModelParam._m0[22u].w;
        float _1980 = fma(_1051, cbModelParam._m0[23u].z, fma(_1047, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1043)) + cbModelParam._m0[23u].w;
        float _1983 = fma(_989, cbModelParam._m0[21u].z, fma(_988, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _987));
        float _1986 = fma(_989, cbModelParam._m0[22u].z, fma(_988, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _987));
        float _1989 = fma(_989, cbModelParam._m0[23u].z, fma(_988, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _987));
        float _2098;
        if (_1983 > 0.0)
        {
            _2098 = abs((1.0 - _1972) / _1983);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1972 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2098 = frontier_phi_28_24_ladder;
        }
        float _2415;
        if (_1986 > 0.0)
        {
            _2415 = abs((1.0 - _1976) / _1986);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1986 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1976 + 1.0) / _1986);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2415 = frontier_phi_40_35_ladder;
        }
        float _2753;
        if (_1989 > 0.0)
        {
            _2753 = abs((1.0 - _1980) / _1989);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1989 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1980 + 1.0) / _1989);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2753 = frontier_phi_50_47_ladder;
        }
        float _2755 = isnan(_2415) ? _2098 : (isnan(_2098) ? _2415 : min(_2098, _2415));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _1983) + _1972;
        float _2761 = (_2756 * _1986) + _1976;
        float _2762 = (_2756 * _1989) + _1980;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2764 = (-1.0) - _2763;
        float _2766 = _2763 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2762 > _2766) || ((_2762 < _2764) || ((_2761 > _2766) || ((_2761 < _2764) || ((_2760 < _2764) || (_2760 > _2766))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2884 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2762, cbModelParam._m0[17u].z, fma(_2761, cbModelParam._m0[17u].y, _2760 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2762, cbModelParam._m0[18u].z, fma(_2761, cbModelParam._m0[18u].y, _2760 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2762, cbModelParam._m0[19u].z, fma(_2761, cbModelParam._m0[19u].y, _2760 * cbModelParam._m0[19u].x))), _1918);
            frontier_phi_25_50_ladder = _2884.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2884.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2884.x * cbModelParam._m0[1u].z;
        }
        _2008 = frontier_phi_25_50_ladder_2;
        _2010 = frontier_phi_25_50_ladder_1;
        _2012 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1992 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_987, _988, _989), _1918);
        _2008 = _1992.x * cbModelParam._m0[1u].z;
        _2010 = _1992.y * cbModelParam._m0[1u].z;
        _2012 = _1992.z * cbModelParam._m0[1u].z;
    }
    float _2025 = (((_1014 * _963) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2008 - _1909)) + _1909);
    float _2027 = (((_1014 * _965) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2010 - _1911)) + _1911);
    float _2029 = (((_1014 * _966) + _1015) * _979) * ((cbModelParam._m0[1u].w * (_2012 - _1913)) + _1913);
    float _2032 = fma(_2029, cbSceneParam._m0[89u].z, fma(_2027, cbSceneParam._m0[89u].y, _2025 * cbSceneParam._m0[89u].x));
    float _2035 = fma(_2029, cbSceneParam._m0[90u].z, fma(_2027, cbSceneParam._m0[90u].y, _2025 * cbSceneParam._m0[90u].x));
    float _2038 = fma(_2029, cbSceneParam._m0[91u].z, fma(_2027, cbSceneParam._m0[91u].y, _2025 * cbSceneParam._m0[91u].x));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2085 = _2072 / _2084;
    float _2086 = _2076 / _2084;
    float _2087 = _2080 / _2084;
    float _2234;
    float _2235;
    float _2236;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2114 = ((uint(_2087 > cbSceneParam._m0[59u].y) + uint(_2087 > cbSceneParam._m0[59u].x)) + uint(_2087 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2115 = _2114 + 43u;
        uint _2123 = _2114 + 44u;
        uint _2131 = _2114 + 45u;
        uint _2139 = _2114 + 46u;
        float _2150 = fma(_2084, cbSceneParam._m0[_2115].w, fma(_2080, cbSceneParam._m0[_2115].z, fma(_2076, cbSceneParam._m0[_2115].y, _2072 * cbSceneParam._m0[_2115].x)));
        float _2154 = fma(_2084, cbSceneParam._m0[_2123].w, fma(_2080, cbSceneParam._m0[_2123].z, fma(_2076, cbSceneParam._m0[_2123].y, _2072 * cbSceneParam._m0[_2123].x)));
        float _2162 = fma(_2084, cbSceneParam._m0[_2139].w, fma(_2080, cbSceneParam._m0[_2139].z, fma(_2076, cbSceneParam._m0[_2139].y, _2072 * cbSceneParam._m0[_2139].x)));
        float _2167 = cbSceneParam._m0[33u].z * _2162;
        float _2169 = cbSceneParam._m0[33u].w * _2162;
        float _2172 = fma(_2084, cbSceneParam._m0[_2131].w, fma(_2080, cbSceneParam._m0[_2131].z, fma(_2076, cbSceneParam._m0[_2131].y, _2072 * cbSceneParam._m0[_2131].x))) / _2162;
        float _2220 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
        float _4590 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2227 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2167 + _2150) / _2162, (_2169 + _2154) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2169 + _2150) / _2162, (_2154 - _2167) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2167) / _2162, (_2154 - _2169) / _2162), _2172), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 - _2169) / _2162, (_2167 + _2154) / _2162), _2172), 0.0)).x), vec4(0.25)));
        _2234 = 1.0 - (_2227 * cbSceneParam._m0[34u].x);
        _2235 = 1.0 - (_2227 * cbSceneParam._m0[34u].y);
        _2236 = 1.0 - (_2227 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2234 = 1.0;
        _2235 = 1.0;
        _2236 = 1.0;
    }
    float _2300;
    float _2302;
    float _2304;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2288 = fma(_2084, cbSceneParam._m0[63u].w, fma(_2080, cbSceneParam._m0[63u].z, fma(_2076, cbSceneParam._m0[63u].y, _2072 * cbSceneParam._m0[63u].x)));
        float _2289 = fma(_2084, cbSceneParam._m0[60u].w, fma(_2080, cbSceneParam._m0[60u].z, fma(_2076, cbSceneParam._m0[60u].y, _2072 * cbSceneParam._m0[60u].x))) / _2288;
        float _2290 = fma(_2084, cbSceneParam._m0[61u].w, fma(_2080, cbSceneParam._m0[61u].z, fma(_2076, cbSceneParam._m0[61u].y, _2072 * cbSceneParam._m0[61u].x))) / _2288;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2289 >= cbSceneParam._m0[64u].x) && (_2290 >= cbSceneParam._m0[64u].y)) && (_2289 <= cbSceneParam._m0[64u].z)) && (_2290 <= cbSceneParam._m0[64u].w))
        {
            float _2428 = fma(_2084, cbSceneParam._m0[62u].w, fma(_2080, cbSceneParam._m0[62u].z, fma(_2076, cbSceneParam._m0[62u].y, _2072 * cbSceneParam._m0[62u].x))) / _2288;
            float _2432 = isnan(cbSceneParam._m0[41u].w) ? _2428 : (isnan(_2428) ? cbSceneParam._m0[41u].w : max(_2428, cbSceneParam._m0[41u].w));
            float _2475 = (cbSceneParam._m0[33u].x - sqrt(((_2086 * _2086) + (_2085 * _2085)) + (_2087 * _2087))) * cbSceneParam._m0[33u].y;
            float _4606 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
            float _2482 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2289, cbSceneParam._m0[33u].w + _2290), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2289, _2290 - cbSceneParam._m0[33u].z), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].z, _2290 - cbSceneParam._m0[33u].w), _2432), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2289 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2290), _2432), 0.0)).x), vec4(0.25)));
            float _2486 = 1.0 - (_2482 * cbSceneParam._m0[34u].x);
            float _2487 = 1.0 - (_2482 * cbSceneParam._m0[34u].y);
            float _2488 = 1.0 - (_2482 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2488) ? _2236 : (isnan(_2236) ? _2488 : min(_2236, _2488));
            frontier_phi_37_36_ladder_1 = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_37_36_ladder_2 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
        }
        else
        {
            frontier_phi_37_36_ladder = _2236;
            frontier_phi_37_36_ladder_1 = _2235;
            frontier_phi_37_36_ladder_2 = _2234;
        }
        _2300 = frontier_phi_37_36_ladder_2;
        _2302 = frontier_phi_37_36_ladder_1;
        _2304 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2300 = _2234;
        _2302 = _2235;
        _2304 = _2236;
    }
    uvec4 _2309 = floatBitsToUint(cbInstanceData._m0[_254 + 5u]);
    uint _2311 = _2309.x * 14u;
    uint _2312 = _2311 + 13u;
    float _2319 = _979 + (-1.0);
    float _2324 = (cbLight._m0[_2312].x * _2319) + 1.0;
    float _2325 = (cbLight._m0[_2312].y * _2319) + 1.0;
    float _2326 = (cbLight._m0[_2312].z * _2319) + 1.0;
    float _2327 = (cbLight._m0[_2312].w * _2319) + 1.0;
    uint _2328 = _2311 + 5u;
    float _2334 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
    uint _2338 = _2311 + 4u;
    float _2347 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2351 = _2311 | 1u;
    float _2362 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_802, _803, _804));
    float _2365 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_802, _803, _804));
    float _4642 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _4653 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2370 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2372 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2379 = ((cbLight._m0[_2328].x * _2334) * _2372) + (((cbLight._m0[_2338].x * _2300) * _2347) * _2370);
    float _2380 = ((_2334 * cbLight._m0[_2328].y) * _2372) + (((cbLight._m0[_2338].y * _2302) * _2347) * _2370);
    float _2381 = ((_2334 * cbLight._m0[_2328].z) * _2372) + (((cbLight._m0[_2338].z * _2304) * _2347) * _2370);
    uvec4 _2385 = floatBitsToUint(cbLight._m0[_2311 + 12u]);
    bool _2387 = _2385.x == 0u;
    float _2489;
    float _2491;
    float _2493;
    if (_2387)
    {
        _2489 = _2379;
        _2491 = _2380;
        _2493 = _2381;
    }
    else
    {
        uint _2497 = _2311 + 6u;
        float _2513 = (dot(vec3(cbLight._m0[_2311 + 2u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2514 = _2513 * _2513;
        float _4664 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2515 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2516 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2489 = (((cbLight._m0[_2497].x * 0.3183098733425140380859375) * _2515) * _2516) + _2379;
        _2491 = (((cbLight._m0[_2497].y * 0.3183098733425140380859375) * _2515) * _2516) + _2380;
        _2493 = (((cbLight._m0[_2497].z * 0.3183098733425140380859375) * _2515) * _2516) + _2381;
    }
    bool _2496 = _2385.y == 0u;
    float _2551;
    float _2553;
    float _2555;
    if (_2496)
    {
        _2551 = _2489;
        _2553 = _2491;
        _2555 = _2493;
    }
    else
    {
        uint _2724 = _2311 + 7u;
        float _2740 = (dot(vec3(cbLight._m0[_2311 + 3u].xyz), vec3(_802, _803, _804)) * 0.5) + 0.5;
        float _2741 = _2740 * _2740;
        float _4680 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2742 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2743 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2551 = (((cbLight._m0[_2724].x * 0.3183098733425140380859375) * _2742) * _2743) + _2489;
        _2553 = (((cbLight._m0[_2724].y * 0.3183098733425140380859375) * _2742) * _2743) + _2491;
        _2555 = (((cbLight._m0[_2724].z * 0.3183098733425140380859375) * _2742) * _2743) + _2493;
    }
    uint _2558 = _2311 + 8u;
    float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _805) * 0.949999988079071044921875);
    float _2572 = _2571 * _2571;
    float _2573 = cbLight._m0[_2311].x + _881;
    float _2574 = cbLight._m0[_2311].y + _882;
    float _2575 = cbLight._m0[_2311].z + _883;
    float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
    float _2580 = _2579 * _2573;
    float _2581 = _2579 * _2574;
    float _2582 = _2579 * _2575;
    float _2583 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2311].xyz));
    float _4696 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
    float _2586 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _4707 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _2587 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2588 = dot(vec3(_802, _803, _804), vec3(_2580, _2581, _2582));
    float _4718 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2580, _2581, _2582));
    float _4729 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2572 * _2572;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2609 = 0.959999978542327880859375 - _960;
    float _2611 = 0.959999978542327880859375 - _961;
    float _2612 = 0.959999978542327880859375 - _962;
    float _2619 = 1.0 - _2572;
    float _2630 = (0.5 / (((_2587 * ((_2586 * _2619) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2619) + _2572) * _2586))) * _2586;
    float _4740 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
    float _2632 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    uint _2646 = _2311 + 9u;
    float _2657 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2351].w)) * _805) * 0.949999988079071044921875);
    float _2658 = _2657 * _2657;
    float _2659 = cbLight._m0[_2351].x + _881;
    float _2660 = cbLight._m0[_2351].y + _882;
    float _2661 = cbLight._m0[_2351].z + _883;
    float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
    float _2666 = _2665 * _2659;
    float _2667 = _2665 * _2660;
    float _2668 = _2665 * _2661;
    float _2669 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2351].xyz));
    float _4751 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2673 = dot(vec3(_802, _803, _804), vec3(_2666, _2667, _2668));
    float _4762 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2676 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2677 = dot(vec3(cbLight._m0[_2351].xyz), vec3(_2666, _2667, _2668));
    float _4773 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2681 = _2658 * _2658;
    float _2685 = ((_2676 * _2676) * (_2681 + (-1.0))) + 1.0;
    float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2699 = 1.0 - _2658;
    float _2709 = (0.5 / (((_2587 * ((_2672 * _2699) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2699) + _2658) * _2672))) * _2672;
    float _4784 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
    float _2711 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2681 / ((_2685 * _2685) * 3.141590118408203125));
    float _2721 = (((((_2692 * _2609) + _963) * cbLight._m0[_2646].x) * _2711) * _2334) + ((((cbLight._m0[_2558].x * _2300) * ((_2608 * _2609) + _963)) * _2632) * _2347);
    float _2722 = (((((_2692 * _2611) + _965) * cbLight._m0[_2646].y) * _2711) * _2334) + ((((cbLight._m0[_2558].y * _2302) * ((_2608 * _2611) + _965)) * _2632) * _2347);
    float _2723 = (((((_2692 * _2612) + _966) * cbLight._m0[_2646].z) * _2711) * _2334) + ((((cbLight._m0[_2558].z * _2304) * ((_2608 * _2612) + _966)) * _2632) * _2347);
    float _2779;
    float _2781;
    float _2783;
    if (_2387)
    {
        _2779 = _2721;
        _2781 = _2722;
        _2783 = _2723;
    }
    else
    {
        uint _2785 = _2311 + 2u;
        uint _2789 = _2311 + 10u;
        float _2803 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2785].w)) * _805) * 0.949999988079071044921875);
        float _2804 = _2803 * _2803;
        float _2805 = cbLight._m0[_2785].x + _881;
        float _2806 = cbLight._m0[_2785].y + _882;
        float _2807 = cbLight._m0[_2785].z + _883;
        float _2811 = inversesqrt(dot(vec3(_2805, _2806, _2807), vec3(_2805, _2806, _2807)));
        float _2812 = _2811 * _2805;
        float _2813 = _2811 * _2806;
        float _2814 = _2811 * _2807;
        float _2815 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2785].xyz));
        float _4795 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2819 = dot(vec3(_802, _803, _804), vec3(_2812, _2813, _2814));
        float _4806 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2823 = dot(vec3(cbLight._m0[_2785].xyz), vec3(_2812, _2813, _2814));
        float _4817 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2827 = _2804 * _2804;
        float _2831 = ((_2822 * _2822) * (_2827 + (-1.0))) + 1.0;
        float _2838 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2845 = 1.0 - _2804;
        float _2855 = (0.5 / (((_2587 * ((_2818 * _2845) + _2804)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2845) + _2804) * _2818))) * _2818;
        float _4828 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
        float _2857 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2827 / ((_2831 * _2831) * 3.141590118408203125));
        float _2858 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2779 = (((((_2838 * _2609) + _963) * cbLight._m0[_2789].x) * _2857) * _2858) + _2721;
        _2781 = (((((_2838 * _2611) + _965) * cbLight._m0[_2789].y) * _2857) * _2858) + _2722;
        _2783 = (((((_2838 * _2612) + _966) * cbLight._m0[_2789].z) * _2857) * _2858) + _2723;
    }
    float _2889;
    float _2891;
    float _2893;
    if (_2496)
    {
        _2889 = _2779;
        _2891 = _2781;
        _2893 = _2783;
    }
    else
    {
        uint _2900 = _2311 + 3u;
        uint _2904 = _2311 + 11u;
        float _2918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2900].w)) * _805) * 0.949999988079071044921875);
        float _2919 = _2918 * _2918;
        float _2920 = cbLight._m0[_2900].x + _881;
        float _2921 = cbLight._m0[_2900].y + _882;
        float _2922 = cbLight._m0[_2900].z + _883;
        float _2926 = inversesqrt(dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922)));
        float _2927 = _2926 * _2920;
        float _2928 = _2926 * _2921;
        float _2929 = _2926 * _2922;
        float _2930 = dot(vec3(_802, _803, _804), vec3(cbLight._m0[_2900].xyz));
        float _4844 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2934 = dot(vec3(_802, _803, _804), vec3(_2927, _2928, _2929));
        float _4855 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2937 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2938 = dot(vec3(cbLight._m0[_2900].xyz), vec3(_2927, _2928, _2929));
        float _4866 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
        float _2942 = _2919 * _2919;
        float _2946 = ((_2937 * _2937) * (_2942 + (-1.0))) + 1.0;
        float _2953 = exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0);
        float _2960 = 1.0 - _2919;
        float _2970 = (0.5 / (((_2587 * ((_2933 * _2960) + _2919)) + 9.9999999392252902907785028219223e-09) + (((_2587 * _2960) + _2919) * _2933))) * _2933;
        float _4877 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
        float _2972 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2942 / ((_2946 * _2946) * 3.141590118408203125));
        float _2973 = isnan(1.0) ? _2327 : (isnan(_2327) ? 1.0 : min(_2327, 1.0));
        _2889 = (((((_2953 * _2609) + _963) * cbLight._m0[_2904].x) * _2972) * _2973) + _2779;
        _2891 = (((((_2953 * _2611) + _965) * cbLight._m0[_2904].y) * _2972) * _2973) + _2781;
        _2893 = (((((_2953 * _2612) + _966) * cbLight._m0[_2904].z) * _2972) * _2973) + _2783;
    }
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    float _3047;
    float _3049;
    if (_2309.y == 0u)
    {
        uvec4 _2994 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2995 = _2994.x;
        uint _3006 = uint((float(_2994.y) * floor(float(uint(cbSceneParam._m0[85u].y * _902) / _2995))) + floor(float(uint(cbSceneParam._m0[85u].x * _901) / _2995)));
        float _3016 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3017 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
        uint _3020 = uint(isnan(14.0) ? _3017 : (isnan(_3017) ? 14.0 : min(_3017, 14.0)));
        uvec4 _3025 = texelFetch(g_lightClusterGridBuffer, int(((_3020 << 2u) + (_3006 << 6u)) >> 2u));
        uint _3026 = _3025.x;
        uint _3027 = _2994.z;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        float _3114;
        float _3116;
        if (((((1u << ((_3027 >> 4u) & 15u)) + 4294967295u) & _3026) == 0u) || ((_3027 & 240u) == 0u))
        {
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
            _3114 = 0.0;
            _3116 = 0.0;
        }
        else
        {
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3115;
            float _3117;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            uint _3265 = 0u;
            uint _3274;
            bool _3275;
            for (;;)
            {
                _3274 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3265 << 2u)) >> 2u)).x;
                _3275 = _3274 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3275)
                {
                    frontier_phi_71_pred = _3264;
                    frontier_phi_71_pred_1 = _3263;
                    frontier_phi_71_pred_2 = _3262;
                    frontier_phi_71_pred_3 = _3261;
                    frontier_phi_71_pred_4 = _3260;
                    frontier_phi_71_pred_5 = _3259;
                }
                else
                {
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    float _3409;
                    uint _3410;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3264;
                    _3410 = _3274;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    float _3336;
                    for (;;)
                    {
                        uint _3414 = uint(findLSB(_3410)) + (_3265 << 5u);
                        uint _3411 = (_3410 + 4294967295u) & _3410;
                        uint _3416 = _3414 * 48u;
                        vec4 _3430 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3436 = (_3414 * 48u) + 4u;
                        vec4 _3449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3436)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3436 + 3u)).x));
                        uint _3455 = (_3414 * 48u) + 8u;
                        vec3 _3466 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3455)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3455 + 2u)).x));
                        float _3470 = _3430.x - _2085;
                        float _3471 = _3430.y - _2086;
                        float _3472 = _3430.z - _2087;
                        float _3473 = dot(vec3(_3470, _3471, _3472), vec3(_3470, _3471, _3472));
                        float _3476 = inversesqrt(_3473);
                        float _3477 = _3476 * _3470;
                        float _3478 = _3476 * _3471;
                        float _3479 = _3476 * _3472;
                        float _3480 = dot(vec3(_920, _923, _926), vec3(_3477, _3478, _3479));
                        float _3485 = 1.0 - (_3473 * _3430.w);
                        float _4903 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3486 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3487 = sqrt(_3473) * _3449.w;
                        float _3490 = 1.39999997615814208984375 / (_3487 + 1.39999997615814208984375);
                        float _3491 = _3490 * _3490;
                        float _3494 = ((1.0 - _3491) * _3480) + _3491;
                        float _3497 = _3487 * _3487;
                        float _3501 = ((isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0))) * _3486) / ((_3497 * 0.699999988079071044921875) + 1.0);
                        float _3505 = (-0.0) - _2085;
                        float _3506 = (-0.0) - _2086;
                        float _3507 = (-0.0) - _2087;
                        float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                        float _3512 = _3511 * _3505;
                        float _3513 = _3511 * _3506;
                        float _3514 = _3511 * _3507;
                        float _3521 = exp2(log2(1.0 / ((_3497 * 3.5) + 5.0)) * 0.25);
                        float _3522 = 1.0 - _995;
                        float _3529 = sqrt(1.0 - ((1.0 - (_3522 * _3522)) * (1.0 - (_3521 * _3521))));
                        float _3530 = _3529 * _3529;
                        float _3531 = _3530 * _3530;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3534 = _3514 + _3479;
                        float _3538 = inversesqrt(dot(vec3(_3532, _3533, _3534), vec3(_3532, _3533, _3534)));
                        float _3542 = dot(vec3(_920, _923, _926), vec3(_3512, _3513, _3514));
                        float _4919 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3546 = dot(vec3(_920, _923, _926), vec3(_3538 * _3532, _3538 * _3533, _3538 * _3534));
                        float _4930 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                        float _3549 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3553 = ((_3549 * _3549) * (_3531 + (-1.0))) + 1.0;
                        float _3554 = _3490 * _3530;
                        float _3555 = _3554 * _3554;
                        float _3558 = ((1.0 - _3555) * _3480) + _3555;
                        float _4941 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3560 = 1.0 - _3530;
                        float _3570 = (0.5 / (((_3559 * ((_3545 * _3560) + _3530)) + 9.9999999392252902907785028219223e-09) + (((_3559 * _3560) + _3530) * _3545))) * _3559;
                        float _4952 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3581 = (((_3531 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3553 * _3553) * ((_3497 * 2.1991131305694580078125) + 3.141590118408203125))) * _3486;
                        _3334 = (_3501 * _3449.x) + _3407;
                        _3335 = (_3501 * _3449.y) + _3408;
                        _3336 = (_3501 * _3449.z) + _3409;
                        _3331 = (_3581 * _3466.x) + _3404;
                        _3332 = (_3581 * _3466.y) + _3405;
                        _3333 = (_3581 * _3466.z) + _3406;
                        if (_3411 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3336;
                            _3410 = _3411;
                        }
                    }
                    frontier_phi_71_pred = _3336;
                    frontier_phi_71_pred_1 = _3335;
                    frontier_phi_71_pred_2 = _3334;
                    frontier_phi_71_pred_3 = _3333;
                    frontier_phi_71_pred_4 = _3332;
                    frontier_phi_71_pred_5 = _3331;
                }
                _3117 = frontier_phi_71_pred;
                _3115 = frontier_phi_71_pred_1;
                _3113 = frontier_phi_71_pred_2;
                _3111 = frontier_phi_71_pred_3;
                _3109 = frontier_phi_71_pred_4;
                _3107 = frontier_phi_71_pred_5;
                uint _3266 = _3265 + 1u;
                if (_3266 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3259 = _3107;
                    _3260 = _3109;
                    _3261 = _3111;
                    _3262 = _3113;
                    _3263 = _3115;
                    _3264 = _3117;
                    _3265 = _3266;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
            _3114 = _3115;
            _3116 = _3117;
        }
        uvec4 _3120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3121 = _3120.z;
        uint _3123 = (_3121 >> 8u) & 15u;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        float _3235;
        float _3237;
        if (((4294967295u << _3123) & _3026) == 0u)
        {
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
            _3235 = _3114;
            _3237 = _3116;
        }
        else
        {
            float _3252 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _3253 = _3252 * _2085;
            float _3254 = _3252 * _2086;
            float _3255 = _3252 * _2087;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3123 < ((_3121 >> 12u) & 15u))
            {
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3236;
                float _3238;
                float _3387 = _3106;
                float _3388 = _3108;
                float _3389 = _3110;
                float _3390 = _3112;
                float _3391 = _3114;
                float _3392 = _3116;
                uint _3393 = _3123;
                uint _3402;
                bool _3403;
                for (;;)
                {
                    _3402 = texelFetch(g_lightClassification, int((((_3020 << 5u) + (_3006 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                    _3403 = _3402 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3403)
                    {
                        frontier_phi_82_pred = _3392;
                        frontier_phi_82_pred_1 = _3391;
                        frontier_phi_82_pred_2 = _3390;
                        frontier_phi_82_pred_3 = _3389;
                        frontier_phi_82_pred_4 = _3388;
                        frontier_phi_82_pred_5 = _3387;
                    }
                    else
                    {
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        float _3613 = _3392;
                        uint _3614 = _3402;
                        uint _3615;
                        vec4 _3640;
                        float _3641;
                        vec4 _3656;
                        vec3 _3668;
                        vec4 _3683;
                        vec4 _3698;
                        float _3744;
                        bool _3745;
                        for (;;)
                        {
                            uint _3625 = ((_3393 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3614));
                            _3615 = (_3614 + 4294967295u) & _3614;
                            uint _3627 = _3625 * 40u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            _3641 = _3640.w;
                            uint _3643 = (_3625 * 40u) + 4u;
                            _3656 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 3u)).x));
                            uint _3658 = (_3625 * 40u) + 8u;
                            _3668 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3658 + 2u)).x));
                            uint _3670 = (_3625 * 40u) + 16u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3625 * 40u) + 20u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3625 * 40u) + 24u;
                            vec4 _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3719 = (_3625 * 40u) + 28u;
                            vec4 _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            _3744 = fma(_2087, _3732.z, fma(_2086, _3732.y, _3732.x * _2085)) + _3732.w;
                            _3745 = !((fma(_2087, _3713.z, fma(_2086, _3713.y, _3713.x * _2085)) + _3713.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3745)
                            {
                                float _3772 = _3640.x - _2085;
                                float _3773 = _3640.y - _2086;
                                float _3774 = _3640.z - _2087;
                                float _3775 = dot(vec3(_3772, _3773, _3774), vec3(_3772, _3773, _3774));
                                float _3778 = inversesqrt(_3775);
                                float _3779 = _3778 * _3772;
                                float _3780 = _3778 * _3773;
                                float _3781 = _3778 * _3774;
                                float _3785 = 1.0 - (_3775 / (_3641 * _3641));
                                float _4963 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3786 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3790 = sqrt(_3775) * _3656.w;
                                float _3792 = 1.39999997615814208984375 / (_3790 + 1.39999997615814208984375);
                                float _3793 = _3792 * _3792;
                                float _3796 = ((1.0 - _3793) * dot(vec3(_3779, _3780, _3781), vec3(_920, _923, _926))) + _3793;
                                float _3799 = _3790 * _3790;
                                float _3803 = (fma(_2087, _3683.z, fma(_2086, _3683.y, _3683.x * _2085)) + _3683.w) / _3744;
                                float _3804 = (fma(_2087, _3698.z, fma(_2086, _3698.y, _3698.x * _2085)) + _3698.w) / _3744;
                                float _3808 = 1.0 - dot(vec2(_3803, _3804), vec2(_3803, _3804));
                                float _4979 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3810 = _3809 * (((isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0))) * _3786) / ((_3799 * 0.699999988079071044921875) + 1.0));
                                float _3822 = exp2(log2(1.0 / ((_3799 * 3.5) + 5.0)) * 0.25);
                                float _3823 = 1.0 - _995;
                                float _3830 = sqrt(1.0 - ((1.0 - (_3823 * _3823)) * (1.0 - (_3822 * _3822))));
                                float _3831 = _3830 * _3830;
                                float _3832 = _3831 * _3831;
                                float _3833 = _3779 - _3253;
                                float _3834 = _3780 - _3254;
                                float _3835 = _3781 - _3255;
                                float _3839 = inversesqrt(dot(vec3(_3833, _3834, _3835), vec3(_3833, _3834, _3835)));
                                float _3843 = dot(vec3(_920, _923, _926), vec3((-0.0) - _3253, (-0.0) - _3254, (-0.0) - _3255));
                                float _4990 = isnan(0.0) ? _3843 : (isnan(_3843) ? 0.0 : max(_3843, 0.0));
                                float _3846 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3847 = dot(vec3(_920, _923, _926), vec3(_3839 * _3833, _3839 * _3834, _3839 * _3835));
                                float _5001 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3850 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3854 = ((_3850 * _3850) * (_3832 + (-1.0))) + 1.0;
                                float _3855 = _3792 * _3831;
                                float _3856 = _3855 * _3855;
                                float _3862 = ((1.0 - _3856) * dot(vec3(_920, _923, _926), vec3(_3779, _3780, _3781))) + _3856;
                                float _5012 = isnan(0.0) ? _3862 : (isnan(_3862) ? 0.0 : max(_3862, 0.0));
                                float _3863 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3864 = 1.0 - _3831;
                                float _3874 = (0.5 / (((_3863 * ((_3846 * _3864) + _3831)) + 9.9999999392252902907785028219223e-09) + (((_3863 * _3864) + _3831) * _3846))) * _3863;
                                float _5023 = isnan(0.0) ? _3874 : (isnan(_3874) ? 0.0 : max(_3874, 0.0));
                                float _3884 = (_3809 * _3786) * (((_3832 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3854 * _3854) * ((_3799 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3810 * _3656.z;
                                frontier_phi_88_pred_1 = _3810 * _3656.y;
                                frontier_phi_88_pred_2 = _3810 * _3656.x;
                                frontier_phi_88_pred_3 = _3884 * _3668.z;
                                frontier_phi_88_pred_4 = _3884 * _3668.y;
                                frontier_phi_88_pred_5 = _3884 * _3668.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3893 = frontier_phi_88_pred;
                            _3892 = frontier_phi_88_pred_1;
                            _3891 = frontier_phi_88_pred_2;
                            _3890 = frontier_phi_88_pred_3;
                            _3889 = frontier_phi_88_pred_4;
                            _3888 = frontier_phi_88_pred_5;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            _3597 = _3890 + _3610;
                            if (_3615 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3615;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3600;
                        frontier_phi_82_pred_1 = _3599;
                        frontier_phi_82_pred_2 = _3598;
                        frontier_phi_82_pred_3 = _3597;
                        frontier_phi_82_pred_4 = _3596;
                        frontier_phi_82_pred_5 = _3595;
                    }
                    _3238 = frontier_phi_82_pred;
                    _3236 = frontier_phi_82_pred_1;
                    _3234 = frontier_phi_82_pred_2;
                    _3232 = frontier_phi_82_pred_3;
                    _3230 = frontier_phi_82_pred_4;
                    _3228 = frontier_phi_82_pred_5;
                    uint _3394 = _3393 + 1u;
                    if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3387 = _3228;
                        _3388 = _3230;
                        _3389 = _3232;
                        _3390 = _3234;
                        _3391 = _3236;
                        _3392 = _3238;
                        _3393 = _3394;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3234;
                frontier_phi_63_64_ladder_1 = _3238;
                frontier_phi_63_64_ladder_2 = _3236;
                frontier_phi_63_64_ladder_3 = _3232;
                frontier_phi_63_64_ladder_4 = _3230;
                frontier_phi_63_64_ladder_5 = _3228;
            }
            else
            {
                frontier_phi_63_64_ladder = _3112;
                frontier_phi_63_64_ladder_1 = _3116;
                frontier_phi_63_64_ladder_2 = _3114;
                frontier_phi_63_64_ladder_3 = _3110;
                frontier_phi_63_64_ladder_4 = _3108;
                frontier_phi_63_64_ladder_5 = _3106;
            }
            _3227 = frontier_phi_63_64_ladder_5;
            _3229 = frontier_phi_63_64_ladder_4;
            _3231 = frontier_phi_63_64_ladder_3;
            _3233 = frontier_phi_63_64_ladder;
            _3235 = frontier_phi_63_64_ladder_2;
            _3237 = frontier_phi_63_64_ladder_1;
        }
        float _3242 = isnan(1.0) ? _979 : (isnan(_979) ? 1.0 : min(_979, 1.0));
        _3039 = (_3242 * _3233) + _2551;
        _3041 = (_3242 * _3235) + _2553;
        _3043 = (_3242 * _3237) + _2555;
        _3045 = ((_3227 * _963) * _3242) + _2889;
        _3047 = ((_3229 * _965) * _3242) + _2891;
        _3049 = ((_3231 * _966) * _3242) + _2893;
    }
    else
    {
        _3039 = _2551;
        _3041 = _2553;
        _3043 = _2555;
        _3045 = _2889;
        _3047 = _2891;
        _3049 = _2893;
    }
    float _5039 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _5050 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _5061 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _3066 = ((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3039 + ((isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0))) * _979))) + ((_3045 + ((isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3067 = ((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3041 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _979))) + ((_3047 + ((isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    float _3068 = ((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3043 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _979))) + ((_3049 + ((isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))) * _1817)) * cbPerFrame._m0[3u].x);
    uint _3069 = _254 + 6u;
    float _3077 = _901 / cbSceneParam._m0[86u].x;
    float _3078 = _902 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _824 : (isnan(_824) ? cbSceneParam._m0[77u].w : min(_824, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_824 > cbSceneParam._m0[78u].w)
    {
        float _3131 = isnan(_824) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _824 : min(cbSceneParam._m0[80u].w, _824));
        float _3132 = _3131 / _824;
        float _3143 = _3132 * _874;
        float _3144 = _875 * _3132;
        float _3145 = (-0.0) - _3144;
        float _3147 = _3132 * _876;
        float _3149 = (cbSceneParam._m0[77u].w * _3145) / _3131;
        float _3150 = _3149 + cbSceneParam._m0[79u].w;
        float _3151 = cbSceneParam._m0[79u].w - _3144;
        float _3157 = sqrt(((_3143 * _3143) + (_3144 * _3144)) + (_3147 * _3147));
        float _3160 = (1.0 - (cbSceneParam._m0[77u].w / _3131)) * _3157;
        float _3165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3344;
        if (abs((_3145 - _3149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3344 = ((((_3150 > 0.0) ? exp2(_3165 * _3150) : (2.0 - exp2(_3167 * _3150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3160;
        }
        else
        {
            float _3288 = 1.0 / cbSceneParam._m0[80u].x;
            float _3289 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : max(_3150, _3151));
            float _3290 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : min(_3150, _3151));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            _3344 = ((abs(_3157 / _3145) * cbSceneParam._m0[80u].y) * ((((_3299 - _3300) * 2.0) - ((exp2(_3165 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0)))) - exp2(_3165 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0))))) * _3288)) - ((exp2(_3167 * _3299) - exp2(_3167 * _3300)) * _3288))) + (_3160 * cbSceneParam._m0[80u].z);
        }
        vec4 _3346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3355 = exp2((_3344 * (-1.44269502162933349609375)) * (1.0 - _3346.w));
        float _3356 = log2(_3355);
        float _3372 = log2(_3097);
        _3169 = (exp2(_3372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].x)) * _3346.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3171 = (exp2(_3372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].y)) * _3346.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3173 = (exp2(_3372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].z)) * _3346.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3175 = _3355 * _3097;
    }
    else
    {
        _3169 = _3094;
        _3171 = _3095;
        _3173 = _3096;
        _3175 = _3097;
    }
    bool _3382;
    vec4 _3185;
    vec4 _3207;
    float _3209;
    float _3213;
    float _3214;
    float _3215;
    float _3216;
    bool _3226;
    for (;;)
    {
        _3185 = cbMatDynParam._m0[0u];
        float _3187 = roundEven(_3185.y);
        bool _3188 = _3187 == 3.0;
        float _3189 = log2(_3175);
        float _3196 = exp2(_3189 * cbSceneParam._m0[78u].x) * _3066;
        float _3197 = exp2(_3189 * cbSceneParam._m0[78u].y) * _3067;
        float _3198 = exp2(_3189 * cbSceneParam._m0[78u].z) * _3068;
        float _3205 = _890 + (-0.5);
        _3207 = cbMtdParam._m0[1u];
        _3209 = _3207.y * _3205;
        float _3212 = (_3187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3213 = _3212 * (_3188 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3169)));
        _3214 = _3212 * (_3188 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3171)));
        _3215 = _3212 * (_3188 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3173)));
        _3216 = _3205 * 0.999000012874603271484375;
        _3226 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3226)
        {
            if ((cbInstanceData._m0[_254 + 7u].x + _3216) < 0.5)
            {
                _3382 = true;
                break;
            }
        }
        uint _3323 = _939 + uint(_3185.w);
        if ((cbInstanceData._m0[_3323].w < 1.0) && ((cbInstanceData._m0[_3323].w + _3216) < 0.5))
        {
            _3382 = true;
            break;
        }
        if ((_3209 + 1.0) < _3207.x)
        {
            _3382 = true;
            break;
        }
        _3382 = false;
        break;
    }
    float _3586;
    if (_3382)
    {
        discard_state = true;
        _3586 = 0.0;
    }
    else
    {
        _3586 = cbInstanceData._m0[_3069].w;
    }
    SV_Target.x = _3213;
    SV_Target.y = _3214;
    SV_Target.z = _3215;
    SV_Target.w = _3586;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3069].w;
    discard_exit();
}


