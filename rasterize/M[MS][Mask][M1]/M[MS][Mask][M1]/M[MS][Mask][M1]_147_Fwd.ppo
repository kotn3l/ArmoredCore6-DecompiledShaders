#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1647;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _250 = _249 * _241;
    float _251 = _249 * _242;
    float _252 = _249 * _243;
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = _256 * NORMAL.x;
    float _258 = _256 * NORMAL.y;
    float _259 = _256 * NORMAL.z;
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _264 = _263 * TANGENT.x;
    float _265 = _263 * TANGENT.y;
    float _266 = _263 * TANGENT.z;
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _283 = cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x;
    float _285 = cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x;
    float _287 = sqrt((_283 + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + _285);
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _418 = _416.x;
    float _430 = dot(vec4(_418, _416.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _447 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_418 - _430) * cbMtdParam._m0[23u].w) + _430) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3969 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _448 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _455 = (_448 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _456 = (_448 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _457 = (_448 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _474 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _494 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _496 = _494.x;
    float _506 = dot(vec4(_496, _494.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _520 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_496 - _506) * cbMtdParam._m0[23u].w) + _506) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3980 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _521 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _528 = (_521 * ((_474.x * cbMtdParam._m0[13u].x) - _455)) + _455;
    float _529 = (_521 * ((_474.y * cbMtdParam._m0[13u].y) - _456)) + _456;
    float _530 = (_521 * ((_474.z * cbMtdParam._m0[13u].z) - _457)) + _457;
    vec4 _549 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _288) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _289) + cbTextureTilingScale._m0[24u].w));
    vec4 _566 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _568 = _566.x;
    float _578 = dot(vec4(_568, _566.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _590 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _377.z) * 2.0) - ((((_568 - _578) * cbMtdParam._m0[23u].w) + _578) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3991 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _591 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _604 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_591 * ((_549.x * cbMtdParam._m0[14u].x) - _528)) + _528);
    float _607 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_591 * ((_549.y * cbMtdParam._m0[14u].y) - _529)) + _529);
    float _610 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_591 * ((_549.z * cbMtdParam._m0[14u].z) - _530)) + _530);
    vec4 _628 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _648 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _667 = _665.x;
    float _668 = _665.y;
    float _669 = _665.z;
    float _676 = ((_648.x - _667) * _448) + _667;
    float _677 = ((_648.y - _668) * _448) + _668;
    float _678 = ((_648.z - _669) * _448) + _669;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _701 = ((_690.x - _676) * _521) + _676;
    float _702 = ((_690.y - _677) * _521) + _677;
    float _703 = ((_690.z - _678) * _521) + _678;
    vec4 _715 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _288) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _289) + cbTextureTilingScale._m0[23u].w));
    float _728 = ((_715.z - _703) * _591) + _703;
    float _731 = ((((_715.x - _701) * _591) + _701) * 2.0) + (-1.0);
    float _733 = ((((_715.y - _702) * _591) + _702) * 2.0) + (-1.0);
    float _734 = dot(vec2(_731, _733), vec2(_731, _733));
    float _4002 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))));
    vec4 _753 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _765 = (((_753.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _731;
    float _766 = (((_753.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _733;
    float _769 = fma(_739, _257, fma(_766, _264, _765 * _250));
    float _772 = fma(_739, _258, fma(_766, _265, _765 * _251));
    float _775 = fma(_739, _259, fma(_766, _266, _765 * _252));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _808 = _806.x;
    float _809 = 1.0 - _808;
    float _817 = (cbMtdParam._m0[19u].x + dot(vec4(_779 * _769, _779 * _772, _779 * _775, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_808 - _809) * cbMtdParam._m0[24u].z) + _809) * cbMtdParam._m0[21u].z);
    float _4013 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
    float _818 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
    float _820 = (-0.0) - cbMtdParam._m0[24u].x;
    float _822 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
    float _823 = isnan(1.0) ? _822 : (isnan(_822) ? 1.0 : min(_822, 1.0));
    float _830 = _818 - ((_818 * TEXCOORD_8.x) * _823);
    float _831 = _818 - ((_818 * TEXCOORD_8.y) * _823);
    float _832 = _818 - ((_818 * TEXCOORD_8.z) * _823);
    float _839 = (_830 * ((_628.x * cbMtdParam._m0[18u].x) - _604)) + _604;
    float _840 = (_831 * ((_628.y * cbMtdParam._m0[18u].y) - _607)) + _607;
    float _841 = (_832 * ((_628.z * cbMtdParam._m0[18u].z) - _610)) + _610;
    float _848 = sqrt((_283 + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + _285);
    float _849 = _848 * TEXCOORD.z;
    float _850 = _848 * TEXCOORD.w;
    vec4 _862 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _849) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _850) + cbTextureTilingScale._m0[19u].w));
    float _864 = _862.x;
    float _865 = 1.0 - _864;
    float _891 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_864 - _865) * cbMtdParam._m0[24u].w) + _865) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4034 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _892 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _900 = ((((cbMtdParam._m0[10u].x - _839) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _892) + _839;
    float _901 = ((((cbMtdParam._m0[10u].y - _840) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _892) + _840;
    float _902 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _841)) * _892) + _841;
    vec4 _928 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _930 = _928.x;
    float _947 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _930) * _448) + _930;
    float _964 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _947) * _521) + _947;
    float _981 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _288) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _289) + cbTextureTilingScale._m0[10u].w)).x - _964) * _591) + _964;
    float _985 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _981) * cbMtdParam._m0[19u].z) + _981;
    float _987 = _985 - (_985 * _830);
    float _989 = _987 - (_987 * _892);
    float _993 = (cbMtdParam._m0[19u].w * (_753.z - _728)) + _728;
    vec4 _1009 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _1016 = (_1009.x * 2.0) + (-1.0);
    float _1017 = (_1009.y * 2.0) + (-1.0);
    float _1018 = dot(vec2(_1016, _1017), vec2(_1016, _1017));
    float _4045 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1026 = ((_1009.z - _993) * _830) + _993;
    float _1029 = ((cbMtdParam._m0[23u].x - _1026) * _892) + _1026;
    vec4 _1052 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _849) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _850) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1058 = (_1052.x * 2.0) + (-1.0);
    float _1059 = (_1052.y * 2.0) + (-1.0);
    float _1060 = dot(vec2(_1058, _1059), vec2(_1058, _1059));
    float _4056 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _1075 = ((sqrt(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) - _739) * _832) + _739;
    float _1078 = (((_1016 - _765) * _830) + _765) + (cbMtdParam._m0[21u].x * _765);
    float _1079 = (((_1017 - _766) * _831) + _766) + (cbMtdParam._m0[21u].x * _766);
    float _1090 = (((_1058 - _1078) + (_1078 * cbMtdParam._m0[22u].z)) * _892) + _1078;
    float _1091 = (((_1059 - _1079) + (_1079 * cbMtdParam._m0[22u].z)) * _892) + _1079;
    float _1092 = (_892 * (sqrt(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) - _1075)) + _1075;
    float _1094 = cbMtdParam._m0[22u].x + _753.w;
    float _1097 = fma(_1092, _257, fma(_1091, _264, _1090 * _250));
    float _1100 = fma(_1092, _258, fma(_1091, _265, _1090 * _251));
    float _1103 = fma(_1092, _259, fma(_1091, _266, _1090 * _252));
    float _1107 = inversesqrt(dot(vec3(_1097, _1100, _1103), vec3(_1097, _1100, _1103)));
    float _1108 = _1107 * _1097;
    float _1109 = _1107 * _1100;
    float _1110 = _1107 * _1103;
    float _4067 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1111 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _4089 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _4100 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _4111 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4122 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _1116 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _1130 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1170 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1180 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1170);
    float _1181 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1170);
    float _1182 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1170);
    float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
    float _1187 = _1180 * _1186;
    float _1188 = _1181 * _1186;
    float _1189 = _1182 * _1186;
    float _1195 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1196 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1214 = fma(_1110, cbSceneParam._m0[5u].z, fma(_1109, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1108));
    float _1217 = fma(_1110, cbSceneParam._m0[6u].z, fma(_1109, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1108));
    float _1220 = fma(_1110, cbSceneParam._m0[7u].z, fma(_1109, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1108));
    uint _1234 = (_269 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1240 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0)))) * cbInstanceData._m0[_1234].x;
    float _1241 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_1234].y;
    float _1242 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_1234].z;
    float _4133 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _1243 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1244 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _1245 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1246 = 1.0 - _1116;
    float _1247 = _1243 * _1246;
    float _1248 = _1244 * _1246;
    float _1249 = _1245 * _1246;
    float _1254 = (_1243 + (-0.039999999105930328369140625)) * _1116;
    float _1255 = (_1244 + (-0.039999999105930328369140625)) * _1116;
    float _1256 = (_1245 + (-0.039999999105930328369140625)) * _1116;
    float _1257 = _1254 + 0.039999999105930328369140625;
    float _1259 = _1255 + 0.039999999105930328369140625;
    float _1260 = _1256 + 0.039999999105930328369140625;
    vec4 _1269 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1195, cbSceneParam._m0[86u].y * _1196));
    float _1273 = ((isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * TEXCOORD_5.w) * _1269.x;
    float _1274 = dot(vec3(_1108, _1109, _1110), vec3(_1187, _1188, _1189));
    float _1277 = _1274 * 2.0;
    float _1281 = (_1277 * _1108) - _1187;
    float _1282 = (_1277 * _1109) - _1188;
    float _1283 = (_1277 * _1110) - _1189;
    float _1287 = abs(dot(vec3(_1187, _1188, _1189), vec3(_1108, _1109, _1110)));
    float _4166 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
    float _1289 = sqrt(_1111);
    float _1302 = exp2((_1289 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1289 * 3.0));
    float _1308 = (1.0 - _1302) * ((_1289 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1309 = _1302 * _1289;
    float _1337 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1341 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1345 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1646;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    float _1652;
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1371 = fma(_1345, cbModelParam._m0[26u].z, fma(_1341, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1337));
        float _1375 = fma(_1345, cbModelParam._m0[27u].z, fma(_1341, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1337));
        float _1379 = fma(_1345, cbModelParam._m0[28u].z, fma(_1341, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1337));
        float _1404 = _1337 + _1108;
        float _1405 = _1341 + _1109;
        float _1406 = _1345 + _1110;
        float _1416 = fma(_1406, cbModelParam._m0[26u].z, fma(_1405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1404)) - _1371;
        float _1417 = fma(_1406, cbModelParam._m0[27u].z, fma(_1405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1404)) - _1375;
        float _1418 = fma(_1406, cbModelParam._m0[28u].z, fma(_1405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1404)) - _1379;
        float _1422 = inversesqrt(dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418)));
        float _1435 = ((_1422 * _1416) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1371 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1436 = ((_1422 * _1417) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1375 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1437 = ((_1422 * _1418) / cbModelParam._m0[34u].z) + ((((((_1379 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1454 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1435, _1436, _1437), 0.0);
        float _1474 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1440.x + (-0.5));
        float _1476 = _1474 * (_1440.y + (-0.5));
        float _1477 = _1474 * (_1440.z + (-0.5));
        float _1484 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1447.x + (-0.5));
        float _1486 = _1484 * (_1447.y + (-0.5));
        float _1487 = _1484 * (_1447.z + (-0.5));
        float _1494 = exp2((_1454.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1454.x + (-0.5));
        float _1496 = _1494 * (_1454.y + (-0.5));
        float _1497 = _1494 * (_1454.z + (-0.5));
        float _1504 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1461.x + (-0.5));
        float _1506 = _1504 * (_1461.y + (-0.5));
        float _1507 = _1504 * (_1461.z + (-0.5));
        float _1508 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1509 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1510 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1511 = _1475 * 0.5;
        float _1512 = _1485 * 0.5;
        float _1513 = _1495 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1528 = (dot(vec3(_1108, _1109, _1110), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1538 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1508 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4214 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1540 + 1.0))) + _1545) * _1508;
        float _1555 = _1476 * 0.5;
        float _1556 = _1486 * 0.5;
        float _1557 = _1496 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_1108, _1109, _1110), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1509 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4247 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1582 + 1.0))) + _1587) * _1509;
        float _1597 = _1477 * 0.5;
        float _1598 = _1487 * 0.5;
        float _1599 = _1497 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_1108, _1109, _1110), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1510 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4280 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1624 + 1.0))) + _1629) * _1510;
        _1646 = _1477;
        _1648 = _1476;
        _1649 = _1475;
        _1650 = _1487;
        _1651 = _1486;
        _1652 = _1485;
        _1653 = _1497;
        _1654 = _1496;
        _1655 = _1495;
        _1656 = _1510;
        _1657 = _1509;
        _1658 = _1508;
        _1659 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1660 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
        _1661 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
    }
    else
    {
        _1646 = _1647;
        _1648 = _1647;
        _1649 = _1647;
        _1650 = _1647;
        _1651 = _1647;
        _1652 = _1647;
        _1653 = _1647;
        _1654 = _1647;
        _1655 = _1647;
        _1656 = _1647;
        _1657 = _1647;
        _1658 = _1647;
        _1659 = 0.0;
        _1660 = 0.0;
        _1661 = 0.0;
    }
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    float _1961;
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1684 = fma(_1345, cbModelParam._m0[30u].z, fma(_1341, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337));
        float _1688 = fma(_1345, cbModelParam._m0[31u].z, fma(_1341, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337));
        float _1692 = fma(_1345, cbModelParam._m0[32u].z, fma(_1341, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337));
        float _1715 = _1337 + _1108;
        float _1716 = _1341 + _1109;
        float _1717 = _1345 + _1110;
        float _1727 = fma(_1717, cbModelParam._m0[30u].z, fma(_1716, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1715)) - _1684;
        float _1728 = fma(_1717, cbModelParam._m0[31u].z, fma(_1716, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1715)) - _1688;
        float _1729 = fma(_1717, cbModelParam._m0[32u].z, fma(_1716, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1715)) - _1692;
        float _1733 = inversesqrt(dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729)));
        float _1746 = ((_1733 * _1727) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1684 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1747 = ((_1733 * _1728) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1688 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1748 = ((_1733 * _1729) / cbModelParam._m0[35u].z) + ((((((_1692 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        vec4 _1771 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1746, _1747, _1748), 0.0);
        float _1783 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1784 = _1783 * (_1750.x + (-0.5));
        float _1785 = _1783 * (_1750.y + (-0.5));
        float _1786 = _1783 * (_1750.z + (-0.5));
        float _1793 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1794 = _1793 * (_1757.x + (-0.5));
        float _1795 = _1793 * (_1757.y + (-0.5));
        float _1796 = _1793 * (_1757.z + (-0.5));
        float _1803 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1804 = _1803 * (_1764.x + (-0.5));
        float _1805 = _1803 * (_1764.y + (-0.5));
        float _1806 = _1803 * (_1764.z + (-0.5));
        float _1813 = exp2((_1771.w + (-0.5)) * 20.0) * 2.0;
        float _1814 = _1813 * (_1771.x + (-0.5));
        float _1815 = _1813 * (_1771.y + (-0.5));
        float _1816 = _1813 * (_1771.z + (-0.5));
        float _1817 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1818 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1819 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1820 = _1784 * 0.5;
        float _1821 = _1794 * 0.5;
        float _1822 = _1804 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_1108, _1109, _1110), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1817 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4343 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1847 + 1.0))) + _1852) * _1817;
        float _1862 = _1785 * 0.5;
        float _1863 = _1795 * 0.5;
        float _1864 = _1805 * 0.5;
        float _1865 = dot(vec3(_1862, _1863, _1864), vec3(_1862, _1863, _1864));
        float _1870 = (_1865 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1865);
        float _1878 = (dot(vec3(_1108, _1109, _1110), vec3(_1870 * _1862, _1870 * _1863, _1870 * _1864)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1887 = sqrt(((_1863 * _1863) + (_1862 * _1862)) + (_1864 * _1864)) / (_1818 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1888 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1889 = _1888 * 2.0;
        float _1893 = (1.0 - _1888) / (_1888 + 1.0);
        float _4376 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1894 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1903 = ((((1.0 - _1894) * (_1889 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1889 + 1.0))) + _1894) * _1818;
        float _1904 = _1786 * 0.5;
        float _1905 = _1796 * 0.5;
        float _1906 = _1806 * 0.5;
        float _1907 = dot(vec3(_1904, _1905, _1906), vec3(_1904, _1905, _1906));
        float _1912 = (_1907 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1907);
        float _1920 = (dot(vec3(_1108, _1109, _1110), vec3(_1912 * _1904, _1912 * _1905, _1912 * _1906)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1929 = sqrt(((_1905 * _1905) + (_1904 * _1904)) + (_1906 * _1906)) / (_1819 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1930 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1931 = _1930 * 2.0;
        float _1935 = (1.0 - _1930) / (_1930 + 1.0);
        float _4409 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1936 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1945 = ((((1.0 - _1936) * (_1931 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1931 + 1.0))) + _1936) * _1819;
        _1953 = _1786;
        _1954 = _1785;
        _1955 = _1784;
        _1956 = _1796;
        _1957 = _1795;
        _1958 = _1794;
        _1959 = _1806;
        _1960 = _1805;
        _1961 = _1804;
        _1962 = _1819;
        _1963 = _1818;
        _1964 = _1817;
        _1965 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
        _1966 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)));
        _1967 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)));
    }
    else
    {
        _1953 = _1647;
        _1954 = _1647;
        _1955 = _1647;
        _1956 = _1647;
        _1957 = _1647;
        _1958 = _1647;
        _1959 = _1647;
        _1960 = _1647;
        _1961 = _1647;
        _1962 = _1647;
        _1963 = _1647;
        _1964 = _1647;
        _1965 = 0.0;
        _1966 = 0.0;
        _1967 = 0.0;
    }
    float _1977 = (cbModelParam._m0[1u].x * (_1965 - _1659)) + _1659;
    float _1978 = (cbModelParam._m0[1u].x * (_1966 - _1660)) + _1660;
    float _1979 = (cbModelParam._m0[1u].x * (_1967 - _1661)) + _1661;
    float _2000 = fma(_1979, cbSceneParam._m0[89u].z, fma(_1978, cbSceneParam._m0[89u].y, _1977 * cbSceneParam._m0[89u].x));
    float _2003 = fma(_1979, cbSceneParam._m0[90u].z, fma(_1978, cbSceneParam._m0[90u].y, _1977 * cbSceneParam._m0[90u].x));
    float _2006 = fma(_1979, cbSceneParam._m0[91u].z, fma(_1978, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1977));
    float _2021 = _1281 * 0.5;
    float _2022 = _1282 * 0.5;
    float _2023 = _1283 * 0.5;
    float _2024 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1955, _1958, _1961, _1964));
    float _2027 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1954, _1957, _1960, _1963));
    float _2030 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1953, _1956, _1959, _1962));
    float _2064;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2037 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1646, _1650, _1653, _1656));
        float _2041 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1648, _1651, _1654, _1657));
        float _2045 = dot(vec4(_2021, _2022, _2023, 1.0), vec4(_1649, _1652, _1655, _1658));
        float _2052 = dot(vec4(cbModelParam._m0[39u]), vec4(_2021, _2022, _2023, 1.0));
        _2064 = dot(vec3(isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2052) ? 0.0 : (isnan(0.0) ? _2052 : max(0.0, _2052))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2064 = 1.0;
    }
    float _2075;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2066 = dot(vec4(cbModelParam._m0[40u]), vec4(_2021, _2022, _2023, 1.0));
        _2075 = dot(vec3(isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0)), isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)), isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2066) ? 0.0 : (isnan(0.0) ? _2066 : max(0.0, _2066))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2075 = 1.0;
    }
    float _2079 = (_2075 * cbModelParam._m0[1u].x) + (_2064 * (1.0 - cbModelParam._m0[1u].x));
    float _2089 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1111);
    float _2090 = isnan(_2089) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2089 : min(cbModelParam._m0[25u].z, _2089));
    float _2170;
    float _2172;
    float _2174;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2137 = fma(_1345, cbModelParam._m0[13u].z, fma(_1341, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1337)) + cbModelParam._m0[13u].w;
        float _2141 = fma(_1345, cbModelParam._m0[14u].z, fma(_1341, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1337)) + cbModelParam._m0[14u].w;
        float _2145 = fma(_1345, cbModelParam._m0[15u].z, fma(_1341, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1337)) + cbModelParam._m0[15u].w;
        float _2148 = fma(_1283, cbModelParam._m0[13u].z, fma(_1282, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1281));
        float _2151 = fma(_1283, cbModelParam._m0[14u].z, fma(_1282, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1281));
        float _2154 = fma(_1283, cbModelParam._m0[15u].z, fma(_1282, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1281));
        float _2182;
        if (_2148 > 0.0)
        {
            _2182 = abs((1.0 - _2137) / _2148);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2137 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2182 = frontier_phi_14_12_ladder;
        }
        float _2384;
        if (_2151 > 0.0)
        {
            _2384 = abs((1.0 - _2141) / _2151);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2141 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2384 = frontier_phi_23_19_ladder;
        }
        float _2638;
        if (_2154 > 0.0)
        {
            _2638 = abs((1.0 - _2145) / _2154);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2145 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2638 = frontier_phi_35_30_ladder;
        }
        float _2640 = isnan(_2384) ? _2182 : (isnan(_2182) ? _2384 : min(_2182, _2384));
        float _2641 = isnan(_2638) ? _2640 : (isnan(_2640) ? _2638 : min(_2640, _2638));
        float _2645 = (_2641 * _2148) + _2137;
        float _2646 = (_2641 * _2151) + _2141;
        float _2647 = (_2641 * _2154) + _2145;
        float _2648 = _2641 * 9.9999997473787516355514526367188e-05;
        float _2650 = (-1.0) - _2648;
        float _2652 = _2648 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2647 > _2652) || ((_2647 < _2650) || ((_2646 > _2652) || ((_2646 < _2650) || ((_2645 < _2650) || (_2645 > _2652))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2647, cbModelParam._m0[9u].z, fma(_2646, cbModelParam._m0[9u].y, _2645 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2647, cbModelParam._m0[10u].z, fma(_2646, cbModelParam._m0[10u].y, _2645 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2647, cbModelParam._m0[11u].z, fma(_2646, cbModelParam._m0[11u].y, _2645 * cbModelParam._m0[11u].x))), _2090);
            frontier_phi_13_35_ladder = _2775.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2775.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2775.x * cbModelParam._m0[1u].y;
        }
        _2170 = frontier_phi_13_35_ladder_2;
        _2172 = frontier_phi_13_35_ladder_1;
        _2174 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2158 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1281, _1282, _1283), _2090);
        _2170 = _2158.x * cbModelParam._m0[1u].y;
        _2172 = _2158.y * cbModelParam._m0[1u].y;
        _2174 = _2158.z * cbModelParam._m0[1u].y;
    }
    float _2178 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1111);
    float _2179 = isnan(_2178) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2178 : min(cbModelParam._m0[25u].w, _2178));
    float _2268;
    float _2270;
    float _2272;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2232 = fma(_1345, cbModelParam._m0[21u].z, fma(_1341, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1337)) + cbModelParam._m0[21u].w;
        float _2236 = fma(_1345, cbModelParam._m0[22u].z, fma(_1341, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1337)) + cbModelParam._m0[22u].w;
        float _2240 = fma(_1345, cbModelParam._m0[23u].z, fma(_1341, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1337)) + cbModelParam._m0[23u].w;
        float _2243 = fma(_1283, cbModelParam._m0[21u].z, fma(_1282, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1281));
        float _2246 = fma(_1283, cbModelParam._m0[22u].z, fma(_1282, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1281));
        float _2249 = fma(_1283, cbModelParam._m0[23u].z, fma(_1282, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1281));
        float _2389;
        if (_2243 > 0.0)
        {
            _2389 = abs((1.0 - _2232) / _2243);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2232 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2389 = frontier_phi_25_21_ladder;
        }
        float _2665;
        if (_2246 > 0.0)
        {
            _2665 = abs((1.0 - _2236) / _2246);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2246 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2236 + 1.0) / _2246);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2665 = frontier_phi_37_32_ladder;
        }
        float _2878;
        if (_2249 > 0.0)
        {
            _2878 = abs((1.0 - _2240) / _2249);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2249 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2240 + 1.0) / _2249);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2878 = frontier_phi_46_43_ladder;
        }
        float _2880 = isnan(_2665) ? _2389 : (isnan(_2389) ? _2665 : min(_2389, _2665));
        float _2881 = isnan(_2878) ? _2880 : (isnan(_2880) ? _2878 : min(_2880, _2878));
        float _2885 = (_2881 * _2243) + _2232;
        float _2886 = (_2881 * _2246) + _2236;
        float _2887 = (_2881 * _2249) + _2240;
        float _2888 = _2881 * 9.9999997473787516355514526367188e-05;
        float _2889 = (-1.0) - _2888;
        float _2891 = _2888 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2887 > _2891) || ((_2887 < _2889) || ((_2886 > _2891) || ((_2886 < _2889) || ((_2885 < _2889) || (_2885 > _2891))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2887, cbModelParam._m0[17u].z, fma(_2886, cbModelParam._m0[17u].y, _2885 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2887, cbModelParam._m0[18u].z, fma(_2886, cbModelParam._m0[18u].y, _2885 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2887, cbModelParam._m0[19u].z, fma(_2886, cbModelParam._m0[19u].y, _2885 * cbModelParam._m0[19u].x))), _2179);
            frontier_phi_22_46_ladder = _3086.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3086.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3086.x * cbModelParam._m0[1u].z;
        }
        _2268 = frontier_phi_22_46_ladder_2;
        _2270 = frontier_phi_22_46_ladder_1;
        _2272 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2252 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1281, _1282, _1283), _2179);
        _2268 = _2252.x * cbModelParam._m0[1u].z;
        _2270 = _2252.y * cbModelParam._m0[1u].z;
        _2272 = _2252.z * cbModelParam._m0[1u].z;
    }
    float _2285 = (((_1308 * _1257) + _1309) * _1273) * ((cbModelParam._m0[1u].w * (_2268 - _2170)) + _2170);
    float _2287 = (((_1308 * _1259) + _1309) * _1273) * ((cbModelParam._m0[1u].w * (_2270 - _2172)) + _2172);
    float _2289 = (((_1308 * _1260) + _1309) * _1273) * ((cbModelParam._m0[1u].w * (_2272 - _2174)) + _2174);
    float _2292 = fma(_2289, cbSceneParam._m0[89u].z, fma(_2287, cbSceneParam._m0[89u].y, _2285 * cbSceneParam._m0[89u].x));
    float _2295 = fma(_2289, cbSceneParam._m0[90u].z, fma(_2287, cbSceneParam._m0[90u].y, _2285 * cbSceneParam._m0[90u].x));
    float _2298 = fma(_2289, cbSceneParam._m0[91u].z, fma(_2287, cbSceneParam._m0[91u].y, _2285 * cbSceneParam._m0[91u].x));
    uvec4 _2308 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2310 = _2308.x * 14u;
    uint _2311 = _2310 + 13u;
    float _2318 = _1273 + (-1.0);
    float _2323 = (cbLight._m0[_2311].x * _2318) + 1.0;
    float _2324 = (cbLight._m0[_2311].y * _2318) + 1.0;
    float _2325 = (cbLight._m0[_2311].z * _2318) + 1.0;
    float _2326 = (cbLight._m0[_2311].w * _2318) + 1.0;
    uint _2327 = _2310 + 5u;
    float _2333 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2337 = _2310 + 4u;
    float _2343 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2347 = _2310 | 1u;
    float _2358 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_1108, _1109, _1110));
    float _2361 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_1108, _1109, _1110));
    float _4545 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _4556 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2366 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * 0.3183098733425140380859375;
    float _2368 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * 0.3183098733425140380859375;
    float _2375 = ((cbLight._m0[_2327].x * _2333) * _2368) + ((cbLight._m0[_2337].x * _2343) * _2366);
    float _2376 = ((_2333 * cbLight._m0[_2327].y) * _2368) + ((_2343 * cbLight._m0[_2337].y) * _2366);
    float _2377 = ((_2333 * cbLight._m0[_2327].z) * _2368) + ((_2343 * cbLight._m0[_2337].z) * _2366);
    uvec4 _2381 = floatBitsToUint(cbLight._m0[_2310 + 12u]);
    bool _2383 = _2381.x == 0u;
    float _2394;
    float _2396;
    float _2398;
    if (_2383)
    {
        _2394 = _2375;
        _2396 = _2376;
        _2398 = _2377;
    }
    else
    {
        uint _2402 = _2310 + 6u;
        float _2418 = (dot(vec3(cbLight._m0[_2310 + 2u].xyz), vec3(_1108, _1109, _1110)) * 0.5) + 0.5;
        float _2419 = _2418 * _2418;
        float _4567 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2420 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2421 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2394 = (((cbLight._m0[_2402].x * 0.3183098733425140380859375) * _2420) * _2421) + _2375;
        _2396 = (((cbLight._m0[_2402].y * 0.3183098733425140380859375) * _2420) * _2421) + _2376;
        _2398 = (((cbLight._m0[_2402].z * 0.3183098733425140380859375) * _2420) * _2421) + _2377;
    }
    bool _2401 = _2381.y == 0u;
    float _2439;
    float _2441;
    float _2443;
    if (_2401)
    {
        _2439 = _2394;
        _2441 = _2396;
        _2443 = _2398;
    }
    else
    {
        uint _2609 = _2310 + 7u;
        float _2625 = (dot(vec3(cbLight._m0[_2310 + 3u].xyz), vec3(_1108, _1109, _1110)) * 0.5) + 0.5;
        float _2626 = _2625 * _2625;
        float _4583 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2627 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _2628 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2439 = (((cbLight._m0[_2609].x * 0.3183098733425140380859375) * _2627) * _2628) + _2394;
        _2441 = (((cbLight._m0[_2609].y * 0.3183098733425140380859375) * _2627) * _2628) + _2396;
        _2443 = (((cbLight._m0[_2609].z * 0.3183098733425140380859375) * _2627) * _2628) + _2398;
    }
    uint _2446 = _2310 + 8u;
    float _2459 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _1111) * 0.949999988079071044921875);
    float _2460 = _2459 * _2459;
    float _2461 = cbLight._m0[_2310].x + _1187;
    float _2462 = cbLight._m0[_2310].y + _1188;
    float _2463 = cbLight._m0[_2310].z + _1189;
    float _2467 = inversesqrt(dot(vec3(_2461, _2462, _2463), vec3(_2461, _2462, _2463)));
    float _2468 = _2467 * _2461;
    float _2469 = _2467 * _2462;
    float _2470 = _2467 * _2463;
    float _2471 = dot(vec3(_1108, _1109, _1110), vec3(cbLight._m0[_2310].xyz));
    float _4599 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _4610 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _2475 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2476 = dot(vec3(_1108, _1109, _1110), vec3(_2468, _2469, _2470));
    float _4621 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
    float _2479 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2480 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2468, _2469, _2470));
    float _4632 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2484 = _2460 * _2460;
    float _2488 = ((_2479 * _2479) * (_2484 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0)))) * 5.0);
    float _2497 = 0.959999978542327880859375 - _1254;
    float _2499 = 0.959999978542327880859375 - _1255;
    float _2500 = 0.959999978542327880859375 - _1256;
    float _2507 = 1.0 - _2460;
    float _2518 = (0.5 / (((_2475 * ((_2474 * _2507) + _2460)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2507) + _2460) * _2474))) * _2474;
    float _4643 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2520 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2484 / ((_2488 * _2488) * 3.141590118408203125));
    uint _2531 = _2310 + 9u;
    float _2542 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _1111) * 0.949999988079071044921875);
    float _2543 = _2542 * _2542;
    float _2544 = cbLight._m0[_2347].x + _1187;
    float _2545 = cbLight._m0[_2347].y + _1188;
    float _2546 = cbLight._m0[_2347].z + _1189;
    float _2550 = inversesqrt(dot(vec3(_2544, _2545, _2546), vec3(_2544, _2545, _2546)));
    float _2551 = _2550 * _2544;
    float _2552 = _2550 * _2545;
    float _2553 = _2550 * _2546;
    float _2554 = dot(vec3(_1108, _1109, _1110), vec3(cbLight._m0[_2347].xyz));
    float _4654 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2558 = dot(vec3(_1108, _1109, _1110), vec3(_2551, _2552, _2553));
    float _4665 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2551, _2552, _2553));
    float _4676 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2543 * _2543;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2577 = exp2(log2(1.0 - (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0)))) * 5.0);
    float _2584 = 1.0 - _2543;
    float _2594 = (0.5 / (((_2475 * ((_2557 * _2584) + _2543)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2584) + _2543) * _2557))) * _2557;
    float _4687 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2596 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    float _2606 = (((((_2577 * _2497) + _1257) * cbLight._m0[_2531].x) * _2596) * _2333) + (((((_2496 * _2497) + _1257) * cbLight._m0[_2446].x) * _2520) * _2343);
    float _2607 = (((((_2577 * _2499) + _1259) * cbLight._m0[_2531].y) * _2596) * _2333) + (((((_2496 * _2499) + _1259) * cbLight._m0[_2446].y) * _2520) * _2343);
    float _2608 = (((((_2577 * _2500) + _1260) * cbLight._m0[_2531].z) * _2596) * _2333) + (((((_2496 * _2500) + _1260) * cbLight._m0[_2446].z) * _2520) * _2343);
    float _2670;
    float _2672;
    float _2674;
    if (_2383)
    {
        _2670 = _2606;
        _2672 = _2607;
        _2674 = _2608;
    }
    else
    {
        uint _2676 = _2310 + 2u;
        uint _2680 = _2310 + 10u;
        float _2694 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _1111) * 0.949999988079071044921875);
        float _2695 = _2694 * _2694;
        float _2696 = cbLight._m0[_2676].x + _1187;
        float _2697 = cbLight._m0[_2676].y + _1188;
        float _2698 = cbLight._m0[_2676].z + _1189;
        float _2702 = inversesqrt(dot(vec3(_2696, _2697, _2698), vec3(_2696, _2697, _2698)));
        float _2703 = _2702 * _2696;
        float _2704 = _2702 * _2697;
        float _2705 = _2702 * _2698;
        float _2706 = dot(vec3(_1108, _1109, _1110), vec3(cbLight._m0[_2676].xyz));
        float _4698 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
        float _2709 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2710 = dot(vec3(_1108, _1109, _1110), vec3(_2703, _2704, _2705));
        float _4709 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2714 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2703, _2704, _2705));
        float _4720 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2718 = _2695 * _2695;
        float _2722 = ((_2713 * _2713) * (_2718 + (-1.0))) + 1.0;
        float _2729 = exp2(log2(1.0 - (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0)))) * 5.0);
        float _2736 = 1.0 - _2695;
        float _2746 = (0.5 / (((_2475 * ((_2709 * _2736) + _2695)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2736) + _2695) * _2709))) * _2709;
        float _4731 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0))) * (_2718 / ((_2722 * _2722) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2670 = (((((_2729 * _2497) + _1257) * cbLight._m0[_2680].x) * _2748) * _2749) + _2606;
        _2672 = (((((_2729 * _2499) + _1259) * cbLight._m0[_2680].y) * _2748) * _2749) + _2607;
        _2674 = (((((_2729 * _2500) + _1260) * cbLight._m0[_2680].z) * _2748) * _2749) + _2608;
    }
    float _2784;
    float _2786;
    float _2788;
    if (_2401)
    {
        _2784 = _2670;
        _2786 = _2672;
        _2788 = _2674;
    }
    else
    {
        uint _2795 = _2310 + 3u;
        uint _2799 = _2310 + 11u;
        float _2813 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2795].w)) * _1111) * 0.949999988079071044921875);
        float _2814 = _2813 * _2813;
        float _2815 = cbLight._m0[_2795].x + _1187;
        float _2816 = cbLight._m0[_2795].y + _1188;
        float _2817 = cbLight._m0[_2795].z + _1189;
        float _2821 = inversesqrt(dot(vec3(_2815, _2816, _2817), vec3(_2815, _2816, _2817)));
        float _2822 = _2821 * _2815;
        float _2823 = _2821 * _2816;
        float _2824 = _2821 * _2817;
        float _2825 = dot(vec3(_1108, _1109, _1110), vec3(cbLight._m0[_2795].xyz));
        float _4747 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2828 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2829 = dot(vec3(_1108, _1109, _1110), vec3(_2822, _2823, _2824));
        float _4758 = isnan(0.0) ? _2829 : (isnan(_2829) ? 0.0 : max(_2829, 0.0));
        float _2832 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2833 = dot(vec3(cbLight._m0[_2795].xyz), vec3(_2822, _2823, _2824));
        float _4769 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        float _2837 = _2814 * _2814;
        float _2841 = ((_2832 * _2832) * (_2837 + (-1.0))) + 1.0;
        float _2848 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
        float _2855 = 1.0 - _2814;
        float _2865 = (0.5 / (((_2475 * ((_2828 * _2855) + _2814)) + 9.9999999392252902907785028219223e-09) + (((_2475 * _2855) + _2814) * _2828))) * _2828;
        float _4780 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        float _2867 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2837 / ((_2841 * _2841) * 3.141590118408203125));
        float _2868 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2784 = (((((_2848 * _2497) + _1257) * cbLight._m0[_2799].x) * _2867) * _2868) + _2670;
        _2786 = (((((_2848 * _2499) + _1259) * cbLight._m0[_2799].y) * _2867) * _2868) + _2672;
        _2788 = (((((_2848 * _2500) + _1260) * cbLight._m0[_2799].z) * _2867) * _2868) + _2674;
    }
    float _3003;
    float _3005;
    float _3007;
    float _3009;
    float _3011;
    float _3013;
    if (_2308.y == 0u)
    {
        float _2943 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2944 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2943;
        float _2945 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2943;
        float _2946 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2943;
        uvec4 _2958 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2959 = _2958.x;
        uint _2970 = uint((float(_2958.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1196) / _2959))) + floor(float(uint(cbSceneParam._m0[85u].x * _1195) / _2959)));
        float _2980 = (log2(_2946 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2981 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
        uint _2984 = uint(isnan(14.0) ? _2981 : (isnan(_2981) ? 14.0 : min(_2981, 14.0)));
        uvec4 _2989 = texelFetch(g_lightClusterGridBuffer, int(((_2984 << 2u) + (_2970 << 6u)) >> 2u));
        uint _2990 = _2989.x;
        uint _2991 = _2958.z;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        if (((((1u << ((_2991 >> 4u) & 15u)) + 4294967295u) & _2990) == 0u) || ((_2991 & 240u) == 0u))
        {
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
        }
        else
        {
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            uint _3241 = 0u;
            uint _3250;
            bool _3251;
            for (;;)
            {
                _3250 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                _3251 = _3250 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3251)
                {
                    frontier_phi_61_pred = _3235;
                    frontier_phi_61_pred_1 = _3240;
                    frontier_phi_61_pred_2 = _3239;
                    frontier_phi_61_pred_3 = _3238;
                    frontier_phi_61_pred_4 = _3237;
                    frontier_phi_61_pred_5 = _3236;
                }
                else
                {
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    uint _3365;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3250;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    for (;;)
                    {
                        uint _3369 = uint(findLSB(_3365)) + (_3241 << 5u);
                        uint _3366 = (_3365 + 4294967295u) & _3365;
                        uint _3371 = _3369 * 48u;
                        vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3371)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3371 + 3u)).x));
                        uint _3391 = (_3369 * 48u) + 4u;
                        vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3391)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3391 + 3u)).x));
                        uint _3410 = (_3369 * 48u) + 8u;
                        vec3 _3421 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3410)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3410 + 2u)).x));
                        float _3425 = _3385.x - _2944;
                        float _3426 = _3385.y - _2945;
                        float _3427 = _3385.z - _2946;
                        float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                        float _3431 = inversesqrt(_3428);
                        float _3432 = _3431 * _3425;
                        float _3433 = _3431 * _3426;
                        float _3434 = _3431 * _3427;
                        float _3435 = dot(vec3(_1214, _1217, _1220), vec3(_3432, _3433, _3434));
                        float _3440 = 1.0 - (_3428 * _3385.w);
                        float _4806 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
                        float _3442 = sqrt(_3428) * _3404.w;
                        float _3445 = 1.39999997615814208984375 / (_3442 + 1.39999997615814208984375);
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3435) + _3446;
                        float _3452 = _3442 * _3442;
                        float _3456 = ((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3441) / ((_3452 * 0.699999988079071044921875) + 1.0);
                        float _3460 = (-0.0) - _2944;
                        float _3461 = (-0.0) - _2945;
                        float _3462 = (-0.0) - _2946;
                        float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                        float _3467 = _3466 * _3460;
                        float _3468 = _3466 * _3461;
                        float _3469 = _3466 * _3462;
                        float _3477 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                        float _3478 = 1.0 - _1289;
                        float _3485 = sqrt(1.0 - ((1.0 - (_3478 * _3478)) * (1.0 - (_3477 * _3477))));
                        float _3486 = _3485 * _3485;
                        float _3487 = _3486 * _3486;
                        float _3488 = _3467 + _3432;
                        float _3489 = _3468 + _3433;
                        float _3490 = _3469 + _3434;
                        float _3494 = inversesqrt(dot(vec3(_3488, _3489, _3490), vec3(_3488, _3489, _3490)));
                        float _3498 = dot(vec3(_1214, _1217, _1220), vec3(_3467, _3468, _3469));
                        float _4822 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                        float _3502 = dot(vec3(_1214, _1217, _1220), vec3(_3494 * _3488, _3494 * _3489, _3494 * _3490));
                        float _4833 = isnan(0.0) ? _3502 : (isnan(_3502) ? 0.0 : max(_3502, 0.0));
                        float _3505 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3509 = ((_3505 * _3505) * (_3487 + (-1.0))) + 1.0;
                        float _3510 = _3445 * _3486;
                        float _3511 = _3510 * _3510;
                        float _3514 = ((1.0 - _3511) * _3435) + _3511;
                        float _4844 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3516 = 1.0 - _3486;
                        float _3526 = (0.5 / (((_3515 * ((_3501 * _3516) + _3486)) + 9.9999999392252902907785028219223e-09) + (((_3515 * _3516) + _3486) * _3501))) * _3515;
                        float _4855 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                        float _3537 = (((_3487 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3509 * _3509) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125))) * _3441;
                        _3294 = (_3456 * _3404.x) + _3362;
                        _3295 = (_3456 * _3404.y) + _3363;
                        _3296 = (_3456 * _3404.z) + _3364;
                        _3291 = (_3537 * _3421.x) + _3359;
                        _3292 = (_3537 * _3421.y) + _3360;
                        _3293 = (_3537 * _3421.z) + _3361;
                        if (_3366 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3366;
                        }
                    }
                    frontier_phi_61_pred = _3291;
                    frontier_phi_61_pred_1 = _3296;
                    frontier_phi_61_pred_2 = _3295;
                    frontier_phi_61_pred_3 = _3294;
                    frontier_phi_61_pred_4 = _3293;
                    frontier_phi_61_pred_5 = _3292;
                }
                _3092 = frontier_phi_61_pred;
                _3102 = frontier_phi_61_pred_1;
                _3100 = frontier_phi_61_pred_2;
                _3098 = frontier_phi_61_pred_3;
                _3096 = frontier_phi_61_pred_4;
                _3094 = frontier_phi_61_pred_5;
                uint _3242 = _3241 + 1u;
                if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3235 = _3092;
                    _3236 = _3094;
                    _3237 = _3096;
                    _3238 = _3098;
                    _3239 = _3100;
                    _3240 = _3102;
                    _3241 = _3242;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
        }
        uvec4 _3105 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3106 = _3105.z;
        uint _3108 = (_3106 >> 8u) & 15u;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        if (((4294967295u << _3108) & _2990) == 0u)
        {
            _3203 = _3091;
            _3205 = _3093;
            _3207 = _3095;
            _3209 = _3097;
            _3211 = _3099;
            _3213 = _3101;
        }
        else
        {
            float _3228 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
            float _3229 = _3228 * _2944;
            float _3230 = _3228 * _2945;
            float _3231 = _3228 * _2946;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3108 < ((_3106 >> 12u) & 15u))
            {
                float _3204;
                float _3206;
                float _3208;
                float _3210;
                float _3212;
                float _3214;
                float _3342 = _3091;
                float _3343 = _3093;
                float _3344 = _3095;
                float _3345 = _3097;
                float _3346 = _3099;
                float _3347 = _3101;
                uint _3348 = _3108;
                uint _3357;
                bool _3358;
                for (;;)
                {
                    _3357 = texelFetch(g_lightClassification, int((((_2984 << 5u) + (_2970 << 9u)) + (_3348 << 2u)) >> 2u)).x;
                    _3358 = _3357 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3358)
                    {
                        frontier_phi_67_pred = _3345;
                        frontier_phi_67_pred_1 = _3346;
                        frontier_phi_67_pred_2 = _3347;
                        frontier_phi_67_pred_3 = _3344;
                        frontier_phi_67_pred_4 = _3343;
                        frontier_phi_67_pred_5 = _3342;
                    }
                    else
                    {
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3555 = _3342;
                        float _3556 = _3343;
                        float _3557 = _3344;
                        float _3558 = _3345;
                        float _3559 = _3346;
                        float _3560 = _3347;
                        uint _3561 = _3357;
                        uint _3562;
                        vec4 _3587;
                        float _3588;
                        vec4 _3603;
                        vec3 _3615;
                        vec4 _3630;
                        vec4 _3645;
                        float _3691;
                        bool _3692;
                        for (;;)
                        {
                            uint _3572 = ((_3348 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3561));
                            _3562 = (_3561 + 4294967295u) & _3561;
                            uint _3574 = _3572 * 40u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            _3588 = _3587.w;
                            uint _3590 = (_3572 * 40u) + 4u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3605 = (_3572 * 40u) + 8u;
                            _3615 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x));
                            uint _3617 = (_3572 * 40u) + 16u;
                            _3630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3617 + 3u)).x));
                            uint _3632 = (_3572 * 40u) + 20u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3572 * 40u) + 24u;
                            vec4 _3660 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 3u)).x));
                            uint _3666 = (_3572 * 40u) + 28u;
                            vec4 _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3691 = fma(_2946, _3679.z, fma(_2945, _3679.y, _3679.x * _2944)) + _3679.w;
                            _3692 = !((fma(_2946, _3660.z, fma(_2945, _3660.y, _3660.x * _2944)) + _3660.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3692)
                            {
                                float _3719 = _3587.x - _2944;
                                float _3720 = _3587.y - _2945;
                                float _3721 = _3587.z - _2946;
                                float _3722 = dot(vec3(_3719, _3720, _3721), vec3(_3719, _3720, _3721));
                                float _3725 = inversesqrt(_3722);
                                float _3726 = _3725 * _3719;
                                float _3727 = _3725 * _3720;
                                float _3728 = _3725 * _3721;
                                float _3732 = 1.0 - (_3722 / (_3588 * _3588));
                                float _4866 = isnan(0.0) ? _3732 : (isnan(_3732) ? 0.0 : max(_3732, 0.0));
                                float _3733 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                                float _3737 = sqrt(_3722) * _3603.w;
                                float _3739 = 1.39999997615814208984375 / (_3737 + 1.39999997615814208984375);
                                float _3740 = _3739 * _3739;
                                float _3743 = ((1.0 - _3740) * dot(vec3(_3726, _3727, _3728), vec3(_1214, _1217, _1220))) + _3740;
                                float _3746 = _3737 * _3737;
                                float _3750 = (fma(_2946, _3630.z, fma(_2945, _3630.y, _3630.x * _2944)) + _3630.w) / _3691;
                                float _3751 = (fma(_2946, _3645.z, fma(_2945, _3645.y, _3645.x * _2944)) + _3645.w) / _3691;
                                float _3755 = 1.0 - dot(vec2(_3750, _3751), vec2(_3750, _3751));
                                float _4882 = isnan(0.0) ? _3755 : (isnan(_3755) ? 0.0 : max(_3755, 0.0));
                                float _3756 = isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0));
                                float _3757 = _3756 * (((isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0))) * _3733) / ((_3746 * 0.699999988079071044921875) + 1.0));
                                float _3769 = exp2(log2(1.0 / ((_3746 * 3.5) + 5.0)) * 0.25);
                                float _3770 = 1.0 - _1289;
                                float _3777 = sqrt(1.0 - ((1.0 - (_3770 * _3770)) * (1.0 - (_3769 * _3769))));
                                float _3778 = _3777 * _3777;
                                float _3779 = _3778 * _3778;
                                float _3780 = _3726 - _3229;
                                float _3781 = _3727 - _3230;
                                float _3782 = _3728 - _3231;
                                float _3786 = inversesqrt(dot(vec3(_3780, _3781, _3782), vec3(_3780, _3781, _3782)));
                                float _3790 = dot(vec3(_1214, _1217, _1220), vec3((-0.0) - _3229, (-0.0) - _3230, (-0.0) - _3231));
                                float _4893 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3793 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3794 = dot(vec3(_1214, _1217, _1220), vec3(_3786 * _3780, _3786 * _3781, _3786 * _3782));
                                float _4904 = isnan(0.0) ? _3794 : (isnan(_3794) ? 0.0 : max(_3794, 0.0));
                                float _3797 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3801 = ((_3797 * _3797) * (_3779 + (-1.0))) + 1.0;
                                float _3802 = _3739 * _3778;
                                float _3803 = _3802 * _3802;
                                float _3809 = ((1.0 - _3803) * dot(vec3(_1214, _1217, _1220), vec3(_3726, _3727, _3728))) + _3803;
                                float _4915 = isnan(0.0) ? _3809 : (isnan(_3809) ? 0.0 : max(_3809, 0.0));
                                float _3810 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3811 = 1.0 - _3778;
                                float _3821 = (0.5 / (((_3810 * ((_3793 * _3811) + _3778)) + 9.9999999392252902907785028219223e-09) + (((_3810 * _3811) + _3778) * _3793))) * _3810;
                                float _4926 = isnan(0.0) ? _3821 : (isnan(_3821) ? 0.0 : max(_3821, 0.0));
                                float _3831 = (_3756 * _3733) * (((_3779 * 3.1415927410125732421875) * (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0)))) / ((_3801 * _3801) * ((_3746 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3831 * _3615.x;
                                frontier_phi_73_pred_1 = _3831 * _3615.y;
                                frontier_phi_73_pred_2 = _3757 * _3603.z;
                                frontier_phi_73_pred_3 = _3757 * _3603.y;
                                frontier_phi_73_pred_4 = _3757 * _3603.x;
                                frontier_phi_73_pred_5 = _3831 * _3615.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3835 = frontier_phi_73_pred;
                            _3836 = frontier_phi_73_pred_1;
                            _3840 = frontier_phi_73_pred_2;
                            _3839 = frontier_phi_73_pred_3;
                            _3838 = frontier_phi_73_pred_4;
                            _3837 = frontier_phi_73_pred_5;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            _3544 = _3837 + _3557;
                            if (_3562 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3562;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3545;
                        frontier_phi_67_pred_1 = _3546;
                        frontier_phi_67_pred_2 = _3547;
                        frontier_phi_67_pred_3 = _3544;
                        frontier_phi_67_pred_4 = _3543;
                        frontier_phi_67_pred_5 = _3542;
                    }
                    _3210 = frontier_phi_67_pred;
                    _3212 = frontier_phi_67_pred_1;
                    _3214 = frontier_phi_67_pred_2;
                    _3208 = frontier_phi_67_pred_3;
                    _3206 = frontier_phi_67_pred_4;
                    _3204 = frontier_phi_67_pred_5;
                    uint _3349 = _3348 + 1u;
                    if (_3349 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3342 = _3204;
                        _3343 = _3206;
                        _3344 = _3208;
                        _3345 = _3210;
                        _3346 = _3212;
                        _3347 = _3214;
                        _3348 = _3349;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3212;
                frontier_phi_55_56_ladder_1 = _3214;
                frontier_phi_55_56_ladder_2 = _3210;
                frontier_phi_55_56_ladder_3 = _3208;
                frontier_phi_55_56_ladder_4 = _3206;
                frontier_phi_55_56_ladder_5 = _3204;
            }
            else
            {
                frontier_phi_55_56_ladder = _3099;
                frontier_phi_55_56_ladder_1 = _3101;
                frontier_phi_55_56_ladder_2 = _3097;
                frontier_phi_55_56_ladder_3 = _3095;
                frontier_phi_55_56_ladder_4 = _3093;
                frontier_phi_55_56_ladder_5 = _3091;
            }
            _3203 = frontier_phi_55_56_ladder_5;
            _3205 = frontier_phi_55_56_ladder_4;
            _3207 = frontier_phi_55_56_ladder_3;
            _3209 = frontier_phi_55_56_ladder_2;
            _3211 = frontier_phi_55_56_ladder;
            _3213 = frontier_phi_55_56_ladder_1;
        }
        float _3218 = isnan(1.0) ? _1273 : (isnan(_1273) ? 1.0 : min(_1273, 1.0));
        _3003 = (_3218 * _3209) + _2439;
        _3005 = (_3218 * _3211) + _2441;
        _3007 = (_3218 * _3213) + _2443;
        _3009 = ((_3203 * _1257) * _3218) + _2784;
        _3011 = ((_3205 * _1259) * _3218) + _2786;
        _3013 = ((_3207 * _1260) * _3218) + _2788;
    }
    else
    {
        _3003 = _2439;
        _3005 = _2441;
        _3007 = _2443;
        _3009 = _2784;
        _3011 = _2786;
        _3013 = _2788;
    }
    float _4942 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
    float _4953 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _4964 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    uint _3033 = _269 + 6u;
    float _3041 = _1195 / cbSceneParam._m0[86u].x;
    float _3042 = _1196 / cbSceneParam._m0[86u].y;
    vec4 _3056 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, (log2((isnan(cbSceneParam._m0[77u].w) ? _1130 : (isnan(_1130) ? cbSceneParam._m0[77u].w : min(_1130, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3058 = _3056.x;
    float _3059 = _3056.y;
    float _3060 = _3056.z;
    float _3061 = _3056.w;
    float _3153;
    float _3155;
    float _3157;
    float _3159;
    if (_1130 > cbSceneParam._m0[78u].w)
    {
        float _3116 = isnan(_1130) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1130 : min(cbSceneParam._m0[80u].w, _1130));
        float _3117 = _3116 / _1130;
        float _3128 = _3117 * _1180;
        float _3129 = _1181 * _3117;
        float _3130 = (-0.0) - _3129;
        float _3131 = _3117 * _1182;
        float _3133 = (cbSceneParam._m0[77u].w * _3130) / _3116;
        float _3134 = _3133 + cbSceneParam._m0[79u].w;
        float _3135 = cbSceneParam._m0[79u].w - _3129;
        float _3141 = sqrt(((_3128 * _3128) + (_3129 * _3129)) + (_3131 * _3131));
        float _3144 = (1.0 - (cbSceneParam._m0[77u].w / _3116)) * _3141;
        float _3149 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3151 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3304;
        if (abs((_3130 - _3133) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3304 = ((((_3134 > 0.0) ? exp2(_3149 * _3134) : (2.0 - exp2(_3151 * _3134))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3144;
        }
        else
        {
            float _3264 = 1.0 / cbSceneParam._m0[80u].x;
            float _3265 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : max(_3134, _3135));
            float _3266 = isnan(_3135) ? _3134 : (isnan(_3134) ? _3135 : min(_3134, _3135));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            float _3276 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : min(_3266, 0.0));
            _3304 = ((abs(_3141 / _3130) * cbSceneParam._m0[80u].y) * ((((_3275 - _3276) * 2.0) - ((exp2(_3149 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0)))) - exp2(_3149 * (isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0))))) * _3264)) - ((exp2(_3151 * _3275) - exp2(_3151 * _3276)) * _3264))) + (_3144 * cbSceneParam._m0[80u].z);
        }
        vec4 _3306 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3041, _3042, 1.0), 0.0);
        float _3315 = exp2((_3304 * (-1.44269502162933349609375)) * (1.0 - _3306.w));
        float _3316 = log2(_3315);
        float _3332 = log2(_3061);
        _3153 = (exp2(_3332 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].x)) * _3306.x) / cbSceneParam._m0[78u].x)) + _3058;
        _3155 = (exp2(_3332 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].y)) * _3306.y) / cbSceneParam._m0[78u].y)) + _3059;
        _3157 = (exp2(_3332 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3316 * cbSceneParam._m0[78u].z)) * _3306.z) / cbSceneParam._m0[78u].z)) + _3060;
        _3159 = _3315 * _3061;
    }
    else
    {
        _3153 = _3058;
        _3155 = _3059;
        _3157 = _3060;
        _3159 = _3061;
    }
    float _3171 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3172 = _3171 == 3.0;
    float _3173 = log2(_3159);
    float _3180 = exp2(_3173 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0))) * (_3003 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1273))) + ((_3009 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2079)) * cbPerFrame._m0[3u].x));
    float _3181 = exp2(_3173 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_3005 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1273))) + ((_3011 + ((isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0))) * _2079)) * cbPerFrame._m0[3u].x));
    float _3182 = exp2(_3173 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_3007 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1273))) + ((_3013 + ((isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0))) * _2079)) * cbPerFrame._m0[3u].x));
    float _3191 = (_3171 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3191 * (_3172 ? _3180 : (_3180 + (cbSceneParam._m0[72u].w * _3153)));
    SV_Target.y = _3191 * (_3172 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3155)));
    SV_Target.z = _3191 * (_3172 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3157)));
    SV_Target.w = cbInstanceData._m0[_3033].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3033].w;
}


