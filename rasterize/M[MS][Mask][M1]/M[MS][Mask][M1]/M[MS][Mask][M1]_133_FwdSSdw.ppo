#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1552;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _275 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _277 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3899 = isnan(0.0) ? _275 : (isnan(_275) ? 0.0 : max(_275, 0.0));
    float _3910 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _3921 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    uint _288 = uint(roundEven(NORMAL.w)) * 13u;
    uint _293 = _288 + 1u;
    uint _297 = _288 + 2u;
    float _306 = sqrt(((cbInstanceData._m0[_293].x * cbInstanceData._m0[_293].x) + (cbInstanceData._m0[_288].x * cbInstanceData._m0[_288].x)) + (cbInstanceData._m0[_297].x * cbInstanceData._m0[_297].x));
    float _307 = _306 * TEXCOORD.z;
    float _308 = _306 * TEXCOORD.w;
    vec4 _321 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _307) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _308) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _350 = _345.x * cbMtdParam._m0[11u].x;
    float _351 = _345.y * cbMtdParam._m0[11u].y;
    float _352 = _345.z * cbMtdParam._m0[11u].z;
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _307) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _308) + cbTextureTilingScale._m0[5u].w));
    vec4 _390 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _425 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _427 = _425.x;
    float _439 = dot(vec4(_427, _425.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _456 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _390.x) * 2.0) - ((((_427 - _439) * cbMtdParam._m0[23u].w) + _439) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3932 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _464 = (_457 * ((_371.x * cbMtdParam._m0[12u].x) - _350)) + _350;
    float _465 = (_457 * ((_371.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _466 = (_457 * ((_371.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _483 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _307) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _308) + cbTextureTilingScale._m0[3u].w));
    vec4 _503 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _505 = _503.x;
    float _515 = dot(vec4(_505, _503.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _529 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _390.y) * 2.0) - ((((_505 - _515) * cbMtdParam._m0[23u].w) + _515) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3943 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _530 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _537 = (_530 * ((_483.x * cbMtdParam._m0[13u].x) - _464)) + _464;
    float _538 = (_530 * ((_483.y * cbMtdParam._m0[13u].y) - _465)) + _465;
    float _539 = (_530 * ((_483.z * cbMtdParam._m0[13u].z) - _466)) + _466;
    vec4 _558 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _307) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _308) + cbTextureTilingScale._m0[24u].w));
    vec4 _575 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _577 = _575.x;
    float _587 = dot(vec4(_577, _575.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _599 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _390.z) * 2.0) - ((((_577 - _587) * cbMtdParam._m0[23u].w) + _587) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3954 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _600 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _607 = (_600 * ((_558.x * cbMtdParam._m0[14u].x) - _537)) + _537;
    float _608 = (_600 * ((_558.y * cbMtdParam._m0[14u].y) - _538)) + _538;
    float _609 = (_600 * ((_558.z * cbMtdParam._m0[14u].z) - _539)) + _539;
    float _613 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _321.x) * _607;
    float _616 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _321.y) * _608;
    float _619 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _321.z) * _609;
    float _626 = ((_607 - _613) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) + _613;
    float _627 = ((_608 - _616) * (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) + _616;
    float _628 = ((_609 - _619) * (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) + _619;
    vec4 _646 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _307) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _308) + cbTextureTilingScale._m0[14u].w));
    vec4 _665 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _307) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _308) + cbTextureTilingScale._m0[20u].w));
    vec4 _688 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _307) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _308) + cbTextureTilingScale._m0[4u].w));
    vec4 _705 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _707 = _705.x;
    float _708 = _705.y;
    float _709 = _705.z;
    float _716 = ((_688.x - _707) * _457) + _707;
    float _717 = ((_688.y - _708) * _457) + _708;
    float _718 = ((_688.z - _709) * _457) + _709;
    vec4 _730 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _307) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _308) + cbTextureTilingScale._m0[2u].w));
    float _741 = ((_730.x - _716) * _530) + _716;
    float _742 = ((_730.y - _717) * _530) + _717;
    float _743 = ((_730.z - _718) * _530) + _718;
    vec4 _755 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _307) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _308) + cbTextureTilingScale._m0[23u].w));
    float _768 = ((_755.z - _743) * _600) + _743;
    float _771 = ((((_755.x - _741) * _600) + _741) * 2.0) + (-1.0);
    float _772 = ((((_755.y - _742) * _600) + _742) * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3965 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))));
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _307) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _308) + cbTextureTilingScale._m0[11u].w));
    float _819 = _817.x;
    float _820 = 1.0 - _819;
    float _835 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_819 - _820) * cbMtdParam._m0[24u].z) + _820) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3976 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _836 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _843 = (_836 * ((_646.x * cbMtdParam._m0[18u].x) - _626)) + _626;
    float _844 = (_836 * ((_646.y * cbMtdParam._m0[18u].y) - _627)) + _627;
    float _845 = (_836 * ((_646.z * cbMtdParam._m0[18u].z) - _628)) + _628;
    vec4 _871 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _873 = _871.x;
    float _891 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _307) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _308) + cbTextureTilingScale._m0[9u].w)).x - _873) * _457) + _873;
    float _908 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _307) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _308) + cbTextureTilingScale._m0[21u].w)).x - _891) * _530) + _891;
    float _926 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _307) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _308) + cbTextureTilingScale._m0[10u].w)).x - _908) * _600) + _908;
    float _930 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _926) * cbMtdParam._m0[19u].z) + _926;
    float _932 = _930 - (_930 * _836);
    float _937 = (((_665.z - _768) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _768;
    float _941 = ((_792.z - _937) * cbMtdParam._m0[19u].w) + _937;
    vec4 _954 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _307) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _308) + cbTextureTilingScale._m0[15u].w));
    float _961 = (_954.x * 2.0) + (-1.0);
    float _962 = (_954.y * 2.0) + (-1.0);
    float _963 = dot(vec2(_961, _962), vec2(_961, _962));
    float _3987 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _971 = (_836 * (_954.z - _941)) + _941;
    float _980 = (_771 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_665.x * 2.0) + (-1.0)))) + (((_792.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _981 = (_772 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_665.y * 2.0) + (-1.0)))) + (((_792.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _993 = (((_961 - _980) + (cbMtdParam._m0[21u].x * _980)) * _836) + _980;
    float _994 = (((_962 - _981) + (cbMtdParam._m0[21u].x * _981)) * _836) + _981;
    float _995 = (_836 * (sqrt(1.0 - (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) - _778)) + _778;
    float _999 = cbMtdParam._m0[22u].x + _792.w;
    float _1002 = fma(_995, _254 * NORMAL.x, fma(_994, _261 * TANGENT.x, (_247 * _239) * _993));
    float _1005 = fma(_995, _254 * NORMAL.y, fma(_994, _261 * TANGENT.y, (_247 * _240) * _993));
    float _1008 = fma(_995, _254 * NORMAL.z, fma(_994, _261 * TANGENT.z, (_247 * _241) * _993));
    float _1012 = inversesqrt(dot(vec3(_1002, _1005, _1008), vec3(_1002, _1005, _1008)));
    float _1013 = _1012 * _1002;
    float _1014 = _1012 * _1005;
    float _1015 = _1012 * _1008;
    float _3998 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _1016 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _4009 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _4020 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4031 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4042 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4053 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _1021 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _1035 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1075 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1085 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1075);
    float _1086 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1075);
    float _1087 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1075);
    float _1091 = inversesqrt(dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087)));
    float _1092 = _1085 * _1091;
    float _1093 = _1086 * _1091;
    float _1094 = _1087 * _1091;
    float _1100 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1101 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1119 = fma(_1015, cbSceneParam._m0[5u].z, fma(_1014, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1013));
    float _1122 = fma(_1015, cbSceneParam._m0[6u].z, fma(_1014, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1013));
    float _1125 = fma(_1015, cbSceneParam._m0[7u].z, fma(_1014, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1013));
    uint _1139 = (_288 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1145 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0)))) * cbInstanceData._m0[_1139].x;
    float _1146 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) * cbInstanceData._m0[_1139].y;
    float _1147 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) * cbInstanceData._m0[_1139].z;
    float _4064 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _1148 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _4075 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _1149 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _1151 = 1.0 - _1021;
    float _1152 = _1148 * _1151;
    float _1153 = _1149 * _1151;
    float _1154 = _1150 * _1151;
    float _1159 = (_1148 + (-0.039999999105930328369140625)) * _1021;
    float _1160 = (_1149 + (-0.039999999105930328369140625)) * _1021;
    float _1161 = (_1150 + (-0.039999999105930328369140625)) * _1021;
    float _1162 = _1159 + 0.039999999105930328369140625;
    float _1164 = _1160 + 0.039999999105930328369140625;
    float _1165 = _1161 + 0.039999999105930328369140625;
    vec4 _1174 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1100, cbSceneParam._m0[86u].y * _1101));
    float _1178 = ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * TEXCOORD_5.w) * _1174.x;
    float _1179 = dot(vec3(_1013, _1014, _1015), vec3(_1092, _1093, _1094));
    float _1182 = _1179 * 2.0;
    float _1186 = (_1182 * _1013) - _1092;
    float _1187 = (_1182 * _1014) - _1093;
    float _1188 = (_1182 * _1015) - _1094;
    float _1192 = abs(dot(vec3(_1092, _1093, _1094), vec3(_1013, _1014, _1015)));
    float _4097 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _1194 = sqrt(_1016);
    float _1207 = exp2((_1194 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1194 * 3.0));
    float _1213 = (1.0 - _1207) * ((_1194 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1214 = _1207 * _1194;
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1551;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1276 = fma(_1250, cbModelParam._m0[26u].z, fma(_1246, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242));
        float _1280 = fma(_1250, cbModelParam._m0[27u].z, fma(_1246, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242));
        float _1284 = fma(_1250, cbModelParam._m0[28u].z, fma(_1246, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242));
        float _1309 = _1242 + _1013;
        float _1310 = _1246 + _1014;
        float _1311 = _1250 + _1015;
        float _1321 = fma(_1311, cbModelParam._m0[26u].z, fma(_1310, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309)) - _1276;
        float _1322 = fma(_1311, cbModelParam._m0[27u].z, fma(_1310, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309)) - _1280;
        float _1323 = fma(_1311, cbModelParam._m0[28u].z, fma(_1310, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309)) - _1284;
        float _1327 = inversesqrt(dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323)));
        float _1340 = ((_1327 * _1321) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1276 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1327 * _1322) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1280 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1342 = ((_1327 * _1323) / cbModelParam._m0[34u].z) + ((((((_1284 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1340, _1341, _1342), 0.0);
        float _1379 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1345.x + (-0.5));
        float _1381 = _1379 * (_1345.y + (-0.5));
        float _1382 = _1379 * (_1345.z + (-0.5));
        float _1389 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1352.x + (-0.5));
        float _1391 = _1389 * (_1352.y + (-0.5));
        float _1392 = _1389 * (_1352.z + (-0.5));
        float _1399 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1359.x + (-0.5));
        float _1401 = _1399 * (_1359.y + (-0.5));
        float _1402 = _1399 * (_1359.z + (-0.5));
        float _1409 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1366.x + (-0.5));
        float _1411 = _1409 * (_1366.y + (-0.5));
        float _1412 = _1409 * (_1366.z + (-0.5));
        float _1413 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1414 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1415 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1416 = _1380 * 0.5;
        float _1417 = _1390 * 0.5;
        float _1418 = _1400 * 0.5;
        float _1419 = dot(vec3(_1416, _1417, _1418), vec3(_1416, _1417, _1418));
        float _1424 = (_1419 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1419);
        float _1433 = (dot(vec3(_1013, _1014, _1015), vec3(_1424 * _1416, _1424 * _1417, _1424 * _1418)) + 1.0) * 0.5;
        float _4123 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1443 = sqrt(((_1417 * _1417) + (_1416 * _1416)) + (_1418 * _1418)) / (_1413 + 9.9999997473787516355514526367188e-06);
        float _4134 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1445 = _1444 * 2.0;
        float _1449 = (1.0 - _1444) / (_1444 + 1.0);
        float _4145 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1450 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
        float _1459 = ((((1.0 - _1450) * (_1445 + 2.0)) * exp2(log2(isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1445 + 1.0))) + _1450) * _1413;
        float _1460 = _1381 * 0.5;
        float _1461 = _1391 * 0.5;
        float _1462 = _1401 * 0.5;
        float _1463 = dot(vec3(_1460, _1461, _1462), vec3(_1460, _1461, _1462));
        float _1468 = (_1463 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1463);
        float _1476 = (dot(vec3(_1013, _1014, _1015), vec3(_1468 * _1460, _1468 * _1461, _1468 * _1462)) + 1.0) * 0.5;
        float _4156 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1485 = sqrt(((_1461 * _1461) + (_1460 * _1460)) + (_1462 * _1462)) / (_1414 + 9.9999997473787516355514526367188e-06);
        float _4167 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1486 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1487 = _1486 * 2.0;
        float _1491 = (1.0 - _1486) / (_1486 + 1.0);
        float _4178 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1492 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
        float _1501 = ((((1.0 - _1492) * (_1487 + 2.0)) * exp2(log2(isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_1487 + 1.0))) + _1492) * _1414;
        float _1502 = _1382 * 0.5;
        float _1503 = _1392 * 0.5;
        float _1504 = _1402 * 0.5;
        float _1505 = dot(vec3(_1502, _1503, _1504), vec3(_1502, _1503, _1504));
        float _1510 = (_1505 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1505);
        float _1518 = (dot(vec3(_1013, _1014, _1015), vec3(_1510 * _1502, _1510 * _1503, _1510 * _1504)) + 1.0) * 0.5;
        float _4189 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1527 = sqrt(((_1503 * _1503) + (_1502 * _1502)) + (_1504 * _1504)) / (_1415 + 9.9999997473787516355514526367188e-06);
        float _4200 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1529 = _1528 * 2.0;
        float _1533 = (1.0 - _1528) / (_1528 + 1.0);
        float _4211 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
        float _1534 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1543 = ((((1.0 - _1534) * (_1529 + 2.0)) * exp2(log2(isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_1529 + 1.0))) + _1534) * _1415;
        _1551 = _1382;
        _1553 = _1381;
        _1554 = _1380;
        _1555 = _1392;
        _1556 = _1391;
        _1557 = _1390;
        _1558 = _1402;
        _1559 = _1401;
        _1560 = _1400;
        _1561 = _1415;
        _1562 = _1414;
        _1563 = _1413;
        _1564 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0)));
        _1565 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0)));
        _1566 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)));
    }
    else
    {
        _1551 = _1552;
        _1553 = _1552;
        _1554 = _1552;
        _1555 = _1552;
        _1556 = _1552;
        _1557 = _1552;
        _1558 = _1552;
        _1559 = _1552;
        _1560 = _1552;
        _1561 = _1552;
        _1562 = _1552;
        _1563 = _1552;
        _1564 = 0.0;
        _1565 = 0.0;
        _1566 = 0.0;
    }
    float _1858;
    float _1859;
    float _1860;
    float _1861;
    float _1862;
    float _1863;
    float _1864;
    float _1865;
    float _1866;
    float _1867;
    float _1868;
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1589 = fma(_1250, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1242));
        float _1593 = fma(_1250, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1242));
        float _1597 = fma(_1250, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1242));
        float _1620 = _1242 + _1013;
        float _1621 = _1246 + _1014;
        float _1622 = _1250 + _1015;
        float _1632 = fma(_1622, cbModelParam._m0[30u].z, fma(_1621, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1620)) - _1589;
        float _1633 = fma(_1622, cbModelParam._m0[31u].z, fma(_1621, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1620)) - _1593;
        float _1634 = fma(_1622, cbModelParam._m0[32u].z, fma(_1621, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1620)) - _1597;
        float _1638 = inversesqrt(dot(vec3(_1632, _1633, _1634), vec3(_1632, _1633, _1634)));
        float _1651 = ((_1638 * _1632) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1589 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1652 = ((_1638 * _1633) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1593 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1653 = ((_1638 * _1634) / cbModelParam._m0[35u].z) + ((((((_1597 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1655 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1651, _1652, _1653), 0.0);
        vec4 _1662 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1651, _1652, _1653), 0.0);
        vec4 _1669 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1651, _1652, _1653), 0.0);
        vec4 _1676 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1651, _1652, _1653), 0.0);
        float _1688 = exp2((_1655.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1655.x + (-0.5));
        float _1690 = _1688 * (_1655.y + (-0.5));
        float _1691 = _1688 * (_1655.z + (-0.5));
        float _1698 = exp2((_1662.w + (-0.5)) * 20.0) * 2.0;
        float _1699 = _1698 * (_1662.x + (-0.5));
        float _1700 = _1698 * (_1662.y + (-0.5));
        float _1701 = _1698 * (_1662.z + (-0.5));
        float _1708 = exp2((_1669.w + (-0.5)) * 20.0) * 2.0;
        float _1709 = _1708 * (_1669.x + (-0.5));
        float _1710 = _1708 * (_1669.y + (-0.5));
        float _1711 = _1708 * (_1669.z + (-0.5));
        float _1718 = exp2((_1676.w + (-0.5)) * 20.0) * 2.0;
        float _1719 = _1718 * (_1676.x + (-0.5));
        float _1720 = _1718 * (_1676.y + (-0.5));
        float _1721 = _1718 * (_1676.z + (-0.5));
        float _1722 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1723 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1724 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1725 = _1689 * 0.5;
        float _1726 = _1699 * 0.5;
        float _1727 = _1709 * 0.5;
        float _1728 = dot(vec3(_1725, _1726, _1727), vec3(_1725, _1726, _1727));
        float _1733 = (_1728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1728);
        float _1741 = (dot(vec3(_1013, _1014, _1015), vec3(_1733 * _1725, _1733 * _1726, _1733 * _1727)) + 1.0) * 0.5;
        float _4252 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1750 = sqrt(((_1726 * _1726) + (_1725 * _1725)) + (_1727 * _1727)) / (_1722 + 9.9999997473787516355514526367188e-06);
        float _4263 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
        float _1751 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1752 = _1751 * 2.0;
        float _1756 = (1.0 - _1751) / (_1751 + 1.0);
        float _4274 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
        float _1766 = ((((1.0 - _1757) * (_1752 + 2.0)) * exp2(log2(isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0))) * (_1752 + 1.0))) + _1757) * _1722;
        float _1767 = _1690 * 0.5;
        float _1768 = _1700 * 0.5;
        float _1769 = _1710 * 0.5;
        float _1770 = dot(vec3(_1767, _1768, _1769), vec3(_1767, _1768, _1769));
        float _1775 = (_1770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1770);
        float _1783 = (dot(vec3(_1013, _1014, _1015), vec3(_1775 * _1767, _1775 * _1768, _1775 * _1769)) + 1.0) * 0.5;
        float _4285 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1792 = sqrt(((_1768 * _1768) + (_1767 * _1767)) + (_1769 * _1769)) / (_1723 + 9.9999997473787516355514526367188e-06);
        float _4296 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
        float _1793 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1794 = _1793 * 2.0;
        float _1798 = (1.0 - _1793) / (_1793 + 1.0);
        float _4307 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
        float _1808 = ((((1.0 - _1799) * (_1794 + 2.0)) * exp2(log2(isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_1794 + 1.0))) + _1799) * _1723;
        float _1809 = _1691 * 0.5;
        float _1810 = _1701 * 0.5;
        float _1811 = _1711 * 0.5;
        float _1812 = dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811));
        float _1817 = (_1812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1812);
        float _1825 = (dot(vec3(_1013, _1014, _1015), vec3(_1817 * _1809, _1817 * _1810, _1817 * _1811)) + 1.0) * 0.5;
        float _4318 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1834 = sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811)) / (_1724 + 9.9999997473787516355514526367188e-06);
        float _4329 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
        float _1835 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1836 = _1835 * 2.0;
        float _1840 = (1.0 - _1835) / (_1835 + 1.0);
        float _4340 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1850 = ((((1.0 - _1841) * (_1836 + 2.0)) * exp2(log2(isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_1836 + 1.0))) + _1841) * _1724;
        _1858 = _1691;
        _1859 = _1690;
        _1860 = _1689;
        _1861 = _1701;
        _1862 = _1700;
        _1863 = _1699;
        _1864 = _1711;
        _1865 = _1710;
        _1866 = _1709;
        _1867 = _1724;
        _1868 = _1723;
        _1869 = _1722;
        _1870 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)));
        _1871 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0)));
        _1872 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)));
    }
    else
    {
        _1858 = _1552;
        _1859 = _1552;
        _1860 = _1552;
        _1861 = _1552;
        _1862 = _1552;
        _1863 = _1552;
        _1864 = _1552;
        _1865 = _1552;
        _1866 = _1552;
        _1867 = _1552;
        _1868 = _1552;
        _1869 = _1552;
        _1870 = 0.0;
        _1871 = 0.0;
        _1872 = 0.0;
    }
    float _1882 = (cbModelParam._m0[1u].x * (_1870 - _1564)) + _1564;
    float _1883 = (cbModelParam._m0[1u].x * (_1871 - _1565)) + _1565;
    float _1884 = (cbModelParam._m0[1u].x * (_1872 - _1566)) + _1566;
    float _1905 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1883, cbSceneParam._m0[89u].y, _1882 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1883, cbSceneParam._m0[90u].y, _1882 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1883, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1882));
    float _1926 = _1186 * 0.5;
    float _1927 = _1187 * 0.5;
    float _1928 = _1188 * 0.5;
    float _1929 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1860, _1863, _1866, _1869));
    float _1932 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1859, _1862, _1865, _1868));
    float _1935 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1858, _1861, _1864, _1867));
    float _1969;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1942 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1551, _1555, _1558, _1561));
        float _1946 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1553, _1556, _1559, _1562));
        float _1950 = dot(vec4(_1926, _1927, _1928, 1.0), vec4(_1554, _1557, _1560, _1563));
        float _1957 = dot(vec4(cbModelParam._m0[39u]), vec4(_1926, _1927, _1928, 1.0));
        _1969 = dot(vec3(isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0)), isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1957) ? 0.0 : (isnan(0.0) ? _1957 : max(0.0, _1957))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1969 = 1.0;
    }
    float _1980;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1971 = dot(vec4(cbModelParam._m0[40u]), vec4(_1926, _1927, _1928, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0)), isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1971) ? 0.0 : (isnan(0.0) ? _1971 : max(0.0, _1971))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1984 = (_1980 * cbModelParam._m0[1u].x) + (_1969 * (1.0 - cbModelParam._m0[1u].x));
    float _1994 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1016);
    float _1995 = isnan(_1994) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1994 : min(cbModelParam._m0[25u].z, _1994));
    float _2075;
    float _2077;
    float _2079;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2042 = fma(_1250, cbModelParam._m0[13u].z, fma(_1246, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1242)) + cbModelParam._m0[13u].w;
        float _2046 = fma(_1250, cbModelParam._m0[14u].z, fma(_1246, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1242)) + cbModelParam._m0[14u].w;
        float _2050 = fma(_1250, cbModelParam._m0[15u].z, fma(_1246, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1242)) + cbModelParam._m0[15u].w;
        float _2053 = fma(_1188, cbModelParam._m0[13u].z, fma(_1187, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1186));
        float _2056 = fma(_1188, cbModelParam._m0[14u].z, fma(_1187, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1186));
        float _2059 = fma(_1188, cbModelParam._m0[15u].z, fma(_1187, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1186));
        float _2087;
        if (_2053 > 0.0)
        {
            _2087 = abs((1.0 - _2042) / _2053);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2053 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2042 + 1.0) / _2053);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2087 = frontier_phi_14_12_ladder;
        }
        float _2310;
        if (_2056 > 0.0)
        {
            _2310 = abs((1.0 - _2046) / _2056);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2056 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2046 + 1.0) / _2056);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2310 = frontier_phi_23_19_ladder;
        }
        float _2567;
        if (_2059 > 0.0)
        {
            _2567 = abs((1.0 - _2050) / _2059);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2050 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2567 = frontier_phi_35_30_ladder;
        }
        float _2569 = isnan(_2310) ? _2087 : (isnan(_2087) ? _2310 : min(_2087, _2310));
        float _2570 = isnan(_2567) ? _2569 : (isnan(_2569) ? _2567 : min(_2569, _2567));
        float _2574 = (_2570 * _2053) + _2042;
        float _2575 = (_2570 * _2056) + _2046;
        float _2576 = (_2570 * _2059) + _2050;
        float _2577 = _2570 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2577;
        float _2581 = _2577 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 > _2581) || ((_2575 < _2579) || ((_2574 < _2579) || (_2574 > _2581))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2704 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2576, cbModelParam._m0[9u].z, fma(_2575, cbModelParam._m0[9u].y, _2574 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2576, cbModelParam._m0[10u].z, fma(_2575, cbModelParam._m0[10u].y, _2574 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2576, cbModelParam._m0[11u].z, fma(_2575, cbModelParam._m0[11u].y, _2574 * cbModelParam._m0[11u].x))), _1995);
            frontier_phi_13_35_ladder = _2704.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2704.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2704.x * cbModelParam._m0[1u].y;
        }
        _2075 = frontier_phi_13_35_ladder_2;
        _2077 = frontier_phi_13_35_ladder_1;
        _2079 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2063 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1186, _1187, _1188), _1995);
        _2075 = _2063.x * cbModelParam._m0[1u].y;
        _2077 = _2063.y * cbModelParam._m0[1u].y;
        _2079 = _2063.z * cbModelParam._m0[1u].y;
    }
    float _2083 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1016);
    float _2084 = isnan(_2083) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2083 : min(cbModelParam._m0[25u].w, _2083));
    float _2173;
    float _2175;
    float _2177;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2137 = fma(_1250, cbModelParam._m0[21u].z, fma(_1246, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1242)) + cbModelParam._m0[21u].w;
        float _2141 = fma(_1250, cbModelParam._m0[22u].z, fma(_1246, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1242)) + cbModelParam._m0[22u].w;
        float _2145 = fma(_1250, cbModelParam._m0[23u].z, fma(_1246, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1242)) + cbModelParam._m0[23u].w;
        float _2148 = fma(_1188, cbModelParam._m0[21u].z, fma(_1187, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1186));
        float _2151 = fma(_1188, cbModelParam._m0[22u].z, fma(_1187, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1186));
        float _2154 = fma(_1188, cbModelParam._m0[23u].z, fma(_1187, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1186));
        float _2315;
        if (_2148 > 0.0)
        {
            _2315 = abs((1.0 - _2137) / _2148);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2148 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2137 + 1.0) / _2148);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2315 = frontier_phi_25_21_ladder;
        }
        float _2594;
        if (_2151 > 0.0)
        {
            _2594 = abs((1.0 - _2141) / _2151);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2151 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2141 + 1.0) / _2151);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2594 = frontier_phi_37_32_ladder;
        }
        float _2807;
        if (_2154 > 0.0)
        {
            _2807 = abs((1.0 - _2145) / _2154);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2154 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2145 + 1.0) / _2154);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2807 = frontier_phi_46_43_ladder;
        }
        float _2809 = isnan(_2594) ? _2315 : (isnan(_2315) ? _2594 : min(_2315, _2594));
        float _2810 = isnan(_2807) ? _2809 : (isnan(_2809) ? _2807 : min(_2809, _2807));
        float _2814 = (_2810 * _2148) + _2137;
        float _2815 = (_2810 * _2151) + _2141;
        float _2816 = (_2810 * _2154) + _2145;
        float _2817 = _2810 * 9.9999997473787516355514526367188e-05;
        float _2818 = (-1.0) - _2817;
        float _2820 = _2817 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2816 > _2820) || ((_2816 < _2818) || ((_2815 > _2820) || ((_2815 < _2818) || ((_2814 < _2818) || (_2814 > _2820))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3015 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2816, cbModelParam._m0[17u].z, fma(_2815, cbModelParam._m0[17u].y, _2814 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2816, cbModelParam._m0[18u].z, fma(_2815, cbModelParam._m0[18u].y, _2814 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2816, cbModelParam._m0[19u].z, fma(_2815, cbModelParam._m0[19u].y, _2814 * cbModelParam._m0[19u].x))), _2084);
            frontier_phi_22_46_ladder = _3015.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3015.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3015.x * cbModelParam._m0[1u].z;
        }
        _2173 = frontier_phi_22_46_ladder_2;
        _2175 = frontier_phi_22_46_ladder_1;
        _2177 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2157 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1186, _1187, _1188), _2084);
        _2173 = _2157.x * cbModelParam._m0[1u].z;
        _2175 = _2157.y * cbModelParam._m0[1u].z;
        _2177 = _2157.z * cbModelParam._m0[1u].z;
    }
    float _2190 = (((_1213 * _1162) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2173 - _2075)) + _2075);
    float _2192 = (((_1213 * _1164) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2175 - _2077)) + _2077);
    float _2194 = (((_1213 * _1165) + _1214) * _1178) * ((cbModelParam._m0[1u].w * (_2177 - _2079)) + _2079);
    float _2197 = fma(_2194, cbSceneParam._m0[89u].z, fma(_2192, cbSceneParam._m0[89u].y, _2190 * cbSceneParam._m0[89u].x));
    float _2200 = fma(_2194, cbSceneParam._m0[90u].z, fma(_2192, cbSceneParam._m0[90u].y, _2190 * cbSceneParam._m0[90u].x));
    float _2203 = fma(_2194, cbSceneParam._m0[91u].z, fma(_2192, cbSceneParam._m0[91u].y, _2190 * cbSceneParam._m0[91u].x));
    vec4 _2211 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1100, _1101));
    float _2213 = _2211.w;
    float _2225 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2213);
    float _2226 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2213);
    float _2227 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2213);
    uvec4 _2231 = floatBitsToUint(cbInstanceData._m0[_288 + 5u]);
    uint _2233 = _2231.x * 14u;
    uint _2234 = _2233 + 13u;
    float _2241 = _1178 + (-1.0);
    float _2246 = (cbLight._m0[_2234].x * _2241) + 1.0;
    float _2247 = (cbLight._m0[_2234].y * _2241) + 1.0;
    float _2248 = (cbLight._m0[_2234].z * _2241) + 1.0;
    float _2249 = (cbLight._m0[_2234].w * _2241) + 1.0;
    uint _2250 = _2233 + 5u;
    float _2256 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2260 = _2233 + 4u;
    float _2269 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2273 = _2233 | 1u;
    float _2284 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_1013, _1014, _1015));
    float _2287 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_1013, _1014, _1015));
    float _4476 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _4487 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2292 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * 0.3183098733425140380859375;
    float _2294 = (isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0))) * 0.3183098733425140380859375;
    float _2301 = ((cbLight._m0[_2250].x * _2256) * _2294) + (((cbLight._m0[_2260].x * _2225) * _2269) * _2292);
    float _2302 = ((_2256 * cbLight._m0[_2250].y) * _2294) + (((cbLight._m0[_2260].y * _2226) * _2269) * _2292);
    float _2303 = ((_2256 * cbLight._m0[_2250].z) * _2294) + (((cbLight._m0[_2260].z * _2227) * _2269) * _2292);
    uvec4 _2307 = floatBitsToUint(cbLight._m0[_2233 + 12u]);
    bool _2309 = _2307.x == 0u;
    float _2320;
    float _2322;
    float _2324;
    if (_2309)
    {
        _2320 = _2301;
        _2322 = _2302;
        _2324 = _2303;
    }
    else
    {
        uint _2328 = _2233 + 6u;
        float _2344 = (dot(vec3(cbLight._m0[_2233 + 2u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2345 = _2344 * _2344;
        float _4498 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2346 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
        float _2347 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2320 = (((cbLight._m0[_2328].x * 0.3183098733425140380859375) * _2346) * _2347) + _2301;
        _2322 = (((cbLight._m0[_2328].y * 0.3183098733425140380859375) * _2346) * _2347) + _2302;
        _2324 = (((cbLight._m0[_2328].z * 0.3183098733425140380859375) * _2346) * _2347) + _2303;
    }
    bool _2327 = _2307.y == 0u;
    float _2365;
    float _2367;
    float _2369;
    if (_2327)
    {
        _2365 = _2320;
        _2367 = _2322;
        _2369 = _2324;
    }
    else
    {
        uint _2538 = _2233 + 7u;
        float _2554 = (dot(vec3(cbLight._m0[_2233 + 3u].xyz), vec3(_1013, _1014, _1015)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4514 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _2557 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2365 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2320;
        _2367 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2322;
        _2369 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2324;
    }
    uint _2372 = _2233 + 8u;
    float _2385 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _1016) * 0.949999988079071044921875);
    float _2386 = _2385 * _2385;
    float _2387 = cbLight._m0[_2233].x + _1092;
    float _2388 = cbLight._m0[_2233].y + _1093;
    float _2389 = cbLight._m0[_2233].z + _1094;
    float _2393 = inversesqrt(dot(vec3(_2387, _2388, _2389), vec3(_2387, _2388, _2389)));
    float _2394 = _2393 * _2387;
    float _2395 = _2393 * _2388;
    float _2396 = _2393 * _2389;
    float _2397 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2233].xyz));
    float _4530 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
    float _4541 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _2401 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
    float _2402 = dot(vec3(_1013, _1014, _1015), vec3(_2394, _2395, _2396));
    float _4552 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2405 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
    float _2406 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2394, _2395, _2396));
    float _4563 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2410 = _2386 * _2386;
    float _2414 = ((_2405 * _2405) * (_2410 + (-1.0))) + 1.0;
    float _2422 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
    float _2423 = 0.959999978542327880859375 - _1159;
    float _2425 = 0.959999978542327880859375 - _1160;
    float _2426 = 0.959999978542327880859375 - _1161;
    float _2433 = 1.0 - _2386;
    float _2444 = (0.5 / (((_2401 * ((_2400 * _2433) + _2386)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2433) + _2386) * _2400))) * _2400;
    float _4574 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2446 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2410 / ((_2414 * _2414) * 3.141590118408203125));
    uint _2460 = _2233 + 9u;
    float _2471 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _1016) * 0.949999988079071044921875);
    float _2472 = _2471 * _2471;
    float _2473 = cbLight._m0[_2273].x + _1092;
    float _2474 = cbLight._m0[_2273].y + _1093;
    float _2475 = cbLight._m0[_2273].z + _1094;
    float _2479 = inversesqrt(dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475)));
    float _2480 = _2479 * _2473;
    float _2481 = _2479 * _2474;
    float _2482 = _2479 * _2475;
    float _2483 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2273].xyz));
    float _4585 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _2487 = dot(vec3(_1013, _1014, _1015), vec3(_2480, _2481, _2482));
    float _4596 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2480, _2481, _2482));
    float _4607 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2472 * _2472;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2506 = exp2(log2(1.0 - (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * 5.0);
    float _2513 = 1.0 - _2472;
    float _2523 = (0.5 / (((_2401 * ((_2486 * _2513) + _2472)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2513) + _2472) * _2486))) * _2486;
    float _4618 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2525 = (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    float _2535 = (((((_2506 * _2423) + _1162) * cbLight._m0[_2460].x) * _2525) * _2256) + ((((cbLight._m0[_2372].x * _2225) * ((_2422 * _2423) + _1162)) * _2446) * _2269);
    float _2536 = (((((_2506 * _2425) + _1164) * cbLight._m0[_2460].y) * _2525) * _2256) + ((((cbLight._m0[_2372].y * _2226) * ((_2422 * _2425) + _1164)) * _2446) * _2269);
    float _2537 = (((((_2506 * _2426) + _1165) * cbLight._m0[_2460].z) * _2525) * _2256) + ((((cbLight._m0[_2372].z * _2227) * ((_2422 * _2426) + _1165)) * _2446) * _2269);
    float _2599;
    float _2601;
    float _2603;
    if (_2309)
    {
        _2599 = _2535;
        _2601 = _2536;
        _2603 = _2537;
    }
    else
    {
        uint _2605 = _2233 + 2u;
        uint _2609 = _2233 + 10u;
        float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _1016) * 0.949999988079071044921875);
        float _2624 = _2623 * _2623;
        float _2625 = cbLight._m0[_2605].x + _1092;
        float _2626 = cbLight._m0[_2605].y + _1093;
        float _2627 = cbLight._m0[_2605].z + _1094;
        float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
        float _2632 = _2631 * _2625;
        float _2633 = _2631 * _2626;
        float _2634 = _2631 * _2627;
        float _2635 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2605].xyz));
        float _4629 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
        float _2639 = dot(vec3(_1013, _1014, _1015), vec3(_2632, _2633, _2634));
        float _4640 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2642 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _2643 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2632, _2633, _2634));
        float _4651 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2647 = _2624 * _2624;
        float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
        float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0)))) * 5.0);
        float _2665 = 1.0 - _2624;
        float _2675 = (0.5 / (((_2401 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2665) + _2624) * _2638))) * _2638;
        float _4662 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2677 = (isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
        float _2678 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2599 = (((((_2658 * _2423) + _1162) * cbLight._m0[_2609].x) * _2677) * _2678) + _2535;
        _2601 = (((((_2658 * _2425) + _1164) * cbLight._m0[_2609].y) * _2677) * _2678) + _2536;
        _2603 = (((((_2658 * _2426) + _1165) * cbLight._m0[_2609].z) * _2677) * _2678) + _2537;
    }
    float _2713;
    float _2715;
    float _2717;
    if (_2327)
    {
        _2713 = _2599;
        _2715 = _2601;
        _2717 = _2603;
    }
    else
    {
        uint _2724 = _2233 + 3u;
        uint _2728 = _2233 + 11u;
        float _2742 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2724].w)) * _1016) * 0.949999988079071044921875);
        float _2743 = _2742 * _2742;
        float _2744 = cbLight._m0[_2724].x + _1092;
        float _2745 = cbLight._m0[_2724].y + _1093;
        float _2746 = cbLight._m0[_2724].z + _1094;
        float _2750 = inversesqrt(dot(vec3(_2744, _2745, _2746), vec3(_2744, _2745, _2746)));
        float _2751 = _2750 * _2744;
        float _2752 = _2750 * _2745;
        float _2753 = _2750 * _2746;
        float _2754 = dot(vec3(_1013, _1014, _1015), vec3(cbLight._m0[_2724].xyz));
        float _4678 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
        float _2757 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2758 = dot(vec3(_1013, _1014, _1015), vec3(_2751, _2752, _2753));
        float _4689 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        float _2761 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
        float _2762 = dot(vec3(cbLight._m0[_2724].xyz), vec3(_2751, _2752, _2753));
        float _4700 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
        float _2766 = _2743 * _2743;
        float _2770 = ((_2761 * _2761) * (_2766 + (-1.0))) + 1.0;
        float _2777 = exp2(log2(1.0 - (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0)))) * 5.0);
        float _2784 = 1.0 - _2743;
        float _2794 = (0.5 / (((_2401 * ((_2757 * _2784) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2401 * _2784) + _2743) * _2757))) * _2757;
        float _4711 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2796 = (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2766 / ((_2770 * _2770) * 3.141590118408203125));
        float _2797 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2713 = (((((_2777 * _2423) + _1162) * cbLight._m0[_2728].x) * _2796) * _2797) + _2599;
        _2715 = (((((_2777 * _2425) + _1164) * cbLight._m0[_2728].y) * _2796) * _2797) + _2601;
        _2717 = (((((_2777 * _2426) + _1165) * cbLight._m0[_2728].z) * _2796) * _2797) + _2603;
    }
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    float _2940;
    float _2942;
    if (_2231.y == 0u)
    {
        float _2872 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2873 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2872;
        float _2874 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2872;
        float _2875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2872;
        uvec4 _2887 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2888 = _2887.x;
        uint _2899 = uint((float(_2887.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1101) / _2888))) + floor(float(uint(cbSceneParam._m0[85u].x * _1100) / _2888)));
        float _2909 = (log2(_2875 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2910 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        uint _2913 = uint(isnan(14.0) ? _2910 : (isnan(_2910) ? 14.0 : min(_2910, 14.0)));
        uvec4 _2918 = texelFetch(g_lightClusterGridBuffer, int(((_2913 << 2u) + (_2899 << 6u)) >> 2u));
        uint _2919 = _2918.x;
        uint _2920 = _2887.z;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        if (((((1u << ((_2920 >> 4u) & 15u)) + 4294967295u) & _2919) == 0u) || ((_2920 & 240u) == 0u))
        {
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
        }
        else
        {
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3165 = 0.0;
            float _3166 = 0.0;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            uint _3171 = 0u;
            uint _3180;
            bool _3181;
            for (;;)
            {
                _3180 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3171 << 2u)) >> 2u)).x;
                _3181 = _3180 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3181)
                {
                    frontier_phi_61_pred = _3165;
                    frontier_phi_61_pred_1 = _3170;
                    frontier_phi_61_pred_2 = _3169;
                    frontier_phi_61_pred_3 = _3168;
                    frontier_phi_61_pred_4 = _3167;
                    frontier_phi_61_pred_5 = _3166;
                }
                else
                {
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    uint _3295;
                    _3289 = _3165;
                    _3290 = _3166;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3180;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    for (;;)
                    {
                        uint _3299 = uint(findLSB(_3295)) + (_3171 << 5u);
                        uint _3296 = (_3295 + 4294967295u) & _3295;
                        uint _3301 = _3299 * 48u;
                        vec4 _3315 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3301)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3301 + 3u)).x));
                        uint _3321 = (_3299 * 48u) + 4u;
                        vec4 _3334 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3321)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3321 + 3u)).x));
                        uint _3340 = (_3299 * 48u) + 8u;
                        vec3 _3351 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3340)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3340 + 2u)).x));
                        float _3355 = _3315.x - _2873;
                        float _3356 = _3315.y - _2874;
                        float _3357 = _3315.z - _2875;
                        float _3358 = dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357));
                        float _3361 = inversesqrt(_3358);
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3365 = dot(vec3(_1119, _1122, _1125), vec3(_3362, _3363, _3364));
                        float _3370 = 1.0 - (_3358 * _3315.w);
                        float _4737 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3371 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                        float _3372 = sqrt(_3358) * _3334.w;
                        float _3375 = 1.39999997615814208984375 / (_3372 + 1.39999997615814208984375);
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3365) + _3376;
                        float _3382 = _3372 * _3372;
                        float _3386 = ((isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0))) * _3371) / ((_3382 * 0.699999988079071044921875) + 1.0);
                        float _3390 = (-0.0) - _2873;
                        float _3391 = (-0.0) - _2874;
                        float _3392 = (-0.0) - _2875;
                        float _3396 = inversesqrt(dot(vec3(_3390, _3391, _3392), vec3(_3390, _3391, _3392)));
                        float _3397 = _3396 * _3390;
                        float _3398 = _3396 * _3391;
                        float _3399 = _3396 * _3392;
                        float _3407 = exp2(log2(1.0 / ((_3382 * 3.5) + 5.0)) * 0.25);
                        float _3408 = 1.0 - _1194;
                        float _3415 = sqrt(1.0 - ((1.0 - (_3408 * _3408)) * (1.0 - (_3407 * _3407))));
                        float _3416 = _3415 * _3415;
                        float _3417 = _3416 * _3416;
                        float _3418 = _3397 + _3362;
                        float _3419 = _3398 + _3363;
                        float _3420 = _3399 + _3364;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3428 = dot(vec3(_1119, _1122, _1125), vec3(_3397, _3398, _3399));
                        float _4753 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
                        float _3432 = dot(vec3(_1119, _1122, _1125), vec3(_3424 * _3418, _3424 * _3419, _3424 * _3420));
                        float _4764 = isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0));
                        float _3435 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
                        float _3439 = ((_3435 * _3435) * (_3417 + (-1.0))) + 1.0;
                        float _3440 = _3375 * _3416;
                        float _3441 = _3440 * _3440;
                        float _3444 = ((1.0 - _3441) * _3365) + _3441;
                        float _4775 = isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0));
                        float _3445 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3446 = 1.0 - _3416;
                        float _3456 = (0.5 / (((_3445 * ((_3431 * _3446) + _3416)) + 9.9999999392252902907785028219223e-09) + (((_3445 * _3446) + _3416) * _3431))) * _3445;
                        float _4786 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                        float _3467 = (((_3417 * 3.1415927410125732421875) * (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0)))) / ((_3439 * _3439) * ((_3382 * 2.1991131305694580078125) + 3.141590118408203125))) * _3371;
                        _3224 = (_3386 * _3334.x) + _3292;
                        _3225 = (_3386 * _3334.y) + _3293;
                        _3226 = (_3386 * _3334.z) + _3294;
                        _3221 = (_3467 * _3351.x) + _3289;
                        _3222 = (_3467 * _3351.y) + _3290;
                        _3223 = (_3467 * _3351.z) + _3291;
                        if (_3296 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3289 = _3221;
                            _3290 = _3222;
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3296;
                        }
                    }
                    frontier_phi_61_pred = _3221;
                    frontier_phi_61_pred_1 = _3226;
                    frontier_phi_61_pred_2 = _3225;
                    frontier_phi_61_pred_3 = _3224;
                    frontier_phi_61_pred_4 = _3223;
                    frontier_phi_61_pred_5 = _3222;
                }
                _3021 = frontier_phi_61_pred;
                _3031 = frontier_phi_61_pred_1;
                _3029 = frontier_phi_61_pred_2;
                _3027 = frontier_phi_61_pred_3;
                _3025 = frontier_phi_61_pred_4;
                _3023 = frontier_phi_61_pred_5;
                uint _3172 = _3171 + 1u;
                if (_3172 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3165 = _3021;
                    _3166 = _3023;
                    _3167 = _3025;
                    _3168 = _3027;
                    _3169 = _3029;
                    _3170 = _3031;
                    _3171 = _3172;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
        }
        uvec4 _3034 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3035 = _3034.z;
        uint _3037 = (_3035 >> 8u) & 15u;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        if (((4294967295u << _3037) & _2919) == 0u)
        {
            _3133 = _3020;
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
        }
        else
        {
            float _3158 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
            float _3159 = _3158 * _2873;
            float _3160 = _3158 * _2874;
            float _3161 = _3158 * _2875;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3037 < ((_3035 >> 12u) & 15u))
            {
                float _3134;
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3272 = _3020;
                float _3273 = _3022;
                float _3274 = _3024;
                float _3275 = _3026;
                float _3276 = _3028;
                float _3277 = _3030;
                uint _3278 = _3037;
                uint _3287;
                bool _3288;
                for (;;)
                {
                    _3287 = texelFetch(g_lightClassification, int((((_2913 << 5u) + (_2899 << 9u)) + (_3278 << 2u)) >> 2u)).x;
                    _3288 = _3287 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3288)
                    {
                        frontier_phi_67_pred = _3275;
                        frontier_phi_67_pred_1 = _3276;
                        frontier_phi_67_pred_2 = _3277;
                        frontier_phi_67_pred_3 = _3274;
                        frontier_phi_67_pred_4 = _3273;
                        frontier_phi_67_pred_5 = _3272;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3485 = _3272;
                        float _3486 = _3273;
                        float _3487 = _3274;
                        float _3488 = _3275;
                        float _3489 = _3276;
                        float _3490 = _3277;
                        uint _3491 = _3287;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3560;
                        vec4 _3575;
                        float _3621;
                        bool _3622;
                        for (;;)
                        {
                            uint _3502 = ((_3278 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3547 = (_3502 * 40u) + 16u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3502 * 40u) + 20u;
                            _3575 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 3u)).x));
                            uint _3577 = (_3502 * 40u) + 24u;
                            vec4 _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            uint _3596 = (_3502 * 40u) + 28u;
                            vec4 _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            _3621 = fma(_2875, _3609.z, fma(_2874, _3609.y, _3609.x * _2873)) + _3609.w;
                            _3622 = !((fma(_2875, _3590.z, fma(_2874, _3590.y, _3590.x * _2873)) + _3590.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3622)
                            {
                                float _3649 = _3517.x - _2873;
                                float _3650 = _3517.y - _2874;
                                float _3651 = _3517.z - _2875;
                                float _3652 = dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651));
                                float _3655 = inversesqrt(_3652);
                                float _3656 = _3655 * _3649;
                                float _3657 = _3655 * _3650;
                                float _3658 = _3655 * _3651;
                                float _3662 = 1.0 - (_3652 / (_3518 * _3518));
                                float _4797 = isnan(0.0) ? _3662 : (isnan(_3662) ? 0.0 : max(_3662, 0.0));
                                float _3663 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
                                float _3667 = sqrt(_3652) * _3533.w;
                                float _3669 = 1.39999997615814208984375 / (_3667 + 1.39999997615814208984375);
                                float _3670 = _3669 * _3669;
                                float _3673 = ((1.0 - _3670) * dot(vec3(_3656, _3657, _3658), vec3(_1119, _1122, _1125))) + _3670;
                                float _3676 = _3667 * _3667;
                                float _3680 = (fma(_2875, _3560.z, fma(_2874, _3560.y, _3560.x * _2873)) + _3560.w) / _3621;
                                float _3681 = (fma(_2875, _3575.z, fma(_2874, _3575.y, _3575.x * _2873)) + _3575.w) / _3621;
                                float _3685 = 1.0 - dot(vec2(_3680, _3681), vec2(_3680, _3681));
                                float _4813 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                                float _3687 = _3686 * (((isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0))) * _3663) / ((_3676 * 0.699999988079071044921875) + 1.0));
                                float _3699 = exp2(log2(1.0 / ((_3676 * 3.5) + 5.0)) * 0.25);
                                float _3700 = 1.0 - _1194;
                                float _3707 = sqrt(1.0 - ((1.0 - (_3700 * _3700)) * (1.0 - (_3699 * _3699))));
                                float _3708 = _3707 * _3707;
                                float _3709 = _3708 * _3708;
                                float _3710 = _3656 - _3159;
                                float _3711 = _3657 - _3160;
                                float _3712 = _3658 - _3161;
                                float _3716 = inversesqrt(dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712)));
                                float _3720 = dot(vec3(_1119, _1122, _1125), vec3((-0.0) - _3159, (-0.0) - _3160, (-0.0) - _3161));
                                float _4824 = isnan(0.0) ? _3720 : (isnan(_3720) ? 0.0 : max(_3720, 0.0));
                                float _3723 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                                float _3724 = dot(vec3(_1119, _1122, _1125), vec3(_3716 * _3710, _3716 * _3711, _3716 * _3712));
                                float _4835 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3727 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3731 = ((_3727 * _3727) * (_3709 + (-1.0))) + 1.0;
                                float _3732 = _3669 * _3708;
                                float _3733 = _3732 * _3732;
                                float _3739 = ((1.0 - _3733) * dot(vec3(_1119, _1122, _1125), vec3(_3656, _3657, _3658))) + _3733;
                                float _4846 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                                float _3740 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                                float _3741 = 1.0 - _3708;
                                float _3751 = (0.5 / (((_3740 * ((_3723 * _3741) + _3708)) + 9.9999999392252902907785028219223e-09) + (((_3740 * _3741) + _3708) * _3723))) * _3740;
                                float _4857 = isnan(0.0) ? _3751 : (isnan(_3751) ? 0.0 : max(_3751, 0.0));
                                float _3761 = (_3686 * _3663) * (((_3709 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3731 * _3731) * ((_3676 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3761 * _3545.x;
                                frontier_phi_73_pred_1 = _3761 * _3545.y;
                                frontier_phi_73_pred_2 = _3687 * _3533.z;
                                frontier_phi_73_pred_3 = _3687 * _3533.y;
                                frontier_phi_73_pred_4 = _3687 * _3533.x;
                                frontier_phi_73_pred_5 = _3761 * _3545.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3765 = frontier_phi_73_pred;
                            _3766 = frontier_phi_73_pred_1;
                            _3770 = frontier_phi_73_pred_2;
                            _3769 = frontier_phi_73_pred_3;
                            _3768 = frontier_phi_73_pred_4;
                            _3767 = frontier_phi_73_pred_5;
                            _3475 = _3768 + _3488;
                            _3476 = _3769 + _3489;
                            _3477 = _3770 + _3490;
                            _3472 = _3765 + _3485;
                            _3473 = _3766 + _3486;
                            _3474 = _3767 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3475;
                        frontier_phi_67_pred_1 = _3476;
                        frontier_phi_67_pred_2 = _3477;
                        frontier_phi_67_pred_3 = _3474;
                        frontier_phi_67_pred_4 = _3473;
                        frontier_phi_67_pred_5 = _3472;
                    }
                    _3140 = frontier_phi_67_pred;
                    _3142 = frontier_phi_67_pred_1;
                    _3144 = frontier_phi_67_pred_2;
                    _3138 = frontier_phi_67_pred_3;
                    _3136 = frontier_phi_67_pred_4;
                    _3134 = frontier_phi_67_pred_5;
                    uint _3279 = _3278 + 1u;
                    if (_3279 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3272 = _3134;
                        _3273 = _3136;
                        _3274 = _3138;
                        _3275 = _3140;
                        _3276 = _3142;
                        _3277 = _3144;
                        _3278 = _3279;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3142;
                frontier_phi_55_56_ladder_1 = _3144;
                frontier_phi_55_56_ladder_2 = _3140;
                frontier_phi_55_56_ladder_3 = _3138;
                frontier_phi_55_56_ladder_4 = _3136;
                frontier_phi_55_56_ladder_5 = _3134;
            }
            else
            {
                frontier_phi_55_56_ladder = _3028;
                frontier_phi_55_56_ladder_1 = _3030;
                frontier_phi_55_56_ladder_2 = _3026;
                frontier_phi_55_56_ladder_3 = _3024;
                frontier_phi_55_56_ladder_4 = _3022;
                frontier_phi_55_56_ladder_5 = _3020;
            }
            _3133 = frontier_phi_55_56_ladder_5;
            _3135 = frontier_phi_55_56_ladder_4;
            _3137 = frontier_phi_55_56_ladder_3;
            _3139 = frontier_phi_55_56_ladder_2;
            _3141 = frontier_phi_55_56_ladder;
            _3143 = frontier_phi_55_56_ladder_1;
        }
        float _3148 = isnan(1.0) ? _1178 : (isnan(_1178) ? 1.0 : min(_1178, 1.0));
        _2932 = (_3148 * _3139) + _2365;
        _2934 = (_3148 * _3141) + _2367;
        _2936 = (_3148 * _3143) + _2369;
        _2938 = ((_3133 * _1162) * _3148) + _2713;
        _2940 = ((_3135 * _1164) * _3148) + _2715;
        _2942 = ((_3137 * _1165) * _3148) + _2717;
    }
    else
    {
        _2932 = _2365;
        _2934 = _2367;
        _2936 = _2369;
        _2938 = _2713;
        _2940 = _2715;
        _2942 = _2717;
    }
    float _4873 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _4884 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
    float _4895 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    uint _2962 = _288 + 6u;
    float _2970 = _1100 / cbSceneParam._m0[86u].x;
    float _2971 = _1101 / cbSceneParam._m0[86u].y;
    vec4 _2985 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, (log2((isnan(cbSceneParam._m0[77u].w) ? _1035 : (isnan(_1035) ? cbSceneParam._m0[77u].w : min(_1035, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2987 = _2985.x;
    float _2988 = _2985.y;
    float _2989 = _2985.z;
    float _2990 = _2985.w;
    float _3083;
    float _3085;
    float _3087;
    float _3089;
    if (_1035 > cbSceneParam._m0[78u].w)
    {
        float _3045 = isnan(_1035) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1035 : min(cbSceneParam._m0[80u].w, _1035));
        float _3046 = _3045 / _1035;
        float _3057 = _3046 * _1085;
        float _3058 = _1086 * _3046;
        float _3059 = (-0.0) - _3058;
        float _3061 = _3046 * _1087;
        float _3063 = (cbSceneParam._m0[77u].w * _3059) / _3045;
        float _3064 = _3063 + cbSceneParam._m0[79u].w;
        float _3065 = cbSceneParam._m0[79u].w - _3058;
        float _3071 = sqrt(((_3057 * _3057) + (_3058 * _3058)) + (_3061 * _3061));
        float _3074 = (1.0 - (cbSceneParam._m0[77u].w / _3045)) * _3071;
        float _3079 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3081 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3234;
        if (abs((_3059 - _3063) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3234 = ((((_3064 > 0.0) ? exp2(_3079 * _3064) : (2.0 - exp2(_3081 * _3064))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3074;
        }
        else
        {
            float _3194 = 1.0 / cbSceneParam._m0[80u].x;
            float _3195 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : max(_3064, _3065));
            float _3196 = isnan(_3065) ? _3064 : (isnan(_3064) ? _3065 : min(_3064, _3065));
            float _3205 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : min(_3195, 0.0));
            float _3206 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : min(_3196, 0.0));
            _3234 = ((abs(_3071 / _3059) * cbSceneParam._m0[80u].y) * ((((_3205 - _3206) * 2.0) - ((exp2(_3079 * (isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0)))) - exp2(_3079 * (isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))))) * _3194)) - ((exp2(_3081 * _3205) - exp2(_3081 * _3206)) * _3194))) + (_3074 * cbSceneParam._m0[80u].z);
        }
        vec4 _3236 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2970, _2971, 1.0), 0.0);
        float _3245 = exp2((_3234 * (-1.44269502162933349609375)) * (1.0 - _3236.w));
        float _3246 = log2(_3245);
        float _3262 = log2(_2990);
        _3083 = (exp2(_3262 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].x)) * _3236.x) / cbSceneParam._m0[78u].x)) + _2987;
        _3085 = (exp2(_3262 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].y)) * _3236.y) / cbSceneParam._m0[78u].y)) + _2988;
        _3087 = (exp2(_3262 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3246 * cbSceneParam._m0[78u].z)) * _3236.z) / cbSceneParam._m0[78u].z)) + _2989;
        _3089 = _3245 * _2990;
    }
    else
    {
        _3083 = _2987;
        _3085 = _2988;
        _3087 = _2989;
        _3089 = _2990;
    }
    float _3101 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3102 = _3101 == 3.0;
    float _3103 = log2(_3089);
    float _3110 = exp2(_3103 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2932 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1178))) + ((_2938 + ((isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0))) * _1984)) * cbPerFrame._m0[3u].x));
    float _3111 = exp2(_3103 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2934 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1178))) + ((_2940 + ((isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0))) * _1984)) * cbPerFrame._m0[3u].x));
    float _3112 = exp2(_3103 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2936 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1178))) + ((_2942 + ((isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0))) * _1984)) * cbPerFrame._m0[3u].x));
    float _3121 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3121 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3083)));
    SV_Target.y = _3121 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.z = _3121 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.w = cbInstanceData._m0[_2962].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2962].w;
}


