#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1425;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _238 = _237 * _229;
    float _239 = _237 * _230;
    float _240 = _237 * _231;
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = _244 * NORMAL.x;
    float _246 = _244 * NORMAL.y;
    float _247 = _244 * NORMAL.z;
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _252 = _251 * TANGENT.x;
    float _253 = _251 * TANGENT.y;
    float _254 = _251 * TANGENT.z;
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _267 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _268 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4034 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4045 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _4056 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    uint _278 = uint(roundEven(NORMAL.w)) * 13u;
    uint _283 = _278 + 1u;
    uint _287 = _278 + 2u;
    float _296 = sqrt(((cbInstanceData._m0[_283].x * cbInstanceData._m0[_283].x) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x)) + (cbInstanceData._m0[_287].x * cbInstanceData._m0[_287].x));
    float _297 = _296 * TEXCOORD.z;
    float _298 = _296 * TEXCOORD.w;
    vec4 _311 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _297) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _298) + cbTextureTilingScale._m0[13u].w));
    vec4 _335 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _340 = _335.x * cbMtdParam._m0[11u].x;
    float _341 = _335.y * cbMtdParam._m0[11u].y;
    float _342 = _335.z * cbMtdParam._m0[11u].z;
    vec4 _361 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _297) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _298) + cbTextureTilingScale._m0[5u].w));
    vec4 _380 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _380.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4067 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _451 = (_444 * ((_361.x * cbMtdParam._m0[12u].x) - _340)) + _340;
    float _452 = (_444 * ((_361.y * cbMtdParam._m0[12u].y) - _341)) + _341;
    float _453 = (_444 * ((_361.z * cbMtdParam._m0[12u].z) - _342)) + _342;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _297) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _298) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _380.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4078 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    float _530 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _311.x) * _524;
    float _533 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _311.y) * _525;
    float _536 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _311.z) * _526;
    float _543 = ((_524 - _530) * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) + _530;
    float _544 = ((_525 - _533) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) + _533;
    float _545 = ((_526 - _536) * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) + _536;
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _297) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _298) + cbTextureTilingScale._m0[20u].w));
    vec4 _587 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _297) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _298) + cbTextureTilingScale._m0[4u].w));
    vec4 _604 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _606 = _604.x;
    float _607 = _604.y;
    float _608 = _604.z;
    float _615 = ((_587.x - _606) * _444) + _606;
    float _616 = ((_587.y - _607) * _444) + _607;
    float _617 = ((_587.z - _608) * _444) + _608;
    vec4 _629 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _297) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _298) + cbTextureTilingScale._m0[2u].w));
    float _642 = ((_629.z - _617) * _517) + _617;
    float _645 = ((((_629.x - _615) * _517) + _615) * 2.0) + (-1.0);
    float _646 = ((((_629.y - _616) * _517) + _616) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _4089 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))));
    vec4 _670 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _682 = (_645 + ((((_562.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_670.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _683 = (_646 + ((((_562.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_670.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _686 = fma(_652, _245, fma(_683, _252, _682 * _238));
    float _689 = fma(_652, _246, fma(_683, _253, _682 * _239));
    float _692 = fma(_652, _247, fma(_683, _254, _682 * _240));
    float _696 = inversesqrt(dot(vec3(_686, _689, _692), vec3(_686, _689, _692)));
    vec4 _723 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _297) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _298) + cbTextureTilingScale._m0[11u].w));
    float _725 = _723.x;
    float _726 = 1.0 - _725;
    float _735 = (cbMtdParam._m0[19u].x + dot(vec4(_696 * _686, _696 * _689, _696 * _692, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_725 - _726) * cbMtdParam._m0[24u].z) + _726) * cbMtdParam._m0[21u].z);
    float _4100 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _736 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _743 = (_736 * (cbMtdParam._m0[17u].x - _543)) + _543;
    float _744 = (_736 * (cbMtdParam._m0[17u].y - _544)) + _544;
    float _745 = (_736 * (cbMtdParam._m0[17u].z - _545)) + _545;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _791 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _297) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _298) + cbTextureTilingScale._m0[9u].w)).x - _773) * _444) + _773;
    float _808 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _297) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _298) + cbTextureTilingScale._m0[21u].w)).x - _791) * _517) + _791;
    float _812 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _808) * cbMtdParam._m0[19u].z) + _808;
    float _814 = _812 - (_812 * _736);
    float _819 = (((_562.z - _642) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _642;
    float _823 = ((_670.z - _819) * cbMtdParam._m0[19u].w) + _819;
    vec4 _836 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _297) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _298) + cbTextureTilingScale._m0[15u].w));
    float _843 = (_836.x * 2.0) + (-1.0);
    float _844 = (_836.y * 2.0) + (-1.0);
    float _845 = dot(vec2(_843, _844), vec2(_843, _844));
    float _4111 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _853 = ((_836.z - _823) * _736) + _823;
    float _863 = ((sqrt(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) - _652) * _736) + _652;
    float _866 = (((_843 - _682) * _736) + _682) + (cbMtdParam._m0[21u].x * _682);
    float _867 = (((_844 - _683) * _736) + _683) + (cbMtdParam._m0[21u].x * _683);
    float _871 = cbMtdParam._m0[22u].x + _670.w;
    float _874 = fma(_863, _245, fma(_867, _252, _866 * _238));
    float _877 = fma(_863, _246, fma(_867, _253, _866 * _239));
    float _880 = fma(_863, _247, fma(_867, _254, _866 * _240));
    float _884 = inversesqrt(dot(vec3(_874, _877, _880), vec3(_874, _877, _880)));
    float _885 = _884 * _874;
    float _886 = _884 * _877;
    float _887 = _884 * _880;
    float _4122 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _888 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
    float _4133 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _4144 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4155 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4166 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4177 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _893 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _907 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _958 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _948);
    float _959 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _948);
    float _960 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _948);
    float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
    float _965 = _958 * _964;
    float _966 = _959 * _964;
    float _967 = _960 * _964;
    float _973 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _974 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _992 = fma(_887, cbSceneParam._m0[5u].z, fma(_886, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _885));
    float _995 = fma(_887, cbSceneParam._m0[6u].z, fma(_886, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _885));
    float _998 = fma(_887, cbSceneParam._m0[7u].z, fma(_886, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _885));
    uint _1012 = (_278 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1018 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1012].x;
    float _1019 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1012].y;
    float _1020 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1012].z;
    float _4188 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
    float _1021 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
    float _1022 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
    float _1023 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _1024 = 1.0 - _893;
    float _1025 = _1021 * _1024;
    float _1026 = _1022 * _1024;
    float _1027 = _1023 * _1024;
    float _1032 = (_1021 + (-0.039999999105930328369140625)) * _893;
    float _1033 = (_1022 + (-0.039999999105930328369140625)) * _893;
    float _1034 = (_1023 + (-0.039999999105930328369140625)) * _893;
    float _1035 = _1032 + 0.039999999105930328369140625;
    float _1037 = _1033 + 0.039999999105930328369140625;
    float _1038 = _1034 + 0.039999999105930328369140625;
    vec4 _1047 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _973, cbSceneParam._m0[86u].y * _974));
    float _1051 = ((isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * TEXCOORD_5.w) * _1047.x;
    float _1052 = dot(vec3(_885, _886, _887), vec3(_965, _966, _967));
    float _1055 = _1052 * 2.0;
    float _1059 = (_1055 * _885) - _965;
    float _1060 = (_1055 * _886) - _966;
    float _1061 = (_1055 * _887) - _967;
    float _1065 = abs(dot(vec3(_965, _966, _967), vec3(_885, _886, _887)));
    float _4221 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1067 = sqrt(_888);
    float _1080 = exp2((_1067 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1067 * 3.0));
    float _1086 = (1.0 - _1080) * ((_1067 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1087 = _1080 * _1067;
    float _1115 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1424;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1149 = fma(_1123, cbModelParam._m0[26u].z, fma(_1119, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1115));
        float _1153 = fma(_1123, cbModelParam._m0[27u].z, fma(_1119, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1115));
        float _1157 = fma(_1123, cbModelParam._m0[28u].z, fma(_1119, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1115));
        float _1182 = _1115 + _885;
        float _1183 = _1119 + _886;
        float _1184 = _1123 + _887;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1149;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1153;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1157;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1149 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1153 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1157 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1252 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1218.x + (-0.5));
        float _1254 = _1252 * (_1218.y + (-0.5));
        float _1255 = _1252 * (_1218.z + (-0.5));
        float _1262 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1225.x + (-0.5));
        float _1264 = _1262 * (_1225.y + (-0.5));
        float _1265 = _1262 * (_1225.z + (-0.5));
        float _1272 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1232.x + (-0.5));
        float _1274 = _1272 * (_1232.y + (-0.5));
        float _1275 = _1272 * (_1232.z + (-0.5));
        float _1282 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1239.x + (-0.5));
        float _1284 = _1282 * (_1239.y + (-0.5));
        float _1285 = _1282 * (_1239.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1306 = (dot(vec3(_885, _886, _887), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1316 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4269 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1318 + 1.0))) + _1323) * _1286;
        float _1333 = _1254 * 0.5;
        float _1334 = _1264 * 0.5;
        float _1335 = _1274 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_885, _886, _887), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _4302 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1360 + 1.0))) + _1365) * _1287;
        float _1375 = _1255 * 0.5;
        float _1376 = _1265 * 0.5;
        float _1377 = _1275 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_885, _886, _887), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _4335 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1402 + 1.0))) + _1407) * _1288;
        _1424 = _1255;
        _1426 = _1254;
        _1427 = _1253;
        _1428 = _1265;
        _1429 = _1264;
        _1430 = _1263;
        _1431 = _1275;
        _1432 = _1274;
        _1433 = _1273;
        _1434 = _1288;
        _1435 = _1287;
        _1436 = _1286;
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _1425;
        _1426 = _1425;
        _1427 = _1425;
        _1428 = _1425;
        _1429 = _1425;
        _1430 = _1425;
        _1431 = _1425;
        _1432 = _1425;
        _1433 = _1425;
        _1434 = _1425;
        _1435 = _1425;
        _1436 = _1425;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1463 = fma(_1123, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1115));
        float _1467 = fma(_1123, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1115));
        float _1471 = fma(_1123, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1115));
        float _1494 = _1115 + _885;
        float _1495 = _1119 + _886;
        float _1496 = _1123 + _887;
        float _1506 = fma(_1496, cbModelParam._m0[30u].z, fma(_1495, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1494)) - _1463;
        float _1507 = fma(_1496, cbModelParam._m0[31u].z, fma(_1495, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1494)) - _1467;
        float _1508 = fma(_1496, cbModelParam._m0[32u].z, fma(_1495, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1494)) - _1471;
        float _1512 = inversesqrt(dot(vec3(_1506, _1507, _1508), vec3(_1506, _1507, _1508)));
        float _1525 = ((_1512 * _1506) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1463 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1512 * _1507) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1467 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1512 * _1508) / cbModelParam._m0[35u].z) + ((((((_1471 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_885, _886, _887), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4398 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_885, _886, _887), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4431 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_885, _886, _887), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4464 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1425;
        _1733 = _1425;
        _1734 = _1425;
        _1735 = _1425;
        _1736 = _1425;
        _1737 = _1425;
        _1738 = _1425;
        _1739 = _1425;
        _1740 = _1425;
        _1741 = _1425;
        _1742 = _1425;
        _1743 = _1425;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1437)) + _1437;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1438)) + _1438;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1439)) + _1439;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1800 = _1059 * 0.5;
    float _1801 = _1060 * 0.5;
    float _1802 = _1061 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1843;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1424, _1428, _1431, _1434));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1854;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1845 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1858 = (_1854 * cbModelParam._m0[1u].x) + (_1843 * (1.0 - cbModelParam._m0[1u].x));
    float _1868 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _888);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1868 : min(cbModelParam._m0[25u].z, _1868));
    float _1950;
    float _1952;
    float _1954;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1917 = fma(_1123, cbModelParam._m0[13u].z, fma(_1119, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1115)) + cbModelParam._m0[13u].w;
        float _1921 = fma(_1123, cbModelParam._m0[14u].z, fma(_1119, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1115)) + cbModelParam._m0[14u].w;
        float _1925 = fma(_1123, cbModelParam._m0[15u].z, fma(_1119, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1115)) + cbModelParam._m0[15u].w;
        float _1928 = fma(_1061, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1059));
        float _1931 = fma(_1061, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1059));
        float _1934 = fma(_1061, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1059));
        float _1962;
        if (_1928 > 0.0)
        {
            _1962 = abs((1.0 - _1917) / _1928);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1917 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1962 = frontier_phi_14_12_ladder;
        }
        float _2134;
        if (_1931 > 0.0)
        {
            _2134 = abs((1.0 - _1921) / _1931);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1921 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2134 = frontier_phi_23_19_ladder;
        }
        float _2429;
        if (_1934 > 0.0)
        {
            _2429 = abs((1.0 - _1925) / _1934);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1934 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1925 + 1.0) / _1934);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2429 = frontier_phi_35_30_ladder;
        }
        float _2431 = isnan(_2134) ? _1962 : (isnan(_1962) ? _2134 : min(_1962, _2134));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1928) + _1917;
        float _2437 = (_2432 * _1931) + _1921;
        float _2438 = (_2432 * _1934) + _1925;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2439;
        float _2443 = _2439 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 > _2443) || ((_2437 < _2441) || ((_2436 < _2441) || (_2436 > _2443))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2438, cbModelParam._m0[9u].z, fma(_2437, cbModelParam._m0[9u].y, _2436 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2438, cbModelParam._m0[10u].z, fma(_2437, cbModelParam._m0[10u].y, _2436 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2438, cbModelParam._m0[11u].z, fma(_2437, cbModelParam._m0[11u].y, _2436 * cbModelParam._m0[11u].x))), _1869);
            frontier_phi_13_35_ladder = _2583.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2583.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2583.x * cbModelParam._m0[1u].y;
        }
        _1950 = frontier_phi_13_35_ladder_2;
        _1952 = frontier_phi_13_35_ladder_1;
        _1954 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1938 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1059, _1060, _1061), _1869);
        _1950 = _1938.x * cbModelParam._m0[1u].y;
        _1952 = _1938.y * cbModelParam._m0[1u].y;
        _1954 = _1938.z * cbModelParam._m0[1u].y;
    }
    float _1958 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _888);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1958 : min(cbModelParam._m0[25u].w, _1958));
    float _2049;
    float _2051;
    float _2053;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2013 = fma(_1123, cbModelParam._m0[21u].z, fma(_1119, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1115)) + cbModelParam._m0[21u].w;
        float _2017 = fma(_1123, cbModelParam._m0[22u].z, fma(_1119, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1115)) + cbModelParam._m0[22u].w;
        float _2021 = fma(_1123, cbModelParam._m0[23u].z, fma(_1119, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1115)) + cbModelParam._m0[23u].w;
        float _2024 = fma(_1061, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1059));
        float _2027 = fma(_1061, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1059));
        float _2030 = fma(_1061, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1059));
        float _2139;
        if (_2024 > 0.0)
        {
            _2139 = abs((1.0 - _2013) / _2024);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2013 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2139 = frontier_phi_25_21_ladder;
        }
        float _2456;
        if (_2027 > 0.0)
        {
            _2456 = abs((1.0 - _2017) / _2027);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2017 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2456 = frontier_phi_37_32_ladder;
        }
        float _2794;
        if (_2030 > 0.0)
        {
            _2794 = abs((1.0 - _2021) / _2030);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2021 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2794 = frontier_phi_47_44_ladder;
        }
        float _2796 = isnan(_2456) ? _2139 : (isnan(_2139) ? _2456 : min(_2139, _2456));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _2024) + _2013;
        float _2802 = (_2797 * _2027) + _2017;
        float _2803 = (_2797 * _2030) + _2021;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1959);
            frontier_phi_22_47_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2049 = frontier_phi_22_47_ladder_2;
        _2051 = frontier_phi_22_47_ladder_1;
        _2053 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1059, _1060, _1061), _1959);
        _2049 = _2033.x * cbModelParam._m0[1u].z;
        _2051 = _2033.y * cbModelParam._m0[1u].z;
        _2053 = _2033.z * cbModelParam._m0[1u].z;
    }
    float _2066 = (((_1086 * _1035) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2049 - _1950)) + _1950);
    float _2068 = (((_1086 * _1037) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2051 - _1952)) + _1952);
    float _2070 = (((_1086 * _1038) + _1087) * _1051) * ((cbModelParam._m0[1u].w * (_2053 - _1954)) + _1954);
    float _2073 = fma(_2070, cbSceneParam._m0[89u].z, fma(_2068, cbSceneParam._m0[89u].y, _2066 * cbSceneParam._m0[89u].x));
    float _2076 = fma(_2070, cbSceneParam._m0[90u].z, fma(_2068, cbSceneParam._m0[90u].y, _2066 * cbSceneParam._m0[90u].x));
    float _2079 = fma(_2070, cbSceneParam._m0[91u].z, fma(_2068, cbSceneParam._m0[91u].y, _2066 * cbSceneParam._m0[91u].x));
    float _2113 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2117 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2121 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2125 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2126 = _2113 / _2125;
    float _2127 = _2117 / _2125;
    float _2128 = _2121 / _2125;
    float _2275;
    float _2276;
    float _2277;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2155 = ((uint(_2128 > cbSceneParam._m0[59u].y) + uint(_2128 > cbSceneParam._m0[59u].x)) + uint(_2128 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2156 = _2155 + 43u;
        uint _2164 = _2155 + 44u;
        uint _2172 = _2155 + 45u;
        uint _2180 = _2155 + 46u;
        float _2191 = fma(_2125, cbSceneParam._m0[_2156].w, fma(_2121, cbSceneParam._m0[_2156].z, fma(_2117, cbSceneParam._m0[_2156].y, _2113 * cbSceneParam._m0[_2156].x)));
        float _2195 = fma(_2125, cbSceneParam._m0[_2164].w, fma(_2121, cbSceneParam._m0[_2164].z, fma(_2117, cbSceneParam._m0[_2164].y, _2113 * cbSceneParam._m0[_2164].x)));
        float _2203 = fma(_2125, cbSceneParam._m0[_2180].w, fma(_2121, cbSceneParam._m0[_2180].z, fma(_2117, cbSceneParam._m0[_2180].y, _2113 * cbSceneParam._m0[_2180].x)));
        float _2208 = cbSceneParam._m0[33u].z * _2203;
        float _2210 = cbSceneParam._m0[33u].w * _2203;
        float _2213 = fma(_2125, cbSceneParam._m0[_2172].w, fma(_2121, cbSceneParam._m0[_2172].z, fma(_2117, cbSceneParam._m0[_2172].y, _2113 * cbSceneParam._m0[_2172].x))) / _2203;
        float _2261 = (cbSceneParam._m0[33u].x - sqrt(((_2127 * _2127) + (_2126 * _2126)) + (_2128 * _2128))) * cbSceneParam._m0[33u].y;
        float _4590 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2268 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2208 + _2191) / _2203, (_2210 + _2195) / _2203), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2210 + _2191) / _2203, (_2195 - _2208) / _2203), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2191 - _2208) / _2203, (_2195 - _2210) / _2203), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2191 - _2210) / _2203, (_2208 + _2195) / _2203), _2213), 0.0)).x), vec4(0.25)));
        _2275 = 1.0 - (_2268 * cbSceneParam._m0[34u].x);
        _2276 = 1.0 - (_2268 * cbSceneParam._m0[34u].y);
        _2277 = 1.0 - (_2268 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2275 = 1.0;
        _2276 = 1.0;
        _2277 = 1.0;
    }
    float _2341;
    float _2343;
    float _2345;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2329 = fma(_2125, cbSceneParam._m0[63u].w, fma(_2121, cbSceneParam._m0[63u].z, fma(_2117, cbSceneParam._m0[63u].y, _2113 * cbSceneParam._m0[63u].x)));
        float _2330 = fma(_2125, cbSceneParam._m0[60u].w, fma(_2121, cbSceneParam._m0[60u].z, fma(_2117, cbSceneParam._m0[60u].y, _2113 * cbSceneParam._m0[60u].x))) / _2329;
        float _2331 = fma(_2125, cbSceneParam._m0[61u].w, fma(_2121, cbSceneParam._m0[61u].z, fma(_2117, cbSceneParam._m0[61u].y, _2113 * cbSceneParam._m0[61u].x))) / _2329;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2330 >= cbSceneParam._m0[64u].x) && (_2331 >= cbSceneParam._m0[64u].y)) && (_2330 <= cbSceneParam._m0[64u].z)) && (_2331 <= cbSceneParam._m0[64u].w))
        {
            float _2469 = fma(_2125, cbSceneParam._m0[62u].w, fma(_2121, cbSceneParam._m0[62u].z, fma(_2117, cbSceneParam._m0[62u].y, _2113 * cbSceneParam._m0[62u].x))) / _2329;
            float _2473 = isnan(cbSceneParam._m0[41u].w) ? _2469 : (isnan(_2469) ? cbSceneParam._m0[41u].w : max(_2469, cbSceneParam._m0[41u].w));
            float _2516 = (cbSceneParam._m0[33u].x - sqrt(((_2127 * _2127) + (_2126 * _2126)) + (_2128 * _2128))) * cbSceneParam._m0[33u].y;
            float _4606 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
            float _2523 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2330, cbSceneParam._m0[33u].w + _2331), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2330, _2331 - cbSceneParam._m0[33u].z), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2330 - cbSceneParam._m0[33u].z, _2331 - cbSceneParam._m0[33u].w), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2330 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2331), _2473), 0.0)).x), vec4(0.25)));
            float _2527 = 1.0 - (_2523 * cbSceneParam._m0[34u].x);
            float _2528 = 1.0 - (_2523 * cbSceneParam._m0[34u].y);
            float _2529 = 1.0 - (_2523 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2529) ? _2277 : (isnan(_2277) ? _2529 : min(_2277, _2529));
            frontier_phi_34_33_ladder_1 = isnan(_2528) ? _2276 : (isnan(_2276) ? _2528 : min(_2276, _2528));
            frontier_phi_34_33_ladder_2 = isnan(_2527) ? _2275 : (isnan(_2275) ? _2527 : min(_2275, _2527));
        }
        else
        {
            frontier_phi_34_33_ladder = _2277;
            frontier_phi_34_33_ladder_1 = _2276;
            frontier_phi_34_33_ladder_2 = _2275;
        }
        _2341 = frontier_phi_34_33_ladder_2;
        _2343 = frontier_phi_34_33_ladder_1;
        _2345 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2341 = _2275;
        _2343 = _2276;
        _2345 = _2277;
    }
    uvec4 _2350 = floatBitsToUint(cbInstanceData._m0[_278 + 5u]);
    uint _2352 = _2350.x * 14u;
    uint _2353 = _2352 + 13u;
    float _2360 = _1051 + (-1.0);
    float _2365 = (cbLight._m0[_2353].x * _2360) + 1.0;
    float _2366 = (cbLight._m0[_2353].y * _2360) + 1.0;
    float _2367 = (cbLight._m0[_2353].z * _2360) + 1.0;
    float _2368 = (cbLight._m0[_2353].w * _2360) + 1.0;
    uint _2369 = _2352 + 5u;
    float _2375 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
    uint _2379 = _2352 + 4u;
    float _2388 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
    uint _2392 = _2352 | 1u;
    float _2403 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_885, _886, _887));
    float _2406 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_885, _886, _887));
    float _4642 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _4653 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2411 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * 0.3183098733425140380859375;
    float _2413 = (isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * 0.3183098733425140380859375;
    float _2420 = ((cbLight._m0[_2369].x * _2375) * _2413) + (((cbLight._m0[_2379].x * _2341) * _2388) * _2411);
    float _2421 = ((_2375 * cbLight._m0[_2369].y) * _2413) + (((cbLight._m0[_2379].y * _2343) * _2388) * _2411);
    float _2422 = ((_2375 * cbLight._m0[_2369].z) * _2413) + (((cbLight._m0[_2379].z * _2345) * _2388) * _2411);
    uvec4 _2426 = floatBitsToUint(cbLight._m0[_2352 + 12u]);
    bool _2428 = _2426.x == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2428)
    {
        _2530 = _2420;
        _2532 = _2421;
        _2534 = _2422;
    }
    else
    {
        uint _2538 = _2352 + 6u;
        float _2554 = (dot(vec3(cbLight._m0[_2352 + 2u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4664 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2557 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2530 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2420;
        _2532 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2421;
        _2534 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2422;
    }
    bool _2537 = _2426.y == 0u;
    float _2592;
    float _2594;
    float _2596;
    if (_2537)
    {
        _2592 = _2530;
        _2594 = _2532;
        _2596 = _2534;
    }
    else
    {
        uint _2765 = _2352 + 7u;
        float _2781 = (dot(vec3(cbLight._m0[_2352 + 3u].xyz), vec3(_885, _886, _887)) * 0.5) + 0.5;
        float _2782 = _2781 * _2781;
        float _4680 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2783 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2784 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2592 = (((cbLight._m0[_2765].x * 0.3183098733425140380859375) * _2783) * _2784) + _2530;
        _2594 = (((cbLight._m0[_2765].y * 0.3183098733425140380859375) * _2783) * _2784) + _2532;
        _2596 = (((cbLight._m0[_2765].z * 0.3183098733425140380859375) * _2783) * _2784) + _2534;
    }
    uint _2599 = _2352 + 8u;
    float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _888) * 0.949999988079071044921875);
    float _2613 = _2612 * _2612;
    float _2614 = cbLight._m0[_2352].x + _965;
    float _2615 = cbLight._m0[_2352].y + _966;
    float _2616 = cbLight._m0[_2352].z + _967;
    float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
    float _2621 = _2620 * _2614;
    float _2622 = _2620 * _2615;
    float _2623 = _2620 * _2616;
    float _2624 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2352].xyz));
    float _4696 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
    float _4707 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _2628 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
    float _2629 = dot(vec3(_885, _886, _887), vec3(_2621, _2622, _2623));
    float _4718 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0));
    float _2633 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2621, _2622, _2623));
    float _4729 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2637 = _2613 * _2613;
    float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
    float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0)))) * 5.0);
    float _2650 = 0.959999978542327880859375 - _1032;
    float _2652 = 0.959999978542327880859375 - _1033;
    float _2653 = 0.959999978542327880859375 - _1034;
    float _2660 = 1.0 - _2613;
    float _2671 = (0.5 / (((_2628 * ((_2627 * _2660) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2660) + _2613) * _2627))) * _2627;
    float _4740 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
    uint _2687 = _2352 + 9u;
    float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _888) * 0.949999988079071044921875);
    float _2699 = _2698 * _2698;
    float _2700 = cbLight._m0[_2392].x + _965;
    float _2701 = cbLight._m0[_2392].y + _966;
    float _2702 = cbLight._m0[_2392].z + _967;
    float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
    float _2707 = _2706 * _2700;
    float _2708 = _2706 * _2701;
    float _2709 = _2706 * _2702;
    float _2710 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2392].xyz));
    float _4751 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2714 = dot(vec3(_885, _886, _887), vec3(_2707, _2708, _2709));
    float _4762 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2707, _2708, _2709));
    float _4773 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2699 * _2699;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2740 = 1.0 - _2699;
    float _2750 = (0.5 / (((_2628 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2740) + _2699) * _2713))) * _2713;
    float _4784 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2752 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    float _2762 = (((((_2733 * _2650) + _1035) * cbLight._m0[_2687].x) * _2752) * _2375) + ((((cbLight._m0[_2599].x * _2341) * ((_2649 * _2650) + _1035)) * _2673) * _2388);
    float _2763 = (((((_2733 * _2652) + _1037) * cbLight._m0[_2687].y) * _2752) * _2375) + ((((cbLight._m0[_2599].y * _2343) * ((_2649 * _2652) + _1037)) * _2673) * _2388);
    float _2764 = (((((_2733 * _2653) + _1038) * cbLight._m0[_2687].z) * _2752) * _2375) + ((((cbLight._m0[_2599].z * _2345) * ((_2649 * _2653) + _1038)) * _2673) * _2388);
    float _2820;
    float _2822;
    float _2824;
    if (_2428)
    {
        _2820 = _2762;
        _2822 = _2763;
        _2824 = _2764;
    }
    else
    {
        uint _2826 = _2352 + 2u;
        uint _2830 = _2352 + 10u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _888) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _965;
        float _2847 = cbLight._m0[_2826].y + _966;
        float _2848 = cbLight._m0[_2826].z + _967;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2826].xyz));
        float _4795 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2860 = dot(vec3(_885, _886, _887), vec3(_2853, _2854, _2855));
        float _4806 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4817 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
        float _2886 = 1.0 - _2845;
        float _2896 = (0.5 / (((_2628 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2886) + _2845) * _2859))) * _2859;
        float _4828 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2820 = (((((_2879 * _2650) + _1035) * cbLight._m0[_2830].x) * _2898) * _2899) + _2762;
        _2822 = (((((_2879 * _2652) + _1037) * cbLight._m0[_2830].y) * _2898) * _2899) + _2763;
        _2824 = (((((_2879 * _2653) + _1038) * cbLight._m0[_2830].z) * _2898) * _2899) + _2764;
    }
    float _2930;
    float _2932;
    float _2934;
    if (_2537)
    {
        _2930 = _2820;
        _2932 = _2822;
        _2934 = _2824;
    }
    else
    {
        uint _2941 = _2352 + 3u;
        uint _2945 = _2352 + 11u;
        float _2959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2941].w)) * _888) * 0.949999988079071044921875);
        float _2960 = _2959 * _2959;
        float _2961 = cbLight._m0[_2941].x + _965;
        float _2962 = cbLight._m0[_2941].y + _966;
        float _2963 = cbLight._m0[_2941].z + _967;
        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
        float _2968 = _2967 * _2961;
        float _2969 = _2967 * _2962;
        float _2970 = _2967 * _2963;
        float _2971 = dot(vec3(_885, _886, _887), vec3(cbLight._m0[_2941].xyz));
        float _4844 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2974 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
        float _2975 = dot(vec3(_885, _886, _887), vec3(_2968, _2969, _2970));
        float _4855 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
        float _2979 = dot(vec3(cbLight._m0[_2941].xyz), vec3(_2968, _2969, _2970));
        float _4866 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2983 = _2960 * _2960;
        float _2987 = ((_2978 * _2978) * (_2983 + (-1.0))) + 1.0;
        float _2994 = exp2(log2(1.0 - (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) * 5.0);
        float _3001 = 1.0 - _2960;
        float _3011 = (0.5 / (((_2628 * ((_2974 * _3001) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _3001) + _2960) * _2974))) * _2974;
        float _4877 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3013 = (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0))) * (_2983 / ((_2987 * _2987) * 3.141590118408203125));
        float _3014 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2930 = (((((_2994 * _2650) + _1035) * cbLight._m0[_2945].x) * _3013) * _3014) + _2820;
        _2932 = (((((_2994 * _2652) + _1037) * cbLight._m0[_2945].y) * _3013) * _3014) + _2822;
        _2934 = (((((_2994 * _2653) + _1038) * cbLight._m0[_2945].z) * _3013) * _3014) + _2824;
    }
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_2350.y == 0u)
    {
        uvec4 _3035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3036 = _3035.x;
        uint _3047 = uint((float(_3035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _974) / _3036))) + floor(float(uint(cbSceneParam._m0[85u].x * _973) / _3036)));
        float _3057 = (log2(_2128 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3058 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        uint _3061 = uint(isnan(14.0) ? _3058 : (isnan(_3058) ? 14.0 : min(_3058, 14.0)));
        uvec4 _3066 = texelFetch(g_lightClusterGridBuffer, int(((_3061 << 2u) + (_3047 << 6u)) >> 2u));
        uint _3067 = _3066.x;
        uint _3068 = _3035.z;
        float _3147;
        float _3149;
        float _3151;
        float _3153;
        float _3155;
        float _3157;
        if (((((1u << ((_3068 >> 4u) & 15u)) + 4294967295u) & _3067) == 0u) || ((_3068 & 240u) == 0u))
        {
            _3147 = 0.0;
            _3149 = 0.0;
            _3151 = 0.0;
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
        }
        else
        {
            float _3148;
            float _3150;
            float _3152;
            float _3154;
            float _3156;
            float _3158;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            uint _3298 = 0u;
            uint _3307;
            bool _3308;
            for (;;)
            {
                _3307 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                _3308 = _3307 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3308)
                {
                    frontier_phi_66_pred = _3297;
                    frontier_phi_66_pred_1 = _3296;
                    frontier_phi_66_pred_2 = _3295;
                    frontier_phi_66_pred_3 = _3294;
                    frontier_phi_66_pred_4 = _3293;
                    frontier_phi_66_pred_5 = _3292;
                }
                else
                {
                    float _3416;
                    float _3417;
                    float _3418;
                    float _3419;
                    float _3420;
                    float _3421;
                    uint _3422;
                    _3416 = _3292;
                    _3417 = _3293;
                    _3418 = _3294;
                    _3419 = _3295;
                    _3420 = _3296;
                    _3421 = _3297;
                    _3422 = _3307;
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    for (;;)
                    {
                        uint _3426 = uint(findLSB(_3422)) + (_3298 << 5u);
                        uint _3423 = (_3422 + 4294967295u) & _3422;
                        uint _3428 = _3426 * 48u;
                        vec4 _3442 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3428)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3428 + 3u)).x));
                        uint _3448 = (_3426 * 48u) + 4u;
                        vec4 _3461 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3448)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3448 + 3u)).x));
                        uint _3467 = (_3426 * 48u) + 8u;
                        vec3 _3478 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x));
                        float _3482 = _3442.x - _2126;
                        float _3483 = _3442.y - _2127;
                        float _3484 = _3442.z - _2128;
                        float _3485 = dot(vec3(_3482, _3483, _3484), vec3(_3482, _3483, _3484));
                        float _3488 = inversesqrt(_3485);
                        float _3489 = _3488 * _3482;
                        float _3490 = _3488 * _3483;
                        float _3491 = _3488 * _3484;
                        float _3492 = dot(vec3(_992, _995, _998), vec3(_3489, _3490, _3491));
                        float _3497 = 1.0 - (_3485 * _3442.w);
                        float _4903 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3498 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3499 = sqrt(_3485) * _3461.w;
                        float _3502 = 1.39999997615814208984375 / (_3499 + 1.39999997615814208984375);
                        float _3503 = _3502 * _3502;
                        float _3506 = ((1.0 - _3503) * _3492) + _3503;
                        float _3509 = _3499 * _3499;
                        float _3513 = ((isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))) * _3498) / ((_3509 * 0.699999988079071044921875) + 1.0);
                        float _3517 = (-0.0) - _2126;
                        float _3518 = (-0.0) - _2127;
                        float _3519 = (-0.0) - _2128;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3524 = _3523 * _3517;
                        float _3525 = _3523 * _3518;
                        float _3526 = _3523 * _3519;
                        float _3533 = exp2(log2(1.0 / ((_3509 * 3.5) + 5.0)) * 0.25);
                        float _3534 = 1.0 - _1067;
                        float _3541 = sqrt(1.0 - ((1.0 - (_3534 * _3534)) * (1.0 - (_3533 * _3533))));
                        float _3542 = _3541 * _3541;
                        float _3543 = _3542 * _3542;
                        float _3544 = _3524 + _3489;
                        float _3545 = _3525 + _3490;
                        float _3546 = _3526 + _3491;
                        float _3550 = inversesqrt(dot(vec3(_3544, _3545, _3546), vec3(_3544, _3545, _3546)));
                        float _3554 = dot(vec3(_992, _995, _998), vec3(_3524, _3525, _3526));
                        float _4919 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3557 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                        float _3558 = dot(vec3(_992, _995, _998), vec3(_3550 * _3544, _3550 * _3545, _3550 * _3546));
                        float _4930 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3561 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                        float _3565 = ((_3561 * _3561) * (_3543 + (-1.0))) + 1.0;
                        float _3566 = _3502 * _3542;
                        float _3567 = _3566 * _3566;
                        float _3570 = ((1.0 - _3567) * _3492) + _3567;
                        float _4941 = isnan(0.0) ? _3570 : (isnan(_3570) ? 0.0 : max(_3570, 0.0));
                        float _3571 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                        float _3572 = 1.0 - _3542;
                        float _3582 = (0.5 / (((_3571 * ((_3557 * _3572) + _3542)) + 9.9999999392252902907785028219223e-09) + (((_3571 * _3572) + _3542) * _3557))) * _3571;
                        float _4952 = isnan(0.0) ? _3582 : (isnan(_3582) ? 0.0 : max(_3582, 0.0));
                        float _3593 = (((_3543 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3565 * _3565) * ((_3509 * 2.1991131305694580078125) + 3.141590118408203125))) * _3498;
                        _3351 = (_3513 * _3461.x) + _3419;
                        _3352 = (_3513 * _3461.y) + _3420;
                        _3353 = (_3513 * _3461.z) + _3421;
                        _3348 = (_3593 * _3478.x) + _3416;
                        _3349 = (_3593 * _3478.y) + _3417;
                        _3350 = (_3593 * _3478.z) + _3418;
                        if (_3423 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3416 = _3348;
                            _3417 = _3349;
                            _3418 = _3350;
                            _3419 = _3351;
                            _3420 = _3352;
                            _3421 = _3353;
                            _3422 = _3423;
                        }
                    }
                    frontier_phi_66_pred = _3353;
                    frontier_phi_66_pred_1 = _3352;
                    frontier_phi_66_pred_2 = _3351;
                    frontier_phi_66_pred_3 = _3350;
                    frontier_phi_66_pred_4 = _3349;
                    frontier_phi_66_pred_5 = _3348;
                }
                _3158 = frontier_phi_66_pred;
                _3156 = frontier_phi_66_pred_1;
                _3154 = frontier_phi_66_pred_2;
                _3152 = frontier_phi_66_pred_3;
                _3150 = frontier_phi_66_pred_4;
                _3148 = frontier_phi_66_pred_5;
                uint _3299 = _3298 + 1u;
                if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3292 = _3148;
                    _3293 = _3150;
                    _3294 = _3152;
                    _3295 = _3154;
                    _3296 = _3156;
                    _3297 = _3158;
                    _3298 = _3299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3147 = _3148;
            _3149 = _3150;
            _3151 = _3152;
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
        }
        uvec4 _3161 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3162 = _3161.z;
        uint _3164 = (_3162 >> 8u) & 15u;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        if (((4294967295u << _3164) & _3067) == 0u)
        {
            _3260 = _3147;
            _3262 = _3149;
            _3264 = _3151;
            _3266 = _3153;
            _3268 = _3155;
            _3270 = _3157;
        }
        else
        {
            float _3285 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
            float _3286 = _3285 * _2126;
            float _3287 = _3285 * _2127;
            float _3288 = _3285 * _2128;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3164 < ((_3162 >> 12u) & 15u))
            {
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3399 = _3147;
                float _3400 = _3149;
                float _3401 = _3151;
                float _3402 = _3153;
                float _3403 = _3155;
                float _3404 = _3157;
                uint _3405 = _3164;
                uint _3414;
                bool _3415;
                for (;;)
                {
                    _3414 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3405 << 2u)) >> 2u)).x;
                    _3415 = _3414 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3415)
                    {
                        frontier_phi_72_pred = _3404;
                        frontier_phi_72_pred_1 = _3403;
                        frontier_phi_72_pred_2 = _3402;
                        frontier_phi_72_pred_3 = _3401;
                        frontier_phi_72_pred_4 = _3400;
                        frontier_phi_72_pred_5 = _3399;
                    }
                    else
                    {
                        float _3598;
                        float _3599;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3891;
                        float _3892;
                        float _3893;
                        float _3894;
                        float _3895;
                        float _3896;
                        float _3611 = _3399;
                        float _3612 = _3400;
                        float _3613 = _3401;
                        float _3614 = _3402;
                        float _3615 = _3403;
                        float _3616 = _3404;
                        uint _3617 = _3414;
                        uint _3618;
                        vec4 _3643;
                        float _3644;
                        vec4 _3659;
                        vec3 _3671;
                        vec4 _3686;
                        vec4 _3701;
                        float _3747;
                        bool _3748;
                        for (;;)
                        {
                            uint _3628 = ((_3405 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3617));
                            _3618 = (_3617 + 4294967295u) & _3617;
                            uint _3630 = _3628 * 40u;
                            _3643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 3u)).x));
                            _3644 = _3643.w;
                            uint _3646 = (_3628 * 40u) + 4u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3628 * 40u) + 8u;
                            _3671 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x));
                            uint _3673 = (_3628 * 40u) + 16u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3628 * 40u) + 20u;
                            _3701 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 3u)).x));
                            uint _3703 = (_3628 * 40u) + 24u;
                            vec4 _3716 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3703)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3703 + 3u)).x));
                            uint _3722 = (_3628 * 40u) + 28u;
                            vec4 _3735 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3722)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3722 + 3u)).x));
                            _3747 = fma(_2128, _3735.z, fma(_2127, _3735.y, _3735.x * _2126)) + _3735.w;
                            _3748 = !((fma(_2128, _3716.z, fma(_2127, _3716.y, _3716.x * _2126)) + _3716.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3748)
                            {
                                float _3775 = _3643.x - _2126;
                                float _3776 = _3643.y - _2127;
                                float _3777 = _3643.z - _2128;
                                float _3778 = dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777));
                                float _3781 = inversesqrt(_3778);
                                float _3782 = _3781 * _3775;
                                float _3783 = _3781 * _3776;
                                float _3784 = _3781 * _3777;
                                float _3788 = 1.0 - (_3778 / (_3644 * _3644));
                                float _4963 = isnan(0.0) ? _3788 : (isnan(_3788) ? 0.0 : max(_3788, 0.0));
                                float _3789 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3793 = sqrt(_3778) * _3659.w;
                                float _3795 = 1.39999997615814208984375 / (_3793 + 1.39999997615814208984375);
                                float _3796 = _3795 * _3795;
                                float _3799 = ((1.0 - _3796) * dot(vec3(_3782, _3783, _3784), vec3(_992, _995, _998))) + _3796;
                                float _3802 = _3793 * _3793;
                                float _3806 = (fma(_2128, _3686.z, fma(_2127, _3686.y, _3686.x * _2126)) + _3686.w) / _3747;
                                float _3807 = (fma(_2128, _3701.z, fma(_2127, _3701.y, _3701.x * _2126)) + _3701.w) / _3747;
                                float _3811 = 1.0 - dot(vec2(_3806, _3807), vec2(_3806, _3807));
                                float _4979 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3812 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
                                float _3813 = _3812 * (((isnan(0.0) ? _3799 : (isnan(_3799) ? 0.0 : max(_3799, 0.0))) * _3789) / ((_3802 * 0.699999988079071044921875) + 1.0));
                                float _3825 = exp2(log2(1.0 / ((_3802 * 3.5) + 5.0)) * 0.25);
                                float _3826 = 1.0 - _1067;
                                float _3833 = sqrt(1.0 - ((1.0 - (_3826 * _3826)) * (1.0 - (_3825 * _3825))));
                                float _3834 = _3833 * _3833;
                                float _3835 = _3834 * _3834;
                                float _3836 = _3782 - _3286;
                                float _3837 = _3783 - _3287;
                                float _3838 = _3784 - _3288;
                                float _3842 = inversesqrt(dot(vec3(_3836, _3837, _3838), vec3(_3836, _3837, _3838)));
                                float _3846 = dot(vec3(_992, _995, _998), vec3((-0.0) - _3286, (-0.0) - _3287, (-0.0) - _3288));
                                float _4990 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0));
                                float _3850 = dot(vec3(_992, _995, _998), vec3(_3842 * _3836, _3842 * _3837, _3842 * _3838));
                                float _5001 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3853 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
                                float _3857 = ((_3853 * _3853) * (_3835 + (-1.0))) + 1.0;
                                float _3858 = _3795 * _3834;
                                float _3859 = _3858 * _3858;
                                float _3865 = ((1.0 - _3859) * dot(vec3(_992, _995, _998), vec3(_3782, _3783, _3784))) + _3859;
                                float _5012 = isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0));
                                float _3866 = isnan(1.0) ? _5012 : (isnan(_5012) ? 1.0 : min(_5012, 1.0));
                                float _3867 = 1.0 - _3834;
                                float _3877 = (0.5 / (((_3866 * ((_3849 * _3867) + _3834)) + 9.9999999392252902907785028219223e-09) + (((_3866 * _3867) + _3834) * _3849))) * _3866;
                                float _5023 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3887 = (_3812 * _3789) * (((_3835 * 3.1415927410125732421875) * (isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0)))) / ((_3857 * _3857) * ((_3802 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3813 * _3659.y;
                                frontier_phi_78_pred_1 = _3813 * _3659.x;
                                frontier_phi_78_pred_2 = _3887 * _3671.z;
                                frontier_phi_78_pred_3 = _3887 * _3671.y;
                                frontier_phi_78_pred_4 = _3887 * _3671.x;
                                frontier_phi_78_pred_5 = _3813 * _3659.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3895 = frontier_phi_78_pred;
                            _3894 = frontier_phi_78_pred_1;
                            _3893 = frontier_phi_78_pred_2;
                            _3892 = frontier_phi_78_pred_3;
                            _3891 = frontier_phi_78_pred_4;
                            _3896 = frontier_phi_78_pred_5;
                            _3601 = _3894 + _3614;
                            _3602 = _3895 + _3615;
                            _3603 = _3896 + _3616;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3600 = _3893 + _3613;
                            if (_3618 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3600;
                                _3614 = _3601;
                                _3615 = _3602;
                                _3616 = _3603;
                                _3617 = _3618;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3603;
                        frontier_phi_72_pred_1 = _3602;
                        frontier_phi_72_pred_2 = _3601;
                        frontier_phi_72_pred_3 = _3600;
                        frontier_phi_72_pred_4 = _3599;
                        frontier_phi_72_pred_5 = _3598;
                    }
                    _3271 = frontier_phi_72_pred;
                    _3269 = frontier_phi_72_pred_1;
                    _3267 = frontier_phi_72_pred_2;
                    _3265 = frontier_phi_72_pred_3;
                    _3263 = frontier_phi_72_pred_4;
                    _3261 = frontier_phi_72_pred_5;
                    uint _3406 = _3405 + 1u;
                    if (_3406 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3399 = _3261;
                        _3400 = _3263;
                        _3401 = _3265;
                        _3402 = _3267;
                        _3403 = _3269;
                        _3404 = _3271;
                        _3405 = _3406;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3271;
                frontier_phi_60_61_ladder_1 = _3269;
                frontier_phi_60_61_ladder_2 = _3265;
                frontier_phi_60_61_ladder_3 = _3263;
                frontier_phi_60_61_ladder_4 = _3261;
                frontier_phi_60_61_ladder_5 = _3267;
            }
            else
            {
                frontier_phi_60_61_ladder = _3157;
                frontier_phi_60_61_ladder_1 = _3155;
                frontier_phi_60_61_ladder_2 = _3151;
                frontier_phi_60_61_ladder_3 = _3149;
                frontier_phi_60_61_ladder_4 = _3147;
                frontier_phi_60_61_ladder_5 = _3153;
            }
            _3260 = frontier_phi_60_61_ladder_4;
            _3262 = frontier_phi_60_61_ladder_3;
            _3264 = frontier_phi_60_61_ladder_2;
            _3266 = frontier_phi_60_61_ladder_5;
            _3268 = frontier_phi_60_61_ladder_1;
            _3270 = frontier_phi_60_61_ladder;
        }
        float _3275 = isnan(1.0) ? _1051 : (isnan(_1051) ? 1.0 : min(_1051, 1.0));
        _3080 = (_3275 * _3266) + _2592;
        _3082 = (_3275 * _3268) + _2594;
        _3084 = (_3275 * _3270) + _2596;
        _3086 = ((_3260 * _1035) * _3275) + _2930;
        _3088 = ((_3262 * _1037) * _3275) + _2932;
        _3090 = ((_3264 * _1038) * _3275) + _2934;
    }
    else
    {
        _3080 = _2592;
        _3082 = _2594;
        _3084 = _2596;
        _3086 = _2930;
        _3088 = _2932;
        _3090 = _2934;
    }
    float _5039 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _5050 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
    float _5061 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    uint _3110 = _278 + 6u;
    float _3118 = _973 / cbSceneParam._m0[86u].x;
    float _3119 = _974 / cbSceneParam._m0[86u].y;
    vec4 _3133 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, (log2((isnan(cbSceneParam._m0[77u].w) ? _907 : (isnan(_907) ? cbSceneParam._m0[77u].w : min(_907, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3135 = _3133.x;
    float _3136 = _3133.y;
    float _3137 = _3133.z;
    float _3138 = _3133.w;
    float _3210;
    float _3212;
    float _3214;
    float _3216;
    if (_907 > cbSceneParam._m0[78u].w)
    {
        float _3172 = isnan(_907) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _907 : min(cbSceneParam._m0[80u].w, _907));
        float _3173 = _3172 / _907;
        float _3184 = _3173 * _958;
        float _3185 = _959 * _3173;
        float _3186 = (-0.0) - _3185;
        float _3188 = _3173 * _960;
        float _3190 = (cbSceneParam._m0[77u].w * _3186) / _3172;
        float _3191 = _3190 + cbSceneParam._m0[79u].w;
        float _3192 = cbSceneParam._m0[79u].w - _3185;
        float _3198 = sqrt(((_3184 * _3184) + (_3185 * _3185)) + (_3188 * _3188));
        float _3201 = (1.0 - (cbSceneParam._m0[77u].w / _3172)) * _3198;
        float _3206 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3208 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3361;
        if (abs((_3186 - _3190) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3361 = ((((_3191 > 0.0) ? exp2(_3206 * _3191) : (2.0 - exp2(_3208 * _3191))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3201;
        }
        else
        {
            float _3321 = 1.0 / cbSceneParam._m0[80u].x;
            float _3322 = isnan(_3192) ? _3191 : (isnan(_3191) ? _3192 : max(_3191, _3192));
            float _3323 = isnan(_3192) ? _3191 : (isnan(_3191) ? _3192 : min(_3191, _3192));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            float _3333 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : min(_3323, 0.0));
            _3361 = ((abs(_3198 / _3186) * cbSceneParam._m0[80u].y) * ((((_3332 - _3333) * 2.0) - ((exp2(_3206 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0)))) - exp2(_3206 * (isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))))) * _3321)) - ((exp2(_3208 * _3332) - exp2(_3208 * _3333)) * _3321))) + (_3201 * cbSceneParam._m0[80u].z);
        }
        vec4 _3363 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3118, _3119, 1.0), 0.0);
        float _3372 = exp2((_3361 * (-1.44269502162933349609375)) * (1.0 - _3363.w));
        float _3373 = log2(_3372);
        float _3389 = log2(_3138);
        _3210 = (exp2(_3389 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].x)) * _3363.x) / cbSceneParam._m0[78u].x)) + _3135;
        _3212 = (exp2(_3389 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].y)) * _3363.y) / cbSceneParam._m0[78u].y)) + _3136;
        _3214 = (exp2(_3389 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3373 * cbSceneParam._m0[78u].z)) * _3363.z) / cbSceneParam._m0[78u].z)) + _3137;
        _3216 = _3372 * _3138;
    }
    else
    {
        _3210 = _3135;
        _3212 = _3136;
        _3214 = _3137;
        _3216 = _3138;
    }
    float _3228 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3229 = _3228 == 3.0;
    float _3230 = log2(_3216);
    float _3237 = exp2(_3230 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0))) * (_3080 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1051))) + ((_3086 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _3238 = exp2(_3230 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3082 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1051))) + ((_3088 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _3239 = exp2(_3230 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5061 : (isnan(_5061) ? 1.0 : min(_5061, 1.0))) * (_3084 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1051))) + ((_3090 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1858)) * cbPerFrame._m0[3u].x));
    float _3248 = (_3228 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3248 * (_3229 ? _3237 : (_3237 + (cbSceneParam._m0[72u].w * _3210)));
    SV_Target.y = _3248 * (_3229 ? _3238 : (_3238 + (cbSceneParam._m0[72u].w * _3212)));
    SV_Target.z = _3248 * (_3229 ? _3239 : (_3239 + (cbSceneParam._m0[72u].w * _3214)));
    SV_Target.w = cbInstanceData._m0[_3110].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3110].w;
}


