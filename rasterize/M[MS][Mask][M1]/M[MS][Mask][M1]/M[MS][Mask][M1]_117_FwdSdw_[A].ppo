#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1637;
float _4298;
float _4299;
float _4300;
float _4301;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _249 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _250 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _251 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _257 = inversesqrt(dot(vec3(_249, _250, _251), vec3(_249, _250, _251)));
    float _264 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _271 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _277 = uint(roundEven(NORMAL.w)) * 13u;
    uint _282 = _277 + 1u;
    uint _286 = _277 + 2u;
    float _295 = sqrt(((cbInstanceData._m0[_282].x * cbInstanceData._m0[_282].x) + (cbInstanceData._m0[_277].x * cbInstanceData._m0[_277].x)) + (cbInstanceData._m0[_286].x * cbInstanceData._m0[_286].x));
    float _296 = _295 * TEXCOORD.z;
    float _297 = _295 * TEXCOORD.w;
    vec4 _316 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _340 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _345 = _340.x * cbMtdParam._m0[11u].x;
    float _346 = _340.y * cbMtdParam._m0[11u].y;
    float _347 = _340.z * cbMtdParam._m0[11u].z;
    vec4 _366 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    vec4 _385 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _424 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _426 = _424.x;
    float _438 = dot(vec4(_426, _424.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _455 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _385.x) * 2.0) - ((((_426 - _438) * cbMtdParam._m0[23u].w) + _438) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4310 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _456 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _463 = (_456 * ((_366.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _464 = (_456 * ((_366.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _465 = (_456 * ((_366.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _482 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _296) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _297) + cbTextureTilingScale._m0[3u].w));
    vec4 _502 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _504 = _502.x;
    float _514 = dot(vec4(_504, _502.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _528 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _385.y) * 2.0) - ((((_504 - _514) * cbMtdParam._m0[23u].w) + _514) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4321 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _529 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _536 = (_529 * ((_482.x * cbMtdParam._m0[13u].x) - _463)) + _463;
    float _537 = (_529 * ((_482.y * cbMtdParam._m0[13u].y) - _464)) + _464;
    float _538 = (_529 * ((_482.z * cbMtdParam._m0[13u].z) - _465)) + _465;
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _296) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _297) + cbTextureTilingScale._m0[24u].w));
    vec4 _574 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _576 = _574.x;
    float _586 = dot(vec4(_576, _574.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _598 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _385.z) * 2.0) - ((((_576 - _586) * cbMtdParam._m0[23u].w) + _586) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4332 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _599 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _612 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _316.x) * ((_599 * ((_557.x * cbMtdParam._m0[14u].x) - _536)) + _536);
    float _615 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _316.y) * ((_599 * ((_557.y * cbMtdParam._m0[14u].y) - _537)) + _537);
    float _618 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _316.z) * ((_599 * ((_557.z * cbMtdParam._m0[14u].z) - _538)) + _538);
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _296) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _297) + cbTextureTilingScale._m0[4u].w));
    vec4 _653 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _655 = _653.x;
    float _656 = _653.y;
    float _657 = _653.z;
    float _664 = ((_636.x - _655) * _456) + _655;
    float _665 = ((_636.y - _656) * _456) + _656;
    float _666 = ((_636.z - _657) * _456) + _657;
    vec4 _678 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _296) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _297) + cbTextureTilingScale._m0[2u].w));
    float _689 = ((_678.x - _664) * _529) + _664;
    float _690 = ((_678.y - _665) * _529) + _665;
    float _691 = ((_678.z - _666) * _529) + _666;
    vec4 _703 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _296) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _297) + cbTextureTilingScale._m0[23u].w));
    float _716 = ((_703.z - _691) * _599) + _691;
    float _719 = ((((_703.x - _689) * _599) + _689) * 2.0) + (-1.0);
    float _721 = ((((_703.y - _690) * _599) + _690) * 2.0) + (-1.0);
    float _722 = dot(vec2(_719, _721), vec2(_719, _721));
    float _4343 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _727 = sqrt(1.0 - (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))));
    vec4 _741 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _766 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _296) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _297) + cbTextureTilingScale._m0[11u].w));
    float _768 = _766.x;
    float _769 = 1.0 - _768;
    float _777 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _780 = ((isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : min(_777, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _789 = (_780 - ((((((_768 - _769) * cbMtdParam._m0[24u].z) + _769) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _780))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4364 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _790 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _797 = (_790 * (cbMtdParam._m0[17u].x - _612)) + _612;
    float _798 = (_790 * (cbMtdParam._m0[17u].y - _615)) + _615;
    float _799 = (_790 * (cbMtdParam._m0[17u].z - _618)) + _618;
    vec4 _811 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _296) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _297) + cbTextureTilingScale._m0[19u].w));
    float _813 = _811.x;
    float _814 = 1.0 - _813;
    float _839 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_813 - _814) * cbMtdParam._m0[24u].w) + _814) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4375 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _840 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _848 = ((((cbMtdParam._m0[10u].x - _797) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _840) + _797;
    float _849 = ((((cbMtdParam._m0[10u].y - _798) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _840) + _798;
    float _850 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _799)) * _840) + _799;
    vec4 _876 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _878 = _876.x;
    float _895 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _296) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _297) + cbTextureTilingScale._m0[9u].w)).x - _878) * _456) + _878;
    float _912 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _296) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _297) + cbTextureTilingScale._m0[21u].w)).x - _895) * _529) + _895;
    float _929 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _296) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _297) + cbTextureTilingScale._m0[10u].w)).x - _912) * _599) + _912;
    float _933 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _929) * cbMtdParam._m0[19u].z) + _929;
    float _935 = _933 - (_933 * _790);
    float _937 = _935 - (_935 * _840);
    float _941 = (cbMtdParam._m0[19u].w * (_741.z - _716)) + _716;
    vec4 _955 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _296) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _297) + cbTextureTilingScale._m0[15u].w));
    float _962 = (_955.x * 2.0) + (-1.0);
    float _963 = (_955.y * 2.0) + (-1.0);
    float _964 = dot(vec2(_962, _963), vec2(_962, _963));
    float _4386 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _972 = (_790 * (_955.z - _941)) + _941;
    float _975 = ((cbMtdParam._m0[23u].x - _972) * _840) + _972;
    vec4 _998 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _296) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _297) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _1004 = (_998.x * 2.0) + (-1.0);
    float _1005 = (_998.y * 2.0) + (-1.0);
    float _1006 = dot(vec2(_1004, _1005), vec2(_1004, _1005));
    float _4397 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1014 = (((_741.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _719;
    float _1015 = (((_741.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _721;
    float _1027 = (((_962 - _1014) + (cbMtdParam._m0[21u].x * _1014)) * _790) + _1014;
    float _1028 = (((_963 - _1015) + (cbMtdParam._m0[21u].x * _1015)) * _790) + _1015;
    float _1029 = (_790 * (sqrt(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) - _727)) + _727;
    float _1040 = (((_1004 - _1027) + (_1027 * cbMtdParam._m0[22u].z)) * _840) + _1027;
    float _1041 = (((_1005 - _1028) + (_1028 * cbMtdParam._m0[22u].z)) * _840) + _1028;
    float _1042 = ((sqrt(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) - _1029) * _840) + _1029;
    float _1044 = cbMtdParam._m0[22u].x + _741.w;
    float _1047 = fma(_1042, _264 * NORMAL.x, fma(_1041, _271 * TANGENT.x, (_257 * _249) * _1040));
    float _1050 = fma(_1042, _264 * NORMAL.y, fma(_1041, _271 * TANGENT.y, (_257 * _250) * _1040));
    float _1053 = fma(_1042, _264 * NORMAL.z, fma(_1041, _271 * TANGENT.z, (_257 * _251) * _1040));
    float _1057 = inversesqrt(dot(vec3(_1047, _1050, _1053), vec3(_1047, _1050, _1053)));
    float _1058 = _1057 * _1047;
    float _1059 = _1057 * _1050;
    float _1060 = _1057 * _1053;
    float _4408 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _1061 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
    float _4419 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
    float _4430 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4441 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4452 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4463 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _1066 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _1080 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1130 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1120);
    float _1131 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1120);
    float _1132 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1120);
    float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
    float _1137 = _1130 * _1136;
    float _1138 = _1131 * _1136;
    float _1139 = _1132 * _1136;
    vec4 _1144 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1146 = _1144.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1318 = sqrt(((_1130 * _1130) + (_1131 * _1131)) + (_1132 * _1132));
        float _1324 = (cbMatDynParam._m0[5u].x * _1318) + cbMatDynParam._m0[5u].y;
        float _4474 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1325 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1329 = (cbMatDynParam._m0[5u].z * _1318) + cbMatDynParam._m0[5u].w;
        float _4485 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) - _1325)) + _1325) < ((_1146 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1157 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1158 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1176 = fma(_1060, cbSceneParam._m0[5u].z, fma(_1059, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1058));
    float _1179 = fma(_1060, cbSceneParam._m0[6u].z, fma(_1059, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1058));
    float _1182 = fma(_1060, cbSceneParam._m0[7u].z, fma(_1059, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1058));
    uint _1195 = _277 + 9u;
    uint _1196 = _1195 + uint(cbMatDynParam._m0[0u].w);
    float _1202 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0)))) * cbInstanceData._m0[_1196].x;
    float _1203 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * cbInstanceData._m0[_1196].y;
    float _1204 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0)))) * cbInstanceData._m0[_1196].z;
    float _4496 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _4507 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1206 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _4518 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
    float _1207 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _1208 = 1.0 - _1066;
    float _1209 = _1205 * _1208;
    float _1210 = _1206 * _1208;
    float _1211 = _1207 * _1208;
    float _1216 = (_1205 + (-0.039999999105930328369140625)) * _1066;
    float _1217 = (_1206 + (-0.039999999105930328369140625)) * _1066;
    float _1218 = (_1207 + (-0.039999999105930328369140625)) * _1066;
    float _1219 = _1216 + 0.039999999105930328369140625;
    float _1221 = _1217 + 0.039999999105930328369140625;
    float _1222 = _1218 + 0.039999999105930328369140625;
    vec4 _1231 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1157, cbSceneParam._m0[86u].y * _1158));
    float _1235 = ((isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * TEXCOORD_5.w) * _1231.x;
    float _1236 = dot(vec3(_1058, _1059, _1060), vec3(_1137, _1138, _1139));
    float _1239 = _1236 * 2.0;
    float _1243 = (_1239 * _1058) - _1137;
    float _1244 = (_1239 * _1059) - _1138;
    float _1245 = (_1239 * _1060) - _1139;
    float _1249 = abs(dot(vec3(_1137, _1138, _1139), vec3(_1058, _1059, _1060)));
    float _4529 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
    float _1251 = sqrt(_1061);
    float _1264 = exp2((_1251 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1251 * 3.0));
    float _1270 = (1.0 - _1264) * ((_1251 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1271 = _1264 * _1251;
    float _1299 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1303 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1636;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    float _1647;
    float _1648;
    float _1649;
    float _1650;
    float _1651;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1361 = fma(_1307, cbModelParam._m0[26u].z, fma(_1303, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1299));
        float _1365 = fma(_1307, cbModelParam._m0[27u].z, fma(_1303, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1299));
        float _1369 = fma(_1307, cbModelParam._m0[28u].z, fma(_1303, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1299));
        float _1394 = _1299 + _1058;
        float _1395 = _1303 + _1059;
        float _1396 = _1307 + _1060;
        float _1406 = fma(_1396, cbModelParam._m0[26u].z, fma(_1395, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1394)) - _1361;
        float _1407 = fma(_1396, cbModelParam._m0[27u].z, fma(_1395, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1394)) - _1365;
        float _1408 = fma(_1396, cbModelParam._m0[28u].z, fma(_1395, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1394)) - _1369;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1361 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1365 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[34u].z) + ((((((_1369 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1444 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1451 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1464 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1430.x + (-0.5));
        float _1466 = _1464 * (_1430.y + (-0.5));
        float _1467 = _1464 * (_1430.z + (-0.5));
        float _1474 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1475 = _1474 * (_1437.x + (-0.5));
        float _1476 = _1474 * (_1437.y + (-0.5));
        float _1477 = _1474 * (_1437.z + (-0.5));
        float _1484 = exp2((_1444.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1444.x + (-0.5));
        float _1486 = _1484 * (_1444.y + (-0.5));
        float _1487 = _1484 * (_1444.z + (-0.5));
        float _1494 = exp2((_1451.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1451.x + (-0.5));
        float _1496 = _1494 * (_1451.y + (-0.5));
        float _1497 = _1494 * (_1451.z + (-0.5));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1500 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1501 = _1465 * 0.5;
        float _1502 = _1475 * 0.5;
        float _1503 = _1485 * 0.5;
        float _1504 = dot(vec3(_1501, _1502, _1503), vec3(_1501, _1502, _1503));
        float _1509 = (_1504 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1504);
        float _1518 = (dot(vec3(_1058, _1059, _1060), vec3(_1509 * _1501, _1509 * _1502, _1509 * _1503)) + 1.0) * 0.5;
        float _4555 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1528 = sqrt(((_1502 * _1502) + (_1501 * _1501)) + (_1503 * _1503)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4566 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1530 = _1529 * 2.0;
        float _1534 = (1.0 - _1529) / (_1529 + 1.0);
        float _4577 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1544 = ((((1.0 - _1535) * (_1530 + 2.0)) * exp2(log2(isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_1530 + 1.0))) + _1535) * _1498;
        float _1545 = _1466 * 0.5;
        float _1546 = _1476 * 0.5;
        float _1547 = _1486 * 0.5;
        float _1548 = dot(vec3(_1545, _1546, _1547), vec3(_1545, _1546, _1547));
        float _1553 = (_1548 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1548);
        float _1561 = (dot(vec3(_1058, _1059, _1060), vec3(_1553 * _1545, _1553 * _1546, _1553 * _1547)) + 1.0) * 0.5;
        float _4588 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1570 = sqrt(((_1546 * _1546) + (_1545 * _1545)) + (_1547 * _1547)) / (_1499 + 9.9999997473787516355514526367188e-06);
        float _4599 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1572 = _1571 * 2.0;
        float _1576 = (1.0 - _1571) / (_1571 + 1.0);
        float _4610 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1586 = ((((1.0 - _1577) * (_1572 + 2.0)) * exp2(log2(isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_1572 + 1.0))) + _1577) * _1499;
        float _1587 = _1467 * 0.5;
        float _1588 = _1477 * 0.5;
        float _1589 = _1487 * 0.5;
        float _1590 = dot(vec3(_1587, _1588, _1589), vec3(_1587, _1588, _1589));
        float _1595 = (_1590 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1590);
        float _1603 = (dot(vec3(_1058, _1059, _1060), vec3(_1595 * _1587, _1595 * _1588, _1595 * _1589)) + 1.0) * 0.5;
        float _4621 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1612 = sqrt(((_1588 * _1588) + (_1587 * _1587)) + (_1589 * _1589)) / (_1500 + 9.9999997473787516355514526367188e-06);
        float _4632 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1614 = _1613 * 2.0;
        float _1618 = (1.0 - _1613) / (_1613 + 1.0);
        float _4643 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
        float _1619 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _1628 = ((((1.0 - _1619) * (_1614 + 2.0)) * exp2(log2(isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_1614 + 1.0))) + _1619) * _1500;
        _1636 = _1467;
        _1638 = _1466;
        _1639 = _1465;
        _1640 = _1477;
        _1641 = _1476;
        _1642 = _1475;
        _1643 = _1487;
        _1644 = _1486;
        _1645 = _1485;
        _1646 = _1500;
        _1647 = _1499;
        _1648 = _1498;
        _1649 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)));
        _1650 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)));
        _1651 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0)));
    }
    else
    {
        _1636 = _1637;
        _1638 = _1637;
        _1639 = _1637;
        _1640 = _1637;
        _1641 = _1637;
        _1642 = _1637;
        _1643 = _1637;
        _1644 = _1637;
        _1645 = _1637;
        _1646 = _1637;
        _1647 = _1637;
        _1648 = _1637;
        _1649 = 0.0;
        _1650 = 0.0;
        _1651 = 0.0;
    }
    float _1946;
    float _1947;
    float _1948;
    float _1949;
    float _1950;
    float _1951;
    float _1952;
    float _1953;
    float _1954;
    float _1955;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    float _1960;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1677 = fma(_1307, cbModelParam._m0[30u].z, fma(_1303, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1299));
        float _1681 = fma(_1307, cbModelParam._m0[31u].z, fma(_1303, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1299));
        float _1685 = fma(_1307, cbModelParam._m0[32u].z, fma(_1303, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1299));
        float _1708 = _1299 + _1058;
        float _1709 = _1303 + _1059;
        float _1710 = _1307 + _1060;
        float _1720 = fma(_1710, cbModelParam._m0[30u].z, fma(_1709, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1708)) - _1677;
        float _1721 = fma(_1710, cbModelParam._m0[31u].z, fma(_1709, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1708)) - _1681;
        float _1722 = fma(_1710, cbModelParam._m0[32u].z, fma(_1709, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1708)) - _1685;
        float _1726 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
        float _1739 = ((_1726 * _1720) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1677 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1740 = ((_1726 * _1721) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1681 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1741 = ((_1726 * _1722) / cbModelParam._m0[35u].z) + ((((((_1685 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1743 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1739, _1740, _1741), 0.0);
        vec4 _1750 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1739, _1740, _1741), 0.0);
        vec4 _1757 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1739, _1740, _1741), 0.0);
        vec4 _1764 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1739, _1740, _1741), 0.0);
        float _1776 = exp2((_1743.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1743.x + (-0.5));
        float _1778 = _1776 * (_1743.y + (-0.5));
        float _1779 = _1776 * (_1743.z + (-0.5));
        float _1786 = exp2((_1750.w + (-0.5)) * 20.0) * 2.0;
        float _1787 = _1786 * (_1750.x + (-0.5));
        float _1788 = _1786 * (_1750.y + (-0.5));
        float _1789 = _1786 * (_1750.z + (-0.5));
        float _1796 = exp2((_1757.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1757.x + (-0.5));
        float _1798 = _1796 * (_1757.y + (-0.5));
        float _1799 = _1796 * (_1757.z + (-0.5));
        float _1806 = exp2((_1764.w + (-0.5)) * 20.0) * 2.0;
        float _1807 = _1806 * (_1764.x + (-0.5));
        float _1808 = _1806 * (_1764.y + (-0.5));
        float _1809 = _1806 * (_1764.z + (-0.5));
        float _1810 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1811 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1812 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1813 = _1777 * 0.5;
        float _1814 = _1787 * 0.5;
        float _1815 = _1797 * 0.5;
        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
        float _1821 = (_1816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1816);
        float _1829 = (dot(vec3(_1058, _1059, _1060), vec3(_1821 * _1813, _1821 * _1814, _1821 * _1815)) + 1.0) * 0.5;
        float _4684 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1838 = sqrt(((_1814 * _1814) + (_1813 * _1813)) + (_1815 * _1815)) / (_1810 + 9.9999997473787516355514526367188e-06);
        float _4695 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1839 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _1840 = _1839 * 2.0;
        float _1844 = (1.0 - _1839) / (_1839 + 1.0);
        float _4706 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1845 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _1854 = ((((1.0 - _1845) * (_1840 + 2.0)) * exp2(log2(isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_1840 + 1.0))) + _1845) * _1810;
        float _1855 = _1778 * 0.5;
        float _1856 = _1788 * 0.5;
        float _1857 = _1798 * 0.5;
        float _1858 = dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857));
        float _1863 = (_1858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1858);
        float _1871 = (dot(vec3(_1058, _1059, _1060), vec3(_1863 * _1855, _1863 * _1856, _1863 * _1857)) + 1.0) * 0.5;
        float _4717 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1880 = sqrt(((_1856 * _1856) + (_1855 * _1855)) + (_1857 * _1857)) / (_1811 + 9.9999997473787516355514526367188e-06);
        float _4728 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
        float _1881 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1882 = _1881 * 2.0;
        float _1886 = (1.0 - _1881) / (_1881 + 1.0);
        float _4739 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1887 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _1896 = ((((1.0 - _1887) * (_1882 + 2.0)) * exp2(log2(isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_1882 + 1.0))) + _1887) * _1811;
        float _1897 = _1779 * 0.5;
        float _1898 = _1789 * 0.5;
        float _1899 = _1799 * 0.5;
        float _1900 = dot(vec3(_1897, _1898, _1899), vec3(_1897, _1898, _1899));
        float _1905 = (_1900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1900);
        float _1913 = (dot(vec3(_1058, _1059, _1060), vec3(_1905 * _1897, _1905 * _1898, _1905 * _1899)) + 1.0) * 0.5;
        float _4750 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1922 = sqrt(((_1898 * _1898) + (_1897 * _1897)) + (_1899 * _1899)) / (_1812 + 9.9999997473787516355514526367188e-06);
        float _4761 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1923 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _1924 = _1923 * 2.0;
        float _1928 = (1.0 - _1923) / (_1923 + 1.0);
        float _4772 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1929 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _1938 = ((((1.0 - _1929) * (_1924 + 2.0)) * exp2(log2(isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_1924 + 1.0))) + _1929) * _1812;
        _1946 = _1779;
        _1947 = _1778;
        _1948 = _1777;
        _1949 = _1789;
        _1950 = _1788;
        _1951 = _1787;
        _1952 = _1799;
        _1953 = _1798;
        _1954 = _1797;
        _1955 = _1812;
        _1956 = _1811;
        _1957 = _1810;
        _1958 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
        _1959 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)));
        _1960 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)));
    }
    else
    {
        _1946 = _1637;
        _1947 = _1637;
        _1948 = _1637;
        _1949 = _1637;
        _1950 = _1637;
        _1951 = _1637;
        _1952 = _1637;
        _1953 = _1637;
        _1954 = _1637;
        _1955 = _1637;
        _1956 = _1637;
        _1957 = _1637;
        _1958 = 0.0;
        _1959 = 0.0;
        _1960 = 0.0;
    }
    float _1970 = (cbModelParam._m0[1u].x * (_1958 - _1649)) + _1649;
    float _1971 = (cbModelParam._m0[1u].x * (_1959 - _1650)) + _1650;
    float _1972 = (cbModelParam._m0[1u].x * (_1960 - _1651)) + _1651;
    float _1993 = fma(_1972, cbSceneParam._m0[89u].z, fma(_1971, cbSceneParam._m0[89u].y, _1970 * cbSceneParam._m0[89u].x));
    float _1996 = fma(_1972, cbSceneParam._m0[90u].z, fma(_1971, cbSceneParam._m0[90u].y, _1970 * cbSceneParam._m0[90u].x));
    float _1999 = fma(_1972, cbSceneParam._m0[91u].z, fma(_1971, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1970));
    float _2014 = _1243 * 0.5;
    float _2015 = _1244 * 0.5;
    float _2016 = _1245 * 0.5;
    float _2017 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1948, _1951, _1954, _1957));
    float _2020 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1947, _1950, _1953, _1956));
    float _2023 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1946, _1949, _1952, _1955));
    float _2057;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2030 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1636, _1640, _1643, _1646));
        float _2034 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1638, _1641, _1644, _1647));
        float _2038 = dot(vec4(_2014, _2015, _2016, 1.0), vec4(_1639, _1642, _1645, _1648));
        float _2045 = dot(vec4(cbModelParam._m0[39u]), vec4(_2014, _2015, _2016, 1.0));
        _2057 = dot(vec3(isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2045) ? 0.0 : (isnan(0.0) ? _2045 : max(0.0, _2045))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2057 = 1.0;
    }
    float _2068;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2059 = dot(vec4(cbModelParam._m0[40u]), vec4(_2014, _2015, _2016, 1.0));
        _2068 = dot(vec3(isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0)), isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)), isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2059) ? 0.0 : (isnan(0.0) ? _2059 : max(0.0, _2059))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2068 = 1.0;
    }
    float _2072 = (_2068 * cbModelParam._m0[1u].x) + (_2057 * (1.0 - cbModelParam._m0[1u].x));
    float _2082 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1061);
    float _2083 = isnan(_2082) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2082 : min(cbModelParam._m0[25u].z, _2082));
    float _2163;
    float _2165;
    float _2167;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2130 = fma(_1307, cbModelParam._m0[13u].z, fma(_1303, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1299)) + cbModelParam._m0[13u].w;
        float _2134 = fma(_1307, cbModelParam._m0[14u].z, fma(_1303, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1299)) + cbModelParam._m0[14u].w;
        float _2138 = fma(_1307, cbModelParam._m0[15u].z, fma(_1303, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1299)) + cbModelParam._m0[15u].w;
        float _2141 = fma(_1245, cbModelParam._m0[13u].z, fma(_1244, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1243));
        float _2144 = fma(_1245, cbModelParam._m0[14u].z, fma(_1244, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1243));
        float _2147 = fma(_1245, cbModelParam._m0[15u].z, fma(_1244, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1243));
        float _2175;
        if (_2141 > 0.0)
        {
            _2175 = abs((1.0 - _2130) / _2141);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2141 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2130 + 1.0) / _2141);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2175 = frontier_phi_17_15_ladder;
        }
        float _2347;
        if (_2144 > 0.0)
        {
            _2347 = abs((1.0 - _2134) / _2144);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2144 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2134 + 1.0) / _2144);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2347 = frontier_phi_26_22_ladder;
        }
        float _2642;
        if (_2147 > 0.0)
        {
            _2642 = abs((1.0 - _2138) / _2147);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2147 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2138 + 1.0) / _2147);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2642 = frontier_phi_38_33_ladder;
        }
        float _2644 = isnan(_2347) ? _2175 : (isnan(_2175) ? _2347 : min(_2175, _2347));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _2141) + _2130;
        float _2650 = (_2645 * _2144) + _2134;
        float _2651 = (_2645 * _2147) + _2138;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2654 = (-1.0) - _2652;
        float _2656 = _2652 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2651 > _2656) || ((_2651 < _2654) || ((_2650 > _2656) || ((_2650 < _2654) || ((_2649 < _2654) || (_2649 > _2656))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2796 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2651, cbModelParam._m0[9u].z, fma(_2650, cbModelParam._m0[9u].y, _2649 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2651, cbModelParam._m0[10u].z, fma(_2650, cbModelParam._m0[10u].y, _2649 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2651, cbModelParam._m0[11u].z, fma(_2650, cbModelParam._m0[11u].y, _2649 * cbModelParam._m0[11u].x))), _2083);
            frontier_phi_16_38_ladder = _2796.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2796.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2796.x * cbModelParam._m0[1u].y;
        }
        _2163 = frontier_phi_16_38_ladder_2;
        _2165 = frontier_phi_16_38_ladder_1;
        _2167 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2151 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1243, _1244, _1245), _2083);
        _2163 = _2151.x * cbModelParam._m0[1u].y;
        _2165 = _2151.y * cbModelParam._m0[1u].y;
        _2167 = _2151.z * cbModelParam._m0[1u].y;
    }
    float _2171 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1061);
    float _2172 = isnan(_2171) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2171 : min(cbModelParam._m0[25u].w, _2171));
    float _2262;
    float _2264;
    float _2266;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2226 = fma(_1307, cbModelParam._m0[21u].z, fma(_1303, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1299)) + cbModelParam._m0[21u].w;
        float _2230 = fma(_1307, cbModelParam._m0[22u].z, fma(_1303, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1299)) + cbModelParam._m0[22u].w;
        float _2234 = fma(_1307, cbModelParam._m0[23u].z, fma(_1303, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1299)) + cbModelParam._m0[23u].w;
        float _2237 = fma(_1245, cbModelParam._m0[21u].z, fma(_1244, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1243));
        float _2240 = fma(_1245, cbModelParam._m0[22u].z, fma(_1244, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1243));
        float _2243 = fma(_1245, cbModelParam._m0[23u].z, fma(_1244, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1243));
        float _2352;
        if (_2237 > 0.0)
        {
            _2352 = abs((1.0 - _2226) / _2237);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2237 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2226 + 1.0) / _2237);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2352 = frontier_phi_28_24_ladder;
        }
        float _2669;
        if (_2240 > 0.0)
        {
            _2669 = abs((1.0 - _2230) / _2240);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2240 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2230 + 1.0) / _2240);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2669 = frontier_phi_40_35_ladder;
        }
        float _3007;
        if (_2243 > 0.0)
        {
            _3007 = abs((1.0 - _2234) / _2243);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2243 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2234 + 1.0) / _2243);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3007 = frontier_phi_50_47_ladder;
        }
        float _3009 = isnan(_2669) ? _2352 : (isnan(_2352) ? _2669 : min(_2352, _2669));
        float _3010 = isnan(_3007) ? _3009 : (isnan(_3009) ? _3007 : min(_3009, _3007));
        float _3014 = (_3010 * _2237) + _2226;
        float _3015 = (_3010 * _2240) + _2230;
        float _3016 = (_3010 * _2243) + _2234;
        float _3017 = _3010 * 9.9999997473787516355514526367188e-05;
        float _3018 = (-1.0) - _3017;
        float _3020 = _3017 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3016 > _3020) || ((_3016 < _3018) || ((_3015 > _3020) || ((_3015 < _3018) || ((_3014 < _3018) || (_3014 > _3020))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3016, cbModelParam._m0[17u].z, fma(_3015, cbModelParam._m0[17u].y, _3014 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3016, cbModelParam._m0[18u].z, fma(_3015, cbModelParam._m0[18u].y, _3014 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3016, cbModelParam._m0[19u].z, fma(_3015, cbModelParam._m0[19u].y, _3014 * cbModelParam._m0[19u].x))), _2172);
            frontier_phi_25_50_ladder = _3138.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3138.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3138.x * cbModelParam._m0[1u].z;
        }
        _2262 = frontier_phi_25_50_ladder_2;
        _2264 = frontier_phi_25_50_ladder_1;
        _2266 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2246 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1243, _1244, _1245), _2172);
        _2262 = _2246.x * cbModelParam._m0[1u].z;
        _2264 = _2246.y * cbModelParam._m0[1u].z;
        _2266 = _2246.z * cbModelParam._m0[1u].z;
    }
    float _2279 = (((_1270 * _1219) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2262 - _2163)) + _2163);
    float _2281 = (((_1270 * _1221) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2264 - _2165)) + _2165);
    float _2283 = (((_1270 * _1222) + _1271) * _1235) * ((cbModelParam._m0[1u].w * (_2266 - _2167)) + _2167);
    float _2286 = fma(_2283, cbSceneParam._m0[89u].z, fma(_2281, cbSceneParam._m0[89u].y, _2279 * cbSceneParam._m0[89u].x));
    float _2289 = fma(_2283, cbSceneParam._m0[90u].z, fma(_2281, cbSceneParam._m0[90u].y, _2279 * cbSceneParam._m0[90u].x));
    float _2292 = fma(_2283, cbSceneParam._m0[91u].z, fma(_2281, cbSceneParam._m0[91u].y, _2279 * cbSceneParam._m0[91u].x));
    float _2326 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2330 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2334 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2338 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2339 = _2326 / _2338;
    float _2340 = _2330 / _2338;
    float _2341 = _2334 / _2338;
    float _2488;
    float _2489;
    float _2490;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2368 = ((uint(_2341 > cbSceneParam._m0[59u].y) + uint(_2341 > cbSceneParam._m0[59u].x)) + uint(_2341 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2369 = _2368 + 43u;
        uint _2377 = _2368 + 44u;
        uint _2385 = _2368 + 45u;
        uint _2393 = _2368 + 46u;
        float _2404 = fma(_2338, cbSceneParam._m0[_2369].w, fma(_2334, cbSceneParam._m0[_2369].z, fma(_2330, cbSceneParam._m0[_2369].y, _2326 * cbSceneParam._m0[_2369].x)));
        float _2408 = fma(_2338, cbSceneParam._m0[_2377].w, fma(_2334, cbSceneParam._m0[_2377].z, fma(_2330, cbSceneParam._m0[_2377].y, _2326 * cbSceneParam._m0[_2377].x)));
        float _2416 = fma(_2338, cbSceneParam._m0[_2393].w, fma(_2334, cbSceneParam._m0[_2393].z, fma(_2330, cbSceneParam._m0[_2393].y, _2326 * cbSceneParam._m0[_2393].x)));
        float _2421 = cbSceneParam._m0[33u].z * _2416;
        float _2423 = cbSceneParam._m0[33u].w * _2416;
        float _2426 = fma(_2338, cbSceneParam._m0[_2385].w, fma(_2334, cbSceneParam._m0[_2385].z, fma(_2330, cbSceneParam._m0[_2385].y, _2326 * cbSceneParam._m0[_2385].x))) / _2416;
        float _2474 = (cbSceneParam._m0[33u].x - sqrt(((_2340 * _2340) + (_2339 * _2339)) + (_2341 * _2341))) * cbSceneParam._m0[33u].y;
        float _4898 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2481 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2421 + _2404) / _2416, (_2423 + _2408) / _2416), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2423 + _2404) / _2416, (_2408 - _2421) / _2416), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2404 - _2421) / _2416, (_2408 - _2423) / _2416), _2426), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2404 - _2423) / _2416, (_2421 + _2408) / _2416), _2426), 0.0)).x), vec4(0.25)));
        _2488 = 1.0 - (_2481 * cbSceneParam._m0[34u].x);
        _2489 = 1.0 - (_2481 * cbSceneParam._m0[34u].y);
        _2490 = 1.0 - (_2481 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2488 = 1.0;
        _2489 = 1.0;
        _2490 = 1.0;
    }
    float _2554;
    float _2556;
    float _2558;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2542 = fma(_2338, cbSceneParam._m0[63u].w, fma(_2334, cbSceneParam._m0[63u].z, fma(_2330, cbSceneParam._m0[63u].y, _2326 * cbSceneParam._m0[63u].x)));
        float _2543 = fma(_2338, cbSceneParam._m0[60u].w, fma(_2334, cbSceneParam._m0[60u].z, fma(_2330, cbSceneParam._m0[60u].y, _2326 * cbSceneParam._m0[60u].x))) / _2542;
        float _2544 = fma(_2338, cbSceneParam._m0[61u].w, fma(_2334, cbSceneParam._m0[61u].z, fma(_2330, cbSceneParam._m0[61u].y, _2326 * cbSceneParam._m0[61u].x))) / _2542;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2543 >= cbSceneParam._m0[64u].x) && (_2544 >= cbSceneParam._m0[64u].y)) && (_2543 <= cbSceneParam._m0[64u].z)) && (_2544 <= cbSceneParam._m0[64u].w))
        {
            float _2682 = fma(_2338, cbSceneParam._m0[62u].w, fma(_2334, cbSceneParam._m0[62u].z, fma(_2330, cbSceneParam._m0[62u].y, _2326 * cbSceneParam._m0[62u].x))) / _2542;
            float _2686 = isnan(cbSceneParam._m0[41u].w) ? _2682 : (isnan(_2682) ? cbSceneParam._m0[41u].w : max(_2682, cbSceneParam._m0[41u].w));
            float _2729 = (cbSceneParam._m0[33u].x - sqrt(((_2340 * _2340) + (_2339 * _2339)) + (_2341 * _2341))) * cbSceneParam._m0[33u].y;
            float _4914 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
            float _2736 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2543, cbSceneParam._m0[33u].w + _2544), _2686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2543, _2544 - cbSceneParam._m0[33u].z), _2686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2543 - cbSceneParam._m0[33u].z, _2544 - cbSceneParam._m0[33u].w), _2686), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2543 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2544), _2686), 0.0)).x), vec4(0.25)));
            float _2740 = 1.0 - (_2736 * cbSceneParam._m0[34u].x);
            float _2741 = 1.0 - (_2736 * cbSceneParam._m0[34u].y);
            float _2742 = 1.0 - (_2736 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2742) ? _2490 : (isnan(_2490) ? _2742 : min(_2490, _2742));
            frontier_phi_37_36_ladder_1 = isnan(_2741) ? _2489 : (isnan(_2489) ? _2741 : min(_2489, _2741));
            frontier_phi_37_36_ladder_2 = isnan(_2740) ? _2488 : (isnan(_2488) ? _2740 : min(_2488, _2740));
        }
        else
        {
            frontier_phi_37_36_ladder = _2490;
            frontier_phi_37_36_ladder_1 = _2489;
            frontier_phi_37_36_ladder_2 = _2488;
        }
        _2554 = frontier_phi_37_36_ladder_2;
        _2556 = frontier_phi_37_36_ladder_1;
        _2558 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2554 = _2488;
        _2556 = _2489;
        _2558 = _2490;
    }
    uvec4 _2563 = floatBitsToUint(cbInstanceData._m0[_277 + 5u]);
    uint _2565 = _2563.x * 14u;
    uint _2566 = _2565 + 13u;
    float _2573 = _1235 + (-1.0);
    float _2578 = (cbLight._m0[_2566].x * _2573) + 1.0;
    float _2579 = (cbLight._m0[_2566].y * _2573) + 1.0;
    float _2580 = (cbLight._m0[_2566].z * _2573) + 1.0;
    float _2581 = (cbLight._m0[_2566].w * _2573) + 1.0;
    uint _2582 = _2565 + 5u;
    float _2588 = isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0));
    uint _2592 = _2565 + 4u;
    float _2601 = isnan(1.0) ? _2578 : (isnan(_2578) ? 1.0 : min(_2578, 1.0));
    uint _2605 = _2565 | 1u;
    float _2616 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_1058, _1059, _1060));
    float _2619 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_1058, _1059, _1060));
    float _4950 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
    float _4961 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2624 = (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * 0.3183098733425140380859375;
    float _2626 = (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * 0.3183098733425140380859375;
    float _2633 = ((cbLight._m0[_2582].x * _2588) * _2626) + (((cbLight._m0[_2592].x * _2554) * _2601) * _2624);
    float _2634 = ((_2588 * cbLight._m0[_2582].y) * _2626) + (((cbLight._m0[_2592].y * _2556) * _2601) * _2624);
    float _2635 = ((_2588 * cbLight._m0[_2582].z) * _2626) + (((cbLight._m0[_2592].z * _2558) * _2601) * _2624);
    uvec4 _2639 = floatBitsToUint(cbLight._m0[_2565 + 12u]);
    bool _2641 = _2639.x == 0u;
    float _2743;
    float _2745;
    float _2747;
    if (_2641)
    {
        _2743 = _2633;
        _2745 = _2634;
        _2747 = _2635;
    }
    else
    {
        uint _2751 = _2565 + 6u;
        float _2767 = (dot(vec3(cbLight._m0[_2565 + 2u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2768 = _2767 * _2767;
        float _4972 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
        float _2769 = isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0));
        float _2770 = isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0));
        _2743 = (((cbLight._m0[_2751].x * 0.3183098733425140380859375) * _2769) * _2770) + _2633;
        _2745 = (((cbLight._m0[_2751].y * 0.3183098733425140380859375) * _2769) * _2770) + _2634;
        _2747 = (((cbLight._m0[_2751].z * 0.3183098733425140380859375) * _2769) * _2770) + _2635;
    }
    bool _2750 = _2639.y == 0u;
    float _2805;
    float _2807;
    float _2809;
    if (_2750)
    {
        _2805 = _2743;
        _2807 = _2745;
        _2809 = _2747;
    }
    else
    {
        uint _2978 = _2565 + 7u;
        float _2994 = (dot(vec3(cbLight._m0[_2565 + 3u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2995 = _2994 * _2994;
        float _4988 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2996 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _2997 = isnan(1.0) ? _2581 : (isnan(_2581) ? 1.0 : min(_2581, 1.0));
        _2805 = (((cbLight._m0[_2978].x * 0.3183098733425140380859375) * _2996) * _2997) + _2743;
        _2807 = (((cbLight._m0[_2978].y * 0.3183098733425140380859375) * _2996) * _2997) + _2745;
        _2809 = (((cbLight._m0[_2978].z * 0.3183098733425140380859375) * _2996) * _2997) + _2747;
    }
    uint _2812 = _2565 + 8u;
    float _2825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2565].w)) * _1061) * 0.949999988079071044921875);
    float _2826 = _2825 * _2825;
    float _2827 = cbLight._m0[_2565].x + _1137;
    float _2828 = cbLight._m0[_2565].y + _1138;
    float _2829 = cbLight._m0[_2565].z + _1139;
    float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
    float _2834 = _2833 * _2827;
    float _2835 = _2833 * _2828;
    float _2836 = _2833 * _2829;
    float _2837 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2565].xyz));
    float _5004 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
    float _2840 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
    float _5015 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _2841 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
    float _2842 = dot(vec3(_1058, _1059, _1060), vec3(_2834, _2835, _2836));
    float _5026 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2845 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
    float _2846 = dot(vec3(cbLight._m0[_2565].xyz), vec3(_2834, _2835, _2836));
    float _5037 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2850 = _2826 * _2826;
    float _2854 = ((_2845 * _2845) * (_2850 + (-1.0))) + 1.0;
    float _2862 = exp2(log2(1.0 - (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) * 5.0);
    float _2863 = 0.959999978542327880859375 - _1216;
    float _2865 = 0.959999978542327880859375 - _1217;
    float _2866 = 0.959999978542327880859375 - _1218;
    float _2873 = 1.0 - _2826;
    float _2884 = (0.5 / (((_2841 * ((_2840 * _2873) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _2873) + _2826) * _2840))) * _2840;
    float _5048 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
    float _2886 = (isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_2850 / ((_2854 * _2854) * 3.141590118408203125));
    uint _2900 = _2565 + 9u;
    float _2911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2605].w)) * _1061) * 0.949999988079071044921875);
    float _2912 = _2911 * _2911;
    float _2913 = cbLight._m0[_2605].x + _1137;
    float _2914 = cbLight._m0[_2605].y + _1138;
    float _2915 = cbLight._m0[_2605].z + _1139;
    float _2919 = inversesqrt(dot(vec3(_2913, _2914, _2915), vec3(_2913, _2914, _2915)));
    float _2920 = _2919 * _2913;
    float _2921 = _2919 * _2914;
    float _2922 = _2919 * _2915;
    float _2923 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2605].xyz));
    float _5059 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
    float _2926 = isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0));
    float _2927 = dot(vec3(_1058, _1059, _1060), vec3(_2920, _2921, _2922));
    float _5070 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
    float _2930 = isnan(1.0) ? _5070 : (isnan(_5070) ? 1.0 : min(_5070, 1.0));
    float _2931 = dot(vec3(cbLight._m0[_2605].xyz), vec3(_2920, _2921, _2922));
    float _5081 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
    float _2935 = _2912 * _2912;
    float _2939 = ((_2930 * _2930) * (_2935 + (-1.0))) + 1.0;
    float _2946 = exp2(log2(1.0 - (isnan(1.0) ? _5081 : (isnan(_5081) ? 1.0 : min(_5081, 1.0)))) * 5.0);
    float _2953 = 1.0 - _2912;
    float _2963 = (0.5 / (((_2841 * ((_2926 * _2953) + _2912)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _2953) + _2912) * _2926))) * _2926;
    float _5092 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
    float _2965 = (isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0))) * (_2935 / ((_2939 * _2939) * 3.141590118408203125));
    float _2975 = (((((_2946 * _2863) + _1219) * cbLight._m0[_2900].x) * _2965) * _2588) + ((((cbLight._m0[_2812].x * _2554) * ((_2862 * _2863) + _1219)) * _2886) * _2601);
    float _2976 = (((((_2946 * _2865) + _1221) * cbLight._m0[_2900].y) * _2965) * _2588) + ((((cbLight._m0[_2812].y * _2556) * ((_2862 * _2865) + _1221)) * _2886) * _2601);
    float _2977 = (((((_2946 * _2866) + _1222) * cbLight._m0[_2900].z) * _2965) * _2588) + ((((cbLight._m0[_2812].z * _2558) * ((_2862 * _2866) + _1222)) * _2886) * _2601);
    float _3033;
    float _3035;
    float _3037;
    if (_2641)
    {
        _3033 = _2975;
        _3035 = _2976;
        _3037 = _2977;
    }
    else
    {
        uint _3039 = _2565 + 2u;
        uint _3043 = _2565 + 10u;
        float _3057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3039].w)) * _1061) * 0.949999988079071044921875);
        float _3058 = _3057 * _3057;
        float _3059 = cbLight._m0[_3039].x + _1137;
        float _3060 = cbLight._m0[_3039].y + _1138;
        float _3061 = cbLight._m0[_3039].z + _1139;
        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
        float _3066 = _3065 * _3059;
        float _3067 = _3065 * _3060;
        float _3068 = _3065 * _3061;
        float _3069 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_3039].xyz));
        float _5103 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
        float _3072 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
        float _3073 = dot(vec3(_1058, _1059, _1060), vec3(_3066, _3067, _3068));
        float _5114 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
        float _3076 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
        float _3077 = dot(vec3(cbLight._m0[_3039].xyz), vec3(_3066, _3067, _3068));
        float _5125 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
        float _3081 = _3058 * _3058;
        float _3085 = ((_3076 * _3076) * (_3081 + (-1.0))) + 1.0;
        float _3092 = exp2(log2(1.0 - (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0)))) * 5.0);
        float _3099 = 1.0 - _3058;
        float _3109 = (0.5 / (((_2841 * ((_3072 * _3099) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _3099) + _3058) * _3072))) * _3072;
        float _5136 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
        float _3111 = (isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0))) * (_3081 / ((_3085 * _3085) * 3.141590118408203125));
        float _3112 = isnan(1.0) ? _2580 : (isnan(_2580) ? 1.0 : min(_2580, 1.0));
        _3033 = (((((_3092 * _2863) + _1219) * cbLight._m0[_3043].x) * _3111) * _3112) + _2975;
        _3035 = (((((_3092 * _2865) + _1221) * cbLight._m0[_3043].y) * _3111) * _3112) + _2976;
        _3037 = (((((_3092 * _2866) + _1222) * cbLight._m0[_3043].z) * _3111) * _3112) + _2977;
    }
    float _3143;
    float _3145;
    float _3147;
    if (_2750)
    {
        _3143 = _3033;
        _3145 = _3035;
        _3147 = _3037;
    }
    else
    {
        uint _3154 = _2565 + 3u;
        uint _3158 = _2565 + 11u;
        float _3172 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3154].w)) * _1061) * 0.949999988079071044921875);
        float _3173 = _3172 * _3172;
        float _3174 = cbLight._m0[_3154].x + _1137;
        float _3175 = cbLight._m0[_3154].y + _1138;
        float _3176 = cbLight._m0[_3154].z + _1139;
        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
        float _3181 = _3180 * _3174;
        float _3182 = _3180 * _3175;
        float _3183 = _3180 * _3176;
        float _3184 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_3154].xyz));
        float _5152 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3187 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
        float _3188 = dot(vec3(_1058, _1059, _1060), vec3(_3181, _3182, _3183));
        float _5163 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
        float _3191 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
        float _3192 = dot(vec3(cbLight._m0[_3154].xyz), vec3(_3181, _3182, _3183));
        float _5174 = isnan(0.0) ? _3192 : (isnan(_3192) ? 0.0 : max(_3192, 0.0));
        float _3196 = _3173 * _3173;
        float _3200 = ((_3191 * _3191) * (_3196 + (-1.0))) + 1.0;
        float _3207 = exp2(log2(1.0 - (isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0)))) * 5.0);
        float _3214 = 1.0 - _3173;
        float _3224 = (0.5 / (((_2841 * ((_3187 * _3214) + _3173)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _3214) + _3173) * _3187))) * _3187;
        float _5185 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
        float _3226 = (isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0))) * (_3196 / ((_3200 * _3200) * 3.141590118408203125));
        float _3227 = isnan(1.0) ? _2581 : (isnan(_2581) ? 1.0 : min(_2581, 1.0));
        _3143 = (((((_3207 * _2863) + _1219) * cbLight._m0[_3158].x) * _3226) * _3227) + _3033;
        _3145 = (((((_3207 * _2865) + _1221) * cbLight._m0[_3158].y) * _3226) * _3227) + _3035;
        _3147 = (((((_3207 * _2866) + _1222) * cbLight._m0[_3158].z) * _3226) * _3227) + _3037;
    }
    float _3293;
    float _3295;
    float _3297;
    float _3299;
    float _3301;
    float _3303;
    if (_2563.y == 0u)
    {
        uvec4 _3248 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3249 = _3248.x;
        uint _3260 = uint((float(_3248.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1158) / _3249))) + floor(float(uint(cbSceneParam._m0[85u].x * _1157) / _3249)));
        float _3270 = (log2(_2341 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3271 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
        uint _3274 = uint(isnan(14.0) ? _3271 : (isnan(_3271) ? 14.0 : min(_3271, 14.0)));
        uvec4 _3279 = texelFetch(g_lightClusterGridBuffer, int(((_3274 << 2u) + (_3260 << 6u)) >> 2u));
        uint _3280 = _3279.x;
        uint _3281 = _3248.z;
        float _3360;
        float _3362;
        float _3364;
        float _3366;
        float _3368;
        float _3370;
        if (((((1u << ((_3281 >> 4u) & 15u)) + 4294967295u) & _3280) == 0u) || ((_3281 & 240u) == 0u))
        {
            _3360 = 0.0;
            _3362 = 0.0;
            _3364 = 0.0;
            _3366 = 0.0;
            _3368 = 0.0;
            _3370 = 0.0;
        }
        else
        {
            float _3361;
            float _3363;
            float _3365;
            float _3367;
            float _3369;
            float _3371;
            float _3513 = 0.0;
            float _3514 = 0.0;
            float _3515 = 0.0;
            float _3516 = 0.0;
            float _3517 = 0.0;
            float _3518 = 0.0;
            uint _3519 = 0u;
            uint _3528;
            bool _3529;
            for (;;)
            {
                _3528 = texelFetch(g_lightClassification, int((((_3274 << 5u) + (_3260 << 9u)) + (_3519 << 2u)) >> 2u)).x;
                _3529 = _3528 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3529)
                {
                    frontier_phi_71_pred = _3518;
                    frontier_phi_71_pred_1 = _3517;
                    frontier_phi_71_pred_2 = _3516;
                    frontier_phi_71_pred_3 = _3515;
                    frontier_phi_71_pred_4 = _3514;
                    frontier_phi_71_pred_5 = _3513;
                }
                else
                {
                    float _3658;
                    float _3659;
                    float _3660;
                    float _3661;
                    float _3662;
                    float _3663;
                    uint _3664;
                    _3658 = _3513;
                    _3659 = _3514;
                    _3660 = _3515;
                    _3661 = _3516;
                    _3662 = _3517;
                    _3663 = _3518;
                    _3664 = _3528;
                    float _3585;
                    float _3586;
                    float _3587;
                    float _3588;
                    float _3589;
                    float _3590;
                    for (;;)
                    {
                        uint _3668 = uint(findLSB(_3664)) + (_3519 << 5u);
                        uint _3665 = (_3664 + 4294967295u) & _3664;
                        uint _3670 = _3668 * 48u;
                        vec4 _3684 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3670)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3670 + 3u)).x));
                        uint _3690 = (_3668 * 48u) + 4u;
                        vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3690)).x, texelFetch(g_PointLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3690 + 3u)).x));
                        uint _3709 = (_3668 * 48u) + 8u;
                        vec3 _3720 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3709)).x, texelFetch(g_PointLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3709 + 2u)).x));
                        float _3724 = _3684.x - _2339;
                        float _3725 = _3684.y - _2340;
                        float _3726 = _3684.z - _2341;
                        float _3727 = dot(vec3(_3724, _3725, _3726), vec3(_3724, _3725, _3726));
                        float _3730 = inversesqrt(_3727);
                        float _3731 = _3730 * _3724;
                        float _3732 = _3730 * _3725;
                        float _3733 = _3730 * _3726;
                        float _3734 = dot(vec3(_1176, _1179, _1182), vec3(_3731, _3732, _3733));
                        float _3739 = 1.0 - (_3727 * _3684.w);
                        float _5211 = isnan(0.0) ? _3739 : (isnan(_3739) ? 0.0 : max(_3739, 0.0));
                        float _3740 = isnan(1.0) ? _5211 : (isnan(_5211) ? 1.0 : min(_5211, 1.0));
                        float _3741 = sqrt(_3727) * _3703.w;
                        float _3744 = 1.39999997615814208984375 / (_3741 + 1.39999997615814208984375);
                        float _3745 = _3744 * _3744;
                        float _3748 = ((1.0 - _3745) * _3734) + _3745;
                        float _3751 = _3741 * _3741;
                        float _3755 = ((isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0))) * _3740) / ((_3751 * 0.699999988079071044921875) + 1.0);
                        float _3759 = (-0.0) - _2339;
                        float _3760 = (-0.0) - _2340;
                        float _3761 = (-0.0) - _2341;
                        float _3765 = inversesqrt(dot(vec3(_3759, _3760, _3761), vec3(_3759, _3760, _3761)));
                        float _3766 = _3765 * _3759;
                        float _3767 = _3765 * _3760;
                        float _3768 = _3765 * _3761;
                        float _3775 = exp2(log2(1.0 / ((_3751 * 3.5) + 5.0)) * 0.25);
                        float _3776 = 1.0 - _1251;
                        float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                        float _3784 = _3783 * _3783;
                        float _3785 = _3784 * _3784;
                        float _3786 = _3766 + _3731;
                        float _3787 = _3767 + _3732;
                        float _3788 = _3768 + _3733;
                        float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                        float _3796 = dot(vec3(_1176, _1179, _1182), vec3(_3766, _3767, _3768));
                        float _5227 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                        float _3799 = isnan(1.0) ? _5227 : (isnan(_5227) ? 1.0 : min(_5227, 1.0));
                        float _3800 = dot(vec3(_1176, _1179, _1182), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                        float _5238 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                        float _3803 = isnan(1.0) ? _5238 : (isnan(_5238) ? 1.0 : min(_5238, 1.0));
                        float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                        float _3808 = _3744 * _3784;
                        float _3809 = _3808 * _3808;
                        float _3812 = ((1.0 - _3809) * _3734) + _3809;
                        float _5249 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                        float _3813 = isnan(1.0) ? _5249 : (isnan(_5249) ? 1.0 : min(_5249, 1.0));
                        float _3814 = 1.0 - _3784;
                        float _3824 = (0.5 / (((_3813 * ((_3799 * _3814) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3813 * _3814) + _3784) * _3799))) * _3813;
                        float _5260 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                        float _3835 = (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _5260 : (isnan(_5260) ? 1.0 : min(_5260, 1.0)))) / ((_3807 * _3807) * ((_3751 * 2.1991131305694580078125) + 3.141590118408203125))) * _3740;
                        _3588 = (_3755 * _3703.x) + _3661;
                        _3589 = (_3755 * _3703.y) + _3662;
                        _3590 = (_3755 * _3703.z) + _3663;
                        _3585 = (_3835 * _3720.x) + _3658;
                        _3586 = (_3835 * _3720.y) + _3659;
                        _3587 = (_3835 * _3720.z) + _3660;
                        if (_3665 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3658 = _3585;
                            _3659 = _3586;
                            _3660 = _3587;
                            _3661 = _3588;
                            _3662 = _3589;
                            _3663 = _3590;
                            _3664 = _3665;
                        }
                    }
                    frontier_phi_71_pred = _3590;
                    frontier_phi_71_pred_1 = _3589;
                    frontier_phi_71_pred_2 = _3588;
                    frontier_phi_71_pred_3 = _3587;
                    frontier_phi_71_pred_4 = _3586;
                    frontier_phi_71_pred_5 = _3585;
                }
                _3371 = frontier_phi_71_pred;
                _3369 = frontier_phi_71_pred_1;
                _3367 = frontier_phi_71_pred_2;
                _3365 = frontier_phi_71_pred_3;
                _3363 = frontier_phi_71_pred_4;
                _3361 = frontier_phi_71_pred_5;
                uint _3520 = _3519 + 1u;
                if (_3520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3513 = _3361;
                    _3514 = _3363;
                    _3515 = _3365;
                    _3516 = _3367;
                    _3517 = _3369;
                    _3518 = _3371;
                    _3519 = _3520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3360 = _3361;
            _3362 = _3363;
            _3364 = _3365;
            _3366 = _3367;
            _3368 = _3369;
            _3370 = _3371;
        }
        uvec4 _3374 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3375 = _3374.z;
        uint _3377 = (_3375 >> 8u) & 15u;
        float _3481;
        float _3483;
        float _3485;
        float _3487;
        float _3489;
        float _3491;
        if (((4294967295u << _3377) & _3280) == 0u)
        {
            _3481 = _3360;
            _3483 = _3362;
            _3485 = _3364;
            _3487 = _3366;
            _3489 = _3368;
            _3491 = _3370;
        }
        else
        {
            float _3506 = inversesqrt(dot(vec3(_2339, _2340, _2341), vec3(_2339, _2340, _2341)));
            float _3507 = _3506 * _2339;
            float _3508 = _3506 * _2340;
            float _3509 = _3506 * _2341;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3377 < ((_3375 >> 12u) & 15u))
            {
                float _3482;
                float _3484;
                float _3486;
                float _3488;
                float _3490;
                float _3492;
                float _3641 = _3360;
                float _3642 = _3362;
                float _3643 = _3364;
                float _3644 = _3366;
                float _3645 = _3368;
                float _3646 = _3370;
                uint _3647 = _3377;
                uint _3656;
                bool _3657;
                for (;;)
                {
                    _3656 = texelFetch(g_lightClassification, int((((_3274 << 5u) + (_3260 << 9u)) + (_3647 << 2u)) >> 2u)).x;
                    _3657 = _3656 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3657)
                    {
                        frontier_phi_82_pred = _3646;
                        frontier_phi_82_pred_1 = _3645;
                        frontier_phi_82_pred_2 = _3644;
                        frontier_phi_82_pred_3 = _3643;
                        frontier_phi_82_pred_4 = _3642;
                        frontier_phi_82_pred_5 = _3641;
                    }
                    else
                    {
                        float _3849;
                        float _3850;
                        float _3851;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _4142;
                        float _4143;
                        float _4144;
                        float _4145;
                        float _4146;
                        float _4147;
                        float _3862 = _3641;
                        float _3863 = _3642;
                        float _3864 = _3643;
                        float _3865 = _3644;
                        float _3866 = _3645;
                        float _3867 = _3646;
                        uint _3868 = _3656;
                        uint _3869;
                        vec4 _3894;
                        float _3895;
                        vec4 _3910;
                        vec3 _3922;
                        vec4 _3937;
                        vec4 _3952;
                        float _3998;
                        bool _3999;
                        for (;;)
                        {
                            uint _3879 = ((_3647 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3868));
                            _3869 = (_3868 + 4294967295u) & _3868;
                            uint _3881 = _3879 * 40u;
                            _3894 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3881)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3881 + 3u)).x));
                            _3895 = _3894.w;
                            uint _3897 = (_3879 * 40u) + 4u;
                            _3910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3897 + 3u)).x));
                            uint _3912 = (_3879 * 40u) + 8u;
                            _3922 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3912 + 2u)).x));
                            uint _3924 = (_3879 * 40u) + 16u;
                            _3937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3924 + 3u)).x));
                            uint _3939 = (_3879 * 40u) + 20u;
                            _3952 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3939)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3939 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3939 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3939 + 3u)).x));
                            uint _3954 = (_3879 * 40u) + 24u;
                            vec4 _3967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 3u)).x));
                            uint _3973 = (_3879 * 40u) + 28u;
                            vec4 _3986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3973 + 3u)).x));
                            _3998 = fma(_2341, _3986.z, fma(_2340, _3986.y, _3986.x * _2339)) + _3986.w;
                            _3999 = !((fma(_2341, _3967.z, fma(_2340, _3967.y, _3967.x * _2339)) + _3967.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3999)
                            {
                                float _4026 = _3894.x - _2339;
                                float _4027 = _3894.y - _2340;
                                float _4028 = _3894.z - _2341;
                                float _4029 = dot(vec3(_4026, _4027, _4028), vec3(_4026, _4027, _4028));
                                float _4032 = inversesqrt(_4029);
                                float _4033 = _4032 * _4026;
                                float _4034 = _4032 * _4027;
                                float _4035 = _4032 * _4028;
                                float _4039 = 1.0 - (_4029 / (_3895 * _3895));
                                float _5271 = isnan(0.0) ? _4039 : (isnan(_4039) ? 0.0 : max(_4039, 0.0));
                                float _4040 = isnan(1.0) ? _5271 : (isnan(_5271) ? 1.0 : min(_5271, 1.0));
                                float _4044 = sqrt(_4029) * _3910.w;
                                float _4046 = 1.39999997615814208984375 / (_4044 + 1.39999997615814208984375);
                                float _4047 = _4046 * _4046;
                                float _4050 = ((1.0 - _4047) * dot(vec3(_4033, _4034, _4035), vec3(_1176, _1179, _1182))) + _4047;
                                float _4053 = _4044 * _4044;
                                float _4057 = (fma(_2341, _3937.z, fma(_2340, _3937.y, _3937.x * _2339)) + _3937.w) / _3998;
                                float _4058 = (fma(_2341, _3952.z, fma(_2340, _3952.y, _3952.x * _2339)) + _3952.w) / _3998;
                                float _4062 = 1.0 - dot(vec2(_4057, _4058), vec2(_4057, _4058));
                                float _5287 = isnan(0.0) ? _4062 : (isnan(_4062) ? 0.0 : max(_4062, 0.0));
                                float _4063 = isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0));
                                float _4064 = _4063 * (((isnan(0.0) ? _4050 : (isnan(_4050) ? 0.0 : max(_4050, 0.0))) * _4040) / ((_4053 * 0.699999988079071044921875) + 1.0));
                                float _4076 = exp2(log2(1.0 / ((_4053 * 3.5) + 5.0)) * 0.25);
                                float _4077 = 1.0 - _1251;
                                float _4084 = sqrt(1.0 - ((1.0 - (_4077 * _4077)) * (1.0 - (_4076 * _4076))));
                                float _4085 = _4084 * _4084;
                                float _4086 = _4085 * _4085;
                                float _4087 = _4033 - _3507;
                                float _4088 = _4034 - _3508;
                                float _4089 = _4035 - _3509;
                                float _4093 = inversesqrt(dot(vec3(_4087, _4088, _4089), vec3(_4087, _4088, _4089)));
                                float _4097 = dot(vec3(_1176, _1179, _1182), vec3((-0.0) - _3507, (-0.0) - _3508, (-0.0) - _3509));
                                float _5298 = isnan(0.0) ? _4097 : (isnan(_4097) ? 0.0 : max(_4097, 0.0));
                                float _4100 = isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0));
                                float _4101 = dot(vec3(_1176, _1179, _1182), vec3(_4093 * _4087, _4093 * _4088, _4093 * _4089));
                                float _5309 = isnan(0.0) ? _4101 : (isnan(_4101) ? 0.0 : max(_4101, 0.0));
                                float _4104 = isnan(1.0) ? _5309 : (isnan(_5309) ? 1.0 : min(_5309, 1.0));
                                float _4108 = ((_4104 * _4104) * (_4086 + (-1.0))) + 1.0;
                                float _4109 = _4046 * _4085;
                                float _4110 = _4109 * _4109;
                                float _4116 = ((1.0 - _4110) * dot(vec3(_1176, _1179, _1182), vec3(_4033, _4034, _4035))) + _4110;
                                float _5320 = isnan(0.0) ? _4116 : (isnan(_4116) ? 0.0 : max(_4116, 0.0));
                                float _4117 = isnan(1.0) ? _5320 : (isnan(_5320) ? 1.0 : min(_5320, 1.0));
                                float _4118 = 1.0 - _4085;
                                float _4128 = (0.5 / (((_4117 * ((_4100 * _4118) + _4085)) + 9.9999999392252902907785028219223e-09) + (((_4117 * _4118) + _4085) * _4100))) * _4117;
                                float _5331 = isnan(0.0) ? _4128 : (isnan(_4128) ? 0.0 : max(_4128, 0.0));
                                float _4138 = (_4063 * _4040) * (((_4086 * 3.1415927410125732421875) * (isnan(1.0) ? _5331 : (isnan(_5331) ? 1.0 : min(_5331, 1.0)))) / ((_4108 * _4108) * ((_4053 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4064 * _3910.z;
                                frontier_phi_88_pred_1 = _4064 * _3910.y;
                                frontier_phi_88_pred_2 = _4064 * _3910.x;
                                frontier_phi_88_pred_3 = _4138 * _3922.z;
                                frontier_phi_88_pred_4 = _4138 * _3922.y;
                                frontier_phi_88_pred_5 = _4138 * _3922.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4147 = frontier_phi_88_pred;
                            _4146 = frontier_phi_88_pred_1;
                            _4145 = frontier_phi_88_pred_2;
                            _4144 = frontier_phi_88_pred_3;
                            _4143 = frontier_phi_88_pred_4;
                            _4142 = frontier_phi_88_pred_5;
                            _3852 = _4145 + _3865;
                            _3853 = _4146 + _3866;
                            _3854 = _4147 + _3867;
                            _3849 = _4142 + _3862;
                            _3850 = _4143 + _3863;
                            _3851 = _4144 + _3864;
                            if (_3869 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3862 = _3849;
                                _3863 = _3850;
                                _3864 = _3851;
                                _3865 = _3852;
                                _3866 = _3853;
                                _3867 = _3854;
                                _3868 = _3869;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3854;
                        frontier_phi_82_pred_1 = _3853;
                        frontier_phi_82_pred_2 = _3852;
                        frontier_phi_82_pred_3 = _3851;
                        frontier_phi_82_pred_4 = _3850;
                        frontier_phi_82_pred_5 = _3849;
                    }
                    _3492 = frontier_phi_82_pred;
                    _3490 = frontier_phi_82_pred_1;
                    _3488 = frontier_phi_82_pred_2;
                    _3486 = frontier_phi_82_pred_3;
                    _3484 = frontier_phi_82_pred_4;
                    _3482 = frontier_phi_82_pred_5;
                    uint _3648 = _3647 + 1u;
                    if (_3648 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3641 = _3482;
                        _3642 = _3484;
                        _3643 = _3486;
                        _3644 = _3488;
                        _3645 = _3490;
                        _3646 = _3492;
                        _3647 = _3648;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3488;
                frontier_phi_63_64_ladder_1 = _3492;
                frontier_phi_63_64_ladder_2 = _3490;
                frontier_phi_63_64_ladder_3 = _3486;
                frontier_phi_63_64_ladder_4 = _3484;
                frontier_phi_63_64_ladder_5 = _3482;
            }
            else
            {
                frontier_phi_63_64_ladder = _3366;
                frontier_phi_63_64_ladder_1 = _3370;
                frontier_phi_63_64_ladder_2 = _3368;
                frontier_phi_63_64_ladder_3 = _3364;
                frontier_phi_63_64_ladder_4 = _3362;
                frontier_phi_63_64_ladder_5 = _3360;
            }
            _3481 = frontier_phi_63_64_ladder_5;
            _3483 = frontier_phi_63_64_ladder_4;
            _3485 = frontier_phi_63_64_ladder_3;
            _3487 = frontier_phi_63_64_ladder;
            _3489 = frontier_phi_63_64_ladder_2;
            _3491 = frontier_phi_63_64_ladder_1;
        }
        float _3496 = isnan(1.0) ? _1235 : (isnan(_1235) ? 1.0 : min(_1235, 1.0));
        _3293 = (_3496 * _3487) + _2805;
        _3295 = (_3496 * _3489) + _2807;
        _3297 = (_3496 * _3491) + _2809;
        _3299 = ((_3481 * _1219) * _3496) + _3143;
        _3301 = ((_3483 * _1221) * _3496) + _3145;
        _3303 = ((_3485 * _1222) * _3496) + _3147;
    }
    else
    {
        _3293 = _2805;
        _3295 = _2807;
        _3297 = _2809;
        _3299 = _3143;
        _3301 = _3145;
        _3303 = _3147;
    }
    float _5347 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
    float _5358 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
    float _5369 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _3320 = ((isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0))) * (_3293 + ((isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))) * _1235))) + ((_3299 + ((isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0))) * _2072)) * cbPerFrame._m0[3u].x);
    float _3321 = ((isnan(1.0) ? _5358 : (isnan(_5358) ? 1.0 : min(_5358, 1.0))) * (_3295 + ((isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0))) * _1235))) + ((_3301 + ((isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0))) * _2072)) * cbPerFrame._m0[3u].x);
    float _3322 = ((isnan(1.0) ? _5369 : (isnan(_5369) ? 1.0 : min(_5369, 1.0))) * (_3297 + ((isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0))) * _1235))) + ((_3303 + ((isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0))) * _2072)) * cbPerFrame._m0[3u].x);
    uint _3323 = _277 + 6u;
    float _3331 = _1157 / cbSceneParam._m0[86u].x;
    float _3332 = _1158 / cbSceneParam._m0[86u].y;
    vec4 _3346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3331, _3332, (log2((isnan(cbSceneParam._m0[77u].w) ? _1080 : (isnan(_1080) ? cbSceneParam._m0[77u].w : min(_1080, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3348 = _3346.x;
    float _3349 = _3346.y;
    float _3350 = _3346.z;
    float _3351 = _3346.w;
    float _3423;
    float _3425;
    float _3427;
    float _3429;
    if (_1080 > cbSceneParam._m0[78u].w)
    {
        float _3385 = isnan(_1080) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1080 : min(cbSceneParam._m0[80u].w, _1080));
        float _3386 = _3385 / _1080;
        float _3397 = _3386 * _1130;
        float _3398 = _1131 * _3386;
        float _3399 = (-0.0) - _3398;
        float _3401 = _3386 * _1132;
        float _3403 = (cbSceneParam._m0[77u].w * _3399) / _3385;
        float _3404 = _3403 + cbSceneParam._m0[79u].w;
        float _3405 = cbSceneParam._m0[79u].w - _3398;
        float _3411 = sqrt(((_3397 * _3397) + (_3398 * _3398)) + (_3401 * _3401));
        float _3414 = (1.0 - (cbSceneParam._m0[77u].w / _3385)) * _3411;
        float _3419 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3421 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3598;
        if (abs((_3399 - _3403) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3598 = ((((_3404 > 0.0) ? exp2(_3419 * _3404) : (2.0 - exp2(_3421 * _3404))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3414;
        }
        else
        {
            float _3542 = 1.0 / cbSceneParam._m0[80u].x;
            float _3543 = isnan(_3405) ? _3404 : (isnan(_3404) ? _3405 : max(_3404, _3405));
            float _3544 = isnan(_3405) ? _3404 : (isnan(_3404) ? _3405 : min(_3404, _3405));
            float _3553 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : min(_3543, 0.0));
            float _3554 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : min(_3544, 0.0));
            _3598 = ((abs(_3411 / _3399) * cbSceneParam._m0[80u].y) * ((((_3553 - _3554) * 2.0) - ((exp2(_3419 * (isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0)))) - exp2(_3419 * (isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0))))) * _3542)) - ((exp2(_3421 * _3553) - exp2(_3421 * _3554)) * _3542))) + (_3414 * cbSceneParam._m0[80u].z);
        }
        vec4 _3600 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3331, _3332, 1.0), 0.0);
        float _3609 = exp2((_3598 * (-1.44269502162933349609375)) * (1.0 - _3600.w));
        float _3610 = log2(_3609);
        float _3626 = log2(_3351);
        _3423 = (exp2(_3626 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3610 * cbSceneParam._m0[78u].x)) * _3600.x) / cbSceneParam._m0[78u].x)) + _3348;
        _3425 = (exp2(_3626 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3610 * cbSceneParam._m0[78u].y)) * _3600.y) / cbSceneParam._m0[78u].y)) + _3349;
        _3427 = (exp2(_3626 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3610 * cbSceneParam._m0[78u].z)) * _3600.z) / cbSceneParam._m0[78u].z)) + _3350;
        _3429 = _3609 * _3351;
    }
    else
    {
        _3423 = _3348;
        _3425 = _3349;
        _3427 = _3350;
        _3429 = _3351;
    }
    bool _3636;
    vec4 _3439;
    vec4 _3461;
    float _3463;
    float _3467;
    float _3468;
    float _3469;
    float _3470;
    bool _3480;
    for (;;)
    {
        _3439 = cbMatDynParam._m0[0u];
        float _3441 = roundEven(_3439.y);
        bool _3442 = _3441 == 3.0;
        float _3443 = log2(_3429);
        float _3450 = exp2(_3443 * cbSceneParam._m0[78u].x) * _3320;
        float _3451 = exp2(_3443 * cbSceneParam._m0[78u].y) * _3321;
        float _3452 = exp2(_3443 * cbSceneParam._m0[78u].z) * _3322;
        float _3459 = _1146 + (-0.5);
        _3461 = cbMtdParam._m0[1u];
        _3463 = _3461.y * _3459;
        float _3466 = (_3441 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3467 = _3466 * (_3442 ? _3450 : (_3450 + (cbSceneParam._m0[72u].w * _3423)));
        _3468 = _3466 * (_3442 ? _3451 : (_3451 + (cbSceneParam._m0[72u].w * _3425)));
        _3469 = _3466 * (_3442 ? _3452 : (_3452 + (cbSceneParam._m0[72u].w * _3427)));
        _3470 = _3459 * 0.999000012874603271484375;
        _3480 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3480)
        {
            if ((cbInstanceData._m0[_277 + 7u].x + _3470) < 0.5)
            {
                _3636 = true;
                break;
            }
        }
        uint _3577 = _1195 + uint(_3439.w);
        if ((cbInstanceData._m0[_3577].w < 1.0) && ((cbInstanceData._m0[_3577].w + _3470) < 0.5))
        {
            _3636 = true;
            break;
        }
        if ((_3463 + 1.0) < _3461.x)
        {
            _3636 = true;
            break;
        }
        _3636 = false;
        break;
    }
    float _3840;
    if (_3636)
    {
        discard_state = true;
        _3840 = 0.0;
    }
    else
    {
        _3840 = cbInstanceData._m0[_3323].w;
    }
    SV_Target.x = _3467;
    SV_Target.y = _3468;
    SV_Target.z = _3469;
    SV_Target.w = _3840;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3323].w;
    discard_exit();
}


