#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1366;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _259 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _259 + 1u;
    uint _268 = _259 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_259].x * cbInstanceData._m0[_259].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _400 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _402 = _400.x;
    float _414 = dot(vec4(_402, _400.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _431 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_402 - _414) * cbMtdParam._m0[23u].w) + _414) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3975 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _432 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _445 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_432 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327);
    float _448 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_432 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328);
    float _451 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_432 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329);
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _278) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _279) + cbTextureTilingScale._m0[14u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _507 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _509 = _507.x;
    float _510 = _507.y;
    float _511 = _507.z;
    float _520 = ((_490.z - _511) * _432) + _511;
    float _523 = ((((_490.x - _509) * _432) + _509) * 2.0) + (-1.0);
    float _525 = ((((_490.y - _510) * _432) + _510) * 2.0) + (-1.0);
    float _526 = dot(vec2(_523, _525), vec2(_523, _525));
    float _3986 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _531 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    vec4 _547 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _574 = _572.x;
    float _575 = 1.0 - _574;
    float _584 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _587 = ((isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : min(_584, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _596 = (_587 - ((((((_574 - _575) * cbMtdParam._m0[24u].z) + _575) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _587))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4007 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _597 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _604 = (_597 * ((_470.x * cbMtdParam._m0[18u].x) - _445)) + _445;
    float _605 = (_597 * ((_470.y * cbMtdParam._m0[18u].y) - _448)) + _448;
    float _606 = (_597 * ((_470.z * cbMtdParam._m0[18u].z) - _451)) + _451;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _278) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _279) + cbTextureTilingScale._m0[19u].w));
    float _620 = _618.x;
    float _621 = 1.0 - _620;
    float _646 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_620 - _621) * cbMtdParam._m0[24u].w) + _621) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4018 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _647 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _655 = ((((cbMtdParam._m0[10u].x - _604) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _647) + _604;
    float _656 = ((((cbMtdParam._m0[10u].y - _605) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _647) + _605;
    float _657 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _606)) * _647) + _606;
    vec4 _669 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _683 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _685 = _683.x;
    float _702 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _685) * _432) + _685;
    float _706 = ((_669.x - _702) * cbMtdParam._m0[19u].z) + _702;
    float _708 = _706 - (_706 * _597);
    float _710 = _708 - (_708 * _647);
    float _714 = (cbMtdParam._m0[19u].w * (_547.z - _520)) + _520;
    vec4 _728 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _735 = (_728.x * 2.0) + (-1.0);
    float _736 = (_728.y * 2.0) + (-1.0);
    float _737 = dot(vec2(_735, _736), vec2(_735, _736));
    float _4029 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _745 = (_597 * (_728.z - _714)) + _714;
    float _748 = ((cbMtdParam._m0[23u].x - _745) * _647) + _745;
    vec4 _767 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _278) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _279) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _773 = (_767.x * 2.0) + (-1.0);
    float _774 = (_767.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _4040 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _783 = (((_547.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _523;
    float _784 = (((_547.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _525;
    float _796 = (((_735 - _783) + (cbMtdParam._m0[21u].x * _783)) * _597) + _783;
    float _797 = (((_736 - _784) + (cbMtdParam._m0[21u].x * _784)) * _597) + _784;
    float _798 = (_597 * (sqrt(1.0 - (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) - _531)) + _531;
    float _809 = (((_773 - _796) + (_796 * cbMtdParam._m0[22u].z)) * _647) + _796;
    float _810 = (((_774 - _797) + (_797 * cbMtdParam._m0[22u].z)) * _647) + _797;
    float _811 = ((sqrt(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) - _798) * _647) + _798;
    float _813 = cbMtdParam._m0[22u].x + _547.w;
    float _816 = fma(_811, _246 * NORMAL.x, fma(_810, _253 * TANGENT.x, (_239 * _231) * _809));
    float _819 = fma(_811, _246 * NORMAL.y, fma(_810, _253 * TANGENT.y, (_239 * _232) * _809));
    float _822 = fma(_811, _246 * NORMAL.z, fma(_810, _253 * TANGENT.z, (_239 * _233) * _809));
    float _826 = inversesqrt(dot(vec3(_816, _819, _822), vec3(_816, _819, _822)));
    float _827 = _826 * _816;
    float _828 = _826 * _819;
    float _829 = _826 * _822;
    float _4051 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _830 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
    float _4062 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    float _4073 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _4084 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
    float _4095 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _4106 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _835 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _849 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _889 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _899 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _889);
    float _900 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _889);
    float _901 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _889);
    float _905 = inversesqrt(dot(vec3(_899, _900, _901), vec3(_899, _900, _901)));
    float _906 = _899 * _905;
    float _907 = _900 * _905;
    float _908 = _901 * _905;
    float _914 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _915 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _933 = fma(_829, cbSceneParam._m0[5u].z, fma(_828, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _827));
    float _936 = fma(_829, cbSceneParam._m0[6u].z, fma(_828, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _827));
    float _939 = fma(_829, cbSceneParam._m0[7u].z, fma(_828, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _827));
    uint _953 = (_259 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _959 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0)))) * cbInstanceData._m0[_953].x;
    float _960 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * cbInstanceData._m0[_953].y;
    float _961 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * cbInstanceData._m0[_953].z;
    float _4117 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    float _962 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _4128 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _963 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _4139 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _964 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _965 = 1.0 - _835;
    float _966 = _962 * _965;
    float _967 = _963 * _965;
    float _968 = _964 * _965;
    float _973 = (_962 + (-0.039999999105930328369140625)) * _835;
    float _974 = (_963 + (-0.039999999105930328369140625)) * _835;
    float _975 = (_964 + (-0.039999999105930328369140625)) * _835;
    float _976 = _973 + 0.039999999105930328369140625;
    float _978 = _974 + 0.039999999105930328369140625;
    float _979 = _975 + 0.039999999105930328369140625;
    vec4 _988 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _914, cbSceneParam._m0[86u].y * _915));
    float _992 = ((isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * TEXCOORD_5.w) * _988.x;
    float _993 = dot(vec3(_827, _828, _829), vec3(_906, _907, _908));
    float _996 = _993 * 2.0;
    float _1000 = (_996 * _827) - _906;
    float _1001 = (_996 * _828) - _907;
    float _1002 = (_996 * _829) - _908;
    float _1006 = abs(dot(vec3(_906, _907, _908), vec3(_827, _828, _829)));
    float _4150 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
    float _1008 = sqrt(_830);
    float _1021 = exp2((_1008 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1008 * 3.0));
    float _1027 = (1.0 - _1021) * ((_1008 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1028 = _1021 * _1008;
    float _1056 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1365;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1090 = fma(_1064, cbModelParam._m0[26u].z, fma(_1060, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1056));
        float _1094 = fma(_1064, cbModelParam._m0[27u].z, fma(_1060, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1056));
        float _1098 = fma(_1064, cbModelParam._m0[28u].z, fma(_1060, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1056));
        float _1123 = _1056 + _827;
        float _1124 = _1060 + _828;
        float _1125 = _1064 + _829;
        float _1135 = fma(_1125, cbModelParam._m0[26u].z, fma(_1124, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123)) - _1090;
        float _1136 = fma(_1125, cbModelParam._m0[27u].z, fma(_1124, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123)) - _1094;
        float _1137 = fma(_1125, cbModelParam._m0[28u].z, fma(_1124, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123)) - _1098;
        float _1141 = inversesqrt(dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137)));
        float _1154 = ((_1141 * _1135) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1090 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1141 * _1136) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1094 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1141 * _1137) / cbModelParam._m0[34u].z) + ((((((_1098 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1159 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1166 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1154, _1155, _1156), 0.0);
        float _1193 = exp2((_1159.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1159.x + (-0.5));
        float _1195 = _1193 * (_1159.y + (-0.5));
        float _1196 = _1193 * (_1159.z + (-0.5));
        float _1203 = exp2((_1166.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1166.x + (-0.5));
        float _1205 = _1203 * (_1166.y + (-0.5));
        float _1206 = _1203 * (_1166.z + (-0.5));
        float _1213 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1214 = _1213 * (_1173.x + (-0.5));
        float _1215 = _1213 * (_1173.y + (-0.5));
        float _1216 = _1213 * (_1173.z + (-0.5));
        float _1223 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1224 = _1223 * (_1180.x + (-0.5));
        float _1225 = _1223 * (_1180.y + (-0.5));
        float _1226 = _1223 * (_1180.z + (-0.5));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = _1194 * 0.5;
        float _1231 = _1204 * 0.5;
        float _1232 = _1214 * 0.5;
        float _1233 = dot(vec3(_1230, _1231, _1232), vec3(_1230, _1231, _1232));
        float _1238 = (_1233 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1233);
        float _1247 = (dot(vec3(_827, _828, _829), vec3(_1238 * _1230, _1238 * _1231, _1238 * _1232)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1257 = sqrt(((_1231 * _1231) + (_1230 * _1230)) + (_1232 * _1232)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1259 = _1258 * 2.0;
        float _1263 = (1.0 - _1258) / (_1258 + 1.0);
        float _4198 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1273 = ((((1.0 - _1264) * (_1259 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1259 + 1.0))) + _1264) * _1227;
        float _1274 = _1195 * 0.5;
        float _1275 = _1205 * 0.5;
        float _1276 = _1215 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_827, _828, _829), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _4209 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4220 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _4231 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_1301 + 1.0))) + _1306) * _1228;
        float _1316 = _1196 * 0.5;
        float _1317 = _1206 * 0.5;
        float _1318 = _1216 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_827, _828, _829), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _4264 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1343 + 1.0))) + _1348) * _1229;
        _1365 = _1196;
        _1367 = _1195;
        _1368 = _1194;
        _1369 = _1206;
        _1370 = _1205;
        _1371 = _1204;
        _1372 = _1216;
        _1373 = _1215;
        _1374 = _1214;
        _1375 = _1229;
        _1376 = _1228;
        _1377 = _1227;
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
    }
    else
    {
        _1365 = _1366;
        _1367 = _1366;
        _1368 = _1366;
        _1369 = _1366;
        _1370 = _1366;
        _1371 = _1366;
        _1372 = _1366;
        _1373 = _1366;
        _1374 = _1366;
        _1375 = _1366;
        _1376 = _1366;
        _1377 = _1366;
        _1378 = 0.0;
        _1379 = 0.0;
        _1380 = 0.0;
    }
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1405 = fma(_1064, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1056));
        float _1409 = fma(_1064, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1056));
        float _1413 = fma(_1064, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1056));
        float _1436 = _1056 + _827;
        float _1437 = _1060 + _828;
        float _1438 = _1064 + _829;
        float _1448 = fma(_1438, cbModelParam._m0[30u].z, fma(_1437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1436)) - _1405;
        float _1449 = fma(_1438, cbModelParam._m0[31u].z, fma(_1437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1436)) - _1409;
        float _1450 = fma(_1438, cbModelParam._m0[32u].z, fma(_1437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1436)) - _1413;
        float _1454 = inversesqrt(dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450)));
        float _1467 = ((_1454 * _1448) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1405 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1468 = ((_1454 * _1449) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1409 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1454 * _1450) / cbModelParam._m0[35u].z) + ((((((_1413 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1478 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1485 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        vec4 _1492 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1467, _1468, _1469), 0.0);
        float _1504 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1471.x + (-0.5));
        float _1506 = _1504 * (_1471.y + (-0.5));
        float _1507 = _1504 * (_1471.z + (-0.5));
        float _1514 = exp2((_1478.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1478.x + (-0.5));
        float _1516 = _1514 * (_1478.y + (-0.5));
        float _1517 = _1514 * (_1478.z + (-0.5));
        float _1524 = exp2((_1485.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1485.x + (-0.5));
        float _1526 = _1524 * (_1485.y + (-0.5));
        float _1527 = _1524 * (_1485.z + (-0.5));
        float _1534 = exp2((_1492.w + (-0.5)) * 20.0) * 2.0;
        float _1535 = _1534 * (_1492.x + (-0.5));
        float _1536 = _1534 * (_1492.y + (-0.5));
        float _1537 = _1534 * (_1492.z + (-0.5));
        float _1538 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = _1505 * 0.5;
        float _1542 = _1515 * 0.5;
        float _1543 = _1525 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_827, _828, _829), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4305 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1538 + 9.9999997473787516355514526367188e-06);
        float _4316 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4327 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_1568 + 1.0))) + _1573) * _1538;
        float _1583 = _1506 * 0.5;
        float _1584 = _1516 * 0.5;
        float _1585 = _1526 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_827, _828, _829), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4338 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4349 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4360 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0))) * (_1610 + 1.0))) + _1615) * _1539;
        float _1625 = _1507 * 0.5;
        float _1626 = _1517 * 0.5;
        float _1627 = _1527 * 0.5;
        float _1628 = dot(vec3(_1625, _1626, _1627), vec3(_1625, _1626, _1627));
        float _1633 = (_1628 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1628);
        float _1641 = (dot(vec3(_827, _828, _829), vec3(_1633 * _1625, _1633 * _1626, _1633 * _1627)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1650 = sqrt(((_1626 * _1626) + (_1625 * _1625)) + (_1627 * _1627)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1651 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1652 = _1651 * 2.0;
        float _1656 = (1.0 - _1651) / (_1651 + 1.0);
        float _4393 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1666 = ((((1.0 - _1657) * (_1652 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1652 + 1.0))) + _1657) * _1540;
        _1674 = _1507;
        _1675 = _1506;
        _1676 = _1505;
        _1677 = _1517;
        _1678 = _1516;
        _1679 = _1515;
        _1680 = _1527;
        _1681 = _1526;
        _1682 = _1525;
        _1683 = _1540;
        _1684 = _1539;
        _1685 = _1538;
        _1686 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)));
    }
    else
    {
        _1674 = _1366;
        _1675 = _1366;
        _1676 = _1366;
        _1677 = _1366;
        _1678 = _1366;
        _1679 = _1366;
        _1680 = _1366;
        _1681 = _1366;
        _1682 = _1366;
        _1683 = _1366;
        _1684 = _1366;
        _1685 = _1366;
        _1686 = 0.0;
        _1687 = 0.0;
        _1688 = 0.0;
    }
    float _1698 = (cbModelParam._m0[1u].x * (_1686 - _1378)) + _1378;
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1379)) + _1379;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1380)) + _1380;
    float _1721 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1724 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1727 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1698));
    float _1742 = _1000 * 0.5;
    float _1743 = _1001 * 0.5;
    float _1744 = _1002 * 0.5;
    float _1745 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1748 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1751 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1674, _1677, _1680, _1683));
    float _1785;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1758 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1365, _1369, _1372, _1375));
        float _1762 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1766 = dot(vec4(_1742, _1743, _1744, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1773 = dot(vec4(cbModelParam._m0[39u]), vec4(_1742, _1743, _1744, 1.0));
        _1785 = dot(vec3(isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0)), isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0)), isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1773) ? 0.0 : (isnan(0.0) ? _1773 : max(0.0, _1773))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1785 = 1.0;
    }
    float _1796;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1787 = dot(vec4(cbModelParam._m0[40u]), vec4(_1742, _1743, _1744, 1.0));
        _1796 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1787) ? 0.0 : (isnan(0.0) ? _1787 : max(0.0, _1787))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1796 = 1.0;
    }
    float _1800 = (_1796 * cbModelParam._m0[1u].x) + (_1785 * (1.0 - cbModelParam._m0[1u].x));
    float _1810 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _830);
    float _1811 = isnan(_1810) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1810 : min(cbModelParam._m0[25u].z, _1810));
    float _1891;
    float _1893;
    float _1895;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1858 = fma(_1064, cbModelParam._m0[13u].z, fma(_1060, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1056)) + cbModelParam._m0[13u].w;
        float _1862 = fma(_1064, cbModelParam._m0[14u].z, fma(_1060, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1056)) + cbModelParam._m0[14u].w;
        float _1866 = fma(_1064, cbModelParam._m0[15u].z, fma(_1060, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1056)) + cbModelParam._m0[15u].w;
        float _1869 = fma(_1002, cbModelParam._m0[13u].z, fma(_1001, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1000));
        float _1872 = fma(_1002, cbModelParam._m0[14u].z, fma(_1001, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1000));
        float _1875 = fma(_1002, cbModelParam._m0[15u].z, fma(_1001, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1000));
        float _1903;
        if (_1869 > 0.0)
        {
            _1903 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1903 = frontier_phi_14_12_ladder;
        }
        float _2074;
        if (_1872 > 0.0)
        {
            _2074 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2074 = frontier_phi_23_19_ladder;
        }
        float _2369;
        if (_1875 > 0.0)
        {
            _2369 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2369 = frontier_phi_35_30_ladder;
        }
        float _2371 = isnan(_2074) ? _1903 : (isnan(_1903) ? _2074 : min(_1903, _2074));
        float _2372 = isnan(_2369) ? _2371 : (isnan(_2371) ? _2369 : min(_2371, _2369));
        float _2376 = (_2372 * _1869) + _1858;
        float _2377 = (_2372 * _1872) + _1862;
        float _2378 = (_2372 * _1875) + _1866;
        float _2379 = _2372 * 9.9999997473787516355514526367188e-05;
        float _2381 = (-1.0) - _2379;
        float _2383 = _2379 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2378 > _2383) || ((_2378 < _2381) || ((_2377 > _2383) || ((_2377 < _2381) || ((_2376 < _2381) || (_2376 > _2383))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2523 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2378, cbModelParam._m0[9u].z, fma(_2377, cbModelParam._m0[9u].y, _2376 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2378, cbModelParam._m0[10u].z, fma(_2377, cbModelParam._m0[10u].y, _2376 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2378, cbModelParam._m0[11u].z, fma(_2377, cbModelParam._m0[11u].y, _2376 * cbModelParam._m0[11u].x))), _1811);
            frontier_phi_13_35_ladder = _2523.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2523.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2523.x * cbModelParam._m0[1u].y;
        }
        _1891 = frontier_phi_13_35_ladder_2;
        _1893 = frontier_phi_13_35_ladder_1;
        _1895 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1000, _1001, _1002), _1811);
        _1891 = _1879.x * cbModelParam._m0[1u].y;
        _1893 = _1879.y * cbModelParam._m0[1u].y;
        _1895 = _1879.z * cbModelParam._m0[1u].y;
    }
    float _1899 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _830);
    float _1900 = isnan(_1899) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1899 : min(cbModelParam._m0[25u].w, _1899));
    float _1989;
    float _1991;
    float _1993;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1953 = fma(_1064, cbModelParam._m0[21u].z, fma(_1060, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1056)) + cbModelParam._m0[21u].w;
        float _1957 = fma(_1064, cbModelParam._m0[22u].z, fma(_1060, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1056)) + cbModelParam._m0[22u].w;
        float _1961 = fma(_1064, cbModelParam._m0[23u].z, fma(_1060, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1056)) + cbModelParam._m0[23u].w;
        float _1964 = fma(_1002, cbModelParam._m0[21u].z, fma(_1001, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1000));
        float _1967 = fma(_1002, cbModelParam._m0[22u].z, fma(_1001, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1000));
        float _1970 = fma(_1002, cbModelParam._m0[23u].z, fma(_1001, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1000));
        float _2079;
        if (_1964 > 0.0)
        {
            _2079 = abs((1.0 - _1953) / _1964);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1953 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2079 = frontier_phi_25_21_ladder;
        }
        float _2396;
        if (_1967 > 0.0)
        {
            _2396 = abs((1.0 - _1957) / _1967);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1957 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2396 = frontier_phi_37_32_ladder;
        }
        float _2734;
        if (_1970 > 0.0)
        {
            _2734 = abs((1.0 - _1961) / _1970);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1961 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2734 = frontier_phi_47_44_ladder;
        }
        float _2736 = isnan(_2396) ? _2079 : (isnan(_2079) ? _2396 : min(_2079, _2396));
        float _2737 = isnan(_2734) ? _2736 : (isnan(_2736) ? _2734 : min(_2736, _2734));
        float _2741 = (_2737 * _1964) + _1953;
        float _2742 = (_2737 * _1967) + _1957;
        float _2743 = (_2737 * _1970) + _1961;
        float _2744 = _2737 * 9.9999997473787516355514526367188e-05;
        float _2745 = (-1.0) - _2744;
        float _2747 = _2744 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2743 > _2747) || ((_2743 < _2745) || ((_2742 > _2747) || ((_2742 < _2745) || ((_2741 < _2745) || (_2741 > _2747))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2865 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2743, cbModelParam._m0[17u].z, fma(_2742, cbModelParam._m0[17u].y, _2741 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2743, cbModelParam._m0[18u].z, fma(_2742, cbModelParam._m0[18u].y, _2741 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2743, cbModelParam._m0[19u].z, fma(_2742, cbModelParam._m0[19u].y, _2741 * cbModelParam._m0[19u].x))), _1900);
            frontier_phi_22_47_ladder = _2865.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2865.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2865.x * cbModelParam._m0[1u].z;
        }
        _1989 = frontier_phi_22_47_ladder_2;
        _1991 = frontier_phi_22_47_ladder_1;
        _1993 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1000, _1001, _1002), _1900);
        _1989 = _1973.x * cbModelParam._m0[1u].z;
        _1991 = _1973.y * cbModelParam._m0[1u].z;
        _1993 = _1973.z * cbModelParam._m0[1u].z;
    }
    float _2006 = (((_1027 * _976) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_1989 - _1891)) + _1891);
    float _2008 = (((_1027 * _978) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_1991 - _1893)) + _1893);
    float _2010 = (((_1027 * _979) + _1028) * _992) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2013 = fma(_2010, cbSceneParam._m0[89u].z, fma(_2008, cbSceneParam._m0[89u].y, _2006 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_2010, cbSceneParam._m0[90u].z, fma(_2008, cbSceneParam._m0[90u].y, _2006 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_2010, cbSceneParam._m0[91u].z, fma(_2008, cbSceneParam._m0[91u].y, _2006 * cbSceneParam._m0[91u].x));
    float _2053 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2066 = _2053 / _2065;
    float _2067 = _2057 / _2065;
    float _2068 = _2061 / _2065;
    float _2215;
    float _2216;
    float _2217;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2095 = ((uint(_2068 > cbSceneParam._m0[59u].y) + uint(_2068 > cbSceneParam._m0[59u].x)) + uint(_2068 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2096 = _2095 + 43u;
        uint _2104 = _2095 + 44u;
        uint _2112 = _2095 + 45u;
        uint _2120 = _2095 + 46u;
        float _2131 = fma(_2065, cbSceneParam._m0[_2096].w, fma(_2061, cbSceneParam._m0[_2096].z, fma(_2057, cbSceneParam._m0[_2096].y, _2053 * cbSceneParam._m0[_2096].x)));
        float _2135 = fma(_2065, cbSceneParam._m0[_2104].w, fma(_2061, cbSceneParam._m0[_2104].z, fma(_2057, cbSceneParam._m0[_2104].y, _2053 * cbSceneParam._m0[_2104].x)));
        float _2143 = fma(_2065, cbSceneParam._m0[_2120].w, fma(_2061, cbSceneParam._m0[_2120].z, fma(_2057, cbSceneParam._m0[_2120].y, _2053 * cbSceneParam._m0[_2120].x)));
        float _2148 = cbSceneParam._m0[33u].z * _2143;
        float _2150 = cbSceneParam._m0[33u].w * _2143;
        float _2153 = fma(_2065, cbSceneParam._m0[_2112].w, fma(_2061, cbSceneParam._m0[_2112].z, fma(_2057, cbSceneParam._m0[_2112].y, _2053 * cbSceneParam._m0[_2112].x))) / _2143;
        float _2201 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
        float _4519 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        float _2208 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2148 + _2131) / _2143, (_2150 + _2135) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2150 + _2131) / _2143, (_2135 - _2148) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2148) / _2143, (_2135 - _2150) / _2143), _2153), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 - _2150) / _2143, (_2148 + _2135) / _2143), _2153), 0.0)).x), vec4(0.25)));
        _2215 = 1.0 - (_2208 * cbSceneParam._m0[34u].x);
        _2216 = 1.0 - (_2208 * cbSceneParam._m0[34u].y);
        _2217 = 1.0 - (_2208 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2215 = 1.0;
        _2216 = 1.0;
        _2217 = 1.0;
    }
    float _2281;
    float _2283;
    float _2285;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2269 = fma(_2065, cbSceneParam._m0[63u].w, fma(_2061, cbSceneParam._m0[63u].z, fma(_2057, cbSceneParam._m0[63u].y, _2053 * cbSceneParam._m0[63u].x)));
        float _2270 = fma(_2065, cbSceneParam._m0[60u].w, fma(_2061, cbSceneParam._m0[60u].z, fma(_2057, cbSceneParam._m0[60u].y, _2053 * cbSceneParam._m0[60u].x))) / _2269;
        float _2271 = fma(_2065, cbSceneParam._m0[61u].w, fma(_2061, cbSceneParam._m0[61u].z, fma(_2057, cbSceneParam._m0[61u].y, _2053 * cbSceneParam._m0[61u].x))) / _2269;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2270 >= cbSceneParam._m0[64u].x) && (_2271 >= cbSceneParam._m0[64u].y)) && (_2270 <= cbSceneParam._m0[64u].z)) && (_2271 <= cbSceneParam._m0[64u].w))
        {
            float _2409 = fma(_2065, cbSceneParam._m0[62u].w, fma(_2061, cbSceneParam._m0[62u].z, fma(_2057, cbSceneParam._m0[62u].y, _2053 * cbSceneParam._m0[62u].x))) / _2269;
            float _2413 = isnan(cbSceneParam._m0[41u].w) ? _2409 : (isnan(_2409) ? cbSceneParam._m0[41u].w : max(_2409, cbSceneParam._m0[41u].w));
            float _2456 = (cbSceneParam._m0[33u].x - sqrt(((_2067 * _2067) + (_2066 * _2066)) + (_2068 * _2068))) * cbSceneParam._m0[33u].y;
            float _4535 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
            float _2463 = (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2270, cbSceneParam._m0[33u].w + _2271), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2270, _2271 - cbSceneParam._m0[33u].z), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].z, _2271 - cbSceneParam._m0[33u].w), _2413), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2270 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2271), _2413), 0.0)).x), vec4(0.25)));
            float _2467 = 1.0 - (_2463 * cbSceneParam._m0[34u].x);
            float _2468 = 1.0 - (_2463 * cbSceneParam._m0[34u].y);
            float _2469 = 1.0 - (_2463 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2469) ? _2217 : (isnan(_2217) ? _2469 : min(_2217, _2469));
            frontier_phi_34_33_ladder_1 = isnan(_2468) ? _2216 : (isnan(_2216) ? _2468 : min(_2216, _2468));
            frontier_phi_34_33_ladder_2 = isnan(_2467) ? _2215 : (isnan(_2215) ? _2467 : min(_2215, _2467));
        }
        else
        {
            frontier_phi_34_33_ladder = _2217;
            frontier_phi_34_33_ladder_1 = _2216;
            frontier_phi_34_33_ladder_2 = _2215;
        }
        _2281 = frontier_phi_34_33_ladder_2;
        _2283 = frontier_phi_34_33_ladder_1;
        _2285 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2281 = _2215;
        _2283 = _2216;
        _2285 = _2217;
    }
    uvec4 _2290 = floatBitsToUint(cbInstanceData._m0[_259 + 5u]);
    uint _2292 = _2290.x * 14u;
    uint _2293 = _2292 + 13u;
    float _2300 = _992 + (-1.0);
    float _2305 = (cbLight._m0[_2293].x * _2300) + 1.0;
    float _2306 = (cbLight._m0[_2293].y * _2300) + 1.0;
    float _2307 = (cbLight._m0[_2293].z * _2300) + 1.0;
    float _2308 = (cbLight._m0[_2293].w * _2300) + 1.0;
    uint _2309 = _2292 + 5u;
    float _2315 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
    uint _2319 = _2292 + 4u;
    float _2328 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2332 = _2292 | 1u;
    float _2343 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_827, _828, _829));
    float _2346 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_827, _828, _829));
    float _4571 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _4582 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2351 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * 0.3183098733425140380859375;
    float _2353 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2360 = ((cbLight._m0[_2309].x * _2315) * _2353) + (((cbLight._m0[_2319].x * _2281) * _2328) * _2351);
    float _2361 = ((_2315 * cbLight._m0[_2309].y) * _2353) + (((cbLight._m0[_2319].y * _2283) * _2328) * _2351);
    float _2362 = ((_2315 * cbLight._m0[_2309].z) * _2353) + (((cbLight._m0[_2319].z * _2285) * _2328) * _2351);
    uvec4 _2366 = floatBitsToUint(cbLight._m0[_2292 + 12u]);
    bool _2368 = _2366.x == 0u;
    float _2470;
    float _2472;
    float _2474;
    if (_2368)
    {
        _2470 = _2360;
        _2472 = _2361;
        _2474 = _2362;
    }
    else
    {
        uint _2478 = _2292 + 6u;
        float _2494 = (dot(vec3(cbLight._m0[_2292 + 2u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2495 = _2494 * _2494;
        float _4593 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
        float _2496 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _2497 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2470 = (((cbLight._m0[_2478].x * 0.3183098733425140380859375) * _2496) * _2497) + _2360;
        _2472 = (((cbLight._m0[_2478].y * 0.3183098733425140380859375) * _2496) * _2497) + _2361;
        _2474 = (((cbLight._m0[_2478].z * 0.3183098733425140380859375) * _2496) * _2497) + _2362;
    }
    bool _2477 = _2366.y == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2477)
    {
        _2532 = _2470;
        _2534 = _2472;
        _2536 = _2474;
    }
    else
    {
        uint _2705 = _2292 + 7u;
        float _2721 = (dot(vec3(cbLight._m0[_2292 + 3u].xyz), vec3(_827, _828, _829)) * 0.5) + 0.5;
        float _2722 = _2721 * _2721;
        float _4609 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2723 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
        float _2724 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2532 = (((cbLight._m0[_2705].x * 0.3183098733425140380859375) * _2723) * _2724) + _2470;
        _2534 = (((cbLight._m0[_2705].y * 0.3183098733425140380859375) * _2723) * _2724) + _2472;
        _2536 = (((cbLight._m0[_2705].z * 0.3183098733425140380859375) * _2723) * _2724) + _2474;
    }
    uint _2539 = _2292 + 8u;
    float _2552 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2292].w)) * _830) * 0.949999988079071044921875);
    float _2553 = _2552 * _2552;
    float _2554 = cbLight._m0[_2292].x + _906;
    float _2555 = cbLight._m0[_2292].y + _907;
    float _2556 = cbLight._m0[_2292].z + _908;
    float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
    float _2561 = _2560 * _2554;
    float _2562 = _2560 * _2555;
    float _2563 = _2560 * _2556;
    float _2564 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2292].xyz));
    float _4625 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
    float _2567 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _4636 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _2568 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _2569 = dot(vec3(_827, _828, _829), vec3(_2561, _2562, _2563));
    float _4647 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2292].xyz), vec3(_2561, _2562, _2563));
    float _4658 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2553 * _2553;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2589 = exp2(log2(1.0 - (isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0)))) * 5.0);
    float _2590 = 0.959999978542327880859375 - _973;
    float _2592 = 0.959999978542327880859375 - _974;
    float _2593 = 0.959999978542327880859375 - _975;
    float _2600 = 1.0 - _2553;
    float _2611 = (0.5 / (((_2568 * ((_2567 * _2600) + _2553)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2600) + _2553) * _2567))) * _2567;
    float _4669 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2613 = (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    uint _2627 = _2292 + 9u;
    float _2638 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2332].w)) * _830) * 0.949999988079071044921875);
    float _2639 = _2638 * _2638;
    float _2640 = cbLight._m0[_2332].x + _906;
    float _2641 = cbLight._m0[_2332].y + _907;
    float _2642 = cbLight._m0[_2332].z + _908;
    float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
    float _2647 = _2646 * _2640;
    float _2648 = _2646 * _2641;
    float _2649 = _2646 * _2642;
    float _2650 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2332].xyz));
    float _4680 = isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0));
    float _2653 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _2654 = dot(vec3(_827, _828, _829), vec3(_2647, _2648, _2649));
    float _4691 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2658 = dot(vec3(cbLight._m0[_2332].xyz), vec3(_2647, _2648, _2649));
    float _4702 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = _2639 * _2639;
    float _2666 = ((_2657 * _2657) * (_2662 + (-1.0))) + 1.0;
    float _2673 = exp2(log2(1.0 - (isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0)))) * 5.0);
    float _2680 = 1.0 - _2639;
    float _2690 = (0.5 / (((_2568 * ((_2653 * _2680) + _2639)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2680) + _2639) * _2653))) * _2653;
    float _4713 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
    float _2692 = (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0))) * (_2662 / ((_2666 * _2666) * 3.141590118408203125));
    float _2702 = (((((_2673 * _2590) + _976) * cbLight._m0[_2627].x) * _2692) * _2315) + ((((cbLight._m0[_2539].x * _2281) * ((_2589 * _2590) + _976)) * _2613) * _2328);
    float _2703 = (((((_2673 * _2592) + _978) * cbLight._m0[_2627].y) * _2692) * _2315) + ((((cbLight._m0[_2539].y * _2283) * ((_2589 * _2592) + _978)) * _2613) * _2328);
    float _2704 = (((((_2673 * _2593) + _979) * cbLight._m0[_2627].z) * _2692) * _2315) + ((((cbLight._m0[_2539].z * _2285) * ((_2589 * _2593) + _979)) * _2613) * _2328);
    float _2760;
    float _2762;
    float _2764;
    if (_2368)
    {
        _2760 = _2702;
        _2762 = _2703;
        _2764 = _2704;
    }
    else
    {
        uint _2766 = _2292 + 2u;
        uint _2770 = _2292 + 10u;
        float _2784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2766].w)) * _830) * 0.949999988079071044921875);
        float _2785 = _2784 * _2784;
        float _2786 = cbLight._m0[_2766].x + _906;
        float _2787 = cbLight._m0[_2766].y + _907;
        float _2788 = cbLight._m0[_2766].z + _908;
        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
        float _2793 = _2792 * _2786;
        float _2794 = _2792 * _2787;
        float _2795 = _2792 * _2788;
        float _2796 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2766].xyz));
        float _4724 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2800 = dot(vec3(_827, _828, _829), vec3(_2793, _2794, _2795));
        float _4735 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2803 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2804 = dot(vec3(cbLight._m0[_2766].xyz), vec3(_2793, _2794, _2795));
        float _4746 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2808 = _2785 * _2785;
        float _2812 = ((_2803 * _2803) * (_2808 + (-1.0))) + 1.0;
        float _2819 = exp2(log2(1.0 - (isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0)))) * 5.0);
        float _2826 = 1.0 - _2785;
        float _2836 = (0.5 / (((_2568 * ((_2799 * _2826) + _2785)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2826) + _2785) * _2799))) * _2799;
        float _4757 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2838 = (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2808 / ((_2812 * _2812) * 3.141590118408203125));
        float _2839 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2760 = (((((_2819 * _2590) + _976) * cbLight._m0[_2770].x) * _2838) * _2839) + _2702;
        _2762 = (((((_2819 * _2592) + _978) * cbLight._m0[_2770].y) * _2838) * _2839) + _2703;
        _2764 = (((((_2819 * _2593) + _979) * cbLight._m0[_2770].z) * _2838) * _2839) + _2704;
    }
    float _2870;
    float _2872;
    float _2874;
    if (_2477)
    {
        _2870 = _2760;
        _2872 = _2762;
        _2874 = _2764;
    }
    else
    {
        uint _2881 = _2292 + 3u;
        uint _2885 = _2292 + 11u;
        float _2899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2881].w)) * _830) * 0.949999988079071044921875);
        float _2900 = _2899 * _2899;
        float _2901 = cbLight._m0[_2881].x + _906;
        float _2902 = cbLight._m0[_2881].y + _907;
        float _2903 = cbLight._m0[_2881].z + _908;
        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
        float _2908 = _2907 * _2901;
        float _2909 = _2907 * _2902;
        float _2910 = _2907 * _2903;
        float _2911 = dot(vec3(_827, _828, _829), vec3(cbLight._m0[_2881].xyz));
        float _4773 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
        float _2914 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
        float _2915 = dot(vec3(_827, _828, _829), vec3(_2908, _2909, _2910));
        float _4784 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
        float _2918 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2919 = dot(vec3(cbLight._m0[_2881].xyz), vec3(_2908, _2909, _2910));
        float _4795 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2923 = _2900 * _2900;
        float _2927 = ((_2918 * _2918) * (_2923 + (-1.0))) + 1.0;
        float _2934 = exp2(log2(1.0 - (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) * 5.0);
        float _2941 = 1.0 - _2900;
        float _2951 = (0.5 / (((_2568 * ((_2914 * _2941) + _2900)) + 9.9999999392252902907785028219223e-09) + (((_2568 * _2941) + _2900) * _2914))) * _2914;
        float _4806 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2953 = (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2923 / ((_2927 * _2927) * 3.141590118408203125));
        float _2954 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
        _2870 = (((((_2934 * _2590) + _976) * cbLight._m0[_2885].x) * _2953) * _2954) + _2760;
        _2872 = (((((_2934 * _2592) + _978) * cbLight._m0[_2885].y) * _2953) * _2954) + _2762;
        _2874 = (((((_2934 * _2593) + _979) * cbLight._m0[_2885].z) * _2953) * _2954) + _2764;
    }
    float _3020;
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    if (_2290.y == 0u)
    {
        uvec4 _2975 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2976 = _2975.x;
        uint _2987 = uint((float(_2975.y) * floor(float(uint(cbSceneParam._m0[85u].y * _915) / _2976))) + floor(float(uint(cbSceneParam._m0[85u].x * _914) / _2976)));
        float _2997 = (log2(_2068 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2998 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
        uint _3001 = uint(isnan(14.0) ? _2998 : (isnan(_2998) ? 14.0 : min(_2998, 14.0)));
        uvec4 _3006 = texelFetch(g_lightClusterGridBuffer, int(((_3001 << 2u) + (_2987 << 6u)) >> 2u));
        uint _3007 = _3006.x;
        uint _3008 = _2975.z;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        float _3097;
        if (((((1u << ((_3008 >> 4u) & 15u)) + 4294967295u) & _3007) == 0u) || ((_3008 & 240u) == 0u))
        {
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
            _3097 = 0.0;
        }
        else
        {
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3098;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            uint _3238 = 0u;
            uint _3247;
            bool _3248;
            for (;;)
            {
                _3247 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3238 << 2u)) >> 2u)).x;
                _3248 = _3247 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3248)
                {
                    frontier_phi_66_pred = _3237;
                    frontier_phi_66_pred_1 = _3236;
                    frontier_phi_66_pred_2 = _3235;
                    frontier_phi_66_pred_3 = _3234;
                    frontier_phi_66_pred_4 = _3233;
                    frontier_phi_66_pred_5 = _3232;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3232;
                    _3357 = _3233;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3247;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3238 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2066;
                        float _3423 = _3382.y - _2067;
                        float _3424 = _3382.z - _2068;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_933, _936, _939), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4832 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2066;
                        float _3458 = (-0.0) - _2067;
                        float _3459 = (-0.0) - _2068;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3473 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3474 = 1.0 - _1008;
                        float _3481 = sqrt(1.0 - ((1.0 - (_3474 * _3474)) * (1.0 - (_3473 * _3473))));
                        float _3482 = _3481 * _3481;
                        float _3483 = _3482 * _3482;
                        float _3484 = _3464 + _3429;
                        float _3485 = _3465 + _3430;
                        float _3486 = _3466 + _3431;
                        float _3490 = inversesqrt(dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486)));
                        float _3494 = dot(vec3(_933, _936, _939), vec3(_3464, _3465, _3466));
                        float _4848 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                        float _3497 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                        float _3498 = dot(vec3(_933, _936, _939), vec3(_3490 * _3484, _3490 * _3485, _3490 * _3486));
                        float _4859 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                        float _3501 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3505 = ((_3501 * _3501) * (_3483 + (-1.0))) + 1.0;
                        float _3506 = _3442 * _3482;
                        float _3507 = _3506 * _3506;
                        float _3510 = ((1.0 - _3507) * _3432) + _3507;
                        float _4870 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                        float _3511 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3512 = 1.0 - _3482;
                        float _3522 = (0.5 / (((_3511 * ((_3497 * _3512) + _3482)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3482) * _3497))) * _3511;
                        float _4881 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                        float _3533 = (((_3483 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3505 * _3505) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3291 = (_3453 * _3401.x) + _3359;
                        _3292 = (_3453 * _3401.y) + _3360;
                        _3293 = (_3453 * _3401.z) + _3361;
                        _3288 = (_3533 * _3418.x) + _3356;
                        _3289 = (_3533 * _3418.y) + _3357;
                        _3290 = (_3533 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3288;
                            _3357 = _3289;
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_66_pred = _3293;
                    frontier_phi_66_pred_1 = _3292;
                    frontier_phi_66_pred_2 = _3291;
                    frontier_phi_66_pred_3 = _3290;
                    frontier_phi_66_pred_4 = _3289;
                    frontier_phi_66_pred_5 = _3288;
                }
                _3098 = frontier_phi_66_pred;
                _3096 = frontier_phi_66_pred_1;
                _3094 = frontier_phi_66_pred_2;
                _3092 = frontier_phi_66_pred_3;
                _3090 = frontier_phi_66_pred_4;
                _3088 = frontier_phi_66_pred_5;
                uint _3239 = _3238 + 1u;
                if (_3239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3232 = _3088;
                    _3233 = _3090;
                    _3234 = _3092;
                    _3235 = _3094;
                    _3236 = _3096;
                    _3237 = _3098;
                    _3238 = _3239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
            _3097 = _3098;
        }
        uvec4 _3101 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3102 = _3101.z;
        uint _3104 = (_3102 >> 8u) & 15u;
        float _3200;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        if (((4294967295u << _3104) & _3007) == 0u)
        {
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
            _3206 = _3093;
            _3208 = _3095;
            _3210 = _3097;
        }
        else
        {
            float _3225 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
            float _3226 = _3225 * _2066;
            float _3227 = _3225 * _2067;
            float _3228 = _3225 * _2068;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3104 < ((_3102 >> 12u) & 15u))
            {
                float _3201;
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3339 = _3087;
                float _3340 = _3089;
                float _3341 = _3091;
                float _3342 = _3093;
                float _3343 = _3095;
                float _3344 = _3097;
                uint _3345 = _3104;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_3001 << 5u) + (_2987 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3355)
                    {
                        frontier_phi_72_pred = _3344;
                        frontier_phi_72_pred_1 = _3343;
                        frontier_phi_72_pred_2 = _3342;
                        frontier_phi_72_pred_3 = _3341;
                        frontier_phi_72_pred_4 = _3340;
                        frontier_phi_72_pred_5 = _3339;
                    }
                    else
                    {
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3551 = _3339;
                        float _3552 = _3340;
                        float _3553 = _3341;
                        float _3554 = _3342;
                        float _3555 = _3343;
                        float _3556 = _3344;
                        uint _3557 = _3354;
                        uint _3558;
                        vec4 _3583;
                        float _3584;
                        vec4 _3599;
                        vec3 _3611;
                        vec4 _3626;
                        vec4 _3642;
                        float _3688;
                        bool _3689;
                        for (;;)
                        {
                            uint _3568 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3557));
                            _3558 = (_3557 + 4294967295u) & _3557;
                            uint _3570 = _3568 * 40u;
                            _3583 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3570)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3570 + 3u)).x));
                            _3584 = _3583.w;
                            uint _3586 = (_3568 * 40u) + 4u;
                            _3599 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3586)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3586 + 3u)).x));
                            uint _3601 = (_3568 * 40u) + 8u;
                            _3611 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3601)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3601 + 2u)).x));
                            uint _3613 = (_3568 * 40u) + 16u;
                            _3626 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3613)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3613 + 3u)).x));
                            uint _3629 = (_3568 * 40u) + 20u;
                            _3642 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 3u)).x));
                            uint _3644 = (_3568 * 40u) + 24u;
                            vec4 _3657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3644 + 3u)).x));
                            uint _3663 = (_3568 * 40u) + 28u;
                            vec4 _3676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3663 + 3u)).x));
                            _3688 = fma(_2068, _3676.z, fma(_2067, _3676.y, _3676.x * _2066)) + _3676.w;
                            _3689 = !((fma(_2068, _3657.z, fma(_2067, _3657.y, _3657.x * _2066)) + _3657.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3689)
                            {
                                float _3716 = _3583.x - _2066;
                                float _3717 = _3583.y - _2067;
                                float _3718 = _3583.z - _2068;
                                float _3719 = dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718));
                                float _3722 = inversesqrt(_3719);
                                float _3723 = _3722 * _3716;
                                float _3724 = _3722 * _3717;
                                float _3725 = _3722 * _3718;
                                float _3729 = 1.0 - (_3719 / (_3584 * _3584));
                                float _4892 = isnan(0.0) ? _3729 : (isnan(_3729) ? 0.0 : max(_3729, 0.0));
                                float _3730 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3734 = sqrt(_3719) * _3599.w;
                                float _3736 = 1.39999997615814208984375 / (_3734 + 1.39999997615814208984375);
                                float _3737 = _3736 * _3736;
                                float _3740 = ((1.0 - _3737) * dot(vec3(_3723, _3724, _3725), vec3(_933, _936, _939))) + _3737;
                                float _3743 = _3734 * _3734;
                                float _3747 = (fma(_2068, _3626.z, fma(_2067, _3626.y, _3626.x * _2066)) + _3626.w) / _3688;
                                float _3748 = (fma(_2068, _3642.z, fma(_2067, _3642.y, _3642.x * _2066)) + _3642.w) / _3688;
                                float _3752 = 1.0 - dot(vec2(_3747, _3748), vec2(_3747, _3748));
                                float _4908 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0));
                                float _3754 = _3753 * (((isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0))) * _3730) / ((_3743 * 0.699999988079071044921875) + 1.0));
                                float _3766 = exp2(log2(1.0 / ((_3743 * 3.5) + 5.0)) * 0.25);
                                float _3767 = 1.0 - _1008;
                                float _3774 = sqrt(1.0 - ((1.0 - (_3767 * _3767)) * (1.0 - (_3766 * _3766))));
                                float _3775 = _3774 * _3774;
                                float _3776 = _3775 * _3775;
                                float _3777 = _3723 - _3226;
                                float _3778 = _3724 - _3227;
                                float _3779 = _3725 - _3228;
                                float _3783 = inversesqrt(dot(vec3(_3777, _3778, _3779), vec3(_3777, _3778, _3779)));
                                float _3787 = dot(vec3(_933, _936, _939), vec3((-0.0) - _3226, (-0.0) - _3227, (-0.0) - _3228));
                                float _4919 = isnan(0.0) ? _3787 : (isnan(_3787) ? 0.0 : max(_3787, 0.0));
                                float _3790 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3791 = dot(vec3(_933, _936, _939), vec3(_3783 * _3777, _3783 * _3778, _3783 * _3779));
                                float _4930 = isnan(0.0) ? _3791 : (isnan(_3791) ? 0.0 : max(_3791, 0.0));
                                float _3794 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3798 = ((_3794 * _3794) * (_3776 + (-1.0))) + 1.0;
                                float _3799 = _3736 * _3775;
                                float _3800 = _3799 * _3799;
                                float _3806 = ((1.0 - _3800) * dot(vec3(_933, _936, _939), vec3(_3723, _3724, _3725))) + _3800;
                                float _4941 = isnan(0.0) ? _3806 : (isnan(_3806) ? 0.0 : max(_3806, 0.0));
                                float _3807 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3808 = 1.0 - _3775;
                                float _3818 = (0.5 / (((_3807 * ((_3790 * _3808) + _3775)) + 9.9999999392252902907785028219223e-09) + (((_3807 * _3808) + _3775) * _3790))) * _3807;
                                float _4952 = isnan(0.0) ? _3818 : (isnan(_3818) ? 0.0 : max(_3818, 0.0));
                                float _3828 = (_3753 * _3730) * (((_3776 * 3.1415927410125732421875) * (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) / ((_3798 * _3798) * ((_3743 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3754 * _3599.y;
                                frontier_phi_78_pred_1 = _3754 * _3599.x;
                                frontier_phi_78_pred_2 = _3828 * _3611.z;
                                frontier_phi_78_pred_3 = _3828 * _3611.y;
                                frontier_phi_78_pred_4 = _3828 * _3611.x;
                                frontier_phi_78_pred_5 = _3754 * _3599.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3836 = frontier_phi_78_pred;
                            _3835 = frontier_phi_78_pred_1;
                            _3834 = frontier_phi_78_pred_2;
                            _3833 = frontier_phi_78_pred_3;
                            _3832 = frontier_phi_78_pred_4;
                            _3837 = frontier_phi_78_pred_5;
                            _3541 = _3835 + _3554;
                            _3542 = _3836 + _3555;
                            _3543 = _3837 + _3556;
                            _3538 = _3832 + _3551;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            if (_3558 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3558;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3543;
                        frontier_phi_72_pred_1 = _3542;
                        frontier_phi_72_pred_2 = _3541;
                        frontier_phi_72_pred_3 = _3540;
                        frontier_phi_72_pred_4 = _3539;
                        frontier_phi_72_pred_5 = _3538;
                    }
                    _3211 = frontier_phi_72_pred;
                    _3209 = frontier_phi_72_pred_1;
                    _3207 = frontier_phi_72_pred_2;
                    _3205 = frontier_phi_72_pred_3;
                    _3203 = frontier_phi_72_pred_4;
                    _3201 = frontier_phi_72_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3201;
                        _3340 = _3203;
                        _3341 = _3205;
                        _3342 = _3207;
                        _3343 = _3209;
                        _3344 = _3211;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3211;
                frontier_phi_60_61_ladder_1 = _3209;
                frontier_phi_60_61_ladder_2 = _3205;
                frontier_phi_60_61_ladder_3 = _3203;
                frontier_phi_60_61_ladder_4 = _3201;
                frontier_phi_60_61_ladder_5 = _3207;
            }
            else
            {
                frontier_phi_60_61_ladder = _3097;
                frontier_phi_60_61_ladder_1 = _3095;
                frontier_phi_60_61_ladder_2 = _3091;
                frontier_phi_60_61_ladder_3 = _3089;
                frontier_phi_60_61_ladder_4 = _3087;
                frontier_phi_60_61_ladder_5 = _3093;
            }
            _3200 = frontier_phi_60_61_ladder_4;
            _3202 = frontier_phi_60_61_ladder_3;
            _3204 = frontier_phi_60_61_ladder_2;
            _3206 = frontier_phi_60_61_ladder_5;
            _3208 = frontier_phi_60_61_ladder_1;
            _3210 = frontier_phi_60_61_ladder;
        }
        float _3215 = isnan(1.0) ? _992 : (isnan(_992) ? 1.0 : min(_992, 1.0));
        _3020 = (_3215 * _3206) + _2532;
        _3022 = (_3215 * _3208) + _2534;
        _3024 = (_3215 * _3210) + _2536;
        _3026 = ((_3200 * _976) * _3215) + _2870;
        _3028 = ((_3202 * _978) * _3215) + _2872;
        _3030 = ((_3204 * _979) * _3215) + _2874;
    }
    else
    {
        _3020 = _2532;
        _3022 = _2534;
        _3024 = _2536;
        _3026 = _2870;
        _3028 = _2872;
        _3030 = _2874;
    }
    float _4968 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _4979 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _4990 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    uint _3050 = _259 + 6u;
    float _3058 = _914 / cbSceneParam._m0[86u].x;
    float _3059 = _915 / cbSceneParam._m0[86u].y;
    vec4 _3073 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, (log2((isnan(cbSceneParam._m0[77u].w) ? _849 : (isnan(_849) ? cbSceneParam._m0[77u].w : min(_849, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3075 = _3073.x;
    float _3076 = _3073.y;
    float _3077 = _3073.z;
    float _3078 = _3073.w;
    float _3150;
    float _3152;
    float _3154;
    float _3156;
    if (_849 > cbSceneParam._m0[78u].w)
    {
        float _3112 = isnan(_849) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _849 : min(cbSceneParam._m0[80u].w, _849));
        float _3113 = _3112 / _849;
        float _3124 = _3113 * _899;
        float _3125 = _900 * _3113;
        float _3126 = (-0.0) - _3125;
        float _3128 = _3113 * _901;
        float _3130 = (cbSceneParam._m0[77u].w * _3126) / _3112;
        float _3131 = _3130 + cbSceneParam._m0[79u].w;
        float _3132 = cbSceneParam._m0[79u].w - _3125;
        float _3138 = sqrt(((_3124 * _3124) + (_3125 * _3125)) + (_3128 * _3128));
        float _3141 = (1.0 - (cbSceneParam._m0[77u].w / _3112)) * _3138;
        float _3146 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3148 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3301;
        if (abs((_3126 - _3130) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3301 = ((((_3131 > 0.0) ? exp2(_3146 * _3131) : (2.0 - exp2(_3148 * _3131))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3141;
        }
        else
        {
            float _3261 = 1.0 / cbSceneParam._m0[80u].x;
            float _3262 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : max(_3131, _3132));
            float _3263 = isnan(_3132) ? _3131 : (isnan(_3131) ? _3132 : min(_3131, _3132));
            float _3272 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : min(_3262, 0.0));
            float _3273 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : min(_3263, 0.0));
            _3301 = ((abs(_3138 / _3126) * cbSceneParam._m0[80u].y) * ((((_3272 - _3273) * 2.0) - ((exp2(_3146 * (isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0)))) - exp2(_3146 * (isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))))) * _3261)) - ((exp2(_3148 * _3272) - exp2(_3148 * _3273)) * _3261))) + (_3141 * cbSceneParam._m0[80u].z);
        }
        vec4 _3303 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3058, _3059, 1.0), 0.0);
        float _3312 = exp2((_3301 * (-1.44269502162933349609375)) * (1.0 - _3303.w));
        float _3313 = log2(_3312);
        float _3329 = log2(_3078);
        _3150 = (exp2(_3329 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].x)) * _3303.x) / cbSceneParam._m0[78u].x)) + _3075;
        _3152 = (exp2(_3329 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].y)) * _3303.y) / cbSceneParam._m0[78u].y)) + _3076;
        _3154 = (exp2(_3329 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3313 * cbSceneParam._m0[78u].z)) * _3303.z) / cbSceneParam._m0[78u].z)) + _3077;
        _3156 = _3312 * _3078;
    }
    else
    {
        _3150 = _3075;
        _3152 = _3076;
        _3154 = _3077;
        _3156 = _3078;
    }
    float _3168 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3169 = _3168 == 3.0;
    float _3170 = log2(_3156);
    float _3177 = exp2(_3170 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0))) * (_3020 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _992))) + ((_3026 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3178 = exp2(_3170 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_3022 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _992))) + ((_3028 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3179 = exp2(_3170 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_3024 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _992))) + ((_3030 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1800)) * cbPerFrame._m0[3u].x));
    float _3188 = (_3168 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3188 * (_3169 ? _3177 : (_3177 + (cbSceneParam._m0[72u].w * _3150)));
    SV_Target.y = _3188 * (_3169 ? _3178 : (_3178 + (cbSceneParam._m0[72u].w * _3152)));
    SV_Target.z = _3188 * (_3169 ? _3179 : (_3179 + (cbSceneParam._m0[72u].w * _3154)));
    SV_Target.w = cbInstanceData._m0[_3050].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3050].w;
}


