#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _3934;
float _3935;
float _3936;
float _3937;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[23u].w) + _427) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3946 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _452 = (_445 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _453 = (_445 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _454 = (_445 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[23u].w) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3957 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _531 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452);
    float _534 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453);
    float _537 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454);
    vec4 _556 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _288) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _289) + cbTextureTilingScale._m0[14u].w));
    vec4 _576 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _593 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _595 = _593.x;
    float _596 = _593.y;
    float _597 = _593.z;
    float _604 = ((_576.x - _595) * _445) + _595;
    float _605 = ((_576.y - _596) * _445) + _596;
    float _606 = ((_576.z - _597) * _445) + _597;
    vec4 _618 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _631 = ((_618.z - _606) * _518) + _606;
    float _634 = ((((_618.x - _604) * _518) + _604) * 2.0) + (-1.0);
    float _636 = ((((_618.y - _605) * _518) + _605) * 2.0) + (-1.0);
    float _637 = dot(vec2(_634, _636), vec2(_634, _636));
    float _3968 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _642 = sqrt(1.0 - (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _681 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _683 = _681.x;
    float _684 = 1.0 - _683;
    float _693 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _696 = ((isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : min(_693, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _705 = (_696 - ((((((_683 - _684) * cbMtdParam._m0[24u].z) + _684) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _696))) * (cbMtdParam._m0[21u].w + 1.0);
    float _3989 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _706 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
    float _713 = (_706 * ((_556.x * cbMtdParam._m0[18u].x) - _531)) + _531;
    float _714 = (_706 * ((_556.y * cbMtdParam._m0[18u].y) - _534)) + _534;
    float _715 = (_706 * ((_556.z * cbMtdParam._m0[18u].z) - _537)) + _537;
    vec4 _727 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _729 = _727.x;
    float _730 = 1.0 - _729;
    float _755 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_729 - _730) * cbMtdParam._m0[24u].w) + _730) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4000 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _756 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
    float _764 = ((((cbMtdParam._m0[10u].x - _713) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _756) + _713;
    float _765 = ((((cbMtdParam._m0[10u].y - _714) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _756) + _714;
    float _766 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _715)) * _756) + _715;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _794 = _792.x;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _794) * _445) + _794;
    float _828 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _811) * _518) + _811;
    float _832 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _828) * cbMtdParam._m0[19u].z) + _828;
    float _834 = _832 - (_832 * _706);
    float _836 = _834 - (_834 * _756);
    float _840 = (cbMtdParam._m0[19u].w * (_656.z - _631)) + _631;
    vec4 _854 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _861 = (_854.x * 2.0) + (-1.0);
    float _862 = (_854.y * 2.0) + (-1.0);
    float _863 = dot(vec2(_861, _862), vec2(_861, _862));
    float _4011 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _871 = (_706 * (_854.z - _840)) + _840;
    float _874 = ((cbMtdParam._m0[23u].x - _871) * _756) + _871;
    vec4 _893 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _899 = (_893.x * 2.0) + (-1.0);
    float _900 = (_893.y * 2.0) + (-1.0);
    float _901 = dot(vec2(_899, _900), vec2(_899, _900));
    float _4022 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _909 = (((_656.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _634;
    float _910 = (((_656.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _636;
    float _922 = (((_861 - _909) + (cbMtdParam._m0[21u].x * _909)) * _706) + _909;
    float _923 = (((_862 - _910) + (cbMtdParam._m0[21u].x * _910)) * _706) + _910;
    float _924 = (_706 * (sqrt(1.0 - (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) - _642)) + _642;
    float _935 = (((_899 - _922) + (_922 * cbMtdParam._m0[22u].z)) * _756) + _922;
    float _936 = (((_900 - _923) + (_923 * cbMtdParam._m0[22u].z)) * _756) + _923;
    float _937 = ((sqrt(1.0 - (isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0)))) - _924) * _756) + _924;
    float _939 = cbMtdParam._m0[22u].x + _656.w;
    float _942 = fma(_937, _256 * NORMAL.x, fma(_936, _263 * TANGENT.x, (_249 * _241) * _935));
    float _945 = fma(_937, _256 * NORMAL.y, fma(_936, _263 * TANGENT.y, (_249 * _242) * _935));
    float _948 = fma(_937, _256 * NORMAL.z, fma(_936, _263 * TANGENT.z, (_249 * _243) * _935));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4033 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _956 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
    float _4044 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4055 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4066 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4077 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4088 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _961 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4099 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4110 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) - _1220)) + _1220) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1074 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1077 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1090 = _269 + 9u;
    uint _1091 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _1097 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) * cbInstanceData._m0[_1091].x;
    float _1098 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) * cbInstanceData._m0[_1091].y;
    float _1099 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) * cbInstanceData._m0[_1091].z;
    float _4121 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _4132 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _1103 = 1.0 - _961;
    float _1104 = _1100 * _1103;
    float _1105 = _1101 * _1103;
    float _1106 = _1102 * _1103;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _961;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _961;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _961;
    float _1114 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = ((isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _953) - _1032;
    float _1139 = (_1134 * _954) - _1033;
    float _1140 = (_1134 * _955) - _1034;
    float _1144 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4154 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_956);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1146;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1260 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1264 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1289 = _1194 + _953;
        float _1290 = _1198 + _954;
        float _1291 = _1202 + _955;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_953, _954, _955), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4180 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4191 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4202 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_953, _954, _955), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4213 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4224 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4235 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_953, _954, _955), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4246 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4257 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4268 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1573 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1577 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1581 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1604 = _1194 + _953;
        float _1605 = _1198 + _954;
        float _1606 = _1202 + _955;
        float _1616 = fma(_1606, cbModelParam._m0[30u].z, fma(_1605, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1604)) - _1573;
        float _1617 = fma(_1606, cbModelParam._m0[31u].z, fma(_1605, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1604)) - _1577;
        float _1618 = fma(_1606, cbModelParam._m0[32u].z, fma(_1605, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1604)) - _1581;
        float _1622 = inversesqrt(dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618)));
        float _1635 = ((_1622 * _1616) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1573 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1622 * _1617) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1577 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1622 * _1618) / cbModelParam._m0[35u].z) + ((((((_1581 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1653 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        vec4 _1660 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1635, _1636, _1637), 0.0);
        float _1672 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1639.x + (-0.5));
        float _1674 = _1672 * (_1639.y + (-0.5));
        float _1675 = _1672 * (_1639.z + (-0.5));
        float _1682 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1646.x + (-0.5));
        float _1684 = _1682 * (_1646.y + (-0.5));
        float _1685 = _1682 * (_1646.z + (-0.5));
        float _1692 = exp2((_1653.w + (-0.5)) * 20.0) * 2.0;
        float _1693 = _1692 * (_1653.x + (-0.5));
        float _1694 = _1692 * (_1653.y + (-0.5));
        float _1695 = _1692 * (_1653.z + (-0.5));
        float _1702 = exp2((_1660.w + (-0.5)) * 20.0) * 2.0;
        float _1703 = _1702 * (_1660.x + (-0.5));
        float _1704 = _1702 * (_1660.y + (-0.5));
        float _1705 = _1702 * (_1660.z + (-0.5));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = _1673 * 0.5;
        float _1710 = _1683 * 0.5;
        float _1711 = _1693 * 0.5;
        float _1712 = dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711));
        float _1717 = (_1712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1712);
        float _1725 = (dot(vec3(_953, _954, _955), vec3(_1717 * _1709, _1717 * _1710, _1717 * _1711)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1734 = sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1735 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1736 = _1735 * 2.0;
        float _1740 = (1.0 - _1735) / (_1735 + 1.0);
        float _4331 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1741 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1750 = ((((1.0 - _1741) * (_1736 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1736 + 1.0))) + _1741) * _1706;
        float _1751 = _1674 * 0.5;
        float _1752 = _1684 * 0.5;
        float _1753 = _1694 * 0.5;
        float _1754 = dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753));
        float _1759 = (_1754 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1754);
        float _1767 = (dot(vec3(_953, _954, _955), vec3(_1759 * _1751, _1759 * _1752, _1759 * _1753)) + 1.0) * 0.5;
        float _4342 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1776 = sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4353 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
        float _1777 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
        float _1778 = _1777 * 2.0;
        float _1782 = (1.0 - _1777) / (_1777 + 1.0);
        float _4364 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1783 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _1792 = ((((1.0 - _1783) * (_1778 + 2.0)) * exp2(log2(isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_1778 + 1.0))) + _1783) * _1707;
        float _1793 = _1675 * 0.5;
        float _1794 = _1685 * 0.5;
        float _1795 = _1695 * 0.5;
        float _1796 = dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795));
        float _1801 = (_1796 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1796);
        float _1809 = (dot(vec3(_953, _954, _955), vec3(_1801 * _1793, _1801 * _1794, _1801 * _1795)) + 1.0) * 0.5;
        float _4375 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1818 = sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4386 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _1820 = _1819 * 2.0;
        float _1824 = (1.0 - _1819) / (_1819 + 1.0);
        float _4397 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1825 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _1834 = ((((1.0 - _1825) * (_1820 + 2.0)) * exp2(log2(isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0))) * (_1820 + 1.0))) + _1825) * _1708;
        _1842 = _1675;
        _1843 = _1674;
        _1844 = _1673;
        _1845 = _1685;
        _1846 = _1684;
        _1847 = _1683;
        _1848 = _1695;
        _1849 = _1694;
        _1850 = _1693;
        _1851 = _1708;
        _1852 = _1707;
        _1853 = _1706;
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0)));
    }
    else
    {
        _1842 = _1532;
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = _1532;
        _1854 = 0.0;
        _1855 = 0.0;
        _1856 = 0.0;
    }
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1544)) + _1544;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1545)) + _1545;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1546)) + _1546;
    float _1889 = fma(_1868, cbSceneParam._m0[89u].z, fma(_1867, cbSceneParam._m0[89u].y, _1866 * cbSceneParam._m0[89u].x));
    float _1892 = fma(_1868, cbSceneParam._m0[90u].z, fma(_1867, cbSceneParam._m0[90u].y, _1866 * cbSceneParam._m0[90u].x));
    float _1895 = fma(_1868, cbSceneParam._m0[91u].z, fma(_1867, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1866));
    float _1910 = _1138 * 0.5;
    float _1911 = _1139 * 0.5;
    float _1912 = _1140 * 0.5;
    float _1913 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1916 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1919 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1953;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1926 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1930 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1934 = dot(vec4(_1910, _1911, _1912, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1941 = dot(vec4(cbModelParam._m0[39u]), vec4(_1910, _1911, _1912, 1.0));
        _1953 = dot(vec3(isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)), isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0)), isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1953 = 1.0;
    }
    float _1964;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1955 = dot(vec4(cbModelParam._m0[40u]), vec4(_1910, _1911, _1912, 1.0));
        _1964 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1955) ? 0.0 : (isnan(0.0) ? _1955 : max(0.0, _1955))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1964 = 1.0;
    }
    float _1968 = (_1964 * cbModelParam._m0[1u].x) + (_1953 * (1.0 - cbModelParam._m0[1u].x));
    float _1978 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1979 = isnan(_1978) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1978 : min(cbModelParam._m0[25u].z, _1978));
    float _2059;
    float _2061;
    float _2063;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2026 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2030 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2034 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2037 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2040 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2043 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2071;
        if (_2037 > 0.0)
        {
            _2071 = abs((1.0 - _2026) / _2037);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2037 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2026 + 1.0) / _2037);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2071 = frontier_phi_17_15_ladder;
        }
        float _2294;
        if (_2040 > 0.0)
        {
            _2294 = abs((1.0 - _2030) / _2040);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2040 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2030 + 1.0) / _2040);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2294 = frontier_phi_26_22_ladder;
        }
        float _2551;
        if (_2043 > 0.0)
        {
            _2551 = abs((1.0 - _2034) / _2043);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2043 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2034 + 1.0) / _2043);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2551 = frontier_phi_38_33_ladder;
        }
        float _2553 = isnan(_2294) ? _2071 : (isnan(_2071) ? _2294 : min(_2071, _2294));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _2037) + _2026;
        float _2559 = (_2554 * _2040) + _2030;
        float _2560 = (_2554 * _2043) + _2034;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2563 = (-1.0) - _2561;
        float _2565 = _2561 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2560 > _2565) || ((_2560 < _2563) || ((_2559 > _2565) || ((_2559 < _2563) || ((_2558 < _2563) || (_2558 > _2565))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2560, cbModelParam._m0[9u].z, fma(_2559, cbModelParam._m0[9u].y, _2558 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2560, cbModelParam._m0[10u].z, fma(_2559, cbModelParam._m0[10u].y, _2558 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2560, cbModelParam._m0[11u].z, fma(_2559, cbModelParam._m0[11u].y, _2558 * cbModelParam._m0[11u].x))), _1979);
            frontier_phi_16_38_ladder = _2688.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2688.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2688.x * cbModelParam._m0[1u].y;
        }
        _2059 = frontier_phi_16_38_ladder_2;
        _2061 = frontier_phi_16_38_ladder_1;
        _2063 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1979);
        _2059 = _2047.x * cbModelParam._m0[1u].y;
        _2061 = _2047.y * cbModelParam._m0[1u].y;
        _2063 = _2047.z * cbModelParam._m0[1u].y;
    }
    float _2067 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2068 = isnan(_2067) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2067 : min(cbModelParam._m0[25u].w, _2067));
    float _2157;
    float _2159;
    float _2161;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2121 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2125 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2129 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2132 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2135 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2138 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2299;
        if (_2132 > 0.0)
        {
            _2299 = abs((1.0 - _2121) / _2132);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2132 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2121 + 1.0) / _2132);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2299 = frontier_phi_28_24_ladder;
        }
        float _2578;
        if (_2135 > 0.0)
        {
            _2578 = abs((1.0 - _2125) / _2135);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2135 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2125 + 1.0) / _2135);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2578 = frontier_phi_40_35_ladder;
        }
        float _2791;
        if (_2138 > 0.0)
        {
            _2791 = abs((1.0 - _2129) / _2138);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2138 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2129 + 1.0) / _2138);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2791 = frontier_phi_49_46_ladder;
        }
        float _2793 = isnan(_2578) ? _2299 : (isnan(_2299) ? _2578 : min(_2299, _2578));
        float _2794 = isnan(_2791) ? _2793 : (isnan(_2793) ? _2791 : min(_2793, _2791));
        float _2798 = (_2794 * _2132) + _2121;
        float _2799 = (_2794 * _2135) + _2125;
        float _2800 = (_2794 * _2138) + _2129;
        float _2801 = _2794 * 9.9999997473787516355514526367188e-05;
        float _2802 = (-1.0) - _2801;
        float _2804 = _2801 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2800 > _2804) || ((_2800 < _2802) || ((_2799 > _2804) || ((_2799 < _2802) || ((_2798 < _2802) || (_2798 > _2804))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2999 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2800, cbModelParam._m0[17u].z, fma(_2799, cbModelParam._m0[17u].y, _2798 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2800, cbModelParam._m0[18u].z, fma(_2799, cbModelParam._m0[18u].y, _2798 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2800, cbModelParam._m0[19u].z, fma(_2799, cbModelParam._m0[19u].y, _2798 * cbModelParam._m0[19u].x))), _2068);
            frontier_phi_25_49_ladder = _2999.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2999.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2999.x * cbModelParam._m0[1u].z;
        }
        _2157 = frontier_phi_25_49_ladder_2;
        _2159 = frontier_phi_25_49_ladder_1;
        _2161 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2141 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2068);
        _2157 = _2141.x * cbModelParam._m0[1u].z;
        _2159 = _2141.y * cbModelParam._m0[1u].z;
        _2161 = _2141.z * cbModelParam._m0[1u].z;
    }
    float _2174 = (((_1165 * _1114) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2157 - _2059)) + _2059);
    float _2176 = (((_1165 * _1116) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2159 - _2061)) + _2061);
    float _2178 = (((_1165 * _1117) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2161 - _2063)) + _2063);
    float _2181 = fma(_2178, cbSceneParam._m0[89u].z, fma(_2176, cbSceneParam._m0[89u].y, _2174 * cbSceneParam._m0[89u].x));
    float _2184 = fma(_2178, cbSceneParam._m0[90u].z, fma(_2176, cbSceneParam._m0[90u].y, _2174 * cbSceneParam._m0[90u].x));
    float _2187 = fma(_2178, cbSceneParam._m0[91u].z, fma(_2176, cbSceneParam._m0[91u].y, _2174 * cbSceneParam._m0[91u].x));
    vec4 _2195 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1052, _1053));
    float _2197 = _2195.w;
    float _2209 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2197);
    float _2210 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2197);
    float _2211 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2197);
    uvec4 _2215 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2217 = _2215.x * 14u;
    uint _2218 = _2217 + 13u;
    float _2225 = _1130 + (-1.0);
    float _2230 = (cbLight._m0[_2218].x * _2225) + 1.0;
    float _2231 = (cbLight._m0[_2218].y * _2225) + 1.0;
    float _2232 = (cbLight._m0[_2218].z * _2225) + 1.0;
    float _2233 = (cbLight._m0[_2218].w * _2225) + 1.0;
    uint _2234 = _2217 + 5u;
    float _2240 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
    uint _2244 = _2217 + 4u;
    float _2253 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2257 = _2217 | 1u;
    float _2268 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_953, _954, _955));
    float _2271 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_953, _954, _955));
    float _4533 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _4544 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2276 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2278 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2285 = ((cbLight._m0[_2234].x * _2240) * _2278) + (((cbLight._m0[_2244].x * _2209) * _2253) * _2276);
    float _2286 = ((_2240 * cbLight._m0[_2234].y) * _2278) + (((cbLight._m0[_2244].y * _2210) * _2253) * _2276);
    float _2287 = ((_2240 * cbLight._m0[_2234].z) * _2278) + (((cbLight._m0[_2244].z * _2211) * _2253) * _2276);
    uvec4 _2291 = floatBitsToUint(cbLight._m0[_2217 + 12u]);
    bool _2293 = _2291.x == 0u;
    float _2304;
    float _2306;
    float _2308;
    if (_2293)
    {
        _2304 = _2285;
        _2306 = _2286;
        _2308 = _2287;
    }
    else
    {
        uint _2312 = _2217 + 6u;
        float _2328 = (dot(vec3(cbLight._m0[_2217 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2329 = _2328 * _2328;
        float _4555 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2330 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2331 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2304 = (((cbLight._m0[_2312].x * 0.3183098733425140380859375) * _2330) * _2331) + _2285;
        _2306 = (((cbLight._m0[_2312].y * 0.3183098733425140380859375) * _2330) * _2331) + _2286;
        _2308 = (((cbLight._m0[_2312].z * 0.3183098733425140380859375) * _2330) * _2331) + _2287;
    }
    bool _2311 = _2291.y == 0u;
    float _2349;
    float _2351;
    float _2353;
    if (_2311)
    {
        _2349 = _2304;
        _2351 = _2306;
        _2353 = _2308;
    }
    else
    {
        uint _2522 = _2217 + 7u;
        float _2538 = (dot(vec3(cbLight._m0[_2217 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2539 = _2538 * _2538;
        float _4571 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2540 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2541 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2349 = (((cbLight._m0[_2522].x * 0.3183098733425140380859375) * _2540) * _2541) + _2304;
        _2351 = (((cbLight._m0[_2522].y * 0.3183098733425140380859375) * _2540) * _2541) + _2306;
        _2353 = (((cbLight._m0[_2522].z * 0.3183098733425140380859375) * _2540) * _2541) + _2308;
    }
    uint _2356 = _2217 + 8u;
    float _2369 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2217].w)) * _956) * 0.949999988079071044921875);
    float _2370 = _2369 * _2369;
    float _2371 = cbLight._m0[_2217].x + _1032;
    float _2372 = cbLight._m0[_2217].y + _1033;
    float _2373 = cbLight._m0[_2217].z + _1034;
    float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
    float _2378 = _2377 * _2371;
    float _2379 = _2377 * _2372;
    float _2380 = _2377 * _2373;
    float _2381 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2217].xyz));
    float _4587 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _4598 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2385 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2386 = dot(vec3(_953, _954, _955), vec3(_2378, _2379, _2380));
    float _4609 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2217].xyz), vec3(_2378, _2379, _2380));
    float _4620 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2370 * _2370;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2407 = 0.959999978542327880859375 - _1111;
    float _2409 = 0.959999978542327880859375 - _1112;
    float _2410 = 0.959999978542327880859375 - _1113;
    float _2417 = 1.0 - _2370;
    float _2428 = (0.5 / (((_2385 * ((_2384 * _2417) + _2370)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2417) + _2370) * _2384))) * _2384;
    float _4631 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2430 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    uint _2444 = _2217 + 9u;
    float _2455 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2257].w)) * _956) * 0.949999988079071044921875);
    float _2456 = _2455 * _2455;
    float _2457 = cbLight._m0[_2257].x + _1032;
    float _2458 = cbLight._m0[_2257].y + _1033;
    float _2459 = cbLight._m0[_2257].z + _1034;
    float _2463 = inversesqrt(dot(vec3(_2457, _2458, _2459), vec3(_2457, _2458, _2459)));
    float _2464 = _2463 * _2457;
    float _2465 = _2463 * _2458;
    float _2466 = _2463 * _2459;
    float _2467 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2257].xyz));
    float _4642 = isnan(0.0) ? _2467 : (isnan(_2467) ? 0.0 : max(_2467, 0.0));
    float _2470 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2471 = dot(vec3(_953, _954, _955), vec3(_2464, _2465, _2466));
    float _4653 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2257].xyz), vec3(_2464, _2465, _2466));
    float _4664 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2456 * _2456;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
    float _2497 = 1.0 - _2456;
    float _2507 = (0.5 / (((_2385 * ((_2470 * _2497) + _2456)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2497) + _2456) * _2470))) * _2470;
    float _4675 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2509 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    float _2519 = (((((_2490 * _2407) + _1114) * cbLight._m0[_2444].x) * _2509) * _2240) + ((((cbLight._m0[_2356].x * _2209) * ((_2406 * _2407) + _1114)) * _2430) * _2253);
    float _2520 = (((((_2490 * _2409) + _1116) * cbLight._m0[_2444].y) * _2509) * _2240) + ((((cbLight._m0[_2356].y * _2210) * ((_2406 * _2409) + _1116)) * _2430) * _2253);
    float _2521 = (((((_2490 * _2410) + _1117) * cbLight._m0[_2444].z) * _2509) * _2240) + ((((cbLight._m0[_2356].z * _2211) * ((_2406 * _2410) + _1117)) * _2430) * _2253);
    float _2583;
    float _2585;
    float _2587;
    if (_2293)
    {
        _2583 = _2519;
        _2585 = _2520;
        _2587 = _2521;
    }
    else
    {
        uint _2589 = _2217 + 2u;
        uint _2593 = _2217 + 10u;
        float _2607 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2589].w)) * _956) * 0.949999988079071044921875);
        float _2608 = _2607 * _2607;
        float _2609 = cbLight._m0[_2589].x + _1032;
        float _2610 = cbLight._m0[_2589].y + _1033;
        float _2611 = cbLight._m0[_2589].z + _1034;
        float _2615 = inversesqrt(dot(vec3(_2609, _2610, _2611), vec3(_2609, _2610, _2611)));
        float _2616 = _2615 * _2609;
        float _2617 = _2615 * _2610;
        float _2618 = _2615 * _2611;
        float _2619 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2589].xyz));
        float _4686 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        float _2622 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2623 = dot(vec3(_953, _954, _955), vec3(_2616, _2617, _2618));
        float _4697 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2627 = dot(vec3(cbLight._m0[_2589].xyz), vec3(_2616, _2617, _2618));
        float _4708 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2631 = _2608 * _2608;
        float _2635 = ((_2626 * _2626) * (_2631 + (-1.0))) + 1.0;
        float _2642 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
        float _2649 = 1.0 - _2608;
        float _2659 = (0.5 / (((_2385 * ((_2622 * _2649) + _2608)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2649) + _2608) * _2622))) * _2622;
        float _4719 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2661 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2631 / ((_2635 * _2635) * 3.141590118408203125));
        float _2662 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2583 = (((((_2642 * _2407) + _1114) * cbLight._m0[_2593].x) * _2661) * _2662) + _2519;
        _2585 = (((((_2642 * _2409) + _1116) * cbLight._m0[_2593].y) * _2661) * _2662) + _2520;
        _2587 = (((((_2642 * _2410) + _1117) * cbLight._m0[_2593].z) * _2661) * _2662) + _2521;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2311)
    {
        _2697 = _2583;
        _2699 = _2585;
        _2701 = _2587;
    }
    else
    {
        uint _2708 = _2217 + 3u;
        uint _2712 = _2217 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _956) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _1032;
        float _2729 = cbLight._m0[_2708].y + _1033;
        float _2730 = cbLight._m0[_2708].z + _1034;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2708].xyz));
        float _4735 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2742 = dot(vec3(_953, _954, _955), vec3(_2735, _2736, _2737));
        float _4746 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4757 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
        float _2768 = 1.0 - _2727;
        float _2778 = (0.5 / (((_2385 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2385 * _2768) + _2727) * _2741))) * _2741;
        float _4768 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2780 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2781 = isnan(1.0) ? _2233 : (isnan(_2233) ? 1.0 : min(_2233, 1.0));
        _2697 = (((((_2761 * _2407) + _1114) * cbLight._m0[_2712].x) * _2780) * _2781) + _2583;
        _2699 = (((((_2761 * _2409) + _1116) * cbLight._m0[_2712].y) * _2780) * _2781) + _2585;
        _2701 = (((((_2761 * _2410) + _1117) * cbLight._m0[_2712].z) * _2780) * _2781) + _2587;
    }
    float _2916;
    float _2918;
    float _2920;
    float _2922;
    float _2924;
    float _2926;
    if (_2215.y == 0u)
    {
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2856;
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2856;
        float _2859 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2856;
        uvec4 _2871 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2872 = _2871.x;
        uint _2883 = uint((float(_2871.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _2872))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _2872)));
        float _2893 = (log2(_2859 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2894 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        uint _2897 = uint(isnan(14.0) ? _2894 : (isnan(_2894) ? 14.0 : min(_2894, 14.0)));
        uvec4 _2902 = texelFetch(g_lightClusterGridBuffer, int(((_2897 << 2u) + (_2883 << 6u)) >> 2u));
        uint _2903 = _2902.x;
        uint _2904 = _2871.z;
        float _3004;
        float _3006;
        float _3008;
        float _3010;
        float _3012;
        float _3014;
        if (((((1u << ((_2904 >> 4u) & 15u)) + 4294967295u) & _2903) == 0u) || ((_2904 & 240u) == 0u))
        {
            _3004 = 0.0;
            _3006 = 0.0;
            _3008 = 0.0;
            _3010 = 0.0;
            _3012 = 0.0;
            _3014 = 0.0;
        }
        else
        {
            float _3005;
            float _3007;
            float _3009;
            float _3011;
            float _3013;
            float _3015;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            float _3161 = 0.0;
            float _3162 = 0.0;
            uint _3163 = 0u;
            uint _3172;
            bool _3173;
            for (;;)
            {
                _3172 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3163 << 2u)) >> 2u)).x;
                _3173 = _3172 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3173)
                {
                    frontier_phi_66_pred = _3157;
                    frontier_phi_66_pred_1 = _3162;
                    frontier_phi_66_pred_2 = _3161;
                    frontier_phi_66_pred_3 = _3160;
                    frontier_phi_66_pred_4 = _3159;
                    frontier_phi_66_pred_5 = _3158;
                }
                else
                {
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    float _3307;
                    uint _3308;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3161;
                    _3307 = _3162;
                    _3308 = _3172;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    for (;;)
                    {
                        uint _3312 = uint(findLSB(_3308)) + (_3163 << 5u);
                        uint _3309 = (_3308 + 4294967295u) & _3308;
                        uint _3314 = _3312 * 48u;
                        vec4 _3328 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3314)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3314 + 3u)).x));
                        uint _3334 = (_3312 * 48u) + 4u;
                        vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3334)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3334 + 3u)).x));
                        uint _3353 = (_3312 * 48u) + 8u;
                        vec3 _3364 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3353)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3353 + 2u)).x));
                        float _3368 = _3328.x - _2857;
                        float _3369 = _3328.y - _2858;
                        float _3370 = _3328.z - _2859;
                        float _3371 = dot(vec3(_3368, _3369, _3370), vec3(_3368, _3369, _3370));
                        float _3374 = inversesqrt(_3371);
                        float _3375 = _3374 * _3368;
                        float _3376 = _3374 * _3369;
                        float _3377 = _3374 * _3370;
                        float _3378 = dot(vec3(_1071, _1074, _1077), vec3(_3375, _3376, _3377));
                        float _3383 = 1.0 - (_3371 * _3328.w);
                        float _4794 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                        float _3384 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3385 = sqrt(_3371) * _3347.w;
                        float _3388 = 1.39999997615814208984375 / (_3385 + 1.39999997615814208984375);
                        float _3389 = _3388 * _3388;
                        float _3392 = ((1.0 - _3389) * _3378) + _3389;
                        float _3395 = _3385 * _3385;
                        float _3399 = ((isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0))) * _3384) / ((_3395 * 0.699999988079071044921875) + 1.0);
                        float _3403 = (-0.0) - _2857;
                        float _3404 = (-0.0) - _2858;
                        float _3405 = (-0.0) - _2859;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3410 = _3409 * _3403;
                        float _3411 = _3409 * _3404;
                        float _3412 = _3409 * _3405;
                        float _3420 = exp2(log2(1.0 / ((_3395 * 3.5) + 5.0)) * 0.25);
                        float _3421 = 1.0 - _1146;
                        float _3428 = sqrt(1.0 - ((1.0 - (_3421 * _3421)) * (1.0 - (_3420 * _3420))));
                        float _3429 = _3428 * _3428;
                        float _3430 = _3429 * _3429;
                        float _3431 = _3410 + _3375;
                        float _3432 = _3411 + _3376;
                        float _3433 = _3412 + _3377;
                        float _3437 = inversesqrt(dot(vec3(_3431, _3432, _3433), vec3(_3431, _3432, _3433)));
                        float _3441 = dot(vec3(_1071, _1074, _1077), vec3(_3410, _3411, _3412));
                        float _4810 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3445 = dot(vec3(_1071, _1074, _1077), vec3(_3437 * _3431, _3437 * _3432, _3437 * _3433));
                        float _4821 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3448 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3452 = ((_3448 * _3448) * (_3430 + (-1.0))) + 1.0;
                        float _3453 = _3388 * _3429;
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3378) + _3454;
                        float _4832 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3458 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3459 = 1.0 - _3429;
                        float _3469 = (0.5 / (((_3458 * ((_3444 * _3459) + _3429)) + 9.9999999392252902907785028219223e-09) + (((_3458 * _3459) + _3429) * _3444))) * _3458;
                        float _4843 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3480 = (((_3430 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3452 * _3452) * ((_3395 * 2.1991131305694580078125) + 3.141590118408203125))) * _3384;
                        _3232 = (_3399 * _3347.x) + _3305;
                        _3233 = (_3399 * _3347.y) + _3306;
                        _3234 = (_3399 * _3347.z) + _3307;
                        _3229 = (_3480 * _3364.x) + _3302;
                        _3230 = (_3480 * _3364.y) + _3303;
                        _3231 = (_3480 * _3364.z) + _3304;
                        if (_3309 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3233;
                            _3307 = _3234;
                            _3308 = _3309;
                        }
                    }
                    frontier_phi_66_pred = _3229;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                _3005 = frontier_phi_66_pred;
                _3015 = frontier_phi_66_pred_1;
                _3013 = frontier_phi_66_pred_2;
                _3011 = frontier_phi_66_pred_3;
                _3009 = frontier_phi_66_pred_4;
                _3007 = frontier_phi_66_pred_5;
                uint _3164 = _3163 + 1u;
                if (_3164 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3157 = _3005;
                    _3158 = _3007;
                    _3159 = _3009;
                    _3160 = _3011;
                    _3161 = _3013;
                    _3162 = _3015;
                    _3163 = _3164;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3004 = _3005;
            _3006 = _3007;
            _3008 = _3009;
            _3010 = _3011;
            _3012 = _3013;
            _3014 = _3015;
        }
        uvec4 _3018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3019 = _3018.z;
        uint _3021 = (_3019 >> 8u) & 15u;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        if (((4294967295u << _3021) & _2903) == 0u)
        {
            _3125 = _3004;
            _3127 = _3006;
            _3129 = _3008;
            _3131 = _3010;
            _3133 = _3012;
            _3135 = _3014;
        }
        else
        {
            float _3150 = inversesqrt(dot(vec3(_2857, _2858, _2859), vec3(_2857, _2858, _2859)));
            float _3151 = _3150 * _2857;
            float _3152 = _3150 * _2858;
            float _3153 = _3150 * _2859;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3021 < ((_3019 >> 12u) & 15u))
            {
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3136;
                float _3285 = _3004;
                float _3286 = _3006;
                float _3287 = _3008;
                float _3288 = _3010;
                float _3289 = _3012;
                float _3290 = _3014;
                uint _3291 = _3021;
                uint _3300;
                bool _3301;
                for (;;)
                {
                    _3300 = texelFetch(g_lightClassification, int((((_2897 << 5u) + (_2883 << 9u)) + (_3291 << 2u)) >> 2u)).x;
                    _3301 = _3300 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3301)
                    {
                        frontier_phi_77_pred = _3290;
                        frontier_phi_77_pred_1 = _3289;
                        frontier_phi_77_pred_2 = _3288;
                        frontier_phi_77_pred_3 = _3287;
                        frontier_phi_77_pred_4 = _3286;
                        frontier_phi_77_pred_5 = _3285;
                    }
                    else
                    {
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3499;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        float _3511 = _3289;
                        float _3512 = _3290;
                        uint _3513 = _3300;
                        uint _3514;
                        vec4 _3539;
                        float _3540;
                        vec4 _3555;
                        vec3 _3567;
                        vec4 _3582;
                        vec4 _3597;
                        float _3643;
                        bool _3644;
                        for (;;)
                        {
                            uint _3524 = ((_3291 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3513));
                            _3514 = (_3513 + 4294967295u) & _3513;
                            uint _3526 = _3524 * 40u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            _3540 = _3539.w;
                            uint _3542 = (_3524 * 40u) + 4u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3524 * 40u) + 8u;
                            _3567 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x));
                            uint _3569 = (_3524 * 40u) + 16u;
                            _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            uint _3584 = (_3524 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3524 * 40u) + 24u;
                            vec4 _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            uint _3618 = (_3524 * 40u) + 28u;
                            vec4 _3631 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3618)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3618 + 3u)).x));
                            _3643 = fma(_2859, _3631.z, fma(_2858, _3631.y, _3631.x * _2857)) + _3631.w;
                            _3644 = !((fma(_2859, _3612.z, fma(_2858, _3612.y, _3612.x * _2857)) + _3612.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3644)
                            {
                                float _3671 = _3539.x - _2857;
                                float _3672 = _3539.y - _2858;
                                float _3673 = _3539.z - _2859;
                                float _3674 = dot(vec3(_3671, _3672, _3673), vec3(_3671, _3672, _3673));
                                float _3677 = inversesqrt(_3674);
                                float _3678 = _3677 * _3671;
                                float _3679 = _3677 * _3672;
                                float _3680 = _3677 * _3673;
                                float _3684 = 1.0 - (_3674 / (_3540 * _3540));
                                float _4854 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3689 = sqrt(_3674) * _3555.w;
                                float _3691 = 1.39999997615814208984375 / (_3689 + 1.39999997615814208984375);
                                float _3692 = _3691 * _3691;
                                float _3695 = ((1.0 - _3692) * dot(vec3(_3678, _3679, _3680), vec3(_1071, _1074, _1077))) + _3692;
                                float _3698 = _3689 * _3689;
                                float _3702 = (fma(_2859, _3582.z, fma(_2858, _3582.y, _3582.x * _2857)) + _3582.w) / _3643;
                                float _3703 = (fma(_2859, _3597.z, fma(_2858, _3597.y, _3597.x * _2857)) + _3597.w) / _3643;
                                float _3707 = 1.0 - dot(vec2(_3702, _3703), vec2(_3702, _3703));
                                float _4870 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                                float _3708 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3709 = _3708 * (((isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0))) * _3685) / ((_3698 * 0.699999988079071044921875) + 1.0));
                                float _3721 = exp2(log2(1.0 / ((_3698 * 3.5) + 5.0)) * 0.25);
                                float _3722 = 1.0 - _1146;
                                float _3729 = sqrt(1.0 - ((1.0 - (_3722 * _3722)) * (1.0 - (_3721 * _3721))));
                                float _3730 = _3729 * _3729;
                                float _3731 = _3730 * _3730;
                                float _3732 = _3678 - _3151;
                                float _3733 = _3679 - _3152;
                                float _3734 = _3680 - _3153;
                                float _3738 = inversesqrt(dot(vec3(_3732, _3733, _3734), vec3(_3732, _3733, _3734)));
                                float _3742 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3151, (-0.0) - _3152, (-0.0) - _3153));
                                float _4881 = isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0));
                                float _3745 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3746 = dot(vec3(_1071, _1074, _1077), vec3(_3738 * _3732, _3738 * _3733, _3738 * _3734));
                                float _4892 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3749 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3753 = ((_3749 * _3749) * (_3731 + (-1.0))) + 1.0;
                                float _3754 = _3691 * _3730;
                                float _3755 = _3754 * _3754;
                                float _3761 = ((1.0 - _3755) * dot(vec3(_1071, _1074, _1077), vec3(_3678, _3679, _3680))) + _3755;
                                float _4903 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3763 = 1.0 - _3730;
                                float _3773 = (0.5 / (((_3762 * ((_3745 * _3763) + _3730)) + 9.9999999392252902907785028219223e-09) + (((_3762 * _3763) + _3730) * _3745))) * _3762;
                                float _4914 = isnan(0.0) ? _3773 : (isnan(_3773) ? 0.0 : max(_3773, 0.0));
                                float _3783 = (_3708 * _3685) * (((_3731 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3753 * _3753) * ((_3698 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3709 * _3555.y;
                                frontier_phi_83_pred_1 = _3709 * _3555.x;
                                frontier_phi_83_pred_2 = _3783 * _3567.z;
                                frontier_phi_83_pred_3 = _3783 * _3567.y;
                                frontier_phi_83_pred_4 = _3783 * _3567.x;
                                frontier_phi_83_pred_5 = _3709 * _3555.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3791 = frontier_phi_83_pred;
                            _3790 = frontier_phi_83_pred_1;
                            _3789 = frontier_phi_83_pred_2;
                            _3788 = frontier_phi_83_pred_3;
                            _3787 = frontier_phi_83_pred_4;
                            _3792 = frontier_phi_83_pred_5;
                            _3497 = _3790 + _3510;
                            _3498 = _3791 + _3511;
                            _3499 = _3792 + _3512;
                            _3494 = _3787 + _3507;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            if (_3514 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3499;
                                _3513 = _3514;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3499;
                        frontier_phi_77_pred_1 = _3498;
                        frontier_phi_77_pred_2 = _3497;
                        frontier_phi_77_pred_3 = _3496;
                        frontier_phi_77_pred_4 = _3495;
                        frontier_phi_77_pred_5 = _3494;
                    }
                    _3136 = frontier_phi_77_pred;
                    _3134 = frontier_phi_77_pred_1;
                    _3132 = frontier_phi_77_pred_2;
                    _3130 = frontier_phi_77_pred_3;
                    _3128 = frontier_phi_77_pred_4;
                    _3126 = frontier_phi_77_pred_5;
                    uint _3292 = _3291 + 1u;
                    if (_3292 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3285 = _3126;
                        _3286 = _3128;
                        _3287 = _3130;
                        _3288 = _3132;
                        _3289 = _3134;
                        _3290 = _3136;
                        _3291 = _3292;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3130;
                frontier_phi_58_59_ladder_1 = _3136;
                frontier_phi_58_59_ladder_2 = _3134;
                frontier_phi_58_59_ladder_3 = _3132;
                frontier_phi_58_59_ladder_4 = _3128;
                frontier_phi_58_59_ladder_5 = _3126;
            }
            else
            {
                frontier_phi_58_59_ladder = _3008;
                frontier_phi_58_59_ladder_1 = _3014;
                frontier_phi_58_59_ladder_2 = _3012;
                frontier_phi_58_59_ladder_3 = _3010;
                frontier_phi_58_59_ladder_4 = _3006;
                frontier_phi_58_59_ladder_5 = _3004;
            }
            _3125 = frontier_phi_58_59_ladder_5;
            _3127 = frontier_phi_58_59_ladder_4;
            _3129 = frontier_phi_58_59_ladder;
            _3131 = frontier_phi_58_59_ladder_3;
            _3133 = frontier_phi_58_59_ladder_2;
            _3135 = frontier_phi_58_59_ladder_1;
        }
        float _3140 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _2916 = (_3140 * _3131) + _2349;
        _2918 = (_3140 * _3133) + _2351;
        _2920 = (_3140 * _3135) + _2353;
        _2922 = ((_3125 * _1114) * _3140) + _2697;
        _2924 = ((_3127 * _1116) * _3140) + _2699;
        _2926 = ((_3129 * _1117) * _3140) + _2701;
    }
    else
    {
        _2916 = _2349;
        _2918 = _2351;
        _2920 = _2353;
        _2922 = _2697;
        _2924 = _2699;
        _2926 = _2701;
    }
    float _4930 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _4941 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _4952 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _2943 = ((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_2916 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1130))) + ((_2922 + ((isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_2918 + ((isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0))) * _1130))) + ((_2924 + ((isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    float _2945 = ((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_2920 + ((isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))) * _1130))) + ((_2926 + ((isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0))) * _1968)) * cbPerFrame._m0[3u].x);
    uint _2946 = _269 + 6u;
    float _2954 = _1052 / cbSceneParam._m0[86u].x;
    float _2955 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _2969 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2971 = _2969.x;
    float _2972 = _2969.y;
    float _2973 = _2969.z;
    float _2974 = _2969.w;
    float _3067;
    float _3069;
    float _3071;
    float _3073;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3029 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3030 = _3029 / _975;
        float _3041 = _3030 * _1025;
        float _3042 = _1026 * _3030;
        float _3043 = (-0.0) - _3042;
        float _3045 = _3030 * _1027;
        float _3047 = (cbSceneParam._m0[77u].w * _3043) / _3029;
        float _3048 = _3047 + cbSceneParam._m0[79u].w;
        float _3049 = cbSceneParam._m0[79u].w - _3042;
        float _3055 = sqrt(((_3041 * _3041) + (_3042 * _3042)) + (_3045 * _3045));
        float _3058 = (1.0 - (cbSceneParam._m0[77u].w / _3029)) * _3055;
        float _3063 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3065 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3242;
        if (abs((_3043 - _3047) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3242 = ((((_3048 > 0.0) ? exp2(_3063 * _3048) : (2.0 - exp2(_3065 * _3048))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3058;
        }
        else
        {
            float _3186 = 1.0 / cbSceneParam._m0[80u].x;
            float _3187 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : max(_3048, _3049));
            float _3188 = isnan(_3049) ? _3048 : (isnan(_3048) ? _3049 : min(_3048, _3049));
            float _3197 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : min(_3187, 0.0));
            float _3198 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : min(_3188, 0.0));
            _3242 = ((abs(_3055 / _3043) * cbSceneParam._m0[80u].y) * ((((_3197 - _3198) * 2.0) - ((exp2(_3063 * (isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0)))) - exp2(_3063 * (isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0))))) * _3186)) - ((exp2(_3065 * _3197) - exp2(_3065 * _3198)) * _3186))) + (_3058 * cbSceneParam._m0[80u].z);
        }
        vec4 _3244 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2954, _2955, 1.0), 0.0);
        float _3253 = exp2((_3242 * (-1.44269502162933349609375)) * (1.0 - _3244.w));
        float _3254 = log2(_3253);
        float _3270 = log2(_2974);
        _3067 = (exp2(_3270 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].x)) * _3244.x) / cbSceneParam._m0[78u].x)) + _2971;
        _3069 = (exp2(_3270 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].y)) * _3244.y) / cbSceneParam._m0[78u].y)) + _2972;
        _3071 = (exp2(_3270 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3254 * cbSceneParam._m0[78u].z)) * _3244.z) / cbSceneParam._m0[78u].z)) + _2973;
        _3073 = _3253 * _2974;
    }
    else
    {
        _3067 = _2971;
        _3069 = _2972;
        _3071 = _2973;
        _3073 = _2974;
    }
    bool _3280;
    vec4 _3083;
    vec4 _3105;
    float _3107;
    float _3111;
    float _3112;
    float _3113;
    float _3114;
    bool _3124;
    for (;;)
    {
        _3083 = cbMatDynParam._m0[0u];
        float _3085 = roundEven(_3083.y);
        bool _3086 = _3085 == 3.0;
        float _3087 = log2(_3073);
        float _3094 = exp2(_3087 * cbSceneParam._m0[78u].x) * _2943;
        float _3095 = exp2(_3087 * cbSceneParam._m0[78u].y) * _2944;
        float _3096 = exp2(_3087 * cbSceneParam._m0[78u].z) * _2945;
        float _3103 = _1041 + (-0.5);
        _3105 = cbMtdParam._m0[1u];
        _3107 = _3105.y * _3103;
        float _3110 = (_3085 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3111 = _3110 * (_3086 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3067)));
        _3112 = _3110 * (_3086 ? _3095 : (_3095 + (cbSceneParam._m0[72u].w * _3069)));
        _3113 = _3110 * (_3086 ? _3096 : (_3096 + (cbSceneParam._m0[72u].w * _3071)));
        _3114 = _3103 * 0.999000012874603271484375;
        _3124 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3124)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3114) < 0.5)
            {
                _3280 = true;
                break;
            }
        }
        uint _3221 = _1090 + uint(_3083.w);
        if ((cbInstanceData._m0[_3221].w < 1.0) && ((cbInstanceData._m0[_3221].w + _3114) < 0.5))
        {
            _3280 = true;
            break;
        }
        if ((_3107 + 1.0) < _3105.x)
        {
            _3280 = true;
            break;
        }
        _3280 = false;
        break;
    }
    float _3485;
    if (_3280)
    {
        discard_state = true;
        _3485 = 0.0;
    }
    else
    {
        _3485 = cbInstanceData._m0[_2946].w;
    }
    SV_Target.x = _3111;
    SV_Target.y = _3112;
    SV_Target.z = _3113;
    SV_Target.w = _3485;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2946].w;
    discard_exit();
}


