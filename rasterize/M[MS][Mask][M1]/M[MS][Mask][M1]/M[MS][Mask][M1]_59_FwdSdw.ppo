#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1459;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4069 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _4080 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4091 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _416 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _448 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _450 = _448.x;
    float _462 = dot(vec4(_450, _448.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _479 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _416.x) * 2.0) - ((((_450 - _462) * cbMtdParam._m0[23u].w) + _462) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4102 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _480 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _487 = (_480 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376;
    float _488 = (_480 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377;
    float _489 = (_480 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378;
    vec4 _506 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _308) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _309) + cbTextureTilingScale._m0[3u].w));
    vec4 _526 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _528 = _526.x;
    float _538 = dot(vec4(_528, _526.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _552 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _416.y) * 2.0) - ((((_528 - _538) * cbMtdParam._m0[23u].w) + _538) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4113 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _563 = (_345.x * cbMtdParam._m0[9u].x) * ((_553 * ((_506.x * cbMtdParam._m0[13u].x) - _487)) + _487);
    float _564 = (_345.y * cbMtdParam._m0[9u].y) * ((_553 * ((_506.y * cbMtdParam._m0[13u].y) - _488)) + _488);
    float _565 = (_345.z * cbMtdParam._m0[9u].z) * ((_553 * ((_506.z * cbMtdParam._m0[13u].z) - _489)) + _489);
    float _569 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _563;
    float _572 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _564;
    float _575 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _565;
    float _583 = (((_563 - _569) * (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) + _569) * 4.55000019073486328125;
    float _585 = (((_564 - _572) * (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) + _572) * 4.55000019073486328125;
    float _587 = (((_565 - _575) * (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0)))) + _575) * 4.55000019073486328125;
    vec4 _599 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _622 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _641 = _639.x;
    float _642 = _639.y;
    float _643 = _639.z;
    float _650 = ((_622.x - _641) * _480) + _641;
    float _651 = ((_622.y - _642) * _480) + _642;
    float _652 = ((_622.z - _643) * _480) + _643;
    vec4 _664 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _308) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _309) + cbTextureTilingScale._m0[2u].w));
    float _677 = ((_664.z - _652) * _553) + _652;
    float _680 = ((((_664.x - _650) * _553) + _650) * 2.0) + (-1.0);
    float _681 = ((((_664.y - _651) * _553) + _651) * 2.0) + (-1.0);
    float _682 = dot(vec2(_680, _681), vec2(_680, _681));
    float _4124 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _687 = sqrt(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))));
    vec4 _707 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _719 = (_680 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_599.x * 2.0) + (-1.0)))) + (((_707.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _720 = (_681 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_599.y * 2.0) + (-1.0)))) + (((_707.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _732 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _734 = _732.x;
    float _735 = 1.0 - _734;
    float _764 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_734 - _735) * cbMtdParam._m0[24u].w) + _735) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4135 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _765 = isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0));
    float _773 = ((((cbMtdParam._m0[10u].x - _583) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _765) + _583;
    float _774 = ((((cbMtdParam._m0[10u].y - _585) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _765) + _585;
    float _775 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _587)) * _765) + _587;
    vec4 _801 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _803 = _801.x;
    float _820 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _803) * _480) + _803;
    float _838 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _308) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _309) + cbTextureTilingScale._m0[21u].w)).x - _820) * _553) + _820;
    float _842 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _838) * cbMtdParam._m0[19u].z) + _838;
    float _844 = _842 - (_842 * _765);
    float _849 = (((_599.z - _677) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _677;
    float _853 = ((_707.z - _849) * cbMtdParam._m0[19u].w) + _849;
    float _857 = ((cbMtdParam._m0[23u].x - _853) * _765) + _853;
    vec4 _878 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _884 = (_878.x * 2.0) + (-1.0);
    float _885 = (_878.y * 2.0) + (-1.0);
    float _886 = dot(vec2(_884, _885), vec2(_884, _885));
    float _4146 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _902 = (_765 * (((cbMtdParam._m0[22u].z * _719) - _719) + _884)) + _719;
    float _903 = (_765 * (((cbMtdParam._m0[22u].z * _720) - _720) + _885)) + _720;
    float _904 = (_765 * (sqrt(1.0 - (isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0)))) - _687)) + _687;
    float _906 = cbMtdParam._m0[22u].x + _707.w;
    float _909 = fma(_904, _257 * NORMAL.x, fma(_903, _264 * TANGENT.x, (_250 * _242) * _902));
    float _912 = fma(_904, _257 * NORMAL.y, fma(_903, _264 * TANGENT.y, (_250 * _243) * _902));
    float _915 = fma(_904, _257 * NORMAL.z, fma(_903, _264 * TANGENT.z, (_250 * _244) * _902));
    float _919 = inversesqrt(dot(vec3(_909, _912, _915), vec3(_909, _912, _915)));
    float _920 = _919 * _909;
    float _921 = _919 * _912;
    float _922 = _919 * _915;
    float _4157 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _923 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _4168 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4179 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _4190 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _4201 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4212 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _928 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
    float _942 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _982 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _992 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _982);
    float _993 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _982);
    float _994 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _982);
    float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
    float _999 = _992 * _998;
    float _1000 = _993 * _998;
    float _1001 = _994 * _998;
    float _1007 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1008 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1026 = fma(_922, cbSceneParam._m0[5u].z, fma(_921, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _920));
    float _1029 = fma(_922, cbSceneParam._m0[6u].z, fma(_921, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _920));
    float _1032 = fma(_922, cbSceneParam._m0[7u].z, fma(_921, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _920));
    uint _1046 = (_289 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1052 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0)))) * cbInstanceData._m0[_1046].x;
    float _1053 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_1046].y;
    float _1054 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_1046].z;
    float _4223 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _1055 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _4234 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _1056 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _1057 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _1058 = 1.0 - _928;
    float _1059 = _1055 * _1058;
    float _1060 = _1056 * _1058;
    float _1061 = _1057 * _1058;
    float _1066 = (_1055 + (-0.039999999105930328369140625)) * _928;
    float _1067 = (_1056 + (-0.039999999105930328369140625)) * _928;
    float _1068 = (_1057 + (-0.039999999105930328369140625)) * _928;
    float _1069 = _1066 + 0.039999999105930328369140625;
    float _1071 = _1067 + 0.039999999105930328369140625;
    float _1072 = _1068 + 0.039999999105930328369140625;
    vec4 _1081 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1007, cbSceneParam._m0[86u].y * _1008));
    float _1085 = ((isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * TEXCOORD_5.w) * _1081.x;
    float _1086 = dot(vec3(_920, _921, _922), vec3(_999, _1000, _1001));
    float _1089 = _1086 * 2.0;
    float _1093 = (_1089 * _920) - _999;
    float _1094 = (_1089 * _921) - _1000;
    float _1095 = (_1089 * _922) - _1001;
    float _1099 = abs(dot(vec3(_999, _1000, _1001), vec3(_920, _921, _922)));
    float _4256 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1101 = sqrt(_923);
    float _1114 = exp2((_1101 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1101 * 3.0));
    float _1120 = (1.0 - _1114) * ((_1101 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1121 = _1114 * _1101;
    float _1149 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1153 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1157 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1458;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1183 = fma(_1157, cbModelParam._m0[26u].z, fma(_1153, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1149));
        float _1187 = fma(_1157, cbModelParam._m0[27u].z, fma(_1153, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1149));
        float _1191 = fma(_1157, cbModelParam._m0[28u].z, fma(_1153, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1149));
        float _1216 = _1149 + _920;
        float _1217 = _1153 + _921;
        float _1218 = _1157 + _922;
        float _1228 = fma(_1218, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1216)) - _1183;
        float _1229 = fma(_1218, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1216)) - _1187;
        float _1230 = fma(_1218, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1216)) - _1191;
        float _1234 = inversesqrt(dot(vec3(_1228, _1229, _1230), vec3(_1228, _1229, _1230)));
        float _1247 = ((_1234 * _1228) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1183 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1234 * _1229) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1187 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1249 = ((_1234 * _1230) / cbModelParam._m0[34u].z) + ((((((_1191 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1247, _1248, _1249), 0.0);
        float _1286 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1252.x + (-0.5));
        float _1288 = _1286 * (_1252.y + (-0.5));
        float _1289 = _1286 * (_1252.z + (-0.5));
        float _1296 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1259.x + (-0.5));
        float _1298 = _1296 * (_1259.y + (-0.5));
        float _1299 = _1296 * (_1259.z + (-0.5));
        float _1306 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1266.x + (-0.5));
        float _1308 = _1306 * (_1266.y + (-0.5));
        float _1309 = _1306 * (_1266.z + (-0.5));
        float _1316 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1273.x + (-0.5));
        float _1318 = _1316 * (_1273.y + (-0.5));
        float _1319 = _1316 * (_1273.z + (-0.5));
        float _1320 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = _1287 * 0.5;
        float _1324 = _1297 * 0.5;
        float _1325 = _1307 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1340 = (dot(vec3(_920, _921, _922), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1350 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1320 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4304 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1352 + 1.0))) + _1357) * _1320;
        float _1367 = _1288 * 0.5;
        float _1368 = _1298 * 0.5;
        float _1369 = _1308 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_920, _921, _922), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4337 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1394 + 1.0))) + _1399) * _1321;
        float _1409 = _1289 * 0.5;
        float _1410 = _1299 * 0.5;
        float _1411 = _1309 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_920, _921, _922), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4370 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1436 + 1.0))) + _1441) * _1322;
        _1458 = _1289;
        _1460 = _1288;
        _1461 = _1287;
        _1462 = _1299;
        _1463 = _1298;
        _1464 = _1297;
        _1465 = _1309;
        _1466 = _1308;
        _1467 = _1307;
        _1468 = _1322;
        _1469 = _1321;
        _1470 = _1320;
        _1471 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1472 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1473 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1459;
        _1460 = _1459;
        _1461 = _1459;
        _1462 = _1459;
        _1463 = _1459;
        _1464 = _1459;
        _1465 = _1459;
        _1466 = _1459;
        _1467 = _1459;
        _1468 = _1459;
        _1469 = _1459;
        _1470 = _1459;
        _1471 = 0.0;
        _1472 = 0.0;
        _1473 = 0.0;
    }
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    float _1771;
    float _1772;
    float _1773;
    float _1774;
    float _1775;
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1497 = fma(_1157, cbModelParam._m0[30u].z, fma(_1153, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1149));
        float _1501 = fma(_1157, cbModelParam._m0[31u].z, fma(_1153, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1149));
        float _1505 = fma(_1157, cbModelParam._m0[32u].z, fma(_1153, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1149));
        float _1528 = _1149 + _920;
        float _1529 = _1153 + _921;
        float _1530 = _1157 + _922;
        float _1540 = fma(_1530, cbModelParam._m0[30u].z, fma(_1529, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1528)) - _1497;
        float _1541 = fma(_1530, cbModelParam._m0[31u].z, fma(_1529, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1528)) - _1501;
        float _1542 = fma(_1530, cbModelParam._m0[32u].z, fma(_1529, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1528)) - _1505;
        float _1546 = inversesqrt(dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542)));
        float _1559 = ((_1546 * _1540) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1497 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1560 = ((_1546 * _1541) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1501 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1561 = ((_1546 * _1542) / cbModelParam._m0[35u].z) + ((((((_1505 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1559, _1560, _1561), 0.0);
        float _1596 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1597 = _1596 * (_1563.x + (-0.5));
        float _1598 = _1596 * (_1563.y + (-0.5));
        float _1599 = _1596 * (_1563.z + (-0.5));
        float _1606 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1570.x + (-0.5));
        float _1608 = _1606 * (_1570.y + (-0.5));
        float _1609 = _1606 * (_1570.z + (-0.5));
        float _1616 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1577.x + (-0.5));
        float _1618 = _1616 * (_1577.y + (-0.5));
        float _1619 = _1616 * (_1577.z + (-0.5));
        float _1626 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1584.x + (-0.5));
        float _1628 = _1626 * (_1584.y + (-0.5));
        float _1629 = _1626 * (_1584.z + (-0.5));
        float _1630 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1631 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1632 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1633 = _1597 * 0.5;
        float _1634 = _1607 * 0.5;
        float _1635 = _1617 * 0.5;
        float _1636 = dot(vec3(_1633, _1634, _1635), vec3(_1633, _1634, _1635));
        float _1641 = (_1636 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1636);
        float _1649 = (dot(vec3(_920, _921, _922), vec3(_1641 * _1633, _1641 * _1634, _1641 * _1635)) + 1.0) * 0.5;
        float _4411 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1658 = sqrt(((_1634 * _1634) + (_1633 * _1633)) + (_1635 * _1635)) / (_1630 + 9.9999997473787516355514526367188e-06);
        float _4422 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
        float _1659 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1660 = _1659 * 2.0;
        float _1664 = (1.0 - _1659) / (_1659 + 1.0);
        float _4433 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1674 = ((((1.0 - _1665) * (_1660 + 2.0)) * exp2(log2(isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * (_1660 + 1.0))) + _1665) * _1630;
        float _1675 = _1598 * 0.5;
        float _1676 = _1608 * 0.5;
        float _1677 = _1618 * 0.5;
        float _1678 = dot(vec3(_1675, _1676, _1677), vec3(_1675, _1676, _1677));
        float _1683 = (_1678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1678);
        float _1691 = (dot(vec3(_920, _921, _922), vec3(_1683 * _1675, _1683 * _1676, _1683 * _1677)) + 1.0) * 0.5;
        float _4444 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1700 = sqrt(((_1676 * _1676) + (_1675 * _1675)) + (_1677 * _1677)) / (_1631 + 9.9999997473787516355514526367188e-06);
        float _4455 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1701 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1702 = _1701 * 2.0;
        float _1706 = (1.0 - _1701) / (_1701 + 1.0);
        float _4466 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1716 = ((((1.0 - _1707) * (_1702 + 2.0)) * exp2(log2(isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_1702 + 1.0))) + _1707) * _1631;
        float _1717 = _1599 * 0.5;
        float _1718 = _1609 * 0.5;
        float _1719 = _1619 * 0.5;
        float _1720 = dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719));
        float _1725 = (_1720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1720);
        float _1733 = (dot(vec3(_920, _921, _922), vec3(_1725 * _1717, _1725 * _1718, _1725 * _1719)) + 1.0) * 0.5;
        float _4477 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1742 = sqrt(((_1718 * _1718) + (_1717 * _1717)) + (_1719 * _1719)) / (_1632 + 9.9999997473787516355514526367188e-06);
        float _4488 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
        float _1743 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1744 = _1743 * 2.0;
        float _1748 = (1.0 - _1743) / (_1743 + 1.0);
        float _4499 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
        float _1749 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1758 = ((((1.0 - _1749) * (_1744 + 2.0)) * exp2(log2(isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_1744 + 1.0))) + _1749) * _1632;
        _1766 = _1599;
        _1767 = _1598;
        _1768 = _1597;
        _1769 = _1609;
        _1770 = _1608;
        _1771 = _1607;
        _1772 = _1619;
        _1773 = _1618;
        _1774 = _1617;
        _1775 = _1632;
        _1776 = _1631;
        _1777 = _1630;
        _1778 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0)));
        _1779 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)));
        _1780 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)));
    }
    else
    {
        _1766 = _1459;
        _1767 = _1459;
        _1768 = _1459;
        _1769 = _1459;
        _1770 = _1459;
        _1771 = _1459;
        _1772 = _1459;
        _1773 = _1459;
        _1774 = _1459;
        _1775 = _1459;
        _1776 = _1459;
        _1777 = _1459;
        _1778 = 0.0;
        _1779 = 0.0;
        _1780 = 0.0;
    }
    float _1790 = (cbModelParam._m0[1u].x * (_1778 - _1471)) + _1471;
    float _1791 = (cbModelParam._m0[1u].x * (_1779 - _1472)) + _1472;
    float _1792 = (cbModelParam._m0[1u].x * (_1780 - _1473)) + _1473;
    float _1813 = fma(_1792, cbSceneParam._m0[89u].z, fma(_1791, cbSceneParam._m0[89u].y, _1790 * cbSceneParam._m0[89u].x));
    float _1816 = fma(_1792, cbSceneParam._m0[90u].z, fma(_1791, cbSceneParam._m0[90u].y, _1790 * cbSceneParam._m0[90u].x));
    float _1819 = fma(_1792, cbSceneParam._m0[91u].z, fma(_1791, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1790));
    float _1834 = _1093 * 0.5;
    float _1835 = _1094 * 0.5;
    float _1836 = _1095 * 0.5;
    float _1837 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1768, _1771, _1774, _1777));
    float _1840 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1767, _1770, _1773, _1776));
    float _1843 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1766, _1769, _1772, _1775));
    float _1877;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1850 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1458, _1462, _1465, _1468));
        float _1854 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1460, _1463, _1466, _1469));
        float _1858 = dot(vec4(_1834, _1835, _1836, 1.0), vec4(_1461, _1464, _1467, _1470));
        float _1865 = dot(vec4(cbModelParam._m0[39u]), vec4(_1834, _1835, _1836, 1.0));
        _1877 = dot(vec3(isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1865) ? 0.0 : (isnan(0.0) ? _1865 : max(0.0, _1865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1877 = 1.0;
    }
    float _1888;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1879 = dot(vec4(cbModelParam._m0[40u]), vec4(_1834, _1835, _1836, 1.0));
        _1888 = dot(vec3(isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0)), isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0)), isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1888 = 1.0;
    }
    float _1892 = (_1888 * cbModelParam._m0[1u].x) + (_1877 * (1.0 - cbModelParam._m0[1u].x));
    float _1902 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _923);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1902 : min(cbModelParam._m0[25u].z, _1902));
    float _1985;
    float _1987;
    float _1989;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1952 = fma(_1157, cbModelParam._m0[13u].z, fma(_1153, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1149)) + cbModelParam._m0[13u].w;
        float _1956 = fma(_1157, cbModelParam._m0[14u].z, fma(_1153, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1149)) + cbModelParam._m0[14u].w;
        float _1960 = fma(_1157, cbModelParam._m0[15u].z, fma(_1153, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1149)) + cbModelParam._m0[15u].w;
        float _1963 = fma(_1095, cbModelParam._m0[13u].z, fma(_1094, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1093));
        float _1966 = fma(_1095, cbModelParam._m0[14u].z, fma(_1094, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1093));
        float _1969 = fma(_1095, cbModelParam._m0[15u].z, fma(_1094, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1093));
        float _1997;
        if (_1963 > 0.0)
        {
            _1997 = abs((1.0 - _1952) / _1963);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1963 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1952 + 1.0) / _1963);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1997 = frontier_phi_14_12_ladder;
        }
        float _2169;
        if (_1966 > 0.0)
        {
            _2169 = abs((1.0 - _1956) / _1966);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1966 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1956 + 1.0) / _1966);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2169 = frontier_phi_23_19_ladder;
        }
        float _2464;
        if (_1969 > 0.0)
        {
            _2464 = abs((1.0 - _1960) / _1969);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1960 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2464 = frontier_phi_35_30_ladder;
        }
        float _2466 = isnan(_2169) ? _1997 : (isnan(_1997) ? _2169 : min(_1997, _2169));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1963) + _1952;
        float _2472 = (_2467 * _1966) + _1956;
        float _2473 = (_2467 * _1969) + _1960;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2474;
        float _2478 = _2474 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 > _2478) || ((_2472 < _2476) || ((_2471 < _2476) || (_2471 > _2478))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2618 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2473, cbModelParam._m0[9u].z, fma(_2472, cbModelParam._m0[9u].y, _2471 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2473, cbModelParam._m0[10u].z, fma(_2472, cbModelParam._m0[10u].y, _2471 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2473, cbModelParam._m0[11u].z, fma(_2472, cbModelParam._m0[11u].y, _2471 * cbModelParam._m0[11u].x))), _1903);
            frontier_phi_13_35_ladder = _2618.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2618.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2618.x * cbModelParam._m0[1u].y;
        }
        _1985 = frontier_phi_13_35_ladder_2;
        _1987 = frontier_phi_13_35_ladder_1;
        _1989 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1973 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1093, _1094, _1095), _1903);
        _1985 = _1973.x * cbModelParam._m0[1u].y;
        _1987 = _1973.y * cbModelParam._m0[1u].y;
        _1989 = _1973.z * cbModelParam._m0[1u].y;
    }
    float _1993 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _923);
    float _1994 = isnan(_1993) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1993 : min(cbModelParam._m0[25u].w, _1993));
    float _2084;
    float _2086;
    float _2088;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2048 = fma(_1157, cbModelParam._m0[21u].z, fma(_1153, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1149)) + cbModelParam._m0[21u].w;
        float _2052 = fma(_1157, cbModelParam._m0[22u].z, fma(_1153, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1149)) + cbModelParam._m0[22u].w;
        float _2056 = fma(_1157, cbModelParam._m0[23u].z, fma(_1153, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1149)) + cbModelParam._m0[23u].w;
        float _2059 = fma(_1095, cbModelParam._m0[21u].z, fma(_1094, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1093));
        float _2062 = fma(_1095, cbModelParam._m0[22u].z, fma(_1094, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1093));
        float _2065 = fma(_1095, cbModelParam._m0[23u].z, fma(_1094, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1093));
        float _2174;
        if (_2059 > 0.0)
        {
            _2174 = abs((1.0 - _2048) / _2059);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2059 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2048 + 1.0) / _2059);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2174 = frontier_phi_25_21_ladder;
        }
        float _2491;
        if (_2062 > 0.0)
        {
            _2491 = abs((1.0 - _2052) / _2062);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2062 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2052 + 1.0) / _2062);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2491 = frontier_phi_37_32_ladder;
        }
        float _2829;
        if (_2065 > 0.0)
        {
            _2829 = abs((1.0 - _2056) / _2065);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2065 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2056 + 1.0) / _2065);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2829 = frontier_phi_47_44_ladder;
        }
        float _2831 = isnan(_2491) ? _2174 : (isnan(_2174) ? _2491 : min(_2174, _2491));
        float _2832 = isnan(_2829) ? _2831 : (isnan(_2831) ? _2829 : min(_2831, _2829));
        float _2836 = (_2832 * _2059) + _2048;
        float _2837 = (_2832 * _2062) + _2052;
        float _2838 = (_2832 * _2065) + _2056;
        float _2839 = _2832 * 9.9999997473787516355514526367188e-05;
        float _2840 = (-1.0) - _2839;
        float _2842 = _2839 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2838 > _2842) || ((_2838 < _2840) || ((_2837 > _2842) || ((_2837 < _2840) || ((_2836 < _2840) || (_2836 > _2842))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2960 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2838, cbModelParam._m0[17u].z, fma(_2837, cbModelParam._m0[17u].y, _2836 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2838, cbModelParam._m0[18u].z, fma(_2837, cbModelParam._m0[18u].y, _2836 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2838, cbModelParam._m0[19u].z, fma(_2837, cbModelParam._m0[19u].y, _2836 * cbModelParam._m0[19u].x))), _1994);
            frontier_phi_22_47_ladder = _2960.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2960.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2960.x * cbModelParam._m0[1u].z;
        }
        _2084 = frontier_phi_22_47_ladder_2;
        _2086 = frontier_phi_22_47_ladder_1;
        _2088 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1093, _1094, _1095), _1994);
        _2084 = _2068.x * cbModelParam._m0[1u].z;
        _2086 = _2068.y * cbModelParam._m0[1u].z;
        _2088 = _2068.z * cbModelParam._m0[1u].z;
    }
    float _2101 = (((_1120 * _1069) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2084 - _1985)) + _1985);
    float _2103 = (((_1120 * _1071) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2086 - _1987)) + _1987);
    float _2105 = (((_1120 * _1072) + _1121) * _1085) * ((cbModelParam._m0[1u].w * (_2088 - _1989)) + _1989);
    float _2108 = fma(_2105, cbSceneParam._m0[89u].z, fma(_2103, cbSceneParam._m0[89u].y, _2101 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2105, cbSceneParam._m0[90u].z, fma(_2103, cbSceneParam._m0[90u].y, _2101 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2105, cbSceneParam._m0[91u].z, fma(_2103, cbSceneParam._m0[91u].y, _2101 * cbSceneParam._m0[91u].x));
    float _2148 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2160 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2161 = _2148 / _2160;
    float _2162 = _2152 / _2160;
    float _2163 = _2156 / _2160;
    float _2310;
    float _2311;
    float _2312;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2190 = ((uint(_2163 > cbSceneParam._m0[59u].y) + uint(_2163 > cbSceneParam._m0[59u].x)) + uint(_2163 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2191 = _2190 + 43u;
        uint _2199 = _2190 + 44u;
        uint _2207 = _2190 + 45u;
        uint _2215 = _2190 + 46u;
        float _2226 = fma(_2160, cbSceneParam._m0[_2191].w, fma(_2156, cbSceneParam._m0[_2191].z, fma(_2152, cbSceneParam._m0[_2191].y, _2148 * cbSceneParam._m0[_2191].x)));
        float _2230 = fma(_2160, cbSceneParam._m0[_2199].w, fma(_2156, cbSceneParam._m0[_2199].z, fma(_2152, cbSceneParam._m0[_2199].y, _2148 * cbSceneParam._m0[_2199].x)));
        float _2238 = fma(_2160, cbSceneParam._m0[_2215].w, fma(_2156, cbSceneParam._m0[_2215].z, fma(_2152, cbSceneParam._m0[_2215].y, _2148 * cbSceneParam._m0[_2215].x)));
        float _2243 = cbSceneParam._m0[33u].z * _2238;
        float _2245 = cbSceneParam._m0[33u].w * _2238;
        float _2248 = fma(_2160, cbSceneParam._m0[_2207].w, fma(_2156, cbSceneParam._m0[_2207].z, fma(_2152, cbSceneParam._m0[_2207].y, _2148 * cbSceneParam._m0[_2207].x))) / _2238;
        float _2296 = (cbSceneParam._m0[33u].x - sqrt(((_2162 * _2162) + (_2161 * _2161)) + (_2163 * _2163))) * cbSceneParam._m0[33u].y;
        float _4625 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2303 = (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2243 + _2226) / _2238, (_2245 + _2230) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2245 + _2226) / _2238, (_2230 - _2243) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 - _2243) / _2238, (_2230 - _2245) / _2238), _2248), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2226 - _2245) / _2238, (_2243 + _2230) / _2238), _2248), 0.0)).x), vec4(0.25)));
        _2310 = 1.0 - (_2303 * cbSceneParam._m0[34u].x);
        _2311 = 1.0 - (_2303 * cbSceneParam._m0[34u].y);
        _2312 = 1.0 - (_2303 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2310 = 1.0;
        _2311 = 1.0;
        _2312 = 1.0;
    }
    float _2376;
    float _2378;
    float _2380;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2364 = fma(_2160, cbSceneParam._m0[63u].w, fma(_2156, cbSceneParam._m0[63u].z, fma(_2152, cbSceneParam._m0[63u].y, _2148 * cbSceneParam._m0[63u].x)));
        float _2365 = fma(_2160, cbSceneParam._m0[60u].w, fma(_2156, cbSceneParam._m0[60u].z, fma(_2152, cbSceneParam._m0[60u].y, _2148 * cbSceneParam._m0[60u].x))) / _2364;
        float _2366 = fma(_2160, cbSceneParam._m0[61u].w, fma(_2156, cbSceneParam._m0[61u].z, fma(_2152, cbSceneParam._m0[61u].y, _2148 * cbSceneParam._m0[61u].x))) / _2364;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2365 >= cbSceneParam._m0[64u].x) && (_2366 >= cbSceneParam._m0[64u].y)) && (_2365 <= cbSceneParam._m0[64u].z)) && (_2366 <= cbSceneParam._m0[64u].w))
        {
            float _2504 = fma(_2160, cbSceneParam._m0[62u].w, fma(_2156, cbSceneParam._m0[62u].z, fma(_2152, cbSceneParam._m0[62u].y, _2148 * cbSceneParam._m0[62u].x))) / _2364;
            float _2508 = isnan(cbSceneParam._m0[41u].w) ? _2504 : (isnan(_2504) ? cbSceneParam._m0[41u].w : max(_2504, cbSceneParam._m0[41u].w));
            float _2551 = (cbSceneParam._m0[33u].x - sqrt(((_2162 * _2162) + (_2161 * _2161)) + (_2163 * _2163))) * cbSceneParam._m0[33u].y;
            float _4641 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
            float _2558 = (isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2365, cbSceneParam._m0[33u].w + _2366), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2365, _2366 - cbSceneParam._m0[33u].z), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2365 - cbSceneParam._m0[33u].z, _2366 - cbSceneParam._m0[33u].w), _2508), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2365 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2366), _2508), 0.0)).x), vec4(0.25)));
            float _2562 = 1.0 - (_2558 * cbSceneParam._m0[34u].x);
            float _2563 = 1.0 - (_2558 * cbSceneParam._m0[34u].y);
            float _2564 = 1.0 - (_2558 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2564) ? _2312 : (isnan(_2312) ? _2564 : min(_2312, _2564));
            frontier_phi_34_33_ladder_1 = isnan(_2563) ? _2311 : (isnan(_2311) ? _2563 : min(_2311, _2563));
            frontier_phi_34_33_ladder_2 = isnan(_2562) ? _2310 : (isnan(_2310) ? _2562 : min(_2310, _2562));
        }
        else
        {
            frontier_phi_34_33_ladder = _2312;
            frontier_phi_34_33_ladder_1 = _2311;
            frontier_phi_34_33_ladder_2 = _2310;
        }
        _2376 = frontier_phi_34_33_ladder_2;
        _2378 = frontier_phi_34_33_ladder_1;
        _2380 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2376 = _2310;
        _2378 = _2311;
        _2380 = _2312;
    }
    uvec4 _2385 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2387 = _2385.x * 14u;
    uint _2388 = _2387 + 13u;
    float _2395 = _1085 + (-1.0);
    float _2400 = (cbLight._m0[_2388].x * _2395) + 1.0;
    float _2401 = (cbLight._m0[_2388].y * _2395) + 1.0;
    float _2402 = (cbLight._m0[_2388].z * _2395) + 1.0;
    float _2403 = (cbLight._m0[_2388].w * _2395) + 1.0;
    uint _2404 = _2387 + 5u;
    float _2410 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
    uint _2414 = _2387 + 4u;
    float _2423 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
    uint _2427 = _2387 | 1u;
    float _2438 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_920, _921, _922));
    float _2441 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_920, _921, _922));
    float _4677 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _4688 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2446 = (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0))) * 0.3183098733425140380859375;
    float _2448 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2455 = ((cbLight._m0[_2404].x * _2410) * _2448) + (((cbLight._m0[_2414].x * _2376) * _2423) * _2446);
    float _2456 = ((_2410 * cbLight._m0[_2404].y) * _2448) + (((cbLight._m0[_2414].y * _2378) * _2423) * _2446);
    float _2457 = ((_2410 * cbLight._m0[_2404].z) * _2448) + (((cbLight._m0[_2414].z * _2380) * _2423) * _2446);
    uvec4 _2461 = floatBitsToUint(cbLight._m0[_2387 + 12u]);
    bool _2463 = _2461.x == 0u;
    float _2565;
    float _2567;
    float _2569;
    if (_2463)
    {
        _2565 = _2455;
        _2567 = _2456;
        _2569 = _2457;
    }
    else
    {
        uint _2573 = _2387 + 6u;
        float _2589 = (dot(vec3(cbLight._m0[_2387 + 2u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2590 = _2589 * _2589;
        float _4699 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2591 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2592 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2565 = (((cbLight._m0[_2573].x * 0.3183098733425140380859375) * _2591) * _2592) + _2455;
        _2567 = (((cbLight._m0[_2573].y * 0.3183098733425140380859375) * _2591) * _2592) + _2456;
        _2569 = (((cbLight._m0[_2573].z * 0.3183098733425140380859375) * _2591) * _2592) + _2457;
    }
    bool _2572 = _2461.y == 0u;
    float _2627;
    float _2629;
    float _2631;
    if (_2572)
    {
        _2627 = _2565;
        _2629 = _2567;
        _2631 = _2569;
    }
    else
    {
        uint _2800 = _2387 + 7u;
        float _2816 = (dot(vec3(cbLight._m0[_2387 + 3u].xyz), vec3(_920, _921, _922)) * 0.5) + 0.5;
        float _2817 = _2816 * _2816;
        float _4715 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0));
        float _2818 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _2819 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2627 = (((cbLight._m0[_2800].x * 0.3183098733425140380859375) * _2818) * _2819) + _2565;
        _2629 = (((cbLight._m0[_2800].y * 0.3183098733425140380859375) * _2818) * _2819) + _2567;
        _2631 = (((cbLight._m0[_2800].z * 0.3183098733425140380859375) * _2818) * _2819) + _2569;
    }
    uint _2634 = _2387 + 8u;
    float _2647 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _923) * 0.949999988079071044921875);
    float _2648 = _2647 * _2647;
    float _2649 = cbLight._m0[_2387].x + _999;
    float _2650 = cbLight._m0[_2387].y + _1000;
    float _2651 = cbLight._m0[_2387].z + _1001;
    float _2655 = inversesqrt(dot(vec3(_2649, _2650, _2651), vec3(_2649, _2650, _2651)));
    float _2656 = _2655 * _2649;
    float _2657 = _2655 * _2650;
    float _2658 = _2655 * _2651;
    float _2659 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2387].xyz));
    float _4731 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    float _2662 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _4742 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _2663 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2664 = dot(vec3(_920, _921, _922), vec3(_2656, _2657, _2658));
    float _4753 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    float _2667 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2668 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2656, _2657, _2658));
    float _4764 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2672 = _2648 * _2648;
    float _2676 = ((_2667 * _2667) * (_2672 + (-1.0))) + 1.0;
    float _2684 = exp2(log2(1.0 - (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0)))) * 5.0);
    float _2685 = 0.959999978542327880859375 - _1066;
    float _2687 = 0.959999978542327880859375 - _1067;
    float _2688 = 0.959999978542327880859375 - _1068;
    float _2695 = 1.0 - _2648;
    float _2706 = (0.5 / (((_2663 * ((_2662 * _2695) + _2648)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2695) + _2648) * _2662))) * _2662;
    float _4775 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
    float _2708 = (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2672 / ((_2676 * _2676) * 3.141590118408203125));
    uint _2722 = _2387 + 9u;
    float _2733 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _923) * 0.949999988079071044921875);
    float _2734 = _2733 * _2733;
    float _2735 = cbLight._m0[_2427].x + _999;
    float _2736 = cbLight._m0[_2427].y + _1000;
    float _2737 = cbLight._m0[_2427].z + _1001;
    float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
    float _2742 = _2741 * _2735;
    float _2743 = _2741 * _2736;
    float _2744 = _2741 * _2737;
    float _2745 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2427].xyz));
    float _4786 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
    float _2748 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
    float _2749 = dot(vec3(_920, _921, _922), vec3(_2742, _2743, _2744));
    float _4797 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
    float _2752 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2753 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2742, _2743, _2744));
    float _4808 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2757 = _2734 * _2734;
    float _2761 = ((_2752 * _2752) * (_2757 + (-1.0))) + 1.0;
    float _2768 = exp2(log2(1.0 - (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0)))) * 5.0);
    float _2775 = 1.0 - _2734;
    float _2785 = (0.5 / (((_2663 * ((_2748 * _2775) + _2734)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2775) + _2734) * _2748))) * _2748;
    float _4819 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
    float _2787 = (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0))) * (_2757 / ((_2761 * _2761) * 3.141590118408203125));
    float _2797 = (((((_2768 * _2685) + _1069) * cbLight._m0[_2722].x) * _2787) * _2410) + ((((cbLight._m0[_2634].x * _2376) * ((_2684 * _2685) + _1069)) * _2708) * _2423);
    float _2798 = (((((_2768 * _2687) + _1071) * cbLight._m0[_2722].y) * _2787) * _2410) + ((((cbLight._m0[_2634].y * _2378) * ((_2684 * _2687) + _1071)) * _2708) * _2423);
    float _2799 = (((((_2768 * _2688) + _1072) * cbLight._m0[_2722].z) * _2787) * _2410) + ((((cbLight._m0[_2634].z * _2380) * ((_2684 * _2688) + _1072)) * _2708) * _2423);
    float _2855;
    float _2857;
    float _2859;
    if (_2463)
    {
        _2855 = _2797;
        _2857 = _2798;
        _2859 = _2799;
    }
    else
    {
        uint _2861 = _2387 + 2u;
        uint _2865 = _2387 + 10u;
        float _2879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2861].w)) * _923) * 0.949999988079071044921875);
        float _2880 = _2879 * _2879;
        float _2881 = cbLight._m0[_2861].x + _999;
        float _2882 = cbLight._m0[_2861].y + _1000;
        float _2883 = cbLight._m0[_2861].z + _1001;
        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
        float _2888 = _2887 * _2881;
        float _2889 = _2887 * _2882;
        float _2890 = _2887 * _2883;
        float _2891 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2861].xyz));
        float _4830 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2894 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
        float _2895 = dot(vec3(_920, _921, _922), vec3(_2888, _2889, _2890));
        float _4841 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
        float _2898 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2899 = dot(vec3(cbLight._m0[_2861].xyz), vec3(_2888, _2889, _2890));
        float _4852 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2903 = _2880 * _2880;
        float _2907 = ((_2898 * _2898) * (_2903 + (-1.0))) + 1.0;
        float _2914 = exp2(log2(1.0 - (isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0)))) * 5.0);
        float _2921 = 1.0 - _2880;
        float _2931 = (0.5 / (((_2663 * ((_2894 * _2921) + _2880)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _2921) + _2880) * _2894))) * _2894;
        float _4863 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        float _2933 = (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0))) * (_2903 / ((_2907 * _2907) * 3.141590118408203125));
        float _2934 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
        _2855 = (((((_2914 * _2685) + _1069) * cbLight._m0[_2865].x) * _2933) * _2934) + _2797;
        _2857 = (((((_2914 * _2687) + _1071) * cbLight._m0[_2865].y) * _2933) * _2934) + _2798;
        _2859 = (((((_2914 * _2688) + _1072) * cbLight._m0[_2865].z) * _2933) * _2934) + _2799;
    }
    float _2965;
    float _2967;
    float _2969;
    if (_2572)
    {
        _2965 = _2855;
        _2967 = _2857;
        _2969 = _2859;
    }
    else
    {
        uint _2976 = _2387 + 3u;
        uint _2980 = _2387 + 11u;
        float _2994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2976].w)) * _923) * 0.949999988079071044921875);
        float _2995 = _2994 * _2994;
        float _2996 = cbLight._m0[_2976].x + _999;
        float _2997 = cbLight._m0[_2976].y + _1000;
        float _2998 = cbLight._m0[_2976].z + _1001;
        float _3002 = inversesqrt(dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998)));
        float _3003 = _3002 * _2996;
        float _3004 = _3002 * _2997;
        float _3005 = _3002 * _2998;
        float _3006 = dot(vec3(_920, _921, _922), vec3(cbLight._m0[_2976].xyz));
        float _4879 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
        float _3009 = isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0));
        float _3010 = dot(vec3(_920, _921, _922), vec3(_3003, _3004, _3005));
        float _4890 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
        float _3013 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _3014 = dot(vec3(cbLight._m0[_2976].xyz), vec3(_3003, _3004, _3005));
        float _4901 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3018 = _2995 * _2995;
        float _3022 = ((_3013 * _3013) * (_3018 + (-1.0))) + 1.0;
        float _3029 = exp2(log2(1.0 - (isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0)))) * 5.0);
        float _3036 = 1.0 - _2995;
        float _3046 = (0.5 / (((_2663 * ((_3009 * _3036) + _2995)) + 9.9999999392252902907785028219223e-09) + (((_2663 * _3036) + _2995) * _3009))) * _3009;
        float _4912 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
        float _3048 = (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_3018 / ((_3022 * _3022) * 3.141590118408203125));
        float _3049 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
        _2965 = (((((_3029 * _2685) + _1069) * cbLight._m0[_2980].x) * _3048) * _3049) + _2855;
        _2967 = (((((_3029 * _2687) + _1071) * cbLight._m0[_2980].y) * _3048) * _3049) + _2857;
        _2969 = (((((_3029 * _2688) + _1072) * cbLight._m0[_2980].z) * _3048) * _3049) + _2859;
    }
    float _3115;
    float _3117;
    float _3119;
    float _3121;
    float _3123;
    float _3125;
    if (_2385.y == 0u)
    {
        uvec4 _3070 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3071 = _3070.x;
        uint _3082 = uint((float(_3070.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1008) / _3071))) + floor(float(uint(cbSceneParam._m0[85u].x * _1007) / _3071)));
        float _3092 = (log2(_2163 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3093 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
        uint _3096 = uint(isnan(14.0) ? _3093 : (isnan(_3093) ? 14.0 : min(_3093, 14.0)));
        uvec4 _3101 = texelFetch(g_lightClusterGridBuffer, int(((_3096 << 2u) + (_3082 << 6u)) >> 2u));
        uint _3102 = _3101.x;
        uint _3103 = _3070.z;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        float _3190;
        float _3192;
        if (((((1u << ((_3103 >> 4u) & 15u)) + 4294967295u) & _3102) == 0u) || ((_3103 & 240u) == 0u))
        {
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
            _3190 = 0.0;
            _3192 = 0.0;
        }
        else
        {
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3191;
            float _3193;
            float _3327 = 0.0;
            float _3328 = 0.0;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            uint _3333 = 0u;
            uint _3342;
            bool _3343;
            for (;;)
            {
                _3342 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3333 << 2u)) >> 2u)).x;
                _3343 = _3342 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3343)
                {
                    frontier_phi_66_pred = _3332;
                    frontier_phi_66_pred_1 = _3331;
                    frontier_phi_66_pred_2 = _3330;
                    frontier_phi_66_pred_3 = _3329;
                    frontier_phi_66_pred_4 = _3328;
                    frontier_phi_66_pred_5 = _3327;
                }
                else
                {
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    uint _3457;
                    _3451 = _3327;
                    _3452 = _3328;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3342;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    for (;;)
                    {
                        uint _3461 = uint(findLSB(_3457)) + (_3333 << 5u);
                        uint _3458 = (_3457 + 4294967295u) & _3457;
                        uint _3463 = _3461 * 48u;
                        vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3483 = (_3461 * 48u) + 4u;
                        vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3483)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 3u)).x));
                        uint _3502 = (_3461 * 48u) + 8u;
                        vec3 _3513 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3502)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 2u)).x));
                        float _3517 = _3477.x - _2161;
                        float _3518 = _3477.y - _2162;
                        float _3519 = _3477.z - _2163;
                        float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                        float _3523 = inversesqrt(_3520);
                        float _3524 = _3523 * _3517;
                        float _3525 = _3523 * _3518;
                        float _3526 = _3523 * _3519;
                        float _3527 = dot(vec3(_1026, _1029, _1032), vec3(_3524, _3525, _3526));
                        float _3532 = 1.0 - (_3520 * _3477.w);
                        float _4938 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3533 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3534 = sqrt(_3520) * _3496.w;
                        float _3537 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3527) + _3538;
                        float _3544 = _3534 * _3534;
                        float _3548 = ((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3533) / ((_3544 * 0.699999988079071044921875) + 1.0);
                        float _3552 = (-0.0) - _2161;
                        float _3553 = (-0.0) - _2162;
                        float _3554 = (-0.0) - _2163;
                        float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                        float _3559 = _3558 * _3552;
                        float _3560 = _3558 * _3553;
                        float _3561 = _3558 * _3554;
                        float _3568 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                        float _3569 = 1.0 - _1101;
                        float _3576 = sqrt(1.0 - ((1.0 - (_3569 * _3569)) * (1.0 - (_3568 * _3568))));
                        float _3577 = _3576 * _3576;
                        float _3578 = _3577 * _3577;
                        float _3579 = _3559 + _3524;
                        float _3580 = _3560 + _3525;
                        float _3581 = _3561 + _3526;
                        float _3585 = inversesqrt(dot(vec3(_3579, _3580, _3581), vec3(_3579, _3580, _3581)));
                        float _3589 = dot(vec3(_1026, _1029, _1032), vec3(_3559, _3560, _3561));
                        float _4954 = isnan(0.0) ? _3589 : (isnan(_3589) ? 0.0 : max(_3589, 0.0));
                        float _3592 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                        float _3593 = dot(vec3(_1026, _1029, _1032), vec3(_3585 * _3579, _3585 * _3580, _3585 * _3581));
                        float _4965 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3596 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3600 = ((_3596 * _3596) * (_3578 + (-1.0))) + 1.0;
                        float _3601 = _3537 * _3577;
                        float _3602 = _3601 * _3601;
                        float _3605 = ((1.0 - _3602) * _3527) + _3602;
                        float _4976 = isnan(0.0) ? _3605 : (isnan(_3605) ? 0.0 : max(_3605, 0.0));
                        float _3606 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3607 = 1.0 - _3577;
                        float _3617 = (0.5 / (((_3606 * ((_3592 * _3607) + _3577)) + 9.9999999392252902907785028219223e-09) + (((_3606 * _3607) + _3577) * _3592))) * _3606;
                        float _4987 = isnan(0.0) ? _3617 : (isnan(_3617) ? 0.0 : max(_3617, 0.0));
                        float _3628 = (((_3578 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3600 * _3600) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125))) * _3533;
                        _3386 = (_3548 * _3496.x) + _3454;
                        _3387 = (_3548 * _3496.y) + _3455;
                        _3388 = (_3548 * _3496.z) + _3456;
                        _3383 = (_3628 * _3513.x) + _3451;
                        _3384 = (_3628 * _3513.y) + _3452;
                        _3385 = (_3628 * _3513.z) + _3453;
                        if (_3458 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3451 = _3383;
                            _3452 = _3384;
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3458;
                        }
                    }
                    frontier_phi_66_pred = _3388;
                    frontier_phi_66_pred_1 = _3387;
                    frontier_phi_66_pred_2 = _3386;
                    frontier_phi_66_pred_3 = _3385;
                    frontier_phi_66_pred_4 = _3384;
                    frontier_phi_66_pred_5 = _3383;
                }
                _3193 = frontier_phi_66_pred;
                _3191 = frontier_phi_66_pred_1;
                _3189 = frontier_phi_66_pred_2;
                _3187 = frontier_phi_66_pred_3;
                _3185 = frontier_phi_66_pred_4;
                _3183 = frontier_phi_66_pred_5;
                uint _3334 = _3333 + 1u;
                if (_3334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3327 = _3183;
                    _3328 = _3185;
                    _3329 = _3187;
                    _3330 = _3189;
                    _3331 = _3191;
                    _3332 = _3193;
                    _3333 = _3334;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
            _3190 = _3191;
            _3192 = _3193;
        }
        uvec4 _3196 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3197 = _3196.z;
        uint _3199 = (_3197 >> 8u) & 15u;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        if (((4294967295u << _3199) & _3102) == 0u)
        {
            _3295 = _3182;
            _3297 = _3184;
            _3299 = _3186;
            _3301 = _3188;
            _3303 = _3190;
            _3305 = _3192;
        }
        else
        {
            float _3320 = inversesqrt(dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163)));
            float _3321 = _3320 * _2161;
            float _3322 = _3320 * _2162;
            float _3323 = _3320 * _2163;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3199 < ((_3197 >> 12u) & 15u))
            {
                float _3296;
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3434 = _3182;
                float _3435 = _3184;
                float _3436 = _3186;
                float _3437 = _3188;
                float _3438 = _3190;
                float _3439 = _3192;
                uint _3440 = _3199;
                uint _3449;
                bool _3450;
                for (;;)
                {
                    _3449 = texelFetch(g_lightClassification, int((((_3096 << 5u) + (_3082 << 9u)) + (_3440 << 2u)) >> 2u)).x;
                    _3450 = _3449 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3450)
                    {
                        frontier_phi_72_pred = _3439;
                        frontier_phi_72_pred_1 = _3438;
                        frontier_phi_72_pred_2 = _3437;
                        frontier_phi_72_pred_3 = _3436;
                        frontier_phi_72_pred_4 = _3435;
                        frontier_phi_72_pred_5 = _3434;
                    }
                    else
                    {
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3926;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3646 = _3434;
                        float _3647 = _3435;
                        float _3648 = _3436;
                        float _3649 = _3437;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        uint _3652 = _3449;
                        uint _3653;
                        vec4 _3678;
                        float _3679;
                        vec4 _3694;
                        vec3 _3706;
                        vec4 _3721;
                        vec4 _3736;
                        float _3782;
                        bool _3783;
                        for (;;)
                        {
                            uint _3663 = ((_3440 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3652));
                            _3653 = (_3652 + 4294967295u) & _3652;
                            uint _3665 = _3663 * 40u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3679 = _3678.w;
                            uint _3681 = (_3663 * 40u) + 4u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3696 = (_3663 * 40u) + 8u;
                            _3706 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x));
                            uint _3708 = (_3663 * 40u) + 16u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3663 * 40u) + 20u;
                            _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3738 = (_3663 * 40u) + 24u;
                            vec4 _3751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3738 + 3u)).x));
                            uint _3757 = (_3663 * 40u) + 28u;
                            vec4 _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            _3782 = fma(_2163, _3770.z, fma(_2162, _3770.y, _3770.x * _2161)) + _3770.w;
                            _3783 = !((fma(_2163, _3751.z, fma(_2162, _3751.y, _3751.x * _2161)) + _3751.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3783)
                            {
                                float _3810 = _3678.x - _2161;
                                float _3811 = _3678.y - _2162;
                                float _3812 = _3678.z - _2163;
                                float _3813 = dot(vec3(_3810, _3811, _3812), vec3(_3810, _3811, _3812));
                                float _3816 = inversesqrt(_3813);
                                float _3817 = _3816 * _3810;
                                float _3818 = _3816 * _3811;
                                float _3819 = _3816 * _3812;
                                float _3823 = 1.0 - (_3813 / (_3679 * _3679));
                                float _4998 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3824 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3828 = sqrt(_3813) * _3694.w;
                                float _3830 = 1.39999997615814208984375 / (_3828 + 1.39999997615814208984375);
                                float _3831 = _3830 * _3830;
                                float _3834 = ((1.0 - _3831) * dot(vec3(_3817, _3818, _3819), vec3(_1026, _1029, _1032))) + _3831;
                                float _3837 = _3828 * _3828;
                                float _3841 = (fma(_2163, _3721.z, fma(_2162, _3721.y, _3721.x * _2161)) + _3721.w) / _3782;
                                float _3842 = (fma(_2163, _3736.z, fma(_2162, _3736.y, _3736.x * _2161)) + _3736.w) / _3782;
                                float _3846 = 1.0 - dot(vec2(_3841, _3842), vec2(_3841, _3842));
                                float _5014 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3847 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
                                float _3848 = _3847 * (((isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0))) * _3824) / ((_3837 * 0.699999988079071044921875) + 1.0));
                                float _3860 = exp2(log2(1.0 / ((_3837 * 3.5) + 5.0)) * 0.25);
                                float _3861 = 1.0 - _1101;
                                float _3868 = sqrt(1.0 - ((1.0 - (_3861 * _3861)) * (1.0 - (_3860 * _3860))));
                                float _3869 = _3868 * _3868;
                                float _3870 = _3869 * _3869;
                                float _3871 = _3817 - _3321;
                                float _3872 = _3818 - _3322;
                                float _3873 = _3819 - _3323;
                                float _3877 = inversesqrt(dot(vec3(_3871, _3872, _3873), vec3(_3871, _3872, _3873)));
                                float _3881 = dot(vec3(_1026, _1029, _1032), vec3((-0.0) - _3321, (-0.0) - _3322, (-0.0) - _3323));
                                float _5025 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3884 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3885 = dot(vec3(_1026, _1029, _1032), vec3(_3877 * _3871, _3877 * _3872, _3877 * _3873));
                                float _5036 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3888 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3892 = ((_3888 * _3888) * (_3870 + (-1.0))) + 1.0;
                                float _3893 = _3830 * _3869;
                                float _3894 = _3893 * _3893;
                                float _3900 = ((1.0 - _3894) * dot(vec3(_1026, _1029, _1032), vec3(_3817, _3818, _3819))) + _3894;
                                float _5047 = isnan(0.0) ? _3900 : (isnan(_3900) ? 0.0 : max(_3900, 0.0));
                                float _3901 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3902 = 1.0 - _3869;
                                float _3912 = (0.5 / (((_3901 * ((_3884 * _3902) + _3869)) + 9.9999999392252902907785028219223e-09) + (((_3901 * _3902) + _3869) * _3884))) * _3901;
                                float _5058 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3922 = (_3847 * _3824) * (((_3870 * 3.1415927410125732421875) * (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0)))) / ((_3892 * _3892) * ((_3837 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3848 * _3694.y;
                                frontier_phi_78_pred_1 = _3848 * _3694.x;
                                frontier_phi_78_pred_2 = _3922 * _3706.z;
                                frontier_phi_78_pred_3 = _3922 * _3706.y;
                                frontier_phi_78_pred_4 = _3922 * _3706.x;
                                frontier_phi_78_pred_5 = _3848 * _3694.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3930 = frontier_phi_78_pred;
                            _3929 = frontier_phi_78_pred_1;
                            _3928 = frontier_phi_78_pred_2;
                            _3927 = frontier_phi_78_pred_3;
                            _3926 = frontier_phi_78_pred_4;
                            _3931 = frontier_phi_78_pred_5;
                            _3636 = _3929 + _3649;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            if (_3653 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3653;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3638;
                        frontier_phi_72_pred_1 = _3637;
                        frontier_phi_72_pred_2 = _3636;
                        frontier_phi_72_pred_3 = _3635;
                        frontier_phi_72_pred_4 = _3634;
                        frontier_phi_72_pred_5 = _3633;
                    }
                    _3306 = frontier_phi_72_pred;
                    _3304 = frontier_phi_72_pred_1;
                    _3302 = frontier_phi_72_pred_2;
                    _3300 = frontier_phi_72_pred_3;
                    _3298 = frontier_phi_72_pred_4;
                    _3296 = frontier_phi_72_pred_5;
                    uint _3441 = _3440 + 1u;
                    if (_3441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3434 = _3296;
                        _3435 = _3298;
                        _3436 = _3300;
                        _3437 = _3302;
                        _3438 = _3304;
                        _3439 = _3306;
                        _3440 = _3441;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3306;
                frontier_phi_60_61_ladder_1 = _3304;
                frontier_phi_60_61_ladder_2 = _3300;
                frontier_phi_60_61_ladder_3 = _3298;
                frontier_phi_60_61_ladder_4 = _3296;
                frontier_phi_60_61_ladder_5 = _3302;
            }
            else
            {
                frontier_phi_60_61_ladder = _3192;
                frontier_phi_60_61_ladder_1 = _3190;
                frontier_phi_60_61_ladder_2 = _3186;
                frontier_phi_60_61_ladder_3 = _3184;
                frontier_phi_60_61_ladder_4 = _3182;
                frontier_phi_60_61_ladder_5 = _3188;
            }
            _3295 = frontier_phi_60_61_ladder_4;
            _3297 = frontier_phi_60_61_ladder_3;
            _3299 = frontier_phi_60_61_ladder_2;
            _3301 = frontier_phi_60_61_ladder_5;
            _3303 = frontier_phi_60_61_ladder_1;
            _3305 = frontier_phi_60_61_ladder;
        }
        float _3310 = isnan(1.0) ? _1085 : (isnan(_1085) ? 1.0 : min(_1085, 1.0));
        _3115 = (_3310 * _3301) + _2627;
        _3117 = (_3310 * _3303) + _2629;
        _3119 = (_3310 * _3305) + _2631;
        _3121 = ((_3295 * _1069) * _3310) + _2965;
        _3123 = ((_3297 * _1071) * _3310) + _2967;
        _3125 = ((_3299 * _1072) * _3310) + _2969;
    }
    else
    {
        _3115 = _2627;
        _3117 = _2629;
        _3119 = _2631;
        _3121 = _2965;
        _3123 = _2967;
        _3125 = _2969;
    }
    float _5074 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
    float _5085 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _5096 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    uint _3145 = _289 + 6u;
    float _3153 = _1007 / cbSceneParam._m0[86u].x;
    float _3154 = _1008 / cbSceneParam._m0[86u].y;
    vec4 _3168 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, (log2((isnan(cbSceneParam._m0[77u].w) ? _942 : (isnan(_942) ? cbSceneParam._m0[77u].w : min(_942, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3170 = _3168.x;
    float _3171 = _3168.y;
    float _3172 = _3168.z;
    float _3173 = _3168.w;
    float _3245;
    float _3247;
    float _3249;
    float _3251;
    if (_942 > cbSceneParam._m0[78u].w)
    {
        float _3207 = isnan(_942) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _942 : min(cbSceneParam._m0[80u].w, _942));
        float _3208 = _3207 / _942;
        float _3219 = _3208 * _992;
        float _3220 = _993 * _3208;
        float _3221 = (-0.0) - _3220;
        float _3223 = _3208 * _994;
        float _3225 = (cbSceneParam._m0[77u].w * _3221) / _3207;
        float _3226 = _3225 + cbSceneParam._m0[79u].w;
        float _3227 = cbSceneParam._m0[79u].w - _3220;
        float _3233 = sqrt(((_3219 * _3219) + (_3220 * _3220)) + (_3223 * _3223));
        float _3236 = (1.0 - (cbSceneParam._m0[77u].w / _3207)) * _3233;
        float _3241 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3243 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3396;
        if (abs((_3221 - _3225) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3396 = ((((_3226 > 0.0) ? exp2(_3241 * _3226) : (2.0 - exp2(_3243 * _3226))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3236;
        }
        else
        {
            float _3356 = 1.0 / cbSceneParam._m0[80u].x;
            float _3357 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : max(_3226, _3227));
            float _3358 = isnan(_3227) ? _3226 : (isnan(_3226) ? _3227 : min(_3226, _3227));
            float _3367 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : min(_3357, 0.0));
            float _3368 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : min(_3358, 0.0));
            _3396 = ((abs(_3233 / _3221) * cbSceneParam._m0[80u].y) * ((((_3367 - _3368) * 2.0) - ((exp2(_3241 * (isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0)))) - exp2(_3241 * (isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))))) * _3356)) - ((exp2(_3243 * _3367) - exp2(_3243 * _3368)) * _3356))) + (_3236 * cbSceneParam._m0[80u].z);
        }
        vec4 _3398 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3153, _3154, 1.0), 0.0);
        float _3407 = exp2((_3396 * (-1.44269502162933349609375)) * (1.0 - _3398.w));
        float _3408 = log2(_3407);
        float _3424 = log2(_3173);
        _3245 = (exp2(_3424 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].x)) * _3398.x) / cbSceneParam._m0[78u].x)) + _3170;
        _3247 = (exp2(_3424 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].y)) * _3398.y) / cbSceneParam._m0[78u].y)) + _3171;
        _3249 = (exp2(_3424 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].z)) * _3398.z) / cbSceneParam._m0[78u].z)) + _3172;
        _3251 = _3407 * _3173;
    }
    else
    {
        _3245 = _3170;
        _3247 = _3171;
        _3249 = _3172;
        _3251 = _3173;
    }
    float _3263 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3264 = _3263 == 3.0;
    float _3265 = log2(_3251);
    float _3272 = exp2(_3265 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0))) * (_3115 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1085))) + ((_3121 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3273 = exp2(_3265 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3117 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1085))) + ((_3123 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3274 = exp2(_3265 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3119 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1085))) + ((_3125 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1892)) * cbPerFrame._m0[3u].x));
    float _3283 = (_3263 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3283 * (_3264 ? _3272 : (_3272 + (cbSceneParam._m0[72u].w * _3245)));
    SV_Target.y = _3283 * (_3264 ? _3273 : (_3273 + (cbSceneParam._m0[72u].w * _3247)));
    SV_Target.z = _3283 * (_3264 ? _3274 : (_3274 + (cbSceneParam._m0[72u].w * _3249)));
    SV_Target.w = cbInstanceData._m0[_3145].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3145].w;
}


