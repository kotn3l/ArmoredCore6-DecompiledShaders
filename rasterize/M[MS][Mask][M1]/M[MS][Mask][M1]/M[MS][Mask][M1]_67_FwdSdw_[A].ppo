#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1511;
float _4174;
float _4175;
float _4176;
float _4177;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _274 = _269 + 1u;
    uint _278 = _269 + 2u;
    float _287 = sqrt(((cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x) + (cbInstanceData._m0[_269].x * cbInstanceData._m0[_269].x)) + (cbInstanceData._m0[_278].x * cbInstanceData._m0[_278].x));
    float _288 = _287 * TEXCOORD.z;
    float _289 = _287 * TEXCOORD.w;
    vec4 _308 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _337 = _332.x * cbMtdParam._m0[11u].x;
    float _338 = _332.y * cbMtdParam._m0[11u].y;
    float _339 = _332.z * cbMtdParam._m0[11u].z;
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _288) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _289) + cbTextureTilingScale._m0[5u].w));
    vec4 _377 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _413 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _415 = _413.x;
    float _427 = dot(vec4(_415, _413.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _444 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _377.x) * 2.0) - ((((_415 - _427) * cbMtdParam._m0[23u].w) + _427) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4186 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _452 = (_445 * ((_358.x * cbMtdParam._m0[12u].x) - _337)) + _337;
    float _453 = (_445 * ((_358.y * cbMtdParam._m0[12u].y) - _338)) + _338;
    float _454 = (_445 * ((_358.z * cbMtdParam._m0[12u].z) - _339)) + _339;
    vec4 _471 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _288) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _289) + cbTextureTilingScale._m0[3u].w));
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _493 = _491.x;
    float _503 = dot(vec4(_493, _491.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _517 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _377.y) * 2.0) - ((((_493 - _503) * cbMtdParam._m0[23u].w) + _503) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4197 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _531 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _308.x) * ((_518 * ((_471.x * cbMtdParam._m0[13u].x) - _452)) + _452);
    float _534 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _308.y) * ((_518 * ((_471.y * cbMtdParam._m0[13u].y) - _453)) + _453);
    float _537 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _308.z) * ((_518 * ((_471.z * cbMtdParam._m0[13u].z) - _454)) + _454);
    vec4 _555 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _288) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _289) + cbTextureTilingScale._m0[4u].w));
    vec4 _572 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _574 = _572.x;
    float _575 = _572.y;
    float _576 = _572.z;
    float _583 = ((_555.x - _574) * _445) + _574;
    float _584 = ((_555.y - _575) * _445) + _575;
    float _585 = ((_555.z - _576) * _445) + _576;
    vec4 _597 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _288) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _289) + cbTextureTilingScale._m0[2u].w));
    float _610 = ((_597.z - _585) * _518) + _585;
    float _613 = ((((_597.x - _583) * _518) + _583) * 2.0) + (-1.0);
    float _615 = ((((_597.y - _584) * _518) + _584) * 2.0) + (-1.0);
    float _616 = dot(vec2(_613, _615), vec2(_613, _615));
    float _4208 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _621 = sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))));
    vec4 _635 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _660 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _288) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _289) + cbTextureTilingScale._m0[11u].w));
    float _662 = _660.x;
    float _663 = 1.0 - _662;
    float _672 = isnan(-1.0) ? cbMtdParam._m0[24u].x : (isnan(cbMtdParam._m0[24u].x) ? (-1.0) : max(cbMtdParam._m0[24u].x, -1.0));
    float _675 = ((isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : min(_672, 0.0))) * TEXCOORD_8.x) + TEXCOORD_8.w;
    float _684 = (_675 - ((((((_662 - _663) * cbMtdParam._m0[24u].z) + _663) + 0.00999999977648258209228515625) * cbMtdParam._m0[21u].z) * (1.0 - _675))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4229 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _685 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _692 = (_685 * (cbMtdParam._m0[17u].x - _531)) + _531;
    float _693 = (_685 * (cbMtdParam._m0[17u].y - _534)) + _534;
    float _694 = (_685 * (cbMtdParam._m0[17u].z - _537)) + _537;
    vec4 _706 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _288) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _289) + cbTextureTilingScale._m0[19u].w));
    float _708 = _706.x;
    float _709 = 1.0 - _708;
    float _734 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_708 - _709) * cbMtdParam._m0[24u].w) + _709) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4240 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _735 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _743 = ((((cbMtdParam._m0[10u].x - _692) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _735) + _692;
    float _744 = ((((cbMtdParam._m0[10u].y - _693) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _735) + _693;
    float _745 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _694)) * _735) + _694;
    vec4 _771 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _773 = _771.x;
    float _790 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _288) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _289) + cbTextureTilingScale._m0[9u].w)).x - _773) * _445) + _773;
    float _807 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _288) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _289) + cbTextureTilingScale._m0[21u].w)).x - _790) * _518) + _790;
    float _811 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _807) * cbMtdParam._m0[19u].z) + _807;
    float _813 = _811 - (_811 * _685);
    float _815 = _813 - (_813 * _735);
    float _819 = (cbMtdParam._m0[19u].w * (_635.z - _610)) + _610;
    vec4 _833 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _288) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _289) + cbTextureTilingScale._m0[15u].w));
    float _840 = (_833.x * 2.0) + (-1.0);
    float _841 = (_833.y * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _4251 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _850 = (_685 * (_833.z - _819)) + _819;
    float _853 = ((cbMtdParam._m0[23u].x - _850) * _735) + _850;
    vec4 _872 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _288) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _289) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _878 = (_872.x * 2.0) + (-1.0);
    float _879 = (_872.y * 2.0) + (-1.0);
    float _880 = dot(vec2(_878, _879), vec2(_878, _879));
    float _4262 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _888 = (((_635.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _613;
    float _889 = (((_635.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _615;
    float _901 = (((_840 - _888) + (cbMtdParam._m0[21u].x * _888)) * _685) + _888;
    float _902 = (((_841 - _889) + (cbMtdParam._m0[21u].x * _889)) * _685) + _889;
    float _903 = (_685 * (sqrt(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) - _621)) + _621;
    float _914 = (((_878 - _901) + (_901 * cbMtdParam._m0[22u].z)) * _735) + _901;
    float _915 = (((_879 - _902) + (_902 * cbMtdParam._m0[22u].z)) * _735) + _902;
    float _916 = ((sqrt(1.0 - (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0)))) - _903) * _735) + _903;
    float _918 = cbMtdParam._m0[22u].x + _635.w;
    float _921 = fma(_916, _256 * NORMAL.x, fma(_915, _263 * TANGENT.x, (_249 * _241) * _914));
    float _924 = fma(_916, _256 * NORMAL.y, fma(_915, _263 * TANGENT.y, (_249 * _242) * _914));
    float _927 = fma(_916, _256 * NORMAL.z, fma(_915, _263 * TANGENT.z, (_249 * _243) * _914));
    float _931 = inversesqrt(dot(vec3(_921, _924, _927), vec3(_921, _924, _927)));
    float _932 = _931 * _921;
    float _933 = _931 * _924;
    float _934 = _931 * _927;
    float _4273 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
    float _935 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _4284 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _4295 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4306 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4317 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4328 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _940 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
    float _954 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1004 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _994);
    float _1005 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _994);
    float _1006 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _994);
    float _1010 = inversesqrt(dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006)));
    float _1011 = _1004 * _1010;
    float _1012 = _1005 * _1010;
    float _1013 = _1006 * _1010;
    vec4 _1018 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1020 = _1018.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1192 = sqrt(((_1004 * _1004) + (_1005 * _1005)) + (_1006 * _1006));
        float _1198 = (cbMatDynParam._m0[5u].x * _1192) + cbMatDynParam._m0[5u].y;
        float _4339 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1203 = (cbMatDynParam._m0[5u].z * _1192) + cbMatDynParam._m0[5u].w;
        float _4350 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) - _1199)) + _1199) < ((_1020 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1031 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1032 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1050 = fma(_934, cbSceneParam._m0[5u].z, fma(_933, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _932));
    float _1053 = fma(_934, cbSceneParam._m0[6u].z, fma(_933, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _932));
    float _1056 = fma(_934, cbSceneParam._m0[7u].z, fma(_933, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _932));
    uint _1069 = _269 + 9u;
    uint _1070 = _1069 + uint(cbMatDynParam._m0[0u].w);
    float _1076 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * cbInstanceData._m0[_1070].x;
    float _1077 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * cbInstanceData._m0[_1070].y;
    float _1078 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * cbInstanceData._m0[_1070].z;
    float _4361 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1079 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
    float _4372 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
    float _1080 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
    float _4383 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _1082 = 1.0 - _940;
    float _1083 = _1079 * _1082;
    float _1084 = _1080 * _1082;
    float _1085 = _1081 * _1082;
    float _1090 = (_1079 + (-0.039999999105930328369140625)) * _940;
    float _1091 = (_1080 + (-0.039999999105930328369140625)) * _940;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _940;
    float _1093 = _1090 + 0.039999999105930328369140625;
    float _1095 = _1091 + 0.039999999105930328369140625;
    float _1096 = _1092 + 0.039999999105930328369140625;
    vec4 _1105 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1031, cbSceneParam._m0[86u].y * _1032));
    float _1109 = ((isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * TEXCOORD_5.w) * _1105.x;
    float _1110 = dot(vec3(_932, _933, _934), vec3(_1011, _1012, _1013));
    float _1113 = _1110 * 2.0;
    float _1117 = (_1113 * _932) - _1011;
    float _1118 = (_1113 * _933) - _1012;
    float _1119 = (_1113 * _934) - _1013;
    float _1123 = abs(dot(vec3(_1011, _1012, _1013), vec3(_932, _933, _934)));
    float _4394 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1125 = sqrt(_935);
    float _1138 = exp2((_1125 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1125 * 3.0));
    float _1144 = (1.0 - _1138) * ((_1125 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1145 = _1138 * _1125;
    float _1173 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1177 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1181 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1510;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    float _1516;
    float _1517;
    float _1518;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1235 = fma(_1181, cbModelParam._m0[26u].z, fma(_1177, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1173));
        float _1239 = fma(_1181, cbModelParam._m0[27u].z, fma(_1177, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1173));
        float _1243 = fma(_1181, cbModelParam._m0[28u].z, fma(_1177, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1173));
        float _1268 = _1173 + _932;
        float _1269 = _1177 + _933;
        float _1270 = _1181 + _934;
        float _1280 = fma(_1270, cbModelParam._m0[26u].z, fma(_1269, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1268)) - _1235;
        float _1281 = fma(_1270, cbModelParam._m0[27u].z, fma(_1269, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1268)) - _1239;
        float _1282 = fma(_1270, cbModelParam._m0[28u].z, fma(_1269, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1268)) - _1243;
        float _1286 = inversesqrt(dot(vec3(_1280, _1281, _1282), vec3(_1280, _1281, _1282)));
        float _1299 = ((_1286 * _1280) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1235 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1300 = ((_1286 * _1281) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1239 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1301 = ((_1286 * _1282) / cbModelParam._m0[34u].z) + ((((((_1243 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1299, _1300, _1301), 0.0);
        float _1338 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1304.x + (-0.5));
        float _1340 = _1338 * (_1304.y + (-0.5));
        float _1341 = _1338 * (_1304.z + (-0.5));
        float _1348 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1311.x + (-0.5));
        float _1350 = _1348 * (_1311.y + (-0.5));
        float _1351 = _1348 * (_1311.z + (-0.5));
        float _1358 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1318.x + (-0.5));
        float _1360 = _1358 * (_1318.y + (-0.5));
        float _1361 = _1358 * (_1318.z + (-0.5));
        float _1368 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1369 = _1368 * (_1325.x + (-0.5));
        float _1370 = _1368 * (_1325.y + (-0.5));
        float _1371 = _1368 * (_1325.z + (-0.5));
        float _1372 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1373 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1374 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1375 = _1339 * 0.5;
        float _1376 = _1349 * 0.5;
        float _1377 = _1359 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1392 = (dot(vec3(_932, _933, _934), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1402 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1372 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4442 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1404 + 1.0))) + _1409) * _1372;
        float _1419 = _1340 * 0.5;
        float _1420 = _1350 * 0.5;
        float _1421 = _1360 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_932, _933, _934), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4453 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1373 + 9.9999997473787516355514526367188e-06);
        float _4464 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4475 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_1446 + 1.0))) + _1451) * _1373;
        float _1461 = _1341 * 0.5;
        float _1462 = _1351 * 0.5;
        float _1463 = _1361 * 0.5;
        float _1464 = dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463));
        float _1469 = (_1464 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1464);
        float _1477 = (dot(vec3(_932, _933, _934), vec3(_1469 * _1461, _1469 * _1462, _1469 * _1463)) + 1.0) * 0.5;
        float _4486 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1486 = sqrt(((_1462 * _1462) + (_1461 * _1461)) + (_1463 * _1463)) / (_1374 + 9.9999997473787516355514526367188e-06);
        float _4497 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
        float _1488 = _1487 * 2.0;
        float _1492 = (1.0 - _1487) / (_1487 + 1.0);
        float _4508 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _1502 = ((((1.0 - _1493) * (_1488 + 2.0)) * exp2(log2(isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_1488 + 1.0))) + _1493) * _1374;
        _1510 = _1341;
        _1512 = _1340;
        _1513 = _1339;
        _1514 = _1351;
        _1515 = _1350;
        _1516 = _1349;
        _1517 = _1361;
        _1518 = _1360;
        _1519 = _1359;
        _1520 = _1374;
        _1521 = _1373;
        _1522 = _1372;
        _1523 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1524 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
        _1525 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0)));
    }
    else
    {
        _1510 = _1511;
        _1512 = _1511;
        _1513 = _1511;
        _1514 = _1511;
        _1515 = _1511;
        _1516 = _1511;
        _1517 = _1511;
        _1518 = _1511;
        _1519 = _1511;
        _1520 = _1511;
        _1521 = _1511;
        _1522 = _1511;
        _1523 = 0.0;
        _1524 = 0.0;
        _1525 = 0.0;
    }
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1552 = fma(_1181, cbModelParam._m0[30u].z, fma(_1177, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173));
        float _1556 = fma(_1181, cbModelParam._m0[31u].z, fma(_1177, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173));
        float _1560 = fma(_1181, cbModelParam._m0[32u].z, fma(_1177, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173));
        float _1583 = _1173 + _932;
        float _1584 = _1177 + _933;
        float _1585 = _1181 + _934;
        float _1595 = fma(_1585, cbModelParam._m0[30u].z, fma(_1584, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1583)) - _1552;
        float _1596 = fma(_1585, cbModelParam._m0[31u].z, fma(_1584, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1583)) - _1556;
        float _1597 = fma(_1585, cbModelParam._m0[32u].z, fma(_1584, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1583)) - _1560;
        float _1601 = inversesqrt(dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597)));
        float _1614 = ((_1601 * _1595) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1552 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1615 = ((_1601 * _1596) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1556 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1601 * _1597) / cbModelParam._m0[35u].z) + ((((((_1560 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1618 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1614, _1615, _1616), 0.0);
        float _1651 = exp2((_1618.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1618.x + (-0.5));
        float _1653 = _1651 * (_1618.y + (-0.5));
        float _1654 = _1651 * (_1618.z + (-0.5));
        float _1661 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1625.x + (-0.5));
        float _1663 = _1661 * (_1625.y + (-0.5));
        float _1664 = _1661 * (_1625.z + (-0.5));
        float _1671 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1632.x + (-0.5));
        float _1673 = _1671 * (_1632.y + (-0.5));
        float _1674 = _1671 * (_1632.z + (-0.5));
        float _1681 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1639.x + (-0.5));
        float _1683 = _1681 * (_1639.y + (-0.5));
        float _1684 = _1681 * (_1639.z + (-0.5));
        float _1685 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = _1652 * 0.5;
        float _1689 = _1662 * 0.5;
        float _1690 = _1672 * 0.5;
        float _1691 = dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690));
        float _1696 = (_1691 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1691);
        float _1704 = (dot(vec3(_932, _933, _934), vec3(_1696 * _1688, _1696 * _1689, _1696 * _1690)) + 1.0) * 0.5;
        float _4549 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1713 = sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690)) / (_1685 + 9.9999997473787516355514526367188e-06);
        float _4560 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1714 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
        float _1715 = _1714 * 2.0;
        float _1719 = (1.0 - _1714) / (_1714 + 1.0);
        float _4571 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
        float _1720 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1729 = ((((1.0 - _1720) * (_1715 + 2.0)) * exp2(log2(isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0))) * (_1715 + 1.0))) + _1720) * _1685;
        float _1730 = _1653 * 0.5;
        float _1731 = _1663 * 0.5;
        float _1732 = _1673 * 0.5;
        float _1733 = dot(vec3(_1730, _1731, _1732), vec3(_1730, _1731, _1732));
        float _1738 = (_1733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1733);
        float _1746 = (dot(vec3(_932, _933, _934), vec3(_1738 * _1730, _1738 * _1731, _1738 * _1732)) + 1.0) * 0.5;
        float _4582 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
        float _1755 = sqrt(((_1731 * _1731) + (_1730 * _1730)) + (_1732 * _1732)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4593 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1756 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
        float _1757 = _1756 * 2.0;
        float _1761 = (1.0 - _1756) / (_1756 + 1.0);
        float _4604 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1771 = ((((1.0 - _1762) * (_1757 + 2.0)) * exp2(log2(isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * (_1757 + 1.0))) + _1762) * _1686;
        float _1772 = _1654 * 0.5;
        float _1773 = _1664 * 0.5;
        float _1774 = _1674 * 0.5;
        float _1775 = dot(vec3(_1772, _1773, _1774), vec3(_1772, _1773, _1774));
        float _1780 = (_1775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1775);
        float _1788 = (dot(vec3(_932, _933, _934), vec3(_1780 * _1772, _1780 * _1773, _1780 * _1774)) + 1.0) * 0.5;
        float _4615 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        float _1797 = sqrt(((_1773 * _1773) + (_1772 * _1772)) + (_1774 * _1774)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4626 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1798 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
        float _1799 = _1798 * 2.0;
        float _1803 = (1.0 - _1798) / (_1798 + 1.0);
        float _4637 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
        float _1813 = ((((1.0 - _1804) * (_1799 + 2.0)) * exp2(log2(isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_1799 + 1.0))) + _1804) * _1687;
        _1821 = _1654;
        _1822 = _1653;
        _1823 = _1652;
        _1824 = _1664;
        _1825 = _1663;
        _1826 = _1662;
        _1827 = _1674;
        _1828 = _1673;
        _1829 = _1672;
        _1830 = _1687;
        _1831 = _1686;
        _1832 = _1685;
        _1833 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0)));
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0)));
    }
    else
    {
        _1821 = _1511;
        _1822 = _1511;
        _1823 = _1511;
        _1824 = _1511;
        _1825 = _1511;
        _1826 = _1511;
        _1827 = _1511;
        _1828 = _1511;
        _1829 = _1511;
        _1830 = _1511;
        _1831 = _1511;
        _1832 = _1511;
        _1833 = 0.0;
        _1834 = 0.0;
        _1835 = 0.0;
    }
    float _1845 = (cbModelParam._m0[1u].x * (_1833 - _1523)) + _1523;
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1524)) + _1524;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1525)) + _1525;
    float _1868 = fma(_1847, cbSceneParam._m0[89u].z, fma(_1846, cbSceneParam._m0[89u].y, _1845 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1847, cbSceneParam._m0[90u].z, fma(_1846, cbSceneParam._m0[90u].y, _1845 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1847, cbSceneParam._m0[91u].z, fma(_1846, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1845));
    float _1889 = _1117 * 0.5;
    float _1890 = _1118 * 0.5;
    float _1891 = _1119 * 0.5;
    float _1892 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1895 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1898 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1821, _1824, _1827, _1830));
    float _1932;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1905 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1510, _1514, _1517, _1520));
        float _1909 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1512, _1515, _1518, _1521));
        float _1913 = dot(vec4(_1889, _1890, _1891, 1.0), vec4(_1513, _1516, _1519, _1522));
        float _1920 = dot(vec4(cbModelParam._m0[39u]), vec4(_1889, _1890, _1891, 1.0));
        _1932 = dot(vec3(isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0)), isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1920) ? 0.0 : (isnan(0.0) ? _1920 : max(0.0, _1920))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1932 = 1.0;
    }
    float _1943;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1934 = dot(vec4(cbModelParam._m0[40u]), vec4(_1889, _1890, _1891, 1.0));
        _1943 = dot(vec3(isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1934) ? 0.0 : (isnan(0.0) ? _1934 : max(0.0, _1934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1943 = 1.0;
    }
    float _1947 = (_1943 * cbModelParam._m0[1u].x) + (_1932 * (1.0 - cbModelParam._m0[1u].x));
    float _1957 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _935);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1957 : min(cbModelParam._m0[25u].z, _1957));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2006 = fma(_1181, cbModelParam._m0[13u].z, fma(_1177, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173)) + cbModelParam._m0[13u].w;
        float _2010 = fma(_1181, cbModelParam._m0[14u].z, fma(_1177, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173)) + cbModelParam._m0[14u].w;
        float _2014 = fma(_1181, cbModelParam._m0[15u].z, fma(_1177, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173)) + cbModelParam._m0[15u].w;
        float _2017 = fma(_1119, cbModelParam._m0[13u].z, fma(_1118, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117));
        float _2020 = fma(_1119, cbModelParam._m0[14u].z, fma(_1118, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117));
        float _2023 = fma(_1119, cbModelParam._m0[15u].z, fma(_1118, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117));
        float _2051;
        if (_2017 > 0.0)
        {
            _2051 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2051 = frontier_phi_17_15_ladder;
        }
        float _2223;
        if (_2020 > 0.0)
        {
            _2223 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2223 = frontier_phi_26_22_ladder;
        }
        float _2518;
        if (_2023 > 0.0)
        {
            _2518 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2518 = frontier_phi_38_33_ladder;
        }
        float _2520 = isnan(_2223) ? _2051 : (isnan(_2051) ? _2223 : min(_2051, _2223));
        float _2521 = isnan(_2518) ? _2520 : (isnan(_2520) ? _2518 : min(_2520, _2518));
        float _2525 = (_2521 * _2017) + _2006;
        float _2526 = (_2521 * _2020) + _2010;
        float _2527 = (_2521 * _2023) + _2014;
        float _2528 = _2521 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2528;
        float _2532 = _2528 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 > _2532) || ((_2526 < _2530) || ((_2525 < _2530) || (_2525 > _2532))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2672 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2527, cbModelParam._m0[9u].z, fma(_2526, cbModelParam._m0[9u].y, _2525 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2527, cbModelParam._m0[10u].z, fma(_2526, cbModelParam._m0[10u].y, _2525 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2527, cbModelParam._m0[11u].z, fma(_2526, cbModelParam._m0[11u].y, _2525 * cbModelParam._m0[11u].x))), _1958);
            frontier_phi_16_38_ladder = _2672.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2672.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2672.x * cbModelParam._m0[1u].y;
        }
        _2039 = frontier_phi_16_38_ladder_2;
        _2041 = frontier_phi_16_38_ladder_1;
        _2043 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1117, _1118, _1119), _1958);
        _2039 = _2027.x * cbModelParam._m0[1u].y;
        _2041 = _2027.y * cbModelParam._m0[1u].y;
        _2043 = _2027.z * cbModelParam._m0[1u].y;
    }
    float _2047 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _935);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2047 : min(cbModelParam._m0[25u].w, _2047));
    float _2138;
    float _2140;
    float _2142;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2102 = fma(_1181, cbModelParam._m0[21u].z, fma(_1177, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173)) + cbModelParam._m0[21u].w;
        float _2106 = fma(_1181, cbModelParam._m0[22u].z, fma(_1177, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173)) + cbModelParam._m0[22u].w;
        float _2110 = fma(_1181, cbModelParam._m0[23u].z, fma(_1177, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173)) + cbModelParam._m0[23u].w;
        float _2113 = fma(_1119, cbModelParam._m0[21u].z, fma(_1118, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117));
        float _2116 = fma(_1119, cbModelParam._m0[22u].z, fma(_1118, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117));
        float _2119 = fma(_1119, cbModelParam._m0[23u].z, fma(_1118, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117));
        float _2228;
        if (_2113 > 0.0)
        {
            _2228 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2228 = frontier_phi_28_24_ladder;
        }
        float _2545;
        if (_2116 > 0.0)
        {
            _2545 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2545 = frontier_phi_40_35_ladder;
        }
        float _2883;
        if (_2119 > 0.0)
        {
            _2883 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2883 = frontier_phi_50_47_ladder;
        }
        float _2885 = isnan(_2545) ? _2228 : (isnan(_2228) ? _2545 : min(_2228, _2545));
        float _2886 = isnan(_2883) ? _2885 : (isnan(_2885) ? _2883 : min(_2885, _2883));
        float _2890 = (_2886 * _2113) + _2102;
        float _2891 = (_2886 * _2116) + _2106;
        float _2892 = (_2886 * _2119) + _2110;
        float _2893 = _2886 * 9.9999997473787516355514526367188e-05;
        float _2894 = (-1.0) - _2893;
        float _2896 = _2893 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2892 > _2896) || ((_2892 < _2894) || ((_2891 > _2896) || ((_2891 < _2894) || ((_2890 < _2894) || (_2890 > _2896))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2892, cbModelParam._m0[17u].z, fma(_2891, cbModelParam._m0[17u].y, _2890 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2892, cbModelParam._m0[18u].z, fma(_2891, cbModelParam._m0[18u].y, _2890 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2892, cbModelParam._m0[19u].z, fma(_2891, cbModelParam._m0[19u].y, _2890 * cbModelParam._m0[19u].x))), _2048);
            frontier_phi_25_50_ladder = _3014.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3014.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3014.x * cbModelParam._m0[1u].z;
        }
        _2138 = frontier_phi_25_50_ladder_2;
        _2140 = frontier_phi_25_50_ladder_1;
        _2142 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1117, _1118, _1119), _2048);
        _2138 = _2122.x * cbModelParam._m0[1u].z;
        _2140 = _2122.y * cbModelParam._m0[1u].z;
        _2142 = _2122.z * cbModelParam._m0[1u].z;
    }
    float _2155 = (((_1144 * _1093) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2138 - _2039)) + _2039);
    float _2157 = (((_1144 * _1095) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2140 - _2041)) + _2041);
    float _2159 = (((_1144 * _1096) + _1145) * _1109) * ((cbModelParam._m0[1u].w * (_2142 - _2043)) + _2043);
    float _2162 = fma(_2159, cbSceneParam._m0[89u].z, fma(_2157, cbSceneParam._m0[89u].y, _2155 * cbSceneParam._m0[89u].x));
    float _2165 = fma(_2159, cbSceneParam._m0[90u].z, fma(_2157, cbSceneParam._m0[90u].y, _2155 * cbSceneParam._m0[90u].x));
    float _2168 = fma(_2159, cbSceneParam._m0[91u].z, fma(_2157, cbSceneParam._m0[91u].y, _2155 * cbSceneParam._m0[91u].x));
    float _2202 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2206 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2210 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2214 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2215 = _2202 / _2214;
    float _2216 = _2206 / _2214;
    float _2217 = _2210 / _2214;
    float _2364;
    float _2365;
    float _2366;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2244 = ((uint(_2217 > cbSceneParam._m0[59u].y) + uint(_2217 > cbSceneParam._m0[59u].x)) + uint(_2217 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2245 = _2244 + 43u;
        uint _2253 = _2244 + 44u;
        uint _2261 = _2244 + 45u;
        uint _2269 = _2244 + 46u;
        float _2280 = fma(_2214, cbSceneParam._m0[_2245].w, fma(_2210, cbSceneParam._m0[_2245].z, fma(_2206, cbSceneParam._m0[_2245].y, _2202 * cbSceneParam._m0[_2245].x)));
        float _2284 = fma(_2214, cbSceneParam._m0[_2253].w, fma(_2210, cbSceneParam._m0[_2253].z, fma(_2206, cbSceneParam._m0[_2253].y, _2202 * cbSceneParam._m0[_2253].x)));
        float _2292 = fma(_2214, cbSceneParam._m0[_2269].w, fma(_2210, cbSceneParam._m0[_2269].z, fma(_2206, cbSceneParam._m0[_2269].y, _2202 * cbSceneParam._m0[_2269].x)));
        float _2297 = cbSceneParam._m0[33u].z * _2292;
        float _2299 = cbSceneParam._m0[33u].w * _2292;
        float _2302 = fma(_2214, cbSceneParam._m0[_2261].w, fma(_2210, cbSceneParam._m0[_2261].z, fma(_2206, cbSceneParam._m0[_2261].y, _2202 * cbSceneParam._m0[_2261].x))) / _2292;
        float _2350 = (cbSceneParam._m0[33u].x - sqrt(((_2216 * _2216) + (_2215 * _2215)) + (_2217 * _2217))) * cbSceneParam._m0[33u].y;
        float _4763 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2357 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2297 + _2280) / _2292, (_2299 + _2284) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2299 + _2280) / _2292, (_2284 - _2297) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 - _2297) / _2292, (_2284 - _2299) / _2292), _2302), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2280 - _2299) / _2292, (_2297 + _2284) / _2292), _2302), 0.0)).x), vec4(0.25)));
        _2364 = 1.0 - (_2357 * cbSceneParam._m0[34u].x);
        _2365 = 1.0 - (_2357 * cbSceneParam._m0[34u].y);
        _2366 = 1.0 - (_2357 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2364 = 1.0;
        _2365 = 1.0;
        _2366 = 1.0;
    }
    float _2430;
    float _2432;
    float _2434;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2418 = fma(_2214, cbSceneParam._m0[63u].w, fma(_2210, cbSceneParam._m0[63u].z, fma(_2206, cbSceneParam._m0[63u].y, _2202 * cbSceneParam._m0[63u].x)));
        float _2419 = fma(_2214, cbSceneParam._m0[60u].w, fma(_2210, cbSceneParam._m0[60u].z, fma(_2206, cbSceneParam._m0[60u].y, _2202 * cbSceneParam._m0[60u].x))) / _2418;
        float _2420 = fma(_2214, cbSceneParam._m0[61u].w, fma(_2210, cbSceneParam._m0[61u].z, fma(_2206, cbSceneParam._m0[61u].y, _2202 * cbSceneParam._m0[61u].x))) / _2418;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2419 >= cbSceneParam._m0[64u].x) && (_2420 >= cbSceneParam._m0[64u].y)) && (_2419 <= cbSceneParam._m0[64u].z)) && (_2420 <= cbSceneParam._m0[64u].w))
        {
            float _2558 = fma(_2214, cbSceneParam._m0[62u].w, fma(_2210, cbSceneParam._m0[62u].z, fma(_2206, cbSceneParam._m0[62u].y, _2202 * cbSceneParam._m0[62u].x))) / _2418;
            float _2562 = isnan(cbSceneParam._m0[41u].w) ? _2558 : (isnan(_2558) ? cbSceneParam._m0[41u].w : max(_2558, cbSceneParam._m0[41u].w));
            float _2605 = (cbSceneParam._m0[33u].x - sqrt(((_2216 * _2216) + (_2215 * _2215)) + (_2217 * _2217))) * cbSceneParam._m0[33u].y;
            float _4779 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
            float _2612 = (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2419, cbSceneParam._m0[33u].w + _2420), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2419, _2420 - cbSceneParam._m0[33u].z), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2419 - cbSceneParam._m0[33u].z, _2420 - cbSceneParam._m0[33u].w), _2562), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2419 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2420), _2562), 0.0)).x), vec4(0.25)));
            float _2616 = 1.0 - (_2612 * cbSceneParam._m0[34u].x);
            float _2617 = 1.0 - (_2612 * cbSceneParam._m0[34u].y);
            float _2618 = 1.0 - (_2612 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2618) ? _2366 : (isnan(_2366) ? _2618 : min(_2366, _2618));
            frontier_phi_37_36_ladder_1 = isnan(_2617) ? _2365 : (isnan(_2365) ? _2617 : min(_2365, _2617));
            frontier_phi_37_36_ladder_2 = isnan(_2616) ? _2364 : (isnan(_2364) ? _2616 : min(_2364, _2616));
        }
        else
        {
            frontier_phi_37_36_ladder = _2366;
            frontier_phi_37_36_ladder_1 = _2365;
            frontier_phi_37_36_ladder_2 = _2364;
        }
        _2430 = frontier_phi_37_36_ladder_2;
        _2432 = frontier_phi_37_36_ladder_1;
        _2434 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2430 = _2364;
        _2432 = _2365;
        _2434 = _2366;
    }
    uvec4 _2439 = floatBitsToUint(cbInstanceData._m0[_269 + 5u]);
    uint _2441 = _2439.x * 14u;
    uint _2442 = _2441 + 13u;
    float _2449 = _1109 + (-1.0);
    float _2454 = (cbLight._m0[_2442].x * _2449) + 1.0;
    float _2455 = (cbLight._m0[_2442].y * _2449) + 1.0;
    float _2456 = (cbLight._m0[_2442].z * _2449) + 1.0;
    float _2457 = (cbLight._m0[_2442].w * _2449) + 1.0;
    uint _2458 = _2441 + 5u;
    float _2464 = isnan(1.0) ? _2455 : (isnan(_2455) ? 1.0 : min(_2455, 1.0));
    uint _2468 = _2441 + 4u;
    float _2477 = isnan(1.0) ? _2454 : (isnan(_2454) ? 1.0 : min(_2454, 1.0));
    uint _2481 = _2441 | 1u;
    float _2492 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_932, _933, _934));
    float _2495 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_932, _933, _934));
    float _4815 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _4826 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _2500 = (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * 0.3183098733425140380859375;
    float _2502 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * 0.3183098733425140380859375;
    float _2509 = ((cbLight._m0[_2458].x * _2464) * _2502) + (((cbLight._m0[_2468].x * _2430) * _2477) * _2500);
    float _2510 = ((_2464 * cbLight._m0[_2458].y) * _2502) + (((cbLight._m0[_2468].y * _2432) * _2477) * _2500);
    float _2511 = ((_2464 * cbLight._m0[_2458].z) * _2502) + (((cbLight._m0[_2468].z * _2434) * _2477) * _2500);
    uvec4 _2515 = floatBitsToUint(cbLight._m0[_2441 + 12u]);
    bool _2517 = _2515.x == 0u;
    float _2619;
    float _2621;
    float _2623;
    if (_2517)
    {
        _2619 = _2509;
        _2621 = _2510;
        _2623 = _2511;
    }
    else
    {
        uint _2627 = _2441 + 6u;
        float _2643 = (dot(vec3(cbLight._m0[_2441 + 2u].xyz), vec3(_932, _933, _934)) * 0.5) + 0.5;
        float _2644 = _2643 * _2643;
        float _4837 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2645 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _2646 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _2619 = (((cbLight._m0[_2627].x * 0.3183098733425140380859375) * _2645) * _2646) + _2509;
        _2621 = (((cbLight._m0[_2627].y * 0.3183098733425140380859375) * _2645) * _2646) + _2510;
        _2623 = (((cbLight._m0[_2627].z * 0.3183098733425140380859375) * _2645) * _2646) + _2511;
    }
    bool _2626 = _2515.y == 0u;
    float _2681;
    float _2683;
    float _2685;
    if (_2626)
    {
        _2681 = _2619;
        _2683 = _2621;
        _2685 = _2623;
    }
    else
    {
        uint _2854 = _2441 + 7u;
        float _2870 = (dot(vec3(cbLight._m0[_2441 + 3u].xyz), vec3(_932, _933, _934)) * 0.5) + 0.5;
        float _2871 = _2870 * _2870;
        float _4853 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
        float _2872 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2873 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _2681 = (((cbLight._m0[_2854].x * 0.3183098733425140380859375) * _2872) * _2873) + _2619;
        _2683 = (((cbLight._m0[_2854].y * 0.3183098733425140380859375) * _2872) * _2873) + _2621;
        _2685 = (((cbLight._m0[_2854].z * 0.3183098733425140380859375) * _2872) * _2873) + _2623;
    }
    uint _2688 = _2441 + 8u;
    float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2441].w)) * _935) * 0.949999988079071044921875);
    float _2702 = _2701 * _2701;
    float _2703 = cbLight._m0[_2441].x + _1011;
    float _2704 = cbLight._m0[_2441].y + _1012;
    float _2705 = cbLight._m0[_2441].z + _1013;
    float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
    float _2710 = _2709 * _2703;
    float _2711 = _2709 * _2704;
    float _2712 = _2709 * _2705;
    float _2713 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2441].xyz));
    float _4869 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
    float _2716 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
    float _4880 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _2717 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
    float _2718 = dot(vec3(_932, _933, _934), vec3(_2710, _2711, _2712));
    float _4891 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2721 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
    float _2722 = dot(vec3(cbLight._m0[_2441].xyz), vec3(_2710, _2711, _2712));
    float _4902 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
    float _2726 = _2702 * _2702;
    float _2730 = ((_2721 * _2721) * (_2726 + (-1.0))) + 1.0;
    float _2738 = exp2(log2(1.0 - (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) * 5.0);
    float _2739 = 0.959999978542327880859375 - _1090;
    float _2741 = 0.959999978542327880859375 - _1091;
    float _2742 = 0.959999978542327880859375 - _1092;
    float _2749 = 1.0 - _2702;
    float _2760 = (0.5 / (((_2717 * ((_2716 * _2749) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2749) + _2702) * _2716))) * _2716;
    float _4913 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2762 = (isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2726 / ((_2730 * _2730) * 3.141590118408203125));
    uint _2776 = _2441 + 9u;
    float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2481].w)) * _935) * 0.949999988079071044921875);
    float _2788 = _2787 * _2787;
    float _2789 = cbLight._m0[_2481].x + _1011;
    float _2790 = cbLight._m0[_2481].y + _1012;
    float _2791 = cbLight._m0[_2481].z + _1013;
    float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
    float _2796 = _2795 * _2789;
    float _2797 = _2795 * _2790;
    float _2798 = _2795 * _2791;
    float _2799 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2481].xyz));
    float _4924 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
    float _2802 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
    float _2803 = dot(vec3(_932, _933, _934), vec3(_2796, _2797, _2798));
    float _4935 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
    float _2806 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    float _2807 = dot(vec3(cbLight._m0[_2481].xyz), vec3(_2796, _2797, _2798));
    float _4946 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
    float _2811 = _2788 * _2788;
    float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
    float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4946 : (isnan(_4946) ? 1.0 : min(_4946, 1.0)))) * 5.0);
    float _2829 = 1.0 - _2788;
    float _2839 = (0.5 / (((_2717 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2829) + _2788) * _2802))) * _2802;
    float _4957 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
    float _2841 = (isnan(1.0) ? _4957 : (isnan(_4957) ? 1.0 : min(_4957, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
    float _2851 = (((((_2822 * _2739) + _1093) * cbLight._m0[_2776].x) * _2841) * _2464) + ((((cbLight._m0[_2688].x * _2430) * ((_2738 * _2739) + _1093)) * _2762) * _2477);
    float _2852 = (((((_2822 * _2741) + _1095) * cbLight._m0[_2776].y) * _2841) * _2464) + ((((cbLight._m0[_2688].y * _2432) * ((_2738 * _2741) + _1095)) * _2762) * _2477);
    float _2853 = (((((_2822 * _2742) + _1096) * cbLight._m0[_2776].z) * _2841) * _2464) + ((((cbLight._m0[_2688].z * _2434) * ((_2738 * _2742) + _1096)) * _2762) * _2477);
    float _2909;
    float _2911;
    float _2913;
    if (_2517)
    {
        _2909 = _2851;
        _2911 = _2852;
        _2913 = _2853;
    }
    else
    {
        uint _2915 = _2441 + 2u;
        uint _2919 = _2441 + 10u;
        float _2933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2915].w)) * _935) * 0.949999988079071044921875);
        float _2934 = _2933 * _2933;
        float _2935 = cbLight._m0[_2915].x + _1011;
        float _2936 = cbLight._m0[_2915].y + _1012;
        float _2937 = cbLight._m0[_2915].z + _1013;
        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
        float _2942 = _2941 * _2935;
        float _2943 = _2941 * _2936;
        float _2944 = _2941 * _2937;
        float _2945 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_2915].xyz));
        float _4968 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2948 = isnan(1.0) ? _4968 : (isnan(_4968) ? 1.0 : min(_4968, 1.0));
        float _2949 = dot(vec3(_932, _933, _934), vec3(_2942, _2943, _2944));
        float _4979 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
        float _2952 = isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0));
        float _2953 = dot(vec3(cbLight._m0[_2915].xyz), vec3(_2942, _2943, _2944));
        float _4990 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
        float _2957 = _2934 * _2934;
        float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
        float _2968 = exp2(log2(1.0 - (isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0)))) * 5.0);
        float _2975 = 1.0 - _2934;
        float _2985 = (0.5 / (((_2717 * ((_2948 * _2975) + _2934)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _2975) + _2934) * _2948))) * _2948;
        float _5001 = isnan(0.0) ? _2985 : (isnan(_2985) ? 0.0 : max(_2985, 0.0));
        float _2987 = (isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
        float _2988 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
        _2909 = (((((_2968 * _2739) + _1093) * cbLight._m0[_2919].x) * _2987) * _2988) + _2851;
        _2911 = (((((_2968 * _2741) + _1095) * cbLight._m0[_2919].y) * _2987) * _2988) + _2852;
        _2913 = (((((_2968 * _2742) + _1096) * cbLight._m0[_2919].z) * _2987) * _2988) + _2853;
    }
    float _3019;
    float _3021;
    float _3023;
    if (_2626)
    {
        _3019 = _2909;
        _3021 = _2911;
        _3023 = _2913;
    }
    else
    {
        uint _3030 = _2441 + 3u;
        uint _3034 = _2441 + 11u;
        float _3048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3030].w)) * _935) * 0.949999988079071044921875);
        float _3049 = _3048 * _3048;
        float _3050 = cbLight._m0[_3030].x + _1011;
        float _3051 = cbLight._m0[_3030].y + _1012;
        float _3052 = cbLight._m0[_3030].z + _1013;
        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
        float _3057 = _3056 * _3050;
        float _3058 = _3056 * _3051;
        float _3059 = _3056 * _3052;
        float _3060 = dot(vec3(_932, _933, _934), vec3(cbLight._m0[_3030].xyz));
        float _5017 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
        float _3063 = isnan(1.0) ? _5017 : (isnan(_5017) ? 1.0 : min(_5017, 1.0));
        float _3064 = dot(vec3(_932, _933, _934), vec3(_3057, _3058, _3059));
        float _5028 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
        float _3067 = isnan(1.0) ? _5028 : (isnan(_5028) ? 1.0 : min(_5028, 1.0));
        float _3068 = dot(vec3(cbLight._m0[_3030].xyz), vec3(_3057, _3058, _3059));
        float _5039 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
        float _3072 = _3049 * _3049;
        float _3076 = ((_3067 * _3067) * (_3072 + (-1.0))) + 1.0;
        float _3083 = exp2(log2(1.0 - (isnan(1.0) ? _5039 : (isnan(_5039) ? 1.0 : min(_5039, 1.0)))) * 5.0);
        float _3090 = 1.0 - _3049;
        float _3100 = (0.5 / (((_2717 * ((_3063 * _3090) + _3049)) + 9.9999999392252902907785028219223e-09) + (((_2717 * _3090) + _3049) * _3063))) * _3063;
        float _5050 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        float _3102 = (isnan(1.0) ? _5050 : (isnan(_5050) ? 1.0 : min(_5050, 1.0))) * (_3072 / ((_3076 * _3076) * 3.141590118408203125));
        float _3103 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
        _3019 = (((((_3083 * _2739) + _1093) * cbLight._m0[_3034].x) * _3102) * _3103) + _2909;
        _3021 = (((((_3083 * _2741) + _1095) * cbLight._m0[_3034].y) * _3102) * _3103) + _2911;
        _3023 = (((((_3083 * _2742) + _1096) * cbLight._m0[_3034].z) * _3102) * _3103) + _2913;
    }
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    float _3177;
    float _3179;
    if (_2439.y == 0u)
    {
        uvec4 _3124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3125 = _3124.x;
        uint _3136 = uint((float(_3124.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1032) / _3125))) + floor(float(uint(cbSceneParam._m0[85u].x * _1031) / _3125)));
        float _3146 = (log2(_2217 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3147 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
        uint _3150 = uint(isnan(14.0) ? _3147 : (isnan(_3147) ? 14.0 : min(_3147, 14.0)));
        uvec4 _3155 = texelFetch(g_lightClusterGridBuffer, int(((_3150 << 2u) + (_3136 << 6u)) >> 2u));
        uint _3156 = _3155.x;
        uint _3157 = _3124.z;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        float _3244;
        float _3246;
        if (((((1u << ((_3157 >> 4u) & 15u)) + 4294967295u) & _3156) == 0u) || ((_3157 & 240u) == 0u))
        {
            _3236 = 0.0;
            _3238 = 0.0;
            _3240 = 0.0;
            _3242 = 0.0;
            _3244 = 0.0;
            _3246 = 0.0;
        }
        else
        {
            float _3237;
            float _3239;
            float _3241;
            float _3243;
            float _3245;
            float _3247;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            float _3393 = 0.0;
            float _3394 = 0.0;
            uint _3395 = 0u;
            uint _3404;
            bool _3405;
            for (;;)
            {
                _3404 = texelFetch(g_lightClassification, int((((_3150 << 5u) + (_3136 << 9u)) + (_3395 << 2u)) >> 2u)).x;
                _3405 = _3404 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3405)
                {
                    frontier_phi_71_pred = _3394;
                    frontier_phi_71_pred_1 = _3393;
                    frontier_phi_71_pred_2 = _3392;
                    frontier_phi_71_pred_3 = _3391;
                    frontier_phi_71_pred_4 = _3390;
                    frontier_phi_71_pred_5 = _3389;
                }
                else
                {
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    float _3538;
                    float _3539;
                    uint _3540;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3393;
                    _3539 = _3394;
                    _3540 = _3404;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    float _3465;
                    float _3466;
                    for (;;)
                    {
                        uint _3544 = uint(findLSB(_3540)) + (_3395 << 5u);
                        uint _3541 = (_3540 + 4294967295u) & _3540;
                        uint _3546 = _3544 * 48u;
                        vec4 _3560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3546)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3546 + 3u)).x));
                        uint _3566 = (_3544 * 48u) + 4u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3566)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3566 + 3u)).x));
                        uint _3585 = (_3544 * 48u) + 8u;
                        vec3 _3596 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x));
                        float _3600 = _3560.x - _2215;
                        float _3601 = _3560.y - _2216;
                        float _3602 = _3560.z - _2217;
                        float _3603 = dot(vec3(_3600, _3601, _3602), vec3(_3600, _3601, _3602));
                        float _3606 = inversesqrt(_3603);
                        float _3607 = _3606 * _3600;
                        float _3608 = _3606 * _3601;
                        float _3609 = _3606 * _3602;
                        float _3610 = dot(vec3(_1050, _1053, _1056), vec3(_3607, _3608, _3609));
                        float _3615 = 1.0 - (_3603 * _3560.w);
                        float _5076 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                        float _3616 = isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0));
                        float _3617 = sqrt(_3603) * _3579.w;
                        float _3620 = 1.39999997615814208984375 / (_3617 + 1.39999997615814208984375);
                        float _3621 = _3620 * _3620;
                        float _3624 = ((1.0 - _3621) * _3610) + _3621;
                        float _3627 = _3617 * _3617;
                        float _3631 = ((isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0))) * _3616) / ((_3627 * 0.699999988079071044921875) + 1.0);
                        float _3635 = (-0.0) - _2215;
                        float _3636 = (-0.0) - _2216;
                        float _3637 = (-0.0) - _2217;
                        float _3641 = inversesqrt(dot(vec3(_3635, _3636, _3637), vec3(_3635, _3636, _3637)));
                        float _3642 = _3641 * _3635;
                        float _3643 = _3641 * _3636;
                        float _3644 = _3641 * _3637;
                        float _3651 = exp2(log2(1.0 / ((_3627 * 3.5) + 5.0)) * 0.25);
                        float _3652 = 1.0 - _1125;
                        float _3659 = sqrt(1.0 - ((1.0 - (_3652 * _3652)) * (1.0 - (_3651 * _3651))));
                        float _3660 = _3659 * _3659;
                        float _3661 = _3660 * _3660;
                        float _3662 = _3642 + _3607;
                        float _3663 = _3643 + _3608;
                        float _3664 = _3644 + _3609;
                        float _3668 = inversesqrt(dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664)));
                        float _3672 = dot(vec3(_1050, _1053, _1056), vec3(_3642, _3643, _3644));
                        float _5092 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5092 : (isnan(_5092) ? 1.0 : min(_5092, 1.0));
                        float _3676 = dot(vec3(_1050, _1053, _1056), vec3(_3668 * _3662, _3668 * _3663, _3668 * _3664));
                        float _5103 = isnan(0.0) ? _3676 : (isnan(_3676) ? 0.0 : max(_3676, 0.0));
                        float _3679 = isnan(1.0) ? _5103 : (isnan(_5103) ? 1.0 : min(_5103, 1.0));
                        float _3683 = ((_3679 * _3679) * (_3661 + (-1.0))) + 1.0;
                        float _3684 = _3620 * _3660;
                        float _3685 = _3684 * _3684;
                        float _3688 = ((1.0 - _3685) * _3610) + _3685;
                        float _5114 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                        float _3689 = isnan(1.0) ? _5114 : (isnan(_5114) ? 1.0 : min(_5114, 1.0));
                        float _3690 = 1.0 - _3660;
                        float _3700 = (0.5 / (((_3689 * ((_3675 * _3690) + _3660)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3660) * _3675))) * _3689;
                        float _5125 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                        float _3711 = (((_3661 * 3.1415927410125732421875) * (isnan(1.0) ? _5125 : (isnan(_5125) ? 1.0 : min(_5125, 1.0)))) / ((_3683 * _3683) * ((_3627 * 2.1991131305694580078125) + 3.141590118408203125))) * _3616;
                        _3464 = (_3631 * _3579.x) + _3537;
                        _3465 = (_3631 * _3579.y) + _3538;
                        _3466 = (_3631 * _3579.z) + _3539;
                        _3461 = (_3711 * _3596.x) + _3534;
                        _3462 = (_3711 * _3596.y) + _3535;
                        _3463 = (_3711 * _3596.z) + _3536;
                        if (_3541 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3465;
                            _3539 = _3466;
                            _3540 = _3541;
                        }
                    }
                    frontier_phi_71_pred = _3466;
                    frontier_phi_71_pred_1 = _3465;
                    frontier_phi_71_pred_2 = _3464;
                    frontier_phi_71_pred_3 = _3463;
                    frontier_phi_71_pred_4 = _3462;
                    frontier_phi_71_pred_5 = _3461;
                }
                _3247 = frontier_phi_71_pred;
                _3245 = frontier_phi_71_pred_1;
                _3243 = frontier_phi_71_pred_2;
                _3241 = frontier_phi_71_pred_3;
                _3239 = frontier_phi_71_pred_4;
                _3237 = frontier_phi_71_pred_5;
                uint _3396 = _3395 + 1u;
                if (_3396 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3389 = _3237;
                    _3390 = _3239;
                    _3391 = _3241;
                    _3392 = _3243;
                    _3393 = _3245;
                    _3394 = _3247;
                    _3395 = _3396;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3236 = _3237;
            _3238 = _3239;
            _3240 = _3241;
            _3242 = _3243;
            _3244 = _3245;
            _3246 = _3247;
        }
        uvec4 _3250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3251 = _3250.z;
        uint _3253 = (_3251 >> 8u) & 15u;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        float _3367;
        if (((4294967295u << _3253) & _3156) == 0u)
        {
            _3357 = _3236;
            _3359 = _3238;
            _3361 = _3240;
            _3363 = _3242;
            _3365 = _3244;
            _3367 = _3246;
        }
        else
        {
            float _3382 = inversesqrt(dot(vec3(_2215, _2216, _2217), vec3(_2215, _2216, _2217)));
            float _3383 = _3382 * _2215;
            float _3384 = _3382 * _2216;
            float _3385 = _3382 * _2217;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3253 < ((_3251 >> 12u) & 15u))
            {
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3366;
                float _3368;
                float _3517 = _3236;
                float _3518 = _3238;
                float _3519 = _3240;
                float _3520 = _3242;
                float _3521 = _3244;
                float _3522 = _3246;
                uint _3523 = _3253;
                uint _3532;
                bool _3533;
                for (;;)
                {
                    _3532 = texelFetch(g_lightClassification, int((((_3150 << 5u) + (_3136 << 9u)) + (_3523 << 2u)) >> 2u)).x;
                    _3533 = _3532 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3533)
                    {
                        frontier_phi_82_pred = _3522;
                        frontier_phi_82_pred_1 = _3521;
                        frontier_phi_82_pred_2 = _3520;
                        frontier_phi_82_pred_3 = _3519;
                        frontier_phi_82_pred_4 = _3518;
                        frontier_phi_82_pred_5 = _3517;
                    }
                    else
                    {
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        float _3742 = _3521;
                        float _3743 = _3522;
                        uint _3744 = _3532;
                        uint _3745;
                        vec4 _3770;
                        float _3771;
                        vec4 _3786;
                        vec3 _3798;
                        vec4 _3813;
                        vec4 _3828;
                        float _3874;
                        bool _3875;
                        for (;;)
                        {
                            uint _3755 = ((_3523 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3744));
                            _3745 = (_3744 + 4294967295u) & _3744;
                            uint _3757 = _3755 * 40u;
                            _3770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3757 + 3u)).x));
                            _3771 = _3770.w;
                            uint _3773 = (_3755 * 40u) + 4u;
                            _3786 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3773)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3773 + 3u)).x));
                            uint _3788 = (_3755 * 40u) + 8u;
                            _3798 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x));
                            uint _3800 = (_3755 * 40u) + 16u;
                            _3813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3800 + 3u)).x));
                            uint _3815 = (_3755 * 40u) + 20u;
                            _3828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3815 + 3u)).x));
                            uint _3830 = (_3755 * 40u) + 24u;
                            vec4 _3843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3830 + 3u)).x));
                            uint _3849 = (_3755 * 40u) + 28u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            _3874 = fma(_2217, _3862.z, fma(_2216, _3862.y, _3862.x * _2215)) + _3862.w;
                            _3875 = !((fma(_2217, _3843.z, fma(_2216, _3843.y, _3843.x * _2215)) + _3843.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3875)
                            {
                                float _3902 = _3770.x - _2215;
                                float _3903 = _3770.y - _2216;
                                float _3904 = _3770.z - _2217;
                                float _3905 = dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904));
                                float _3908 = inversesqrt(_3905);
                                float _3909 = _3908 * _3902;
                                float _3910 = _3908 * _3903;
                                float _3911 = _3908 * _3904;
                                float _3915 = 1.0 - (_3905 / (_3771 * _3771));
                                float _5136 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3916 = isnan(1.0) ? _5136 : (isnan(_5136) ? 1.0 : min(_5136, 1.0));
                                float _3920 = sqrt(_3905) * _3786.w;
                                float _3922 = 1.39999997615814208984375 / (_3920 + 1.39999997615814208984375);
                                float _3923 = _3922 * _3922;
                                float _3926 = ((1.0 - _3923) * dot(vec3(_3909, _3910, _3911), vec3(_1050, _1053, _1056))) + _3923;
                                float _3929 = _3920 * _3920;
                                float _3933 = (fma(_2217, _3813.z, fma(_2216, _3813.y, _3813.x * _2215)) + _3813.w) / _3874;
                                float _3934 = (fma(_2217, _3828.z, fma(_2216, _3828.y, _3828.x * _2215)) + _3828.w) / _3874;
                                float _3938 = 1.0 - dot(vec2(_3933, _3934), vec2(_3933, _3934));
                                float _5152 = isnan(0.0) ? _3938 : (isnan(_3938) ? 0.0 : max(_3938, 0.0));
                                float _3939 = isnan(1.0) ? _5152 : (isnan(_5152) ? 1.0 : min(_5152, 1.0));
                                float _3940 = _3939 * (((isnan(0.0) ? _3926 : (isnan(_3926) ? 0.0 : max(_3926, 0.0))) * _3916) / ((_3929 * 0.699999988079071044921875) + 1.0));
                                float _3952 = exp2(log2(1.0 / ((_3929 * 3.5) + 5.0)) * 0.25);
                                float _3953 = 1.0 - _1125;
                                float _3960 = sqrt(1.0 - ((1.0 - (_3953 * _3953)) * (1.0 - (_3952 * _3952))));
                                float _3961 = _3960 * _3960;
                                float _3962 = _3961 * _3961;
                                float _3963 = _3909 - _3383;
                                float _3964 = _3910 - _3384;
                                float _3965 = _3911 - _3385;
                                float _3969 = inversesqrt(dot(vec3(_3963, _3964, _3965), vec3(_3963, _3964, _3965)));
                                float _3973 = dot(vec3(_1050, _1053, _1056), vec3((-0.0) - _3383, (-0.0) - _3384, (-0.0) - _3385));
                                float _5163 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5163 : (isnan(_5163) ? 1.0 : min(_5163, 1.0));
                                float _3977 = dot(vec3(_1050, _1053, _1056), vec3(_3969 * _3963, _3969 * _3964, _3969 * _3965));
                                float _5174 = isnan(0.0) ? _3977 : (isnan(_3977) ? 0.0 : max(_3977, 0.0));
                                float _3980 = isnan(1.0) ? _5174 : (isnan(_5174) ? 1.0 : min(_5174, 1.0));
                                float _3984 = ((_3980 * _3980) * (_3962 + (-1.0))) + 1.0;
                                float _3985 = _3922 * _3961;
                                float _3986 = _3985 * _3985;
                                float _3992 = ((1.0 - _3986) * dot(vec3(_1050, _1053, _1056), vec3(_3909, _3910, _3911))) + _3986;
                                float _5185 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3993 = isnan(1.0) ? _5185 : (isnan(_5185) ? 1.0 : min(_5185, 1.0));
                                float _3994 = 1.0 - _3961;
                                float _4004 = (0.5 / (((_3993 * ((_3976 * _3994) + _3961)) + 9.9999999392252902907785028219223e-09) + (((_3993 * _3994) + _3961) * _3976))) * _3993;
                                float _5196 = isnan(0.0) ? _4004 : (isnan(_4004) ? 0.0 : max(_4004, 0.0));
                                float _4014 = (_3939 * _3916) * (((_3962 * 3.1415927410125732421875) * (isnan(1.0) ? _5196 : (isnan(_5196) ? 1.0 : min(_5196, 1.0)))) / ((_3984 * _3984) * ((_3929 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3940 * _3786.z;
                                frontier_phi_88_pred_1 = _3940 * _3786.y;
                                frontier_phi_88_pred_2 = _3940 * _3786.x;
                                frontier_phi_88_pred_3 = _4014 * _3798.z;
                                frontier_phi_88_pred_4 = _4014 * _3798.y;
                                frontier_phi_88_pred_5 = _4014 * _3798.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4023 = frontier_phi_88_pred;
                            _4022 = frontier_phi_88_pred_1;
                            _4021 = frontier_phi_88_pred_2;
                            _4020 = frontier_phi_88_pred_3;
                            _4019 = frontier_phi_88_pred_4;
                            _4018 = frontier_phi_88_pred_5;
                            _3728 = _4021 + _3741;
                            _3729 = _4022 + _3742;
                            _3730 = _4023 + _3743;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3727 = _4020 + _3740;
                            if (_3745 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3745;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3730;
                        frontier_phi_82_pred_1 = _3729;
                        frontier_phi_82_pred_2 = _3728;
                        frontier_phi_82_pred_3 = _3727;
                        frontier_phi_82_pred_4 = _3726;
                        frontier_phi_82_pred_5 = _3725;
                    }
                    _3368 = frontier_phi_82_pred;
                    _3366 = frontier_phi_82_pred_1;
                    _3364 = frontier_phi_82_pred_2;
                    _3362 = frontier_phi_82_pred_3;
                    _3360 = frontier_phi_82_pred_4;
                    _3358 = frontier_phi_82_pred_5;
                    uint _3524 = _3523 + 1u;
                    if (_3524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3517 = _3358;
                        _3518 = _3360;
                        _3519 = _3362;
                        _3520 = _3364;
                        _3521 = _3366;
                        _3522 = _3368;
                        _3523 = _3524;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3364;
                frontier_phi_63_64_ladder_1 = _3368;
                frontier_phi_63_64_ladder_2 = _3366;
                frontier_phi_63_64_ladder_3 = _3362;
                frontier_phi_63_64_ladder_4 = _3360;
                frontier_phi_63_64_ladder_5 = _3358;
            }
            else
            {
                frontier_phi_63_64_ladder = _3242;
                frontier_phi_63_64_ladder_1 = _3246;
                frontier_phi_63_64_ladder_2 = _3244;
                frontier_phi_63_64_ladder_3 = _3240;
                frontier_phi_63_64_ladder_4 = _3238;
                frontier_phi_63_64_ladder_5 = _3236;
            }
            _3357 = frontier_phi_63_64_ladder_5;
            _3359 = frontier_phi_63_64_ladder_4;
            _3361 = frontier_phi_63_64_ladder_3;
            _3363 = frontier_phi_63_64_ladder;
            _3365 = frontier_phi_63_64_ladder_2;
            _3367 = frontier_phi_63_64_ladder_1;
        }
        float _3372 = isnan(1.0) ? _1109 : (isnan(_1109) ? 1.0 : min(_1109, 1.0));
        _3169 = (_3372 * _3363) + _2681;
        _3171 = (_3372 * _3365) + _2683;
        _3173 = (_3372 * _3367) + _2685;
        _3175 = ((_3357 * _1093) * _3372) + _3019;
        _3177 = ((_3359 * _1095) * _3372) + _3021;
        _3179 = ((_3361 * _1096) * _3372) + _3023;
    }
    else
    {
        _3169 = _2681;
        _3171 = _2683;
        _3173 = _2685;
        _3175 = _3019;
        _3177 = _3021;
        _3179 = _3023;
    }
    float _5212 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
    float _5223 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
    float _5234 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _3196 = ((isnan(1.0) ? _5212 : (isnan(_5212) ? 1.0 : min(_5212, 1.0))) * (_3169 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1109))) + ((_3175 + ((isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _3197 = ((isnan(1.0) ? _5223 : (isnan(_5223) ? 1.0 : min(_5223, 1.0))) * (_3171 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1109))) + ((_3177 + ((isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    float _3198 = ((isnan(1.0) ? _5234 : (isnan(_5234) ? 1.0 : min(_5234, 1.0))) * (_3173 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1109))) + ((_3179 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1947)) * cbPerFrame._m0[3u].x);
    uint _3199 = _269 + 6u;
    float _3207 = _1031 / cbSceneParam._m0[86u].x;
    float _3208 = _1032 / cbSceneParam._m0[86u].y;
    vec4 _3222 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3207, _3208, (log2((isnan(cbSceneParam._m0[77u].w) ? _954 : (isnan(_954) ? cbSceneParam._m0[77u].w : min(_954, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3224 = _3222.x;
    float _3225 = _3222.y;
    float _3226 = _3222.z;
    float _3227 = _3222.w;
    float _3299;
    float _3301;
    float _3303;
    float _3305;
    if (_954 > cbSceneParam._m0[78u].w)
    {
        float _3261 = isnan(_954) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _954 : min(cbSceneParam._m0[80u].w, _954));
        float _3262 = _3261 / _954;
        float _3273 = _3262 * _1004;
        float _3274 = _1005 * _3262;
        float _3275 = (-0.0) - _3274;
        float _3277 = _3262 * _1006;
        float _3279 = (cbSceneParam._m0[77u].w * _3275) / _3261;
        float _3280 = _3279 + cbSceneParam._m0[79u].w;
        float _3281 = cbSceneParam._m0[79u].w - _3274;
        float _3287 = sqrt(((_3273 * _3273) + (_3274 * _3274)) + (_3277 * _3277));
        float _3290 = (1.0 - (cbSceneParam._m0[77u].w / _3261)) * _3287;
        float _3295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3474;
        if (abs((_3275 - _3279) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3474 = ((((_3280 > 0.0) ? exp2(_3295 * _3280) : (2.0 - exp2(_3297 * _3280))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3290;
        }
        else
        {
            float _3418 = 1.0 / cbSceneParam._m0[80u].x;
            float _3419 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : max(_3280, _3281));
            float _3420 = isnan(_3281) ? _3280 : (isnan(_3280) ? _3281 : min(_3280, _3281));
            float _3429 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : min(_3419, 0.0));
            float _3430 = isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : min(_3420, 0.0));
            _3474 = ((abs(_3287 / _3275) * cbSceneParam._m0[80u].y) * ((((_3429 - _3430) * 2.0) - ((exp2(_3295 * (isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0)))) - exp2(_3295 * (isnan(0.0) ? _3420 : (isnan(_3420) ? 0.0 : max(_3420, 0.0))))) * _3418)) - ((exp2(_3297 * _3429) - exp2(_3297 * _3430)) * _3418))) + (_3290 * cbSceneParam._m0[80u].z);
        }
        vec4 _3476 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3207, _3208, 1.0), 0.0);
        float _3485 = exp2((_3474 * (-1.44269502162933349609375)) * (1.0 - _3476.w));
        float _3486 = log2(_3485);
        float _3502 = log2(_3227);
        _3299 = (exp2(_3502 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].x)) * _3476.x) / cbSceneParam._m0[78u].x)) + _3224;
        _3301 = (exp2(_3502 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].y)) * _3476.y) / cbSceneParam._m0[78u].y)) + _3225;
        _3303 = (exp2(_3502 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3486 * cbSceneParam._m0[78u].z)) * _3476.z) / cbSceneParam._m0[78u].z)) + _3226;
        _3305 = _3485 * _3227;
    }
    else
    {
        _3299 = _3224;
        _3301 = _3225;
        _3303 = _3226;
        _3305 = _3227;
    }
    bool _3512;
    vec4 _3315;
    vec4 _3337;
    float _3339;
    float _3343;
    float _3344;
    float _3345;
    float _3346;
    bool _3356;
    for (;;)
    {
        _3315 = cbMatDynParam._m0[0u];
        float _3317 = roundEven(_3315.y);
        bool _3318 = _3317 == 3.0;
        float _3319 = log2(_3305);
        float _3326 = exp2(_3319 * cbSceneParam._m0[78u].x) * _3196;
        float _3327 = exp2(_3319 * cbSceneParam._m0[78u].y) * _3197;
        float _3328 = exp2(_3319 * cbSceneParam._m0[78u].z) * _3198;
        float _3335 = _1020 + (-0.5);
        _3337 = cbMtdParam._m0[1u];
        _3339 = _3337.y * _3335;
        float _3342 = (_3317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3343 = _3342 * (_3318 ? _3326 : (_3326 + (cbSceneParam._m0[72u].w * _3299)));
        _3344 = _3342 * (_3318 ? _3327 : (_3327 + (cbSceneParam._m0[72u].w * _3301)));
        _3345 = _3342 * (_3318 ? _3328 : (_3328 + (cbSceneParam._m0[72u].w * _3303)));
        _3346 = _3335 * 0.999000012874603271484375;
        _3356 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3356)
        {
            if ((cbInstanceData._m0[_269 + 7u].x + _3346) < 0.5)
            {
                _3512 = true;
                break;
            }
        }
        uint _3453 = _1069 + uint(_3315.w);
        if ((cbInstanceData._m0[_3453].w < 1.0) && ((cbInstanceData._m0[_3453].w + _3346) < 0.5))
        {
            _3512 = true;
            break;
        }
        if ((_3339 + 1.0) < _3337.x)
        {
            _3512 = true;
            break;
        }
        _3512 = false;
        break;
    }
    float _3716;
    if (_3512)
    {
        discard_state = true;
        _3716 = 0.0;
    }
    else
    {
        _3716 = cbInstanceData._m0[_3199].w;
    }
    SV_Target.x = _3343;
    SV_Target.y = _3344;
    SV_Target.z = _3345;
    SV_Target.w = _3716;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3199].w;
    discard_exit();
}


