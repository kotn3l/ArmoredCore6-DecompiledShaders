#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1379;
float _4043;
float _4044;
float _4045;
float _4046;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _236 = _235 * _227;
    float _237 = _235 * _228;
    float _238 = _235 * _229;
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = _242 * NORMAL.x;
    float _244 = _242 * NORMAL.y;
    float _245 = _242 * NORMAL.z;
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = _249 * TANGENT.x;
    float _251 = _249 * TANGENT.y;
    float _252 = _249 * TANGENT.z;
    float _263 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _265 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _266 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4055 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _4066 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _4077 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    uint _276 = uint(roundEven(NORMAL.w)) * 13u;
    uint _281 = _276 + 1u;
    uint _285 = _276 + 2u;
    float _294 = sqrt(((cbInstanceData._m0[_281].x * cbInstanceData._m0[_281].x) + (cbInstanceData._m0[_276].x * cbInstanceData._m0[_276].x)) + (cbInstanceData._m0[_285].x * cbInstanceData._m0[_285].x));
    float _295 = _294 * TEXCOORD.z;
    float _296 = _294 * TEXCOORD.w;
    vec4 _309 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _295) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _296) + cbTextureTilingScale._m0[13u].w));
    vec4 _332 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _358 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _363 = _358.x * cbMtdParam._m0[11u].x;
    float _364 = _358.y * cbMtdParam._m0[11u].y;
    float _365 = _358.z * cbMtdParam._m0[11u].z;
    vec4 _384 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _295) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _296) + cbTextureTilingScale._m0[5u].w));
    vec4 _432 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _434 = _432.x;
    float _446 = dot(vec4(_434, _432.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _463 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_434 - _446) * cbMtdParam._m0[23u].w) + _446) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _464 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _474 = (_332.x * cbMtdParam._m0[9u].x) * ((_464 * ((_384.x * cbMtdParam._m0[12u].x) - _363)) + _363);
    float _475 = (_332.y * cbMtdParam._m0[9u].y) * ((_464 * ((_384.y * cbMtdParam._m0[12u].y) - _364)) + _364);
    float _476 = (_332.z * cbMtdParam._m0[9u].z) * ((_464 * ((_384.z * cbMtdParam._m0[12u].z) - _365)) + _365);
    float _480 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _309.x) * _474;
    float _483 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _309.y) * _475;
    float _486 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _309.z) * _476;
    float _494 = (((_474 - _480) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) + _480) * 4.55000019073486328125;
    float _496 = (((_475 - _483) * (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0)))) + _483) * 4.55000019073486328125;
    float _498 = (((_476 - _486) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) + _486) * 4.55000019073486328125;
    vec4 _516 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _295) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _296) + cbTextureTilingScale._m0[20u].w));
    vec4 _543 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _295) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _296) + cbTextureTilingScale._m0[4u].w));
    vec4 _560 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _562 = _560.x;
    float _563 = _560.y;
    float _564 = _560.z;
    float _573 = ((_543.z - _564) * _464) + _564;
    float _576 = ((((_543.x - _562) * _464) + _562) * 2.0) + (-1.0);
    float _577 = ((((_543.y - _563) * _464) + _563) * 2.0) + (-1.0);
    float _578 = dot(vec2(_576, _577), vec2(_576, _577));
    float _4099 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _583 = sqrt(1.0 - (isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))));
    vec4 _603 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _615 = (_576 + ((((_516.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_603.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _616 = (_577 + ((((_516.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_603.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _619 = fma(_583, _243, fma(_616, _250, _615 * _236));
    float _622 = fma(_583, _244, fma(_616, _251, _615 * _237));
    float _625 = fma(_583, _245, fma(_616, _252, _615 * _238));
    float _629 = inversesqrt(dot(vec3(_619, _622, _625), vec3(_619, _622, _625)));
    vec4 _656 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _295) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _296) + cbTextureTilingScale._m0[11u].w));
    float _658 = _656.x;
    float _659 = 1.0 - _658;
    float _668 = (cbMtdParam._m0[19u].x + dot(vec4(_629 * _619, _629 * _622, _629 * _625, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_658 - _659) * cbMtdParam._m0[24u].z) + _659) * cbMtdParam._m0[21u].z);
    float _4110 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _669 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
    float _676 = (_669 * (cbMtdParam._m0[17u].x - _494)) + _494;
    float _677 = (_669 * (cbMtdParam._m0[17u].y - _496)) + _496;
    float _678 = (_669 * (cbMtdParam._m0[17u].z - _498)) + _498;
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _704 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _706 = _704.x;
    float _723 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _295) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _296) + cbTextureTilingScale._m0[9u].w)).x - _706) * _464) + _706;
    float _727 = ((_690.x - _723) * cbMtdParam._m0[19u].z) + _723;
    float _729 = _727 - (_727 * _669);
    float _734 = (((_516.z - _573) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _573;
    float _738 = ((_603.z - _734) * cbMtdParam._m0[19u].w) + _734;
    vec4 _751 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _295) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _296) + cbTextureTilingScale._m0[15u].w));
    float _758 = (_751.x * 2.0) + (-1.0);
    float _759 = (_751.y * 2.0) + (-1.0);
    float _760 = dot(vec2(_758, _759), vec2(_758, _759));
    float _4121 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _768 = ((_751.z - _738) * _669) + _738;
    float _778 = ((sqrt(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) - _583) * _669) + _583;
    float _781 = (((_758 - _615) * _669) + _615) + (cbMtdParam._m0[21u].x * _615);
    float _782 = (((_759 - _616) * _669) + _616) + (cbMtdParam._m0[21u].x * _616);
    float _784 = cbMtdParam._m0[22u].x + _603.w;
    float _787 = fma(_778, _243, fma(_782, _250, _781 * _236));
    float _790 = fma(_778, _244, fma(_782, _251, _781 * _237));
    float _793 = fma(_778, _245, fma(_782, _252, _781 * _238));
    float _797 = inversesqrt(dot(vec3(_787, _790, _793), vec3(_787, _790, _793)));
    float _798 = _797 * _787;
    float _799 = _797 * _790;
    float _800 = _797 * _793;
    float _4132 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _801 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
    float _4143 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _4154 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _4165 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _4176 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _4187 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _806 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _820 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _871 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _861);
    float _872 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _861);
    float _873 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _861);
    float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
    float _878 = _871 * _877;
    float _879 = _872 * _877;
    float _880 = _873 * _877;
    vec4 _885 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _887 = _885.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1059 = sqrt(((_871 * _871) + (_872 * _872)) + (_873 * _873));
        float _1065 = (cbMatDynParam._m0[5u].x * _1059) + cbMatDynParam._m0[5u].y;
        float _4198 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1070 = (cbMatDynParam._m0[5u].z * _1059) + cbMatDynParam._m0[5u].w;
        float _4209 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) - _1066)) + _1066) < ((_887 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _898 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _899 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _917 = fma(_800, cbSceneParam._m0[5u].z, fma(_799, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _798));
    float _920 = fma(_800, cbSceneParam._m0[6u].z, fma(_799, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _798));
    float _923 = fma(_800, cbSceneParam._m0[7u].z, fma(_799, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _798));
    uint _936 = _276 + 9u;
    uint _937 = _936 + uint(cbMatDynParam._m0[0u].w);
    float _943 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0)))) * cbInstanceData._m0[_937].x;
    float _944 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_937].y;
    float _945 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_937].z;
    float _4220 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _946 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _947 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _4242 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _948 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _949 = 1.0 - _806;
    float _950 = _946 * _949;
    float _951 = _947 * _949;
    float _952 = _948 * _949;
    float _957 = (_946 + (-0.039999999105930328369140625)) * _806;
    float _958 = (_947 + (-0.039999999105930328369140625)) * _806;
    float _959 = (_948 + (-0.039999999105930328369140625)) * _806;
    float _960 = _957 + 0.039999999105930328369140625;
    float _962 = _958 + 0.039999999105930328369140625;
    float _963 = _959 + 0.039999999105930328369140625;
    vec4 _972 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _898, cbSceneParam._m0[86u].y * _899));
    float _976 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * TEXCOORD_5.w) * _972.x;
    float _977 = dot(vec3(_798, _799, _800), vec3(_878, _879, _880));
    float _980 = _977 * 2.0;
    float _984 = (_980 * _798) - _878;
    float _985 = (_980 * _799) - _879;
    float _986 = (_980 * _800) - _880;
    float _990 = abs(dot(vec3(_878, _879, _880), vec3(_798, _799, _800)));
    float _4253 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _992 = sqrt(_801);
    float _1005 = exp2((_992 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_992 * 3.0));
    float _1011 = (1.0 - _1005) * ((_992 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1012 = _1005 * _992;
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1378;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    float _1393;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1103 = fma(_1048, cbModelParam._m0[26u].z, fma(_1044, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040));
        float _1107 = fma(_1048, cbModelParam._m0[27u].z, fma(_1044, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040));
        float _1111 = fma(_1048, cbModelParam._m0[28u].z, fma(_1044, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040));
        float _1136 = _1040 + _798;
        float _1137 = _1044 + _799;
        float _1138 = _1048 + _800;
        float _1148 = fma(_1138, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1136)) - _1103;
        float _1149 = fma(_1138, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1136)) - _1107;
        float _1150 = fma(_1138, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1136)) - _1111;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1103 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1107 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[34u].z) + ((((((_1111 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1193 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1206 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1172.x + (-0.5));
        float _1208 = _1206 * (_1172.y + (-0.5));
        float _1209 = _1206 * (_1172.z + (-0.5));
        float _1216 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1179.x + (-0.5));
        float _1218 = _1216 * (_1179.y + (-0.5));
        float _1219 = _1216 * (_1179.z + (-0.5));
        float _1226 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1186.x + (-0.5));
        float _1228 = _1226 * (_1186.y + (-0.5));
        float _1229 = _1226 * (_1186.z + (-0.5));
        float _1236 = exp2((_1193.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1193.x + (-0.5));
        float _1238 = _1236 * (_1193.y + (-0.5));
        float _1239 = _1236 * (_1193.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1260 = (dot(vec3(_798, _799, _800), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _4279 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1270 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _4290 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4301 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_1272 + 1.0))) + _1277) * _1240;
        float _1287 = _1208 * 0.5;
        float _1288 = _1218 * 0.5;
        float _1289 = _1228 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_798, _799, _800), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4312 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _4323 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4334 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))) * (_1314 + 1.0))) + _1319) * _1241;
        float _1329 = _1209 * 0.5;
        float _1330 = _1219 * 0.5;
        float _1331 = _1229 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_798, _799, _800), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4345 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4356 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4367 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_1356 + 1.0))) + _1361) * _1242;
        _1378 = _1209;
        _1380 = _1208;
        _1381 = _1207;
        _1382 = _1219;
        _1383 = _1218;
        _1384 = _1217;
        _1385 = _1229;
        _1386 = _1228;
        _1387 = _1227;
        _1388 = _1242;
        _1389 = _1241;
        _1390 = _1240;
        _1391 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1392 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1393 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1379;
        _1380 = _1379;
        _1381 = _1379;
        _1382 = _1379;
        _1383 = _1379;
        _1384 = _1379;
        _1385 = _1379;
        _1386 = _1379;
        _1387 = _1379;
        _1388 = _1379;
        _1389 = _1379;
        _1390 = _1379;
        _1391 = 0.0;
        _1392 = 0.0;
        _1393 = 0.0;
    }
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    float _1702;
    float _1703;
    float _1704;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1421 = fma(_1048, cbModelParam._m0[30u].z, fma(_1044, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1040));
        float _1425 = fma(_1048, cbModelParam._m0[31u].z, fma(_1044, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1040));
        float _1429 = fma(_1048, cbModelParam._m0[32u].z, fma(_1044, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1040));
        float _1452 = _1040 + _798;
        float _1453 = _1044 + _799;
        float _1454 = _1048 + _800;
        float _1464 = fma(_1454, cbModelParam._m0[30u].z, fma(_1453, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1452)) - _1421;
        float _1465 = fma(_1454, cbModelParam._m0[31u].z, fma(_1453, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1452)) - _1425;
        float _1466 = fma(_1454, cbModelParam._m0[32u].z, fma(_1453, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1452)) - _1429;
        float _1470 = inversesqrt(dot(vec3(_1464, _1465, _1466), vec3(_1464, _1465, _1466)));
        float _1483 = ((_1470 * _1464) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1421 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1484 = ((_1470 * _1465) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1425 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1485 = ((_1470 * _1466) / cbModelParam._m0[35u].z) + ((((((_1429 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1483, _1484, _1485), 0.0);
        float _1520 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1487.x + (-0.5));
        float _1522 = _1520 * (_1487.y + (-0.5));
        float _1523 = _1520 * (_1487.z + (-0.5));
        float _1530 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1494.x + (-0.5));
        float _1532 = _1530 * (_1494.y + (-0.5));
        float _1533 = _1530 * (_1494.z + (-0.5));
        float _1540 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1501.x + (-0.5));
        float _1542 = _1540 * (_1501.y + (-0.5));
        float _1543 = _1540 * (_1501.z + (-0.5));
        float _1550 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1551 = _1550 * (_1508.x + (-0.5));
        float _1552 = _1550 * (_1508.y + (-0.5));
        float _1553 = _1550 * (_1508.z + (-0.5));
        float _1554 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1555 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1556 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1557 = _1521 * 0.5;
        float _1558 = _1531 * 0.5;
        float _1559 = _1541 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_798, _799, _800), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4408 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1554 + 9.9999997473787516355514526367188e-06);
        float _4419 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4430 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_1584 + 1.0))) + _1589) * _1554;
        float _1599 = _1522 * 0.5;
        float _1600 = _1532 * 0.5;
        float _1601 = _1542 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_798, _799, _800), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4441 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1555 + 9.9999997473787516355514526367188e-06);
        float _4452 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4463 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0))) * (_1626 + 1.0))) + _1631) * _1555;
        float _1641 = _1523 * 0.5;
        float _1642 = _1533 * 0.5;
        float _1643 = _1543 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_798, _799, _800), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4474 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1556 + 9.9999997473787516355514526367188e-06);
        float _4485 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4496 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_1668 + 1.0))) + _1673) * _1556;
        _1690 = _1523;
        _1691 = _1522;
        _1692 = _1521;
        _1693 = _1533;
        _1694 = _1532;
        _1695 = _1531;
        _1696 = _1543;
        _1697 = _1542;
        _1698 = _1541;
        _1699 = _1556;
        _1700 = _1555;
        _1701 = _1554;
        _1702 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
        _1703 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1704 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
    }
    else
    {
        _1690 = _1379;
        _1691 = _1379;
        _1692 = _1379;
        _1693 = _1379;
        _1694 = _1379;
        _1695 = _1379;
        _1696 = _1379;
        _1697 = _1379;
        _1698 = _1379;
        _1699 = _1379;
        _1700 = _1379;
        _1701 = _1379;
        _1702 = 0.0;
        _1703 = 0.0;
        _1704 = 0.0;
    }
    float _1714 = (cbModelParam._m0[1u].x * (_1702 - _1391)) + _1391;
    float _1715 = (cbModelParam._m0[1u].x * (_1703 - _1392)) + _1392;
    float _1716 = (cbModelParam._m0[1u].x * (_1704 - _1393)) + _1393;
    float _1737 = fma(_1716, cbSceneParam._m0[89u].z, fma(_1715, cbSceneParam._m0[89u].y, _1714 * cbSceneParam._m0[89u].x));
    float _1740 = fma(_1716, cbSceneParam._m0[90u].z, fma(_1715, cbSceneParam._m0[90u].y, _1714 * cbSceneParam._m0[90u].x));
    float _1743 = fma(_1716, cbSceneParam._m0[91u].z, fma(_1715, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1714));
    float _1758 = _984 * 0.5;
    float _1759 = _985 * 0.5;
    float _1760 = _986 * 0.5;
    float _1761 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1692, _1695, _1698, _1701));
    float _1764 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1691, _1694, _1697, _1700));
    float _1767 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1690, _1693, _1696, _1699));
    float _1801;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1774 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1378, _1382, _1385, _1388));
        float _1778 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1380, _1383, _1386, _1389));
        float _1782 = dot(vec4(_1758, _1759, _1760, 1.0), vec4(_1381, _1384, _1387, _1390));
        float _1789 = dot(vec4(cbModelParam._m0[39u]), vec4(_1758, _1759, _1760, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)), isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1789) ? 0.0 : (isnan(0.0) ? _1789 : max(0.0, _1789))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1812;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1803 = dot(vec4(cbModelParam._m0[40u]), vec4(_1758, _1759, _1760, 1.0));
        _1812 = dot(vec3(isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1803) ? 0.0 : (isnan(0.0) ? _1803 : max(0.0, _1803))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1812 = 1.0;
    }
    float _1816 = (_1812 * cbModelParam._m0[1u].x) + (_1801 * (1.0 - cbModelParam._m0[1u].x));
    float _1826 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _801);
    float _1827 = isnan(_1826) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1826 : min(cbModelParam._m0[25u].z, _1826));
    float _1908;
    float _1910;
    float _1912;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1875 = fma(_1048, cbModelParam._m0[13u].z, fma(_1044, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1040)) + cbModelParam._m0[13u].w;
        float _1879 = fma(_1048, cbModelParam._m0[14u].z, fma(_1044, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1040)) + cbModelParam._m0[14u].w;
        float _1883 = fma(_1048, cbModelParam._m0[15u].z, fma(_1044, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1040)) + cbModelParam._m0[15u].w;
        float _1886 = fma(_986, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _984));
        float _1889 = fma(_986, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _984));
        float _1892 = fma(_986, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _984));
        float _1920;
        if (_1886 > 0.0)
        {
            _1920 = abs((1.0 - _1875) / _1886);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1886 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1875 + 1.0) / _1886);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1920 = frontier_phi_17_15_ladder;
        }
        float _2092;
        if (_1889 > 0.0)
        {
            _2092 = abs((1.0 - _1879) / _1889);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1889 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1879 + 1.0) / _1889);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2092 = frontier_phi_26_22_ladder;
        }
        float _2387;
        if (_1892 > 0.0)
        {
            _2387 = abs((1.0 - _1883) / _1892);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1892 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1883 + 1.0) / _1892);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2387 = frontier_phi_38_33_ladder;
        }
        float _2389 = isnan(_2092) ? _1920 : (isnan(_1920) ? _2092 : min(_1920, _2092));
        float _2390 = isnan(_2387) ? _2389 : (isnan(_2389) ? _2387 : min(_2389, _2387));
        float _2394 = (_2390 * _1886) + _1875;
        float _2395 = (_2390 * _1889) + _1879;
        float _2396 = (_2390 * _1892) + _1883;
        float _2397 = _2390 * 9.9999997473787516355514526367188e-05;
        float _2399 = (-1.0) - _2397;
        float _2401 = _2397 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2396 > _2401) || ((_2396 < _2399) || ((_2395 > _2401) || ((_2395 < _2399) || ((_2394 < _2399) || (_2394 > _2401))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2541 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2396, cbModelParam._m0[9u].z, fma(_2395, cbModelParam._m0[9u].y, _2394 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2396, cbModelParam._m0[10u].z, fma(_2395, cbModelParam._m0[10u].y, _2394 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2396, cbModelParam._m0[11u].z, fma(_2395, cbModelParam._m0[11u].y, _2394 * cbModelParam._m0[11u].x))), _1827);
            frontier_phi_16_38_ladder = _2541.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2541.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2541.x * cbModelParam._m0[1u].y;
        }
        _1908 = frontier_phi_16_38_ladder_2;
        _1910 = frontier_phi_16_38_ladder_1;
        _1912 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1896 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_984, _985, _986), _1827);
        _1908 = _1896.x * cbModelParam._m0[1u].y;
        _1910 = _1896.y * cbModelParam._m0[1u].y;
        _1912 = _1896.z * cbModelParam._m0[1u].y;
    }
    float _1916 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _801);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1916 : min(cbModelParam._m0[25u].w, _1916));
    float _2007;
    float _2009;
    float _2011;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1971 = fma(_1048, cbModelParam._m0[21u].z, fma(_1044, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1040)) + cbModelParam._m0[21u].w;
        float _1975 = fma(_1048, cbModelParam._m0[22u].z, fma(_1044, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1040)) + cbModelParam._m0[22u].w;
        float _1979 = fma(_1048, cbModelParam._m0[23u].z, fma(_1044, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1040)) + cbModelParam._m0[23u].w;
        float _1982 = fma(_986, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _984));
        float _1985 = fma(_986, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _984));
        float _1988 = fma(_986, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _984));
        float _2097;
        if (_1982 > 0.0)
        {
            _2097 = abs((1.0 - _1971) / _1982);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1971 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2097 = frontier_phi_28_24_ladder;
        }
        float _2414;
        if (_1985 > 0.0)
        {
            _2414 = abs((1.0 - _1975) / _1985);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1975 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2414 = frontier_phi_40_35_ladder;
        }
        float _2752;
        if (_1988 > 0.0)
        {
            _2752 = abs((1.0 - _1979) / _1988);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1988 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1979 + 1.0) / _1988);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2752 = frontier_phi_50_47_ladder;
        }
        float _2754 = isnan(_2414) ? _2097 : (isnan(_2097) ? _2414 : min(_2097, _2414));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _1982) + _1971;
        float _2760 = (_2755 * _1985) + _1975;
        float _2761 = (_2755 * _1988) + _1979;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2883 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _1917);
            frontier_phi_25_50_ladder = _2883.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2883.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2883.x * cbModelParam._m0[1u].z;
        }
        _2007 = frontier_phi_25_50_ladder_2;
        _2009 = frontier_phi_25_50_ladder_1;
        _2011 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_984, _985, _986), _1917);
        _2007 = _1991.x * cbModelParam._m0[1u].z;
        _2009 = _1991.y * cbModelParam._m0[1u].z;
        _2011 = _1991.z * cbModelParam._m0[1u].z;
    }
    float _2024 = (((_1011 * _960) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2007 - _1908)) + _1908);
    float _2026 = (((_1011 * _962) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2009 - _1910)) + _1910);
    float _2028 = (((_1011 * _963) + _1012) * _976) * ((cbModelParam._m0[1u].w * (_2011 - _1912)) + _1912);
    float _2031 = fma(_2028, cbSceneParam._m0[89u].z, fma(_2026, cbSceneParam._m0[89u].y, _2024 * cbSceneParam._m0[89u].x));
    float _2034 = fma(_2028, cbSceneParam._m0[90u].z, fma(_2026, cbSceneParam._m0[90u].y, _2024 * cbSceneParam._m0[90u].x));
    float _2037 = fma(_2028, cbSceneParam._m0[91u].z, fma(_2026, cbSceneParam._m0[91u].y, _2024 * cbSceneParam._m0[91u].x));
    float _2071 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2083 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2084 = _2071 / _2083;
    float _2085 = _2075 / _2083;
    float _2086 = _2079 / _2083;
    float _2233;
    float _2234;
    float _2235;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2113 = ((uint(_2086 > cbSceneParam._m0[59u].y) + uint(_2086 > cbSceneParam._m0[59u].x)) + uint(_2086 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2114 = _2113 + 43u;
        uint _2122 = _2113 + 44u;
        uint _2130 = _2113 + 45u;
        uint _2138 = _2113 + 46u;
        float _2149 = fma(_2083, cbSceneParam._m0[_2114].w, fma(_2079, cbSceneParam._m0[_2114].z, fma(_2075, cbSceneParam._m0[_2114].y, _2071 * cbSceneParam._m0[_2114].x)));
        float _2153 = fma(_2083, cbSceneParam._m0[_2122].w, fma(_2079, cbSceneParam._m0[_2122].z, fma(_2075, cbSceneParam._m0[_2122].y, _2071 * cbSceneParam._m0[_2122].x)));
        float _2161 = fma(_2083, cbSceneParam._m0[_2138].w, fma(_2079, cbSceneParam._m0[_2138].z, fma(_2075, cbSceneParam._m0[_2138].y, _2071 * cbSceneParam._m0[_2138].x)));
        float _2166 = cbSceneParam._m0[33u].z * _2161;
        float _2168 = cbSceneParam._m0[33u].w * _2161;
        float _2171 = fma(_2083, cbSceneParam._m0[_2130].w, fma(_2079, cbSceneParam._m0[_2130].z, fma(_2075, cbSceneParam._m0[_2130].y, _2071 * cbSceneParam._m0[_2130].x))) / _2161;
        float _2219 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
        float _4622 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        float _2226 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2166 + _2149) / _2161, (_2168 + _2153) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2168 + _2149) / _2161, (_2153 - _2166) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2166) / _2161, (_2153 - _2168) / _2161), _2171), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2149 - _2168) / _2161, (_2166 + _2153) / _2161), _2171), 0.0)).x), vec4(0.25)));
        _2233 = 1.0 - (_2226 * cbSceneParam._m0[34u].x);
        _2234 = 1.0 - (_2226 * cbSceneParam._m0[34u].y);
        _2235 = 1.0 - (_2226 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2233 = 1.0;
        _2234 = 1.0;
        _2235 = 1.0;
    }
    float _2299;
    float _2301;
    float _2303;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2287 = fma(_2083, cbSceneParam._m0[63u].w, fma(_2079, cbSceneParam._m0[63u].z, fma(_2075, cbSceneParam._m0[63u].y, _2071 * cbSceneParam._m0[63u].x)));
        float _2288 = fma(_2083, cbSceneParam._m0[60u].w, fma(_2079, cbSceneParam._m0[60u].z, fma(_2075, cbSceneParam._m0[60u].y, _2071 * cbSceneParam._m0[60u].x))) / _2287;
        float _2289 = fma(_2083, cbSceneParam._m0[61u].w, fma(_2079, cbSceneParam._m0[61u].z, fma(_2075, cbSceneParam._m0[61u].y, _2071 * cbSceneParam._m0[61u].x))) / _2287;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2288 >= cbSceneParam._m0[64u].x) && (_2289 >= cbSceneParam._m0[64u].y)) && (_2288 <= cbSceneParam._m0[64u].z)) && (_2289 <= cbSceneParam._m0[64u].w))
        {
            float _2427 = fma(_2083, cbSceneParam._m0[62u].w, fma(_2079, cbSceneParam._m0[62u].z, fma(_2075, cbSceneParam._m0[62u].y, _2071 * cbSceneParam._m0[62u].x))) / _2287;
            float _2431 = isnan(cbSceneParam._m0[41u].w) ? _2427 : (isnan(_2427) ? cbSceneParam._m0[41u].w : max(_2427, cbSceneParam._m0[41u].w));
            float _2474 = (cbSceneParam._m0[33u].x - sqrt(((_2085 * _2085) + (_2084 * _2084)) + (_2086 * _2086))) * cbSceneParam._m0[33u].y;
            float _4638 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
            float _2481 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2288, cbSceneParam._m0[33u].w + _2289), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2288, _2289 - cbSceneParam._m0[33u].z), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].z, _2289 - cbSceneParam._m0[33u].w), _2431), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2288 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2289), _2431), 0.0)).x), vec4(0.25)));
            float _2485 = 1.0 - (_2481 * cbSceneParam._m0[34u].x);
            float _2486 = 1.0 - (_2481 * cbSceneParam._m0[34u].y);
            float _2487 = 1.0 - (_2481 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2487) ? _2235 : (isnan(_2235) ? _2487 : min(_2235, _2487));
            frontier_phi_37_36_ladder_1 = isnan(_2486) ? _2234 : (isnan(_2234) ? _2486 : min(_2234, _2486));
            frontier_phi_37_36_ladder_2 = isnan(_2485) ? _2233 : (isnan(_2233) ? _2485 : min(_2233, _2485));
        }
        else
        {
            frontier_phi_37_36_ladder = _2235;
            frontier_phi_37_36_ladder_1 = _2234;
            frontier_phi_37_36_ladder_2 = _2233;
        }
        _2299 = frontier_phi_37_36_ladder_2;
        _2301 = frontier_phi_37_36_ladder_1;
        _2303 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2299 = _2233;
        _2301 = _2234;
        _2303 = _2235;
    }
    uvec4 _2308 = floatBitsToUint(cbInstanceData._m0[_276 + 5u]);
    uint _2310 = _2308.x * 14u;
    uint _2311 = _2310 + 13u;
    float _2318 = _976 + (-1.0);
    float _2323 = (cbLight._m0[_2311].x * _2318) + 1.0;
    float _2324 = (cbLight._m0[_2311].y * _2318) + 1.0;
    float _2325 = (cbLight._m0[_2311].z * _2318) + 1.0;
    float _2326 = (cbLight._m0[_2311].w * _2318) + 1.0;
    uint _2327 = _2310 + 5u;
    float _2333 = isnan(1.0) ? _2324 : (isnan(_2324) ? 1.0 : min(_2324, 1.0));
    uint _2337 = _2310 + 4u;
    float _2346 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
    uint _2350 = _2310 | 1u;
    float _2361 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_798, _799, _800));
    float _2364 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_798, _799, _800));
    float _4674 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _4685 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2369 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2371 = (isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0))) * 0.3183098733425140380859375;
    float _2378 = ((cbLight._m0[_2327].x * _2333) * _2371) + (((cbLight._m0[_2337].x * _2299) * _2346) * _2369);
    float _2379 = ((_2333 * cbLight._m0[_2327].y) * _2371) + (((cbLight._m0[_2337].y * _2301) * _2346) * _2369);
    float _2380 = ((_2333 * cbLight._m0[_2327].z) * _2371) + (((cbLight._m0[_2337].z * _2303) * _2346) * _2369);
    uvec4 _2384 = floatBitsToUint(cbLight._m0[_2310 + 12u]);
    bool _2386 = _2384.x == 0u;
    float _2488;
    float _2490;
    float _2492;
    if (_2386)
    {
        _2488 = _2378;
        _2490 = _2379;
        _2492 = _2380;
    }
    else
    {
        uint _2496 = _2310 + 6u;
        float _2512 = (dot(vec3(cbLight._m0[_2310 + 2u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2513 = _2512 * _2512;
        float _4696 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
        float _2514 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2515 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2488 = (((cbLight._m0[_2496].x * 0.3183098733425140380859375) * _2514) * _2515) + _2378;
        _2490 = (((cbLight._m0[_2496].y * 0.3183098733425140380859375) * _2514) * _2515) + _2379;
        _2492 = (((cbLight._m0[_2496].z * 0.3183098733425140380859375) * _2514) * _2515) + _2380;
    }
    bool _2495 = _2384.y == 0u;
    float _2550;
    float _2552;
    float _2554;
    if (_2495)
    {
        _2550 = _2488;
        _2552 = _2490;
        _2554 = _2492;
    }
    else
    {
        uint _2723 = _2310 + 7u;
        float _2739 = (dot(vec3(cbLight._m0[_2310 + 3u].xyz), vec3(_798, _799, _800)) * 0.5) + 0.5;
        float _2740 = _2739 * _2739;
        float _4712 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        float _2741 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2742 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2550 = (((cbLight._m0[_2723].x * 0.3183098733425140380859375) * _2741) * _2742) + _2488;
        _2552 = (((cbLight._m0[_2723].y * 0.3183098733425140380859375) * _2741) * _2742) + _2490;
        _2554 = (((cbLight._m0[_2723].z * 0.3183098733425140380859375) * _2741) * _2742) + _2492;
    }
    uint _2557 = _2310 + 8u;
    float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2310].w)) * _801) * 0.949999988079071044921875);
    float _2571 = _2570 * _2570;
    float _2572 = cbLight._m0[_2310].x + _878;
    float _2573 = cbLight._m0[_2310].y + _879;
    float _2574 = cbLight._m0[_2310].z + _880;
    float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
    float _2579 = _2578 * _2572;
    float _2580 = _2578 * _2573;
    float _2581 = _2578 * _2574;
    float _2582 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2310].xyz));
    float _4728 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
    float _2585 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _4739 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
    float _2586 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2587 = dot(vec3(_798, _799, _800), vec3(_2579, _2580, _2581));
    float _4750 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0));
    float _2591 = dot(vec3(cbLight._m0[_2310].xyz), vec3(_2579, _2580, _2581));
    float _4761 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2595 = _2571 * _2571;
    float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
    float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0)))) * 5.0);
    float _2608 = 0.959999978542327880859375 - _957;
    float _2610 = 0.959999978542327880859375 - _958;
    float _2611 = 0.959999978542327880859375 - _959;
    float _2618 = 1.0 - _2571;
    float _2629 = (0.5 / (((_2586 * ((_2585 * _2618) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2618) + _2571) * _2585))) * _2585;
    float _4772 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2631 = (isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
    uint _2645 = _2310 + 9u;
    float _2656 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2350].w)) * _801) * 0.949999988079071044921875);
    float _2657 = _2656 * _2656;
    float _2658 = cbLight._m0[_2350].x + _878;
    float _2659 = cbLight._m0[_2350].y + _879;
    float _2660 = cbLight._m0[_2350].z + _880;
    float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
    float _2665 = _2664 * _2658;
    float _2666 = _2664 * _2659;
    float _2667 = _2664 * _2660;
    float _2668 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2350].xyz));
    float _4783 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
    float _2671 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2672 = dot(vec3(_798, _799, _800), vec3(_2665, _2666, _2667));
    float _4794 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
    float _2676 = dot(vec3(cbLight._m0[_2350].xyz), vec3(_2665, _2666, _2667));
    float _4805 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2680 = _2657 * _2657;
    float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
    float _2691 = exp2(log2(1.0 - (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) * 5.0);
    float _2698 = 1.0 - _2657;
    float _2708 = (0.5 / (((_2586 * ((_2671 * _2698) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2698) + _2657) * _2671))) * _2671;
    float _4816 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
    float _2710 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
    float _2720 = (((((_2691 * _2608) + _960) * cbLight._m0[_2645].x) * _2710) * _2333) + ((((cbLight._m0[_2557].x * _2299) * ((_2607 * _2608) + _960)) * _2631) * _2346);
    float _2721 = (((((_2691 * _2610) + _962) * cbLight._m0[_2645].y) * _2710) * _2333) + ((((cbLight._m0[_2557].y * _2301) * ((_2607 * _2610) + _962)) * _2631) * _2346);
    float _2722 = (((((_2691 * _2611) + _963) * cbLight._m0[_2645].z) * _2710) * _2333) + ((((cbLight._m0[_2557].z * _2303) * ((_2607 * _2611) + _963)) * _2631) * _2346);
    float _2778;
    float _2780;
    float _2782;
    if (_2386)
    {
        _2778 = _2720;
        _2780 = _2721;
        _2782 = _2722;
    }
    else
    {
        uint _2784 = _2310 + 2u;
        uint _2788 = _2310 + 10u;
        float _2802 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2784].w)) * _801) * 0.949999988079071044921875);
        float _2803 = _2802 * _2802;
        float _2804 = cbLight._m0[_2784].x + _878;
        float _2805 = cbLight._m0[_2784].y + _879;
        float _2806 = cbLight._m0[_2784].z + _880;
        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
        float _2811 = _2810 * _2804;
        float _2812 = _2810 * _2805;
        float _2813 = _2810 * _2806;
        float _2814 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2784].xyz));
        float _4827 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2818 = dot(vec3(_798, _799, _800), vec3(_2811, _2812, _2813));
        float _4838 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2821 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2822 = dot(vec3(cbLight._m0[_2784].xyz), vec3(_2811, _2812, _2813));
        float _4849 = isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0));
        float _2826 = _2803 * _2803;
        float _2830 = ((_2821 * _2821) * (_2826 + (-1.0))) + 1.0;
        float _2837 = exp2(log2(1.0 - (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) * 5.0);
        float _2844 = 1.0 - _2803;
        float _2854 = (0.5 / (((_2586 * ((_2817 * _2844) + _2803)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2844) + _2803) * _2817))) * _2817;
        float _4860 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2856 = (isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0))) * (_2826 / ((_2830 * _2830) * 3.141590118408203125));
        float _2857 = isnan(1.0) ? _2325 : (isnan(_2325) ? 1.0 : min(_2325, 1.0));
        _2778 = (((((_2837 * _2608) + _960) * cbLight._m0[_2788].x) * _2856) * _2857) + _2720;
        _2780 = (((((_2837 * _2610) + _962) * cbLight._m0[_2788].y) * _2856) * _2857) + _2721;
        _2782 = (((((_2837 * _2611) + _963) * cbLight._m0[_2788].z) * _2856) * _2857) + _2722;
    }
    float _2888;
    float _2890;
    float _2892;
    if (_2495)
    {
        _2888 = _2778;
        _2890 = _2780;
        _2892 = _2782;
    }
    else
    {
        uint _2899 = _2310 + 3u;
        uint _2903 = _2310 + 11u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _801) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _878;
        float _2920 = cbLight._m0[_2899].y + _879;
        float _2921 = cbLight._m0[_2899].z + _880;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_798, _799, _800), vec3(cbLight._m0[_2899].xyz));
        float _4876 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _2933 = dot(vec3(_798, _799, _800), vec3(_2926, _2927, _2928));
        float _4887 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _4898 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2586 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2586 * _2959) + _2918) * _2932))) * _2932;
        float _4909 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2326 : (isnan(_2326) ? 1.0 : min(_2326, 1.0));
        _2888 = (((((_2952 * _2608) + _960) * cbLight._m0[_2903].x) * _2971) * _2972) + _2778;
        _2890 = (((((_2952 * _2610) + _962) * cbLight._m0[_2903].y) * _2971) * _2972) + _2780;
        _2892 = (((((_2952 * _2611) + _963) * cbLight._m0[_2903].z) * _2971) * _2972) + _2782;
    }
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    float _3048;
    if (_2308.y == 0u)
    {
        uvec4 _2993 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2994 = _2993.x;
        uint _3005 = uint((float(_2993.y) * floor(float(uint(cbSceneParam._m0[85u].y * _899) / _2994))) + floor(float(uint(cbSceneParam._m0[85u].x * _898) / _2994)));
        float _3015 = (log2(_2086 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3016 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        uint _3019 = uint(isnan(14.0) ? _3016 : (isnan(_3016) ? 14.0 : min(_3016, 14.0)));
        uvec4 _3024 = texelFetch(g_lightClusterGridBuffer, int(((_3019 << 2u) + (_3005 << 6u)) >> 2u));
        uint _3025 = _3024.x;
        uint _3026 = _2993.z;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        if (((((1u << ((_3026 >> 4u) & 15u)) + 4294967295u) & _3025) == 0u) || ((_3026 & 240u) == 0u))
        {
            _3105 = 0.0;
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
        }
        else
        {
            float _3106;
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            uint _3264 = 0u;
            uint _3273;
            bool _3274;
            for (;;)
            {
                _3273 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3264 << 2u)) >> 2u)).x;
                _3274 = _3273 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3274)
                {
                    frontier_phi_71_pred = _3263;
                    frontier_phi_71_pred_1 = _3262;
                    frontier_phi_71_pred_2 = _3261;
                    frontier_phi_71_pred_3 = _3260;
                    frontier_phi_71_pred_4 = _3259;
                    frontier_phi_71_pred_5 = _3258;
                }
                else
                {
                    float _3403;
                    float _3404;
                    float _3405;
                    float _3406;
                    float _3407;
                    float _3408;
                    uint _3409;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3261;
                    _3407 = _3262;
                    _3408 = _3263;
                    _3409 = _3273;
                    float _3330;
                    float _3331;
                    float _3332;
                    float _3333;
                    float _3334;
                    float _3335;
                    for (;;)
                    {
                        uint _3413 = uint(findLSB(_3409)) + (_3264 << 5u);
                        uint _3410 = (_3409 + 4294967295u) & _3409;
                        uint _3415 = _3413 * 48u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3415)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3415 + 3u)).x));
                        uint _3435 = (_3413 * 48u) + 4u;
                        vec4 _3448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 3u)).x));
                        uint _3454 = (_3413 * 48u) + 8u;
                        vec3 _3465 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3454)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3454 + 2u)).x));
                        float _3469 = _3429.x - _2084;
                        float _3470 = _3429.y - _2085;
                        float _3471 = _3429.z - _2086;
                        float _3472 = dot(vec3(_3469, _3470, _3471), vec3(_3469, _3470, _3471));
                        float _3475 = inversesqrt(_3472);
                        float _3476 = _3475 * _3469;
                        float _3477 = _3475 * _3470;
                        float _3478 = _3475 * _3471;
                        float _3479 = dot(vec3(_917, _920, _923), vec3(_3476, _3477, _3478));
                        float _3484 = 1.0 - (_3472 * _3429.w);
                        float _4935 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                        float _3485 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
                        float _3486 = sqrt(_3472) * _3448.w;
                        float _3489 = 1.39999997615814208984375 / (_3486 + 1.39999997615814208984375);
                        float _3490 = _3489 * _3489;
                        float _3493 = ((1.0 - _3490) * _3479) + _3490;
                        float _3496 = _3486 * _3486;
                        float _3500 = ((isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0))) * _3485) / ((_3496 * 0.699999988079071044921875) + 1.0);
                        float _3504 = (-0.0) - _2084;
                        float _3505 = (-0.0) - _2085;
                        float _3506 = (-0.0) - _2086;
                        float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                        float _3511 = _3510 * _3504;
                        float _3512 = _3510 * _3505;
                        float _3513 = _3510 * _3506;
                        float _3520 = exp2(log2(1.0 / ((_3496 * 3.5) + 5.0)) * 0.25);
                        float _3521 = 1.0 - _992;
                        float _3528 = sqrt(1.0 - ((1.0 - (_3521 * _3521)) * (1.0 - (_3520 * _3520))));
                        float _3529 = _3528 * _3528;
                        float _3530 = _3529 * _3529;
                        float _3531 = _3511 + _3476;
                        float _3532 = _3512 + _3477;
                        float _3533 = _3513 + _3478;
                        float _3537 = inversesqrt(dot(vec3(_3531, _3532, _3533), vec3(_3531, _3532, _3533)));
                        float _3541 = dot(vec3(_917, _920, _923), vec3(_3511, _3512, _3513));
                        float _4951 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3544 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3545 = dot(vec3(_917, _920, _923), vec3(_3537 * _3531, _3537 * _3532, _3537 * _3533));
                        float _4962 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                        float _3548 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3552 = ((_3548 * _3548) * (_3530 + (-1.0))) + 1.0;
                        float _3553 = _3489 * _3529;
                        float _3554 = _3553 * _3553;
                        float _3557 = ((1.0 - _3554) * _3479) + _3554;
                        float _4973 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                        float _3558 = isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0));
                        float _3559 = 1.0 - _3529;
                        float _3569 = (0.5 / (((_3558 * ((_3544 * _3559) + _3529)) + 9.9999999392252902907785028219223e-09) + (((_3558 * _3559) + _3529) * _3544))) * _3558;
                        float _4984 = isnan(0.0) ? _3569 : (isnan(_3569) ? 0.0 : max(_3569, 0.0));
                        float _3580 = (((_3530 * 3.1415927410125732421875) * (isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0)))) / ((_3552 * _3552) * ((_3496 * 2.1991131305694580078125) + 3.141590118408203125))) * _3485;
                        _3333 = (_3500 * _3448.x) + _3406;
                        _3334 = (_3500 * _3448.y) + _3407;
                        _3335 = (_3500 * _3448.z) + _3408;
                        _3330 = (_3580 * _3465.x) + _3403;
                        _3331 = (_3580 * _3465.y) + _3404;
                        _3332 = (_3580 * _3465.z) + _3405;
                        if (_3410 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3333;
                            _3407 = _3334;
                            _3408 = _3335;
                            _3409 = _3410;
                        }
                    }
                    frontier_phi_71_pred = _3335;
                    frontier_phi_71_pred_1 = _3334;
                    frontier_phi_71_pred_2 = _3333;
                    frontier_phi_71_pred_3 = _3332;
                    frontier_phi_71_pred_4 = _3331;
                    frontier_phi_71_pred_5 = _3330;
                }
                _3116 = frontier_phi_71_pred;
                _3114 = frontier_phi_71_pred_1;
                _3112 = frontier_phi_71_pred_2;
                _3110 = frontier_phi_71_pred_3;
                _3108 = frontier_phi_71_pred_4;
                _3106 = frontier_phi_71_pred_5;
                uint _3265 = _3264 + 1u;
                if (_3265 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3258 = _3106;
                    _3259 = _3108;
                    _3260 = _3110;
                    _3261 = _3112;
                    _3262 = _3114;
                    _3263 = _3116;
                    _3264 = _3265;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3105 = _3106;
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
        }
        uvec4 _3119 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3120 = _3119.z;
        uint _3122 = (_3120 >> 8u) & 15u;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((4294967295u << _3122) & _3025) == 0u)
        {
            _3226 = _3105;
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
        }
        else
        {
            float _3251 = inversesqrt(dot(vec3(_2084, _2085, _2086), vec3(_2084, _2085, _2086)));
            float _3252 = _3251 * _2084;
            float _3253 = _3251 * _2085;
            float _3254 = _3251 * _2086;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3122 < ((_3120 >> 12u) & 15u))
            {
                float _3227;
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3386 = _3105;
                float _3387 = _3107;
                float _3388 = _3109;
                float _3389 = _3111;
                float _3390 = _3113;
                float _3391 = _3115;
                uint _3392 = _3122;
                uint _3401;
                bool _3402;
                for (;;)
                {
                    _3401 = texelFetch(g_lightClassification, int((((_3019 << 5u) + (_3005 << 9u)) + (_3392 << 2u)) >> 2u)).x;
                    _3402 = _3401 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3402)
                    {
                        frontier_phi_82_pred = _3391;
                        frontier_phi_82_pred_1 = _3390;
                        frontier_phi_82_pred_2 = _3389;
                        frontier_phi_82_pred_3 = _3388;
                        frontier_phi_82_pred_4 = _3387;
                        frontier_phi_82_pred_5 = _3386;
                    }
                    else
                    {
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3597;
                        float _3598;
                        float _3599;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3891;
                        float _3892;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        float _3610 = _3389;
                        float _3611 = _3390;
                        float _3612 = _3391;
                        uint _3613 = _3401;
                        uint _3614;
                        vec4 _3639;
                        float _3640;
                        vec4 _3655;
                        vec3 _3667;
                        vec4 _3682;
                        vec4 _3697;
                        float _3743;
                        bool _3744;
                        for (;;)
                        {
                            uint _3624 = ((_3392 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3613));
                            _3614 = (_3613 + 4294967295u) & _3613;
                            uint _3626 = _3624 * 40u;
                            _3639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3626 + 3u)).x));
                            _3640 = _3639.w;
                            uint _3642 = (_3624 * 40u) + 4u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3624 * 40u) + 8u;
                            _3667 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x));
                            uint _3669 = (_3624 * 40u) + 16u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            uint _3684 = (_3624 * 40u) + 20u;
                            _3697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3684 + 3u)).x));
                            uint _3699 = (_3624 * 40u) + 24u;
                            vec4 _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3718 = (_3624 * 40u) + 28u;
                            vec4 _3731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3718 + 3u)).x));
                            _3743 = fma(_2086, _3731.z, fma(_2085, _3731.y, _3731.x * _2084)) + _3731.w;
                            _3744 = !((fma(_2086, _3712.z, fma(_2085, _3712.y, _3712.x * _2084)) + _3712.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3744)
                            {
                                float _3771 = _3639.x - _2084;
                                float _3772 = _3639.y - _2085;
                                float _3773 = _3639.z - _2086;
                                float _3774 = dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773));
                                float _3777 = inversesqrt(_3774);
                                float _3778 = _3777 * _3771;
                                float _3779 = _3777 * _3772;
                                float _3780 = _3777 * _3773;
                                float _3784 = 1.0 - (_3774 / (_3640 * _3640));
                                float _4995 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4995 : (isnan(_4995) ? 1.0 : min(_4995, 1.0));
                                float _3789 = sqrt(_3774) * _3655.w;
                                float _3791 = 1.39999997615814208984375 / (_3789 + 1.39999997615814208984375);
                                float _3792 = _3791 * _3791;
                                float _3795 = ((1.0 - _3792) * dot(vec3(_3778, _3779, _3780), vec3(_917, _920, _923))) + _3792;
                                float _3798 = _3789 * _3789;
                                float _3802 = (fma(_2086, _3682.z, fma(_2085, _3682.y, _3682.x * _2084)) + _3682.w) / _3743;
                                float _3803 = (fma(_2086, _3697.z, fma(_2085, _3697.y, _3697.x * _2084)) + _3697.w) / _3743;
                                float _3807 = 1.0 - dot(vec2(_3802, _3803), vec2(_3802, _3803));
                                float _5011 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3808 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3809 = _3808 * (((isnan(0.0) ? _3795 : (isnan(_3795) ? 0.0 : max(_3795, 0.0))) * _3785) / ((_3798 * 0.699999988079071044921875) + 1.0));
                                float _3821 = exp2(log2(1.0 / ((_3798 * 3.5) + 5.0)) * 0.25);
                                float _3822 = 1.0 - _992;
                                float _3829 = sqrt(1.0 - ((1.0 - (_3822 * _3822)) * (1.0 - (_3821 * _3821))));
                                float _3830 = _3829 * _3829;
                                float _3831 = _3830 * _3830;
                                float _3832 = _3778 - _3252;
                                float _3833 = _3779 - _3253;
                                float _3834 = _3780 - _3254;
                                float _3838 = inversesqrt(dot(vec3(_3832, _3833, _3834), vec3(_3832, _3833, _3834)));
                                float _3842 = dot(vec3(_917, _920, _923), vec3((-0.0) - _3252, (-0.0) - _3253, (-0.0) - _3254));
                                float _5022 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3845 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3846 = dot(vec3(_917, _920, _923), vec3(_3838 * _3832, _3838 * _3833, _3838 * _3834));
                                float _5033 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3849 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3853 = ((_3849 * _3849) * (_3831 + (-1.0))) + 1.0;
                                float _3854 = _3791 * _3830;
                                float _3855 = _3854 * _3854;
                                float _3861 = ((1.0 - _3855) * dot(vec3(_917, _920, _923), vec3(_3778, _3779, _3780))) + _3855;
                                float _5044 = isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0));
                                float _3862 = isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0));
                                float _3863 = 1.0 - _3830;
                                float _3873 = (0.5 / (((_3862 * ((_3845 * _3863) + _3830)) + 9.9999999392252902907785028219223e-09) + (((_3862 * _3863) + _3830) * _3845))) * _3862;
                                float _5055 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3883 = (_3808 * _3785) * (((_3831 * 3.1415927410125732421875) * (isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0)))) / ((_3853 * _3853) * ((_3798 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3809 * _3655.z;
                                frontier_phi_88_pred_1 = _3809 * _3655.y;
                                frontier_phi_88_pred_2 = _3809 * _3655.x;
                                frontier_phi_88_pred_3 = _3883 * _3667.z;
                                frontier_phi_88_pred_4 = _3883 * _3667.y;
                                frontier_phi_88_pred_5 = _3883 * _3667.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3892 = frontier_phi_88_pred;
                            _3891 = frontier_phi_88_pred_1;
                            _3890 = frontier_phi_88_pred_2;
                            _3889 = frontier_phi_88_pred_3;
                            _3888 = frontier_phi_88_pred_4;
                            _3887 = frontier_phi_88_pred_5;
                            _3597 = _3890 + _3610;
                            _3598 = _3891 + _3611;
                            _3599 = _3892 + _3612;
                            _3594 = _3887 + _3607;
                            _3595 = _3888 + _3608;
                            _3596 = _3889 + _3609;
                            if (_3614 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3597;
                                _3611 = _3598;
                                _3612 = _3599;
                                _3613 = _3614;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3599;
                        frontier_phi_82_pred_1 = _3598;
                        frontier_phi_82_pred_2 = _3597;
                        frontier_phi_82_pred_3 = _3596;
                        frontier_phi_82_pred_4 = _3595;
                        frontier_phi_82_pred_5 = _3594;
                    }
                    _3237 = frontier_phi_82_pred;
                    _3235 = frontier_phi_82_pred_1;
                    _3233 = frontier_phi_82_pred_2;
                    _3231 = frontier_phi_82_pred_3;
                    _3229 = frontier_phi_82_pred_4;
                    _3227 = frontier_phi_82_pred_5;
                    uint _3393 = _3392 + 1u;
                    if (_3393 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3386 = _3227;
                        _3387 = _3229;
                        _3388 = _3231;
                        _3389 = _3233;
                        _3390 = _3235;
                        _3391 = _3237;
                        _3392 = _3393;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3233;
                frontier_phi_63_64_ladder_1 = _3237;
                frontier_phi_63_64_ladder_2 = _3235;
                frontier_phi_63_64_ladder_3 = _3231;
                frontier_phi_63_64_ladder_4 = _3229;
                frontier_phi_63_64_ladder_5 = _3227;
            }
            else
            {
                frontier_phi_63_64_ladder = _3111;
                frontier_phi_63_64_ladder_1 = _3115;
                frontier_phi_63_64_ladder_2 = _3113;
                frontier_phi_63_64_ladder_3 = _3109;
                frontier_phi_63_64_ladder_4 = _3107;
                frontier_phi_63_64_ladder_5 = _3105;
            }
            _3226 = frontier_phi_63_64_ladder_5;
            _3228 = frontier_phi_63_64_ladder_4;
            _3230 = frontier_phi_63_64_ladder_3;
            _3232 = frontier_phi_63_64_ladder;
            _3234 = frontier_phi_63_64_ladder_2;
            _3236 = frontier_phi_63_64_ladder_1;
        }
        float _3241 = isnan(1.0) ? _976 : (isnan(_976) ? 1.0 : min(_976, 1.0));
        _3038 = (_3241 * _3232) + _2550;
        _3040 = (_3241 * _3234) + _2552;
        _3042 = (_3241 * _3236) + _2554;
        _3044 = ((_3226 * _960) * _3241) + _2888;
        _3046 = ((_3228 * _962) * _3241) + _2890;
        _3048 = ((_3230 * _963) * _3241) + _2892;
    }
    else
    {
        _3038 = _2550;
        _3040 = _2552;
        _3042 = _2554;
        _3044 = _2888;
        _3046 = _2890;
        _3048 = _2892;
    }
    float _5071 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _5082 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _5093 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _3065 = ((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3038 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _976))) + ((_3044 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3066 = ((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3040 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _976))) + ((_3046 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    float _3067 = ((isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0))) * (_3042 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _976))) + ((_3048 + ((isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))) * _1816)) * cbPerFrame._m0[3u].x);
    uint _3068 = _276 + 6u;
    float _3076 = _898 / cbSceneParam._m0[86u].x;
    float _3077 = _899 / cbSceneParam._m0[86u].y;
    vec4 _3091 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, (log2((isnan(cbSceneParam._m0[77u].w) ? _820 : (isnan(_820) ? cbSceneParam._m0[77u].w : min(_820, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3093 = _3091.x;
    float _3094 = _3091.y;
    float _3095 = _3091.z;
    float _3096 = _3091.w;
    float _3168;
    float _3170;
    float _3172;
    float _3174;
    if (_820 > cbSceneParam._m0[78u].w)
    {
        float _3130 = isnan(_820) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _820 : min(cbSceneParam._m0[80u].w, _820));
        float _3131 = _3130 / _820;
        float _3142 = _3131 * _871;
        float _3143 = _872 * _3131;
        float _3144 = (-0.0) - _3143;
        float _3146 = _3131 * _873;
        float _3148 = (cbSceneParam._m0[77u].w * _3144) / _3130;
        float _3149 = _3148 + cbSceneParam._m0[79u].w;
        float _3150 = cbSceneParam._m0[79u].w - _3143;
        float _3156 = sqrt(((_3142 * _3142) + (_3143 * _3143)) + (_3146 * _3146));
        float _3159 = (1.0 - (cbSceneParam._m0[77u].w / _3130)) * _3156;
        float _3164 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3166 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3343;
        if (abs((_3144 - _3148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3343 = ((((_3149 > 0.0) ? exp2(_3164 * _3149) : (2.0 - exp2(_3166 * _3149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3159;
        }
        else
        {
            float _3287 = 1.0 / cbSceneParam._m0[80u].x;
            float _3288 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : max(_3149, _3150));
            float _3289 = isnan(_3150) ? _3149 : (isnan(_3149) ? _3150 : min(_3149, _3150));
            float _3298 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : min(_3288, 0.0));
            float _3299 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : min(_3289, 0.0));
            _3343 = ((abs(_3156 / _3144) * cbSceneParam._m0[80u].y) * ((((_3298 - _3299) * 2.0) - ((exp2(_3164 * (isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0)))) - exp2(_3164 * (isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0))))) * _3287)) - ((exp2(_3166 * _3298) - exp2(_3166 * _3299)) * _3287))) + (_3159 * cbSceneParam._m0[80u].z);
        }
        vec4 _3345 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3076, _3077, 1.0), 0.0);
        float _3354 = exp2((_3343 * (-1.44269502162933349609375)) * (1.0 - _3345.w));
        float _3355 = log2(_3354);
        float _3371 = log2(_3096);
        _3168 = (exp2(_3371 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].x)) * _3345.x) / cbSceneParam._m0[78u].x)) + _3093;
        _3170 = (exp2(_3371 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].y)) * _3345.y) / cbSceneParam._m0[78u].y)) + _3094;
        _3172 = (exp2(_3371 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3355 * cbSceneParam._m0[78u].z)) * _3345.z) / cbSceneParam._m0[78u].z)) + _3095;
        _3174 = _3354 * _3096;
    }
    else
    {
        _3168 = _3093;
        _3170 = _3094;
        _3172 = _3095;
        _3174 = _3096;
    }
    bool _3381;
    vec4 _3184;
    vec4 _3206;
    float _3208;
    float _3212;
    float _3213;
    float _3214;
    float _3215;
    bool _3225;
    for (;;)
    {
        _3184 = cbMatDynParam._m0[0u];
        float _3186 = roundEven(_3184.y);
        bool _3187 = _3186 == 3.0;
        float _3188 = log2(_3174);
        float _3195 = exp2(_3188 * cbSceneParam._m0[78u].x) * _3065;
        float _3196 = exp2(_3188 * cbSceneParam._m0[78u].y) * _3066;
        float _3197 = exp2(_3188 * cbSceneParam._m0[78u].z) * _3067;
        float _3204 = _887 + (-0.5);
        _3206 = cbMtdParam._m0[1u];
        _3208 = _3206.y * _3204;
        float _3211 = (_3186 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3212 = _3211 * (_3187 ? _3195 : (_3195 + (cbSceneParam._m0[72u].w * _3168)));
        _3213 = _3211 * (_3187 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3170)));
        _3214 = _3211 * (_3187 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3172)));
        _3215 = _3204 * 0.999000012874603271484375;
        _3225 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3225)
        {
            if ((cbInstanceData._m0[_276 + 7u].x + _3215) < 0.5)
            {
                _3381 = true;
                break;
            }
        }
        uint _3322 = _936 + uint(_3184.w);
        if ((cbInstanceData._m0[_3322].w < 1.0) && ((cbInstanceData._m0[_3322].w + _3215) < 0.5))
        {
            _3381 = true;
            break;
        }
        if ((_3208 + 1.0) < _3206.x)
        {
            _3381 = true;
            break;
        }
        _3381 = false;
        break;
    }
    float _3585;
    if (_3381)
    {
        discard_state = true;
        _3585 = 0.0;
    }
    else
    {
        _3585 = cbInstanceData._m0[_3068].w;
    }
    SV_Target.x = _3212;
    SV_Target.y = _3213;
    SV_Target.z = _3214;
    SV_Target.w = _3585;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3068].w;
    discard_exit();
}


