#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1532;
float _4193;
float _4194;
float _4195;
float _4196;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _253 = _252 * _244;
    float _254 = _252 * _245;
    float _255 = _252 * _246;
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = _259 * NORMAL.x;
    float _261 = _259 * NORMAL.y;
    float _262 = _259 * NORMAL.z;
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = _266 * TANGENT.x;
    float _268 = _266 * TANGENT.y;
    float _269 = _266 * TANGENT.z;
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _4205 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _4216 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _4227 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _447 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _449 = _447.x;
    float _461 = dot(vec4(_449, _447.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _478 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_449 - _461) * cbMtdParam._m0[23u].w) + _461) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4238 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _479 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _489 = (_347.x * cbMtdParam._m0[9u].x) * ((_479 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378);
    float _490 = (_347.y * cbMtdParam._m0[9u].y) * ((_479 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379);
    float _491 = (_347.z * cbMtdParam._m0[9u].z) * ((_479 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380);
    float _495 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _489;
    float _498 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _490;
    float _501 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _491;
    float _509 = (((_489 - _495) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) + _495) * 4.55000019073486328125;
    float _511 = (((_490 - _498) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) + _498) * 4.55000019073486328125;
    float _513 = (((_491 - _501) * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) + _501) * 4.55000019073486328125;
    vec4 _532 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _310) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _311) + cbTextureTilingScale._m0[14u].w));
    vec4 _552 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _579 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _596 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _598 = _596.x;
    float _599 = _596.y;
    float _600 = _596.z;
    float _609 = ((_579.z - _600) * _479) + _600;
    float _612 = ((((_579.x - _598) * _479) + _598) * 2.0) + (-1.0);
    float _613 = ((((_579.y - _599) * _479) + _599) * 2.0) + (-1.0);
    float _614 = dot(vec2(_612, _613), vec2(_612, _613));
    float _4249 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _619 = sqrt(1.0 - (isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))));
    vec4 _639 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _651 = (_612 + ((((_552.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_639.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _652 = (_613 + ((((_552.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_639.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _655 = fma(_619, _260, fma(_652, _267, _651 * _253));
    float _658 = fma(_619, _261, fma(_652, _268, _651 * _254));
    float _661 = fma(_619, _262, fma(_652, _269, _651 * _255));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    vec4 _692 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _310) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _311) + cbTextureTilingScale._m0[11u].w));
    float _694 = _692.x;
    float _695 = 1.0 - _694;
    float _704 = (cbMtdParam._m0[19u].x + dot(vec4(_665 * _655, _665 * _658, _665 * _661, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_694 - _695) * cbMtdParam._m0[24u].z) + _695) * cbMtdParam._m0[21u].z);
    float _4260 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _705 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
    float _707 = (-0.0) - cbMtdParam._m0[24u].x;
    float _709 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _709 : (isnan(_709) ? 1.0 : min(_709, 1.0));
    float _717 = _705 - ((_705 * TEXCOORD_8.x) * _710);
    float _718 = _705 - ((_705 * TEXCOORD_8.y) * _710);
    float _719 = _705 - ((_705 * TEXCOORD_8.z) * _710);
    float _726 = (_717 * ((_532.x * cbMtdParam._m0[18u].x) - _509)) + _509;
    float _727 = (_718 * ((_532.y * cbMtdParam._m0[18u].y) - _511)) + _511;
    float _728 = (_719 * ((_532.z * cbMtdParam._m0[18u].z) - _513)) + _513;
    vec4 _740 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _742 = _740.x;
    float _743 = 1.0 - _742;
    float _769 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_742 - _743) * cbMtdParam._m0[24u].w) + _743) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4281 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _770 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _778 = ((((cbMtdParam._m0[10u].x - _726) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _770) + _726;
    float _779 = ((((cbMtdParam._m0[10u].y - _727) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _770) + _727;
    float _780 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _728)) * _770) + _728;
    vec4 _792 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _806 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _808 = _806.x;
    float _825 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _808) * _479) + _808;
    float _829 = ((_792.x - _825) * cbMtdParam._m0[19u].z) + _825;
    float _831 = _829 - (_829 * _717);
    float _833 = _831 - (_831 * _770);
    float _838 = (((_552.z - _609) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _609;
    float _842 = ((_639.z - _838) * cbMtdParam._m0[19u].w) + _838;
    vec4 _856 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _310) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _311) + cbTextureTilingScale._m0[15u].w));
    float _863 = (_856.x * 2.0) + (-1.0);
    float _864 = (_856.y * 2.0) + (-1.0);
    float _865 = dot(vec2(_863, _864), vec2(_863, _864));
    float _4292 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _873 = ((_856.z - _842) * _717) + _842;
    float _876 = ((cbMtdParam._m0[23u].x - _873) * _770) + _873;
    vec4 _897 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _903 = (_897.x * 2.0) + (-1.0);
    float _904 = (_897.y * 2.0) + (-1.0);
    float _905 = dot(vec2(_903, _904), vec2(_903, _904));
    float _4303 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _920 = ((sqrt(1.0 - (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) - _619) * _719) + _619;
    float _923 = (((_863 - _651) * _717) + _651) + (cbMtdParam._m0[21u].x * _651);
    float _924 = (((_864 - _652) * _718) + _652) + (cbMtdParam._m0[21u].x * _652);
    float _935 = (((_903 - _923) + (_923 * cbMtdParam._m0[22u].z)) * _770) + _923;
    float _936 = (((_904 - _924) + (_924 * cbMtdParam._m0[22u].z)) * _770) + _924;
    float _937 = (_770 * (sqrt(1.0 - (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) - _920)) + _920;
    float _939 = cbMtdParam._m0[22u].x + _639.w;
    float _942 = fma(_937, _260, fma(_936, _267, _935 * _253));
    float _945 = fma(_937, _261, fma(_936, _268, _935 * _254));
    float _948 = fma(_937, _262, fma(_936, _269, _935 * _255));
    float _952 = inversesqrt(dot(vec3(_942, _945, _948), vec3(_942, _945, _948)));
    float _953 = _952 * _942;
    float _954 = _952 * _945;
    float _955 = _952 * _948;
    float _4314 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _956 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _4325 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _4336 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4347 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _4358 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _4369 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _961 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _975 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1025 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1015);
    float _1026 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1015);
    float _1027 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1015);
    float _1031 = inversesqrt(dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027)));
    float _1032 = _1025 * _1031;
    float _1033 = _1026 * _1031;
    float _1034 = _1027 * _1031;
    vec4 _1039 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1041 = _1039.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1213 = sqrt(((_1025 * _1025) + (_1026 * _1026)) + (_1027 * _1027));
        float _1219 = (cbMatDynParam._m0[5u].x * _1213) + cbMatDynParam._m0[5u].y;
        float _4380 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1224 = (cbMatDynParam._m0[5u].z * _1213) + cbMatDynParam._m0[5u].w;
        float _4391 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) - _1220)) + _1220) < ((_1041 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1052 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1053 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1071 = fma(_955, cbSceneParam._m0[5u].z, fma(_954, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _953));
    float _1074 = fma(_955, cbSceneParam._m0[6u].z, fma(_954, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _953));
    float _1077 = fma(_955, cbSceneParam._m0[7u].z, fma(_954, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _953));
    uint _1090 = _291 + 9u;
    uint _1091 = _1090 + uint(cbMatDynParam._m0[0u].w);
    float _1097 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0)))) * cbInstanceData._m0[_1091].x;
    float _1098 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0)))) * cbInstanceData._m0[_1091].y;
    float _1099 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0)))) * cbInstanceData._m0[_1091].z;
    float _4402 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
    float _4413 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
    float _1101 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
    float _4424 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
    float _1102 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
    float _1103 = 1.0 - _961;
    float _1104 = _1100 * _1103;
    float _1105 = _1101 * _1103;
    float _1106 = _1102 * _1103;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _961;
    float _1112 = (_1101 + (-0.039999999105930328369140625)) * _961;
    float _1113 = (_1102 + (-0.039999999105930328369140625)) * _961;
    float _1114 = _1111 + 0.039999999105930328369140625;
    float _1116 = _1112 + 0.039999999105930328369140625;
    float _1117 = _1113 + 0.039999999105930328369140625;
    vec4 _1126 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1052, cbSceneParam._m0[86u].y * _1053));
    float _1130 = ((isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * TEXCOORD_5.w) * _1126.x;
    float _1131 = dot(vec3(_953, _954, _955), vec3(_1032, _1033, _1034));
    float _1134 = _1131 * 2.0;
    float _1138 = (_1134 * _953) - _1032;
    float _1139 = (_1134 * _954) - _1033;
    float _1140 = (_1134 * _955) - _1034;
    float _1144 = abs(dot(vec3(_1032, _1033, _1034), vec3(_953, _954, _955)));
    float _4435 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _1146 = sqrt(_956);
    float _1159 = exp2((_1146 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1146 * 3.0));
    float _1165 = (1.0 - _1159) * ((_1146 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1166 = _1159 * _1146;
    float _1194 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1198 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1202 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1531;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1256 = fma(_1202, cbModelParam._m0[26u].z, fma(_1198, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1194));
        float _1260 = fma(_1202, cbModelParam._m0[27u].z, fma(_1198, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1194));
        float _1264 = fma(_1202, cbModelParam._m0[28u].z, fma(_1198, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1194));
        float _1289 = _1194 + _953;
        float _1290 = _1198 + _954;
        float _1291 = _1202 + _955;
        float _1301 = fma(_1291, cbModelParam._m0[26u].z, fma(_1290, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1289)) - _1256;
        float _1302 = fma(_1291, cbModelParam._m0[27u].z, fma(_1290, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1289)) - _1260;
        float _1303 = fma(_1291, cbModelParam._m0[28u].z, fma(_1290, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1289)) - _1264;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1256 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1260 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[34u].z) + ((((((_1264 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1359 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1325.x + (-0.5));
        float _1361 = _1359 * (_1325.y + (-0.5));
        float _1362 = _1359 * (_1325.z + (-0.5));
        float _1369 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1332.x + (-0.5));
        float _1371 = _1369 * (_1332.y + (-0.5));
        float _1372 = _1369 * (_1332.z + (-0.5));
        float _1379 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1339.x + (-0.5));
        float _1381 = _1379 * (_1339.y + (-0.5));
        float _1382 = _1379 * (_1339.z + (-0.5));
        float _1389 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1346.x + (-0.5));
        float _1391 = _1389 * (_1346.y + (-0.5));
        float _1392 = _1389 * (_1346.z + (-0.5));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1395 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1396 = _1360 * 0.5;
        float _1397 = _1370 * 0.5;
        float _1398 = _1380 * 0.5;
        float _1399 = dot(vec3(_1396, _1397, _1398), vec3(_1396, _1397, _1398));
        float _1404 = (_1399 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1399);
        float _1413 = (dot(vec3(_953, _954, _955), vec3(_1404 * _1396, _1404 * _1397, _1404 * _1398)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1423 = sqrt(((_1397 * _1397) + (_1396 * _1396)) + (_1398 * _1398)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1425 = _1424 * 2.0;
        float _1429 = (1.0 - _1424) / (_1424 + 1.0);
        float _4483 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1439 = ((((1.0 - _1430) * (_1425 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1425 + 1.0))) + _1430) * _1393;
        float _1440 = _1361 * 0.5;
        float _1441 = _1371 * 0.5;
        float _1442 = _1381 * 0.5;
        float _1443 = dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442));
        float _1448 = (_1443 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1443);
        float _1456 = (dot(vec3(_953, _954, _955), vec3(_1448 * _1440, _1448 * _1441, _1448 * _1442)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1465 = sqrt(((_1441 * _1441) + (_1440 * _1440)) + (_1442 * _1442)) / (_1394 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1467 = _1466 * 2.0;
        float _1471 = (1.0 - _1466) / (_1466 + 1.0);
        float _4516 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1481 = ((((1.0 - _1472) * (_1467 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1467 + 1.0))) + _1472) * _1394;
        float _1482 = _1362 * 0.5;
        float _1483 = _1372 * 0.5;
        float _1484 = _1382 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1498 = (dot(vec3(_953, _954, _955), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1507 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1395 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4549 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1509 + 1.0))) + _1514) * _1395;
        _1531 = _1362;
        _1533 = _1361;
        _1534 = _1360;
        _1535 = _1372;
        _1536 = _1371;
        _1537 = _1370;
        _1538 = _1382;
        _1539 = _1381;
        _1540 = _1380;
        _1541 = _1395;
        _1542 = _1394;
        _1543 = _1393;
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)));
        _1545 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)));
        _1546 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
    }
    else
    {
        _1531 = _1532;
        _1533 = _1532;
        _1534 = _1532;
        _1535 = _1532;
        _1536 = _1532;
        _1537 = _1532;
        _1538 = _1532;
        _1539 = _1532;
        _1540 = _1532;
        _1541 = _1532;
        _1542 = _1532;
        _1543 = _1532;
        _1544 = 0.0;
        _1545 = 0.0;
        _1546 = 0.0;
    }
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    float _1856;
    float _1857;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1574 = fma(_1202, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1194));
        float _1578 = fma(_1202, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1194));
        float _1582 = fma(_1202, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1194));
        float _1605 = _1194 + _953;
        float _1606 = _1198 + _954;
        float _1607 = _1202 + _955;
        float _1617 = fma(_1607, cbModelParam._m0[30u].z, fma(_1606, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1605)) - _1574;
        float _1618 = fma(_1607, cbModelParam._m0[31u].z, fma(_1606, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1605)) - _1578;
        float _1619 = fma(_1607, cbModelParam._m0[32u].z, fma(_1606, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1605)) - _1582;
        float _1623 = inversesqrt(dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619)));
        float _1636 = ((_1623 * _1617) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1574 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1637 = ((_1623 * _1618) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1578 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1638 = ((_1623 * _1619) / cbModelParam._m0[35u].z) + ((((((_1582 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1647 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1654 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        vec4 _1661 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1636, _1637, _1638), 0.0);
        float _1673 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1674 = _1673 * (_1640.x + (-0.5));
        float _1675 = _1673 * (_1640.y + (-0.5));
        float _1676 = _1673 * (_1640.z + (-0.5));
        float _1683 = exp2((_1647.w + (-0.5)) * 20.0) * 2.0;
        float _1684 = _1683 * (_1647.x + (-0.5));
        float _1685 = _1683 * (_1647.y + (-0.5));
        float _1686 = _1683 * (_1647.z + (-0.5));
        float _1693 = exp2((_1654.w + (-0.5)) * 20.0) * 2.0;
        float _1694 = _1693 * (_1654.x + (-0.5));
        float _1695 = _1693 * (_1654.y + (-0.5));
        float _1696 = _1693 * (_1654.z + (-0.5));
        float _1703 = exp2((_1661.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1661.x + (-0.5));
        float _1705 = _1703 * (_1661.y + (-0.5));
        float _1706 = _1703 * (_1661.z + (-0.5));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1709 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1710 = _1674 * 0.5;
        float _1711 = _1684 * 0.5;
        float _1712 = _1694 * 0.5;
        float _1713 = dot(vec3(_1710, _1711, _1712), vec3(_1710, _1711, _1712));
        float _1718 = (_1713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1713);
        float _1726 = (dot(vec3(_953, _954, _955), vec3(_1718 * _1710, _1718 * _1711, _1718 * _1712)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1735 = sqrt(((_1711 * _1711) + (_1710 * _1710)) + (_1712 * _1712)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1737 = _1736 * 2.0;
        float _1741 = (1.0 - _1736) / (_1736 + 1.0);
        float _4612 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
        float _1742 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1751 = ((((1.0 - _1742) * (_1737 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1737 + 1.0))) + _1742) * _1707;
        float _1752 = _1675 * 0.5;
        float _1753 = _1685 * 0.5;
        float _1754 = _1695 * 0.5;
        float _1755 = dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754));
        float _1760 = (_1755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1755);
        float _1768 = (dot(vec3(_953, _954, _955), vec3(_1760 * _1752, _1760 * _1753, _1760 * _1754)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1777 = sqrt(((_1753 * _1753) + (_1752 * _1752)) + (_1754 * _1754)) / (_1708 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1778 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1779 = _1778 * 2.0;
        float _1783 = (1.0 - _1778) / (_1778 + 1.0);
        float _4645 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1784 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1793 = ((((1.0 - _1784) * (_1779 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_1779 + 1.0))) + _1784) * _1708;
        float _1794 = _1676 * 0.5;
        float _1795 = _1686 * 0.5;
        float _1796 = _1696 * 0.5;
        float _1797 = dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796));
        float _1802 = (_1797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1797);
        float _1810 = (dot(vec3(_953, _954, _955), vec3(_1802 * _1794, _1802 * _1795, _1802 * _1796)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1819 = sqrt(((_1795 * _1795) + (_1794 * _1794)) + (_1796 * _1796)) / (_1709 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
        float _1820 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1821 = _1820 * 2.0;
        float _1825 = (1.0 - _1820) / (_1820 + 1.0);
        float _4678 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _1835 = ((((1.0 - _1826) * (_1821 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_1821 + 1.0))) + _1826) * _1709;
        _1843 = _1676;
        _1844 = _1675;
        _1845 = _1674;
        _1846 = _1686;
        _1847 = _1685;
        _1848 = _1684;
        _1849 = _1696;
        _1850 = _1695;
        _1851 = _1694;
        _1852 = _1709;
        _1853 = _1708;
        _1854 = _1707;
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)));
        _1856 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0)));
        _1857 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0)));
    }
    else
    {
        _1843 = _1532;
        _1844 = _1532;
        _1845 = _1532;
        _1846 = _1532;
        _1847 = _1532;
        _1848 = _1532;
        _1849 = _1532;
        _1850 = _1532;
        _1851 = _1532;
        _1852 = _1532;
        _1853 = _1532;
        _1854 = _1532;
        _1855 = 0.0;
        _1856 = 0.0;
        _1857 = 0.0;
    }
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1544)) + _1544;
    float _1868 = (cbModelParam._m0[1u].x * (_1856 - _1545)) + _1545;
    float _1869 = (cbModelParam._m0[1u].x * (_1857 - _1546)) + _1546;
    float _1890 = fma(_1869, cbSceneParam._m0[89u].z, fma(_1868, cbSceneParam._m0[89u].y, _1867 * cbSceneParam._m0[89u].x));
    float _1893 = fma(_1869, cbSceneParam._m0[90u].z, fma(_1868, cbSceneParam._m0[90u].y, _1867 * cbSceneParam._m0[90u].x));
    float _1896 = fma(_1869, cbSceneParam._m0[91u].z, fma(_1868, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1867));
    float _1911 = _1138 * 0.5;
    float _1912 = _1139 * 0.5;
    float _1913 = _1140 * 0.5;
    float _1914 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1845, _1848, _1851, _1854));
    float _1917 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1844, _1847, _1850, _1853));
    float _1920 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1954;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1927 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1531, _1535, _1538, _1541));
        float _1931 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1533, _1536, _1539, _1542));
        float _1935 = dot(vec4(_1911, _1912, _1913, 1.0), vec4(_1534, _1537, _1540, _1543));
        float _1942 = dot(vec4(cbModelParam._m0[39u]), vec4(_1911, _1912, _1913, 1.0));
        _1954 = dot(vec3(isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)), isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0)), isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1942) ? 0.0 : (isnan(0.0) ? _1942 : max(0.0, _1942))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1954 = 1.0;
    }
    float _1965;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1956 = dot(vec4(cbModelParam._m0[40u]), vec4(_1911, _1912, _1913, 1.0));
        _1965 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0)), isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1956) ? 0.0 : (isnan(0.0) ? _1956 : max(0.0, _1956))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1965 = 1.0;
    }
    float _1969 = (_1965 * cbModelParam._m0[1u].x) + (_1954 * (1.0 - cbModelParam._m0[1u].x));
    float _1979 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _956);
    float _1980 = isnan(_1979) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1979 : min(cbModelParam._m0[25u].z, _1979));
    float _2060;
    float _2062;
    float _2064;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2027 = fma(_1202, cbModelParam._m0[13u].z, fma(_1198, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1194)) + cbModelParam._m0[13u].w;
        float _2031 = fma(_1202, cbModelParam._m0[14u].z, fma(_1198, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1194)) + cbModelParam._m0[14u].w;
        float _2035 = fma(_1202, cbModelParam._m0[15u].z, fma(_1198, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1194)) + cbModelParam._m0[15u].w;
        float _2038 = fma(_1140, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1138));
        float _2041 = fma(_1140, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1138));
        float _2044 = fma(_1140, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1138));
        float _2072;
        if (_2038 > 0.0)
        {
            _2072 = abs((1.0 - _2027) / _2038);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2038 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2027 + 1.0) / _2038);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2072 = frontier_phi_17_15_ladder;
        }
        float _2243;
        if (_2041 > 0.0)
        {
            _2243 = abs((1.0 - _2031) / _2041);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2041 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2031 + 1.0) / _2041);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2243 = frontier_phi_26_22_ladder;
        }
        float _2538;
        if (_2044 > 0.0)
        {
            _2538 = abs((1.0 - _2035) / _2044);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2044 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2035 + 1.0) / _2044);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2538 = frontier_phi_38_33_ladder;
        }
        float _2540 = isnan(_2243) ? _2072 : (isnan(_2072) ? _2243 : min(_2072, _2243));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _2038) + _2027;
        float _2546 = (_2541 * _2041) + _2031;
        float _2547 = (_2541 * _2044) + _2035;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2550 = (-1.0) - _2548;
        float _2552 = _2548 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2547 > _2552) || ((_2547 < _2550) || ((_2546 > _2552) || ((_2546 < _2550) || ((_2545 < _2550) || (_2545 > _2552))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2547, cbModelParam._m0[9u].z, fma(_2546, cbModelParam._m0[9u].y, _2545 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2547, cbModelParam._m0[10u].z, fma(_2546, cbModelParam._m0[10u].y, _2545 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2547, cbModelParam._m0[11u].z, fma(_2546, cbModelParam._m0[11u].y, _2545 * cbModelParam._m0[11u].x))), _1980);
            frontier_phi_16_38_ladder = _2692.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2692.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2692.x * cbModelParam._m0[1u].y;
        }
        _2060 = frontier_phi_16_38_ladder_2;
        _2062 = frontier_phi_16_38_ladder_1;
        _2064 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2048 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1138, _1139, _1140), _1980);
        _2060 = _2048.x * cbModelParam._m0[1u].y;
        _2062 = _2048.y * cbModelParam._m0[1u].y;
        _2064 = _2048.z * cbModelParam._m0[1u].y;
    }
    float _2068 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _956);
    float _2069 = isnan(_2068) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2068 : min(cbModelParam._m0[25u].w, _2068));
    float _2158;
    float _2160;
    float _2162;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2122 = fma(_1202, cbModelParam._m0[21u].z, fma(_1198, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1194)) + cbModelParam._m0[21u].w;
        float _2126 = fma(_1202, cbModelParam._m0[22u].z, fma(_1198, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1194)) + cbModelParam._m0[22u].w;
        float _2130 = fma(_1202, cbModelParam._m0[23u].z, fma(_1198, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1194)) + cbModelParam._m0[23u].w;
        float _2133 = fma(_1140, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1138));
        float _2136 = fma(_1140, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1138));
        float _2139 = fma(_1140, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1138));
        float _2248;
        if (_2133 > 0.0)
        {
            _2248 = abs((1.0 - _2122) / _2133);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2133 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2122 + 1.0) / _2133);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2248 = frontier_phi_28_24_ladder;
        }
        float _2565;
        if (_2136 > 0.0)
        {
            _2565 = abs((1.0 - _2126) / _2136);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2136 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2126 + 1.0) / _2136);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2565 = frontier_phi_40_35_ladder;
        }
        float _2903;
        if (_2139 > 0.0)
        {
            _2903 = abs((1.0 - _2130) / _2139);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2139 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2130 + 1.0) / _2139);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2903 = frontier_phi_50_47_ladder;
        }
        float _2905 = isnan(_2565) ? _2248 : (isnan(_2248) ? _2565 : min(_2248, _2565));
        float _2906 = isnan(_2903) ? _2905 : (isnan(_2905) ? _2903 : min(_2905, _2903));
        float _2910 = (_2906 * _2133) + _2122;
        float _2911 = (_2906 * _2136) + _2126;
        float _2912 = (_2906 * _2139) + _2130;
        float _2913 = _2906 * 9.9999997473787516355514526367188e-05;
        float _2914 = (-1.0) - _2913;
        float _2916 = _2913 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2912 > _2916) || ((_2912 < _2914) || ((_2911 > _2916) || ((_2911 < _2914) || ((_2910 < _2914) || (_2910 > _2916))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2912, cbModelParam._m0[17u].z, fma(_2911, cbModelParam._m0[17u].y, _2910 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2912, cbModelParam._m0[18u].z, fma(_2911, cbModelParam._m0[18u].y, _2910 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2912, cbModelParam._m0[19u].z, fma(_2911, cbModelParam._m0[19u].y, _2910 * cbModelParam._m0[19u].x))), _2069);
            frontier_phi_25_50_ladder = _3034.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3034.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3034.x * cbModelParam._m0[1u].z;
        }
        _2158 = frontier_phi_25_50_ladder_2;
        _2160 = frontier_phi_25_50_ladder_1;
        _2162 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2142 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1138, _1139, _1140), _2069);
        _2158 = _2142.x * cbModelParam._m0[1u].z;
        _2160 = _2142.y * cbModelParam._m0[1u].z;
        _2162 = _2142.z * cbModelParam._m0[1u].z;
    }
    float _2175 = (((_1165 * _1114) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1165 * _1116) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2179 = (((_1165 * _1117) + _1166) * _1130) * ((cbModelParam._m0[1u].w * (_2162 - _2064)) + _2064);
    float _2182 = fma(_2179, cbSceneParam._m0[89u].z, fma(_2177, cbSceneParam._m0[89u].y, _2175 * cbSceneParam._m0[89u].x));
    float _2185 = fma(_2179, cbSceneParam._m0[90u].z, fma(_2177, cbSceneParam._m0[90u].y, _2175 * cbSceneParam._m0[90u].x));
    float _2188 = fma(_2179, cbSceneParam._m0[91u].z, fma(_2177, cbSceneParam._m0[91u].y, _2175 * cbSceneParam._m0[91u].x));
    float _2222 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2230 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2234 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2235 = _2222 / _2234;
    float _2236 = _2226 / _2234;
    float _2237 = _2230 / _2234;
    float _2384;
    float _2385;
    float _2386;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2264 = ((uint(_2237 > cbSceneParam._m0[59u].y) + uint(_2237 > cbSceneParam._m0[59u].x)) + uint(_2237 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2265 = _2264 + 43u;
        uint _2273 = _2264 + 44u;
        uint _2281 = _2264 + 45u;
        uint _2289 = _2264 + 46u;
        float _2300 = fma(_2234, cbSceneParam._m0[_2265].w, fma(_2230, cbSceneParam._m0[_2265].z, fma(_2226, cbSceneParam._m0[_2265].y, _2222 * cbSceneParam._m0[_2265].x)));
        float _2304 = fma(_2234, cbSceneParam._m0[_2273].w, fma(_2230, cbSceneParam._m0[_2273].z, fma(_2226, cbSceneParam._m0[_2273].y, _2222 * cbSceneParam._m0[_2273].x)));
        float _2312 = fma(_2234, cbSceneParam._m0[_2289].w, fma(_2230, cbSceneParam._m0[_2289].z, fma(_2226, cbSceneParam._m0[_2289].y, _2222 * cbSceneParam._m0[_2289].x)));
        float _2317 = cbSceneParam._m0[33u].z * _2312;
        float _2319 = cbSceneParam._m0[33u].w * _2312;
        float _2322 = fma(_2234, cbSceneParam._m0[_2281].w, fma(_2230, cbSceneParam._m0[_2281].z, fma(_2226, cbSceneParam._m0[_2281].y, _2222 * cbSceneParam._m0[_2281].x))) / _2312;
        float _2370 = (cbSceneParam._m0[33u].x - sqrt(((_2236 * _2236) + (_2235 * _2235)) + (_2237 * _2237))) * cbSceneParam._m0[33u].y;
        float _4804 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2377 = (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2317 + _2300) / _2312, (_2319 + _2304) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2319 + _2300) / _2312, (_2304 - _2317) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 - _2317) / _2312, (_2304 - _2319) / _2312), _2322), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 - _2319) / _2312, (_2317 + _2304) / _2312), _2322), 0.0)).x), vec4(0.25)));
        _2384 = 1.0 - (_2377 * cbSceneParam._m0[34u].x);
        _2385 = 1.0 - (_2377 * cbSceneParam._m0[34u].y);
        _2386 = 1.0 - (_2377 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2384 = 1.0;
        _2385 = 1.0;
        _2386 = 1.0;
    }
    float _2450;
    float _2452;
    float _2454;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2438 = fma(_2234, cbSceneParam._m0[63u].w, fma(_2230, cbSceneParam._m0[63u].z, fma(_2226, cbSceneParam._m0[63u].y, _2222 * cbSceneParam._m0[63u].x)));
        float _2439 = fma(_2234, cbSceneParam._m0[60u].w, fma(_2230, cbSceneParam._m0[60u].z, fma(_2226, cbSceneParam._m0[60u].y, _2222 * cbSceneParam._m0[60u].x))) / _2438;
        float _2440 = fma(_2234, cbSceneParam._m0[61u].w, fma(_2230, cbSceneParam._m0[61u].z, fma(_2226, cbSceneParam._m0[61u].y, _2222 * cbSceneParam._m0[61u].x))) / _2438;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2439 >= cbSceneParam._m0[64u].x) && (_2440 >= cbSceneParam._m0[64u].y)) && (_2439 <= cbSceneParam._m0[64u].z)) && (_2440 <= cbSceneParam._m0[64u].w))
        {
            float _2578 = fma(_2234, cbSceneParam._m0[62u].w, fma(_2230, cbSceneParam._m0[62u].z, fma(_2226, cbSceneParam._m0[62u].y, _2222 * cbSceneParam._m0[62u].x))) / _2438;
            float _2582 = isnan(cbSceneParam._m0[41u].w) ? _2578 : (isnan(_2578) ? cbSceneParam._m0[41u].w : max(_2578, cbSceneParam._m0[41u].w));
            float _2625 = (cbSceneParam._m0[33u].x - sqrt(((_2236 * _2236) + (_2235 * _2235)) + (_2237 * _2237))) * cbSceneParam._m0[33u].y;
            float _4820 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
            float _2632 = (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2439, cbSceneParam._m0[33u].w + _2440), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2439, _2440 - cbSceneParam._m0[33u].z), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2439 - cbSceneParam._m0[33u].z, _2440 - cbSceneParam._m0[33u].w), _2582), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2439 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2440), _2582), 0.0)).x), vec4(0.25)));
            float _2636 = 1.0 - (_2632 * cbSceneParam._m0[34u].x);
            float _2637 = 1.0 - (_2632 * cbSceneParam._m0[34u].y);
            float _2638 = 1.0 - (_2632 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2638) ? _2386 : (isnan(_2386) ? _2638 : min(_2386, _2638));
            frontier_phi_37_36_ladder_1 = isnan(_2637) ? _2385 : (isnan(_2385) ? _2637 : min(_2385, _2637));
            frontier_phi_37_36_ladder_2 = isnan(_2636) ? _2384 : (isnan(_2384) ? _2636 : min(_2384, _2636));
        }
        else
        {
            frontier_phi_37_36_ladder = _2386;
            frontier_phi_37_36_ladder_1 = _2385;
            frontier_phi_37_36_ladder_2 = _2384;
        }
        _2450 = frontier_phi_37_36_ladder_2;
        _2452 = frontier_phi_37_36_ladder_1;
        _2454 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2450 = _2384;
        _2452 = _2385;
        _2454 = _2386;
    }
    uvec4 _2459 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2461 = _2459.x * 14u;
    uint _2462 = _2461 + 13u;
    float _2469 = _1130 + (-1.0);
    float _2474 = (cbLight._m0[_2462].x * _2469) + 1.0;
    float _2475 = (cbLight._m0[_2462].y * _2469) + 1.0;
    float _2476 = (cbLight._m0[_2462].z * _2469) + 1.0;
    float _2477 = (cbLight._m0[_2462].w * _2469) + 1.0;
    uint _2478 = _2461 + 5u;
    float _2484 = isnan(1.0) ? _2475 : (isnan(_2475) ? 1.0 : min(_2475, 1.0));
    uint _2488 = _2461 + 4u;
    float _2497 = isnan(1.0) ? _2474 : (isnan(_2474) ? 1.0 : min(_2474, 1.0));
    uint _2501 = _2461 | 1u;
    float _2512 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_953, _954, _955));
    float _2515 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_953, _954, _955));
    float _4856 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _4867 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2520 = (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0))) * 0.3183098733425140380859375;
    float _2522 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * 0.3183098733425140380859375;
    float _2529 = ((cbLight._m0[_2478].x * _2484) * _2522) + (((cbLight._m0[_2488].x * _2450) * _2497) * _2520);
    float _2530 = ((_2484 * cbLight._m0[_2478].y) * _2522) + (((cbLight._m0[_2488].y * _2452) * _2497) * _2520);
    float _2531 = ((_2484 * cbLight._m0[_2478].z) * _2522) + (((cbLight._m0[_2488].z * _2454) * _2497) * _2520);
    uvec4 _2535 = floatBitsToUint(cbLight._m0[_2461 + 12u]);
    bool _2537 = _2535.x == 0u;
    float _2639;
    float _2641;
    float _2643;
    if (_2537)
    {
        _2639 = _2529;
        _2641 = _2530;
        _2643 = _2531;
    }
    else
    {
        uint _2647 = _2461 + 6u;
        float _2663 = (dot(vec3(cbLight._m0[_2461 + 2u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2664 = _2663 * _2663;
        float _4878 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
        float _2665 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2666 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2639 = (((cbLight._m0[_2647].x * 0.3183098733425140380859375) * _2665) * _2666) + _2529;
        _2641 = (((cbLight._m0[_2647].y * 0.3183098733425140380859375) * _2665) * _2666) + _2530;
        _2643 = (((cbLight._m0[_2647].z * 0.3183098733425140380859375) * _2665) * _2666) + _2531;
    }
    bool _2646 = _2535.y == 0u;
    float _2701;
    float _2703;
    float _2705;
    if (_2646)
    {
        _2701 = _2639;
        _2703 = _2641;
        _2705 = _2643;
    }
    else
    {
        uint _2874 = _2461 + 7u;
        float _2890 = (dot(vec3(cbLight._m0[_2461 + 3u].xyz), vec3(_953, _954, _955)) * 0.5) + 0.5;
        float _2891 = _2890 * _2890;
        float _4894 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
        float _2892 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _2893 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _2701 = (((cbLight._m0[_2874].x * 0.3183098733425140380859375) * _2892) * _2893) + _2639;
        _2703 = (((cbLight._m0[_2874].y * 0.3183098733425140380859375) * _2892) * _2893) + _2641;
        _2705 = (((cbLight._m0[_2874].z * 0.3183098733425140380859375) * _2892) * _2893) + _2643;
    }
    uint _2708 = _2461 + 8u;
    float _2721 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2461].w)) * _956) * 0.949999988079071044921875);
    float _2722 = _2721 * _2721;
    float _2723 = cbLight._m0[_2461].x + _1032;
    float _2724 = cbLight._m0[_2461].y + _1033;
    float _2725 = cbLight._m0[_2461].z + _1034;
    float _2729 = inversesqrt(dot(vec3(_2723, _2724, _2725), vec3(_2723, _2724, _2725)));
    float _2730 = _2729 * _2723;
    float _2731 = _2729 * _2724;
    float _2732 = _2729 * _2725;
    float _2733 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2461].xyz));
    float _4910 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
    float _2736 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _4921 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _2737 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
    float _2738 = dot(vec3(_953, _954, _955), vec3(_2730, _2731, _2732));
    float _4932 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
    float _2741 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    float _2742 = dot(vec3(cbLight._m0[_2461].xyz), vec3(_2730, _2731, _2732));
    float _4943 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
    float _2746 = _2722 * _2722;
    float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
    float _2758 = exp2(log2(1.0 - (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) * 5.0);
    float _2759 = 0.959999978542327880859375 - _1111;
    float _2761 = 0.959999978542327880859375 - _1112;
    float _2762 = 0.959999978542327880859375 - _1113;
    float _2769 = 1.0 - _2722;
    float _2780 = (0.5 / (((_2737 * ((_2736 * _2769) + _2722)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2769) + _2722) * _2736))) * _2736;
    float _4954 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
    float _2782 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
    uint _2796 = _2461 + 9u;
    float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2501].w)) * _956) * 0.949999988079071044921875);
    float _2808 = _2807 * _2807;
    float _2809 = cbLight._m0[_2501].x + _1032;
    float _2810 = cbLight._m0[_2501].y + _1033;
    float _2811 = cbLight._m0[_2501].z + _1034;
    float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
    float _2816 = _2815 * _2809;
    float _2817 = _2815 * _2810;
    float _2818 = _2815 * _2811;
    float _2819 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2501].xyz));
    float _4965 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
    float _2822 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
    float _2823 = dot(vec3(_953, _954, _955), vec3(_2816, _2817, _2818));
    float _4976 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
    float _2826 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
    float _2827 = dot(vec3(cbLight._m0[_2501].xyz), vec3(_2816, _2817, _2818));
    float _4987 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
    float _2831 = _2808 * _2808;
    float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
    float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) * 5.0);
    float _2849 = 1.0 - _2808;
    float _2859 = (0.5 / (((_2737 * ((_2822 * _2849) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2849) + _2808) * _2822))) * _2822;
    float _4998 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
    float _2861 = (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
    float _2871 = (((((_2842 * _2759) + _1114) * cbLight._m0[_2796].x) * _2861) * _2484) + ((((cbLight._m0[_2708].x * _2450) * ((_2758 * _2759) + _1114)) * _2782) * _2497);
    float _2872 = (((((_2842 * _2761) + _1116) * cbLight._m0[_2796].y) * _2861) * _2484) + ((((cbLight._m0[_2708].y * _2452) * ((_2758 * _2761) + _1116)) * _2782) * _2497);
    float _2873 = (((((_2842 * _2762) + _1117) * cbLight._m0[_2796].z) * _2861) * _2484) + ((((cbLight._m0[_2708].z * _2454) * ((_2758 * _2762) + _1117)) * _2782) * _2497);
    float _2929;
    float _2931;
    float _2933;
    if (_2537)
    {
        _2929 = _2871;
        _2931 = _2872;
        _2933 = _2873;
    }
    else
    {
        uint _2935 = _2461 + 2u;
        uint _2939 = _2461 + 10u;
        float _2953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2935].w)) * _956) * 0.949999988079071044921875);
        float _2954 = _2953 * _2953;
        float _2955 = cbLight._m0[_2935].x + _1032;
        float _2956 = cbLight._m0[_2935].y + _1033;
        float _2957 = cbLight._m0[_2935].z + _1034;
        float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
        float _2962 = _2961 * _2955;
        float _2963 = _2961 * _2956;
        float _2964 = _2961 * _2957;
        float _2965 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_2935].xyz));
        float _5009 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2968 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
        float _2969 = dot(vec3(_953, _954, _955), vec3(_2962, _2963, _2964));
        float _5020 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2972 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
        float _2973 = dot(vec3(cbLight._m0[_2935].xyz), vec3(_2962, _2963, _2964));
        float _5031 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2977 = _2954 * _2954;
        float _2981 = ((_2972 * _2972) * (_2977 + (-1.0))) + 1.0;
        float _2988 = exp2(log2(1.0 - (isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0)))) * 5.0);
        float _2995 = 1.0 - _2954;
        float _3005 = (0.5 / (((_2737 * ((_2968 * _2995) + _2954)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _2995) + _2954) * _2968))) * _2968;
        float _5042 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        float _3007 = (isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0))) * (_2977 / ((_2981 * _2981) * 3.141590118408203125));
        float _3008 = isnan(1.0) ? _2476 : (isnan(_2476) ? 1.0 : min(_2476, 1.0));
        _2929 = (((((_2988 * _2759) + _1114) * cbLight._m0[_2939].x) * _3007) * _3008) + _2871;
        _2931 = (((((_2988 * _2761) + _1116) * cbLight._m0[_2939].y) * _3007) * _3008) + _2872;
        _2933 = (((((_2988 * _2762) + _1117) * cbLight._m0[_2939].z) * _3007) * _3008) + _2873;
    }
    float _3039;
    float _3041;
    float _3043;
    if (_2646)
    {
        _3039 = _2929;
        _3041 = _2931;
        _3043 = _2933;
    }
    else
    {
        uint _3050 = _2461 + 3u;
        uint _3054 = _2461 + 11u;
        float _3068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3050].w)) * _956) * 0.949999988079071044921875);
        float _3069 = _3068 * _3068;
        float _3070 = cbLight._m0[_3050].x + _1032;
        float _3071 = cbLight._m0[_3050].y + _1033;
        float _3072 = cbLight._m0[_3050].z + _1034;
        float _3076 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
        float _3077 = _3076 * _3070;
        float _3078 = _3076 * _3071;
        float _3079 = _3076 * _3072;
        float _3080 = dot(vec3(_953, _954, _955), vec3(cbLight._m0[_3050].xyz));
        float _5058 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        float _3083 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
        float _3084 = dot(vec3(_953, _954, _955), vec3(_3077, _3078, _3079));
        float _5069 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        float _3087 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
        float _3088 = dot(vec3(cbLight._m0[_3050].xyz), vec3(_3077, _3078, _3079));
        float _5080 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
        float _3092 = _3069 * _3069;
        float _3096 = ((_3087 * _3087) * (_3092 + (-1.0))) + 1.0;
        float _3103 = exp2(log2(1.0 - (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0)))) * 5.0);
        float _3110 = 1.0 - _3069;
        float _3120 = (0.5 / (((_2737 * ((_3083 * _3110) + _3069)) + 9.9999999392252902907785028219223e-09) + (((_2737 * _3110) + _3069) * _3083))) * _3083;
        float _5091 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
        float _3122 = (isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3092 / ((_3096 * _3096) * 3.141590118408203125));
        float _3123 = isnan(1.0) ? _2477 : (isnan(_2477) ? 1.0 : min(_2477, 1.0));
        _3039 = (((((_3103 * _2759) + _1114) * cbLight._m0[_3054].x) * _3122) * _3123) + _2929;
        _3041 = (((((_3103 * _2761) + _1116) * cbLight._m0[_3054].y) * _3122) * _3123) + _2931;
        _3043 = (((((_3103 * _2762) + _1117) * cbLight._m0[_3054].z) * _3122) * _3123) + _2933;
    }
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_2459.y == 0u)
    {
        uvec4 _3144 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3145 = _3144.x;
        uint _3156 = uint((float(_3144.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1053) / _3145))) + floor(float(uint(cbSceneParam._m0[85u].x * _1052) / _3145)));
        float _3166 = (log2(_2237 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3167 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
        uint _3170 = uint(isnan(14.0) ? _3167 : (isnan(_3167) ? 14.0 : min(_3167, 14.0)));
        uvec4 _3175 = texelFetch(g_lightClusterGridBuffer, int(((_3170 << 2u) + (_3156 << 6u)) >> 2u));
        uint _3176 = _3175.x;
        uint _3177 = _3144.z;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((((1u << ((_3177 >> 4u) & 15u)) + 4294967295u) & _3176) == 0u) || ((_3177 & 240u) == 0u))
        {
            _3256 = 0.0;
            _3258 = 0.0;
            _3260 = 0.0;
            _3262 = 0.0;
            _3264 = 0.0;
            _3266 = 0.0;
        }
        else
        {
            float _3257;
            float _3259;
            float _3261;
            float _3263;
            float _3265;
            float _3267;
            float _3408 = 0.0;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            uint _3414 = 0u;
            uint _3423;
            bool _3424;
            for (;;)
            {
                _3423 = texelFetch(g_lightClassification, int((((_3170 << 5u) + (_3156 << 9u)) + (_3414 << 2u)) >> 2u)).x;
                _3424 = _3423 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3424)
                {
                    frontier_phi_71_pred = _3413;
                    frontier_phi_71_pred_1 = _3412;
                    frontier_phi_71_pred_2 = _3411;
                    frontier_phi_71_pred_3 = _3410;
                    frontier_phi_71_pred_4 = _3409;
                    frontier_phi_71_pred_5 = _3408;
                }
                else
                {
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    uint _3559;
                    _3553 = _3408;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3423;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    for (;;)
                    {
                        uint _3563 = uint(findLSB(_3559)) + (_3414 << 5u);
                        uint _3560 = (_3559 + 4294967295u) & _3559;
                        uint _3565 = _3563 * 48u;
                        vec4 _3579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3565)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3565 + 3u)).x));
                        uint _3585 = (_3563 * 48u) + 4u;
                        vec4 _3598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3585)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3585 + 3u)).x));
                        uint _3604 = (_3563 * 48u) + 8u;
                        vec3 _3615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3604)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3604 + 2u)).x));
                        float _3619 = _3579.x - _2235;
                        float _3620 = _3579.y - _2236;
                        float _3621 = _3579.z - _2237;
                        float _3622 = dot(vec3(_3619, _3620, _3621), vec3(_3619, _3620, _3621));
                        float _3625 = inversesqrt(_3622);
                        float _3626 = _3625 * _3619;
                        float _3627 = _3625 * _3620;
                        float _3628 = _3625 * _3621;
                        float _3629 = dot(vec3(_1071, _1074, _1077), vec3(_3626, _3627, _3628));
                        float _3634 = 1.0 - (_3622 * _3579.w);
                        float _5117 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                        float _3635 = isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0));
                        float _3636 = sqrt(_3622) * _3598.w;
                        float _3639 = 1.39999997615814208984375 / (_3636 + 1.39999997615814208984375);
                        float _3640 = _3639 * _3639;
                        float _3643 = ((1.0 - _3640) * _3629) + _3640;
                        float _3646 = _3636 * _3636;
                        float _3650 = ((isnan(0.0) ? _3643 : (isnan(_3643) ? 0.0 : max(_3643, 0.0))) * _3635) / ((_3646 * 0.699999988079071044921875) + 1.0);
                        float _3654 = (-0.0) - _2235;
                        float _3655 = (-0.0) - _2236;
                        float _3656 = (-0.0) - _2237;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3661 = _3660 * _3654;
                        float _3662 = _3660 * _3655;
                        float _3663 = _3660 * _3656;
                        float _3670 = exp2(log2(1.0 / ((_3646 * 3.5) + 5.0)) * 0.25);
                        float _3671 = 1.0 - _1146;
                        float _3678 = sqrt(1.0 - ((1.0 - (_3671 * _3671)) * (1.0 - (_3670 * _3670))));
                        float _3679 = _3678 * _3678;
                        float _3680 = _3679 * _3679;
                        float _3681 = _3661 + _3626;
                        float _3682 = _3662 + _3627;
                        float _3683 = _3663 + _3628;
                        float _3687 = inversesqrt(dot(vec3(_3681, _3682, _3683), vec3(_3681, _3682, _3683)));
                        float _3691 = dot(vec3(_1071, _1074, _1077), vec3(_3661, _3662, _3663));
                        float _5133 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                        float _3694 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                        float _3695 = dot(vec3(_1071, _1074, _1077), vec3(_3687 * _3681, _3687 * _3682, _3687 * _3683));
                        float _5144 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                        float _3698 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                        float _3702 = ((_3698 * _3698) * (_3680 + (-1.0))) + 1.0;
                        float _3703 = _3639 * _3679;
                        float _3704 = _3703 * _3703;
                        float _3707 = ((1.0 - _3704) * _3629) + _3704;
                        float _5155 = isnan(0.0) ? _3707 : (isnan(_3707) ? 0.0 : max(_3707, 0.0));
                        float _3708 = isnan(1.0) ? _5155 : (isnan(_5155) ? 1.0 : min(_5155, 1.0));
                        float _3709 = 1.0 - _3679;
                        float _3719 = (0.5 / (((_3708 * ((_3694 * _3709) + _3679)) + 9.9999999392252902907785028219223e-09) + (((_3708 * _3709) + _3679) * _3694))) * _3708;
                        float _5166 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                        float _3730 = (((_3680 * 3.1415927410125732421875) * (isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0)))) / ((_3702 * _3702) * ((_3646 * 2.1991131305694580078125) + 3.141590118408203125))) * _3635;
                        _3483 = (_3650 * _3598.x) + _3556;
                        _3484 = (_3650 * _3598.y) + _3557;
                        _3485 = (_3650 * _3598.z) + _3558;
                        _3480 = (_3730 * _3615.x) + _3553;
                        _3481 = (_3730 * _3615.y) + _3554;
                        _3482 = (_3730 * _3615.z) + _3555;
                        if (_3560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3553 = _3480;
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3560;
                        }
                    }
                    frontier_phi_71_pred = _3485;
                    frontier_phi_71_pred_1 = _3484;
                    frontier_phi_71_pred_2 = _3483;
                    frontier_phi_71_pred_3 = _3482;
                    frontier_phi_71_pred_4 = _3481;
                    frontier_phi_71_pred_5 = _3480;
                }
                _3267 = frontier_phi_71_pred;
                _3265 = frontier_phi_71_pred_1;
                _3263 = frontier_phi_71_pred_2;
                _3261 = frontier_phi_71_pred_3;
                _3259 = frontier_phi_71_pred_4;
                _3257 = frontier_phi_71_pred_5;
                uint _3415 = _3414 + 1u;
                if (_3415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3408 = _3257;
                    _3409 = _3259;
                    _3410 = _3261;
                    _3411 = _3263;
                    _3412 = _3265;
                    _3413 = _3267;
                    _3414 = _3415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3256 = _3257;
            _3258 = _3259;
            _3260 = _3261;
            _3262 = _3263;
            _3264 = _3265;
            _3266 = _3267;
        }
        uvec4 _3270 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3271 = _3270.z;
        uint _3273 = (_3271 >> 8u) & 15u;
        float _3376;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        if (((4294967295u << _3273) & _3176) == 0u)
        {
            _3376 = _3256;
            _3378 = _3258;
            _3380 = _3260;
            _3382 = _3262;
            _3384 = _3264;
            _3386 = _3266;
        }
        else
        {
            float _3401 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
            float _3402 = _3401 * _2235;
            float _3403 = _3401 * _2236;
            float _3404 = _3401 * _2237;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3273 < ((_3271 >> 12u) & 15u))
            {
                float _3377;
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3536 = _3256;
                float _3537 = _3258;
                float _3538 = _3260;
                float _3539 = _3262;
                float _3540 = _3264;
                float _3541 = _3266;
                uint _3542 = _3273;
                uint _3551;
                bool _3552;
                for (;;)
                {
                    _3551 = texelFetch(g_lightClassification, int((((_3170 << 5u) + (_3156 << 9u)) + (_3542 << 2u)) >> 2u)).x;
                    _3552 = _3551 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3552)
                    {
                        frontier_phi_82_pred = _3541;
                        frontier_phi_82_pred_1 = _3540;
                        frontier_phi_82_pred_2 = _3539;
                        frontier_phi_82_pred_3 = _3538;
                        frontier_phi_82_pred_4 = _3537;
                        frontier_phi_82_pred_5 = _3536;
                    }
                    else
                    {
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _4037;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _3757 = _3536;
                        float _3758 = _3537;
                        float _3759 = _3538;
                        float _3760 = _3539;
                        float _3761 = _3540;
                        float _3762 = _3541;
                        uint _3763 = _3551;
                        uint _3764;
                        vec4 _3789;
                        float _3790;
                        vec4 _3805;
                        vec3 _3817;
                        vec4 _3832;
                        vec4 _3847;
                        float _3893;
                        bool _3894;
                        for (;;)
                        {
                            uint _3774 = ((_3542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3763));
                            _3764 = (_3763 + 4294967295u) & _3763;
                            uint _3776 = _3774 * 40u;
                            _3789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3776 + 3u)).x));
                            _3790 = _3789.w;
                            uint _3792 = (_3774 * 40u) + 4u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3774 * 40u) + 8u;
                            _3817 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x));
                            uint _3819 = (_3774 * 40u) + 16u;
                            _3832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3819 + 3u)).x));
                            uint _3834 = (_3774 * 40u) + 20u;
                            _3847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3834 + 3u)).x));
                            uint _3849 = (_3774 * 40u) + 24u;
                            vec4 _3862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3849 + 3u)).x));
                            uint _3868 = (_3774 * 40u) + 28u;
                            vec4 _3881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3868 + 3u)).x));
                            _3893 = fma(_2237, _3881.z, fma(_2236, _3881.y, _3881.x * _2235)) + _3881.w;
                            _3894 = !((fma(_2237, _3862.z, fma(_2236, _3862.y, _3862.x * _2235)) + _3862.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3894)
                            {
                                float _3921 = _3789.x - _2235;
                                float _3922 = _3789.y - _2236;
                                float _3923 = _3789.z - _2237;
                                float _3924 = dot(vec3(_3921, _3922, _3923), vec3(_3921, _3922, _3923));
                                float _3927 = inversesqrt(_3924);
                                float _3928 = _3927 * _3921;
                                float _3929 = _3927 * _3922;
                                float _3930 = _3927 * _3923;
                                float _3934 = 1.0 - (_3924 / (_3790 * _3790));
                                float _5177 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
                                float _3939 = sqrt(_3924) * _3805.w;
                                float _3941 = 1.39999997615814208984375 / (_3939 + 1.39999997615814208984375);
                                float _3942 = _3941 * _3941;
                                float _3945 = ((1.0 - _3942) * dot(vec3(_3928, _3929, _3930), vec3(_1071, _1074, _1077))) + _3942;
                                float _3948 = _3939 * _3939;
                                float _3952 = (fma(_2237, _3832.z, fma(_2236, _3832.y, _3832.x * _2235)) + _3832.w) / _3893;
                                float _3953 = (fma(_2237, _3847.z, fma(_2236, _3847.y, _3847.x * _2235)) + _3847.w) / _3893;
                                float _3957 = 1.0 - dot(vec2(_3952, _3953), vec2(_3952, _3953));
                                float _5193 = isnan(0.0) ? _3957 : (isnan(_3957) ? 0.0 : max(_3957, 0.0));
                                float _3958 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _3959 = _3958 * (((isnan(0.0) ? _3945 : (isnan(_3945) ? 0.0 : max(_3945, 0.0))) * _3935) / ((_3948 * 0.699999988079071044921875) + 1.0));
                                float _3971 = exp2(log2(1.0 / ((_3948 * 3.5) + 5.0)) * 0.25);
                                float _3972 = 1.0 - _1146;
                                float _3979 = sqrt(1.0 - ((1.0 - (_3972 * _3972)) * (1.0 - (_3971 * _3971))));
                                float _3980 = _3979 * _3979;
                                float _3981 = _3980 * _3980;
                                float _3982 = _3928 - _3402;
                                float _3983 = _3929 - _3403;
                                float _3984 = _3930 - _3404;
                                float _3988 = inversesqrt(dot(vec3(_3982, _3983, _3984), vec3(_3982, _3983, _3984)));
                                float _3992 = dot(vec3(_1071, _1074, _1077), vec3((-0.0) - _3402, (-0.0) - _3403, (-0.0) - _3404));
                                float _5204 = isnan(0.0) ? _3992 : (isnan(_3992) ? 0.0 : max(_3992, 0.0));
                                float _3995 = isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0));
                                float _3996 = dot(vec3(_1071, _1074, _1077), vec3(_3988 * _3982, _3988 * _3983, _3988 * _3984));
                                float _5215 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _3999 = isnan(1.0) ? _5215 : (isnan(_5215) ? 1.0 : min(_5215, 1.0));
                                float _4003 = ((_3999 * _3999) * (_3981 + (-1.0))) + 1.0;
                                float _4004 = _3941 * _3980;
                                float _4005 = _4004 * _4004;
                                float _4011 = ((1.0 - _4005) * dot(vec3(_1071, _1074, _1077), vec3(_3928, _3929, _3930))) + _4005;
                                float _5226 = isnan(0.0) ? _4011 : (isnan(_4011) ? 0.0 : max(_4011, 0.0));
                                float _4012 = isnan(1.0) ? _5226 : (isnan(_5226) ? 1.0 : min(_5226, 1.0));
                                float _4013 = 1.0 - _3980;
                                float _4023 = (0.5 / (((_4012 * ((_3995 * _4013) + _3980)) + 9.9999999392252902907785028219223e-09) + (((_4012 * _4013) + _3980) * _3995))) * _4012;
                                float _5237 = isnan(0.0) ? _4023 : (isnan(_4023) ? 0.0 : max(_4023, 0.0));
                                float _4033 = (_3958 * _3935) * (((_3981 * 3.1415927410125732421875) * (isnan(1.0) ? _5237 : (isnan(_5237) ? 1.0 : min(_5237, 1.0)))) / ((_4003 * _4003) * ((_3948 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3959 * _3805.z;
                                frontier_phi_88_pred_1 = _3959 * _3805.y;
                                frontier_phi_88_pred_2 = _3959 * _3805.x;
                                frontier_phi_88_pred_3 = _4033 * _3817.z;
                                frontier_phi_88_pred_4 = _4033 * _3817.y;
                                frontier_phi_88_pred_5 = _4033 * _3817.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4042 = frontier_phi_88_pred;
                            _4041 = frontier_phi_88_pred_1;
                            _4040 = frontier_phi_88_pred_2;
                            _4039 = frontier_phi_88_pred_3;
                            _4038 = frontier_phi_88_pred_4;
                            _4037 = frontier_phi_88_pred_5;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            _3744 = _4037 + _3757;
                            _3745 = _4038 + _3758;
                            _3746 = _4039 + _3759;
                            if (_3764 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3757 = _3744;
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3764;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3749;
                        frontier_phi_82_pred_1 = _3748;
                        frontier_phi_82_pred_2 = _3747;
                        frontier_phi_82_pred_3 = _3746;
                        frontier_phi_82_pred_4 = _3745;
                        frontier_phi_82_pred_5 = _3744;
                    }
                    _3387 = frontier_phi_82_pred;
                    _3385 = frontier_phi_82_pred_1;
                    _3383 = frontier_phi_82_pred_2;
                    _3381 = frontier_phi_82_pred_3;
                    _3379 = frontier_phi_82_pred_4;
                    _3377 = frontier_phi_82_pred_5;
                    uint _3543 = _3542 + 1u;
                    if (_3543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3536 = _3377;
                        _3537 = _3379;
                        _3538 = _3381;
                        _3539 = _3383;
                        _3540 = _3385;
                        _3541 = _3387;
                        _3542 = _3543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3383;
                frontier_phi_63_64_ladder_1 = _3387;
                frontier_phi_63_64_ladder_2 = _3385;
                frontier_phi_63_64_ladder_3 = _3381;
                frontier_phi_63_64_ladder_4 = _3379;
                frontier_phi_63_64_ladder_5 = _3377;
            }
            else
            {
                frontier_phi_63_64_ladder = _3262;
                frontier_phi_63_64_ladder_1 = _3266;
                frontier_phi_63_64_ladder_2 = _3264;
                frontier_phi_63_64_ladder_3 = _3260;
                frontier_phi_63_64_ladder_4 = _3258;
                frontier_phi_63_64_ladder_5 = _3256;
            }
            _3376 = frontier_phi_63_64_ladder_5;
            _3378 = frontier_phi_63_64_ladder_4;
            _3380 = frontier_phi_63_64_ladder_3;
            _3382 = frontier_phi_63_64_ladder;
            _3384 = frontier_phi_63_64_ladder_2;
            _3386 = frontier_phi_63_64_ladder_1;
        }
        float _3391 = isnan(1.0) ? _1130 : (isnan(_1130) ? 1.0 : min(_1130, 1.0));
        _3189 = (_3391 * _3382) + _2701;
        _3191 = (_3391 * _3384) + _2703;
        _3193 = (_3391 * _3386) + _2705;
        _3195 = ((_3376 * _1114) * _3391) + _3039;
        _3197 = ((_3378 * _1116) * _3391) + _3041;
        _3199 = ((_3380 * _1117) * _3391) + _3043;
    }
    else
    {
        _3189 = _2701;
        _3191 = _2703;
        _3193 = _2705;
        _3195 = _3039;
        _3197 = _3041;
        _3199 = _3043;
    }
    float _5253 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _5264 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _5275 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _3216 = ((isnan(1.0) ? _5253 : (isnan(_5253) ? 1.0 : min(_5253, 1.0))) * (_3189 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1130))) + ((_3195 + ((isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _3217 = ((isnan(1.0) ? _5264 : (isnan(_5264) ? 1.0 : min(_5264, 1.0))) * (_3191 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1130))) + ((_3197 + ((isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    float _3218 = ((isnan(1.0) ? _5275 : (isnan(_5275) ? 1.0 : min(_5275, 1.0))) * (_3193 + ((isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0))) * _1130))) + ((_3199 + ((isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0))) * _1969)) * cbPerFrame._m0[3u].x);
    uint _3219 = _291 + 6u;
    float _3227 = _1052 / cbSceneParam._m0[86u].x;
    float _3228 = _1053 / cbSceneParam._m0[86u].y;
    vec4 _3242 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3227, _3228, (log2((isnan(cbSceneParam._m0[77u].w) ? _975 : (isnan(_975) ? cbSceneParam._m0[77u].w : min(_975, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3244 = _3242.x;
    float _3245 = _3242.y;
    float _3246 = _3242.z;
    float _3247 = _3242.w;
    float _3318;
    float _3320;
    float _3322;
    float _3324;
    if (_975 > cbSceneParam._m0[78u].w)
    {
        float _3281 = isnan(_975) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _975 : min(cbSceneParam._m0[80u].w, _975));
        float _3282 = _3281 / _975;
        float _3293 = _3282 * _1025;
        float _3294 = _1026 * _3282;
        float _3295 = (-0.0) - _3294;
        float _3296 = _3282 * _1027;
        float _3298 = (cbSceneParam._m0[77u].w * _3295) / _3281;
        float _3299 = _3298 + cbSceneParam._m0[79u].w;
        float _3300 = cbSceneParam._m0[79u].w - _3294;
        float _3306 = sqrt(((_3293 * _3293) + (_3294 * _3294)) + (_3296 * _3296));
        float _3309 = (1.0 - (cbSceneParam._m0[77u].w / _3281)) * _3306;
        float _3314 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3316 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3493;
        if (abs((_3295 - _3298) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3493 = ((((_3299 > 0.0) ? exp2(_3314 * _3299) : (2.0 - exp2(_3316 * _3299))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3309;
        }
        else
        {
            float _3437 = 1.0 / cbSceneParam._m0[80u].x;
            float _3438 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : max(_3299, _3300));
            float _3439 = isnan(_3300) ? _3299 : (isnan(_3299) ? _3300 : min(_3299, _3300));
            float _3448 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : min(_3438, 0.0));
            float _3449 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : min(_3439, 0.0));
            _3493 = ((abs(_3306 / _3295) * cbSceneParam._m0[80u].y) * ((((_3448 - _3449) * 2.0) - ((exp2(_3314 * (isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0)))) - exp2(_3314 * (isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0))))) * _3437)) - ((exp2(_3316 * _3448) - exp2(_3316 * _3449)) * _3437))) + (_3309 * cbSceneParam._m0[80u].z);
        }
        vec4 _3495 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3227, _3228, 1.0), 0.0);
        float _3504 = exp2((_3493 * (-1.44269502162933349609375)) * (1.0 - _3495.w));
        float _3505 = log2(_3504);
        float _3521 = log2(_3247);
        _3318 = (exp2(_3521 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].x)) * _3495.x) / cbSceneParam._m0[78u].x)) + _3244;
        _3320 = (exp2(_3521 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].y)) * _3495.y) / cbSceneParam._m0[78u].y)) + _3245;
        _3322 = (exp2(_3521 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].z)) * _3495.z) / cbSceneParam._m0[78u].z)) + _3246;
        _3324 = _3504 * _3247;
    }
    else
    {
        _3318 = _3244;
        _3320 = _3245;
        _3322 = _3246;
        _3324 = _3247;
    }
    bool _3531;
    vec4 _3334;
    vec4 _3356;
    float _3358;
    float _3362;
    float _3363;
    float _3364;
    float _3365;
    bool _3375;
    for (;;)
    {
        _3334 = cbMatDynParam._m0[0u];
        float _3336 = roundEven(_3334.y);
        bool _3337 = _3336 == 3.0;
        float _3338 = log2(_3324);
        float _3345 = exp2(_3338 * cbSceneParam._m0[78u].x) * _3216;
        float _3346 = exp2(_3338 * cbSceneParam._m0[78u].y) * _3217;
        float _3347 = exp2(_3338 * cbSceneParam._m0[78u].z) * _3218;
        float _3354 = _1041 + (-0.5);
        _3356 = cbMtdParam._m0[1u];
        _3358 = _3356.y * _3354;
        float _3361 = (_3336 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3362 = _3361 * (_3337 ? _3345 : (_3345 + (cbSceneParam._m0[72u].w * _3318)));
        _3363 = _3361 * (_3337 ? _3346 : (_3346 + (cbSceneParam._m0[72u].w * _3320)));
        _3364 = _3361 * (_3337 ? _3347 : (_3347 + (cbSceneParam._m0[72u].w * _3322)));
        _3365 = _3354 * 0.999000012874603271484375;
        _3375 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3375)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3365) < 0.5)
            {
                _3531 = true;
                break;
            }
        }
        uint _3472 = _1090 + uint(_3334.w);
        if ((cbInstanceData._m0[_3472].w < 1.0) && ((cbInstanceData._m0[_3472].w + _3365) < 0.5))
        {
            _3531 = true;
            break;
        }
        if ((_3358 + 1.0) < _3356.x)
        {
            _3531 = true;
            break;
        }
        _3531 = false;
        break;
    }
    float _3735;
    if (_3531)
    {
        discard_state = true;
        _3735 = 0.0;
    }
    else
    {
        _3735 = cbInstanceData._m0[_3219].w;
    }
    SV_Target.x = _3362;
    SV_Target.y = _3363;
    SV_Target.z = _3364;
    SV_Target.w = _3735;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3219].w;
    discard_exit();
}


