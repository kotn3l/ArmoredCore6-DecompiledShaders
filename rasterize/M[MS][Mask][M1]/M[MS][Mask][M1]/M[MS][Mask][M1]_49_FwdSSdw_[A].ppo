#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 14) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_23;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1530;
float _3932;
float _3933;
float _3934;
float _3935;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _242 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _243 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _244 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _250 = inversesqrt(dot(vec3(_242, _243, _244), vec3(_242, _243, _244)));
    float _251 = _250 * _242;
    float _252 = _250 * _243;
    float _253 = _250 * _244;
    float _257 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = _257 * NORMAL.x;
    float _259 = _257 * NORMAL.y;
    float _260 = _257 * NORMAL.z;
    float _264 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = _264 * TANGENT.x;
    float _266 = _264 * TANGENT.y;
    float _267 = _264 * TANGENT.z;
    float _276 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _279 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3944 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3955 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3966 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    uint _289 = uint(roundEven(NORMAL.w)) * 13u;
    uint _294 = _289 + 1u;
    uint _298 = _289 + 2u;
    float _307 = sqrt(((cbInstanceData._m0[_294].x * cbInstanceData._m0[_294].x) + (cbInstanceData._m0[_289].x * cbInstanceData._m0[_289].x)) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x));
    float _308 = _307 * TEXCOORD.z;
    float _309 = _307 * TEXCOORD.w;
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _308) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _309) + cbTextureTilingScale._m0[13u].w));
    vec4 _345 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _371 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = _371.x * cbMtdParam._m0[11u].x;
    float _377 = _371.y * cbMtdParam._m0[11u].y;
    float _378 = _371.z * cbMtdParam._m0[11u].z;
    vec4 _397 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _308) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _309) + cbTextureTilingScale._m0[5u].w));
    vec4 _445 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _447 = _445.x;
    float _459 = dot(vec4(_447, _445.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _476 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_447 - _459) * cbMtdParam._m0[23u].w) + _459) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3977 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _477 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _487 = (_345.x * cbMtdParam._m0[9u].x) * ((_477 * ((_397.x * cbMtdParam._m0[12u].x) - _376)) + _376);
    float _488 = (_345.y * cbMtdParam._m0[9u].y) * ((_477 * ((_397.y * cbMtdParam._m0[12u].y) - _377)) + _377);
    float _489 = (_345.z * cbMtdParam._m0[9u].z) * ((_477 * ((_397.z * cbMtdParam._m0[12u].z) - _378)) + _378);
    float _493 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _322.x) * _487;
    float _496 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _322.y) * _488;
    float _499 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _322.z) * _489;
    float _507 = (((_487 - _493) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) + _493) * 4.55000019073486328125;
    float _509 = (((_488 - _496) * (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) + _496) * 4.55000019073486328125;
    float _511 = (((_489 - _499) * (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) + _499) * 4.55000019073486328125;
    vec4 _530 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_23, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[14u].x * _308) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * _309) + cbTextureTilingScale._m0[14u].w));
    vec4 _550 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _308) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _309) + cbTextureTilingScale._m0[20u].w));
    vec4 _577 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _308) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _309) + cbTextureTilingScale._m0[4u].w));
    vec4 _594 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _596 = _594.x;
    float _597 = _594.y;
    float _598 = _594.z;
    float _607 = ((_577.z - _598) * _477) + _598;
    float _610 = ((((_577.x - _596) * _477) + _596) * 2.0) + (-1.0);
    float _611 = ((((_577.y - _597) * _477) + _597) * 2.0) + (-1.0);
    float _612 = dot(vec2(_610, _611), vec2(_610, _611));
    float _3988 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _617 = sqrt(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))));
    vec4 _637 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _649 = (_610 + ((((_550.x * 2.0) + (-1.0)) * TEXCOORD_11.x) * cbMtdParam._m0[20u].x)) + (((_637.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _650 = (_611 + ((((_550.y * 2.0) + (-1.0)) * TEXCOORD_11.y) * cbMtdParam._m0[20u].x)) + (((_637.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _653 = fma(_617, _258, fma(_650, _265, _649 * _251));
    float _656 = fma(_617, _259, fma(_650, _266, _649 * _252));
    float _659 = fma(_617, _260, fma(_650, _267, _649 * _253));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    vec4 _690 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _308) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _309) + cbTextureTilingScale._m0[11u].w));
    float _692 = _690.x;
    float _693 = 1.0 - _692;
    float _702 = (cbMtdParam._m0[19u].x + dot(vec4(_663 * _653, _663 * _656, _663 * _659, 0.0), vec4(cbMtdParam._m0[27u].w, cbMtdParam._m0[28u].xy, 0.0))) - ((((_692 - _693) * cbMtdParam._m0[24u].z) + _693) * cbMtdParam._m0[21u].z);
    float _3999 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _705 = (-0.0) - cbMtdParam._m0[24u].x;
    float _707 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _708 = isnan(1.0) ? _707 : (isnan(_707) ? 1.0 : min(_707, 1.0));
    float _715 = _703 - ((_703 * TEXCOORD_8.x) * _708);
    float _716 = _703 - ((_703 * TEXCOORD_8.y) * _708);
    float _717 = _703 - ((_703 * TEXCOORD_8.z) * _708);
    float _724 = (_715 * ((_530.x * cbMtdParam._m0[18u].x) - _507)) + _507;
    float _725 = (_716 * ((_530.y * cbMtdParam._m0[18u].y) - _509)) + _509;
    float _726 = (_717 * ((_530.z * cbMtdParam._m0[18u].z) - _511)) + _511;
    vec4 _738 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _308) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _309) + cbTextureTilingScale._m0[19u].w));
    float _740 = _738.x;
    float _741 = 1.0 - _740;
    float _767 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_740 - _741) * cbMtdParam._m0[24u].w) + _741) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _4020 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _776 = ((((cbMtdParam._m0[10u].x - _724) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _768) + _724;
    float _777 = ((((cbMtdParam._m0[10u].y - _725) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _768) + _725;
    float _778 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _726)) * _768) + _726;
    vec4 _790 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _804 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _806 = _804.x;
    float _823 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _308) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _309) + cbTextureTilingScale._m0[9u].w)).x - _806) * _477) + _806;
    float _827 = ((_790.x - _823) * cbMtdParam._m0[19u].z) + _823;
    float _829 = _827 - (_827 * _715);
    float _831 = _829 - (_829 * _768);
    float _836 = (((_550.z - _607) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _607;
    float _840 = ((_637.z - _836) * cbMtdParam._m0[19u].w) + _836;
    vec4 _854 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _308) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _309) + cbTextureTilingScale._m0[15u].w));
    float _861 = (_854.x * 2.0) + (-1.0);
    float _862 = (_854.y * 2.0) + (-1.0);
    float _863 = dot(vec2(_861, _862), vec2(_861, _862));
    float _4031 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _871 = ((_854.z - _840) * _715) + _840;
    float _874 = ((cbMtdParam._m0[23u].x - _871) * _768) + _871;
    vec4 _895 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _308) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _309) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _901 = (_895.x * 2.0) + (-1.0);
    float _902 = (_895.y * 2.0) + (-1.0);
    float _903 = dot(vec2(_901, _902), vec2(_901, _902));
    float _4042 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _918 = ((sqrt(1.0 - (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) - _617) * _717) + _617;
    float _921 = (((_861 - _649) * _715) + _649) + (cbMtdParam._m0[21u].x * _649);
    float _922 = (((_862 - _650) * _716) + _650) + (cbMtdParam._m0[21u].x * _650);
    float _933 = (((_901 - _921) + (_921 * cbMtdParam._m0[22u].z)) * _768) + _921;
    float _934 = (((_902 - _922) + (_922 * cbMtdParam._m0[22u].z)) * _768) + _922;
    float _935 = (_768 * (sqrt(1.0 - (isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0)))) - _918)) + _918;
    float _937 = cbMtdParam._m0[22u].x + _637.w;
    float _940 = fma(_935, _258, fma(_934, _265, _933 * _251));
    float _943 = fma(_935, _259, fma(_934, _266, _933 * _252));
    float _946 = fma(_935, _260, fma(_934, _267, _933 * _253));
    float _950 = inversesqrt(dot(vec3(_940, _943, _946), vec3(_940, _943, _946)));
    float _951 = _950 * _940;
    float _952 = _950 * _943;
    float _953 = _950 * _946;
    float _4053 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _954 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _4064 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4075 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4086 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4097 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _4108 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _959 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _973 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1023 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1013);
    float _1024 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1013);
    float _1025 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1013);
    float _1029 = inversesqrt(dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025)));
    float _1030 = _1023 * _1029;
    float _1031 = _1024 * _1029;
    float _1032 = _1025 * _1029;
    vec4 _1037 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1039 = _1037.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1211 = sqrt(((_1023 * _1023) + (_1024 * _1024)) + (_1025 * _1025));
        float _1217 = (cbMatDynParam._m0[5u].x * _1211) + cbMatDynParam._m0[5u].y;
        float _4119 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
        float _1222 = (cbMatDynParam._m0[5u].z * _1211) + cbMatDynParam._m0[5u].w;
        float _4130 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) - _1218)) + _1218) < ((_1039 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1050 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1051 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1069 = fma(_953, cbSceneParam._m0[5u].z, fma(_952, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _951));
    float _1072 = fma(_953, cbSceneParam._m0[6u].z, fma(_952, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _951));
    float _1075 = fma(_953, cbSceneParam._m0[7u].z, fma(_952, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _951));
    uint _1088 = _289 + 9u;
    uint _1089 = _1088 + uint(cbMatDynParam._m0[0u].w);
    float _1095 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0)))) * cbInstanceData._m0[_1089].x;
    float _1096 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_1089].y;
    float _1097 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_1089].z;
    float _4141 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
    float _4152 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
    float _1099 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _1100 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _1101 = 1.0 - _959;
    float _1102 = _1098 * _1101;
    float _1103 = _1099 * _1101;
    float _1104 = _1100 * _1101;
    float _1109 = (_1098 + (-0.039999999105930328369140625)) * _959;
    float _1110 = (_1099 + (-0.039999999105930328369140625)) * _959;
    float _1111 = (_1100 + (-0.039999999105930328369140625)) * _959;
    float _1112 = _1109 + 0.039999999105930328369140625;
    float _1114 = _1110 + 0.039999999105930328369140625;
    float _1115 = _1111 + 0.039999999105930328369140625;
    vec4 _1124 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1050, cbSceneParam._m0[86u].y * _1051));
    float _1128 = ((isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * TEXCOORD_5.w) * _1124.x;
    float _1129 = dot(vec3(_951, _952, _953), vec3(_1030, _1031, _1032));
    float _1132 = _1129 * 2.0;
    float _1136 = (_1132 * _951) - _1030;
    float _1137 = (_1132 * _952) - _1031;
    float _1138 = (_1132 * _953) - _1032;
    float _1142 = abs(dot(vec3(_1030, _1031, _1032), vec3(_951, _952, _953)));
    float _4174 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _1144 = sqrt(_954);
    float _1157 = exp2((_1144 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1144 * 3.0));
    float _1163 = (1.0 - _1157) * ((_1144 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1164 = _1157 * _1144;
    float _1192 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1196 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1200 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1529;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1254 = fma(_1200, cbModelParam._m0[26u].z, fma(_1196, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1192));
        float _1258 = fma(_1200, cbModelParam._m0[27u].z, fma(_1196, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1192));
        float _1262 = fma(_1200, cbModelParam._m0[28u].z, fma(_1196, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1192));
        float _1287 = _1192 + _951;
        float _1288 = _1196 + _952;
        float _1289 = _1200 + _953;
        float _1299 = fma(_1289, cbModelParam._m0[26u].z, fma(_1288, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1287)) - _1254;
        float _1300 = fma(_1289, cbModelParam._m0[27u].z, fma(_1288, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1287)) - _1258;
        float _1301 = fma(_1289, cbModelParam._m0[28u].z, fma(_1288, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1287)) - _1262;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1254 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1258 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[34u].z) + ((((((_1262 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1323 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1330 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1337 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1344 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1357 = exp2((_1323.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1323.x + (-0.5));
        float _1359 = _1357 * (_1323.y + (-0.5));
        float _1360 = _1357 * (_1323.z + (-0.5));
        float _1367 = exp2((_1330.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1330.x + (-0.5));
        float _1369 = _1367 * (_1330.y + (-0.5));
        float _1370 = _1367 * (_1330.z + (-0.5));
        float _1377 = exp2((_1337.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1337.x + (-0.5));
        float _1379 = _1377 * (_1337.y + (-0.5));
        float _1380 = _1377 * (_1337.z + (-0.5));
        float _1387 = exp2((_1344.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1344.x + (-0.5));
        float _1389 = _1387 * (_1344.y + (-0.5));
        float _1390 = _1387 * (_1344.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1411 = (dot(vec3(_951, _952, _953), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4200 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1421 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4211 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _1423 = _1422 * 2.0;
        float _1427 = (1.0 - _1422) / (_1422 + 1.0);
        float _4222 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1437 = ((((1.0 - _1428) * (_1423 + 2.0)) * exp2(log2(isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) * (_1423 + 1.0))) + _1428) * _1391;
        float _1438 = _1359 * 0.5;
        float _1439 = _1369 * 0.5;
        float _1440 = _1379 * 0.5;
        float _1441 = dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440));
        float _1446 = (_1441 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1441);
        float _1454 = (dot(vec3(_951, _952, _953), vec3(_1446 * _1438, _1446 * _1439, _1446 * _1440)) + 1.0) * 0.5;
        float _4233 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1463 = sqrt(((_1439 * _1439) + (_1438 * _1438)) + (_1440 * _1440)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4244 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1465 = _1464 * 2.0;
        float _1469 = (1.0 - _1464) / (_1464 + 1.0);
        float _4255 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1470 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1479 = ((((1.0 - _1470) * (_1465 + 2.0)) * exp2(log2(isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_1465 + 1.0))) + _1470) * _1392;
        float _1480 = _1360 * 0.5;
        float _1481 = _1370 * 0.5;
        float _1482 = _1380 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1496 = (dot(vec3(_951, _952, _953), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1505 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4288 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1507 + 1.0))) + _1512) * _1393;
        _1529 = _1360;
        _1531 = _1359;
        _1532 = _1358;
        _1533 = _1370;
        _1534 = _1369;
        _1535 = _1368;
        _1536 = _1380;
        _1537 = _1379;
        _1538 = _1378;
        _1539 = _1393;
        _1540 = _1392;
        _1541 = _1391;
        _1542 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)));
        _1543 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0)));
        _1544 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
    }
    else
    {
        _1529 = _1530;
        _1531 = _1530;
        _1532 = _1530;
        _1533 = _1530;
        _1534 = _1530;
        _1535 = _1530;
        _1536 = _1530;
        _1537 = _1530;
        _1538 = _1530;
        _1539 = _1530;
        _1540 = _1530;
        _1541 = _1530;
        _1542 = 0.0;
        _1543 = 0.0;
        _1544 = 0.0;
    }
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    float _1845;
    float _1846;
    float _1847;
    float _1848;
    float _1849;
    float _1850;
    float _1851;
    float _1852;
    float _1853;
    float _1854;
    float _1855;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1572 = fma(_1200, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1192));
        float _1576 = fma(_1200, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1192));
        float _1580 = fma(_1200, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1192));
        float _1603 = _1192 + _951;
        float _1604 = _1196 + _952;
        float _1605 = _1200 + _953;
        float _1615 = fma(_1605, cbModelParam._m0[30u].z, fma(_1604, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1603)) - _1572;
        float _1616 = fma(_1605, cbModelParam._m0[31u].z, fma(_1604, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1603)) - _1576;
        float _1617 = fma(_1605, cbModelParam._m0[32u].z, fma(_1604, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1603)) - _1580;
        float _1621 = inversesqrt(dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617)));
        float _1634 = ((_1621 * _1615) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1572 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1635 = ((_1621 * _1616) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1576 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1636 = ((_1621 * _1617) / cbModelParam._m0[35u].z) + ((((((_1580 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1638 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1645 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1652 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        vec4 _1659 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1634, _1635, _1636), 0.0);
        float _1671 = exp2((_1638.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1638.x + (-0.5));
        float _1673 = _1671 * (_1638.y + (-0.5));
        float _1674 = _1671 * (_1638.z + (-0.5));
        float _1681 = exp2((_1645.w + (-0.5)) * 20.0) * 2.0;
        float _1682 = _1681 * (_1645.x + (-0.5));
        float _1683 = _1681 * (_1645.y + (-0.5));
        float _1684 = _1681 * (_1645.z + (-0.5));
        float _1691 = exp2((_1652.w + (-0.5)) * 20.0) * 2.0;
        float _1692 = _1691 * (_1652.x + (-0.5));
        float _1693 = _1691 * (_1652.y + (-0.5));
        float _1694 = _1691 * (_1652.z + (-0.5));
        float _1701 = exp2((_1659.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1659.x + (-0.5));
        float _1703 = _1701 * (_1659.y + (-0.5));
        float _1704 = _1701 * (_1659.z + (-0.5));
        float _1705 = isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0));
        float _1706 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1707 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1708 = _1672 * 0.5;
        float _1709 = _1682 * 0.5;
        float _1710 = _1692 * 0.5;
        float _1711 = dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710));
        float _1716 = (_1711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1711);
        float _1724 = (dot(vec3(_951, _952, _953), vec3(_1716 * _1708, _1716 * _1709, _1716 * _1710)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1733 = sqrt(((_1709 * _1709) + (_1708 * _1708)) + (_1710 * _1710)) / (_1705 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1735 = _1734 * 2.0;
        float _1739 = (1.0 - _1734) / (_1734 + 1.0);
        float _4351 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1740 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1749 = ((((1.0 - _1740) * (_1735 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1735 + 1.0))) + _1740) * _1705;
        float _1750 = _1673 * 0.5;
        float _1751 = _1683 * 0.5;
        float _1752 = _1693 * 0.5;
        float _1753 = dot(vec3(_1750, _1751, _1752), vec3(_1750, _1751, _1752));
        float _1758 = (_1753 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1753);
        float _1766 = (dot(vec3(_951, _952, _953), vec3(_1758 * _1750, _1758 * _1751, _1758 * _1752)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1775 = sqrt(((_1751 * _1751) + (_1750 * _1750)) + (_1752 * _1752)) / (_1706 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1777 = _1776 * 2.0;
        float _1781 = (1.0 - _1776) / (_1776 + 1.0);
        float _4384 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1791 = ((((1.0 - _1782) * (_1777 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1777 + 1.0))) + _1782) * _1706;
        float _1792 = _1674 * 0.5;
        float _1793 = _1684 * 0.5;
        float _1794 = _1694 * 0.5;
        float _1795 = dot(vec3(_1792, _1793, _1794), vec3(_1792, _1793, _1794));
        float _1800 = (_1795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1795);
        float _1808 = (dot(vec3(_951, _952, _953), vec3(_1800 * _1792, _1800 * _1793, _1800 * _1794)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1817 = sqrt(((_1793 * _1793) + (_1792 * _1792)) + (_1794 * _1794)) / (_1707 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1819 = _1818 * 2.0;
        float _1823 = (1.0 - _1818) / (_1818 + 1.0);
        float _4417 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1824 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1833 = ((((1.0 - _1824) * (_1819 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1819 + 1.0))) + _1824) * _1707;
        _1841 = _1674;
        _1842 = _1673;
        _1843 = _1672;
        _1844 = _1684;
        _1845 = _1683;
        _1846 = _1682;
        _1847 = _1694;
        _1848 = _1693;
        _1849 = _1692;
        _1850 = _1707;
        _1851 = _1706;
        _1852 = _1705;
        _1853 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)));
        _1854 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
        _1855 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0)));
    }
    else
    {
        _1841 = _1530;
        _1842 = _1530;
        _1843 = _1530;
        _1844 = _1530;
        _1845 = _1530;
        _1846 = _1530;
        _1847 = _1530;
        _1848 = _1530;
        _1849 = _1530;
        _1850 = _1530;
        _1851 = _1530;
        _1852 = _1530;
        _1853 = 0.0;
        _1854 = 0.0;
        _1855 = 0.0;
    }
    float _1865 = (cbModelParam._m0[1u].x * (_1853 - _1542)) + _1542;
    float _1866 = (cbModelParam._m0[1u].x * (_1854 - _1543)) + _1543;
    float _1867 = (cbModelParam._m0[1u].x * (_1855 - _1544)) + _1544;
    float _1888 = fma(_1867, cbSceneParam._m0[89u].z, fma(_1866, cbSceneParam._m0[89u].y, _1865 * cbSceneParam._m0[89u].x));
    float _1891 = fma(_1867, cbSceneParam._m0[90u].z, fma(_1866, cbSceneParam._m0[90u].y, _1865 * cbSceneParam._m0[90u].x));
    float _1894 = fma(_1867, cbSceneParam._m0[91u].z, fma(_1866, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1865));
    float _1909 = _1136 * 0.5;
    float _1910 = _1137 * 0.5;
    float _1911 = _1138 * 0.5;
    float _1912 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1843, _1846, _1849, _1852));
    float _1915 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1842, _1845, _1848, _1851));
    float _1918 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1841, _1844, _1847, _1850));
    float _1952;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1925 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1529, _1533, _1536, _1539));
        float _1929 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1531, _1534, _1537, _1540));
        float _1933 = dot(vec4(_1909, _1910, _1911, 1.0), vec4(_1532, _1535, _1538, _1541));
        float _1940 = dot(vec4(cbModelParam._m0[39u]), vec4(_1909, _1910, _1911, 1.0));
        _1952 = dot(vec3(isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)), isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0)), isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1940) ? 0.0 : (isnan(0.0) ? _1940 : max(0.0, _1940))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1952 = 1.0;
    }
    float _1963;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1954 = dot(vec4(cbModelParam._m0[40u]), vec4(_1909, _1910, _1911, 1.0));
        _1963 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0)), isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1954) ? 0.0 : (isnan(0.0) ? _1954 : max(0.0, _1954))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1963 = 1.0;
    }
    float _1967 = (_1963 * cbModelParam._m0[1u].x) + (_1952 * (1.0 - cbModelParam._m0[1u].x));
    float _1977 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _954);
    float _1978 = isnan(_1977) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1977 : min(cbModelParam._m0[25u].z, _1977));
    float _2058;
    float _2060;
    float _2062;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2025 = fma(_1200, cbModelParam._m0[13u].z, fma(_1196, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1192)) + cbModelParam._m0[13u].w;
        float _2029 = fma(_1200, cbModelParam._m0[14u].z, fma(_1196, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1192)) + cbModelParam._m0[14u].w;
        float _2033 = fma(_1200, cbModelParam._m0[15u].z, fma(_1196, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1192)) + cbModelParam._m0[15u].w;
        float _2036 = fma(_1138, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1136));
        float _2039 = fma(_1138, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1136));
        float _2042 = fma(_1138, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1136));
        float _2070;
        if (_2036 > 0.0)
        {
            _2070 = abs((1.0 - _2025) / _2036);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2036 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2025 + 1.0) / _2036);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2070 = frontier_phi_17_15_ladder;
        }
        float _2293;
        if (_2039 > 0.0)
        {
            _2293 = abs((1.0 - _2029) / _2039);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2039 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2029 + 1.0) / _2039);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2293 = frontier_phi_26_22_ladder;
        }
        float _2550;
        if (_2042 > 0.0)
        {
            _2550 = abs((1.0 - _2033) / _2042);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2042 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2033 + 1.0) / _2042);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2550 = frontier_phi_38_33_ladder;
        }
        float _2552 = isnan(_2293) ? _2070 : (isnan(_2070) ? _2293 : min(_2070, _2293));
        float _2553 = isnan(_2550) ? _2552 : (isnan(_2552) ? _2550 : min(_2552, _2550));
        float _2557 = (_2553 * _2036) + _2025;
        float _2558 = (_2553 * _2039) + _2029;
        float _2559 = (_2553 * _2042) + _2033;
        float _2560 = _2553 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2560;
        float _2564 = _2560 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 > _2564) || ((_2558 < _2562) || ((_2557 < _2562) || (_2557 > _2564))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2559, cbModelParam._m0[9u].z, fma(_2558, cbModelParam._m0[9u].y, _2557 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2559, cbModelParam._m0[10u].z, fma(_2558, cbModelParam._m0[10u].y, _2557 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2559, cbModelParam._m0[11u].z, fma(_2558, cbModelParam._m0[11u].y, _2557 * cbModelParam._m0[11u].x))), _1978);
            frontier_phi_16_38_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _2058 = frontier_phi_16_38_ladder_2;
        _2060 = frontier_phi_16_38_ladder_1;
        _2062 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2046 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1136, _1137, _1138), _1978);
        _2058 = _2046.x * cbModelParam._m0[1u].y;
        _2060 = _2046.y * cbModelParam._m0[1u].y;
        _2062 = _2046.z * cbModelParam._m0[1u].y;
    }
    float _2066 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _954);
    float _2067 = isnan(_2066) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2066 : min(cbModelParam._m0[25u].w, _2066));
    float _2156;
    float _2158;
    float _2160;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2120 = fma(_1200, cbModelParam._m0[21u].z, fma(_1196, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1192)) + cbModelParam._m0[21u].w;
        float _2124 = fma(_1200, cbModelParam._m0[22u].z, fma(_1196, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1192)) + cbModelParam._m0[22u].w;
        float _2128 = fma(_1200, cbModelParam._m0[23u].z, fma(_1196, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1192)) + cbModelParam._m0[23u].w;
        float _2131 = fma(_1138, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1136));
        float _2134 = fma(_1138, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1136));
        float _2137 = fma(_1138, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1136));
        float _2298;
        if (_2131 > 0.0)
        {
            _2298 = abs((1.0 - _2120) / _2131);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2131 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2120 + 1.0) / _2131);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2298 = frontier_phi_28_24_ladder;
        }
        float _2577;
        if (_2134 > 0.0)
        {
            _2577 = abs((1.0 - _2124) / _2134);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2134 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2124 + 1.0) / _2134);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2577 = frontier_phi_40_35_ladder;
        }
        float _2790;
        if (_2137 > 0.0)
        {
            _2790 = abs((1.0 - _2128) / _2137);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2137 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2128 + 1.0) / _2137);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2790 = frontier_phi_49_46_ladder;
        }
        float _2792 = isnan(_2577) ? _2298 : (isnan(_2298) ? _2577 : min(_2298, _2577));
        float _2793 = isnan(_2790) ? _2792 : (isnan(_2792) ? _2790 : min(_2792, _2790));
        float _2797 = (_2793 * _2131) + _2120;
        float _2798 = (_2793 * _2134) + _2124;
        float _2799 = (_2793 * _2137) + _2128;
        float _2800 = _2793 * 9.9999997473787516355514526367188e-05;
        float _2801 = (-1.0) - _2800;
        float _2803 = _2800 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2799 > _2803) || ((_2799 < _2801) || ((_2798 > _2803) || ((_2798 < _2801) || ((_2797 < _2801) || (_2797 > _2803))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2998 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2799, cbModelParam._m0[17u].z, fma(_2798, cbModelParam._m0[17u].y, _2797 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2799, cbModelParam._m0[18u].z, fma(_2798, cbModelParam._m0[18u].y, _2797 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2799, cbModelParam._m0[19u].z, fma(_2798, cbModelParam._m0[19u].y, _2797 * cbModelParam._m0[19u].x))), _2067);
            frontier_phi_25_49_ladder = _2998.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2998.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2998.x * cbModelParam._m0[1u].z;
        }
        _2156 = frontier_phi_25_49_ladder_2;
        _2158 = frontier_phi_25_49_ladder_1;
        _2160 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2140 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1136, _1137, _1138), _2067);
        _2156 = _2140.x * cbModelParam._m0[1u].z;
        _2158 = _2140.y * cbModelParam._m0[1u].z;
        _2160 = _2140.z * cbModelParam._m0[1u].z;
    }
    float _2173 = (((_1163 * _1112) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2156 - _2058)) + _2058);
    float _2175 = (((_1163 * _1114) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2158 - _2060)) + _2060);
    float _2177 = (((_1163 * _1115) + _1164) * _1128) * ((cbModelParam._m0[1u].w * (_2160 - _2062)) + _2062);
    float _2180 = fma(_2177, cbSceneParam._m0[89u].z, fma(_2175, cbSceneParam._m0[89u].y, _2173 * cbSceneParam._m0[89u].x));
    float _2183 = fma(_2177, cbSceneParam._m0[90u].z, fma(_2175, cbSceneParam._m0[90u].y, _2173 * cbSceneParam._m0[90u].x));
    float _2186 = fma(_2177, cbSceneParam._m0[91u].z, fma(_2175, cbSceneParam._m0[91u].y, _2173 * cbSceneParam._m0[91u].x));
    vec4 _2194 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1050, _1051));
    float _2196 = _2194.w;
    float _2208 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2196);
    float _2209 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2196);
    float _2210 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2196);
    uvec4 _2214 = floatBitsToUint(cbInstanceData._m0[_289 + 5u]);
    uint _2216 = _2214.x * 14u;
    uint _2217 = _2216 + 13u;
    float _2224 = _1128 + (-1.0);
    float _2229 = (cbLight._m0[_2217].x * _2224) + 1.0;
    float _2230 = (cbLight._m0[_2217].y * _2224) + 1.0;
    float _2231 = (cbLight._m0[_2217].z * _2224) + 1.0;
    float _2232 = (cbLight._m0[_2217].w * _2224) + 1.0;
    uint _2233 = _2216 + 5u;
    float _2239 = isnan(1.0) ? _2230 : (isnan(_2230) ? 1.0 : min(_2230, 1.0));
    uint _2243 = _2216 + 4u;
    float _2252 = isnan(1.0) ? _2229 : (isnan(_2229) ? 1.0 : min(_2229, 1.0));
    uint _2256 = _2216 | 1u;
    float _2267 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_951, _952, _953));
    float _2270 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_951, _952, _953));
    float _4553 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _4564 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
    float _2275 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * 0.3183098733425140380859375;
    float _2277 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * 0.3183098733425140380859375;
    float _2284 = ((cbLight._m0[_2233].x * _2239) * _2277) + (((cbLight._m0[_2243].x * _2208) * _2252) * _2275);
    float _2285 = ((_2239 * cbLight._m0[_2233].y) * _2277) + (((cbLight._m0[_2243].y * _2209) * _2252) * _2275);
    float _2286 = ((_2239 * cbLight._m0[_2233].z) * _2277) + (((cbLight._m0[_2243].z * _2210) * _2252) * _2275);
    uvec4 _2290 = floatBitsToUint(cbLight._m0[_2216 + 12u]);
    bool _2292 = _2290.x == 0u;
    float _2303;
    float _2305;
    float _2307;
    if (_2292)
    {
        _2303 = _2284;
        _2305 = _2285;
        _2307 = _2286;
    }
    else
    {
        uint _2311 = _2216 + 6u;
        float _2327 = (dot(vec3(cbLight._m0[_2216 + 2u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2328 = _2327 * _2327;
        float _4575 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2329 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2330 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2303 = (((cbLight._m0[_2311].x * 0.3183098733425140380859375) * _2329) * _2330) + _2284;
        _2305 = (((cbLight._m0[_2311].y * 0.3183098733425140380859375) * _2329) * _2330) + _2285;
        _2307 = (((cbLight._m0[_2311].z * 0.3183098733425140380859375) * _2329) * _2330) + _2286;
    }
    bool _2310 = _2290.y == 0u;
    float _2348;
    float _2350;
    float _2352;
    if (_2310)
    {
        _2348 = _2303;
        _2350 = _2305;
        _2352 = _2307;
    }
    else
    {
        uint _2521 = _2216 + 7u;
        float _2537 = (dot(vec3(cbLight._m0[_2216 + 3u].xyz), vec3(_951, _952, _953)) * 0.5) + 0.5;
        float _2538 = _2537 * _2537;
        float _4591 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2539 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2540 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2348 = (((cbLight._m0[_2521].x * 0.3183098733425140380859375) * _2539) * _2540) + _2303;
        _2350 = (((cbLight._m0[_2521].y * 0.3183098733425140380859375) * _2539) * _2540) + _2305;
        _2352 = (((cbLight._m0[_2521].z * 0.3183098733425140380859375) * _2539) * _2540) + _2307;
    }
    uint _2355 = _2216 + 8u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2216].w)) * _954) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2216].x + _1030;
    float _2371 = cbLight._m0[_2216].y + _1031;
    float _2372 = cbLight._m0[_2216].z + _1032;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2216].xyz));
    float _4607 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0));
    float _4618 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _2384 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
    float _2385 = dot(vec3(_951, _952, _953), vec3(_2377, _2378, _2379));
    float _4629 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2388 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _2389 = dot(vec3(cbLight._m0[_2216].xyz), vec3(_2377, _2378, _2379));
    float _4640 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    float _2393 = _2369 * _2369;
    float _2397 = ((_2388 * _2388) * (_2393 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0)))) * 5.0);
    float _2406 = 0.959999978542327880859375 - _1109;
    float _2408 = 0.959999978542327880859375 - _1110;
    float _2409 = 0.959999978542327880859375 - _1111;
    float _2416 = 1.0 - _2369;
    float _2427 = (0.5 / (((_2384 * ((_2383 * _2416) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2416) + _2369) * _2383))) * _2383;
    float _4651 = isnan(0.0) ? _2427 : (isnan(_2427) ? 0.0 : max(_2427, 0.0));
    float _2429 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2393 / ((_2397 * _2397) * 3.141590118408203125));
    uint _2443 = _2216 + 9u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2256].w)) * _954) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2256].x + _1030;
    float _2457 = cbLight._m0[_2256].y + _1031;
    float _2458 = cbLight._m0[_2256].z + _1032;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2256].xyz));
    float _4662 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _2470 = dot(vec3(_951, _952, _953), vec3(_2463, _2464, _2465));
    float _4673 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2256].xyz), vec3(_2463, _2464, _2465));
    float _4684 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2455 * _2455;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2489 = exp2(log2(1.0 - (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) * 5.0);
    float _2496 = 1.0 - _2455;
    float _2506 = (0.5 / (((_2384 * ((_2469 * _2496) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2496) + _2455) * _2469))) * _2469;
    float _4695 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    float _2518 = (((((_2489 * _2406) + _1112) * cbLight._m0[_2443].x) * _2508) * _2239) + ((((cbLight._m0[_2355].x * _2208) * ((_2405 * _2406) + _1112)) * _2429) * _2252);
    float _2519 = (((((_2489 * _2408) + _1114) * cbLight._m0[_2443].y) * _2508) * _2239) + ((((cbLight._m0[_2355].y * _2209) * ((_2405 * _2408) + _1114)) * _2429) * _2252);
    float _2520 = (((((_2489 * _2409) + _1115) * cbLight._m0[_2443].z) * _2508) * _2239) + ((((cbLight._m0[_2355].z * _2210) * ((_2405 * _2409) + _1115)) * _2429) * _2252);
    float _2582;
    float _2584;
    float _2586;
    if (_2292)
    {
        _2582 = _2518;
        _2584 = _2519;
        _2586 = _2520;
    }
    else
    {
        uint _2588 = _2216 + 2u;
        uint _2592 = _2216 + 10u;
        float _2606 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2588].w)) * _954) * 0.949999988079071044921875);
        float _2607 = _2606 * _2606;
        float _2608 = cbLight._m0[_2588].x + _1030;
        float _2609 = cbLight._m0[_2588].y + _1031;
        float _2610 = cbLight._m0[_2588].z + _1032;
        float _2614 = inversesqrt(dot(vec3(_2608, _2609, _2610), vec3(_2608, _2609, _2610)));
        float _2615 = _2614 * _2608;
        float _2616 = _2614 * _2609;
        float _2617 = _2614 * _2610;
        float _2618 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2588].xyz));
        float _4706 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2621 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2622 = dot(vec3(_951, _952, _953), vec3(_2615, _2616, _2617));
        float _4717 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2625 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
        float _2626 = dot(vec3(cbLight._m0[_2588].xyz), vec3(_2615, _2616, _2617));
        float _4728 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2630 = _2607 * _2607;
        float _2634 = ((_2625 * _2625) * (_2630 + (-1.0))) + 1.0;
        float _2641 = exp2(log2(1.0 - (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0)))) * 5.0);
        float _2648 = 1.0 - _2607;
        float _2658 = (0.5 / (((_2384 * ((_2621 * _2648) + _2607)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2648) + _2607) * _2621))) * _2621;
        float _4739 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2660 = (isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * (_2630 / ((_2634 * _2634) * 3.141590118408203125));
        float _2661 = isnan(1.0) ? _2231 : (isnan(_2231) ? 1.0 : min(_2231, 1.0));
        _2582 = (((((_2641 * _2406) + _1112) * cbLight._m0[_2592].x) * _2660) * _2661) + _2518;
        _2584 = (((((_2641 * _2408) + _1114) * cbLight._m0[_2592].y) * _2660) * _2661) + _2519;
        _2586 = (((((_2641 * _2409) + _1115) * cbLight._m0[_2592].z) * _2660) * _2661) + _2520;
    }
    float _2696;
    float _2698;
    float _2700;
    if (_2310)
    {
        _2696 = _2582;
        _2698 = _2584;
        _2700 = _2586;
    }
    else
    {
        uint _2707 = _2216 + 3u;
        uint _2711 = _2216 + 11u;
        float _2725 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2707].w)) * _954) * 0.949999988079071044921875);
        float _2726 = _2725 * _2725;
        float _2727 = cbLight._m0[_2707].x + _1030;
        float _2728 = cbLight._m0[_2707].y + _1031;
        float _2729 = cbLight._m0[_2707].z + _1032;
        float _2733 = inversesqrt(dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729)));
        float _2734 = _2733 * _2727;
        float _2735 = _2733 * _2728;
        float _2736 = _2733 * _2729;
        float _2737 = dot(vec3(_951, _952, _953), vec3(cbLight._m0[_2707].xyz));
        float _4755 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2740 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
        float _2741 = dot(vec3(_951, _952, _953), vec3(_2734, _2735, _2736));
        float _4766 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2744 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
        float _2745 = dot(vec3(cbLight._m0[_2707].xyz), vec3(_2734, _2735, _2736));
        float _4777 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
        float _2749 = _2726 * _2726;
        float _2753 = ((_2744 * _2744) * (_2749 + (-1.0))) + 1.0;
        float _2760 = exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0);
        float _2767 = 1.0 - _2726;
        float _2777 = (0.5 / (((_2384 * ((_2740 * _2767) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2384 * _2767) + _2726) * _2740))) * _2740;
        float _4788 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
        float _2779 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2749 / ((_2753 * _2753) * 3.141590118408203125));
        float _2780 = isnan(1.0) ? _2232 : (isnan(_2232) ? 1.0 : min(_2232, 1.0));
        _2696 = (((((_2760 * _2406) + _1112) * cbLight._m0[_2711].x) * _2779) * _2780) + _2582;
        _2698 = (((((_2760 * _2408) + _1114) * cbLight._m0[_2711].y) * _2779) * _2780) + _2584;
        _2700 = (((((_2760 * _2409) + _1115) * cbLight._m0[_2711].z) * _2779) * _2780) + _2586;
    }
    float _2915;
    float _2917;
    float _2919;
    float _2921;
    float _2923;
    float _2925;
    if (_2214.y == 0u)
    {
        float _2855 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2856 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2855;
        float _2857 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2855;
        float _2858 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2855;
        uvec4 _2870 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2871 = _2870.x;
        uint _2882 = uint((float(_2870.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1051) / _2871))) + floor(float(uint(cbSceneParam._m0[85u].x * _1050) / _2871)));
        float _2892 = (log2(_2858 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2893 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        uint _2896 = uint(isnan(14.0) ? _2893 : (isnan(_2893) ? 14.0 : min(_2893, 14.0)));
        uvec4 _2901 = texelFetch(g_lightClusterGridBuffer, int(((_2896 << 2u) + (_2882 << 6u)) >> 2u));
        uint _2902 = _2901.x;
        uint _2903 = _2870.z;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        float _3013;
        if (((((1u << ((_2903 >> 4u) & 15u)) + 4294967295u) & _2902) == 0u) || ((_2903 & 240u) == 0u))
        {
            _3003 = 0.0;
            _3005 = 0.0;
            _3007 = 0.0;
            _3009 = 0.0;
            _3011 = 0.0;
            _3013 = 0.0;
        }
        else
        {
            float _3004;
            float _3006;
            float _3008;
            float _3010;
            float _3012;
            float _3014;
            float _3155 = 0.0;
            float _3156 = 0.0;
            float _3157 = 0.0;
            float _3158 = 0.0;
            float _3159 = 0.0;
            float _3160 = 0.0;
            uint _3161 = 0u;
            uint _3170;
            bool _3171;
            for (;;)
            {
                _3170 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3161 << 2u)) >> 2u)).x;
                _3171 = _3170 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3171)
                {
                    frontier_phi_66_pred = _3155;
                    frontier_phi_66_pred_1 = _3160;
                    frontier_phi_66_pred_2 = _3159;
                    frontier_phi_66_pred_3 = _3158;
                    frontier_phi_66_pred_4 = _3157;
                    frontier_phi_66_pred_5 = _3156;
                }
                else
                {
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    uint _3306;
                    _3300 = _3155;
                    _3301 = _3156;
                    _3302 = _3157;
                    _3303 = _3158;
                    _3304 = _3159;
                    _3305 = _3160;
                    _3306 = _3170;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    for (;;)
                    {
                        uint _3310 = uint(findLSB(_3306)) + (_3161 << 5u);
                        uint _3307 = (_3306 + 4294967295u) & _3306;
                        uint _3312 = _3310 * 48u;
                        vec4 _3326 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3332 = (_3310 * 48u) + 4u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3332)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3332 + 3u)).x));
                        uint _3351 = (_3310 * 48u) + 8u;
                        vec3 _3362 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x));
                        float _3366 = _3326.x - _2856;
                        float _3367 = _3326.y - _2857;
                        float _3368 = _3326.z - _2858;
                        float _3369 = dot(vec3(_3366, _3367, _3368), vec3(_3366, _3367, _3368));
                        float _3372 = inversesqrt(_3369);
                        float _3373 = _3372 * _3366;
                        float _3374 = _3372 * _3367;
                        float _3375 = _3372 * _3368;
                        float _3376 = dot(vec3(_1069, _1072, _1075), vec3(_3373, _3374, _3375));
                        float _3381 = 1.0 - (_3369 * _3326.w);
                        float _4814 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                        float _3382 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                        float _3383 = sqrt(_3369) * _3345.w;
                        float _3386 = 1.39999997615814208984375 / (_3383 + 1.39999997615814208984375);
                        float _3387 = _3386 * _3386;
                        float _3390 = ((1.0 - _3387) * _3376) + _3387;
                        float _3393 = _3383 * _3383;
                        float _3397 = ((isnan(0.0) ? _3390 : (isnan(_3390) ? 0.0 : max(_3390, 0.0))) * _3382) / ((_3393 * 0.699999988079071044921875) + 1.0);
                        float _3401 = (-0.0) - _2856;
                        float _3402 = (-0.0) - _2857;
                        float _3403 = (-0.0) - _2858;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3408 = _3407 * _3401;
                        float _3409 = _3407 * _3402;
                        float _3410 = _3407 * _3403;
                        float _3418 = exp2(log2(1.0 / ((_3393 * 3.5) + 5.0)) * 0.25);
                        float _3419 = 1.0 - _1144;
                        float _3426 = sqrt(1.0 - ((1.0 - (_3419 * _3419)) * (1.0 - (_3418 * _3418))));
                        float _3427 = _3426 * _3426;
                        float _3428 = _3427 * _3427;
                        float _3429 = _3408 + _3373;
                        float _3430 = _3409 + _3374;
                        float _3431 = _3410 + _3375;
                        float _3435 = inversesqrt(dot(vec3(_3429, _3430, _3431), vec3(_3429, _3430, _3431)));
                        float _3439 = dot(vec3(_1069, _1072, _1075), vec3(_3408, _3409, _3410));
                        float _4830 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3442 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                        float _3443 = dot(vec3(_1069, _1072, _1075), vec3(_3435 * _3429, _3435 * _3430, _3435 * _3431));
                        float _4841 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3446 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                        float _3450 = ((_3446 * _3446) * (_3428 + (-1.0))) + 1.0;
                        float _3451 = _3386 * _3427;
                        float _3452 = _3451 * _3451;
                        float _3455 = ((1.0 - _3452) * _3376) + _3452;
                        float _4852 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                        float _3457 = 1.0 - _3427;
                        float _3467 = (0.5 / (((_3456 * ((_3442 * _3457) + _3427)) + 9.9999999392252902907785028219223e-09) + (((_3456 * _3457) + _3427) * _3442))) * _3456;
                        float _4863 = isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0));
                        float _3478 = (((_3428 * 3.1415927410125732421875) * (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) / ((_3450 * _3450) * ((_3393 * 2.1991131305694580078125) + 3.141590118408203125))) * _3382;
                        _3230 = (_3397 * _3345.x) + _3303;
                        _3231 = (_3397 * _3345.y) + _3304;
                        _3232 = (_3397 * _3345.z) + _3305;
                        _3227 = (_3478 * _3362.x) + _3300;
                        _3228 = (_3478 * _3362.y) + _3301;
                        _3229 = (_3478 * _3362.z) + _3302;
                        if (_3307 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3300 = _3227;
                            _3301 = _3228;
                            _3302 = _3229;
                            _3303 = _3230;
                            _3304 = _3231;
                            _3305 = _3232;
                            _3306 = _3307;
                        }
                    }
                    frontier_phi_66_pred = _3227;
                    frontier_phi_66_pred_1 = _3232;
                    frontier_phi_66_pred_2 = _3231;
                    frontier_phi_66_pred_3 = _3230;
                    frontier_phi_66_pred_4 = _3229;
                    frontier_phi_66_pred_5 = _3228;
                }
                _3004 = frontier_phi_66_pred;
                _3014 = frontier_phi_66_pred_1;
                _3012 = frontier_phi_66_pred_2;
                _3010 = frontier_phi_66_pred_3;
                _3008 = frontier_phi_66_pred_4;
                _3006 = frontier_phi_66_pred_5;
                uint _3162 = _3161 + 1u;
                if (_3162 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3155 = _3004;
                    _3156 = _3006;
                    _3157 = _3008;
                    _3158 = _3010;
                    _3159 = _3012;
                    _3160 = _3014;
                    _3161 = _3162;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3003 = _3004;
            _3005 = _3006;
            _3007 = _3008;
            _3009 = _3010;
            _3011 = _3012;
            _3013 = _3014;
        }
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.z;
        uint _3020 = (_3018 >> 8u) & 15u;
        float _3123;
        float _3125;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        if (((4294967295u << _3020) & _2902) == 0u)
        {
            _3123 = _3003;
            _3125 = _3005;
            _3127 = _3007;
            _3129 = _3009;
            _3131 = _3011;
            _3133 = _3013;
        }
        else
        {
            float _3148 = inversesqrt(dot(vec3(_2856, _2857, _2858), vec3(_2856, _2857, _2858)));
            float _3149 = _3148 * _2856;
            float _3150 = _3148 * _2857;
            float _3151 = _3148 * _2858;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3020 < ((_3018 >> 12u) & 15u))
            {
                float _3124;
                float _3126;
                float _3128;
                float _3130;
                float _3132;
                float _3134;
                float _3283 = _3003;
                float _3284 = _3005;
                float _3285 = _3007;
                float _3286 = _3009;
                float _3287 = _3011;
                float _3288 = _3013;
                uint _3289 = _3020;
                uint _3298;
                bool _3299;
                for (;;)
                {
                    _3298 = texelFetch(g_lightClassification, int((((_2896 << 5u) + (_2882 << 9u)) + (_3289 << 2u)) >> 2u)).x;
                    _3299 = _3298 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3299)
                    {
                        frontier_phi_77_pred = _3288;
                        frontier_phi_77_pred_1 = _3287;
                        frontier_phi_77_pred_2 = _3286;
                        frontier_phi_77_pred_3 = _3285;
                        frontier_phi_77_pred_4 = _3284;
                        frontier_phi_77_pred_5 = _3283;
                    }
                    else
                    {
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3785;
                        float _3786;
                        float _3787;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3505 = _3283;
                        float _3506 = _3284;
                        float _3507 = _3285;
                        float _3508 = _3286;
                        float _3509 = _3287;
                        float _3510 = _3288;
                        uint _3511 = _3298;
                        uint _3512;
                        vec4 _3537;
                        float _3538;
                        vec4 _3553;
                        vec3 _3565;
                        vec4 _3580;
                        vec4 _3595;
                        float _3641;
                        bool _3642;
                        for (;;)
                        {
                            uint _3522 = ((_3289 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3511));
                            _3512 = (_3511 + 4294967295u) & _3511;
                            uint _3524 = _3522 * 40u;
                            _3537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3524 + 3u)).x));
                            _3538 = _3537.w;
                            uint _3540 = (_3522 * 40u) + 4u;
                            _3553 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 3u)).x));
                            uint _3555 = (_3522 * 40u) + 8u;
                            _3565 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3555)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3555 + 2u)).x));
                            uint _3567 = (_3522 * 40u) + 16u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3582 = (_3522 * 40u) + 20u;
                            _3595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3582 + 3u)).x));
                            uint _3597 = (_3522 * 40u) + 24u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            uint _3616 = (_3522 * 40u) + 28u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3641 = fma(_2858, _3629.z, fma(_2857, _3629.y, _3629.x * _2856)) + _3629.w;
                            _3642 = !((fma(_2858, _3610.z, fma(_2857, _3610.y, _3610.x * _2856)) + _3610.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3642)
                            {
                                float _3669 = _3537.x - _2856;
                                float _3670 = _3537.y - _2857;
                                float _3671 = _3537.z - _2858;
                                float _3672 = dot(vec3(_3669, _3670, _3671), vec3(_3669, _3670, _3671));
                                float _3675 = inversesqrt(_3672);
                                float _3676 = _3675 * _3669;
                                float _3677 = _3675 * _3670;
                                float _3678 = _3675 * _3671;
                                float _3682 = 1.0 - (_3672 / (_3538 * _3538));
                                float _4874 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                                float _3683 = isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0));
                                float _3687 = sqrt(_3672) * _3553.w;
                                float _3689 = 1.39999997615814208984375 / (_3687 + 1.39999997615814208984375);
                                float _3690 = _3689 * _3689;
                                float _3693 = ((1.0 - _3690) * dot(vec3(_3676, _3677, _3678), vec3(_1069, _1072, _1075))) + _3690;
                                float _3696 = _3687 * _3687;
                                float _3700 = (fma(_2858, _3580.z, fma(_2857, _3580.y, _3580.x * _2856)) + _3580.w) / _3641;
                                float _3701 = (fma(_2858, _3595.z, fma(_2857, _3595.y, _3595.x * _2856)) + _3595.w) / _3641;
                                float _3705 = 1.0 - dot(vec2(_3700, _3701), vec2(_3700, _3701));
                                float _4890 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                                float _3706 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
                                float _3707 = _3706 * (((isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0))) * _3683) / ((_3696 * 0.699999988079071044921875) + 1.0));
                                float _3719 = exp2(log2(1.0 / ((_3696 * 3.5) + 5.0)) * 0.25);
                                float _3720 = 1.0 - _1144;
                                float _3727 = sqrt(1.0 - ((1.0 - (_3720 * _3720)) * (1.0 - (_3719 * _3719))));
                                float _3728 = _3727 * _3727;
                                float _3729 = _3728 * _3728;
                                float _3730 = _3676 - _3149;
                                float _3731 = _3677 - _3150;
                                float _3732 = _3678 - _3151;
                                float _3736 = inversesqrt(dot(vec3(_3730, _3731, _3732), vec3(_3730, _3731, _3732)));
                                float _3740 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3149, (-0.0) - _3150, (-0.0) - _3151));
                                float _4901 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3743 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                                float _3744 = dot(vec3(_1069, _1072, _1075), vec3(_3736 * _3730, _3736 * _3731, _3736 * _3732));
                                float _4912 = isnan(0.0) ? _3744 : (isnan(_3744) ? 0.0 : max(_3744, 0.0));
                                float _3747 = isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0));
                                float _3751 = ((_3747 * _3747) * (_3729 + (-1.0))) + 1.0;
                                float _3752 = _3689 * _3728;
                                float _3753 = _3752 * _3752;
                                float _3759 = ((1.0 - _3753) * dot(vec3(_1069, _1072, _1075), vec3(_3676, _3677, _3678))) + _3753;
                                float _4923 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3760 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
                                float _3761 = 1.0 - _3728;
                                float _3771 = (0.5 / (((_3760 * ((_3743 * _3761) + _3728)) + 9.9999999392252902907785028219223e-09) + (((_3760 * _3761) + _3728) * _3743))) * _3760;
                                float _4934 = isnan(0.0) ? _3771 : (isnan(_3771) ? 0.0 : max(_3771, 0.0));
                                float _3781 = (_3706 * _3683) * (((_3729 * 3.1415927410125732421875) * (isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0)))) / ((_3751 * _3751) * ((_3696 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3707 * _3553.y;
                                frontier_phi_83_pred_1 = _3707 * _3553.x;
                                frontier_phi_83_pred_2 = _3781 * _3565.z;
                                frontier_phi_83_pred_3 = _3781 * _3565.y;
                                frontier_phi_83_pred_4 = _3781 * _3565.x;
                                frontier_phi_83_pred_5 = _3707 * _3553.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3789 = frontier_phi_83_pred;
                            _3788 = frontier_phi_83_pred_1;
                            _3787 = frontier_phi_83_pred_2;
                            _3786 = frontier_phi_83_pred_3;
                            _3785 = frontier_phi_83_pred_4;
                            _3790 = frontier_phi_83_pred_5;
                            _3495 = _3788 + _3508;
                            _3496 = _3789 + _3509;
                            _3497 = _3790 + _3510;
                            _3492 = _3785 + _3505;
                            _3493 = _3786 + _3506;
                            _3494 = _3787 + _3507;
                            if (_3512 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3505 = _3492;
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3512;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3497;
                        frontier_phi_77_pred_1 = _3496;
                        frontier_phi_77_pred_2 = _3495;
                        frontier_phi_77_pred_3 = _3494;
                        frontier_phi_77_pred_4 = _3493;
                        frontier_phi_77_pred_5 = _3492;
                    }
                    _3134 = frontier_phi_77_pred;
                    _3132 = frontier_phi_77_pred_1;
                    _3130 = frontier_phi_77_pred_2;
                    _3128 = frontier_phi_77_pred_3;
                    _3126 = frontier_phi_77_pred_4;
                    _3124 = frontier_phi_77_pred_5;
                    uint _3290 = _3289 + 1u;
                    if (_3290 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3283 = _3124;
                        _3284 = _3126;
                        _3285 = _3128;
                        _3286 = _3130;
                        _3287 = _3132;
                        _3288 = _3134;
                        _3289 = _3290;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3128;
                frontier_phi_58_59_ladder_1 = _3134;
                frontier_phi_58_59_ladder_2 = _3132;
                frontier_phi_58_59_ladder_3 = _3130;
                frontier_phi_58_59_ladder_4 = _3126;
                frontier_phi_58_59_ladder_5 = _3124;
            }
            else
            {
                frontier_phi_58_59_ladder = _3007;
                frontier_phi_58_59_ladder_1 = _3013;
                frontier_phi_58_59_ladder_2 = _3011;
                frontier_phi_58_59_ladder_3 = _3009;
                frontier_phi_58_59_ladder_4 = _3005;
                frontier_phi_58_59_ladder_5 = _3003;
            }
            _3123 = frontier_phi_58_59_ladder_5;
            _3125 = frontier_phi_58_59_ladder_4;
            _3127 = frontier_phi_58_59_ladder;
            _3129 = frontier_phi_58_59_ladder_3;
            _3131 = frontier_phi_58_59_ladder_2;
            _3133 = frontier_phi_58_59_ladder_1;
        }
        float _3138 = isnan(1.0) ? _1128 : (isnan(_1128) ? 1.0 : min(_1128, 1.0));
        _2915 = (_3138 * _3129) + _2348;
        _2917 = (_3138 * _3131) + _2350;
        _2919 = (_3138 * _3133) + _2352;
        _2921 = ((_3123 * _1112) * _3138) + _2696;
        _2923 = ((_3125 * _1114) * _3138) + _2698;
        _2925 = ((_3127 * _1115) * _3138) + _2700;
    }
    else
    {
        _2915 = _2348;
        _2917 = _2350;
        _2919 = _2352;
        _2921 = _2696;
        _2923 = _2698;
        _2925 = _2700;
    }
    float _4950 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _4961 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _4972 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _2942 = ((isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0))) * (_2915 + ((isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) * _1128))) + ((_2921 + ((isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2943 = ((isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0))) * (_2917 + ((isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0))) * _1128))) + ((_2923 + ((isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    float _2944 = ((isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2919 + ((isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0))) * _1128))) + ((_2925 + ((isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0))) * _1967)) * cbPerFrame._m0[3u].x);
    uint _2945 = _289 + 6u;
    float _2953 = _1050 / cbSceneParam._m0[86u].x;
    float _2954 = _1051 / cbSceneParam._m0[86u].y;
    vec4 _2968 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, (log2((isnan(cbSceneParam._m0[77u].w) ? _973 : (isnan(_973) ? cbSceneParam._m0[77u].w : min(_973, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2970 = _2968.x;
    float _2971 = _2968.y;
    float _2972 = _2968.z;
    float _2973 = _2968.w;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_973 > cbSceneParam._m0[78u].w)
    {
        float _3028 = isnan(_973) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _973 : min(cbSceneParam._m0[80u].w, _973));
        float _3029 = _3028 / _973;
        float _3040 = _3029 * _1023;
        float _3041 = _1024 * _3029;
        float _3042 = (-0.0) - _3041;
        float _3043 = _3029 * _1025;
        float _3045 = (cbSceneParam._m0[77u].w * _3042) / _3028;
        float _3046 = _3045 + cbSceneParam._m0[79u].w;
        float _3047 = cbSceneParam._m0[79u].w - _3041;
        float _3053 = sqrt(((_3040 * _3040) + (_3041 * _3041)) + (_3043 * _3043));
        float _3056 = (1.0 - (cbSceneParam._m0[77u].w / _3028)) * _3053;
        float _3061 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3063 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3240;
        if (abs((_3042 - _3045) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3240 = ((((_3046 > 0.0) ? exp2(_3061 * _3046) : (2.0 - exp2(_3063 * _3046))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3056;
        }
        else
        {
            float _3184 = 1.0 / cbSceneParam._m0[80u].x;
            float _3185 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : max(_3046, _3047));
            float _3186 = isnan(_3047) ? _3046 : (isnan(_3046) ? _3047 : min(_3046, _3047));
            float _3195 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : min(_3185, 0.0));
            float _3196 = isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : min(_3186, 0.0));
            _3240 = ((abs(_3053 / _3042) * cbSceneParam._m0[80u].y) * ((((_3195 - _3196) * 2.0) - ((exp2(_3061 * (isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0)))) - exp2(_3061 * (isnan(0.0) ? _3186 : (isnan(_3186) ? 0.0 : max(_3186, 0.0))))) * _3184)) - ((exp2(_3063 * _3195) - exp2(_3063 * _3196)) * _3184))) + (_3056 * cbSceneParam._m0[80u].z);
        }
        vec4 _3242 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2953, _2954, 1.0), 0.0);
        float _3251 = exp2((_3240 * (-1.44269502162933349609375)) * (1.0 - _3242.w));
        float _3252 = log2(_3251);
        float _3268 = log2(_2973);
        _3065 = (exp2(_3268 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].x)) * _3242.x) / cbSceneParam._m0[78u].x)) + _2970;
        _3067 = (exp2(_3268 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].y)) * _3242.y) / cbSceneParam._m0[78u].y)) + _2971;
        _3069 = (exp2(_3268 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3252 * cbSceneParam._m0[78u].z)) * _3242.z) / cbSceneParam._m0[78u].z)) + _2972;
        _3071 = _3251 * _2973;
    }
    else
    {
        _3065 = _2970;
        _3067 = _2971;
        _3069 = _2972;
        _3071 = _2973;
    }
    bool _3278;
    vec4 _3081;
    vec4 _3103;
    float _3105;
    float _3109;
    float _3110;
    float _3111;
    float _3112;
    bool _3122;
    for (;;)
    {
        _3081 = cbMatDynParam._m0[0u];
        float _3083 = roundEven(_3081.y);
        bool _3084 = _3083 == 3.0;
        float _3085 = log2(_3071);
        float _3092 = exp2(_3085 * cbSceneParam._m0[78u].x) * _2942;
        float _3093 = exp2(_3085 * cbSceneParam._m0[78u].y) * _2943;
        float _3094 = exp2(_3085 * cbSceneParam._m0[78u].z) * _2944;
        float _3101 = _1039 + (-0.5);
        _3103 = cbMtdParam._m0[1u];
        _3105 = _3103.y * _3101;
        float _3108 = (_3083 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3109 = _3108 * (_3084 ? _3092 : (_3092 + (cbSceneParam._m0[72u].w * _3065)));
        _3110 = _3108 * (_3084 ? _3093 : (_3093 + (cbSceneParam._m0[72u].w * _3067)));
        _3111 = _3108 * (_3084 ? _3094 : (_3094 + (cbSceneParam._m0[72u].w * _3069)));
        _3112 = _3101 * 0.999000012874603271484375;
        _3122 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3122)
        {
            if ((cbInstanceData._m0[_289 + 7u].x + _3112) < 0.5)
            {
                _3278 = true;
                break;
            }
        }
        uint _3219 = _1088 + uint(_3081.w);
        if ((cbInstanceData._m0[_3219].w < 1.0) && ((cbInstanceData._m0[_3219].w + _3112) < 0.5))
        {
            _3278 = true;
            break;
        }
        if ((_3105 + 1.0) < _3103.x)
        {
            _3278 = true;
            break;
        }
        _3278 = false;
        break;
    }
    float _3483;
    if (_3278)
    {
        discard_state = true;
        _3483 = 0.0;
    }
    else
    {
        _3483 = cbInstanceData._m0[_2945].w;
    }
    SV_Target.x = _3109;
    SV_Target.y = _3110;
    SV_Target.z = _3111;
    SV_Target.w = _3483;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2945].w;
    discard_exit();
}


