#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 20) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1501;
float _3906;
float _3907;
float _3908;
float _3909;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _244 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _245 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _246 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _252 = inversesqrt(dot(vec3(_244, _245, _246), vec3(_244, _245, _246)));
    float _259 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _266 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_20);
    float _280 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_21);
    float _281 = 1.0 - (cbMtdParam._m0[22u].y * TEXCOORD_22);
    float _3918 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3929 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3940 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    uint _291 = uint(roundEven(NORMAL.w)) * 13u;
    uint _296 = _291 + 1u;
    uint _300 = _291 + 2u;
    float _309 = sqrt(((cbInstanceData._m0[_296].x * cbInstanceData._m0[_296].x) + (cbInstanceData._m0[_291].x * cbInstanceData._m0[_291].x)) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x));
    float _310 = _309 * TEXCOORD.z;
    float _311 = _309 * TEXCOORD.w;
    vec4 _324 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_22, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * _310) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _311) + cbTextureTilingScale._m0[13u].w));
    vec4 _347 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _378 = _373.x * cbMtdParam._m0[11u].x;
    float _379 = _373.y * cbMtdParam._m0[11u].y;
    float _380 = _373.z * cbMtdParam._m0[11u].z;
    vec4 _399 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _310) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _311) + cbTextureTilingScale._m0[5u].w));
    vec4 _418 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _450 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _452 = _450.x;
    float _464 = dot(vec4(_452, _450.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _481 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _418.x) * 2.0) - ((((_452 - _464) * cbMtdParam._m0[23u].w) + _464) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3951 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _482 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _489 = (_482 * ((_399.x * cbMtdParam._m0[12u].x) - _378)) + _378;
    float _490 = (_482 * ((_399.y * cbMtdParam._m0[12u].y) - _379)) + _379;
    float _491 = (_482 * ((_399.z * cbMtdParam._m0[12u].z) - _380)) + _380;
    vec4 _508 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _310) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _311) + cbTextureTilingScale._m0[3u].w));
    vec4 _528 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _530 = _528.x;
    float _540 = dot(vec4(_530, _528.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _554 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _418.y) * 2.0) - ((((_530 - _540) * cbMtdParam._m0[23u].w) + _540) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3962 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _565 = (_347.x * cbMtdParam._m0[9u].x) * ((_555 * ((_508.x * cbMtdParam._m0[13u].x) - _489)) + _489);
    float _566 = (_347.y * cbMtdParam._m0[9u].y) * ((_555 * ((_508.y * cbMtdParam._m0[13u].y) - _490)) + _490);
    float _567 = (_347.z * cbMtdParam._m0[9u].z) * ((_555 * ((_508.z * cbMtdParam._m0[13u].z) - _491)) + _491);
    float _571 = ((cbMtdParam._m0[16u].x * 4.55000019073486328125) * _324.x) * _565;
    float _574 = ((cbMtdParam._m0[16u].y * 4.55000019073486328125) * _324.y) * _566;
    float _577 = ((cbMtdParam._m0[16u].z * 4.55000019073486328125) * _324.z) * _567;
    float _585 = (((_565 - _571) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) + _571) * 4.55000019073486328125;
    float _587 = (((_566 - _574) * (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) + _574) * 4.55000019073486328125;
    float _589 = (((_567 - _577) * (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0)))) + _577) * 4.55000019073486328125;
    vec4 _601 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[20u].x * _310) + cbTextureTilingScale._m0[20u].z, (cbTextureTilingScale._m0[20u].y * _311) + cbTextureTilingScale._m0[20u].w));
    vec4 _624 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _310) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _311) + cbTextureTilingScale._m0[4u].w));
    vec4 _641 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _643 = _641.x;
    float _644 = _641.y;
    float _645 = _641.z;
    float _652 = ((_624.x - _643) * _482) + _643;
    float _653 = ((_624.y - _644) * _482) + _644;
    float _654 = ((_624.z - _645) * _482) + _645;
    vec4 _666 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _310) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _311) + cbTextureTilingScale._m0[2u].w));
    float _679 = ((_666.z - _654) * _555) + _654;
    float _682 = ((((_666.x - _652) * _555) + _652) * 2.0) + (-1.0);
    float _683 = ((((_666.y - _653) * _555) + _653) * 2.0) + (-1.0);
    float _684 = dot(vec2(_682, _683), vec2(_682, _683));
    float _3973 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _689 = sqrt(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))));
    vec4 _709 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _721 = (_682 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.x) * ((_601.x * 2.0) + (-1.0)))) + (((_709.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    float _722 = (_683 + ((cbMtdParam._m0[20u].x * TEXCOORD_11.y) * ((_601.y * 2.0) + (-1.0)))) + (((_709.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z);
    vec4 _734 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _310) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _311) + cbTextureTilingScale._m0[19u].w));
    float _736 = _734.x;
    float _737 = 1.0 - _736;
    float _766 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_736 - _737) * cbMtdParam._m0[24u].w) + _737) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3984 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _767 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _775 = ((((cbMtdParam._m0[10u].x - _585) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _767) + _585;
    float _776 = ((((cbMtdParam._m0[10u].y - _587) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _767) + _587;
    float _777 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _589)) * _767) + _589;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _805 = _803.x;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _310) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _311) + cbTextureTilingScale._m0[9u].w)).x - _805) * _482) + _805;
    float _840 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _310) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _311) + cbTextureTilingScale._m0[21u].w)).x - _822) * _555) + _822;
    float _844 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _840) * cbMtdParam._m0[19u].z) + _840;
    float _846 = _844 - (_844 * _767);
    float _851 = (((_601.z - _679) * TEXCOORD_11.x) * cbMtdParam._m0[20u].y) + _679;
    float _855 = ((_709.z - _851) * cbMtdParam._m0[19u].w) + _851;
    float _859 = ((cbMtdParam._m0[23u].x - _855) * _767) + _855;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _310) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _311) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _886 = (_880.x * 2.0) + (-1.0);
    float _887 = (_880.y * 2.0) + (-1.0);
    float _888 = dot(vec2(_886, _887), vec2(_886, _887));
    float _3995 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _904 = (_767 * (((cbMtdParam._m0[22u].z * _721) - _721) + _886)) + _721;
    float _905 = (_767 * (((cbMtdParam._m0[22u].z * _722) - _722) + _887)) + _722;
    float _906 = (_767 * (sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) - _689)) + _689;
    float _908 = cbMtdParam._m0[22u].x + _709.w;
    float _911 = fma(_906, _259 * NORMAL.x, fma(_905, _266 * TANGENT.x, (_252 * _244) * _904));
    float _914 = fma(_906, _259 * NORMAL.y, fma(_905, _266 * TANGENT.y, (_252 * _245) * _904));
    float _917 = fma(_906, _259 * NORMAL.z, fma(_905, _266 * TANGENT.z, (_252 * _246) * _904));
    float _921 = inversesqrt(dot(vec3(_911, _914, _917), vec3(_911, _914, _917)));
    float _922 = _921 * _911;
    float _923 = _921 * _914;
    float _924 = _921 * _917;
    float _4006 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _925 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _4028 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4039 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4050 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4061 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _930 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _944 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _984 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _994 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _984);
    float _995 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _984);
    float _996 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _984);
    float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
    float _1001 = _994 * _1000;
    float _1002 = _995 * _1000;
    float _1003 = _996 * _1000;
    vec4 _1008 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1010 = _1008.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1182 = sqrt(((_994 * _994) + (_995 * _995)) + (_996 * _996));
        float _1188 = (cbMatDynParam._m0[5u].x * _1182) + cbMatDynParam._m0[5u].y;
        float _4072 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _1193 = (cbMatDynParam._m0[5u].z * _1182) + cbMatDynParam._m0[5u].w;
        float _4083 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) - _1189)) + _1189) < ((_1010 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1021 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1022 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1040 = fma(_924, cbSceneParam._m0[5u].z, fma(_923, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _922));
    float _1043 = fma(_924, cbSceneParam._m0[6u].z, fma(_923, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _922));
    float _1046 = fma(_924, cbSceneParam._m0[7u].z, fma(_923, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _922));
    uint _1059 = _291 + 9u;
    uint _1060 = _1059 + uint(cbMatDynParam._m0[0u].w);
    float _1066 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1060].x;
    float _1067 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1060].y;
    float _1068 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0)))) * cbInstanceData._m0[_1060].z;
    float _4094 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
    float _1069 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
    float _1070 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    float _4116 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1071 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _1072 = 1.0 - _930;
    float _1073 = _1069 * _1072;
    float _1074 = _1070 * _1072;
    float _1075 = _1071 * _1072;
    float _1080 = (_1069 + (-0.039999999105930328369140625)) * _930;
    float _1081 = (_1070 + (-0.039999999105930328369140625)) * _930;
    float _1082 = (_1071 + (-0.039999999105930328369140625)) * _930;
    float _1083 = _1080 + 0.039999999105930328369140625;
    float _1085 = _1081 + 0.039999999105930328369140625;
    float _1086 = _1082 + 0.039999999105930328369140625;
    vec4 _1095 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1021, cbSceneParam._m0[86u].y * _1022));
    float _1099 = ((isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0))) * TEXCOORD_5.w) * _1095.x;
    float _1100 = dot(vec3(_922, _923, _924), vec3(_1001, _1002, _1003));
    float _1103 = _1100 * 2.0;
    float _1107 = (_1103 * _922) - _1001;
    float _1108 = (_1103 * _923) - _1002;
    float _1109 = (_1103 * _924) - _1003;
    float _1113 = abs(dot(vec3(_1001, _1002, _1003), vec3(_922, _923, _924)));
    float _4127 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
    float _1115 = sqrt(_925);
    float _1128 = exp2((_1115 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1115 * 3.0));
    float _1134 = (1.0 - _1128) * ((_1115 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1135 = _1128 * _1115;
    float _1163 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1167 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1171 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1500;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    float _1513;
    float _1514;
    float _1515;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1225 = fma(_1171, cbModelParam._m0[26u].z, fma(_1167, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1163));
        float _1229 = fma(_1171, cbModelParam._m0[27u].z, fma(_1167, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1163));
        float _1233 = fma(_1171, cbModelParam._m0[28u].z, fma(_1167, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1163));
        float _1258 = _1163 + _922;
        float _1259 = _1167 + _923;
        float _1260 = _1171 + _924;
        float _1270 = fma(_1260, cbModelParam._m0[26u].z, fma(_1259, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1258)) - _1225;
        float _1271 = fma(_1260, cbModelParam._m0[27u].z, fma(_1259, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1258)) - _1229;
        float _1272 = fma(_1260, cbModelParam._m0[28u].z, fma(_1259, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1258)) - _1233;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1225 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1229 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[34u].z) + ((((((_1233 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1308 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1328 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1294.x + (-0.5));
        float _1330 = _1328 * (_1294.y + (-0.5));
        float _1331 = _1328 * (_1294.z + (-0.5));
        float _1338 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1301.x + (-0.5));
        float _1340 = _1338 * (_1301.y + (-0.5));
        float _1341 = _1338 * (_1301.z + (-0.5));
        float _1348 = exp2((_1308.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1308.x + (-0.5));
        float _1350 = _1348 * (_1308.y + (-0.5));
        float _1351 = _1348 * (_1308.z + (-0.5));
        float _1358 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1315.x + (-0.5));
        float _1360 = _1358 * (_1315.y + (-0.5));
        float _1361 = _1358 * (_1315.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1382 = (dot(vec3(_922, _923, _924), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4153 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1392 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4164 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _4175 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1394 + 1.0))) + _1399) * _1362;
        float _1409 = _1330 * 0.5;
        float _1410 = _1340 * 0.5;
        float _1411 = _1350 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_922, _923, _924), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _4186 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4197 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4208 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_1436 + 1.0))) + _1441) * _1363;
        float _1451 = _1331 * 0.5;
        float _1452 = _1341 * 0.5;
        float _1453 = _1351 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_922, _923, _924), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _4219 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4230 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _4241 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1478 + 1.0))) + _1483) * _1364;
        _1500 = _1331;
        _1502 = _1330;
        _1503 = _1329;
        _1504 = _1341;
        _1505 = _1340;
        _1506 = _1339;
        _1507 = _1351;
        _1508 = _1350;
        _1509 = _1349;
        _1510 = _1364;
        _1511 = _1363;
        _1512 = _1362;
        _1513 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1514 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1515 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
    }
    else
    {
        _1500 = _1501;
        _1502 = _1501;
        _1503 = _1501;
        _1504 = _1501;
        _1505 = _1501;
        _1506 = _1501;
        _1507 = _1501;
        _1508 = _1501;
        _1509 = _1501;
        _1510 = _1501;
        _1511 = _1501;
        _1512 = _1501;
        _1513 = 0.0;
        _1514 = 0.0;
        _1515 = 0.0;
    }
    float _1811;
    float _1812;
    float _1813;
    float _1814;
    float _1815;
    float _1816;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    float _1821;
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1542 = fma(_1171, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1163));
        float _1546 = fma(_1171, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1163));
        float _1550 = fma(_1171, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1163));
        float _1573 = _1163 + _922;
        float _1574 = _1167 + _923;
        float _1575 = _1171 + _924;
        float _1585 = fma(_1575, cbModelParam._m0[30u].z, fma(_1574, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1573)) - _1542;
        float _1586 = fma(_1575, cbModelParam._m0[31u].z, fma(_1574, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1573)) - _1546;
        float _1587 = fma(_1575, cbModelParam._m0[32u].z, fma(_1574, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1573)) - _1550;
        float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
        float _1604 = ((_1591 * _1585) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1542 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1605 = ((_1591 * _1586) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1546 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1606 = ((_1591 * _1587) / cbModelParam._m0[35u].z) + ((((((_1550 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1608 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1615 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1622 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        vec4 _1629 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1604, _1605, _1606), 0.0);
        float _1641 = exp2((_1608.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1608.x + (-0.5));
        float _1643 = _1641 * (_1608.y + (-0.5));
        float _1644 = _1641 * (_1608.z + (-0.5));
        float _1651 = exp2((_1615.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1615.x + (-0.5));
        float _1653 = _1651 * (_1615.y + (-0.5));
        float _1654 = _1651 * (_1615.z + (-0.5));
        float _1661 = exp2((_1622.w + (-0.5)) * 20.0) * 2.0;
        float _1662 = _1661 * (_1622.x + (-0.5));
        float _1663 = _1661 * (_1622.y + (-0.5));
        float _1664 = _1661 * (_1622.z + (-0.5));
        float _1671 = exp2((_1629.w + (-0.5)) * 20.0) * 2.0;
        float _1672 = _1671 * (_1629.x + (-0.5));
        float _1673 = _1671 * (_1629.y + (-0.5));
        float _1674 = _1671 * (_1629.z + (-0.5));
        float _1675 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1676 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
        float _1677 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1678 = _1642 * 0.5;
        float _1679 = _1652 * 0.5;
        float _1680 = _1662 * 0.5;
        float _1681 = dot(vec3(_1678, _1679, _1680), vec3(_1678, _1679, _1680));
        float _1686 = (_1681 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1681);
        float _1694 = (dot(vec3(_922, _923, _924), vec3(_1686 * _1678, _1686 * _1679, _1686 * _1680)) + 1.0) * 0.5;
        float _4282 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1703 = sqrt(((_1679 * _1679) + (_1678 * _1678)) + (_1680 * _1680)) / (_1675 + 9.9999997473787516355514526367188e-06);
        float _4293 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1704 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1705 = _1704 * 2.0;
        float _1709 = (1.0 - _1704) / (_1704 + 1.0);
        float _4304 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1710 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1719 = ((((1.0 - _1710) * (_1705 + 2.0)) * exp2(log2(isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_1705 + 1.0))) + _1710) * _1675;
        float _1720 = _1643 * 0.5;
        float _1721 = _1653 * 0.5;
        float _1722 = _1663 * 0.5;
        float _1723 = dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722));
        float _1728 = (_1723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1723);
        float _1736 = (dot(vec3(_922, _923, _924), vec3(_1728 * _1720, _1728 * _1721, _1728 * _1722)) + 1.0) * 0.5;
        float _4315 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1745 = sqrt(((_1721 * _1721) + (_1720 * _1720)) + (_1722 * _1722)) / (_1676 + 9.9999997473787516355514526367188e-06);
        float _4326 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1746 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1747 = _1746 * 2.0;
        float _1751 = (1.0 - _1746) / (_1746 + 1.0);
        float _4337 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1752 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1761 = ((((1.0 - _1752) * (_1747 + 2.0)) * exp2(log2(isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_1747 + 1.0))) + _1752) * _1676;
        float _1762 = _1644 * 0.5;
        float _1763 = _1654 * 0.5;
        float _1764 = _1664 * 0.5;
        float _1765 = dot(vec3(_1762, _1763, _1764), vec3(_1762, _1763, _1764));
        float _1770 = (_1765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1765);
        float _1778 = (dot(vec3(_922, _923, _924), vec3(_1770 * _1762, _1770 * _1763, _1770 * _1764)) + 1.0) * 0.5;
        float _4348 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1787 = sqrt(((_1763 * _1763) + (_1762 * _1762)) + (_1764 * _1764)) / (_1677 + 9.9999997473787516355514526367188e-06);
        float _4359 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
        float _1788 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1789 = _1788 * 2.0;
        float _1793 = (1.0 - _1788) / (_1788 + 1.0);
        float _4370 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1794 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1803 = ((((1.0 - _1794) * (_1789 + 2.0)) * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * (_1789 + 1.0))) + _1794) * _1677;
        _1811 = _1644;
        _1812 = _1643;
        _1813 = _1642;
        _1814 = _1654;
        _1815 = _1653;
        _1816 = _1652;
        _1817 = _1664;
        _1818 = _1663;
        _1819 = _1662;
        _1820 = _1677;
        _1821 = _1676;
        _1822 = _1675;
        _1823 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)));
        _1824 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)));
        _1825 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)));
    }
    else
    {
        _1811 = _1501;
        _1812 = _1501;
        _1813 = _1501;
        _1814 = _1501;
        _1815 = _1501;
        _1816 = _1501;
        _1817 = _1501;
        _1818 = _1501;
        _1819 = _1501;
        _1820 = _1501;
        _1821 = _1501;
        _1822 = _1501;
        _1823 = 0.0;
        _1824 = 0.0;
        _1825 = 0.0;
    }
    float _1835 = (cbModelParam._m0[1u].x * (_1823 - _1513)) + _1513;
    float _1836 = (cbModelParam._m0[1u].x * (_1824 - _1514)) + _1514;
    float _1837 = (cbModelParam._m0[1u].x * (_1825 - _1515)) + _1515;
    float _1858 = fma(_1837, cbSceneParam._m0[89u].z, fma(_1836, cbSceneParam._m0[89u].y, _1835 * cbSceneParam._m0[89u].x));
    float _1861 = fma(_1837, cbSceneParam._m0[90u].z, fma(_1836, cbSceneParam._m0[90u].y, _1835 * cbSceneParam._m0[90u].x));
    float _1864 = fma(_1837, cbSceneParam._m0[91u].z, fma(_1836, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1835));
    float _1879 = _1107 * 0.5;
    float _1880 = _1108 * 0.5;
    float _1881 = _1109 * 0.5;
    float _1882 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1813, _1816, _1819, _1822));
    float _1885 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1812, _1815, _1818, _1821));
    float _1888 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1811, _1814, _1817, _1820));
    float _1922;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1895 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1500, _1504, _1507, _1510));
        float _1899 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1502, _1505, _1508, _1511));
        float _1903 = dot(vec4(_1879, _1880, _1881, 1.0), vec4(_1503, _1506, _1509, _1512));
        float _1910 = dot(vec4(cbModelParam._m0[39u]), vec4(_1879, _1880, _1881, 1.0));
        _1922 = dot(vec3(isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1910) ? 0.0 : (isnan(0.0) ? _1910 : max(0.0, _1910))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1922 = 1.0;
    }
    float _1933;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1924 = dot(vec4(cbModelParam._m0[40u]), vec4(_1879, _1880, _1881, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0)), isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0)), isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1924) ? 0.0 : (isnan(0.0) ? _1924 : max(0.0, _1924))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1937 = (_1933 * cbModelParam._m0[1u].x) + (_1922 * (1.0 - cbModelParam._m0[1u].x));
    float _1947 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _925);
    float _1948 = isnan(_1947) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1947 : min(cbModelParam._m0[25u].z, _1947));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1997 = fma(_1171, cbModelParam._m0[13u].z, fma(_1167, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163)) + cbModelParam._m0[13u].w;
        float _2001 = fma(_1171, cbModelParam._m0[14u].z, fma(_1167, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163)) + cbModelParam._m0[14u].w;
        float _2005 = fma(_1171, cbModelParam._m0[15u].z, fma(_1167, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163)) + cbModelParam._m0[15u].w;
        float _2008 = fma(_1109, cbModelParam._m0[13u].z, fma(_1108, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1107));
        float _2011 = fma(_1109, cbModelParam._m0[14u].z, fma(_1108, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1107));
        float _2014 = fma(_1109, cbModelParam._m0[15u].z, fma(_1108, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1107));
        float _2042;
        if (_2008 > 0.0)
        {
            _2042 = abs((1.0 - _1997) / _2008);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1997 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2042 = frontier_phi_17_15_ladder;
        }
        float _2266;
        if (_2011 > 0.0)
        {
            _2266 = abs((1.0 - _2001) / _2011);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2001 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2266 = frontier_phi_26_22_ladder;
        }
        float _2523;
        if (_2014 > 0.0)
        {
            _2523 = abs((1.0 - _2005) / _2014);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2014 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2005 + 1.0) / _2014);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2523 = frontier_phi_38_33_ladder;
        }
        float _2525 = isnan(_2266) ? _2042 : (isnan(_2042) ? _2266 : min(_2042, _2266));
        float _2526 = isnan(_2523) ? _2525 : (isnan(_2525) ? _2523 : min(_2525, _2523));
        float _2530 = (_2526 * _2008) + _1997;
        float _2531 = (_2526 * _2011) + _2001;
        float _2532 = (_2526 * _2014) + _2005;
        float _2533 = _2526 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2533;
        float _2537 = _2533 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 > _2537) || ((_2531 < _2535) || ((_2530 < _2535) || (_2530 > _2537))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2660 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2532, cbModelParam._m0[9u].z, fma(_2531, cbModelParam._m0[9u].y, _2530 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2532, cbModelParam._m0[10u].z, fma(_2531, cbModelParam._m0[10u].y, _2530 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2532, cbModelParam._m0[11u].z, fma(_2531, cbModelParam._m0[11u].y, _2530 * cbModelParam._m0[11u].x))), _1948);
            frontier_phi_16_38_ladder = _2660.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2660.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2660.x * cbModelParam._m0[1u].y;
        }
        _2030 = frontier_phi_16_38_ladder_2;
        _2032 = frontier_phi_16_38_ladder_1;
        _2034 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2018 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1107, _1108, _1109), _1948);
        _2030 = _2018.x * cbModelParam._m0[1u].y;
        _2032 = _2018.y * cbModelParam._m0[1u].y;
        _2034 = _2018.z * cbModelParam._m0[1u].y;
    }
    float _2038 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _925);
    float _2039 = isnan(_2038) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2038 : min(cbModelParam._m0[25u].w, _2038));
    float _2129;
    float _2131;
    float _2133;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2093 = fma(_1171, cbModelParam._m0[21u].z, fma(_1167, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163)) + cbModelParam._m0[21u].w;
        float _2097 = fma(_1171, cbModelParam._m0[22u].z, fma(_1167, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163)) + cbModelParam._m0[22u].w;
        float _2101 = fma(_1171, cbModelParam._m0[23u].z, fma(_1167, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163)) + cbModelParam._m0[23u].w;
        float _2104 = fma(_1109, cbModelParam._m0[21u].z, fma(_1108, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1107));
        float _2107 = fma(_1109, cbModelParam._m0[22u].z, fma(_1108, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1107));
        float _2110 = fma(_1109, cbModelParam._m0[23u].z, fma(_1108, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1107));
        float _2271;
        if (_2104 > 0.0)
        {
            _2271 = abs((1.0 - _2093) / _2104);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2104 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2093 + 1.0) / _2104);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2271 = frontier_phi_28_24_ladder;
        }
        float _2550;
        if (_2107 > 0.0)
        {
            _2550 = abs((1.0 - _2097) / _2107);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2107 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2097 + 1.0) / _2107);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2550 = frontier_phi_40_35_ladder;
        }
        float _2763;
        if (_2110 > 0.0)
        {
            _2763 = abs((1.0 - _2101) / _2110);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2110 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2101 + 1.0) / _2110);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2763 = frontier_phi_49_46_ladder;
        }
        float _2765 = isnan(_2550) ? _2271 : (isnan(_2271) ? _2550 : min(_2271, _2550));
        float _2766 = isnan(_2763) ? _2765 : (isnan(_2765) ? _2763 : min(_2765, _2763));
        float _2770 = (_2766 * _2104) + _2093;
        float _2771 = (_2766 * _2107) + _2097;
        float _2772 = (_2766 * _2110) + _2101;
        float _2773 = _2766 * 9.9999997473787516355514526367188e-05;
        float _2774 = (-1.0) - _2773;
        float _2776 = _2773 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2772 > _2776) || ((_2772 < _2774) || ((_2771 > _2776) || ((_2771 < _2774) || ((_2770 < _2774) || (_2770 > _2776))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2971 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2772, cbModelParam._m0[17u].z, fma(_2771, cbModelParam._m0[17u].y, _2770 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2772, cbModelParam._m0[18u].z, fma(_2771, cbModelParam._m0[18u].y, _2770 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2772, cbModelParam._m0[19u].z, fma(_2771, cbModelParam._m0[19u].y, _2770 * cbModelParam._m0[19u].x))), _2039);
            frontier_phi_25_49_ladder = _2971.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2971.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2971.x * cbModelParam._m0[1u].z;
        }
        _2129 = frontier_phi_25_49_ladder_2;
        _2131 = frontier_phi_25_49_ladder_1;
        _2133 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2113 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1107, _1108, _1109), _2039);
        _2129 = _2113.x * cbModelParam._m0[1u].z;
        _2131 = _2113.y * cbModelParam._m0[1u].z;
        _2133 = _2113.z * cbModelParam._m0[1u].z;
    }
    float _2146 = (((_1134 * _1083) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2129 - _2030)) + _2030);
    float _2148 = (((_1134 * _1085) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2131 - _2032)) + _2032);
    float _2150 = (((_1134 * _1086) + _1135) * _1099) * ((cbModelParam._m0[1u].w * (_2133 - _2034)) + _2034);
    float _2153 = fma(_2150, cbSceneParam._m0[89u].z, fma(_2148, cbSceneParam._m0[89u].y, _2146 * cbSceneParam._m0[89u].x));
    float _2156 = fma(_2150, cbSceneParam._m0[90u].z, fma(_2148, cbSceneParam._m0[90u].y, _2146 * cbSceneParam._m0[90u].x));
    float _2159 = fma(_2150, cbSceneParam._m0[91u].z, fma(_2148, cbSceneParam._m0[91u].y, _2146 * cbSceneParam._m0[91u].x));
    vec4 _2167 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1021, _1022));
    float _2169 = _2167.w;
    float _2181 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2169);
    float _2182 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2169);
    float _2183 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2169);
    uvec4 _2187 = floatBitsToUint(cbInstanceData._m0[_291 + 5u]);
    uint _2189 = _2187.x * 14u;
    uint _2190 = _2189 + 13u;
    float _2197 = _1099 + (-1.0);
    float _2202 = (cbLight._m0[_2190].x * _2197) + 1.0;
    float _2203 = (cbLight._m0[_2190].y * _2197) + 1.0;
    float _2204 = (cbLight._m0[_2190].z * _2197) + 1.0;
    float _2205 = (cbLight._m0[_2190].w * _2197) + 1.0;
    uint _2206 = _2189 + 5u;
    float _2212 = isnan(1.0) ? _2203 : (isnan(_2203) ? 1.0 : min(_2203, 1.0));
    uint _2216 = _2189 + 4u;
    float _2225 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
    uint _2229 = _2189 | 1u;
    float _2240 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_922, _923, _924));
    float _2243 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_922, _923, _924));
    float _4506 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _4517 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2248 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2250 = (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0))) * 0.3183098733425140380859375;
    float _2257 = ((cbLight._m0[_2206].x * _2212) * _2250) + (((cbLight._m0[_2216].x * _2181) * _2225) * _2248);
    float _2258 = ((_2212 * cbLight._m0[_2206].y) * _2250) + (((cbLight._m0[_2216].y * _2182) * _2225) * _2248);
    float _2259 = ((_2212 * cbLight._m0[_2206].z) * _2250) + (((cbLight._m0[_2216].z * _2183) * _2225) * _2248);
    uvec4 _2263 = floatBitsToUint(cbLight._m0[_2189 + 12u]);
    bool _2265 = _2263.x == 0u;
    float _2276;
    float _2278;
    float _2280;
    if (_2265)
    {
        _2276 = _2257;
        _2278 = _2258;
        _2280 = _2259;
    }
    else
    {
        uint _2284 = _2189 + 6u;
        float _2300 = (dot(vec3(cbLight._m0[_2189 + 2u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2301 = _2300 * _2300;
        float _4528 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2302 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2303 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2276 = (((cbLight._m0[_2284].x * 0.3183098733425140380859375) * _2302) * _2303) + _2257;
        _2278 = (((cbLight._m0[_2284].y * 0.3183098733425140380859375) * _2302) * _2303) + _2258;
        _2280 = (((cbLight._m0[_2284].z * 0.3183098733425140380859375) * _2302) * _2303) + _2259;
    }
    bool _2283 = _2263.y == 0u;
    float _2321;
    float _2323;
    float _2325;
    if (_2283)
    {
        _2321 = _2276;
        _2323 = _2278;
        _2325 = _2280;
    }
    else
    {
        uint _2494 = _2189 + 7u;
        float _2510 = (dot(vec3(cbLight._m0[_2189 + 3u].xyz), vec3(_922, _923, _924)) * 0.5) + 0.5;
        float _2511 = _2510 * _2510;
        float _4544 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2512 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
        float _2513 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2321 = (((cbLight._m0[_2494].x * 0.3183098733425140380859375) * _2512) * _2513) + _2276;
        _2323 = (((cbLight._m0[_2494].y * 0.3183098733425140380859375) * _2512) * _2513) + _2278;
        _2325 = (((cbLight._m0[_2494].z * 0.3183098733425140380859375) * _2512) * _2513) + _2280;
    }
    uint _2328 = _2189 + 8u;
    float _2341 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2189].w)) * _925) * 0.949999988079071044921875);
    float _2342 = _2341 * _2341;
    float _2343 = cbLight._m0[_2189].x + _1001;
    float _2344 = cbLight._m0[_2189].y + _1002;
    float _2345 = cbLight._m0[_2189].z + _1003;
    float _2349 = inversesqrt(dot(vec3(_2343, _2344, _2345), vec3(_2343, _2344, _2345)));
    float _2350 = _2349 * _2343;
    float _2351 = _2349 * _2344;
    float _2352 = _2349 * _2345;
    float _2353 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2189].xyz));
    float _4560 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
    float _2356 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _4571 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
    float _2357 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2358 = dot(vec3(_922, _923, _924), vec3(_2350, _2351, _2352));
    float _4582 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
    float _2362 = dot(vec3(cbLight._m0[_2189].xyz), vec3(_2350, _2351, _2352));
    float _4593 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2366 = _2342 * _2342;
    float _2370 = ((_2361 * _2361) * (_2366 + (-1.0))) + 1.0;
    float _2378 = exp2(log2(1.0 - (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0)))) * 5.0);
    float _2379 = 0.959999978542327880859375 - _1080;
    float _2381 = 0.959999978542327880859375 - _1081;
    float _2382 = 0.959999978542327880859375 - _1082;
    float _2389 = 1.0 - _2342;
    float _2400 = (0.5 / (((_2357 * ((_2356 * _2389) + _2342)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2389) + _2342) * _2356))) * _2356;
    float _4604 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (_2366 / ((_2370 * _2370) * 3.141590118408203125));
    uint _2416 = _2189 + 9u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _925) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2229].x + _1001;
    float _2430 = cbLight._m0[_2229].y + _1002;
    float _2431 = cbLight._m0[_2229].z + _1003;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2229].xyz));
    float _4615 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2443 = dot(vec3(_922, _923, _924), vec3(_2436, _2437, _2438));
    float _4626 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2436, _2437, _2438));
    float _4637 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2428 * _2428;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2462 = exp2(log2(1.0 - (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0)))) * 5.0);
    float _2469 = 1.0 - _2428;
    float _2479 = (0.5 / (((_2357 * ((_2442 * _2469) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2469) + _2428) * _2442))) * _2442;
    float _4648 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    float _2491 = (((((_2462 * _2379) + _1083) * cbLight._m0[_2416].x) * _2481) * _2212) + ((((cbLight._m0[_2328].x * _2181) * ((_2378 * _2379) + _1083)) * _2402) * _2225);
    float _2492 = (((((_2462 * _2381) + _1085) * cbLight._m0[_2416].y) * _2481) * _2212) + ((((cbLight._m0[_2328].y * _2182) * ((_2378 * _2381) + _1085)) * _2402) * _2225);
    float _2493 = (((((_2462 * _2382) + _1086) * cbLight._m0[_2416].z) * _2481) * _2212) + ((((cbLight._m0[_2328].z * _2183) * ((_2378 * _2382) + _1086)) * _2402) * _2225);
    float _2555;
    float _2557;
    float _2559;
    if (_2265)
    {
        _2555 = _2491;
        _2557 = _2492;
        _2559 = _2493;
    }
    else
    {
        uint _2561 = _2189 + 2u;
        uint _2565 = _2189 + 10u;
        float _2579 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2561].w)) * _925) * 0.949999988079071044921875);
        float _2580 = _2579 * _2579;
        float _2581 = cbLight._m0[_2561].x + _1001;
        float _2582 = cbLight._m0[_2561].y + _1002;
        float _2583 = cbLight._m0[_2561].z + _1003;
        float _2587 = inversesqrt(dot(vec3(_2581, _2582, _2583), vec3(_2581, _2582, _2583)));
        float _2588 = _2587 * _2581;
        float _2589 = _2587 * _2582;
        float _2590 = _2587 * _2583;
        float _2591 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2561].xyz));
        float _4659 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2594 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2595 = dot(vec3(_922, _923, _924), vec3(_2588, _2589, _2590));
        float _4670 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2598 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2599 = dot(vec3(cbLight._m0[_2561].xyz), vec3(_2588, _2589, _2590));
        float _4681 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2603 = _2580 * _2580;
        float _2607 = ((_2598 * _2598) * (_2603 + (-1.0))) + 1.0;
        float _2614 = exp2(log2(1.0 - (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0)))) * 5.0);
        float _2621 = 1.0 - _2580;
        float _2631 = (0.5 / (((_2357 * ((_2594 * _2621) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2621) + _2580) * _2594))) * _2594;
        float _4692 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2633 = (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0))) * (_2603 / ((_2607 * _2607) * 3.141590118408203125));
        float _2634 = isnan(1.0) ? _2204 : (isnan(_2204) ? 1.0 : min(_2204, 1.0));
        _2555 = (((((_2614 * _2379) + _1083) * cbLight._m0[_2565].x) * _2633) * _2634) + _2491;
        _2557 = (((((_2614 * _2381) + _1085) * cbLight._m0[_2565].y) * _2633) * _2634) + _2492;
        _2559 = (((((_2614 * _2382) + _1086) * cbLight._m0[_2565].z) * _2633) * _2634) + _2493;
    }
    float _2669;
    float _2671;
    float _2673;
    if (_2283)
    {
        _2669 = _2555;
        _2671 = _2557;
        _2673 = _2559;
    }
    else
    {
        uint _2680 = _2189 + 3u;
        uint _2684 = _2189 + 11u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _925) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _1001;
        float _2701 = cbLight._m0[_2680].y + _1002;
        float _2702 = cbLight._m0[_2680].z + _1003;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_922, _923, _924), vec3(cbLight._m0[_2680].xyz));
        float _4708 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2714 = dot(vec3(_922, _923, _924), vec3(_2707, _2708, _2709));
        float _4719 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4730 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0)))) * 5.0);
        float _2740 = 1.0 - _2699;
        float _2750 = (0.5 / (((_2357 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2357 * _2740) + _2699) * _2713))) * _2713;
        float _4741 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
        float _2752 = (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2753 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
        _2669 = (((((_2733 * _2379) + _1083) * cbLight._m0[_2684].x) * _2752) * _2753) + _2555;
        _2671 = (((((_2733 * _2381) + _1085) * cbLight._m0[_2684].y) * _2752) * _2753) + _2557;
        _2673 = (((((_2733 * _2382) + _1086) * cbLight._m0[_2684].z) * _2752) * _2753) + _2559;
    }
    float _2888;
    float _2890;
    float _2892;
    float _2894;
    float _2896;
    float _2898;
    if (_2187.y == 0u)
    {
        float _2828 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2829 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2828;
        float _2830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2828;
        float _2831 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2828;
        uvec4 _2843 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2844 = _2843.x;
        uint _2855 = uint((float(_2843.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1022) / _2844))) + floor(float(uint(cbSceneParam._m0[85u].x * _1021) / _2844)));
        float _2865 = (log2(_2831 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2866 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
        uint _2869 = uint(isnan(14.0) ? _2866 : (isnan(_2866) ? 14.0 : min(_2866, 14.0)));
        uvec4 _2874 = texelFetch(g_lightClusterGridBuffer, int(((_2869 << 2u) + (_2855 << 6u)) >> 2u));
        uint _2875 = _2874.x;
        uint _2876 = _2843.z;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        float _2986;
        if (((((1u << ((_2876 >> 4u) & 15u)) + 4294967295u) & _2875) == 0u) || ((_2876 & 240u) == 0u))
        {
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
            _2986 = 0.0;
        }
        else
        {
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _2987;
            float _3129 = 0.0;
            float _3130 = 0.0;
            float _3131 = 0.0;
            float _3132 = 0.0;
            float _3133 = 0.0;
            float _3134 = 0.0;
            uint _3135 = 0u;
            uint _3144;
            bool _3145;
            for (;;)
            {
                _3144 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3135 << 2u)) >> 2u)).x;
                _3145 = _3144 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3145)
                {
                    frontier_phi_66_pred = _3129;
                    frontier_phi_66_pred_1 = _3134;
                    frontier_phi_66_pred_2 = _3133;
                    frontier_phi_66_pred_3 = _3132;
                    frontier_phi_66_pred_4 = _3131;
                    frontier_phi_66_pred_5 = _3130;
                }
                else
                {
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    uint _3280;
                    _3274 = _3129;
                    _3275 = _3130;
                    _3276 = _3131;
                    _3277 = _3132;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3144;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    for (;;)
                    {
                        uint _3284 = uint(findLSB(_3280)) + (_3135 << 5u);
                        uint _3281 = (_3280 + 4294967295u) & _3280;
                        uint _3286 = _3284 * 48u;
                        vec4 _3300 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3306 = (_3284 * 48u) + 4u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3325 = (_3284 * 48u) + 8u;
                        vec3 _3336 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x));
                        float _3340 = _3300.x - _2829;
                        float _3341 = _3300.y - _2830;
                        float _3342 = _3300.z - _2831;
                        float _3343 = dot(vec3(_3340, _3341, _3342), vec3(_3340, _3341, _3342));
                        float _3346 = inversesqrt(_3343);
                        float _3347 = _3346 * _3340;
                        float _3348 = _3346 * _3341;
                        float _3349 = _3346 * _3342;
                        float _3350 = dot(vec3(_1040, _1043, _1046), vec3(_3347, _3348, _3349));
                        float _3355 = 1.0 - (_3343 * _3300.w);
                        float _4767 = isnan(0.0) ? _3355 : (isnan(_3355) ? 0.0 : max(_3355, 0.0));
                        float _3356 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3357 = sqrt(_3343) * _3319.w;
                        float _3360 = 1.39999997615814208984375 / (_3357 + 1.39999997615814208984375);
                        float _3361 = _3360 * _3360;
                        float _3364 = ((1.0 - _3361) * _3350) + _3361;
                        float _3367 = _3357 * _3357;
                        float _3371 = ((isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0))) * _3356) / ((_3367 * 0.699999988079071044921875) + 1.0);
                        float _3375 = (-0.0) - _2829;
                        float _3376 = (-0.0) - _2830;
                        float _3377 = (-0.0) - _2831;
                        float _3381 = inversesqrt(dot(vec3(_3375, _3376, _3377), vec3(_3375, _3376, _3377)));
                        float _3382 = _3381 * _3375;
                        float _3383 = _3381 * _3376;
                        float _3384 = _3381 * _3377;
                        float _3392 = exp2(log2(1.0 / ((_3367 * 3.5) + 5.0)) * 0.25);
                        float _3393 = 1.0 - _1115;
                        float _3400 = sqrt(1.0 - ((1.0 - (_3393 * _3393)) * (1.0 - (_3392 * _3392))));
                        float _3401 = _3400 * _3400;
                        float _3402 = _3401 * _3401;
                        float _3403 = _3382 + _3347;
                        float _3404 = _3383 + _3348;
                        float _3405 = _3384 + _3349;
                        float _3409 = inversesqrt(dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405)));
                        float _3413 = dot(vec3(_1040, _1043, _1046), vec3(_3382, _3383, _3384));
                        float _4783 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                        float _3416 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3417 = dot(vec3(_1040, _1043, _1046), vec3(_3409 * _3403, _3409 * _3404, _3409 * _3405));
                        float _4794 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3424 = ((_3420 * _3420) * (_3402 + (-1.0))) + 1.0;
                        float _3425 = _3360 * _3401;
                        float _3426 = _3425 * _3425;
                        float _3429 = ((1.0 - _3426) * _3350) + _3426;
                        float _4805 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                        float _3431 = 1.0 - _3401;
                        float _3441 = (0.5 / (((_3430 * ((_3416 * _3431) + _3401)) + 9.9999999392252902907785028219223e-09) + (((_3430 * _3431) + _3401) * _3416))) * _3430;
                        float _4816 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3452 = (((_3402 * 3.1415927410125732421875) * (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0)))) / ((_3424 * _3424) * ((_3367 * 2.1991131305694580078125) + 3.141590118408203125))) * _3356;
                        _3204 = (_3371 * _3319.x) + _3277;
                        _3205 = (_3371 * _3319.y) + _3278;
                        _3206 = (_3371 * _3319.z) + _3279;
                        _3201 = (_3452 * _3336.x) + _3274;
                        _3202 = (_3452 * _3336.y) + _3275;
                        _3203 = (_3452 * _3336.z) + _3276;
                        if (_3281 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3274 = _3201;
                            _3275 = _3202;
                            _3276 = _3203;
                            _3277 = _3204;
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3281;
                        }
                    }
                    frontier_phi_66_pred = _3201;
                    frontier_phi_66_pred_1 = _3206;
                    frontier_phi_66_pred_2 = _3205;
                    frontier_phi_66_pred_3 = _3204;
                    frontier_phi_66_pred_4 = _3203;
                    frontier_phi_66_pred_5 = _3202;
                }
                _2977 = frontier_phi_66_pred;
                _2987 = frontier_phi_66_pred_1;
                _2985 = frontier_phi_66_pred_2;
                _2983 = frontier_phi_66_pred_3;
                _2981 = frontier_phi_66_pred_4;
                _2979 = frontier_phi_66_pred_5;
                uint _3136 = _3135 + 1u;
                if (_3136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3129 = _2977;
                    _3130 = _2979;
                    _3131 = _2981;
                    _3132 = _2983;
                    _3133 = _2985;
                    _3134 = _2987;
                    _3135 = _3136;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
            _2986 = _2987;
        }
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.z;
        uint _2993 = (_2991 >> 8u) & 15u;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        if (((4294967295u << _2993) & _2875) == 0u)
        {
            _3097 = _2976;
            _3099 = _2978;
            _3101 = _2980;
            _3103 = _2982;
            _3105 = _2984;
            _3107 = _2986;
        }
        else
        {
            float _3122 = inversesqrt(dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831)));
            float _3123 = _3122 * _2829;
            float _3124 = _3122 * _2830;
            float _3125 = _3122 * _2831;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2993 < ((_2991 >> 12u) & 15u))
            {
                float _3098;
                float _3100;
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3257 = _2976;
                float _3258 = _2978;
                float _3259 = _2980;
                float _3260 = _2982;
                float _3261 = _2984;
                float _3262 = _2986;
                uint _3263 = _2993;
                uint _3272;
                bool _3273;
                for (;;)
                {
                    _3272 = texelFetch(g_lightClassification, int((((_2869 << 5u) + (_2855 << 9u)) + (_3263 << 2u)) >> 2u)).x;
                    _3273 = _3272 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3273)
                    {
                        frontier_phi_77_pred = _3262;
                        frontier_phi_77_pred_1 = _3261;
                        frontier_phi_77_pred_2 = _3260;
                        frontier_phi_77_pred_3 = _3259;
                        frontier_phi_77_pred_4 = _3258;
                        frontier_phi_77_pred_5 = _3257;
                    }
                    else
                    {
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3759;
                        float _3760;
                        float _3761;
                        float _3762;
                        float _3763;
                        float _3764;
                        float _3479 = _3257;
                        float _3480 = _3258;
                        float _3481 = _3259;
                        float _3482 = _3260;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        uint _3485 = _3272;
                        uint _3486;
                        vec4 _3511;
                        float _3512;
                        vec4 _3527;
                        vec3 _3539;
                        vec4 _3554;
                        vec4 _3569;
                        float _3615;
                        bool _3616;
                        for (;;)
                        {
                            uint _3496 = ((_3263 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3485));
                            _3486 = (_3485 + 4294967295u) & _3485;
                            uint _3498 = _3496 * 40u;
                            _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3512 = _3511.w;
                            uint _3514 = (_3496 * 40u) + 4u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3529 = (_3496 * 40u) + 8u;
                            _3539 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x));
                            uint _3541 = (_3496 * 40u) + 16u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3496 * 40u) + 20u;
                            _3569 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 3u)).x));
                            uint _3571 = (_3496 * 40u) + 24u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            uint _3590 = (_3496 * 40u) + 28u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3615 = fma(_2831, _3603.z, fma(_2830, _3603.y, _3603.x * _2829)) + _3603.w;
                            _3616 = !((fma(_2831, _3584.z, fma(_2830, _3584.y, _3584.x * _2829)) + _3584.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3616)
                            {
                                float _3643 = _3511.x - _2829;
                                float _3644 = _3511.y - _2830;
                                float _3645 = _3511.z - _2831;
                                float _3646 = dot(vec3(_3643, _3644, _3645), vec3(_3643, _3644, _3645));
                                float _3649 = inversesqrt(_3646);
                                float _3650 = _3649 * _3643;
                                float _3651 = _3649 * _3644;
                                float _3652 = _3649 * _3645;
                                float _3656 = 1.0 - (_3646 / (_3512 * _3512));
                                float _4827 = isnan(0.0) ? _3656 : (isnan(_3656) ? 0.0 : max(_3656, 0.0));
                                float _3657 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3661 = sqrt(_3646) * _3527.w;
                                float _3663 = 1.39999997615814208984375 / (_3661 + 1.39999997615814208984375);
                                float _3664 = _3663 * _3663;
                                float _3667 = ((1.0 - _3664) * dot(vec3(_3650, _3651, _3652), vec3(_1040, _1043, _1046))) + _3664;
                                float _3670 = _3661 * _3661;
                                float _3674 = (fma(_2831, _3554.z, fma(_2830, _3554.y, _3554.x * _2829)) + _3554.w) / _3615;
                                float _3675 = (fma(_2831, _3569.z, fma(_2830, _3569.y, _3569.x * _2829)) + _3569.w) / _3615;
                                float _3679 = 1.0 - dot(vec2(_3674, _3675), vec2(_3674, _3675));
                                float _4843 = isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0));
                                float _3680 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3681 = _3680 * (((isnan(0.0) ? _3667 : (isnan(_3667) ? 0.0 : max(_3667, 0.0))) * _3657) / ((_3670 * 0.699999988079071044921875) + 1.0));
                                float _3693 = exp2(log2(1.0 / ((_3670 * 3.5) + 5.0)) * 0.25);
                                float _3694 = 1.0 - _1115;
                                float _3701 = sqrt(1.0 - ((1.0 - (_3694 * _3694)) * (1.0 - (_3693 * _3693))));
                                float _3702 = _3701 * _3701;
                                float _3703 = _3702 * _3702;
                                float _3704 = _3650 - _3123;
                                float _3705 = _3651 - _3124;
                                float _3706 = _3652 - _3125;
                                float _3710 = inversesqrt(dot(vec3(_3704, _3705, _3706), vec3(_3704, _3705, _3706)));
                                float _3714 = dot(vec3(_1040, _1043, _1046), vec3((-0.0) - _3123, (-0.0) - _3124, (-0.0) - _3125));
                                float _4854 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3717 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3718 = dot(vec3(_1040, _1043, _1046), vec3(_3710 * _3704, _3710 * _3705, _3710 * _3706));
                                float _4865 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                                float _3721 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3725 = ((_3721 * _3721) * (_3703 + (-1.0))) + 1.0;
                                float _3726 = _3663 * _3702;
                                float _3727 = _3726 * _3726;
                                float _3733 = ((1.0 - _3727) * dot(vec3(_1040, _1043, _1046), vec3(_3650, _3651, _3652))) + _3727;
                                float _4876 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3734 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
                                float _3735 = 1.0 - _3702;
                                float _3745 = (0.5 / (((_3734 * ((_3717 * _3735) + _3702)) + 9.9999999392252902907785028219223e-09) + (((_3734 * _3735) + _3702) * _3717))) * _3734;
                                float _4887 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3755 = (_3680 * _3657) * (((_3703 * 3.1415927410125732421875) * (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) / ((_3725 * _3725) * ((_3670 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3681 * _3527.y;
                                frontier_phi_83_pred_1 = _3681 * _3527.x;
                                frontier_phi_83_pred_2 = _3755 * _3539.z;
                                frontier_phi_83_pred_3 = _3755 * _3539.y;
                                frontier_phi_83_pred_4 = _3755 * _3539.x;
                                frontier_phi_83_pred_5 = _3681 * _3527.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3763 = frontier_phi_83_pred;
                            _3762 = frontier_phi_83_pred_1;
                            _3761 = frontier_phi_83_pred_2;
                            _3760 = frontier_phi_83_pred_3;
                            _3759 = frontier_phi_83_pred_4;
                            _3764 = frontier_phi_83_pred_5;
                            _3469 = _3762 + _3482;
                            _3470 = _3763 + _3483;
                            _3471 = _3764 + _3484;
                            _3466 = _3759 + _3479;
                            _3467 = _3760 + _3480;
                            _3468 = _3761 + _3481;
                            if (_3486 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3479 = _3466;
                                _3480 = _3467;
                                _3481 = _3468;
                                _3482 = _3469;
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3486;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3471;
                        frontier_phi_77_pred_1 = _3470;
                        frontier_phi_77_pred_2 = _3469;
                        frontier_phi_77_pred_3 = _3468;
                        frontier_phi_77_pred_4 = _3467;
                        frontier_phi_77_pred_5 = _3466;
                    }
                    _3108 = frontier_phi_77_pred;
                    _3106 = frontier_phi_77_pred_1;
                    _3104 = frontier_phi_77_pred_2;
                    _3102 = frontier_phi_77_pred_3;
                    _3100 = frontier_phi_77_pred_4;
                    _3098 = frontier_phi_77_pred_5;
                    uint _3264 = _3263 + 1u;
                    if (_3264 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3257 = _3098;
                        _3258 = _3100;
                        _3259 = _3102;
                        _3260 = _3104;
                        _3261 = _3106;
                        _3262 = _3108;
                        _3263 = _3264;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3102;
                frontier_phi_58_59_ladder_1 = _3108;
                frontier_phi_58_59_ladder_2 = _3106;
                frontier_phi_58_59_ladder_3 = _3104;
                frontier_phi_58_59_ladder_4 = _3100;
                frontier_phi_58_59_ladder_5 = _3098;
            }
            else
            {
                frontier_phi_58_59_ladder = _2980;
                frontier_phi_58_59_ladder_1 = _2986;
                frontier_phi_58_59_ladder_2 = _2984;
                frontier_phi_58_59_ladder_3 = _2982;
                frontier_phi_58_59_ladder_4 = _2978;
                frontier_phi_58_59_ladder_5 = _2976;
            }
            _3097 = frontier_phi_58_59_ladder_5;
            _3099 = frontier_phi_58_59_ladder_4;
            _3101 = frontier_phi_58_59_ladder;
            _3103 = frontier_phi_58_59_ladder_3;
            _3105 = frontier_phi_58_59_ladder_2;
            _3107 = frontier_phi_58_59_ladder_1;
        }
        float _3112 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
        _2888 = (_3112 * _3103) + _2321;
        _2890 = (_3112 * _3105) + _2323;
        _2892 = (_3112 * _3107) + _2325;
        _2894 = ((_3097 * _1083) * _3112) + _2669;
        _2896 = ((_3099 * _1085) * _3112) + _2671;
        _2898 = ((_3101 * _1086) * _3112) + _2673;
    }
    else
    {
        _2888 = _2321;
        _2890 = _2323;
        _2892 = _2325;
        _2894 = _2669;
        _2896 = _2671;
        _2898 = _2673;
    }
    float _4903 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _4914 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _4925 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _2915 = ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2888 + ((isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) * _1099))) + ((_2894 + ((isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2916 = ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2890 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1099))) + ((_2896 + ((isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    float _2917 = ((isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2892 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1099))) + ((_2898 + ((isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0))) * _1937)) * cbPerFrame._m0[3u].x);
    uint _2918 = _291 + 6u;
    float _2926 = _1021 / cbSceneParam._m0[86u].x;
    float _2927 = _1022 / cbSceneParam._m0[86u].y;
    vec4 _2941 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, (log2((isnan(cbSceneParam._m0[77u].w) ? _944 : (isnan(_944) ? cbSceneParam._m0[77u].w : min(_944, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2943 = _2941.x;
    float _2944 = _2941.y;
    float _2945 = _2941.z;
    float _2946 = _2941.w;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_944 > cbSceneParam._m0[78u].w)
    {
        float _3001 = isnan(_944) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _944 : min(cbSceneParam._m0[80u].w, _944));
        float _3002 = _3001 / _944;
        float _3013 = _3002 * _994;
        float _3014 = _995 * _3002;
        float _3015 = (-0.0) - _3014;
        float _3017 = _3002 * _996;
        float _3019 = (cbSceneParam._m0[77u].w * _3015) / _3001;
        float _3020 = _3019 + cbSceneParam._m0[79u].w;
        float _3021 = cbSceneParam._m0[79u].w - _3014;
        float _3027 = sqrt(((_3013 * _3013) + (_3014 * _3014)) + (_3017 * _3017));
        float _3030 = (1.0 - (cbSceneParam._m0[77u].w / _3001)) * _3027;
        float _3035 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3037 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3214;
        if (abs((_3015 - _3019) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3214 = ((((_3020 > 0.0) ? exp2(_3035 * _3020) : (2.0 - exp2(_3037 * _3020))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3030;
        }
        else
        {
            float _3158 = 1.0 / cbSceneParam._m0[80u].x;
            float _3159 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : max(_3020, _3021));
            float _3160 = isnan(_3021) ? _3020 : (isnan(_3020) ? _3021 : min(_3020, _3021));
            float _3169 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : min(_3159, 0.0));
            float _3170 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : min(_3160, 0.0));
            _3214 = ((abs(_3027 / _3015) * cbSceneParam._m0[80u].y) * ((((_3169 - _3170) * 2.0) - ((exp2(_3035 * (isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0)))) - exp2(_3035 * (isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0))))) * _3158)) - ((exp2(_3037 * _3169) - exp2(_3037 * _3170)) * _3158))) + (_3030 * cbSceneParam._m0[80u].z);
        }
        vec4 _3216 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2926, _2927, 1.0), 0.0);
        float _3225 = exp2((_3214 * (-1.44269502162933349609375)) * (1.0 - _3216.w));
        float _3226 = log2(_3225);
        float _3242 = log2(_2946);
        _3039 = (exp2(_3242 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].x)) * _3216.x) / cbSceneParam._m0[78u].x)) + _2943;
        _3041 = (exp2(_3242 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].y)) * _3216.y) / cbSceneParam._m0[78u].y)) + _2944;
        _3043 = (exp2(_3242 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3226 * cbSceneParam._m0[78u].z)) * _3216.z) / cbSceneParam._m0[78u].z)) + _2945;
        _3045 = _3225 * _2946;
    }
    else
    {
        _3039 = _2943;
        _3041 = _2944;
        _3043 = _2945;
        _3045 = _2946;
    }
    bool _3252;
    vec4 _3055;
    vec4 _3077;
    float _3079;
    float _3083;
    float _3084;
    float _3085;
    float _3086;
    bool _3096;
    for (;;)
    {
        _3055 = cbMatDynParam._m0[0u];
        float _3057 = roundEven(_3055.y);
        bool _3058 = _3057 == 3.0;
        float _3059 = log2(_3045);
        float _3066 = exp2(_3059 * cbSceneParam._m0[78u].x) * _2915;
        float _3067 = exp2(_3059 * cbSceneParam._m0[78u].y) * _2916;
        float _3068 = exp2(_3059 * cbSceneParam._m0[78u].z) * _2917;
        float _3075 = _1010 + (-0.5);
        _3077 = cbMtdParam._m0[1u];
        _3079 = _3077.y * _3075;
        float _3082 = (_3057 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3083 = _3082 * (_3058 ? _3066 : (_3066 + (cbSceneParam._m0[72u].w * _3039)));
        _3084 = _3082 * (_3058 ? _3067 : (_3067 + (cbSceneParam._m0[72u].w * _3041)));
        _3085 = _3082 * (_3058 ? _3068 : (_3068 + (cbSceneParam._m0[72u].w * _3043)));
        _3086 = _3075 * 0.999000012874603271484375;
        _3096 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3096)
        {
            if ((cbInstanceData._m0[_291 + 7u].x + _3086) < 0.5)
            {
                _3252 = true;
                break;
            }
        }
        uint _3193 = _1059 + uint(_3055.w);
        if ((cbInstanceData._m0[_3193].w < 1.0) && ((cbInstanceData._m0[_3193].w + _3086) < 0.5))
        {
            _3252 = true;
            break;
        }
        if ((_3079 + 1.0) < _3077.x)
        {
            _3252 = true;
            break;
        }
        _3252 = false;
        break;
    }
    float _3457;
    if (_3252)
    {
        discard_state = true;
        _3457 = 0.0;
    }
    else
    {
        _3457 = cbInstanceData._m0[_2918].w;
    }
    SV_Target.x = _3083;
    SV_Target.y = _3084;
    SV_Target.z = _3085;
    SV_Target.w = _3457;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2918].w;
    discard_exit();
}


