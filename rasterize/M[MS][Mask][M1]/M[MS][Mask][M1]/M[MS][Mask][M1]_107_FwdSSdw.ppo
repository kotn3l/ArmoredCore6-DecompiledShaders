#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 17) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_27;
layout(set = 0, binding = 19) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_29;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1485;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _270 = _265 + 1u;
    uint _274 = _265 + 2u;
    float _283 = sqrt(((cbInstanceData._m0[_270].x * cbInstanceData._m0[_270].x) + (cbInstanceData._m0[_265].x * cbInstanceData._m0[_265].x)) + (cbInstanceData._m0[_274].x * cbInstanceData._m0[_274].x));
    float _284 = _283 * TEXCOORD.z;
    float _285 = _283 * TEXCOORD.w;
    vec4 _304 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _328 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _333 = _328.x * cbMtdParam._m0[11u].x;
    float _334 = _328.y * cbMtdParam._m0[11u].y;
    float _335 = _328.z * cbMtdParam._m0[11u].z;
    vec4 _354 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _284) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _285) + cbTextureTilingScale._m0[5u].w));
    vec4 _373 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _412 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _414 = _412.x;
    float _426 = dot(vec4(_414, _412.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _443 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _373.x) * 2.0) - ((((_414 - _426) * cbMtdParam._m0[23u].w) + _426) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3834 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _444 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _451 = (_444 * ((_354.x * cbMtdParam._m0[12u].x) - _333)) + _333;
    float _452 = (_444 * ((_354.y * cbMtdParam._m0[12u].y) - _334)) + _334;
    float _453 = (_444 * ((_354.z * cbMtdParam._m0[12u].z) - _335)) + _335;
    vec4 _470 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _284) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _285) + cbTextureTilingScale._m0[3u].w));
    vec4 _490 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _492 = _490.x;
    float _502 = dot(vec4(_492, _490.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _516 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _373.y) * 2.0) - ((((_492 - _502) * cbMtdParam._m0[23u].w) + _502) * cbMtdParam._m0[20u].w))) + 1.0;
    float _3845 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _517 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _524 = (_517 * ((_470.x * cbMtdParam._m0[13u].x) - _451)) + _451;
    float _525 = (_517 * ((_470.y * cbMtdParam._m0[13u].y) - _452)) + _452;
    float _526 = (_517 * ((_470.z * cbMtdParam._m0[13u].z) - _453)) + _453;
    vec4 _545 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _284) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _285) + cbTextureTilingScale._m0[24u].w));
    vec4 _562 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _564 = _562.x;
    float _574 = dot(vec4(_564, _562.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _586 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _373.z) * 2.0) - ((((_564 - _574) * cbMtdParam._m0[23u].w) + _574) * cbMtdParam._m0[20u].z))) + 1.0;
    float _3856 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _587 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    float _600 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _304.x) * ((_587 * ((_545.x * cbMtdParam._m0[14u].x) - _524)) + _524);
    float _603 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _304.y) * ((_587 * ((_545.y * cbMtdParam._m0[14u].y) - _525)) + _525);
    float _606 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _304.z) * ((_587 * ((_545.z * cbMtdParam._m0[14u].z) - _526)) + _526);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _284) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _285) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _444) + _638;
    float _648 = ((_619.y - _639) * _444) + _639;
    float _649 = ((_619.z - _640) * _444) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _284) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _285) + cbTextureTilingScale._m0[2u].w));
    float _672 = ((_661.x - _647) * _517) + _647;
    float _673 = ((_661.y - _648) * _517) + _648;
    float _674 = ((_661.z - _649) * _517) + _649;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _284) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _285) + cbTextureTilingScale._m0[23u].w));
    float _699 = ((_686.z - _674) * _587) + _674;
    float _702 = ((((_686.x - _672) * _587) + _672) * 2.0) + (-1.0);
    float _704 = ((((_686.y - _673) * _587) + _673) * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _3867 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _736 = (((_724.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _737 = (((_724.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_29, SS_WrapLinear), vec2((cbTextureTilingScale._m0[19u].x * _284) + cbTextureTilingScale._m0[19u].z, (cbTextureTilingScale._m0[19u].y * _285) + cbTextureTilingScale._m0[19u].w));
    float _751 = _749.x;
    float _752 = 1.0 - _751;
    float _780 = (TEXCOORD_8.x - ((cbMtdParam._m0[24u].y * (1.0 - TEXCOORD_8.x)) * ((((_751 - _752) * cbMtdParam._m0[24u].w) + _752) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[23u].y + 1.0);
    float _3878 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _789 = ((((cbMtdParam._m0[10u].x - _600) * TEXCOORD_8.x) * cbMtdParam._m0[23u].z) * _781) + _600;
    float _790 = ((((cbMtdParam._m0[10u].y - _603) * TEXCOORD_8.y) * cbMtdParam._m0[23u].z) * _781) + _603;
    float _791 = (((cbMtdParam._m0[23u].z * TEXCOORD_8.z) * (cbMtdParam._m0[10u].z - _606)) * _781) + _606;
    vec4 _817 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _819 = _817.x;
    float _836 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _284) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _285) + cbTextureTilingScale._m0[9u].w)).x - _819) * _444) + _819;
    float _854 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _284) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _285) + cbTextureTilingScale._m0[21u].w)).x - _836) * _517) + _836;
    float _871 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _284) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _285) + cbTextureTilingScale._m0[10u].w)).x - _854) * _587) + _854;
    float _875 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _871) * cbMtdParam._m0[19u].z) + _871;
    float _877 = _875 - (_875 * _781);
    float _881 = (cbMtdParam._m0[19u].w * (_724.z - _699)) + _699;
    float _885 = ((cbMtdParam._m0[23u].x - _881) * _781) + _881;
    vec4 _904 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_27, SS_BumpMap), vec2((((cbMtdParam._m0[27u].y * cbPerFrame._m0[22u].x) + _284) * cbTextureTilingScale._m0[17u].x) + cbTextureTilingScale._m0[17u].z, (((cbMtdParam._m0[27u].z * cbPerFrame._m0[22u].x) + _285) * cbTextureTilingScale._m0[17u].y) + cbTextureTilingScale._m0[17u].w));
    float _910 = (_904.x * 2.0) + (-1.0);
    float _911 = (_904.y * 2.0) + (-1.0);
    float _912 = dot(vec2(_910, _911), vec2(_910, _911));
    float _3889 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _928 = (_781 * (((cbMtdParam._m0[22u].z * _736) - _736) + _910)) + _736;
    float _929 = (_781 * (((cbMtdParam._m0[22u].z * _737) - _737) + _911)) + _737;
    float _930 = (_781 * (sqrt(1.0 - (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) - _710)) + _710;
    float _932 = cbMtdParam._m0[22u].x + _724.w;
    float _935 = fma(_930, _252 * NORMAL.x, fma(_929, _259 * TANGENT.x, (_245 * _237) * _928));
    float _938 = fma(_930, _252 * NORMAL.y, fma(_929, _259 * TANGENT.y, (_245 * _238) * _928));
    float _941 = fma(_930, _252 * NORMAL.z, fma(_929, _259 * TANGENT.z, (_245 * _239) * _928));
    float _945 = inversesqrt(dot(vec3(_935, _938, _941), vec3(_935, _938, _941)));
    float _946 = _945 * _935;
    float _947 = _945 * _938;
    float _948 = _945 * _941;
    float _3900 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _949 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _3922 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3933 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _3944 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _3955 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _954 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _968 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1018 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1008);
    float _1019 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1008);
    float _1020 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1008);
    float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
    float _1025 = _1018 * _1024;
    float _1026 = _1019 * _1024;
    float _1027 = _1020 * _1024;
    float _1033 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1034 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1052 = fma(_948, cbSceneParam._m0[5u].z, fma(_947, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _946));
    float _1055 = fma(_948, cbSceneParam._m0[6u].z, fma(_947, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _946));
    float _1058 = fma(_948, cbSceneParam._m0[7u].z, fma(_947, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _946));
    uint _1072 = (_265 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1078 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * cbInstanceData._m0[_1072].x;
    float _1079 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * cbInstanceData._m0[_1072].y;
    float _1080 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) * cbInstanceData._m0[_1072].z;
    float _3966 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1081 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _3977 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
    float _1082 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
    float _1083 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1084 = 1.0 - _954;
    float _1085 = _1081 * _1084;
    float _1086 = _1082 * _1084;
    float _1087 = _1083 * _1084;
    float _1092 = (_1081 + (-0.039999999105930328369140625)) * _954;
    float _1093 = (_1082 + (-0.039999999105930328369140625)) * _954;
    float _1094 = (_1083 + (-0.039999999105930328369140625)) * _954;
    float _1095 = _1092 + 0.039999999105930328369140625;
    float _1097 = _1093 + 0.039999999105930328369140625;
    float _1098 = _1094 + 0.039999999105930328369140625;
    vec4 _1107 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1033, cbSceneParam._m0[86u].y * _1034));
    float _1111 = ((isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * TEXCOORD_5.w) * _1107.x;
    float _1112 = dot(vec3(_946, _947, _948), vec3(_1025, _1026, _1027));
    float _1115 = _1112 * 2.0;
    float _1119 = (_1115 * _946) - _1025;
    float _1120 = (_1115 * _947) - _1026;
    float _1121 = (_1115 * _948) - _1027;
    float _1125 = abs(dot(vec3(_1025, _1026, _1027), vec3(_946, _947, _948)));
    float _3999 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1127 = sqrt(_949);
    float _1140 = exp2((_1127 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1127 * 3.0));
    float _1146 = (1.0 - _1140) * ((_1127 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1147 = _1140 * _1127;
    float _1175 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1179 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1183 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1484;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1209 = fma(_1183, cbModelParam._m0[26u].z, fma(_1179, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1175));
        float _1213 = fma(_1183, cbModelParam._m0[27u].z, fma(_1179, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1175));
        float _1217 = fma(_1183, cbModelParam._m0[28u].z, fma(_1179, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1175));
        float _1242 = _1175 + _946;
        float _1243 = _1179 + _947;
        float _1244 = _1183 + _948;
        float _1254 = fma(_1244, cbModelParam._m0[26u].z, fma(_1243, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1242)) - _1209;
        float _1255 = fma(_1244, cbModelParam._m0[27u].z, fma(_1243, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1242)) - _1213;
        float _1256 = fma(_1244, cbModelParam._m0[28u].z, fma(_1243, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1242)) - _1217;
        float _1260 = inversesqrt(dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256)));
        float _1273 = ((_1260 * _1254) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1209 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1274 = ((_1260 * _1255) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1213 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1260 * _1256) / cbModelParam._m0[34u].z) + ((((((_1217 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1273, _1274, _1275), 0.0);
        float _1312 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1278.x + (-0.5));
        float _1314 = _1312 * (_1278.y + (-0.5));
        float _1315 = _1312 * (_1278.z + (-0.5));
        float _1322 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1285.x + (-0.5));
        float _1324 = _1322 * (_1285.y + (-0.5));
        float _1325 = _1322 * (_1285.z + (-0.5));
        float _1332 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1292.x + (-0.5));
        float _1334 = _1332 * (_1292.y + (-0.5));
        float _1335 = _1332 * (_1292.z + (-0.5));
        float _1342 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1299.x + (-0.5));
        float _1344 = _1342 * (_1299.y + (-0.5));
        float _1345 = _1342 * (_1299.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1366 = (dot(vec3(_946, _947, _948), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1376 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4047 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1378 + 1.0))) + _1383) * _1346;
        float _1393 = _1314 * 0.5;
        float _1394 = _1324 * 0.5;
        float _1395 = _1334 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_946, _947, _948), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _4080 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1420 + 1.0))) + _1425) * _1347;
        float _1435 = _1315 * 0.5;
        float _1436 = _1325 * 0.5;
        float _1437 = _1335 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_946, _947, _948), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _4113 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1462 + 1.0))) + _1467) * _1348;
        _1484 = _1315;
        _1486 = _1314;
        _1487 = _1313;
        _1488 = _1325;
        _1489 = _1324;
        _1490 = _1323;
        _1491 = _1335;
        _1492 = _1334;
        _1493 = _1333;
        _1494 = _1348;
        _1495 = _1347;
        _1496 = _1346;
        _1497 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1498 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1499 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1485;
        _1486 = _1485;
        _1487 = _1485;
        _1488 = _1485;
        _1489 = _1485;
        _1490 = _1485;
        _1491 = _1485;
        _1492 = _1485;
        _1493 = _1485;
        _1494 = _1485;
        _1495 = _1485;
        _1496 = _1485;
        _1497 = 0.0;
        _1498 = 0.0;
        _1499 = 0.0;
    }
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    float _1797;
    float _1798;
    float _1799;
    float _1800;
    float _1801;
    float _1802;
    float _1803;
    float _1804;
    float _1805;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1522 = fma(_1183, cbModelParam._m0[30u].z, fma(_1179, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1175));
        float _1526 = fma(_1183, cbModelParam._m0[31u].z, fma(_1179, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1175));
        float _1530 = fma(_1183, cbModelParam._m0[32u].z, fma(_1179, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1175));
        float _1553 = _1175 + _946;
        float _1554 = _1179 + _947;
        float _1555 = _1183 + _948;
        float _1565 = fma(_1555, cbModelParam._m0[30u].z, fma(_1554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1553)) - _1522;
        float _1566 = fma(_1555, cbModelParam._m0[31u].z, fma(_1554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1553)) - _1526;
        float _1567 = fma(_1555, cbModelParam._m0[32u].z, fma(_1554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1553)) - _1530;
        float _1571 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
        float _1584 = ((_1571 * _1565) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1522 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1585 = ((_1571 * _1566) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1526 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1586 = ((_1571 * _1567) / cbModelParam._m0[35u].z) + ((((((_1530 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1588 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1595 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1602 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        vec4 _1609 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1584, _1585, _1586), 0.0);
        float _1621 = exp2((_1588.w + (-0.5)) * 20.0) * 2.0;
        float _1622 = _1621 * (_1588.x + (-0.5));
        float _1623 = _1621 * (_1588.y + (-0.5));
        float _1624 = _1621 * (_1588.z + (-0.5));
        float _1631 = exp2((_1595.w + (-0.5)) * 20.0) * 2.0;
        float _1632 = _1631 * (_1595.x + (-0.5));
        float _1633 = _1631 * (_1595.y + (-0.5));
        float _1634 = _1631 * (_1595.z + (-0.5));
        float _1641 = exp2((_1602.w + (-0.5)) * 20.0) * 2.0;
        float _1642 = _1641 * (_1602.x + (-0.5));
        float _1643 = _1641 * (_1602.y + (-0.5));
        float _1644 = _1641 * (_1602.z + (-0.5));
        float _1651 = exp2((_1609.w + (-0.5)) * 20.0) * 2.0;
        float _1652 = _1651 * (_1609.x + (-0.5));
        float _1653 = _1651 * (_1609.y + (-0.5));
        float _1654 = _1651 * (_1609.z + (-0.5));
        float _1655 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0));
        float _1656 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1657 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1658 = _1622 * 0.5;
        float _1659 = _1632 * 0.5;
        float _1660 = _1642 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_946, _947, _948), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1655 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4176 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1685 + 1.0))) + _1690) * _1655;
        float _1700 = _1623 * 0.5;
        float _1701 = _1633 * 0.5;
        float _1702 = _1643 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_946, _947, _948), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4187 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1656 + 9.9999997473787516355514526367188e-06);
        float _4198 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4209 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_1727 + 1.0))) + _1732) * _1656;
        float _1742 = _1624 * 0.5;
        float _1743 = _1634 * 0.5;
        float _1744 = _1644 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_946, _947, _948), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4220 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1657 + 9.9999997473787516355514526367188e-06);
        float _4231 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4242 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0))) * (_1769 + 1.0))) + _1774) * _1657;
        _1791 = _1624;
        _1792 = _1623;
        _1793 = _1622;
        _1794 = _1634;
        _1795 = _1633;
        _1796 = _1632;
        _1797 = _1644;
        _1798 = _1643;
        _1799 = _1642;
        _1800 = _1657;
        _1801 = _1656;
        _1802 = _1655;
        _1803 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1804 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
        _1805 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
    }
    else
    {
        _1791 = _1485;
        _1792 = _1485;
        _1793 = _1485;
        _1794 = _1485;
        _1795 = _1485;
        _1796 = _1485;
        _1797 = _1485;
        _1798 = _1485;
        _1799 = _1485;
        _1800 = _1485;
        _1801 = _1485;
        _1802 = _1485;
        _1803 = 0.0;
        _1804 = 0.0;
        _1805 = 0.0;
    }
    float _1815 = (cbModelParam._m0[1u].x * (_1803 - _1497)) + _1497;
    float _1816 = (cbModelParam._m0[1u].x * (_1804 - _1498)) + _1498;
    float _1817 = (cbModelParam._m0[1u].x * (_1805 - _1499)) + _1499;
    float _1838 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1841 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1844 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1815));
    float _1859 = _1119 * 0.5;
    float _1860 = _1120 * 0.5;
    float _1861 = _1121 * 0.5;
    float _1862 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1793, _1796, _1799, _1802));
    float _1865 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1792, _1795, _1798, _1801));
    float _1868 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1791, _1794, _1797, _1800));
    float _1902;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1875 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1484, _1488, _1491, _1494));
        float _1879 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1486, _1489, _1492, _1495));
        float _1883 = dot(vec4(_1859, _1860, _1861, 1.0), vec4(_1487, _1490, _1493, _1496));
        float _1890 = dot(vec4(cbModelParam._m0[39u]), vec4(_1859, _1860, _1861, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0)), isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0)), isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1890) ? 0.0 : (isnan(0.0) ? _1890 : max(0.0, _1890))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1913;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1904 = dot(vec4(cbModelParam._m0[40u]), vec4(_1859, _1860, _1861, 1.0));
        _1913 = dot(vec3(isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1904) ? 0.0 : (isnan(0.0) ? _1904 : max(0.0, _1904))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1913 = 1.0;
    }
    float _1917 = (_1913 * cbModelParam._m0[1u].x) + (_1902 * (1.0 - cbModelParam._m0[1u].x));
    float _1927 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _949);
    float _1928 = isnan(_1927) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1927 : min(cbModelParam._m0[25u].z, _1927));
    float _2009;
    float _2011;
    float _2013;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1976 = fma(_1183, cbModelParam._m0[13u].z, fma(_1179, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175)) + cbModelParam._m0[13u].w;
        float _1980 = fma(_1183, cbModelParam._m0[14u].z, fma(_1179, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175)) + cbModelParam._m0[14u].w;
        float _1984 = fma(_1183, cbModelParam._m0[15u].z, fma(_1179, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175)) + cbModelParam._m0[15u].w;
        float _1987 = fma(_1121, cbModelParam._m0[13u].z, fma(_1120, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119));
        float _1990 = fma(_1121, cbModelParam._m0[14u].z, fma(_1120, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119));
        float _1993 = fma(_1121, cbModelParam._m0[15u].z, fma(_1120, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119));
        float _2021;
        if (_1987 > 0.0)
        {
            _2021 = abs((1.0 - _1976) / _1987);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1987 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1976 + 1.0) / _1987);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2021 = frontier_phi_14_12_ladder;
        }
        float _2245;
        if (_1990 > 0.0)
        {
            _2245 = abs((1.0 - _1980) / _1990);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1990 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1980 + 1.0) / _1990);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2245 = frontier_phi_23_19_ladder;
        }
        float _2502;
        if (_1993 > 0.0)
        {
            _2502 = abs((1.0 - _1984) / _1993);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1993 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1984 + 1.0) / _1993);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2502 = frontier_phi_35_30_ladder;
        }
        float _2504 = isnan(_2245) ? _2021 : (isnan(_2021) ? _2245 : min(_2021, _2245));
        float _2505 = isnan(_2502) ? _2504 : (isnan(_2504) ? _2502 : min(_2504, _2502));
        float _2509 = (_2505 * _1987) + _1976;
        float _2510 = (_2505 * _1990) + _1980;
        float _2511 = (_2505 * _1993) + _1984;
        float _2512 = _2505 * 9.9999997473787516355514526367188e-05;
        float _2514 = (-1.0) - _2512;
        float _2516 = _2512 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2511 > _2516) || ((_2511 < _2514) || ((_2510 > _2516) || ((_2510 < _2514) || ((_2509 < _2514) || (_2509 > _2516))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2511, cbModelParam._m0[9u].z, fma(_2510, cbModelParam._m0[9u].y, _2509 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2511, cbModelParam._m0[10u].z, fma(_2510, cbModelParam._m0[10u].y, _2509 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2511, cbModelParam._m0[11u].z, fma(_2510, cbModelParam._m0[11u].y, _2509 * cbModelParam._m0[11u].x))), _1928);
            frontier_phi_13_35_ladder = _2639.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2639.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2639.x * cbModelParam._m0[1u].y;
        }
        _2009 = frontier_phi_13_35_ladder_2;
        _2011 = frontier_phi_13_35_ladder_1;
        _2013 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1997 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1119, _1120, _1121), _1928);
        _2009 = _1997.x * cbModelParam._m0[1u].y;
        _2011 = _1997.y * cbModelParam._m0[1u].y;
        _2013 = _1997.z * cbModelParam._m0[1u].y;
    }
    float _2017 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _949);
    float _2018 = isnan(_2017) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2017 : min(cbModelParam._m0[25u].w, _2017));
    float _2108;
    float _2110;
    float _2112;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2072 = fma(_1183, cbModelParam._m0[21u].z, fma(_1179, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175)) + cbModelParam._m0[21u].w;
        float _2076 = fma(_1183, cbModelParam._m0[22u].z, fma(_1179, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175)) + cbModelParam._m0[22u].w;
        float _2080 = fma(_1183, cbModelParam._m0[23u].z, fma(_1179, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175)) + cbModelParam._m0[23u].w;
        float _2083 = fma(_1121, cbModelParam._m0[21u].z, fma(_1120, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119));
        float _2086 = fma(_1121, cbModelParam._m0[22u].z, fma(_1120, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119));
        float _2089 = fma(_1121, cbModelParam._m0[23u].z, fma(_1120, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119));
        float _2250;
        if (_2083 > 0.0)
        {
            _2250 = abs((1.0 - _2072) / _2083);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2083 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2072 + 1.0) / _2083);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2250 = frontier_phi_25_21_ladder;
        }
        float _2529;
        if (_2086 > 0.0)
        {
            _2529 = abs((1.0 - _2076) / _2086);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2086 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2076 + 1.0) / _2086);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2529 = frontier_phi_37_32_ladder;
        }
        float _2742;
        if (_2089 > 0.0)
        {
            _2742 = abs((1.0 - _2080) / _2089);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2089 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2080 + 1.0) / _2089);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2742 = frontier_phi_46_43_ladder;
        }
        float _2744 = isnan(_2529) ? _2250 : (isnan(_2250) ? _2529 : min(_2250, _2529));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _2083) + _2072;
        float _2750 = (_2745 * _2086) + _2076;
        float _2751 = (_2745 * _2089) + _2080;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2752;
        float _2755 = _2752 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2751 > _2755) || ((_2751 < _2753) || ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 < _2753) || (_2749 > _2755))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2751, cbModelParam._m0[17u].z, fma(_2750, cbModelParam._m0[17u].y, _2749 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2751, cbModelParam._m0[18u].z, fma(_2750, cbModelParam._m0[18u].y, _2749 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2751, cbModelParam._m0[19u].z, fma(_2750, cbModelParam._m0[19u].y, _2749 * cbModelParam._m0[19u].x))), _2018);
            frontier_phi_22_46_ladder = _2950.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2950.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2950.x * cbModelParam._m0[1u].z;
        }
        _2108 = frontier_phi_22_46_ladder_2;
        _2110 = frontier_phi_22_46_ladder_1;
        _2112 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1119, _1120, _1121), _2018);
        _2108 = _2092.x * cbModelParam._m0[1u].z;
        _2110 = _2092.y * cbModelParam._m0[1u].z;
        _2112 = _2092.z * cbModelParam._m0[1u].z;
    }
    float _2125 = (((_1146 * _1095) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2108 - _2009)) + _2009);
    float _2127 = (((_1146 * _1097) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2110 - _2011)) + _2011);
    float _2129 = (((_1146 * _1098) + _1147) * _1111) * ((cbModelParam._m0[1u].w * (_2112 - _2013)) + _2013);
    float _2132 = fma(_2129, cbSceneParam._m0[89u].z, fma(_2127, cbSceneParam._m0[89u].y, _2125 * cbSceneParam._m0[89u].x));
    float _2135 = fma(_2129, cbSceneParam._m0[90u].z, fma(_2127, cbSceneParam._m0[90u].y, _2125 * cbSceneParam._m0[90u].x));
    float _2138 = fma(_2129, cbSceneParam._m0[91u].z, fma(_2127, cbSceneParam._m0[91u].y, _2125 * cbSceneParam._m0[91u].x));
    vec4 _2146 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1033, _1034));
    float _2148 = _2146.w;
    float _2160 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2148);
    float _2161 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2148);
    float _2162 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2148);
    uvec4 _2166 = floatBitsToUint(cbInstanceData._m0[_265 + 5u]);
    uint _2168 = _2166.x * 14u;
    uint _2169 = _2168 + 13u;
    float _2176 = _1111 + (-1.0);
    float _2181 = (cbLight._m0[_2169].x * _2176) + 1.0;
    float _2182 = (cbLight._m0[_2169].y * _2176) + 1.0;
    float _2183 = (cbLight._m0[_2169].z * _2176) + 1.0;
    float _2184 = (cbLight._m0[_2169].w * _2176) + 1.0;
    uint _2185 = _2168 + 5u;
    float _2191 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
    uint _2195 = _2168 + 4u;
    float _2204 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
    uint _2208 = _2168 | 1u;
    float _2219 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_946, _947, _948));
    float _2222 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_946, _947, _948));
    float _4378 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _4389 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
    float _2227 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * 0.3183098733425140380859375;
    float _2229 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * 0.3183098733425140380859375;
    float _2236 = ((cbLight._m0[_2185].x * _2191) * _2229) + (((cbLight._m0[_2195].x * _2160) * _2204) * _2227);
    float _2237 = ((_2191 * cbLight._m0[_2185].y) * _2229) + (((cbLight._m0[_2195].y * _2161) * _2204) * _2227);
    float _2238 = ((_2191 * cbLight._m0[_2185].z) * _2229) + (((cbLight._m0[_2195].z * _2162) * _2204) * _2227);
    uvec4 _2242 = floatBitsToUint(cbLight._m0[_2168 + 12u]);
    bool _2244 = _2242.x == 0u;
    float _2255;
    float _2257;
    float _2259;
    if (_2244)
    {
        _2255 = _2236;
        _2257 = _2237;
        _2259 = _2238;
    }
    else
    {
        uint _2263 = _2168 + 6u;
        float _2279 = (dot(vec3(cbLight._m0[_2168 + 2u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2280 = _2279 * _2279;
        float _4400 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2281 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2282 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2255 = (((cbLight._m0[_2263].x * 0.3183098733425140380859375) * _2281) * _2282) + _2236;
        _2257 = (((cbLight._m0[_2263].y * 0.3183098733425140380859375) * _2281) * _2282) + _2237;
        _2259 = (((cbLight._m0[_2263].z * 0.3183098733425140380859375) * _2281) * _2282) + _2238;
    }
    bool _2262 = _2242.y == 0u;
    float _2300;
    float _2302;
    float _2304;
    if (_2262)
    {
        _2300 = _2255;
        _2302 = _2257;
        _2304 = _2259;
    }
    else
    {
        uint _2473 = _2168 + 7u;
        float _2489 = (dot(vec3(cbLight._m0[_2168 + 3u].xyz), vec3(_946, _947, _948)) * 0.5) + 0.5;
        float _2490 = _2489 * _2489;
        float _4416 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2491 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _2492 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2300 = (((cbLight._m0[_2473].x * 0.3183098733425140380859375) * _2491) * _2492) + _2255;
        _2302 = (((cbLight._m0[_2473].y * 0.3183098733425140380859375) * _2491) * _2492) + _2257;
        _2304 = (((cbLight._m0[_2473].z * 0.3183098733425140380859375) * _2491) * _2492) + _2259;
    }
    uint _2307 = _2168 + 8u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2168].w)) * _949) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2168].x + _1025;
    float _2323 = cbLight._m0[_2168].y + _1026;
    float _2324 = cbLight._m0[_2168].z + _1027;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2168].xyz));
    float _4432 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
    float _4443 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
    float _2336 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
    float _2337 = dot(vec3(_946, _947, _948), vec3(_2329, _2330, _2331));
    float _4454 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _2340 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
    float _2341 = dot(vec3(cbLight._m0[_2168].xyz), vec3(_2329, _2330, _2331));
    float _4465 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
    float _2345 = _2321 * _2321;
    float _2349 = ((_2340 * _2340) * (_2345 + (-1.0))) + 1.0;
    float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0)))) * 5.0);
    float _2358 = 0.959999978542327880859375 - _1092;
    float _2360 = 0.959999978542327880859375 - _1093;
    float _2361 = 0.959999978542327880859375 - _1094;
    float _2368 = 1.0 - _2321;
    float _2379 = (0.5 / (((_2336 * ((_2335 * _2368) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2368) + _2321) * _2335))) * _2335;
    float _4476 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2381 = (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0))) * (_2345 / ((_2349 * _2349) * 3.141590118408203125));
    uint _2395 = _2168 + 9u;
    float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2208].w)) * _949) * 0.949999988079071044921875);
    float _2407 = _2406 * _2406;
    float _2408 = cbLight._m0[_2208].x + _1025;
    float _2409 = cbLight._m0[_2208].y + _1026;
    float _2410 = cbLight._m0[_2208].z + _1027;
    float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
    float _2415 = _2414 * _2408;
    float _2416 = _2414 * _2409;
    float _2417 = _2414 * _2410;
    float _2418 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2208].xyz));
    float _4487 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
    float _2422 = dot(vec3(_946, _947, _948), vec3(_2415, _2416, _2417));
    float _4498 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2415, _2416, _2417));
    float _4509 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2407 * _2407;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0)))) * 5.0);
    float _2448 = 1.0 - _2407;
    float _2458 = (0.5 / (((_2336 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2448) + _2407) * _2421))) * _2421;
    float _4520 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _2460 = (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    float _2470 = (((((_2441 * _2358) + _1095) * cbLight._m0[_2395].x) * _2460) * _2191) + ((((cbLight._m0[_2307].x * _2160) * ((_2357 * _2358) + _1095)) * _2381) * _2204);
    float _2471 = (((((_2441 * _2360) + _1097) * cbLight._m0[_2395].y) * _2460) * _2191) + ((((cbLight._m0[_2307].y * _2161) * ((_2357 * _2360) + _1097)) * _2381) * _2204);
    float _2472 = (((((_2441 * _2361) + _1098) * cbLight._m0[_2395].z) * _2460) * _2191) + ((((cbLight._m0[_2307].z * _2162) * ((_2357 * _2361) + _1098)) * _2381) * _2204);
    float _2534;
    float _2536;
    float _2538;
    if (_2244)
    {
        _2534 = _2470;
        _2536 = _2471;
        _2538 = _2472;
    }
    else
    {
        uint _2540 = _2168 + 2u;
        uint _2544 = _2168 + 10u;
        float _2558 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2540].w)) * _949) * 0.949999988079071044921875);
        float _2559 = _2558 * _2558;
        float _2560 = cbLight._m0[_2540].x + _1025;
        float _2561 = cbLight._m0[_2540].y + _1026;
        float _2562 = cbLight._m0[_2540].z + _1027;
        float _2566 = inversesqrt(dot(vec3(_2560, _2561, _2562), vec3(_2560, _2561, _2562)));
        float _2567 = _2566 * _2560;
        float _2568 = _2566 * _2561;
        float _2569 = _2566 * _2562;
        float _2570 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2540].xyz));
        float _4531 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2573 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2574 = dot(vec3(_946, _947, _948), vec3(_2567, _2568, _2569));
        float _4542 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2577 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2578 = dot(vec3(cbLight._m0[_2540].xyz), vec3(_2567, _2568, _2569));
        float _4553 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2582 = _2559 * _2559;
        float _2586 = ((_2577 * _2577) * (_2582 + (-1.0))) + 1.0;
        float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2600 = 1.0 - _2559;
        float _2610 = (0.5 / (((_2336 * ((_2573 * _2600) + _2559)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2600) + _2559) * _2573))) * _2573;
        float _4564 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
        float _2612 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2582 / ((_2586 * _2586) * 3.141590118408203125));
        float _2613 = isnan(1.0) ? _2183 : (isnan(_2183) ? 1.0 : min(_2183, 1.0));
        _2534 = (((((_2593 * _2358) + _1095) * cbLight._m0[_2544].x) * _2612) * _2613) + _2470;
        _2536 = (((((_2593 * _2360) + _1097) * cbLight._m0[_2544].y) * _2612) * _2613) + _2471;
        _2538 = (((((_2593 * _2361) + _1098) * cbLight._m0[_2544].z) * _2612) * _2613) + _2472;
    }
    float _2648;
    float _2650;
    float _2652;
    if (_2262)
    {
        _2648 = _2534;
        _2650 = _2536;
        _2652 = _2538;
    }
    else
    {
        uint _2659 = _2168 + 3u;
        uint _2663 = _2168 + 11u;
        float _2677 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2659].w)) * _949) * 0.949999988079071044921875);
        float _2678 = _2677 * _2677;
        float _2679 = cbLight._m0[_2659].x + _1025;
        float _2680 = cbLight._m0[_2659].y + _1026;
        float _2681 = cbLight._m0[_2659].z + _1027;
        float _2685 = inversesqrt(dot(vec3(_2679, _2680, _2681), vec3(_2679, _2680, _2681)));
        float _2686 = _2685 * _2679;
        float _2687 = _2685 * _2680;
        float _2688 = _2685 * _2681;
        float _2689 = dot(vec3(_946, _947, _948), vec3(cbLight._m0[_2659].xyz));
        float _4580 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
        float _2692 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
        float _2693 = dot(vec3(_946, _947, _948), vec3(_2686, _2687, _2688));
        float _4591 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
        float _2697 = dot(vec3(cbLight._m0[_2659].xyz), vec3(_2686, _2687, _2688));
        float _4602 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2701 = _2678 * _2678;
        float _2705 = ((_2696 * _2696) * (_2701 + (-1.0))) + 1.0;
        float _2712 = exp2(log2(1.0 - (isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0)))) * 5.0);
        float _2719 = 1.0 - _2678;
        float _2729 = (0.5 / (((_2336 * ((_2692 * _2719) + _2678)) + 9.9999999392252902907785028219223e-09) + (((_2336 * _2719) + _2678) * _2692))) * _2692;
        float _4613 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        float _2731 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (_2701 / ((_2705 * _2705) * 3.141590118408203125));
        float _2732 = isnan(1.0) ? _2184 : (isnan(_2184) ? 1.0 : min(_2184, 1.0));
        _2648 = (((((_2712 * _2358) + _1095) * cbLight._m0[_2663].x) * _2731) * _2732) + _2534;
        _2650 = (((((_2712 * _2360) + _1097) * cbLight._m0[_2663].y) * _2731) * _2732) + _2536;
        _2652 = (((((_2712 * _2361) + _1098) * cbLight._m0[_2663].z) * _2731) * _2732) + _2538;
    }
    float _2867;
    float _2869;
    float _2871;
    float _2873;
    float _2875;
    float _2877;
    if (_2166.y == 0u)
    {
        float _2807 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2808 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2807;
        float _2809 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2807;
        float _2810 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2807;
        uvec4 _2822 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2823 = _2822.x;
        uint _2834 = uint((float(_2822.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1034) / _2823))) + floor(float(uint(cbSceneParam._m0[85u].x * _1033) / _2823)));
        float _2844 = (log2(_2810 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2845 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        uint _2848 = uint(isnan(14.0) ? _2845 : (isnan(_2845) ? 14.0 : min(_2845, 14.0)));
        uvec4 _2853 = texelFetch(g_lightClusterGridBuffer, int(((_2848 << 2u) + (_2834 << 6u)) >> 2u));
        uint _2854 = _2853.x;
        uint _2855 = _2822.z;
        float _2955;
        float _2957;
        float _2959;
        float _2961;
        float _2963;
        float _2965;
        if (((((1u << ((_2855 >> 4u) & 15u)) + 4294967295u) & _2854) == 0u) || ((_2855 & 240u) == 0u))
        {
            _2955 = 0.0;
            _2957 = 0.0;
            _2959 = 0.0;
            _2961 = 0.0;
            _2963 = 0.0;
            _2965 = 0.0;
        }
        else
        {
            float _2956;
            float _2958;
            float _2960;
            float _2962;
            float _2964;
            float _2966;
            float _3100 = 0.0;
            float _3101 = 0.0;
            float _3102 = 0.0;
            float _3103 = 0.0;
            float _3104 = 0.0;
            float _3105 = 0.0;
            uint _3106 = 0u;
            uint _3115;
            bool _3116;
            for (;;)
            {
                _3115 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3106 << 2u)) >> 2u)).x;
                _3116 = _3115 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3116)
                {
                    frontier_phi_61_pred = _3100;
                    frontier_phi_61_pred_1 = _3105;
                    frontier_phi_61_pred_2 = _3104;
                    frontier_phi_61_pred_3 = _3103;
                    frontier_phi_61_pred_4 = _3102;
                    frontier_phi_61_pred_5 = _3101;
                }
                else
                {
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    uint _3230;
                    _3224 = _3100;
                    _3225 = _3101;
                    _3226 = _3102;
                    _3227 = _3103;
                    _3228 = _3104;
                    _3229 = _3105;
                    _3230 = _3115;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    float _3161;
                    for (;;)
                    {
                        uint _3234 = uint(findLSB(_3230)) + (_3106 << 5u);
                        uint _3231 = (_3230 + 4294967295u) & _3230;
                        uint _3236 = _3234 * 48u;
                        vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3236)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3236 + 3u)).x));
                        uint _3256 = (_3234 * 48u) + 4u;
                        vec4 _3269 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3256)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3256 + 3u)).x));
                        uint _3275 = (_3234 * 48u) + 8u;
                        vec3 _3286 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3275)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3275 + 2u)).x));
                        float _3290 = _3250.x - _2808;
                        float _3291 = _3250.y - _2809;
                        float _3292 = _3250.z - _2810;
                        float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                        float _3296 = inversesqrt(_3293);
                        float _3297 = _3296 * _3290;
                        float _3298 = _3296 * _3291;
                        float _3299 = _3296 * _3292;
                        float _3300 = dot(vec3(_1052, _1055, _1058), vec3(_3297, _3298, _3299));
                        float _3305 = 1.0 - (_3293 * _3250.w);
                        float _4639 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                        float _3306 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3307 = sqrt(_3293) * _3269.w;
                        float _3310 = 1.39999997615814208984375 / (_3307 + 1.39999997615814208984375);
                        float _3311 = _3310 * _3310;
                        float _3314 = ((1.0 - _3311) * _3300) + _3311;
                        float _3317 = _3307 * _3307;
                        float _3321 = ((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3306) / ((_3317 * 0.699999988079071044921875) + 1.0);
                        float _3325 = (-0.0) - _2808;
                        float _3326 = (-0.0) - _2809;
                        float _3327 = (-0.0) - _2810;
                        float _3331 = inversesqrt(dot(vec3(_3325, _3326, _3327), vec3(_3325, _3326, _3327)));
                        float _3332 = _3331 * _3325;
                        float _3333 = _3331 * _3326;
                        float _3334 = _3331 * _3327;
                        float _3342 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                        float _3343 = 1.0 - _1127;
                        float _3350 = sqrt(1.0 - ((1.0 - (_3343 * _3343)) * (1.0 - (_3342 * _3342))));
                        float _3351 = _3350 * _3350;
                        float _3352 = _3351 * _3351;
                        float _3353 = _3332 + _3297;
                        float _3354 = _3333 + _3298;
                        float _3355 = _3334 + _3299;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3363 = dot(vec3(_1052, _1055, _1058), vec3(_3332, _3333, _3334));
                        float _4655 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                        float _3366 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                        float _3367 = dot(vec3(_1052, _1055, _1058), vec3(_3359 * _3353, _3359 * _3354, _3359 * _3355));
                        float _4666 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3370 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                        float _3374 = ((_3370 * _3370) * (_3352 + (-1.0))) + 1.0;
                        float _3375 = _3310 * _3351;
                        float _3376 = _3375 * _3375;
                        float _3379 = ((1.0 - _3376) * _3300) + _3376;
                        float _4677 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                        float _3381 = 1.0 - _3351;
                        float _3391 = (0.5 / (((_3380 * ((_3366 * _3381) + _3351)) + 9.9999999392252902907785028219223e-09) + (((_3380 * _3381) + _3351) * _3366))) * _3380;
                        float _4688 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3402 = (((_3352 * 3.1415927410125732421875) * (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) / ((_3374 * _3374) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125))) * _3306;
                        _3159 = (_3321 * _3269.x) + _3227;
                        _3160 = (_3321 * _3269.y) + _3228;
                        _3161 = (_3321 * _3269.z) + _3229;
                        _3156 = (_3402 * _3286.x) + _3224;
                        _3157 = (_3402 * _3286.y) + _3225;
                        _3158 = (_3402 * _3286.z) + _3226;
                        if (_3231 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3224 = _3156;
                            _3225 = _3157;
                            _3226 = _3158;
                            _3227 = _3159;
                            _3228 = _3160;
                            _3229 = _3161;
                            _3230 = _3231;
                        }
                    }
                    frontier_phi_61_pred = _3156;
                    frontier_phi_61_pred_1 = _3161;
                    frontier_phi_61_pred_2 = _3160;
                    frontier_phi_61_pred_3 = _3159;
                    frontier_phi_61_pred_4 = _3158;
                    frontier_phi_61_pred_5 = _3157;
                }
                _2956 = frontier_phi_61_pred;
                _2966 = frontier_phi_61_pred_1;
                _2964 = frontier_phi_61_pred_2;
                _2962 = frontier_phi_61_pred_3;
                _2960 = frontier_phi_61_pred_4;
                _2958 = frontier_phi_61_pred_5;
                uint _3107 = _3106 + 1u;
                if (_3107 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3100 = _2956;
                    _3101 = _2958;
                    _3102 = _2960;
                    _3103 = _2962;
                    _3104 = _2964;
                    _3105 = _2966;
                    _3106 = _3107;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2955 = _2956;
            _2957 = _2958;
            _2959 = _2960;
            _2961 = _2962;
            _2963 = _2964;
            _2965 = _2966;
        }
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.z;
        uint _2972 = (_2970 >> 8u) & 15u;
        float _3068;
        float _3070;
        float _3072;
        float _3074;
        float _3076;
        float _3078;
        if (((4294967295u << _2972) & _2854) == 0u)
        {
            _3068 = _2955;
            _3070 = _2957;
            _3072 = _2959;
            _3074 = _2961;
            _3076 = _2963;
            _3078 = _2965;
        }
        else
        {
            float _3093 = inversesqrt(dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810)));
            float _3094 = _3093 * _2808;
            float _3095 = _3093 * _2809;
            float _3096 = _3093 * _2810;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2972 < ((_2970 >> 12u) & 15u))
            {
                float _3069;
                float _3071;
                float _3073;
                float _3075;
                float _3077;
                float _3079;
                float _3207 = _2955;
                float _3208 = _2957;
                float _3209 = _2959;
                float _3210 = _2961;
                float _3211 = _2963;
                float _3212 = _2965;
                uint _3213 = _2972;
                uint _3222;
                bool _3223;
                for (;;)
                {
                    _3222 = texelFetch(g_lightClassification, int((((_2848 << 5u) + (_2834 << 9u)) + (_3213 << 2u)) >> 2u)).x;
                    _3223 = _3222 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3223)
                    {
                        frontier_phi_67_pred = _3210;
                        frontier_phi_67_pred_1 = _3211;
                        frontier_phi_67_pred_2 = _3212;
                        frontier_phi_67_pred_3 = _3209;
                        frontier_phi_67_pred_4 = _3208;
                        frontier_phi_67_pred_5 = _3207;
                    }
                    else
                    {
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3700;
                        float _3701;
                        float _3702;
                        float _3703;
                        float _3704;
                        float _3705;
                        float _3420 = _3207;
                        float _3421 = _3208;
                        float _3422 = _3209;
                        float _3423 = _3210;
                        float _3424 = _3211;
                        float _3425 = _3212;
                        uint _3426 = _3222;
                        uint _3427;
                        vec4 _3452;
                        float _3453;
                        vec4 _3468;
                        vec3 _3480;
                        vec4 _3495;
                        vec4 _3510;
                        float _3556;
                        bool _3557;
                        for (;;)
                        {
                            uint _3437 = ((_3213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3426));
                            _3427 = (_3426 + 4294967295u) & _3426;
                            uint _3439 = _3437 * 40u;
                            _3452 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3439)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3439 + 3u)).x));
                            _3453 = _3452.w;
                            uint _3455 = (_3437 * 40u) + 4u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3470 = (_3437 * 40u) + 8u;
                            _3480 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3470)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3470 + 2u)).x));
                            uint _3482 = (_3437 * 40u) + 16u;
                            _3495 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 3u)).x));
                            uint _3497 = (_3437 * 40u) + 20u;
                            _3510 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3497)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3497 + 3u)).x));
                            uint _3512 = (_3437 * 40u) + 24u;
                            vec4 _3525 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3512)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3512 + 3u)).x));
                            uint _3531 = (_3437 * 40u) + 28u;
                            vec4 _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3556 = fma(_2810, _3544.z, fma(_2809, _3544.y, _3544.x * _2808)) + _3544.w;
                            _3557 = !((fma(_2810, _3525.z, fma(_2809, _3525.y, _3525.x * _2808)) + _3525.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3557)
                            {
                                float _3584 = _3452.x - _2808;
                                float _3585 = _3452.y - _2809;
                                float _3586 = _3452.z - _2810;
                                float _3587 = dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586));
                                float _3590 = inversesqrt(_3587);
                                float _3591 = _3590 * _3584;
                                float _3592 = _3590 * _3585;
                                float _3593 = _3590 * _3586;
                                float _3597 = 1.0 - (_3587 / (_3453 * _3453));
                                float _4699 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                                float _3598 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3602 = sqrt(_3587) * _3468.w;
                                float _3604 = 1.39999997615814208984375 / (_3602 + 1.39999997615814208984375);
                                float _3605 = _3604 * _3604;
                                float _3608 = ((1.0 - _3605) * dot(vec3(_3591, _3592, _3593), vec3(_1052, _1055, _1058))) + _3605;
                                float _3611 = _3602 * _3602;
                                float _3615 = (fma(_2810, _3495.z, fma(_2809, _3495.y, _3495.x * _2808)) + _3495.w) / _3556;
                                float _3616 = (fma(_2810, _3510.z, fma(_2809, _3510.y, _3510.x * _2808)) + _3510.w) / _3556;
                                float _3620 = 1.0 - dot(vec2(_3615, _3616), vec2(_3615, _3616));
                                float _4715 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                                float _3621 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
                                float _3622 = _3621 * (((isnan(0.0) ? _3608 : (isnan(_3608) ? 0.0 : max(_3608, 0.0))) * _3598) / ((_3611 * 0.699999988079071044921875) + 1.0));
                                float _3634 = exp2(log2(1.0 / ((_3611 * 3.5) + 5.0)) * 0.25);
                                float _3635 = 1.0 - _1127;
                                float _3642 = sqrt(1.0 - ((1.0 - (_3635 * _3635)) * (1.0 - (_3634 * _3634))));
                                float _3643 = _3642 * _3642;
                                float _3644 = _3643 * _3643;
                                float _3645 = _3591 - _3094;
                                float _3646 = _3592 - _3095;
                                float _3647 = _3593 - _3096;
                                float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                                float _3655 = dot(vec3(_1052, _1055, _1058), vec3((-0.0) - _3094, (-0.0) - _3095, (-0.0) - _3096));
                                float _4726 = isnan(0.0) ? _3655 : (isnan(_3655) ? 0.0 : max(_3655, 0.0));
                                float _3658 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
                                float _3659 = dot(vec3(_1052, _1055, _1058), vec3(_3651 * _3645, _3651 * _3646, _3651 * _3647));
                                float _4737 = isnan(0.0) ? _3659 : (isnan(_3659) ? 0.0 : max(_3659, 0.0));
                                float _3662 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
                                float _3666 = ((_3662 * _3662) * (_3644 + (-1.0))) + 1.0;
                                float _3667 = _3604 * _3643;
                                float _3668 = _3667 * _3667;
                                float _3674 = ((1.0 - _3668) * dot(vec3(_1052, _1055, _1058), vec3(_3591, _3592, _3593))) + _3668;
                                float _4748 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                                float _3675 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
                                float _3676 = 1.0 - _3643;
                                float _3686 = (0.5 / (((_3675 * ((_3658 * _3676) + _3643)) + 9.9999999392252902907785028219223e-09) + (((_3675 * _3676) + _3643) * _3658))) * _3675;
                                float _4759 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3696 = (_3621 * _3598) * (((_3644 * 3.1415927410125732421875) * (isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0)))) / ((_3666 * _3666) * ((_3611 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3696 * _3480.x;
                                frontier_phi_73_pred_1 = _3696 * _3480.y;
                                frontier_phi_73_pred_2 = _3622 * _3468.z;
                                frontier_phi_73_pred_3 = _3622 * _3468.y;
                                frontier_phi_73_pred_4 = _3622 * _3468.x;
                                frontier_phi_73_pred_5 = _3696 * _3480.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3700 = frontier_phi_73_pred;
                            _3701 = frontier_phi_73_pred_1;
                            _3705 = frontier_phi_73_pred_2;
                            _3704 = frontier_phi_73_pred_3;
                            _3703 = frontier_phi_73_pred_4;
                            _3702 = frontier_phi_73_pred_5;
                            _3410 = _3703 + _3423;
                            _3411 = _3704 + _3424;
                            _3412 = _3705 + _3425;
                            _3407 = _3700 + _3420;
                            _3408 = _3701 + _3421;
                            _3409 = _3702 + _3422;
                            if (_3427 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3420 = _3407;
                                _3421 = _3408;
                                _3422 = _3409;
                                _3423 = _3410;
                                _3424 = _3411;
                                _3425 = _3412;
                                _3426 = _3427;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3410;
                        frontier_phi_67_pred_1 = _3411;
                        frontier_phi_67_pred_2 = _3412;
                        frontier_phi_67_pred_3 = _3409;
                        frontier_phi_67_pred_4 = _3408;
                        frontier_phi_67_pred_5 = _3407;
                    }
                    _3075 = frontier_phi_67_pred;
                    _3077 = frontier_phi_67_pred_1;
                    _3079 = frontier_phi_67_pred_2;
                    _3073 = frontier_phi_67_pred_3;
                    _3071 = frontier_phi_67_pred_4;
                    _3069 = frontier_phi_67_pred_5;
                    uint _3214 = _3213 + 1u;
                    if (_3214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3207 = _3069;
                        _3208 = _3071;
                        _3209 = _3073;
                        _3210 = _3075;
                        _3211 = _3077;
                        _3212 = _3079;
                        _3213 = _3214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3077;
                frontier_phi_55_56_ladder_1 = _3079;
                frontier_phi_55_56_ladder_2 = _3075;
                frontier_phi_55_56_ladder_3 = _3073;
                frontier_phi_55_56_ladder_4 = _3071;
                frontier_phi_55_56_ladder_5 = _3069;
            }
            else
            {
                frontier_phi_55_56_ladder = _2963;
                frontier_phi_55_56_ladder_1 = _2965;
                frontier_phi_55_56_ladder_2 = _2961;
                frontier_phi_55_56_ladder_3 = _2959;
                frontier_phi_55_56_ladder_4 = _2957;
                frontier_phi_55_56_ladder_5 = _2955;
            }
            _3068 = frontier_phi_55_56_ladder_5;
            _3070 = frontier_phi_55_56_ladder_4;
            _3072 = frontier_phi_55_56_ladder_3;
            _3074 = frontier_phi_55_56_ladder_2;
            _3076 = frontier_phi_55_56_ladder;
            _3078 = frontier_phi_55_56_ladder_1;
        }
        float _3083 = isnan(1.0) ? _1111 : (isnan(_1111) ? 1.0 : min(_1111, 1.0));
        _2867 = (_3083 * _3074) + _2300;
        _2869 = (_3083 * _3076) + _2302;
        _2871 = (_3083 * _3078) + _2304;
        _2873 = ((_3068 * _1095) * _3083) + _2648;
        _2875 = ((_3070 * _1097) * _3083) + _2650;
        _2877 = ((_3072 * _1098) * _3083) + _2652;
    }
    else
    {
        _2867 = _2300;
        _2869 = _2302;
        _2871 = _2304;
        _2873 = _2648;
        _2875 = _2650;
        _2877 = _2652;
    }
    float _4775 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _4786 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _4797 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    uint _2897 = _265 + 6u;
    float _2905 = _1033 / cbSceneParam._m0[86u].x;
    float _2906 = _1034 / cbSceneParam._m0[86u].y;
    vec4 _2920 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, (log2((isnan(cbSceneParam._m0[77u].w) ? _968 : (isnan(_968) ? cbSceneParam._m0[77u].w : min(_968, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2922 = _2920.x;
    float _2923 = _2920.y;
    float _2924 = _2920.z;
    float _2925 = _2920.w;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_968 > cbSceneParam._m0[78u].w)
    {
        float _2980 = isnan(_968) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _968 : min(cbSceneParam._m0[80u].w, _968));
        float _2981 = _2980 / _968;
        float _2992 = _2981 * _1018;
        float _2993 = _1019 * _2981;
        float _2994 = (-0.0) - _2993;
        float _2996 = _2981 * _1020;
        float _2998 = (cbSceneParam._m0[77u].w * _2994) / _2980;
        float _2999 = _2998 + cbSceneParam._m0[79u].w;
        float _3000 = cbSceneParam._m0[79u].w - _2993;
        float _3006 = sqrt(((_2992 * _2992) + (_2993 * _2993)) + (_2996 * _2996));
        float _3009 = (1.0 - (cbSceneParam._m0[77u].w / _2980)) * _3006;
        float _3014 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3016 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3169;
        if (abs((_2994 - _2998) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3169 = ((((_2999 > 0.0) ? exp2(_3014 * _2999) : (2.0 - exp2(_3016 * _2999))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3009;
        }
        else
        {
            float _3129 = 1.0 / cbSceneParam._m0[80u].x;
            float _3130 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : max(_2999, _3000));
            float _3131 = isnan(_3000) ? _2999 : (isnan(_2999) ? _3000 : min(_2999, _3000));
            float _3140 = isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : min(_3130, 0.0));
            float _3141 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : min(_3131, 0.0));
            _3169 = ((abs(_3006 / _2994) * cbSceneParam._m0[80u].y) * ((((_3140 - _3141) * 2.0) - ((exp2(_3014 * (isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0)))) - exp2(_3014 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0))))) * _3129)) - ((exp2(_3016 * _3140) - exp2(_3016 * _3141)) * _3129))) + (_3009 * cbSceneParam._m0[80u].z);
        }
        vec4 _3171 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2905, _2906, 1.0), 0.0);
        float _3180 = exp2((_3169 * (-1.44269502162933349609375)) * (1.0 - _3171.w));
        float _3181 = log2(_3180);
        float _3197 = log2(_2925);
        _3018 = (exp2(_3197 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].x)) * _3171.x) / cbSceneParam._m0[78u].x)) + _2922;
        _3020 = (exp2(_3197 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].y)) * _3171.y) / cbSceneParam._m0[78u].y)) + _2923;
        _3022 = (exp2(_3197 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3181 * cbSceneParam._m0[78u].z)) * _3171.z) / cbSceneParam._m0[78u].z)) + _2924;
        _3024 = _3180 * _2925;
    }
    else
    {
        _3018 = _2922;
        _3020 = _2923;
        _3022 = _2924;
        _3024 = _2925;
    }
    float _3036 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3037 = _3036 == 3.0;
    float _3038 = log2(_3024);
    float _3045 = exp2(_3038 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0))) * (_2867 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1111))) + ((_2873 + ((isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3046 = exp2(_3038 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2869 + ((isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0))) * _1111))) + ((_2875 + ((isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3047 = exp2(_3038 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * (_2871 + ((isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0))) * _1111))) + ((_2877 + ((isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))) * _1917)) * cbPerFrame._m0[3u].x));
    float _3056 = (_3036 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3056 * (_3037 ? _3045 : (_3045 + (cbSceneParam._m0[72u].w * _3018)));
    SV_Target.y = _3056 * (_3037 ? _3046 : (_3046 + (cbSceneParam._m0[72u].w * _3020)));
    SV_Target.z = _3056 * (_3037 ? _3047 : (_3047 + (cbSceneParam._m0[72u].w * _3022)));
    SV_Target.w = cbInstanceData._m0[_2897].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2897].w;
}


