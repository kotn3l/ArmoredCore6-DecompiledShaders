#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1089;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _234 = uint(roundEven(NORMAL.w)) * 13u;
    uint _240 = _234 + 1u;
    uint _244 = _234 + 2u;
    float _253 = sqrt(((cbInstanceData._m0[_240].x * cbInstanceData._m0[_240].x) + (cbInstanceData._m0[_234].x * cbInstanceData._m0[_234].x)) + (cbInstanceData._m0[_244].x * cbInstanceData._m0[_244].x));
    float _254 = _253 * TEXCOORD.z;
    float _255 = _253 * TEXCOORD.w;
    vec4 _275 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _281 = _275.x * cbMtdParam._m0[11u].x;
    float _282 = _275.y * cbMtdParam._m0[11u].y;
    float _283 = _275.z * cbMtdParam._m0[11u].z;
    vec4 _302 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _254) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _255) + cbTextureTilingScale._m0[5u].w));
    vec4 _355 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _357 = _355.x;
    float _369 = dot(vec4(_357, _355.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _386 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w)).x) * 2.0) - ((((_357 - _369) * cbMtdParam._m0[23u].w) + _369) * cbMtdParam._m0[22u].w))) + 1.0;
    float _3703 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
    float _394 = (_387 * ((_302.x * cbMtdParam._m0[12u].x) - _281)) + _281;
    float _395 = (_387 * ((_302.y * cbMtdParam._m0[12u].y) - _282)) + _282;
    float _396 = (_387 * ((_302.z * cbMtdParam._m0[12u].z) - _283)) + _283;
    vec4 _409 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _254) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _255) + cbTextureTilingScale._m0[4u].w));
    vec4 _426 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _428 = _426.x;
    float _429 = _426.y;
    float _430 = _426.z;
    float _439 = ((_409.z - _430) * _387) + _430;
    float _442 = ((((_409.x - _428) * _387) + _428) * 2.0) + (-1.0);
    float _444 = ((((_409.y - _429) * _387) + _429) * 2.0) + (-1.0);
    float _445 = dot(vec2(_442, _444), vec2(_442, _444));
    float _3714 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _450 = sqrt(1.0 - (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))));
    vec4 _466 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _478 = (((_466.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _442;
    float _479 = (((_466.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _444;
    vec4 _491 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    vec4 _505 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _507 = _505.x;
    float _525 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _254) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _255) + cbTextureTilingScale._m0[9u].w)).x - _507) * _387) + _507;
    float _529 = ((_491.x - _525) * cbMtdParam._m0[19u].z) + _525;
    float _533 = (cbMtdParam._m0[19u].w * (_466.z - _439)) + _439;
    float _535 = cbMtdParam._m0[22u].x + _466.w;
    float _538 = fma(_450, _221 * NORMAL.x, fma(_479, _228 * TANGENT.x, (_214 * _206) * _478));
    float _541 = fma(_450, _221 * NORMAL.y, fma(_479, _228 * TANGENT.y, (_214 * _207) * _478));
    float _544 = fma(_450, _221 * NORMAL.z, fma(_479, _228 * TANGENT.z, (_214 * _208) * _478));
    float _548 = inversesqrt(dot(vec3(_538, _541, _544), vec3(_538, _541, _544)));
    float _549 = _548 * _538;
    float _550 = _548 * _541;
    float _551 = _548 * _544;
    float _3725 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _552 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _3736 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _3747 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _3758 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _3769 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _3780 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _557 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _571 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _612 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _622 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _612);
    float _623 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _612);
    float _624 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _612);
    float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
    float _629 = _622 * _628;
    float _630 = _623 * _628;
    float _631 = _624 * _628;
    float _637 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _638 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _656 = fma(_551, cbSceneParam._m0[5u].z, fma(_550, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _549));
    float _659 = fma(_551, cbSceneParam._m0[6u].z, fma(_550, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _549));
    float _662 = fma(_551, cbSceneParam._m0[7u].z, fma(_550, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _549));
    uint _676 = (_234 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _682 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * cbInstanceData._m0[_676].x;
    float _683 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0)))) * cbInstanceData._m0[_676].y;
    float _684 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * cbInstanceData._m0[_676].z;
    float _3791 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _3802 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _3813 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _687 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _688 = 1.0 - _557;
    float _689 = _685 * _688;
    float _690 = _686 * _688;
    float _691 = _687 * _688;
    float _696 = (_685 + (-0.039999999105930328369140625)) * _557;
    float _697 = (_686 + (-0.039999999105930328369140625)) * _557;
    float _698 = (_687 + (-0.039999999105930328369140625)) * _557;
    float _699 = _696 + 0.039999999105930328369140625;
    float _701 = _697 + 0.039999999105930328369140625;
    float _702 = _698 + 0.039999999105930328369140625;
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _637, cbSceneParam._m0[86u].y * _638));
    float _715 = ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * TEXCOORD_5.w) * _711.x;
    float _716 = dot(vec3(_549, _550, _551), vec3(_629, _630, _631));
    float _719 = _716 * 2.0;
    float _723 = (_719 * _549) - _629;
    float _724 = (_719 * _550) - _630;
    float _725 = (_719 * _551) - _631;
    float _729 = abs(dot(vec3(_629, _630, _631), vec3(_549, _550, _551)));
    float _3824 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _731 = sqrt(_552);
    float _744 = exp2((_731 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_731 * 3.0));
    float _750 = (1.0 - _744) * ((_731 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _751 = _744 * _731;
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1088;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _813 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _817 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _821 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _846 = _779 + _549;
        float _847 = _783 + _550;
        float _848 = _787 + _551;
        float _858 = fma(_848, cbModelParam._m0[26u].z, fma(_847, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _846)) - _813;
        float _859 = fma(_848, cbModelParam._m0[27u].z, fma(_847, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _846)) - _817;
        float _860 = fma(_848, cbModelParam._m0[28u].z, fma(_847, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _846)) - _821;
        float _864 = inversesqrt(dot(vec3(_858, _859, _860), vec3(_858, _859, _860)));
        float _877 = ((_864 * _858) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_813 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_864 * _859) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_817 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_864 * _860) / cbModelParam._m0[34u].z) + ((((((_821 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _878, _879), 0.0);
        float _916 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_882.x + (-0.5));
        float _918 = _916 * (_882.y + (-0.5));
        float _919 = _916 * (_882.z + (-0.5));
        float _926 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_889.x + (-0.5));
        float _928 = _926 * (_889.y + (-0.5));
        float _929 = _926 * (_889.z + (-0.5));
        float _936 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_896.x + (-0.5));
        float _938 = _936 * (_896.y + (-0.5));
        float _939 = _936 * (_896.z + (-0.5));
        float _946 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_903.x + (-0.5));
        float _948 = _946 * (_903.y + (-0.5));
        float _949 = _946 * (_903.z + (-0.5));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = _917 * 0.5;
        float _954 = _927 * 0.5;
        float _955 = _937 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _970 = (dot(vec3(_549, _550, _551), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3850 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _980 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3861 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3872 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_982 + 1.0))) + _987) * _950;
        float _997 = _918 * 0.5;
        float _998 = _928 * 0.5;
        float _999 = _938 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_549, _550, _551), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3905 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1024 + 1.0))) + _1029) * _951;
        float _1039 = _919 * 0.5;
        float _1040 = _929 * 0.5;
        float _1041 = _939 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_549, _550, _551), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3938 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1066 + 1.0))) + _1071) * _952;
        _1088 = _919;
        _1090 = _918;
        _1091 = _917;
        _1092 = _929;
        _1093 = _928;
        _1094 = _927;
        _1095 = _939;
        _1096 = _938;
        _1097 = _937;
        _1098 = _952;
        _1099 = _951;
        _1100 = _950;
        _1101 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
    }
    else
    {
        _1088 = _1089;
        _1090 = _1089;
        _1091 = _1089;
        _1092 = _1089;
        _1093 = _1089;
        _1094 = _1089;
        _1095 = _1089;
        _1096 = _1089;
        _1097 = _1089;
        _1098 = _1089;
        _1099 = _1089;
        _1100 = _1089;
        _1101 = 0.0;
        _1102 = 0.0;
        _1103 = 0.0;
    }
    float _1397;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1128 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1132 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1136 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1159 = _779 + _549;
        float _1160 = _783 + _550;
        float _1161 = _787 + _551;
        float _1171 = fma(_1161, cbModelParam._m0[30u].z, fma(_1160, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1159)) - _1128;
        float _1172 = fma(_1161, cbModelParam._m0[31u].z, fma(_1160, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1159)) - _1132;
        float _1173 = fma(_1161, cbModelParam._m0[32u].z, fma(_1160, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1159)) - _1136;
        float _1177 = inversesqrt(dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173)));
        float _1190 = ((_1177 * _1171) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1128 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1177 * _1172) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1132 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1192 = ((_1177 * _1173) / cbModelParam._m0[35u].z) + ((((((_1136 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1190, _1191, _1192), 0.0);
        float _1227 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1228 = _1227 * (_1194.x + (-0.5));
        float _1229 = _1227 * (_1194.y + (-0.5));
        float _1230 = _1227 * (_1194.z + (-0.5));
        float _1237 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1201.x + (-0.5));
        float _1239 = _1237 * (_1201.y + (-0.5));
        float _1240 = _1237 * (_1201.z + (-0.5));
        float _1247 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1208.x + (-0.5));
        float _1249 = _1247 * (_1208.y + (-0.5));
        float _1250 = _1247 * (_1208.z + (-0.5));
        float _1257 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1215.x + (-0.5));
        float _1259 = _1257 * (_1215.y + (-0.5));
        float _1260 = _1257 * (_1215.z + (-0.5));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = _1228 * 0.5;
        float _1265 = _1238 * 0.5;
        float _1266 = _1248 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_549, _550, _551), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _3979 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _3990 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4001 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))) * (_1291 + 1.0))) + _1296) * _1261;
        float _1306 = _1229 * 0.5;
        float _1307 = _1239 * 0.5;
        float _1308 = _1249 * 0.5;
        float _1309 = dot(vec3(_1306, _1307, _1308), vec3(_1306, _1307, _1308));
        float _1314 = (_1309 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1309);
        float _1322 = (dot(vec3(_549, _550, _551), vec3(_1314 * _1306, _1314 * _1307, _1314 * _1308)) + 1.0) * 0.5;
        float _4012 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1331 = sqrt(((_1307 * _1307) + (_1306 * _1306)) + (_1308 * _1308)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4023 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1333 = _1332 * 2.0;
        float _1337 = (1.0 - _1332) / (_1332 + 1.0);
        float _4034 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1347 = ((((1.0 - _1338) * (_1333 + 2.0)) * exp2(log2(isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_1333 + 1.0))) + _1338) * _1262;
        float _1348 = _1230 * 0.5;
        float _1349 = _1240 * 0.5;
        float _1350 = _1250 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_549, _550, _551), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _4045 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4056 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _4067 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0))) * (_1375 + 1.0))) + _1380) * _1263;
        _1397 = _1230;
        _1398 = _1229;
        _1399 = _1228;
        _1400 = _1240;
        _1401 = _1239;
        _1402 = _1238;
        _1403 = _1250;
        _1404 = _1249;
        _1405 = _1248;
        _1406 = _1263;
        _1407 = _1262;
        _1408 = _1261;
        _1409 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
        _1410 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0)));
        _1411 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
    }
    else
    {
        _1397 = _1089;
        _1398 = _1089;
        _1399 = _1089;
        _1400 = _1089;
        _1401 = _1089;
        _1402 = _1089;
        _1403 = _1089;
        _1404 = _1089;
        _1405 = _1089;
        _1406 = _1089;
        _1407 = _1089;
        _1408 = _1089;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1421 = (cbModelParam._m0[1u].x * (_1409 - _1101)) + _1101;
    float _1422 = (cbModelParam._m0[1u].x * (_1410 - _1102)) + _1102;
    float _1423 = (cbModelParam._m0[1u].x * (_1411 - _1103)) + _1103;
    float _1444 = fma(_1423, cbSceneParam._m0[89u].z, fma(_1422, cbSceneParam._m0[89u].y, _1421 * cbSceneParam._m0[89u].x));
    float _1447 = fma(_1423, cbSceneParam._m0[90u].z, fma(_1422, cbSceneParam._m0[90u].y, _1421 * cbSceneParam._m0[90u].x));
    float _1450 = fma(_1423, cbSceneParam._m0[91u].z, fma(_1422, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1421));
    float _1465 = _723 * 0.5;
    float _1466 = _724 * 0.5;
    float _1467 = _725 * 0.5;
    float _1468 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1399, _1402, _1405, _1408));
    float _1471 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1398, _1401, _1404, _1407));
    float _1474 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1397, _1400, _1403, _1406));
    float _1508;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1481 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1088, _1092, _1095, _1098));
        float _1485 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1090, _1093, _1096, _1099));
        float _1489 = dot(vec4(_1465, _1466, _1467, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1496 = dot(vec4(cbModelParam._m0[39u]), vec4(_1465, _1466, _1467, 1.0));
        _1508 = dot(vec3(isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1496) ? 0.0 : (isnan(0.0) ? _1496 : max(0.0, _1496))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1508 = 1.0;
    }
    float _1519;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1510 = dot(vec4(cbModelParam._m0[40u]), vec4(_1465, _1466, _1467, 1.0));
        _1519 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)), isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1519 = 1.0;
    }
    float _1523 = (_1519 * cbModelParam._m0[1u].x) + (_1508 * (1.0 - cbModelParam._m0[1u].x));
    float _1533 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _552);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1533 : min(cbModelParam._m0[25u].z, _1533));
    float _1616;
    float _1618;
    float _1620;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1583 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1587 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1591 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1594 = fma(_725, cbModelParam._m0[13u].z, fma(_724, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _723));
        float _1597 = fma(_725, cbModelParam._m0[14u].z, fma(_724, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _723));
        float _1600 = fma(_725, cbModelParam._m0[15u].z, fma(_724, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _723));
        float _1628;
        if (_1594 > 0.0)
        {
            _1628 = abs((1.0 - _1583) / _1594);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1583 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1628 = frontier_phi_14_12_ladder;
        }
        float _1801;
        if (_1597 > 0.0)
        {
            _1801 = abs((1.0 - _1587) / _1597);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1597 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1587 + 1.0) / _1597);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1801 = frontier_phi_23_19_ladder;
        }
        float _2096;
        if (_1600 > 0.0)
        {
            _2096 = abs((1.0 - _1591) / _1600);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1600 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1591 + 1.0) / _1600);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2096 = frontier_phi_35_30_ladder;
        }
        float _2098 = isnan(_1801) ? _1628 : (isnan(_1628) ? _1801 : min(_1628, _1801));
        float _2099 = isnan(_2096) ? _2098 : (isnan(_2098) ? _2096 : min(_2098, _2096));
        float _2103 = (_2099 * _1594) + _1583;
        float _2104 = (_2099 * _1597) + _1587;
        float _2105 = (_2099 * _1600) + _1591;
        float _2106 = _2099 * 9.9999997473787516355514526367188e-05;
        float _2108 = (-1.0) - _2106;
        float _2110 = _2106 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2105 > _2110) || ((_2105 < _2108) || ((_2104 > _2110) || ((_2104 < _2108) || ((_2103 < _2108) || (_2103 > _2110))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2250 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2105, cbModelParam._m0[9u].z, fma(_2104, cbModelParam._m0[9u].y, _2103 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2105, cbModelParam._m0[10u].z, fma(_2104, cbModelParam._m0[10u].y, _2103 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2105, cbModelParam._m0[11u].z, fma(_2104, cbModelParam._m0[11u].y, _2103 * cbModelParam._m0[11u].x))), _1534);
            frontier_phi_13_35_ladder = _2250.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2250.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2250.x * cbModelParam._m0[1u].y;
        }
        _1616 = frontier_phi_13_35_ladder_2;
        _1618 = frontier_phi_13_35_ladder_1;
        _1620 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1604 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_723, _724, _725), _1534);
        _1616 = _1604.x * cbModelParam._m0[1u].y;
        _1618 = _1604.y * cbModelParam._m0[1u].y;
        _1620 = _1604.z * cbModelParam._m0[1u].y;
    }
    float _1624 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _552);
    float _1625 = isnan(_1624) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1624 : min(cbModelParam._m0[25u].w, _1624));
    float _1716;
    float _1718;
    float _1720;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1680 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1684 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1688 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1691 = fma(_725, cbModelParam._m0[21u].z, fma(_724, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _723));
        float _1694 = fma(_725, cbModelParam._m0[22u].z, fma(_724, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _723));
        float _1697 = fma(_725, cbModelParam._m0[23u].z, fma(_724, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _723));
        float _1806;
        if (_1691 > 0.0)
        {
            _1806 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1806 = frontier_phi_25_21_ladder;
        }
        float _2123;
        if (_1694 > 0.0)
        {
            _2123 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2123 = frontier_phi_37_32_ladder;
        }
        float _2461;
        if (_1697 > 0.0)
        {
            _2461 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2461 = frontier_phi_47_44_ladder;
        }
        float _2463 = isnan(_2123) ? _1806 : (isnan(_1806) ? _2123 : min(_1806, _2123));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1691) + _1680;
        float _2469 = (_2464 * _1694) + _1684;
        float _2470 = (_2464 * _1697) + _1688;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1625);
            frontier_phi_22_47_ladder = _2592.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2592.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2592.x * cbModelParam._m0[1u].z;
        }
        _1716 = frontier_phi_22_47_ladder_2;
        _1718 = frontier_phi_22_47_ladder_1;
        _1720 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1700 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_723, _724, _725), _1625);
        _1716 = _1700.x * cbModelParam._m0[1u].z;
        _1718 = _1700.y * cbModelParam._m0[1u].z;
        _1720 = _1700.z * cbModelParam._m0[1u].z;
    }
    float _1733 = (((_750 * _699) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1716 - _1616)) + _1616);
    float _1735 = (((_750 * _701) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1718 - _1618)) + _1618);
    float _1737 = (((_750 * _702) + _751) * _715) * ((cbModelParam._m0[1u].w * (_1720 - _1620)) + _1620);
    float _1740 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1735, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1743 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1735, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1746 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1735, cbSceneParam._m0[91u].y, _1733 * cbSceneParam._m0[91u].x));
    float _1780 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1784 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1788 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1792 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1793 = _1780 / _1792;
    float _1794 = _1784 / _1792;
    float _1795 = _1788 / _1792;
    float _1942;
    float _1943;
    float _1944;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1822 = ((uint(_1795 > cbSceneParam._m0[59u].y) + uint(_1795 > cbSceneParam._m0[59u].x)) + uint(_1795 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1823 = _1822 + 43u;
        uint _1831 = _1822 + 44u;
        uint _1839 = _1822 + 45u;
        uint _1847 = _1822 + 46u;
        float _1858 = fma(_1792, cbSceneParam._m0[_1823].w, fma(_1788, cbSceneParam._m0[_1823].z, fma(_1784, cbSceneParam._m0[_1823].y, _1780 * cbSceneParam._m0[_1823].x)));
        float _1862 = fma(_1792, cbSceneParam._m0[_1831].w, fma(_1788, cbSceneParam._m0[_1831].z, fma(_1784, cbSceneParam._m0[_1831].y, _1780 * cbSceneParam._m0[_1831].x)));
        float _1870 = fma(_1792, cbSceneParam._m0[_1847].w, fma(_1788, cbSceneParam._m0[_1847].z, fma(_1784, cbSceneParam._m0[_1847].y, _1780 * cbSceneParam._m0[_1847].x)));
        float _1875 = cbSceneParam._m0[33u].z * _1870;
        float _1877 = cbSceneParam._m0[33u].w * _1870;
        float _1880 = fma(_1792, cbSceneParam._m0[_1839].w, fma(_1788, cbSceneParam._m0[_1839].z, fma(_1784, cbSceneParam._m0[_1839].y, _1780 * cbSceneParam._m0[_1839].x))) / _1870;
        float _1928 = (cbSceneParam._m0[33u].x - sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795))) * cbSceneParam._m0[33u].y;
        float _4193 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
        float _1935 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1875 + _1858) / _1870, (_1877 + _1862) / _1870), _1880), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1877 + _1858) / _1870, (_1862 - _1875) / _1870), _1880), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1858 - _1875) / _1870, (_1862 - _1877) / _1870), _1880), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1858 - _1877) / _1870, (_1875 + _1862) / _1870), _1880), 0.0)).x), vec4(0.25)));
        _1942 = 1.0 - (_1935 * cbSceneParam._m0[34u].x);
        _1943 = 1.0 - (_1935 * cbSceneParam._m0[34u].y);
        _1944 = 1.0 - (_1935 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1942 = 1.0;
        _1943 = 1.0;
        _1944 = 1.0;
    }
    float _2008;
    float _2010;
    float _2012;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1996 = fma(_1792, cbSceneParam._m0[63u].w, fma(_1788, cbSceneParam._m0[63u].z, fma(_1784, cbSceneParam._m0[63u].y, _1780 * cbSceneParam._m0[63u].x)));
        float _1997 = fma(_1792, cbSceneParam._m0[60u].w, fma(_1788, cbSceneParam._m0[60u].z, fma(_1784, cbSceneParam._m0[60u].y, _1780 * cbSceneParam._m0[60u].x))) / _1996;
        float _1998 = fma(_1792, cbSceneParam._m0[61u].w, fma(_1788, cbSceneParam._m0[61u].z, fma(_1784, cbSceneParam._m0[61u].y, _1780 * cbSceneParam._m0[61u].x))) / _1996;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1997 >= cbSceneParam._m0[64u].x) && (_1998 >= cbSceneParam._m0[64u].y)) && (_1997 <= cbSceneParam._m0[64u].z)) && (_1998 <= cbSceneParam._m0[64u].w))
        {
            float _2136 = fma(_1792, cbSceneParam._m0[62u].w, fma(_1788, cbSceneParam._m0[62u].z, fma(_1784, cbSceneParam._m0[62u].y, _1780 * cbSceneParam._m0[62u].x))) / _1996;
            float _2140 = isnan(cbSceneParam._m0[41u].w) ? _2136 : (isnan(_2136) ? cbSceneParam._m0[41u].w : max(_2136, cbSceneParam._m0[41u].w));
            float _2183 = (cbSceneParam._m0[33u].x - sqrt(((_1794 * _1794) + (_1793 * _1793)) + (_1795 * _1795))) * cbSceneParam._m0[33u].y;
            float _4209 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
            float _2190 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1997, cbSceneParam._m0[33u].w + _1998), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1997, _1998 - cbSceneParam._m0[33u].z), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1997 - cbSceneParam._m0[33u].z, _1998 - cbSceneParam._m0[33u].w), _2140), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1997 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1998), _2140), 0.0)).x), vec4(0.25)));
            float _2194 = 1.0 - (_2190 * cbSceneParam._m0[34u].x);
            float _2195 = 1.0 - (_2190 * cbSceneParam._m0[34u].y);
            float _2196 = 1.0 - (_2190 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2196) ? _1944 : (isnan(_1944) ? _2196 : min(_1944, _2196));
            frontier_phi_34_33_ladder_1 = isnan(_2195) ? _1943 : (isnan(_1943) ? _2195 : min(_1943, _2195));
            frontier_phi_34_33_ladder_2 = isnan(_2194) ? _1942 : (isnan(_1942) ? _2194 : min(_1942, _2194));
        }
        else
        {
            frontier_phi_34_33_ladder = _1944;
            frontier_phi_34_33_ladder_1 = _1943;
            frontier_phi_34_33_ladder_2 = _1942;
        }
        _2008 = frontier_phi_34_33_ladder_2;
        _2010 = frontier_phi_34_33_ladder_1;
        _2012 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2008 = _1942;
        _2010 = _1943;
        _2012 = _1944;
    }
    uvec4 _2017 = floatBitsToUint(cbInstanceData._m0[_234 + 5u]);
    uint _2019 = _2017.x * 14u;
    uint _2020 = _2019 + 13u;
    float _2027 = _715 + (-1.0);
    float _2032 = (cbLight._m0[_2020].x * _2027) + 1.0;
    float _2033 = (cbLight._m0[_2020].y * _2027) + 1.0;
    float _2034 = (cbLight._m0[_2020].z * _2027) + 1.0;
    float _2035 = (cbLight._m0[_2020].w * _2027) + 1.0;
    uint _2036 = _2019 + 5u;
    float _2042 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2046 = _2019 + 4u;
    float _2055 = isnan(1.0) ? _2032 : (isnan(_2032) ? 1.0 : min(_2032, 1.0));
    uint _2059 = _2019 | 1u;
    float _2070 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_549, _550, _551));
    float _2073 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_549, _550, _551));
    float _4245 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _4256 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2078 = (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * 0.3183098733425140380859375;
    float _2080 = (isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0))) * 0.3183098733425140380859375;
    float _2087 = ((cbLight._m0[_2036].x * _2042) * _2080) + (((cbLight._m0[_2046].x * _2008) * _2055) * _2078);
    float _2088 = ((_2042 * cbLight._m0[_2036].y) * _2080) + (((cbLight._m0[_2046].y * _2010) * _2055) * _2078);
    float _2089 = ((_2042 * cbLight._m0[_2036].z) * _2080) + (((cbLight._m0[_2046].z * _2012) * _2055) * _2078);
    uvec4 _2093 = floatBitsToUint(cbLight._m0[_2019 + 12u]);
    bool _2095 = _2093.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2095)
    {
        _2197 = _2087;
        _2199 = _2088;
        _2201 = _2089;
    }
    else
    {
        uint _2205 = _2019 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2019 + 2u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4267 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _2224 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2087;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2088;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2089;
    }
    bool _2204 = _2093.y == 0u;
    float _2259;
    float _2261;
    float _2263;
    if (_2204)
    {
        _2259 = _2197;
        _2261 = _2199;
        _2263 = _2201;
    }
    else
    {
        uint _2432 = _2019 + 7u;
        float _2448 = (dot(vec3(cbLight._m0[_2019 + 3u].xyz), vec3(_549, _550, _551)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4283 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
        float _2451 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2259 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2197;
        _2261 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2199;
        _2263 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2201;
    }
    uint _2266 = _2019 + 8u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _552) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2019].x + _629;
    float _2282 = cbLight._m0[_2019].y + _630;
    float _2283 = cbLight._m0[_2019].z + _631;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2019].xyz));
    float _4299 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _4310 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _2295 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
    float _2296 = dot(vec3(_549, _550, _551), vec3(_2288, _2289, _2290));
    float _4321 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2299 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _2300 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2288, _2289, _2290));
    float _4332 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _2304 = _2280 * _2280;
    float _2308 = ((_2299 * _2299) * (_2304 + (-1.0))) + 1.0;
    float _2316 = exp2(log2(1.0 - (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) * 5.0);
    float _2317 = 0.959999978542327880859375 - _696;
    float _2319 = 0.959999978542327880859375 - _697;
    float _2320 = 0.959999978542327880859375 - _698;
    float _2327 = 1.0 - _2280;
    float _2338 = (0.5 / (((_2295 * ((_2294 * _2327) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2327) + _2280) * _2294))) * _2294;
    float _4343 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2340 = (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0))) * (_2304 / ((_2308 * _2308) * 3.141590118408203125));
    uint _2354 = _2019 + 9u;
    float _2365 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2059].w)) * _552) * 0.949999988079071044921875);
    float _2366 = _2365 * _2365;
    float _2367 = cbLight._m0[_2059].x + _629;
    float _2368 = cbLight._m0[_2059].y + _630;
    float _2369 = cbLight._m0[_2059].z + _631;
    float _2373 = inversesqrt(dot(vec3(_2367, _2368, _2369), vec3(_2367, _2368, _2369)));
    float _2374 = _2373 * _2367;
    float _2375 = _2373 * _2368;
    float _2376 = _2373 * _2369;
    float _2377 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2059].xyz));
    float _4354 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
    float _2380 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
    float _2381 = dot(vec3(_549, _550, _551), vec3(_2374, _2375, _2376));
    float _4365 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
    float _2384 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
    float _2385 = dot(vec3(cbLight._m0[_2059].xyz), vec3(_2374, _2375, _2376));
    float _4376 = isnan(0.0) ? _2385 : (isnan(_2385) ? 0.0 : max(_2385, 0.0));
    float _2389 = _2366 * _2366;
    float _2393 = ((_2384 * _2384) * (_2389 + (-1.0))) + 1.0;
    float _2400 = exp2(log2(1.0 - (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0)))) * 5.0);
    float _2407 = 1.0 - _2366;
    float _2417 = (0.5 / (((_2295 * ((_2380 * _2407) + _2366)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2407) + _2366) * _2380))) * _2380;
    float _4387 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_2389 / ((_2393 * _2393) * 3.141590118408203125));
    float _2429 = (((((_2400 * _2317) + _699) * cbLight._m0[_2354].x) * _2419) * _2042) + ((((cbLight._m0[_2266].x * _2008) * ((_2316 * _2317) + _699)) * _2340) * _2055);
    float _2430 = (((((_2400 * _2319) + _701) * cbLight._m0[_2354].y) * _2419) * _2042) + ((((cbLight._m0[_2266].y * _2010) * ((_2316 * _2319) + _701)) * _2340) * _2055);
    float _2431 = (((((_2400 * _2320) + _702) * cbLight._m0[_2354].z) * _2419) * _2042) + ((((cbLight._m0[_2266].z * _2012) * ((_2316 * _2320) + _702)) * _2340) * _2055);
    float _2487;
    float _2489;
    float _2491;
    if (_2095)
    {
        _2487 = _2429;
        _2489 = _2430;
        _2491 = _2431;
    }
    else
    {
        uint _2493 = _2019 + 2u;
        uint _2497 = _2019 + 10u;
        float _2511 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2493].w)) * _552) * 0.949999988079071044921875);
        float _2512 = _2511 * _2511;
        float _2513 = cbLight._m0[_2493].x + _629;
        float _2514 = cbLight._m0[_2493].y + _630;
        float _2515 = cbLight._m0[_2493].z + _631;
        float _2519 = inversesqrt(dot(vec3(_2513, _2514, _2515), vec3(_2513, _2514, _2515)));
        float _2520 = _2519 * _2513;
        float _2521 = _2519 * _2514;
        float _2522 = _2519 * _2515;
        float _2523 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2493].xyz));
        float _4398 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2526 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2527 = dot(vec3(_549, _550, _551), vec3(_2520, _2521, _2522));
        float _4409 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
        float _2530 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _2531 = dot(vec3(cbLight._m0[_2493].xyz), vec3(_2520, _2521, _2522));
        float _4420 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
        float _2535 = _2512 * _2512;
        float _2539 = ((_2530 * _2530) * (_2535 + (-1.0))) + 1.0;
        float _2546 = exp2(log2(1.0 - (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0)))) * 5.0);
        float _2553 = 1.0 - _2512;
        float _2563 = (0.5 / (((_2295 * ((_2526 * _2553) + _2512)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2553) + _2512) * _2526))) * _2526;
        float _4431 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2565 = (isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_2535 / ((_2539 * _2539) * 3.141590118408203125));
        float _2566 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
        _2487 = (((((_2546 * _2317) + _699) * cbLight._m0[_2497].x) * _2565) * _2566) + _2429;
        _2489 = (((((_2546 * _2319) + _701) * cbLight._m0[_2497].y) * _2565) * _2566) + _2430;
        _2491 = (((((_2546 * _2320) + _702) * cbLight._m0[_2497].z) * _2565) * _2566) + _2431;
    }
    float _2597;
    float _2599;
    float _2601;
    if (_2204)
    {
        _2597 = _2487;
        _2599 = _2489;
        _2601 = _2491;
    }
    else
    {
        uint _2608 = _2019 + 3u;
        uint _2612 = _2019 + 11u;
        float _2626 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2608].w)) * _552) * 0.949999988079071044921875);
        float _2627 = _2626 * _2626;
        float _2628 = cbLight._m0[_2608].x + _629;
        float _2629 = cbLight._m0[_2608].y + _630;
        float _2630 = cbLight._m0[_2608].z + _631;
        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
        float _2635 = _2634 * _2628;
        float _2636 = _2634 * _2629;
        float _2637 = _2634 * _2630;
        float _2638 = dot(vec3(_549, _550, _551), vec3(cbLight._m0[_2608].xyz));
        float _4447 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
        float _2641 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _2642 = dot(vec3(_549, _550, _551), vec3(_2635, _2636, _2637));
        float _4458 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
        float _2645 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _2646 = dot(vec3(cbLight._m0[_2608].xyz), vec3(_2635, _2636, _2637));
        float _4469 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0));
        float _2650 = _2627 * _2627;
        float _2654 = ((_2645 * _2645) * (_2650 + (-1.0))) + 1.0;
        float _2661 = exp2(log2(1.0 - (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) * 5.0);
        float _2668 = 1.0 - _2627;
        float _2678 = (0.5 / (((_2295 * ((_2641 * _2668) + _2627)) + 9.9999999392252902907785028219223e-09) + (((_2295 * _2668) + _2627) * _2641))) * _2641;
        float _4480 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
        float _2680 = (isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0))) * (_2650 / ((_2654 * _2654) * 3.141590118408203125));
        float _2681 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
        _2597 = (((((_2661 * _2317) + _699) * cbLight._m0[_2612].x) * _2680) * _2681) + _2487;
        _2599 = (((((_2661 * _2319) + _701) * cbLight._m0[_2612].y) * _2680) * _2681) + _2489;
        _2601 = (((((_2661 * _2320) + _702) * cbLight._m0[_2612].z) * _2680) * _2681) + _2491;
    }
    float _2747;
    float _2749;
    float _2751;
    float _2753;
    float _2755;
    float _2757;
    if (_2017.y == 0u)
    {
        uvec4 _2702 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2703 = _2702.x;
        uint _2714 = uint((float(_2702.y) * floor(float(uint(cbSceneParam._m0[85u].y * _638) / _2703))) + floor(float(uint(cbSceneParam._m0[85u].x * _637) / _2703)));
        float _2724 = (log2(_1795 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2725 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
        uint _2728 = uint(isnan(14.0) ? _2725 : (isnan(_2725) ? 14.0 : min(_2725, 14.0)));
        uvec4 _2733 = texelFetch(g_lightClusterGridBuffer, int(((_2728 << 2u) + (_2714 << 6u)) >> 2u));
        uint _2734 = _2733.x;
        uint _2735 = _2702.z;
        float _2814;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        if (((((1u << ((_2735 >> 4u) & 15u)) + 4294967295u) & _2734) == 0u) || ((_2735 & 240u) == 0u))
        {
            _2814 = 0.0;
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
        }
        else
        {
            float _2815;
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2959 = 0.0;
            float _2960 = 0.0;
            float _2961 = 0.0;
            float _2962 = 0.0;
            float _2963 = 0.0;
            float _2964 = 0.0;
            uint _2965 = 0u;
            uint _2974;
            bool _2975;
            for (;;)
            {
                _2974 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_2965 << 2u)) >> 2u)).x;
                _2975 = _2974 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2975)
                {
                    frontier_phi_66_pred = _2964;
                    frontier_phi_66_pred_1 = _2963;
                    frontier_phi_66_pred_2 = _2962;
                    frontier_phi_66_pred_3 = _2961;
                    frontier_phi_66_pred_4 = _2960;
                    frontier_phi_66_pred_5 = _2959;
                }
                else
                {
                    float _3083;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    uint _3089;
                    _3083 = _2959;
                    _3084 = _2960;
                    _3085 = _2961;
                    _3086 = _2962;
                    _3087 = _2963;
                    _3088 = _2964;
                    _3089 = _2974;
                    float _3015;
                    float _3016;
                    float _3017;
                    float _3018;
                    float _3019;
                    float _3020;
                    for (;;)
                    {
                        uint _3093 = uint(findLSB(_3089)) + (_2965 << 5u);
                        uint _3090 = (_3089 + 4294967295u) & _3089;
                        uint _3095 = _3093 * 48u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3095)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3095 + 3u)).x));
                        uint _3115 = (_3093 * 48u) + 4u;
                        vec4 _3128 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3134 = (_3093 * 48u) + 8u;
                        vec3 _3145 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3134)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3134 + 2u)).x));
                        float _3149 = _3109.x - _1793;
                        float _3150 = _3109.y - _1794;
                        float _3151 = _3109.z - _1795;
                        float _3152 = dot(vec3(_3149, _3150, _3151), vec3(_3149, _3150, _3151));
                        float _3155 = inversesqrt(_3152);
                        float _3156 = _3155 * _3149;
                        float _3157 = _3155 * _3150;
                        float _3158 = _3155 * _3151;
                        float _3159 = dot(vec3(_656, _659, _662), vec3(_3156, _3157, _3158));
                        float _3164 = 1.0 - (_3152 * _3109.w);
                        float _4506 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0));
                        float _3165 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3166 = sqrt(_3152) * _3128.w;
                        float _3169 = 1.39999997615814208984375 / (_3166 + 1.39999997615814208984375);
                        float _3170 = _3169 * _3169;
                        float _3173 = ((1.0 - _3170) * _3159) + _3170;
                        float _3176 = _3166 * _3166;
                        float _3180 = ((isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0))) * _3165) / ((_3176 * 0.699999988079071044921875) + 1.0);
                        float _3184 = (-0.0) - _1793;
                        float _3185 = (-0.0) - _1794;
                        float _3186 = (-0.0) - _1795;
                        float _3190 = inversesqrt(dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186)));
                        float _3191 = _3190 * _3184;
                        float _3192 = _3190 * _3185;
                        float _3193 = _3190 * _3186;
                        float _3200 = exp2(log2(1.0 / ((_3176 * 3.5) + 5.0)) * 0.25);
                        float _3201 = 1.0 - _731;
                        float _3208 = sqrt(1.0 - ((1.0 - (_3201 * _3201)) * (1.0 - (_3200 * _3200))));
                        float _3209 = _3208 * _3208;
                        float _3210 = _3209 * _3209;
                        float _3211 = _3191 + _3156;
                        float _3212 = _3192 + _3157;
                        float _3213 = _3193 + _3158;
                        float _3217 = inversesqrt(dot(vec3(_3211, _3212, _3213), vec3(_3211, _3212, _3213)));
                        float _3221 = dot(vec3(_656, _659, _662), vec3(_3191, _3192, _3193));
                        float _4522 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3224 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
                        float _3225 = dot(vec3(_656, _659, _662), vec3(_3217 * _3211, _3217 * _3212, _3217 * _3213));
                        float _4533 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3228 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
                        float _3232 = ((_3228 * _3228) * (_3210 + (-1.0))) + 1.0;
                        float _3233 = _3169 * _3209;
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3159) + _3234;
                        float _4544 = isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0));
                        float _3238 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3239 = 1.0 - _3209;
                        float _3249 = (0.5 / (((_3238 * ((_3224 * _3239) + _3209)) + 9.9999999392252902907785028219223e-09) + (((_3238 * _3239) + _3209) * _3224))) * _3238;
                        float _4555 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                        float _3260 = (((_3210 * 3.1415927410125732421875) * (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) / ((_3232 * _3232) * ((_3176 * 2.1991131305694580078125) + 3.141590118408203125))) * _3165;
                        _3018 = (_3180 * _3128.x) + _3086;
                        _3019 = (_3180 * _3128.y) + _3087;
                        _3020 = (_3180 * _3128.z) + _3088;
                        _3015 = (_3260 * _3145.x) + _3083;
                        _3016 = (_3260 * _3145.y) + _3084;
                        _3017 = (_3260 * _3145.z) + _3085;
                        if (_3090 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3083 = _3015;
                            _3084 = _3016;
                            _3085 = _3017;
                            _3086 = _3018;
                            _3087 = _3019;
                            _3088 = _3020;
                            _3089 = _3090;
                        }
                    }
                    frontier_phi_66_pred = _3020;
                    frontier_phi_66_pred_1 = _3019;
                    frontier_phi_66_pred_2 = _3018;
                    frontier_phi_66_pred_3 = _3017;
                    frontier_phi_66_pred_4 = _3016;
                    frontier_phi_66_pred_5 = _3015;
                }
                _2825 = frontier_phi_66_pred;
                _2823 = frontier_phi_66_pred_1;
                _2821 = frontier_phi_66_pred_2;
                _2819 = frontier_phi_66_pred_3;
                _2817 = frontier_phi_66_pred_4;
                _2815 = frontier_phi_66_pred_5;
                uint _2966 = _2965 + 1u;
                if (_2966 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2959 = _2815;
                    _2960 = _2817;
                    _2961 = _2819;
                    _2962 = _2821;
                    _2963 = _2823;
                    _2964 = _2825;
                    _2965 = _2966;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2814 = _2815;
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
        }
        uvec4 _2828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2829 = _2828.z;
        uint _2831 = (_2829 >> 8u) & 15u;
        float _2927;
        float _2929;
        float _2931;
        float _2933;
        float _2935;
        float _2937;
        if (((4294967295u << _2831) & _2734) == 0u)
        {
            _2927 = _2814;
            _2929 = _2816;
            _2931 = _2818;
            _2933 = _2820;
            _2935 = _2822;
            _2937 = _2824;
        }
        else
        {
            float _2952 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
            float _2953 = _2952 * _1793;
            float _2954 = _2952 * _1794;
            float _2955 = _2952 * _1795;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2831 < ((_2829 >> 12u) & 15u))
            {
                float _2928;
                float _2930;
                float _2932;
                float _2934;
                float _2936;
                float _2938;
                float _3066 = _2814;
                float _3067 = _2816;
                float _3068 = _2818;
                float _3069 = _2820;
                float _3070 = _2822;
                float _3071 = _2824;
                uint _3072 = _2831;
                uint _3081;
                bool _3082;
                for (;;)
                {
                    _3081 = texelFetch(g_lightClassification, int((((_2728 << 5u) + (_2714 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                    _3082 = _3081 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3082)
                    {
                        frontier_phi_72_pred = _3071;
                        frontier_phi_72_pred_1 = _3070;
                        frontier_phi_72_pred_2 = _3069;
                        frontier_phi_72_pred_3 = _3068;
                        frontier_phi_72_pred_4 = _3067;
                        frontier_phi_72_pred_5 = _3066;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3278 = _3066;
                        float _3279 = _3067;
                        float _3280 = _3068;
                        float _3281 = _3069;
                        float _3282 = _3070;
                        float _3283 = _3071;
                        uint _3284 = _3081;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3369;
                        float _3416;
                        bool _3417;
                        for (;;)
                        {
                            uint _3295 = ((_3072 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3356 = (_3295 * 40u) + 20u;
                            _3369 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3356)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3356 + 3u)).x));
                            uint _3372 = (_3295 * 40u) + 24u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            uint _3391 = (_3295 * 40u) + 28u;
                            vec4 _3404 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3391)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3391 + 3u)).x));
                            _3416 = fma(_1795, _3404.z, fma(_1794, _3404.y, _3404.x * _1793)) + _3404.w;
                            _3417 = !((fma(_1795, _3385.z, fma(_1794, _3385.y, _3385.x * _1793)) + _3385.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3417)
                            {
                                float _3444 = _3310.x - _1793;
                                float _3445 = _3310.y - _1794;
                                float _3446 = _3310.z - _1795;
                                float _3447 = dot(vec3(_3444, _3445, _3446), vec3(_3444, _3445, _3446));
                                float _3450 = inversesqrt(_3447);
                                float _3451 = _3450 * _3444;
                                float _3452 = _3450 * _3445;
                                float _3453 = _3450 * _3446;
                                float _3457 = 1.0 - (_3447 / (_3311 * _3311));
                                float _4566 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3458 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3462 = sqrt(_3447) * _3326.w;
                                float _3464 = 1.39999997615814208984375 / (_3462 + 1.39999997615814208984375);
                                float _3465 = _3464 * _3464;
                                float _3468 = ((1.0 - _3465) * dot(vec3(_3451, _3452, _3453), vec3(_656, _659, _662))) + _3465;
                                float _3471 = _3462 * _3462;
                                float _3475 = (fma(_1795, _3353.z, fma(_1794, _3353.y, _3353.x * _1793)) + _3353.w) / _3416;
                                float _3476 = (fma(_1795, _3369.z, fma(_1794, _3369.y, _3369.x * _1793)) + _3369.w) / _3416;
                                float _3480 = 1.0 - dot(vec2(_3475, _3476), vec2(_3475, _3476));
                                float _4582 = isnan(0.0) ? _3480 : (isnan(_3480) ? 0.0 : max(_3480, 0.0));
                                float _3481 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
                                float _3482 = _3481 * (((isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0))) * _3458) / ((_3471 * 0.699999988079071044921875) + 1.0));
                                float _3494 = exp2(log2(1.0 / ((_3471 * 3.5) + 5.0)) * 0.25);
                                float _3495 = 1.0 - _731;
                                float _3502 = sqrt(1.0 - ((1.0 - (_3495 * _3495)) * (1.0 - (_3494 * _3494))));
                                float _3503 = _3502 * _3502;
                                float _3504 = _3503 * _3503;
                                float _3505 = _3451 - _2953;
                                float _3506 = _3452 - _2954;
                                float _3507 = _3453 - _2955;
                                float _3511 = inversesqrt(dot(vec3(_3505, _3506, _3507), vec3(_3505, _3506, _3507)));
                                float _3515 = dot(vec3(_656, _659, _662), vec3((-0.0) - _2953, (-0.0) - _2954, (-0.0) - _2955));
                                float _4593 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3518 = isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0));
                                float _3519 = dot(vec3(_656, _659, _662), vec3(_3511 * _3505, _3511 * _3506, _3511 * _3507));
                                float _4604 = isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0));
                                float _3522 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3526 = ((_3522 * _3522) * (_3504 + (-1.0))) + 1.0;
                                float _3527 = _3464 * _3503;
                                float _3528 = _3527 * _3527;
                                float _3534 = ((1.0 - _3528) * dot(vec3(_656, _659, _662), vec3(_3451, _3452, _3453))) + _3528;
                                float _4615 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3536 = 1.0 - _3503;
                                float _3546 = (0.5 / (((_3535 * ((_3518 * _3536) + _3503)) + 9.9999999392252902907785028219223e-09) + (((_3535 * _3536) + _3503) * _3518))) * _3535;
                                float _4626 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3556 = (_3481 * _3458) * (((_3504 * 3.1415927410125732421875) * (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) / ((_3526 * _3526) * ((_3471 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3482 * _3326.y;
                                frontier_phi_78_pred_1 = _3482 * _3326.x;
                                frontier_phi_78_pred_2 = _3556 * _3338.z;
                                frontier_phi_78_pred_3 = _3556 * _3338.y;
                                frontier_phi_78_pred_4 = _3556 * _3338.x;
                                frontier_phi_78_pred_5 = _3482 * _3326.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3564 = frontier_phi_78_pred;
                            _3563 = frontier_phi_78_pred_1;
                            _3562 = frontier_phi_78_pred_2;
                            _3561 = frontier_phi_78_pred_3;
                            _3560 = frontier_phi_78_pred_4;
                            _3565 = frontier_phi_78_pred_5;
                            _3268 = _3563 + _3281;
                            _3269 = _3564 + _3282;
                            _3270 = _3565 + _3283;
                            _3265 = _3560 + _3278;
                            _3266 = _3561 + _3279;
                            _3267 = _3562 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3270;
                        frontier_phi_72_pred_1 = _3269;
                        frontier_phi_72_pred_2 = _3268;
                        frontier_phi_72_pred_3 = _3267;
                        frontier_phi_72_pred_4 = _3266;
                        frontier_phi_72_pred_5 = _3265;
                    }
                    _2938 = frontier_phi_72_pred;
                    _2936 = frontier_phi_72_pred_1;
                    _2934 = frontier_phi_72_pred_2;
                    _2932 = frontier_phi_72_pred_3;
                    _2930 = frontier_phi_72_pred_4;
                    _2928 = frontier_phi_72_pred_5;
                    uint _3073 = _3072 + 1u;
                    if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3066 = _2928;
                        _3067 = _2930;
                        _3068 = _2932;
                        _3069 = _2934;
                        _3070 = _2936;
                        _3071 = _2938;
                        _3072 = _3073;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2938;
                frontier_phi_60_61_ladder_1 = _2936;
                frontier_phi_60_61_ladder_2 = _2932;
                frontier_phi_60_61_ladder_3 = _2930;
                frontier_phi_60_61_ladder_4 = _2928;
                frontier_phi_60_61_ladder_5 = _2934;
            }
            else
            {
                frontier_phi_60_61_ladder = _2824;
                frontier_phi_60_61_ladder_1 = _2822;
                frontier_phi_60_61_ladder_2 = _2818;
                frontier_phi_60_61_ladder_3 = _2816;
                frontier_phi_60_61_ladder_4 = _2814;
                frontier_phi_60_61_ladder_5 = _2820;
            }
            _2927 = frontier_phi_60_61_ladder_4;
            _2929 = frontier_phi_60_61_ladder_3;
            _2931 = frontier_phi_60_61_ladder_2;
            _2933 = frontier_phi_60_61_ladder_5;
            _2935 = frontier_phi_60_61_ladder_1;
            _2937 = frontier_phi_60_61_ladder;
        }
        float _2942 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _2747 = (_2942 * _2933) + _2259;
        _2749 = (_2942 * _2935) + _2261;
        _2751 = (_2942 * _2937) + _2263;
        _2753 = ((_2927 * _699) * _2942) + _2597;
        _2755 = ((_2929 * _701) * _2942) + _2599;
        _2757 = ((_2931 * _702) * _2942) + _2601;
    }
    else
    {
        _2747 = _2259;
        _2749 = _2261;
        _2751 = _2263;
        _2753 = _2597;
        _2755 = _2599;
        _2757 = _2601;
    }
    float _4642 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _4653 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _4664 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
    uint _2777 = _234 + 6u;
    float _2785 = _637 / cbSceneParam._m0[86u].x;
    float _2786 = _638 / cbSceneParam._m0[86u].y;
    vec4 _2800 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, (log2((isnan(cbSceneParam._m0[77u].w) ? _571 : (isnan(_571) ? cbSceneParam._m0[77u].w : min(_571, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2802 = _2800.x;
    float _2803 = _2800.y;
    float _2804 = _2800.z;
    float _2805 = _2800.w;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    if (_571 > cbSceneParam._m0[78u].w)
    {
        float _2839 = isnan(_571) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _571 : min(cbSceneParam._m0[80u].w, _571));
        float _2840 = _2839 / _571;
        float _2851 = _2840 * _622;
        float _2852 = _623 * _2840;
        float _2853 = (-0.0) - _2852;
        float _2855 = _2840 * _624;
        float _2857 = (cbSceneParam._m0[77u].w * _2853) / _2839;
        float _2858 = _2857 + cbSceneParam._m0[79u].w;
        float _2859 = cbSceneParam._m0[79u].w - _2852;
        float _2865 = sqrt(((_2851 * _2851) + (_2852 * _2852)) + (_2855 * _2855));
        float _2868 = (1.0 - (cbSceneParam._m0[77u].w / _2839)) * _2865;
        float _2873 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2875 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3028;
        if (abs((_2853 - _2857) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3028 = ((((_2858 > 0.0) ? exp2(_2873 * _2858) : (2.0 - exp2(_2875 * _2858))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2868;
        }
        else
        {
            float _2988 = 1.0 / cbSceneParam._m0[80u].x;
            float _2989 = isnan(_2859) ? _2858 : (isnan(_2858) ? _2859 : max(_2858, _2859));
            float _2990 = isnan(_2859) ? _2858 : (isnan(_2858) ? _2859 : min(_2858, _2859));
            float _2999 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : min(_2989, 0.0));
            float _3000 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : min(_2990, 0.0));
            _3028 = ((abs(_2865 / _2853) * cbSceneParam._m0[80u].y) * ((((_2999 - _3000) * 2.0) - ((exp2(_2873 * (isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0)))) - exp2(_2873 * (isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0))))) * _2988)) - ((exp2(_2875 * _2999) - exp2(_2875 * _3000)) * _2988))) + (_2868 * cbSceneParam._m0[80u].z);
        }
        vec4 _3030 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2785, _2786, 1.0), 0.0);
        float _3039 = exp2((_3028 * (-1.44269502162933349609375)) * (1.0 - _3030.w));
        float _3040 = log2(_3039);
        float _3056 = log2(_2805);
        _2877 = (exp2(_3056 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].x)) * _3030.x) / cbSceneParam._m0[78u].x)) + _2802;
        _2879 = (exp2(_3056 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].y)) * _3030.y) / cbSceneParam._m0[78u].y)) + _2803;
        _2881 = (exp2(_3056 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3040 * cbSceneParam._m0[78u].z)) * _3030.z) / cbSceneParam._m0[78u].z)) + _2804;
        _2883 = _3039 * _2805;
    }
    else
    {
        _2877 = _2802;
        _2879 = _2803;
        _2881 = _2804;
        _2883 = _2805;
    }
    float _2895 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2896 = _2895 == 3.0;
    float _2897 = log2(_2883);
    float _2904 = exp2(_2897 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2747 + ((isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0))) * _715))) + ((_2753 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2905 = exp2(_2897 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_2749 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _715))) + ((_2755 + ((isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2906 = exp2(_2897 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2751 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _715))) + ((_2757 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1523)) * cbPerFrame._m0[3u].x));
    float _2915 = (_2895 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2915 * (_2896 ? _2904 : (_2904 + (cbSceneParam._m0[72u].w * _2877)));
    SV_Target.y = _2915 * (_2896 ? _2905 : (_2905 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.z = _2915 * (_2896 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.w = cbInstanceData._m0[_2777].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2777].w;
}


