#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 11) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 12) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 15) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_24;
layout(set = 0, binding = 16) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_26;
layout(set = 0, binding = 2) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_10;
layout(set = 0, binding = 21) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_4;
layout(set = 0, binding = 22) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 23) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 24) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 3) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 7) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 8) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 9) uniform texture2D M_MS_Mask_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TEXCOORD;
layout(location = 6) in vec4 TEXCOORD_5;
layout(location = 7) in vec4 TEXCOORD_8;
layout(location = 8) in vec4 TEXCOORD_11;
layout(location = 9) in vec4 TEXCOORD_14;
layout(location = 10) in float TEXCOORD_20;
layout(location = 10, component = 1) in float TEXCOORD_21;
layout(location = 10, component = 2) in float TEXCOORD_22;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1470;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    uint _258 = uint(roundEven(NORMAL.w)) * 13u;
    uint _264 = _258 + 1u;
    uint _268 = _258 + 2u;
    float _277 = sqrt(((cbInstanceData._m0[_264].x * cbInstanceData._m0[_264].x) + (cbInstanceData._m0[_258].x * cbInstanceData._m0[_258].x)) + (cbInstanceData._m0[_268].x * cbInstanceData._m0[_268].x));
    float _278 = _277 * TEXCOORD.z;
    float _279 = _277 * TEXCOORD.w;
    vec4 _298 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _322 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _327 = _322.x * cbMtdParam._m0[11u].x;
    float _328 = _322.y * cbMtdParam._m0[11u].y;
    float _329 = _322.z * cbMtdParam._m0[11u].z;
    vec4 _348 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * _278) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _279) + cbTextureTilingScale._m0[5u].w));
    vec4 _368 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[22u].x * TEXCOORD.x) + cbTextureTilingScale._m0[22u].z, (cbTextureTilingScale._m0[22u].y * TEXCOORD.y) + cbTextureTilingScale._m0[22u].w));
    vec4 _407 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[27u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _409 = _407.x;
    float _421 = dot(vec4(_409, _407.yzw), vec4(cbMtdParam._m0[28u].zw, cbMtdParam._m0[29u].x, 0.0));
    float _438 = ((cbMtdParam._m0[19u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.x) - _368.x) * 2.0) - ((((_409 - _421) * cbMtdParam._m0[23u].w) + _421) * cbMtdParam._m0[22u].w))) + 1.0;
    float _4077 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
    float _446 = (_439 * ((_348.x * cbMtdParam._m0[12u].x) - _327)) + _327;
    float _447 = (_439 * ((_348.y * cbMtdParam._m0[12u].y) - _328)) + _328;
    float _448 = (_439 * ((_348.z * cbMtdParam._m0[12u].z) - _329)) + _329;
    vec4 _465 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * _278) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * _279) + cbTextureTilingScale._m0[3u].w));
    vec4 _485 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[26u].y * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].z * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _487 = _485.x;
    float _497 = dot(vec4(_487, _485.yzw), vec4(cbMtdParam._m0[30u].xyz, 0.0));
    float _511 = ((cbMtdParam._m0[25u].y * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.y) - _368.y) * 2.0) - ((((_487 - _497) * cbMtdParam._m0[23u].w) + _497) * cbMtdParam._m0[20u].w))) + 1.0;
    float _4088 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
    float _519 = (_512 * ((_465.x * cbMtdParam._m0[13u].x) - _446)) + _446;
    float _520 = (_512 * ((_465.y * cbMtdParam._m0[13u].y) - _447)) + _447;
    float _521 = (_512 * ((_465.z * cbMtdParam._m0[13u].z) - _448)) + _448;
    vec4 _540 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[24u].x * _278) + cbTextureTilingScale._m0[24u].z, (cbTextureTilingScale._m0[24u].y * _279) + cbTextureTilingScale._m0[24u].w));
    vec4 _557 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_26, SS_WrapLinear), vec2(((cbMtdParam._m0[25u].w * TEXCOORD.z) * cbTextureTilingScale._m0[16u].x) + cbTextureTilingScale._m0[16u].z, ((cbMtdParam._m0[26u].x * TEXCOORD.w) * cbTextureTilingScale._m0[16u].y) + cbTextureTilingScale._m0[16u].w));
    float _559 = _557.x;
    float _569 = dot(vec4(_559, _557.yzw), vec4(cbMtdParam._m0[30u].w, cbMtdParam._m0[31u].xy, 0.0));
    float _581 = ((cbMtdParam._m0[25u].x * (-1.2000000476837158203125)) * ((((1.0 - TEXCOORD_5.z) - _368.z) * 2.0) - ((((_559 - _569) * cbMtdParam._m0[23u].w) + _569) * cbMtdParam._m0[20u].z))) + 1.0;
    float _4099 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _582 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
    float _595 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * _298.x) * ((_582 * ((_540.x * cbMtdParam._m0[14u].x) - _519)) + _519);
    float _598 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * _298.y) * ((_582 * ((_540.y * cbMtdParam._m0[14u].y) - _520)) + _520);
    float _601 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * _298.z) * ((_582 * ((_540.z * cbMtdParam._m0[14u].z) - _521)) + _521);
    vec4 _619 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * _278) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * _279) + cbTextureTilingScale._m0[4u].w));
    vec4 _636 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _638 = _636.x;
    float _639 = _636.y;
    float _640 = _636.z;
    float _647 = ((_619.x - _638) * _439) + _638;
    float _648 = ((_619.y - _639) * _439) + _639;
    float _649 = ((_619.z - _640) * _439) + _640;
    vec4 _661 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * _278) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _279) + cbTextureTilingScale._m0[2u].w));
    float _672 = ((_661.x - _647) * _512) + _647;
    float _673 = ((_661.y - _648) * _512) + _648;
    float _674 = ((_661.z - _649) * _512) + _649;
    vec4 _686 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[23u].x * _278) + cbTextureTilingScale._m0[23u].z, (cbTextureTilingScale._m0[23u].y * _279) + cbTextureTilingScale._m0[23u].w));
    float _699 = ((_686.z - _674) * _582) + _674;
    float _702 = ((((_686.x - _672) * _582) + _672) * 2.0) + (-1.0);
    float _704 = ((((_686.y - _673) * _582) + _673) * 2.0) + (-1.0);
    float _705 = dot(vec2(_702, _704), vec2(_702, _704));
    float _4110 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _710 = sqrt(1.0 - (isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))));
    vec4 _724 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _749 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * _278) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _279) + cbTextureTilingScale._m0[11u].w));
    float _751 = _749.x;
    float _752 = 1.0 - _751;
    float _767 = (TEXCOORD_8.w - ((cbMtdParam._m0[21u].z * (1.0 - TEXCOORD_8.w)) * ((((_751 - _752) * cbMtdParam._m0[24u].z) + _752) + 0.00999999977648258209228515625))) * (cbMtdParam._m0[21u].w + 1.0);
    float _4121 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _768 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
    float _775 = (_768 * (cbMtdParam._m0[17u].x - _595)) + _595;
    float _776 = (_768 * (cbMtdParam._m0[17u].y - _598)) + _598;
    float _777 = (_768 * (cbMtdParam._m0[17u].z - _601)) + _601;
    vec4 _803 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_1, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _805 = _803.x;
    float _822 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * _278) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _279) + cbTextureTilingScale._m0[9u].w)).x - _805) * _439) + _805;
    float _839 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[21u].x * _278) + cbTextureTilingScale._m0[21u].z, (cbTextureTilingScale._m0[21u].y * _279) + cbTextureTilingScale._m0[21u].w)).x - _822) * _512) + _822;
    float _857 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * _278) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _279) + cbTextureTilingScale._m0[10u].w)).x - _839) * _582) + _839;
    float _861 = ((texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w)).x - _857) * cbMtdParam._m0[19u].z) + _857;
    float _863 = _861 - (_861 * _768);
    float _867 = (cbMtdParam._m0[19u].w * (_724.z - _699)) + _699;
    vec4 _880 = texture(sampler2D(M_MS_Mask_M1_snp_0_Texture2D_24, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * _278) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * _279) + cbTextureTilingScale._m0[15u].w));
    float _887 = (_880.x * 2.0) + (-1.0);
    float _888 = (_880.y * 2.0) + (-1.0);
    float _889 = dot(vec2(_887, _888), vec2(_887, _888));
    float _4132 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _897 = (_768 * (_880.z - _867)) + _867;
    float _900 = (((_724.x * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _702;
    float _901 = (((_724.y * 2.0) + (-1.0)) * cbMtdParam._m0[25u].z) + _704;
    float _913 = (((_887 - _900) + (cbMtdParam._m0[21u].x * _900)) * _768) + _900;
    float _914 = (((_888 - _901) + (cbMtdParam._m0[21u].x * _901)) * _768) + _901;
    float _915 = (_768 * (sqrt(1.0 - (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0)))) - _710)) + _710;
    float _917 = cbMtdParam._m0[22u].x + _724.w;
    float _920 = fma(_915, _245 * NORMAL.x, fma(_914, _252 * TANGENT.x, (_238 * _230) * _913));
    float _923 = fma(_915, _245 * NORMAL.y, fma(_914, _252 * TANGENT.y, (_238 * _231) * _913));
    float _926 = fma(_915, _245 * NORMAL.z, fma(_914, _252 * TANGENT.z, (_238 * _232) * _913));
    float _930 = inversesqrt(dot(vec3(_920, _923, _926), vec3(_920, _923, _926)));
    float _931 = _930 * _920;
    float _932 = _930 * _923;
    float _933 = _930 * _926;
    float _4143 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _934 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
    float _4154 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _4165 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _4176 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _4187 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _4198 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _939 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _953 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _993 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1003 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _993);
    float _1004 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _993);
    float _1005 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _993);
    float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
    float _1010 = _1003 * _1009;
    float _1011 = _1004 * _1009;
    float _1012 = _1005 * _1009;
    float _1018 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1019 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1037 = fma(_933, cbSceneParam._m0[5u].z, fma(_932, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _931));
    float _1040 = fma(_933, cbSceneParam._m0[6u].z, fma(_932, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _931));
    float _1043 = fma(_933, cbSceneParam._m0[7u].z, fma(_932, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _931));
    uint _1057 = (_258 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1063 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)))) * cbInstanceData._m0[_1057].x;
    float _1064 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) * cbInstanceData._m0[_1057].y;
    float _1065 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0)))) * cbInstanceData._m0[_1057].z;
    float _4209 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
    float _1066 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _4220 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
    float _1067 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
    float _1068 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _1069 = 1.0 - _939;
    float _1070 = _1066 * _1069;
    float _1071 = _1067 * _1069;
    float _1072 = _1068 * _1069;
    float _1077 = (_1066 + (-0.039999999105930328369140625)) * _939;
    float _1078 = (_1067 + (-0.039999999105930328369140625)) * _939;
    float _1079 = (_1068 + (-0.039999999105930328369140625)) * _939;
    float _1080 = _1077 + 0.039999999105930328369140625;
    float _1082 = _1078 + 0.039999999105930328369140625;
    float _1083 = _1079 + 0.039999999105930328369140625;
    vec4 _1092 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1018, cbSceneParam._m0[86u].y * _1019));
    float _1096 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * TEXCOORD_5.w) * _1092.x;
    float _1097 = dot(vec3(_931, _932, _933), vec3(_1010, _1011, _1012));
    float _1100 = _1097 * 2.0;
    float _1104 = (_1100 * _931) - _1010;
    float _1105 = (_1100 * _932) - _1011;
    float _1106 = (_1100 * _933) - _1012;
    float _1110 = abs(dot(vec3(_1010, _1011, _1012), vec3(_931, _932, _933)));
    float _4242 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1112 = sqrt(_934);
    float _1125 = exp2((_1112 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1112 * 3.0));
    float _1131 = (1.0 - _1125) * ((_1112 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1132 = _1125 * _1112;
    float _1160 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1164 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1168 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1469;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1194 = fma(_1168, cbModelParam._m0[26u].z, fma(_1164, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1160));
        float _1198 = fma(_1168, cbModelParam._m0[27u].z, fma(_1164, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1160));
        float _1202 = fma(_1168, cbModelParam._m0[28u].z, fma(_1164, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1160));
        float _1227 = _1160 + _931;
        float _1228 = _1164 + _932;
        float _1229 = _1168 + _933;
        float _1239 = fma(_1229, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227)) - _1194;
        float _1240 = fma(_1229, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227)) - _1198;
        float _1241 = fma(_1229, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227)) - _1202;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1258 = ((_1245 * _1239) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1194 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1240) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1198 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1245 * _1241) / cbModelParam._m0[34u].z) + ((((((_1202 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1263 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1270 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1277 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        vec4 _1284 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1258, _1259, _1260), 0.0);
        float _1297 = exp2((_1263.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1263.x + (-0.5));
        float _1299 = _1297 * (_1263.y + (-0.5));
        float _1300 = _1297 * (_1263.z + (-0.5));
        float _1307 = exp2((_1270.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1270.x + (-0.5));
        float _1309 = _1307 * (_1270.y + (-0.5));
        float _1310 = _1307 * (_1270.z + (-0.5));
        float _1317 = exp2((_1277.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1277.x + (-0.5));
        float _1319 = _1317 * (_1277.y + (-0.5));
        float _1320 = _1317 * (_1277.z + (-0.5));
        float _1327 = exp2((_1284.w + (-0.5)) * 20.0) * 2.0;
        float _1328 = _1327 * (_1284.x + (-0.5));
        float _1329 = _1327 * (_1284.y + (-0.5));
        float _1330 = _1327 * (_1284.z + (-0.5));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = _1298 * 0.5;
        float _1335 = _1308 * 0.5;
        float _1336 = _1318 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1351 = (dot(vec3(_931, _932, _933), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1361 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4290 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1363 + 1.0))) + _1368) * _1331;
        float _1378 = _1299 * 0.5;
        float _1379 = _1309 * 0.5;
        float _1380 = _1319 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_931, _932, _933), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4301 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4312 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4323 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_1405 + 1.0))) + _1410) * _1332;
        float _1420 = _1300 * 0.5;
        float _1421 = _1310 * 0.5;
        float _1422 = _1320 * 0.5;
        float _1423 = dot(vec3(_1420, _1421, _1422), vec3(_1420, _1421, _1422));
        float _1428 = (_1423 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1423);
        float _1436 = (dot(vec3(_931, _932, _933), vec3(_1428 * _1420, _1428 * _1421, _1428 * _1422)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1445 = sqrt(((_1421 * _1421) + (_1420 * _1420)) + (_1422 * _1422)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1447 = _1446 * 2.0;
        float _1451 = (1.0 - _1446) / (_1446 + 1.0);
        float _4356 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1461 = ((((1.0 - _1452) * (_1447 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1447 + 1.0))) + _1452) * _1333;
        _1469 = _1300;
        _1471 = _1299;
        _1472 = _1298;
        _1473 = _1310;
        _1474 = _1309;
        _1475 = _1308;
        _1476 = _1320;
        _1477 = _1319;
        _1478 = _1318;
        _1479 = _1333;
        _1480 = _1332;
        _1481 = _1331;
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0)));
    }
    else
    {
        _1469 = _1470;
        _1471 = _1470;
        _1472 = _1470;
        _1473 = _1470;
        _1474 = _1470;
        _1475 = _1470;
        _1476 = _1470;
        _1477 = _1470;
        _1478 = _1470;
        _1479 = _1470;
        _1480 = _1470;
        _1481 = _1470;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1507 = fma(_1168, cbModelParam._m0[30u].z, fma(_1164, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1160));
        float _1511 = fma(_1168, cbModelParam._m0[31u].z, fma(_1164, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1160));
        float _1515 = fma(_1168, cbModelParam._m0[32u].z, fma(_1164, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1160));
        float _1538 = _1160 + _931;
        float _1539 = _1164 + _932;
        float _1540 = _1168 + _933;
        float _1550 = fma(_1540, cbModelParam._m0[30u].z, fma(_1539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1538)) - _1507;
        float _1551 = fma(_1540, cbModelParam._m0[31u].z, fma(_1539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1538)) - _1511;
        float _1552 = fma(_1540, cbModelParam._m0[32u].z, fma(_1539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1538)) - _1515;
        float _1556 = inversesqrt(dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552)));
        float _1569 = ((_1556 * _1550) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1507 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1556 * _1551) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1511 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1556 * _1552) / cbModelParam._m0[35u].z) + ((((((_1515 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        float _1606 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1573.x + (-0.5));
        float _1608 = _1606 * (_1573.y + (-0.5));
        float _1609 = _1606 * (_1573.z + (-0.5));
        float _1616 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1580.x + (-0.5));
        float _1618 = _1616 * (_1580.y + (-0.5));
        float _1619 = _1616 * (_1580.z + (-0.5));
        float _1626 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1587.x + (-0.5));
        float _1628 = _1626 * (_1587.y + (-0.5));
        float _1629 = _1626 * (_1587.z + (-0.5));
        float _1636 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1594.x + (-0.5));
        float _1638 = _1636 * (_1594.y + (-0.5));
        float _1639 = _1636 * (_1594.z + (-0.5));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = _1607 * 0.5;
        float _1644 = _1617 * 0.5;
        float _1645 = _1627 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_931, _932, _933), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4397 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4408 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4419 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_1670 + 1.0))) + _1675) * _1640;
        float _1685 = _1608 * 0.5;
        float _1686 = _1618 * 0.5;
        float _1687 = _1628 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_931, _932, _933), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4430 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4441 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4452 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_1712 + 1.0))) + _1717) * _1641;
        float _1727 = _1609 * 0.5;
        float _1728 = _1619 * 0.5;
        float _1729 = _1629 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_931, _932, _933), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4485 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1754 + 1.0))) + _1759) * _1642;
        _1776 = _1609;
        _1777 = _1608;
        _1778 = _1607;
        _1779 = _1619;
        _1780 = _1618;
        _1781 = _1617;
        _1782 = _1629;
        _1783 = _1628;
        _1784 = _1627;
        _1785 = _1642;
        _1786 = _1641;
        _1787 = _1640;
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
    }
    else
    {
        _1776 = _1470;
        _1777 = _1470;
        _1778 = _1470;
        _1779 = _1470;
        _1780 = _1470;
        _1781 = _1470;
        _1782 = _1470;
        _1783 = _1470;
        _1784 = _1470;
        _1785 = _1470;
        _1786 = _1470;
        _1787 = _1470;
        _1788 = 0.0;
        _1789 = 0.0;
        _1790 = 0.0;
    }
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1482)) + _1482;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1483)) + _1483;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1484)) + _1484;
    float _1823 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1800));
    float _1844 = _1104 * 0.5;
    float _1845 = _1105 * 0.5;
    float _1846 = _1106 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1469, _1473, _1476, _1479));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _934);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1960 = fma(_1168, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1160)) + cbModelParam._m0[13u].w;
        float _1964 = fma(_1168, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1160)) + cbModelParam._m0[14u].w;
        float _1968 = fma(_1168, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1160)) + cbModelParam._m0[15u].w;
        float _1971 = fma(_1106, cbModelParam._m0[13u].z, fma(_1105, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1104));
        float _1974 = fma(_1106, cbModelParam._m0[14u].z, fma(_1105, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1104));
        float _1977 = fma(_1106, cbModelParam._m0[15u].z, fma(_1105, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1104));
        float _2005;
        if (_1971 > 0.0)
        {
            _2005 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2005 = frontier_phi_14_12_ladder;
        }
        float _2177;
        if (_1974 > 0.0)
        {
            _2177 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2177 = frontier_phi_23_19_ladder;
        }
        float _2472;
        if (_1977 > 0.0)
        {
            _2472 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2472 = frontier_phi_35_30_ladder;
        }
        float _2474 = isnan(_2177) ? _2005 : (isnan(_2005) ? _2177 : min(_2005, _2177));
        float _2475 = isnan(_2472) ? _2474 : (isnan(_2474) ? _2472 : min(_2474, _2472));
        float _2479 = (_2475 * _1971) + _1960;
        float _2480 = (_2475 * _1974) + _1964;
        float _2481 = (_2475 * _1977) + _1968;
        float _2482 = _2475 * 9.9999997473787516355514526367188e-05;
        float _2484 = (-1.0) - _2482;
        float _2486 = _2482 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2481 > _2486) || ((_2481 < _2484) || ((_2480 > _2486) || ((_2480 < _2484) || ((_2479 < _2484) || (_2479 > _2486))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2481, cbModelParam._m0[9u].z, fma(_2480, cbModelParam._m0[9u].y, _2479 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2481, cbModelParam._m0[10u].z, fma(_2480, cbModelParam._m0[10u].y, _2479 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2481, cbModelParam._m0[11u].z, fma(_2480, cbModelParam._m0[11u].y, _2479 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_13_35_ladder = _2626.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2626.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2626.x * cbModelParam._m0[1u].y;
        }
        _1993 = frontier_phi_13_35_ladder_2;
        _1995 = frontier_phi_13_35_ladder_1;
        _1997 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1104, _1105, _1106), _1913);
        _1993 = _1981.x * cbModelParam._m0[1u].y;
        _1995 = _1981.y * cbModelParam._m0[1u].y;
        _1997 = _1981.z * cbModelParam._m0[1u].y;
    }
    float _2001 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _934);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2001 : min(cbModelParam._m0[25u].w, _2001));
    float _2092;
    float _2094;
    float _2096;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2056 = fma(_1168, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1160)) + cbModelParam._m0[21u].w;
        float _2060 = fma(_1168, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1160)) + cbModelParam._m0[22u].w;
        float _2064 = fma(_1168, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1160)) + cbModelParam._m0[23u].w;
        float _2067 = fma(_1106, cbModelParam._m0[21u].z, fma(_1105, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1104));
        float _2070 = fma(_1106, cbModelParam._m0[22u].z, fma(_1105, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1104));
        float _2073 = fma(_1106, cbModelParam._m0[23u].z, fma(_1105, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1104));
        float _2182;
        if (_2067 > 0.0)
        {
            _2182 = abs((1.0 - _2056) / _2067);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2056 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2182 = frontier_phi_25_21_ladder;
        }
        float _2499;
        if (_2070 > 0.0)
        {
            _2499 = abs((1.0 - _2060) / _2070);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2060 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2499 = frontier_phi_37_32_ladder;
        }
        float _2837;
        if (_2073 > 0.0)
        {
            _2837 = abs((1.0 - _2064) / _2073);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2064 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2837 = frontier_phi_47_44_ladder;
        }
        float _2839 = isnan(_2499) ? _2182 : (isnan(_2182) ? _2499 : min(_2182, _2499));
        float _2840 = isnan(_2837) ? _2839 : (isnan(_2839) ? _2837 : min(_2839, _2837));
        float _2844 = (_2840 * _2067) + _2056;
        float _2845 = (_2840 * _2070) + _2060;
        float _2846 = (_2840 * _2073) + _2064;
        float _2847 = _2840 * 9.9999997473787516355514526367188e-05;
        float _2848 = (-1.0) - _2847;
        float _2850 = _2847 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2846 > _2850) || ((_2846 < _2848) || ((_2845 > _2850) || ((_2845 < _2848) || ((_2844 < _2848) || (_2844 > _2850))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2968 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2846, cbModelParam._m0[17u].z, fma(_2845, cbModelParam._m0[17u].y, _2844 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2846, cbModelParam._m0[18u].z, fma(_2845, cbModelParam._m0[18u].y, _2844 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2846, cbModelParam._m0[19u].z, fma(_2845, cbModelParam._m0[19u].y, _2844 * cbModelParam._m0[19u].x))), _2002);
            frontier_phi_22_47_ladder = _2968.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2968.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2968.x * cbModelParam._m0[1u].z;
        }
        _2092 = frontier_phi_22_47_ladder_2;
        _2094 = frontier_phi_22_47_ladder_1;
        _2096 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1104, _1105, _1106), _2002);
        _2092 = _2076.x * cbModelParam._m0[1u].z;
        _2094 = _2076.y * cbModelParam._m0[1u].z;
        _2096 = _2076.z * cbModelParam._m0[1u].z;
    }
    float _2109 = (((_1131 * _1080) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2092 - _1993)) + _1993);
    float _2111 = (((_1131 * _1082) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2094 - _1995)) + _1995);
    float _2113 = (((_1131 * _1083) + _1132) * _1096) * ((cbModelParam._m0[1u].w * (_2096 - _1997)) + _1997);
    float _2116 = fma(_2113, cbSceneParam._m0[89u].z, fma(_2111, cbSceneParam._m0[89u].y, _2109 * cbSceneParam._m0[89u].x));
    float _2119 = fma(_2113, cbSceneParam._m0[90u].z, fma(_2111, cbSceneParam._m0[90u].y, _2109 * cbSceneParam._m0[90u].x));
    float _2122 = fma(_2113, cbSceneParam._m0[91u].z, fma(_2111, cbSceneParam._m0[91u].y, _2109 * cbSceneParam._m0[91u].x));
    float _2156 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2160 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2164 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2168 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2169 = _2156 / _2168;
    float _2170 = _2160 / _2168;
    float _2171 = _2164 / _2168;
    float _2318;
    float _2319;
    float _2320;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2198 = ((uint(_2171 > cbSceneParam._m0[59u].y) + uint(_2171 > cbSceneParam._m0[59u].x)) + uint(_2171 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2199 = _2198 + 43u;
        uint _2207 = _2198 + 44u;
        uint _2215 = _2198 + 45u;
        uint _2223 = _2198 + 46u;
        float _2234 = fma(_2168, cbSceneParam._m0[_2199].w, fma(_2164, cbSceneParam._m0[_2199].z, fma(_2160, cbSceneParam._m0[_2199].y, _2156 * cbSceneParam._m0[_2199].x)));
        float _2238 = fma(_2168, cbSceneParam._m0[_2207].w, fma(_2164, cbSceneParam._m0[_2207].z, fma(_2160, cbSceneParam._m0[_2207].y, _2156 * cbSceneParam._m0[_2207].x)));
        float _2246 = fma(_2168, cbSceneParam._m0[_2223].w, fma(_2164, cbSceneParam._m0[_2223].z, fma(_2160, cbSceneParam._m0[_2223].y, _2156 * cbSceneParam._m0[_2223].x)));
        float _2251 = cbSceneParam._m0[33u].z * _2246;
        float _2253 = cbSceneParam._m0[33u].w * _2246;
        float _2256 = fma(_2168, cbSceneParam._m0[_2215].w, fma(_2164, cbSceneParam._m0[_2215].z, fma(_2160, cbSceneParam._m0[_2215].y, _2156 * cbSceneParam._m0[_2215].x))) / _2246;
        float _2304 = (cbSceneParam._m0[33u].x - sqrt(((_2170 * _2170) + (_2169 * _2169)) + (_2171 * _2171))) * cbSceneParam._m0[33u].y;
        float _4611 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2311 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2251 + _2234) / _2246, (_2253 + _2238) / _2246), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2253 + _2234) / _2246, (_2238 - _2251) / _2246), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2234 - _2251) / _2246, (_2238 - _2253) / _2246), _2256), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2234 - _2253) / _2246, (_2251 + _2238) / _2246), _2256), 0.0)).x), vec4(0.25)));
        _2318 = 1.0 - (_2311 * cbSceneParam._m0[34u].x);
        _2319 = 1.0 - (_2311 * cbSceneParam._m0[34u].y);
        _2320 = 1.0 - (_2311 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2318 = 1.0;
        _2319 = 1.0;
        _2320 = 1.0;
    }
    float _2384;
    float _2386;
    float _2388;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2372 = fma(_2168, cbSceneParam._m0[63u].w, fma(_2164, cbSceneParam._m0[63u].z, fma(_2160, cbSceneParam._m0[63u].y, _2156 * cbSceneParam._m0[63u].x)));
        float _2373 = fma(_2168, cbSceneParam._m0[60u].w, fma(_2164, cbSceneParam._m0[60u].z, fma(_2160, cbSceneParam._m0[60u].y, _2156 * cbSceneParam._m0[60u].x))) / _2372;
        float _2374 = fma(_2168, cbSceneParam._m0[61u].w, fma(_2164, cbSceneParam._m0[61u].z, fma(_2160, cbSceneParam._m0[61u].y, _2156 * cbSceneParam._m0[61u].x))) / _2372;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2373 >= cbSceneParam._m0[64u].x) && (_2374 >= cbSceneParam._m0[64u].y)) && (_2373 <= cbSceneParam._m0[64u].z)) && (_2374 <= cbSceneParam._m0[64u].w))
        {
            float _2512 = fma(_2168, cbSceneParam._m0[62u].w, fma(_2164, cbSceneParam._m0[62u].z, fma(_2160, cbSceneParam._m0[62u].y, _2156 * cbSceneParam._m0[62u].x))) / _2372;
            float _2516 = isnan(cbSceneParam._m0[41u].w) ? _2512 : (isnan(_2512) ? cbSceneParam._m0[41u].w : max(_2512, cbSceneParam._m0[41u].w));
            float _2559 = (cbSceneParam._m0[33u].x - sqrt(((_2170 * _2170) + (_2169 * _2169)) + (_2171 * _2171))) * cbSceneParam._m0[33u].y;
            float _4627 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
            float _2566 = (isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2373, cbSceneParam._m0[33u].w + _2374), _2516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2373, _2374 - cbSceneParam._m0[33u].z), _2516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2373 - cbSceneParam._m0[33u].z, _2374 - cbSceneParam._m0[33u].w), _2516), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2373 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2374), _2516), 0.0)).x), vec4(0.25)));
            float _2570 = 1.0 - (_2566 * cbSceneParam._m0[34u].x);
            float _2571 = 1.0 - (_2566 * cbSceneParam._m0[34u].y);
            float _2572 = 1.0 - (_2566 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2572) ? _2320 : (isnan(_2320) ? _2572 : min(_2320, _2572));
            frontier_phi_34_33_ladder_1 = isnan(_2571) ? _2319 : (isnan(_2319) ? _2571 : min(_2319, _2571));
            frontier_phi_34_33_ladder_2 = isnan(_2570) ? _2318 : (isnan(_2318) ? _2570 : min(_2318, _2570));
        }
        else
        {
            frontier_phi_34_33_ladder = _2320;
            frontier_phi_34_33_ladder_1 = _2319;
            frontier_phi_34_33_ladder_2 = _2318;
        }
        _2384 = frontier_phi_34_33_ladder_2;
        _2386 = frontier_phi_34_33_ladder_1;
        _2388 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2384 = _2318;
        _2386 = _2319;
        _2388 = _2320;
    }
    uvec4 _2393 = floatBitsToUint(cbInstanceData._m0[_258 + 5u]);
    uint _2395 = _2393.x * 14u;
    uint _2396 = _2395 + 13u;
    float _2403 = _1096 + (-1.0);
    float _2408 = (cbLight._m0[_2396].x * _2403) + 1.0;
    float _2409 = (cbLight._m0[_2396].y * _2403) + 1.0;
    float _2410 = (cbLight._m0[_2396].z * _2403) + 1.0;
    float _2411 = (cbLight._m0[_2396].w * _2403) + 1.0;
    uint _2412 = _2395 + 5u;
    float _2418 = isnan(1.0) ? _2409 : (isnan(_2409) ? 1.0 : min(_2409, 1.0));
    uint _2422 = _2395 + 4u;
    float _2431 = isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0));
    uint _2435 = _2395 | 1u;
    float _2446 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_931, _932, _933));
    float _2449 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_931, _932, _933));
    float _4663 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _4674 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
    float _2454 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * 0.3183098733425140380859375;
    float _2456 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * 0.3183098733425140380859375;
    float _2463 = ((cbLight._m0[_2412].x * _2418) * _2456) + (((cbLight._m0[_2422].x * _2384) * _2431) * _2454);
    float _2464 = ((_2418 * cbLight._m0[_2412].y) * _2456) + (((cbLight._m0[_2422].y * _2386) * _2431) * _2454);
    float _2465 = ((_2418 * cbLight._m0[_2412].z) * _2456) + (((cbLight._m0[_2422].z * _2388) * _2431) * _2454);
    uvec4 _2469 = floatBitsToUint(cbLight._m0[_2395 + 12u]);
    bool _2471 = _2469.x == 0u;
    float _2573;
    float _2575;
    float _2577;
    if (_2471)
    {
        _2573 = _2463;
        _2575 = _2464;
        _2577 = _2465;
    }
    else
    {
        uint _2581 = _2395 + 6u;
        float _2597 = (dot(vec3(cbLight._m0[_2395 + 2u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2598 = _2597 * _2597;
        float _4685 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2599 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2600 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2573 = (((cbLight._m0[_2581].x * 0.3183098733425140380859375) * _2599) * _2600) + _2463;
        _2575 = (((cbLight._m0[_2581].y * 0.3183098733425140380859375) * _2599) * _2600) + _2464;
        _2577 = (((cbLight._m0[_2581].z * 0.3183098733425140380859375) * _2599) * _2600) + _2465;
    }
    bool _2580 = _2469.y == 0u;
    float _2635;
    float _2637;
    float _2639;
    if (_2580)
    {
        _2635 = _2573;
        _2637 = _2575;
        _2639 = _2577;
    }
    else
    {
        uint _2808 = _2395 + 7u;
        float _2824 = (dot(vec3(cbLight._m0[_2395 + 3u].xyz), vec3(_931, _932, _933)) * 0.5) + 0.5;
        float _2825 = _2824 * _2824;
        float _4701 = isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0));
        float _2826 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2827 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
        _2635 = (((cbLight._m0[_2808].x * 0.3183098733425140380859375) * _2826) * _2827) + _2573;
        _2637 = (((cbLight._m0[_2808].y * 0.3183098733425140380859375) * _2826) * _2827) + _2575;
        _2639 = (((cbLight._m0[_2808].z * 0.3183098733425140380859375) * _2826) * _2827) + _2577;
    }
    uint _2642 = _2395 + 8u;
    float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2395].w)) * _934) * 0.949999988079071044921875);
    float _2656 = _2655 * _2655;
    float _2657 = cbLight._m0[_2395].x + _1010;
    float _2658 = cbLight._m0[_2395].y + _1011;
    float _2659 = cbLight._m0[_2395].z + _1012;
    float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
    float _2664 = _2663 * _2657;
    float _2665 = _2663 * _2658;
    float _2666 = _2663 * _2659;
    float _2667 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2395].xyz));
    float _4717 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
    float _2670 = isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0));
    float _4728 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
    float _2671 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
    float _2672 = dot(vec3(_931, _932, _933), vec3(_2664, _2665, _2666));
    float _4739 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
    float _2676 = dot(vec3(cbLight._m0[_2395].xyz), vec3(_2664, _2665, _2666));
    float _4750 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
    float _2680 = _2656 * _2656;
    float _2684 = ((_2675 * _2675) * (_2680 + (-1.0))) + 1.0;
    float _2692 = exp2(log2(1.0 - (isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0)))) * 5.0);
    float _2693 = 0.959999978542327880859375 - _1077;
    float _2695 = 0.959999978542327880859375 - _1078;
    float _2696 = 0.959999978542327880859375 - _1079;
    float _2703 = 1.0 - _2656;
    float _2714 = (0.5 / (((_2671 * ((_2670 * _2703) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _2703) + _2656) * _2670))) * _2670;
    float _4761 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2716 = (isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0))) * (_2680 / ((_2684 * _2684) * 3.141590118408203125));
    uint _2730 = _2395 + 9u;
    float _2741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2435].w)) * _934) * 0.949999988079071044921875);
    float _2742 = _2741 * _2741;
    float _2743 = cbLight._m0[_2435].x + _1010;
    float _2744 = cbLight._m0[_2435].y + _1011;
    float _2745 = cbLight._m0[_2435].z + _1012;
    float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
    float _2750 = _2749 * _2743;
    float _2751 = _2749 * _2744;
    float _2752 = _2749 * _2745;
    float _2753 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2435].xyz));
    float _4772 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
    float _2756 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
    float _2757 = dot(vec3(_931, _932, _933), vec3(_2750, _2751, _2752));
    float _4783 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
    float _2760 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
    float _2761 = dot(vec3(cbLight._m0[_2435].xyz), vec3(_2750, _2751, _2752));
    float _4794 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
    float _2765 = _2742 * _2742;
    float _2769 = ((_2760 * _2760) * (_2765 + (-1.0))) + 1.0;
    float _2776 = exp2(log2(1.0 - (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0)))) * 5.0);
    float _2783 = 1.0 - _2742;
    float _2793 = (0.5 / (((_2671 * ((_2756 * _2783) + _2742)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _2783) + _2742) * _2756))) * _2756;
    float _4805 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
    float _2795 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2765 / ((_2769 * _2769) * 3.141590118408203125));
    float _2805 = (((((_2776 * _2693) + _1080) * cbLight._m0[_2730].x) * _2795) * _2418) + ((((cbLight._m0[_2642].x * _2384) * ((_2692 * _2693) + _1080)) * _2716) * _2431);
    float _2806 = (((((_2776 * _2695) + _1082) * cbLight._m0[_2730].y) * _2795) * _2418) + ((((cbLight._m0[_2642].y * _2386) * ((_2692 * _2695) + _1082)) * _2716) * _2431);
    float _2807 = (((((_2776 * _2696) + _1083) * cbLight._m0[_2730].z) * _2795) * _2418) + ((((cbLight._m0[_2642].z * _2388) * ((_2692 * _2696) + _1083)) * _2716) * _2431);
    float _2863;
    float _2865;
    float _2867;
    if (_2471)
    {
        _2863 = _2805;
        _2865 = _2806;
        _2867 = _2807;
    }
    else
    {
        uint _2869 = _2395 + 2u;
        uint _2873 = _2395 + 10u;
        float _2887 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2869].w)) * _934) * 0.949999988079071044921875);
        float _2888 = _2887 * _2887;
        float _2889 = cbLight._m0[_2869].x + _1010;
        float _2890 = cbLight._m0[_2869].y + _1011;
        float _2891 = cbLight._m0[_2869].z + _1012;
        float _2895 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
        float _2896 = _2895 * _2889;
        float _2897 = _2895 * _2890;
        float _2898 = _2895 * _2891;
        float _2899 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2869].xyz));
        float _4816 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        float _2902 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2903 = dot(vec3(_931, _932, _933), vec3(_2896, _2897, _2898));
        float _4827 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        float _2906 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
        float _2907 = dot(vec3(cbLight._m0[_2869].xyz), vec3(_2896, _2897, _2898));
        float _4838 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
        float _2911 = _2888 * _2888;
        float _2915 = ((_2906 * _2906) * (_2911 + (-1.0))) + 1.0;
        float _2922 = exp2(log2(1.0 - (isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0)))) * 5.0);
        float _2929 = 1.0 - _2888;
        float _2939 = (0.5 / (((_2671 * ((_2902 * _2929) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _2929) + _2888) * _2902))) * _2902;
        float _4849 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
        float _2941 = (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0))) * (_2911 / ((_2915 * _2915) * 3.141590118408203125));
        float _2942 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
        _2863 = (((((_2922 * _2693) + _1080) * cbLight._m0[_2873].x) * _2941) * _2942) + _2805;
        _2865 = (((((_2922 * _2695) + _1082) * cbLight._m0[_2873].y) * _2941) * _2942) + _2806;
        _2867 = (((((_2922 * _2696) + _1083) * cbLight._m0[_2873].z) * _2941) * _2942) + _2807;
    }
    float _2973;
    float _2975;
    float _2977;
    if (_2580)
    {
        _2973 = _2863;
        _2975 = _2865;
        _2977 = _2867;
    }
    else
    {
        uint _2984 = _2395 + 3u;
        uint _2988 = _2395 + 11u;
        float _3002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2984].w)) * _934) * 0.949999988079071044921875);
        float _3003 = _3002 * _3002;
        float _3004 = cbLight._m0[_2984].x + _1010;
        float _3005 = cbLight._m0[_2984].y + _1011;
        float _3006 = cbLight._m0[_2984].z + _1012;
        float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
        float _3011 = _3010 * _3004;
        float _3012 = _3010 * _3005;
        float _3013 = _3010 * _3006;
        float _3014 = dot(vec3(_931, _932, _933), vec3(cbLight._m0[_2984].xyz));
        float _4865 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
        float _3017 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
        float _3018 = dot(vec3(_931, _932, _933), vec3(_3011, _3012, _3013));
        float _4876 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
        float _3021 = isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0));
        float _3022 = dot(vec3(cbLight._m0[_2984].xyz), vec3(_3011, _3012, _3013));
        float _4887 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
        float _3026 = _3003 * _3003;
        float _3030 = ((_3021 * _3021) * (_3026 + (-1.0))) + 1.0;
        float _3037 = exp2(log2(1.0 - (isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0)))) * 5.0);
        float _3044 = 1.0 - _3003;
        float _3054 = (0.5 / (((_2671 * ((_3017 * _3044) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_2671 * _3044) + _3003) * _3017))) * _3017;
        float _4898 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
        float _3056 = (isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_3026 / ((_3030 * _3030) * 3.141590118408203125));
        float _3057 = isnan(1.0) ? _2411 : (isnan(_2411) ? 1.0 : min(_2411, 1.0));
        _2973 = (((((_3037 * _2693) + _1080) * cbLight._m0[_2988].x) * _3056) * _3057) + _2863;
        _2975 = (((((_3037 * _2695) + _1082) * cbLight._m0[_2988].y) * _3056) * _3057) + _2865;
        _2977 = (((((_3037 * _2696) + _1083) * cbLight._m0[_2988].z) * _3056) * _3057) + _2867;
    }
    float _3123;
    float _3125;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_2393.y == 0u)
    {
        uvec4 _3078 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3079 = _3078.x;
        uint _3090 = uint((float(_3078.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1019) / _3079))) + floor(float(uint(cbSceneParam._m0[85u].x * _1018) / _3079)));
        float _3100 = (log2(_2171 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3101 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
        uint _3104 = uint(isnan(14.0) ? _3101 : (isnan(_3101) ? 14.0 : min(_3101, 14.0)));
        uvec4 _3109 = texelFetch(g_lightClusterGridBuffer, int(((_3104 << 2u) + (_3090 << 6u)) >> 2u));
        uint _3110 = _3109.x;
        uint _3111 = _3078.z;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((((1u << ((_3111 >> 4u) & 15u)) + 4294967295u) & _3110) == 0u) || ((_3111 & 240u) == 0u))
        {
            _3190 = 0.0;
            _3192 = 0.0;
            _3194 = 0.0;
            _3196 = 0.0;
            _3198 = 0.0;
            _3200 = 0.0;
        }
        else
        {
            float _3191;
            float _3193;
            float _3195;
            float _3197;
            float _3199;
            float _3201;
            float _3335 = 0.0;
            float _3336 = 0.0;
            float _3337 = 0.0;
            float _3338 = 0.0;
            float _3339 = 0.0;
            float _3340 = 0.0;
            uint _3341 = 0u;
            uint _3350;
            bool _3351;
            for (;;)
            {
                _3350 = texelFetch(g_lightClassification, int((((_3104 << 5u) + (_3090 << 9u)) + (_3341 << 2u)) >> 2u)).x;
                _3351 = _3350 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3351)
                {
                    frontier_phi_66_pred = _3340;
                    frontier_phi_66_pred_1 = _3339;
                    frontier_phi_66_pred_2 = _3338;
                    frontier_phi_66_pred_3 = _3337;
                    frontier_phi_66_pred_4 = _3336;
                    frontier_phi_66_pred_5 = _3335;
                }
                else
                {
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    uint _3465;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3337;
                    _3462 = _3338;
                    _3463 = _3339;
                    _3464 = _3340;
                    _3465 = _3350;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    for (;;)
                    {
                        uint _3469 = uint(findLSB(_3465)) + (_3341 << 5u);
                        uint _3466 = (_3465 + 4294967295u) & _3465;
                        uint _3471 = _3469 * 48u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3471)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 3u)).x));
                        uint _3491 = (_3469 * 48u) + 4u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 3u)).x));
                        uint _3510 = (_3469 * 48u) + 8u;
                        vec3 _3521 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x));
                        float _3525 = _3485.x - _2169;
                        float _3526 = _3485.y - _2170;
                        float _3527 = _3485.z - _2171;
                        float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                        float _3531 = inversesqrt(_3528);
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3535 = dot(vec3(_1037, _1040, _1043), vec3(_3532, _3533, _3534));
                        float _3540 = 1.0 - (_3528 * _3485.w);
                        float _4924 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4924 : (isnan(_4924) ? 1.0 : min(_4924, 1.0));
                        float _3542 = sqrt(_3528) * _3504.w;
                        float _3545 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                        float _3546 = _3545 * _3545;
                        float _3549 = ((1.0 - _3546) * _3535) + _3546;
                        float _3552 = _3542 * _3542;
                        float _3556 = ((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3541) / ((_3552 * 0.699999988079071044921875) + 1.0);
                        float _3560 = (-0.0) - _2169;
                        float _3561 = (-0.0) - _2170;
                        float _3562 = (-0.0) - _2171;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3567 = _3566 * _3560;
                        float _3568 = _3566 * _3561;
                        float _3569 = _3566 * _3562;
                        float _3576 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                        float _3577 = 1.0 - _1112;
                        float _3584 = sqrt(1.0 - ((1.0 - (_3577 * _3577)) * (1.0 - (_3576 * _3576))));
                        float _3585 = _3584 * _3584;
                        float _3586 = _3585 * _3585;
                        float _3587 = _3567 + _3532;
                        float _3588 = _3568 + _3533;
                        float _3589 = _3569 + _3534;
                        float _3593 = inversesqrt(dot(vec3(_3587, _3588, _3589), vec3(_3587, _3588, _3589)));
                        float _3597 = dot(vec3(_1037, _1040, _1043), vec3(_3567, _3568, _3569));
                        float _4940 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3600 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
                        float _3601 = dot(vec3(_1037, _1040, _1043), vec3(_3593 * _3587, _3593 * _3588, _3593 * _3589));
                        float _4951 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0));
                        float _3604 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3608 = ((_3604 * _3604) * (_3586 + (-1.0))) + 1.0;
                        float _3609 = _3545 * _3585;
                        float _3610 = _3609 * _3609;
                        float _3613 = ((1.0 - _3610) * _3535) + _3610;
                        float _4962 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3614 = isnan(1.0) ? _4962 : (isnan(_4962) ? 1.0 : min(_4962, 1.0));
                        float _3615 = 1.0 - _3585;
                        float _3625 = (0.5 / (((_3614 * ((_3600 * _3615) + _3585)) + 9.9999999392252902907785028219223e-09) + (((_3614 * _3615) + _3585) * _3600))) * _3614;
                        float _4973 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3636 = (((_3586 * 3.1415927410125732421875) * (isnan(1.0) ? _4973 : (isnan(_4973) ? 1.0 : min(_4973, 1.0)))) / ((_3608 * _3608) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125))) * _3541;
                        _3394 = (_3556 * _3504.x) + _3462;
                        _3395 = (_3556 * _3504.y) + _3463;
                        _3396 = (_3556 * _3504.z) + _3464;
                        _3391 = (_3636 * _3521.x) + _3459;
                        _3392 = (_3636 * _3521.y) + _3460;
                        _3393 = (_3636 * _3521.z) + _3461;
                        if (_3466 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3393;
                            _3462 = _3394;
                            _3463 = _3395;
                            _3464 = _3396;
                            _3465 = _3466;
                        }
                    }
                    frontier_phi_66_pred = _3396;
                    frontier_phi_66_pred_1 = _3395;
                    frontier_phi_66_pred_2 = _3394;
                    frontier_phi_66_pred_3 = _3393;
                    frontier_phi_66_pred_4 = _3392;
                    frontier_phi_66_pred_5 = _3391;
                }
                _3201 = frontier_phi_66_pred;
                _3199 = frontier_phi_66_pred_1;
                _3197 = frontier_phi_66_pred_2;
                _3195 = frontier_phi_66_pred_3;
                _3193 = frontier_phi_66_pred_4;
                _3191 = frontier_phi_66_pred_5;
                uint _3342 = _3341 + 1u;
                if (_3342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3335 = _3191;
                    _3336 = _3193;
                    _3337 = _3195;
                    _3338 = _3197;
                    _3339 = _3199;
                    _3340 = _3201;
                    _3341 = _3342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3190 = _3191;
            _3192 = _3193;
            _3194 = _3195;
            _3196 = _3197;
            _3198 = _3199;
            _3200 = _3201;
        }
        uvec4 _3204 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3205 = _3204.z;
        uint _3207 = (_3205 >> 8u) & 15u;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        float _3311;
        float _3313;
        if (((4294967295u << _3207) & _3110) == 0u)
        {
            _3303 = _3190;
            _3305 = _3192;
            _3307 = _3194;
            _3309 = _3196;
            _3311 = _3198;
            _3313 = _3200;
        }
        else
        {
            float _3328 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
            float _3329 = _3328 * _2169;
            float _3330 = _3328 * _2170;
            float _3331 = _3328 * _2171;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3207 < ((_3205 >> 12u) & 15u))
            {
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3312;
                float _3314;
                float _3442 = _3190;
                float _3443 = _3192;
                float _3444 = _3194;
                float _3445 = _3196;
                float _3446 = _3198;
                float _3447 = _3200;
                uint _3448 = _3207;
                uint _3457;
                bool _3458;
                for (;;)
                {
                    _3457 = texelFetch(g_lightClassification, int((((_3104 << 5u) + (_3090 << 9u)) + (_3448 << 2u)) >> 2u)).x;
                    _3458 = _3457 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3458)
                    {
                        frontier_phi_72_pred = _3447;
                        frontier_phi_72_pred_1 = _3446;
                        frontier_phi_72_pred_2 = _3445;
                        frontier_phi_72_pred_3 = _3444;
                        frontier_phi_72_pred_4 = _3443;
                        frontier_phi_72_pred_5 = _3442;
                    }
                    else
                    {
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3644;
                        float _3645;
                        float _3646;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3937;
                        float _3938;
                        float _3939;
                        float _3654 = _3442;
                        float _3655 = _3443;
                        float _3656 = _3444;
                        float _3657 = _3445;
                        float _3658 = _3446;
                        float _3659 = _3447;
                        uint _3660 = _3457;
                        uint _3661;
                        vec4 _3686;
                        float _3687;
                        vec4 _3702;
                        vec3 _3714;
                        vec4 _3729;
                        vec4 _3744;
                        float _3790;
                        bool _3791;
                        for (;;)
                        {
                            uint _3671 = ((_3448 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3660));
                            _3661 = (_3660 + 4294967295u) & _3660;
                            uint _3673 = _3671 * 40u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            _3687 = _3686.w;
                            uint _3689 = (_3671 * 40u) + 4u;
                            _3702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3689 + 3u)).x));
                            uint _3704 = (_3671 * 40u) + 8u;
                            _3714 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x));
                            uint _3716 = (_3671 * 40u) + 16u;
                            _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            uint _3731 = (_3671 * 40u) + 20u;
                            _3744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3731 + 3u)).x));
                            uint _3746 = (_3671 * 40u) + 24u;
                            vec4 _3759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3746 + 3u)).x));
                            uint _3765 = (_3671 * 40u) + 28u;
                            vec4 _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            _3790 = fma(_2171, _3778.z, fma(_2170, _3778.y, _3778.x * _2169)) + _3778.w;
                            _3791 = !((fma(_2171, _3759.z, fma(_2170, _3759.y, _3759.x * _2169)) + _3759.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3791)
                            {
                                float _3818 = _3686.x - _2169;
                                float _3819 = _3686.y - _2170;
                                float _3820 = _3686.z - _2171;
                                float _3821 = dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820));
                                float _3824 = inversesqrt(_3821);
                                float _3825 = _3824 * _3818;
                                float _3826 = _3824 * _3819;
                                float _3827 = _3824 * _3820;
                                float _3831 = 1.0 - (_3821 / (_3687 * _3687));
                                float _4984 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _4984 : (isnan(_4984) ? 1.0 : min(_4984, 1.0));
                                float _3836 = sqrt(_3821) * _3702.w;
                                float _3838 = 1.39999997615814208984375 / (_3836 + 1.39999997615814208984375);
                                float _3839 = _3838 * _3838;
                                float _3842 = ((1.0 - _3839) * dot(vec3(_3825, _3826, _3827), vec3(_1037, _1040, _1043))) + _3839;
                                float _3845 = _3836 * _3836;
                                float _3849 = (fma(_2171, _3729.z, fma(_2170, _3729.y, _3729.x * _2169)) + _3729.w) / _3790;
                                float _3850 = (fma(_2171, _3744.z, fma(_2170, _3744.y, _3744.x * _2169)) + _3744.w) / _3790;
                                float _3854 = 1.0 - dot(vec2(_3849, _3850), vec2(_3849, _3850));
                                float _5000 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3855 = isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0));
                                float _3856 = _3855 * (((isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0))) * _3832) / ((_3845 * 0.699999988079071044921875) + 1.0));
                                float _3868 = exp2(log2(1.0 / ((_3845 * 3.5) + 5.0)) * 0.25);
                                float _3869 = 1.0 - _1112;
                                float _3876 = sqrt(1.0 - ((1.0 - (_3869 * _3869)) * (1.0 - (_3868 * _3868))));
                                float _3877 = _3876 * _3876;
                                float _3878 = _3877 * _3877;
                                float _3879 = _3825 - _3329;
                                float _3880 = _3826 - _3330;
                                float _3881 = _3827 - _3331;
                                float _3885 = inversesqrt(dot(vec3(_3879, _3880, _3881), vec3(_3879, _3880, _3881)));
                                float _3889 = dot(vec3(_1037, _1040, _1043), vec3((-0.0) - _3329, (-0.0) - _3330, (-0.0) - _3331));
                                float _5011 = isnan(0.0) ? _3889 : (isnan(_3889) ? 0.0 : max(_3889, 0.0));
                                float _3892 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3893 = dot(vec3(_1037, _1040, _1043), vec3(_3885 * _3879, _3885 * _3880, _3885 * _3881));
                                float _5022 = isnan(0.0) ? _3893 : (isnan(_3893) ? 0.0 : max(_3893, 0.0));
                                float _3896 = isnan(1.0) ? _5022 : (isnan(_5022) ? 1.0 : min(_5022, 1.0));
                                float _3900 = ((_3896 * _3896) * (_3878 + (-1.0))) + 1.0;
                                float _3901 = _3838 * _3877;
                                float _3902 = _3901 * _3901;
                                float _3908 = ((1.0 - _3902) * dot(vec3(_1037, _1040, _1043), vec3(_3825, _3826, _3827))) + _3902;
                                float _5033 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3909 = isnan(1.0) ? _5033 : (isnan(_5033) ? 1.0 : min(_5033, 1.0));
                                float _3910 = 1.0 - _3877;
                                float _3920 = (0.5 / (((_3909 * ((_3892 * _3910) + _3877)) + 9.9999999392252902907785028219223e-09) + (((_3909 * _3910) + _3877) * _3892))) * _3909;
                                float _5044 = isnan(0.0) ? _3920 : (isnan(_3920) ? 0.0 : max(_3920, 0.0));
                                float _3930 = (_3855 * _3832) * (((_3878 * 3.1415927410125732421875) * (isnan(1.0) ? _5044 : (isnan(_5044) ? 1.0 : min(_5044, 1.0)))) / ((_3900 * _3900) * ((_3845 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3856 * _3702.y;
                                frontier_phi_78_pred_1 = _3856 * _3702.x;
                                frontier_phi_78_pred_2 = _3930 * _3714.z;
                                frontier_phi_78_pred_3 = _3930 * _3714.y;
                                frontier_phi_78_pred_4 = _3930 * _3714.x;
                                frontier_phi_78_pred_5 = _3856 * _3702.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3938 = frontier_phi_78_pred;
                            _3937 = frontier_phi_78_pred_1;
                            _3936 = frontier_phi_78_pred_2;
                            _3935 = frontier_phi_78_pred_3;
                            _3934 = frontier_phi_78_pred_4;
                            _3939 = frontier_phi_78_pred_5;
                            _3644 = _3937 + _3657;
                            _3645 = _3938 + _3658;
                            _3646 = _3939 + _3659;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            _3643 = _3936 + _3656;
                            if (_3661 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3644;
                                _3658 = _3645;
                                _3659 = _3646;
                                _3660 = _3661;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3646;
                        frontier_phi_72_pred_1 = _3645;
                        frontier_phi_72_pred_2 = _3644;
                        frontier_phi_72_pred_3 = _3643;
                        frontier_phi_72_pred_4 = _3642;
                        frontier_phi_72_pred_5 = _3641;
                    }
                    _3314 = frontier_phi_72_pred;
                    _3312 = frontier_phi_72_pred_1;
                    _3310 = frontier_phi_72_pred_2;
                    _3308 = frontier_phi_72_pred_3;
                    _3306 = frontier_phi_72_pred_4;
                    _3304 = frontier_phi_72_pred_5;
                    uint _3449 = _3448 + 1u;
                    if (_3449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3442 = _3304;
                        _3443 = _3306;
                        _3444 = _3308;
                        _3445 = _3310;
                        _3446 = _3312;
                        _3447 = _3314;
                        _3448 = _3449;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3314;
                frontier_phi_60_61_ladder_1 = _3312;
                frontier_phi_60_61_ladder_2 = _3308;
                frontier_phi_60_61_ladder_3 = _3306;
                frontier_phi_60_61_ladder_4 = _3304;
                frontier_phi_60_61_ladder_5 = _3310;
            }
            else
            {
                frontier_phi_60_61_ladder = _3200;
                frontier_phi_60_61_ladder_1 = _3198;
                frontier_phi_60_61_ladder_2 = _3194;
                frontier_phi_60_61_ladder_3 = _3192;
                frontier_phi_60_61_ladder_4 = _3190;
                frontier_phi_60_61_ladder_5 = _3196;
            }
            _3303 = frontier_phi_60_61_ladder_4;
            _3305 = frontier_phi_60_61_ladder_3;
            _3307 = frontier_phi_60_61_ladder_2;
            _3309 = frontier_phi_60_61_ladder_5;
            _3311 = frontier_phi_60_61_ladder_1;
            _3313 = frontier_phi_60_61_ladder;
        }
        float _3318 = isnan(1.0) ? _1096 : (isnan(_1096) ? 1.0 : min(_1096, 1.0));
        _3123 = (_3318 * _3309) + _2635;
        _3125 = (_3318 * _3311) + _2637;
        _3127 = (_3318 * _3313) + _2639;
        _3129 = ((_3303 * _1080) * _3318) + _2973;
        _3131 = ((_3305 * _1082) * _3318) + _2975;
        _3133 = ((_3307 * _1083) * _3318) + _2977;
    }
    else
    {
        _3123 = _2635;
        _3125 = _2637;
        _3127 = _2639;
        _3129 = _2973;
        _3131 = _2975;
        _3133 = _2977;
    }
    float _5060 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _5071 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _5082 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    uint _3153 = _258 + 6u;
    float _3161 = _1018 / cbSceneParam._m0[86u].x;
    float _3162 = _1019 / cbSceneParam._m0[86u].y;
    vec4 _3176 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3161, _3162, (log2((isnan(cbSceneParam._m0[77u].w) ? _953 : (isnan(_953) ? cbSceneParam._m0[77u].w : min(_953, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3178 = _3176.x;
    float _3179 = _3176.y;
    float _3180 = _3176.z;
    float _3181 = _3176.w;
    float _3253;
    float _3255;
    float _3257;
    float _3259;
    if (_953 > cbSceneParam._m0[78u].w)
    {
        float _3215 = isnan(_953) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _953 : min(cbSceneParam._m0[80u].w, _953));
        float _3216 = _3215 / _953;
        float _3227 = _3216 * _1003;
        float _3228 = _1004 * _3216;
        float _3229 = (-0.0) - _3228;
        float _3231 = _3216 * _1005;
        float _3233 = (cbSceneParam._m0[77u].w * _3229) / _3215;
        float _3234 = _3233 + cbSceneParam._m0[79u].w;
        float _3235 = cbSceneParam._m0[79u].w - _3228;
        float _3241 = sqrt(((_3227 * _3227) + (_3228 * _3228)) + (_3231 * _3231));
        float _3244 = (1.0 - (cbSceneParam._m0[77u].w / _3215)) * _3241;
        float _3249 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3251 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3404;
        if (abs((_3229 - _3233) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3404 = ((((_3234 > 0.0) ? exp2(_3249 * _3234) : (2.0 - exp2(_3251 * _3234))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3244;
        }
        else
        {
            float _3364 = 1.0 / cbSceneParam._m0[80u].x;
            float _3365 = isnan(_3235) ? _3234 : (isnan(_3234) ? _3235 : max(_3234, _3235));
            float _3366 = isnan(_3235) ? _3234 : (isnan(_3234) ? _3235 : min(_3234, _3235));
            float _3375 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : min(_3365, 0.0));
            float _3376 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : min(_3366, 0.0));
            _3404 = ((abs(_3241 / _3229) * cbSceneParam._m0[80u].y) * ((((_3375 - _3376) * 2.0) - ((exp2(_3249 * (isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0)))) - exp2(_3249 * (isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0))))) * _3364)) - ((exp2(_3251 * _3375) - exp2(_3251 * _3376)) * _3364))) + (_3244 * cbSceneParam._m0[80u].z);
        }
        vec4 _3406 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3161, _3162, 1.0), 0.0);
        float _3415 = exp2((_3404 * (-1.44269502162933349609375)) * (1.0 - _3406.w));
        float _3416 = log2(_3415);
        float _3432 = log2(_3181);
        _3253 = (exp2(_3432 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3416 * cbSceneParam._m0[78u].x)) * _3406.x) / cbSceneParam._m0[78u].x)) + _3178;
        _3255 = (exp2(_3432 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3416 * cbSceneParam._m0[78u].y)) * _3406.y) / cbSceneParam._m0[78u].y)) + _3179;
        _3257 = (exp2(_3432 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3416 * cbSceneParam._m0[78u].z)) * _3406.z) / cbSceneParam._m0[78u].z)) + _3180;
        _3259 = _3415 * _3181;
    }
    else
    {
        _3253 = _3178;
        _3255 = _3179;
        _3257 = _3180;
        _3259 = _3181;
    }
    float _3271 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3272 = _3271 == 3.0;
    float _3273 = log2(_3259);
    float _3280 = exp2(_3273 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (_3123 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1096))) + ((_3129 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3281 = exp2(_3273 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0))) * (_3125 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1096))) + ((_3131 + ((isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3282 = exp2(_3273 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0))) * (_3127 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1096))) + ((_3133 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1902)) * cbPerFrame._m0[3u].x));
    float _3291 = (_3271 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3291 * (_3272 ? _3280 : (_3280 + (cbSceneParam._m0[72u].w * _3253)));
    SV_Target.y = _3291 * (_3272 ? _3281 : (_3281 + (cbSceneParam._m0[72u].w * _3255)));
    SV_Target.z = _3291 * (_3272 ? _3282 : (_3282 + (cbSceneParam._m0[72u].w * _3257)));
    SV_Target.w = cbInstanceData._m0[_3153].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3153].w;
}


